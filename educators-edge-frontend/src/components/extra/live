// MVP % LATEST
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor, { OnMount } from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight, BeakerIcon, CheckCircle, XCircle, Trash2, Lightbulb } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
// import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel } from "@/components/ui/alert-dialog";

// // --- TYPE DEFINITIONS (from both files) ---
// interface CodeFile { name: string; language: string; content: string; }
// interface LessonFile { id: string; filename: string; content: string; }
// interface Workspace { files: CodeFile[]; activeFileName: string; }
// interface StudentHomeworkState extends Workspace { terminalOutput: string; }
// interface Student { id: string; username: string; }
// interface Lesson { id: number; title: string; description: string; course_id: string; files: LessonFile[] }
// interface TestResult { passed: number; failed: number; total: number; results: string; }

// const stunServers = {
//   iceServers: [ { urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' } ],
// };

// // --- MODAL COMPONENTS (from ViewLessonPage) ---
// const TestResultsModal = ({ results, isLoading, onClose }: { results: TestResult | null, isLoading: boolean, onClose: () => void }) => (
//     <AlertDialog open={true} onOpenChange={onClose}>
//         <AlertDialogContent>
//             <AlertDialogHeader>
//                 <AlertDialogTitle>Test Results</AlertDialogTitle>
//                 <AlertDialogDescription className="pt-4 space-y-4">
//                     {isLoading ? "Running tests..." : results && (
//                         <>
//                             <div className={`p-4 rounded-md ${results.failed > 0 ? 'bg-destructive/10 text-destructive' : 'bg-green-500/10 text-green-700'}`}>
//                                 <h3 className="font-bold text-lg">
//                                     {results.failed > 0 ? `${results.failed} / ${results.total} Tests Failed` : `All ${results.total} Tests Passed!`}
//                                 </h3>
//                             </div>
//                             <div className="bg-muted p-4 rounded-md text-foreground whitespace-pre-wrap text-xs max-h-60 overflow-y-auto">
//                                 <code>{results.results}</code>
//                             </div>
//                         </>
//                     )}
//                 </AlertDialogDescription>
//             </AlertDialogHeader>
//             <AlertDialogFooter>
//                 <AlertDialogCancel>Close</AlertDialogCancel>
//             </AlertDialogFooter>
//         </AlertDialogContent>
//     </AlertDialog>
// );

// // --- HOMEWORK VIEW COMPONENT ---
// const HomeworkView: React.FC<{ lessonId: string; teacherSessionId: string; token: string | null; onLeave: () => void }> = ({ lessonId, teacherSessionId, token, onLeave }) => {
//     const [lesson, setLesson] = useState<Lesson | null>(null);
//     const [files, setFiles] = useState<LessonFile[]>([]);
//     const [activeFileId, setActiveFileId] = useState<string | null>(null);
//     const [testResults, setTestResults] = useState<TestResult | null>(null);
//     const [isTesting, setIsTesting] = useState(false);
//     const [isTestModalOpen, setIsTestModalOpen] = useState(false);

//     const hwWs = useRef<WebSocket | null>(null);
//     const hwTermRef = useRef<HTMLDivElement>(null);
//     const hwTerm = useRef<Terminal | null>(null);
//     const editorRef = useRef<any>(null);

//     const activeFile = files.find(f => f.id === activeFileId);

//     useEffect(() => {
//         const fetchLesson = async () => {
//             const res = await fetch(`http://localhost:5000/api/lessons/${lessonId}`, { headers: { 'Authorization': `Bearer ${token}` } });
//             if (res.ok) {
//                 const data = await res.json();
//                 setLesson(data);
//                 setFiles(data.files || []);
//                 if (data.files && data.files.length > 0) {
//                     setActiveFileId(data.files[0].id);
//                 }
//             }
//         };
//         fetchLesson();
//     }, [lessonId, token]);

//     useEffect(() => {
//         const homeworkSessionId = crypto.randomUUID();
//         const wsUrl = `ws://localhost:5000?sessionId=${homeworkSessionId}&token=${token}&teacherSessionId=${teacherSessionId}&lessonId=${lessonId}`;
//         const currentWs = new WebSocket(wsUrl);
//         hwWs.current = currentWs;

//         currentWs.onopen = () => {
//             console.log(`[HOMEWORK] WebSocket for lesson ${lessonId} connected.`);
//             // Send join message after a short delay to ensure the main session socket is ready
//             setTimeout(() => {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_JOIN' }));
//             }, 500);
//         };
//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             if (message.type === 'TERMINAL_OUT') {
//                 hwTerm.current?.write(message.payload);
//             }
//         };

//         return () => {
//             if(currentWs.readyState === WebSocket.OPEN) {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_LEAVE' }));
//             }
//             currentWs.close();
//         };
//     }, [lessonId, teacherSessionId, token]);
    
//     // **FIX**: Send initial state once files are loaded and WS is open.
//     useEffect(() => {
//         if (files.length > 0 && hwWs.current?.readyState === WebSocket.OPEN) {
//             const broadcastFiles = files.map(f => ({ name: f.filename, language: 'javascript', content: f.content }));
//             const broadcastActiveFile = files[0]?.filename || '';
//             console.log("[HOMEWORK] Sending initial HOMEWORK_CODE_UPDATE:", { files: broadcastFiles, activeFileName: broadcastActiveFile });
//             hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_CODE_UPDATE', payload: { files: broadcastFiles, activeFileName: broadcastActiveFile } }));
//         }
//     }, [files, hwWs.current?.readyState]);


//     useEffect(() => {
//         if (hwTermRef.current && !hwTerm.current) {
//             const fitAddon = new FitAddon();
//             const term = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             term.loadAddon(fitAddon);
//             term.open(hwTermRef.current);
//             fitAddon.fit();
//             term.onData(data => {
//                 if (hwWs.current?.readyState === WebSocket.OPEN) {
//                     hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_TERMINAL_IN', payload: data }));
//                 }
//             });
//             hwTerm.current = term;
//         }
//     }, []);

//     const handleFileContentChange = (content: string | undefined) => {
//         const updatedFiles = files.map(file => file.id === activeFileId ? { ...file, content: content || '' } : file);
//         setFiles(updatedFiles);
//         if (hwWs.current?.readyState === WebSocket.OPEN) {
//             const broadcastFiles = updatedFiles.map(f => ({ name: f.filename, language: 'javascript', content: f.content }));
//             const broadcastActiveFile = activeFile ? activeFile.filename : '';
//             hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_CODE_UPDATE', payload: { files: broadcastFiles, activeFileName: broadcastActiveFile } }));
//         }
//     };

//     const handleRunTests = async () => {
//         if (!lessonId) return;
//         setIsTesting(true);
//         setIsTestModalOpen(true);
//         setTestResults(null);
//         try {
//             const response = await fetch(`http://localhost:5000/api/lessons/${lessonId}/run-tests`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                 body: JSON.stringify({ files })
//             });
//             const data: TestResult = await response.json();
//             setTestResults(data);
//         } catch (err) {
//             setTestResults({ passed: 0, failed: 1, total: 1, results: "An error occurred while running tests." });
//         } finally {
//             setIsTesting(false);
//         }
//     };
    
//     if (!lesson) return <div>Loading Lesson...</div>;

//     return (
//         <div className="w-full h-full flex flex-col">
//             {isTestModalOpen && <TestResultsModal results={testResults} isLoading={isTesting} onClose={() => setIsTestModalOpen(false)} />}
//             <header className="flex-shrink-0 flex justify-between items-center p-4 border-b bg-white">
//                 <div>
//                     <h1 className="text-2xl font-bold">{lesson.title}</h1>
//                     <p className="text-muted-foreground">You are in a live homework session.</p>
//                 </div>
//                 <div className="flex items-center gap-4">
//                     <Button onClick={handleRunTests} disabled={isTesting}><BeakerIcon className="mr-2 h-4 w-4" /> Run Tests</Button>
//                     <Button variant="outline" onClick={onLeave}>Return to Classroom</Button>
//                 </div>
//             </header>
//             <main className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 p-6 overflow-hidden">
//                 <div className="lg:col-span-1 flex flex-col gap-6">
//                     <Card><CardHeader><CardTitle>Instructions</CardTitle></CardHeader><CardContent><p>{lesson.description}</p></CardContent></Card>
//                     <Card className="flex-grow flex flex-col"><CardHeader><CardTitle>Project Files</CardTitle></CardHeader>
//                         <CardContent className="flex-grow overflow-y-auto">
//                             {files.map(file => (
//                                 <div key={file.id} onClick={() => setActiveFileId(file.id)} className={`flex items-center p-2 rounded-md cursor-pointer ${activeFileId === file.id ? 'bg-accent' : 'hover:bg-accent/50'}`}>
//                                     <FileIcon className="mr-2 h-4 w-4" />{file.filename}
//                                 </div>
//                             ))}
//                         </CardContent>
//                     </Card>
//                 </div>
//                 <div className="lg:col-span-2 h-full flex flex-col rounded-lg border bg-background overflow-hidden">
//                     <PanelGroup direction="vertical">
//                         <Panel defaultSize={70} minSize={20}>
//                             <Editor height="100%" theme="vs-dark" path={activeFile?.filename} value={activeFile?.content} onChange={handleFileContentChange} onMount={(editor) => editorRef.current = editor} />
//                         </Panel>
//                         <PanelResizeHandle className="h-2 bg-slate-200" />
//                         <Panel defaultSize={30} minSize={10}>
//                             <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                 <div className="p-2 bg-slate-800 text-white text-sm font-semibold flex items-center"><TerminalIcon className="mr-2 h-4 w-4" />Terminal</div>
//                                 <div ref={hwTermRef} className="flex-grow p-2" />
//                             </div>
//                         </Panel>
//                     </PanelGroup>
//                 </div>
//             </main>
//         </div>
//     );
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     const [role, setRole] = useState<UserRole>('unknown');
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [isDoingHomework, setIsDoingHomework] = useState(false);

//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);
//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 } catch (err) { console.error("Could not get user media.", err); }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) setAvailableLessons(await response.json());
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[${role || 'CLIENT'}] Received:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     setFiles(message.payload.files);
//                     setActiveFileName(message.payload.activeFileName);
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     setPendingHomework(message.payload);
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     break;
//                 case 'HOMEWORK_LEAVE':
//                     setActiveHomeworkStudents(prev => {
//                         const newSet = new Set(prev);
//                         newSet.delete(message.payload.studentId);
//                         return newSet;
//                     });
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                     const { studentId, workspace } = message.payload;
//                     console.log(`[TEACHER] Received homework code update from student ${studentId}.`);
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existingState = newState.get(studentId) || { terminalOutput: '', files: [], activeFileName: '' };
//                         newState.set(studentId, { ...existingState, ...workspace });
//                         return newState;
//                     });
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     console.log(`[TEACHER] Received homework terminal update from student ${message.payload.studentId}.`);
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existing = newState.get(message.payload.studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                         existing.terminalOutput += message.payload.output;
//                         newState.set(message.payload.studentId, existing);
//                         return newState;
//                     });
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//             console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ type: 'ASSIGN_HOMEWORK', payload }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     if (role === 'student' && isDoingHomework && pendingHomework) {
//         return <HomeworkView 
//                     lessonId={pendingHomework.lessonId} 
//                     teacherSessionId={pendingHomework.teacherSessionId} 
//                     token={token} 
//                     onLeave={() => {
//                         setIsDoingHomework(false);
//                         setPendingHomework(null);
//                     }} 
//                 />;
//     }
    
//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {pendingHomework && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={() => setIsDoingHomework(true)}>
//                             Start Lesson <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;












// ________________________________________________________________

// perfect without deploy
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';

// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// const boilerplateTemplates: { [key: string]: string } = {
//     javascript: 'console.log("Hello, JavaScript!");',
//     python: 'print("Hello, Python!")',
//     java: 'public class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello, Java!");\n    }\n}',
// };

// // Define the structure for a code file
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';

// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();

//     // State for managing multiple files
//     const [files, setFiles] = useState<CodeFile[]>([
//         { name: 'script.js', language: 'javascript', content: boilerplateTemplates.javascript }
//     ]);
//     const [activeFileName, setActiveFileName] = useState<string>('script.js');

//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [role, setRole] = useState<UserRole>('unknown');
    
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);

//     // Find the currently active file object
//     const activeFile = files.find(file => file.name === activeFileName);

//     useEffect(() => {
//         let isMounted = true;
//         const initialize = async () => {
//             let stream: MediaStream | null = null;
//             try {
//                 stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                 if (isMounted) {
//                     setLocalStream(stream);
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 }
//             } catch (error) {
//                 console.error("Could not get user media.", error);
//                 if (isMounted) setConnectionStatus("Camera/Mic access denied.");
//             }
//             const wsUrl = `ws://localhost:5000?sessionId=${sessionId}`;
//             const currentWs = new WebSocket(wsUrl);
//             ws.current = currentWs;
//             initializeWebSocketEvents(currentWs, stream);
//         };
//         initialize();

//         return () => {
//             isMounted = false;
//             localStream?.getTracks().forEach(track => track.stop());
//             if (ws.current && ws.current.readyState === WebSocket.OPEN) {
//                 ws.current.close();
//             }
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId]);

//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({
//                 cursorBlink: true,
//                 theme: { 
//                     background: '#1e1e1e',
//                     foreground: '#d4d4d4',
//                     cursor: '#d4d4d4',
//                     selection: '#264f78',
//                 },
//                 scrollback: 1000,
//                 convertEol: true, 
//                 fontSize: 13,
//                 fontFamily: 'Menlo, "DejaVu Sans Mono", Consolas, "Lucida Console", monospace',
//             });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;

//             const resizeObserver = new ResizeObserver(() => {
//                 setTimeout(() => fitAddon.fit(), 0);
//             });
//             resizeObserver.observe(terminalRef.current);

//             return () => resizeObserver.disconnect();
//         }
//     }, []);

//     const initializeWebSocketEvents = (currentWs: WebSocket, stream: MediaStream | null) => {
//         currentWs.onopen = () => {
//             setConnectionStatus('Connected');
//             console.log('WebSocket connection opened.');
//         };
//         currentWs.onclose = () => {
//             setConnectionStatus('Disconnected');
//             console.log('WebSocket connection closed.');
//         };
//         currentWs.onerror = (error) => {
//             setConnectionStatus('Connection Error');
//             console.error('WebSocket connection error:', error);
//         };

//         currentWs.onmessage = (event) => {
//             try {
//                 const message = JSON.parse(event.data);
//                 console.log('Received message:', message);
//                 switch (message.type) {
//                     case 'ROLE_ASSIGNED': 
//                         setRole(message.payload.role); 
//                         if(message.payload.files) setFiles(message.payload.files);
//                         if(message.payload.activeFile) setActiveFileName(message.payload.activeFile);
//                         break;
//                     case 'INITIATE_CALL': initializePeerConnection(stream); createOffer(); break;
//                     case 'WEBRTC_OFFER': initializePeerConnection(stream); handleOffer(message.payload); break;
//                     case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                     case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                     case 'PEER_LEFT': handlePeerLeft(); break;
//                     case 'FILE_STRUCTURE_UPDATE':
//                         setFiles(message.payload.files);
//                         setActiveFileName(message.payload.activeFile);
//                         break;
//                     case 'CODE_UPDATE':
//                         setFiles(prevFiles =>
//                             prevFiles.map(file =>
//                                 file.name === message.payload.fileName
//                                     ? { ...file, content: message.payload.code }
//                                     : file
//                             )
//                         );
//                         break;
//                     case 'LANGUAGE_UPDATE':
//                          setFiles(prevFiles =>
//                             prevFiles.map(file =>
//                                 file.name === message.payload.fileName
//                                     ? { ...file, language: message.payload.language }
//                                     : file
//                             )
//                         );
//                         break;
//                     case 'TERMINAL_OUT':
//                         if (term.current) {
//                             term.current.write(message.payload);
//                         }
//                         break;
//                     default:
//                         console.warn('Unknown message type:', message);
//                         break;
//                 }
//             } catch (error) {
//                 console.error('Error processing WebSocket message:', error);
//             }
//         };
//     };
    
//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN) {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//             setConnectionStatus('Peer connection error');
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     function handleEditorChange(value: string | undefined) {
//         const newCode = value || '';
//         if (!activeFile) return;

//         const updatedFiles = files.map(file =>
//             file.name === activeFileName ? { ...file, content: newCode } : file
//         );
//         setFiles(updatedFiles);

//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher') {
//             ws.current.send(JSON.stringify({
//                 type: 'CODE_UPDATE',
//                 payload: { fileName: activeFileName, code: newCode }
//             }));
//         }
//     }

//     function handleLanguageChange(newLanguage: string) {
//         if (!activeFile) return;

//         const updatedFiles = files.map(file =>
//             file.name === activeFileName ? { ...file, language: newLanguage } : file
//         );
//         setFiles(updatedFiles);

//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher') {
//             ws.current.send(JSON.stringify({
//                 type: 'LANGUAGE_UPDATE',
//                 payload: { fileName: activeFileName, language: newLanguage }
//             }));
//         }
//     }

//     const handleAddFile = () => {
//         const newFileName = prompt("Enter new file name (e.g., index.html, style.css):");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile: CodeFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);

//             if (ws.current?.readyState === WebSocket.OPEN) {
//                 ws.current.send(JSON.stringify({
//                     type: 'FILE_STRUCTURE_UPDATE',
//                     payload: { files: updatedFiles, activeFile: newFileName }
//                 }));
//             }
//         } else if (newFileName) {
//             alert("A file with that name already exists.");
//         }
//     };

//     const handleRunCode = () => {
//         if (!ws.current || ws.current.readyState !== WebSocket.OPEN || !activeFile) {
//             console.error('Cannot run code. WebSocket not connected or no active file.');
//             return;
//         }
//         ws.current.send(JSON.stringify({
//             type: 'RUN_CODE',
//             payload: {
//                 language: activeFile.language,
//                 code: activeFile.content,
//             }
//         }));
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800/50">
//                 <h1 className="text-lg font-bold text-slate-800 dark:text-slate-200 tracking-tight">Live Coding Session</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     <Separator orientation="vertical" className="h-6 bg-slate-200 dark:bg-slate-700" />
//                     <div className="text-sm text-slate-500 dark:text-slate-400">Session ID: <span className="font-mono bg-slate-100 dark:bg-slate-700/50 px-2 py-1 rounded-md">{sessionId}</span></div>
//                     <Separator orientation="vertical" className="h-6 bg-slate-200 dark:bg-slate-700" />
//                     <div className="flex items-center gap-2 text-sm text-slate-500 dark:text-slate-400">
//                         <span className={`h-2.5 w-2.5 rounded-full ${connectionStatus === 'Connected' ? 'bg-green-500' : 'bg-yellow-500'}`}></span>
//                         <span>{connectionStatus}</span>
//                     </div>
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}>
//                     <PhoneOff className="mr-2 h-4 w-4" /> End Session
//                 </Button>
//             </header>

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     {/* File Explorer Panel */}
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r border-slate-200 dark:border-slate-700">
//                         <div className="flex-shrink-0 p-3 flex justify-between items-center border-b border-slate-200 dark:border-slate-700">
//                             <h2 className="font-semibold text-sm text-slate-600 dark:text-slate-300 tracking-wider uppercase">Explorer</h2>
//                             {role === 'teacher' && (
//                                 <Button variant="ghost" size="icon" onClick={handleAddFile} className="h-7 w-7 text-slate-500 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100">
//                                     <FilePlus className="h-4 w-4" />
//                                 </Button>
//                             )}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {files.map(file => (
//                                 <div
//                                     key={file.name}
//                                     onClick={() => setActiveFileName(file.name)}
//                                     className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm cursor-pointer transition-colors ${activeFileName === file.name ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'hover:bg-slate-100 dark:hover:bg-slate-700/50 text-slate-700 dark:text-slate-300'}`}
//                                 >
//                                     <FileIcon className="h-4 w-4 mr-2.5 flex-shrink-0" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-col-resize" />

//                     {/* Main Editor and Terminal Panel */}
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="flex-shrink-0 px-3 py-2 flex justify-between items-center bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={role !== 'teacher'}>
//                                             <SelectTrigger className="w-[180px]">
//                                                 <SelectValue placeholder="Select language" />
//                                             </SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                                 <SelectItem value="java">Java</SelectItem>
//                                                 <SelectItem value="html">HTML</SelectItem>
//                                                 <SelectItem value="css">CSS</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && (
//                                             <Button onClick={handleRunCode} size="sm" disabled={!activeFile} className="bg-green-600 hover:bg-green-700 text-white">
//                                                 <Play className="mr-2 h-4 w-4" /> Run Code
//                                             </Button>
//                                         )}
//                                     </div>
//                                     <div className="flex-grow relative">
//                                         <Editor
//                                             height="100%"
//                                             theme="vs-dark"
//                                             path={activeFile?.name}
//                                             language={activeFile?.language}
//                                             value={activeFile?.content}
//                                             onChange={handleEditorChange}
//                                             options={{ readOnly: role === 'student', minimap: { enabled: true }, fontSize: 14, scrollBeyondLastLine: false, automaticLayout: true }}
//                                         />
//                                     </div>
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-row-resize" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="flex-shrink-0 px-3 py-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t border-slate-700 text-slate-300 tracking-wider uppercase">
//                                         <TerminalIcon className="h-4 w-4 mr-2" />
//                                         <span>Terminal</span>
//                                     </div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
                    
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-col-resize" />

//                     {/* Video Panel */}
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col bg-white dark:bg-slate-800/50 p-4 space-y-4 border-l border-slate-200 dark:border-slate-700">
//                             <div className="flex-grow space-y-4">
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium">Remote User</CardTitle></CardHeader>
//                                     <CardContent className="p-0">
//                                         <div className="bg-black rounded-b-lg aspect-video flex items-center justify-center text-slate-400 overflow-hidden">
//                                             <video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />
//                                             {!remoteStream && <span className="text-xs">Waiting for peer...</span>}
//                                         </div>
//                                     </CardContent>
//                                 </Card>
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium">My Camera</CardTitle></CardHeader>
//                                     <CardContent className="p-0">
//                                         <div className="bg-black rounded-b-lg aspect-video overflow-hidden">
//                                             <video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" />
//                                         </div>
//                                     </CardContent>
//                                 </Card>
//                             </div>
//                             <div className="flex-shrink-0 flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12 bg-slate-200/50 dark:bg-slate-700/50 hover:bg-slate-200 dark:hover:bg-slate-700">
//                                     {isMuted ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
//                                 </Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12 bg-slate-200/50 dark:bg-slate-700/50 hover:bg-slate-200 dark:hover:bg-slate-700">
//                                     {isCameraOff ? <VideoOff className="h-5 w-5" /> : <Video className="h-5 w-5" />}
//                                 </Button>
//                                 <Button variant="destructive" size="icon" onClick={() => navigate('/dashboard')} className="rounded-full h-12 w-12">
//                                     <PhoneOff className="h-5 w-5" />
//                                 </Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;

// Persisten state
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor, { OnMount } from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight, BeakerIcon, CheckCircle, XCircle, Trash2, Lightbulb } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
// import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel } from "@/components/ui/alert-dialog";

// // --- TYPE DEFINITIONS ---
// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID
// interface CodeFile { name: string; language: string; content: string; }
// interface LessonFile { id: string; filename: string; content: string; }
// interface Workspace { files: CodeFile[]; activeFileName: string; }
// interface StudentHomeworkState extends Workspace { terminalOutput: string; }
// interface Student { id: string; username: string; }
// interface Lesson { id: number | string; title: string; description: string; course_id: string; files: LessonFile[] }
// interface TestResult { passed: number; failed: number; total: number; results: string; }

// // --- Helper function to decode JWT ---
// const simpleJwtDecode = (token: string) => {
//     try {
//         const base64Url = token.split('.')[1];
//         const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
//         const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
//             return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
//         }).join(''));
//         return JSON.parse(jsonPayload);
//     } catch (error) {
//         console.error("Invalid token:", error);
//         return null;
//     }
// };


// const stunServers = {
//   iceServers: [ { urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' } ],
// };

// // --- MODAL COMPONENTS ---
// const TestResultsModal = ({ results, isLoading, onClose }: { results: TestResult | null, isLoading: boolean, onClose: () => void }) => (
//     <AlertDialog open={true} onOpenChange={onClose}>
//         <AlertDialogContent>
//             <AlertDialogHeader>
//                 <AlertDialogTitle>Test Results</AlertDialogTitle>
//                 <AlertDialogDescription className="pt-4 space-y-4">
//                     {isLoading ? "Running tests..." : results && (
//                         <>
//                             <div className={`p-4 rounded-md ${results.failed > 0 ? 'bg-destructive/10 text-destructive' : 'bg-green-500/10 text-green-700'}`}>
//                                 <h3 className="font-bold text-lg">
//                                     {results.failed > 0 ? `${results.failed} / ${results.total} Tests Failed` : `All ${results.total} Tests Passed!`}
//                                 </h3>
//                             </div>
//                             <div className="bg-muted p-4 rounded-md text-foreground whitespace-pre-wrap text-xs max-h-60 overflow-y-auto">
//                                 <code>{results.results}</code>
//                             </div>
//                         </>
//                     )}
//                 </AlertDialogDescription>
//             </AlertDialogHeader>
//             <AlertDialogFooter>
//                 <AlertDialogCancel>Close</AlertDialogCancel>
//             </AlertDialogFooter>
//         </AlertDialogContent>
//     </AlertDialog>
// );

// // --- HOMEWORK VIEW COMPONENT (MODIFIED for State Preservation) ---
// interface HomeworkViewProps {
//     lessonId: string;
//     teacherSessionId: string;
//     token: string | null;
//     onLeave: () => void;
//     // NEW PROPS to manage state from the parent
//     initialFiles: LessonFile[];
//     onFilesChange: (files: LessonFile[]) => void;
// }

// const HomeworkView: React.FC<HomeworkViewProps> = ({ lessonId, teacherSessionId, token, onLeave, initialFiles, onFilesChange }) => {
//     const [lesson, setLesson] = useState<Lesson | null>(null);
//     const [activeFileId, setActiveFileId] = useState<string | null>(initialFiles[0]?.id || null);
//     const [testResults, setTestResults] = useState<TestResult | null>(null);
//     const [isTesting, setIsTesting] = useState(false);
//     const [isTestModalOpen, setIsTestModalOpen] = useState(false);

//     const hwWs = useRef<WebSocket | null>(null);
//     const hwTermRef = useRef<HTMLDivElement>(null);
//     const hwTerm = useRef<Terminal | null>(null);
//     const editorRef = useRef<any>(null);

//     const activeFile = initialFiles.find(f => f.id === activeFileId);

//     useEffect(() => {
//         const fetchLessonDetails = async () => {
//             const res = await fetch(`http://localhost:5000/api/lessons/${lessonId}`, { headers: { 'Authorization': `Bearer ${token}` } });
//             if (res.ok) {
//                 const data = await res.json();
//                 setLesson(data);
//             }
//         };
//         fetchLessonDetails();
//     }, [lessonId, token]);

//     useEffect(() => {
//         const homeworkSessionId = crypto.randomUUID();
//         const wsUrl = `ws://localhost:5000?sessionId=${homeworkSessionId}&token=${token}&teacherSessionId=${teacherSessionId}&lessonId=${lessonId}`;
//         const currentWs = new WebSocket(wsUrl);
//         hwWs.current = currentWs;

//         currentWs.onopen = () => {
//             console.log(`[HOMEWORK] WebSocket for lesson ${lessonId} connected.`);
//             setTimeout(() => {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_JOIN' }));
//             }, 500);
//         };
//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             if (message.type === 'TERMINAL_OUT') {
//                 hwTerm.current?.write(message.payload);
//             }
//         };

//         return () => {
//             if(currentWs.readyState === WebSocket.OPEN) {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_LEAVE' }));
//             }
//             currentWs.close();
//         };
//     }, [lessonId, teacherSessionId, token]);
    
//     useEffect(() => {
//         if (initialFiles.length > 0 && hwWs.current?.readyState === WebSocket.OPEN) {
//             const broadcastFiles = initialFiles.map(f => ({ name: f.filename, language: 'javascript', content: f.content }));
//             const broadcastActiveFile = initialFiles.find(f => f.id === activeFileId)?.filename || '';
//             hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_CODE_UPDATE', payload: { files: broadcastFiles, activeFileName: broadcastActiveFile } }));
//         }
//     }, [initialFiles, activeFileId, hwWs.current?.readyState]);


//     useEffect(() => {
//         if (hwTermRef.current && !hwTerm.current) {
//             const fitAddon = new FitAddon();
//             const term = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             term.loadAddon(fitAddon);
//             term.open(hwTermRef.current);
//             fitAddon.fit();
//             term.onData(data => {
//                 if (hwWs.current?.readyState === WebSocket.OPEN) {
//                     hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_TERMINAL_IN', payload: data }));
//                 }
//             });
//             hwTerm.current = term;
//         }
//     }, []);

//     const handleFileContentChange = (content: string | undefined) => {
//         const updatedFiles = initialFiles.map(file => file.id === activeFileId ? { ...file, content: content || '' } : file);
//         onFilesChange(updatedFiles);
//     };

//     const handleRunTests = async () => {
//         if (!lessonId) return;
//         setIsTesting(true);
//         setIsTestModalOpen(true);
//         setTestResults(null);
//         try {
//             const response = await fetch(`http://localhost:5000/api/lessons/${lessonId}/run-tests`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                 body: JSON.stringify({ files: initialFiles })
//             });
//             const data: TestResult = await response.json();
//             setTestResults(data);
//         } catch (err) {
//             setTestResults({ passed: 0, failed: 1, total: 1, results: "An error occurred while running tests." });
//         } finally {
//             setIsTesting(false);
//         }
//     };
    
//     if (!lesson) return <div className="p-8">Loading Lesson...</div>;

//     return (
//         <div className="w-full h-screen flex flex-col">
//             {isTestModalOpen && <TestResultsModal results={testResults} isLoading={isTesting} onClose={() => setIsTestModalOpen(false)} />}
//             <header className="flex-shrink-0 flex justify-between items-center p-4 border-b bg-white">
//                 <div>
//                     <h1 className="text-2xl font-bold">{lesson.title}</h1>
//                     <p className="text-muted-foreground">You are in a live homework session.</p>
//                 </div>
//                 <div className="flex items-center gap-4">
//                     <Button onClick={handleRunTests} disabled={isTesting}><BeakerIcon className="mr-2 h-4 w-4" /> Run Tests</Button>
//                     <Button variant="outline" onClick={onLeave}>Return to Classroom</Button>
//                 </div>
//             </header>
//             <main className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 p-6 overflow-hidden">
//                 <div className="lg:col-span-1 flex flex-col gap-6">
//                     <Card><CardHeader><CardTitle>Instructions</CardTitle></CardHeader><CardContent><p>{lesson.description}</p></CardContent></Card>
//                     <Card className="flex-grow flex flex-col"><CardHeader><CardTitle>Project Files</CardTitle></CardHeader>
//                         <CardContent className="flex-grow overflow-y-auto">
//                             {initialFiles.map(file => (
//                                 <div key={file.id} onClick={() => setActiveFileId(file.id)} className={`flex items-center p-2 rounded-md cursor-pointer ${activeFileId === file.id ? 'bg-accent' : 'hover:bg-accent/50'}`}>
//                                     <FileIcon className="mr-2 h-4 w-4" />{file.filename}
//                                 </div>
//                             ))}
//                         </CardContent>
//                     </Card>
//                 </div>
//                 <div className="lg:col-span-2 h-full flex flex-col rounded-lg border bg-background overflow-hidden">
//                     <PanelGroup direction="vertical">
//                         <Panel defaultSize={70} minSize={20}>
//                             <Editor height="100%" theme="vs-dark" path={activeFile?.filename} value={activeFile?.content} onChange={handleFileContentChange} onMount={(editor) => editorRef.current = editor} />
//                         </Panel>
//                         <PanelResizeHandle className="h-2 bg-slate-200" />
//                         <Panel defaultSize={30} minSize={10}>
//                             <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                 <div className="p-2 bg-slate-800 text-white text-sm font-semibold flex items-center"><TerminalIcon className="mr-2 h-4 w-4" />Terminal</div>
//                                 <div ref={hwTermRef} className="flex-grow p-2" />
//                             </div>
//                         </Panel>
//                     </PanelGroup>
//                 </div>
//             </main>
//         </div>
//     );
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     const decodedToken = token ? simpleJwtDecode(token) : null;
//     const initialUserRole = decodedToken?.user?.role || 'unknown';

//     const [role, setRole] = useState<UserRole>(initialUserRole);
    
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [isDoingHomework, setIsDoingHomework] = useState(false);

//     const [homeworkFiles, setHomeworkFiles] = useState<LessonFile[] | null>(null);

//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);
//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     // --- NEW: This effect runs when the assignment data arrives from the server ---
//     useEffect(() => {
//         // If an assignment is pending (from the server) and the session flag is set,
//         // it means the student refreshed while in the homework view.
//         // We automatically trigger the function to re-enter the homework view.
//         const wasDoingHomework = sessionStorage.getItem('isDoingHomework');
//         if (pendingHomework && wasDoingHomework === 'true') {
//             handleStartHomework();
//         }
//     }, [pendingHomework]); // This hook specifically depends on the assignment info.

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 } catch (err) { console.error("Could not get user media.", err); }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) setAvailableLessons(await response.json());
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[CLIENT] Received:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     if (role === 'student') {
//                         setFiles(message.payload.files);
//                         setActiveFileName(message.payload.activeFileName);
//                     }
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     setPendingHomework(message.payload);
//                     setHomeworkFiles(null);
//                     // Do not reset isDoingHomework here, as the new useEffect will handle it.
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     break;
//                 case 'HOMEWORK_LEAVE':
//                     setActiveHomeworkStudents(prev => {
//                         const newSet = new Set(prev);
//                         newSet.delete(message.payload.studentId);
//                         return newSet;
//                     });
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                     const { studentId, workspace } = message.payload;
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existingState = newState.get(studentId) || { terminalOutput: '', files: [], activeFileName: '' };
//                         newState.set(studentId, { ...existingState, ...workspace });
//                         return newState;
//                     });
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existing = newState.get(message.payload.studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                         existing.terminalOutput += message.payload.output;
//                         newState.set(message.payload.studentId, existing);
//                         return newState;
//                     });
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleStartHomework = async () => {
//         if (!pendingHomework) return;

//         if (!homeworkFiles) {
//             console.log("Fetching initial homework state...");
//             let filesToSet = null;
//             try {
//                 const stateRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}/student-state`, { 
//                     headers: { 'Authorization': `Bearer ${token}` } 
//                 });

//                 if (stateRes.ok) {
//                     const data = await stateRes.json();
//                     filesToSet = data.files || [];
//                 } else {
//                     console.error("Failed to fetch student-state. Falling back to base lesson files.");
//                     const lessonRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}`, {
//                         headers: { 'Authorization': `Bearer ${token}` }
//                     });
//                     if (lessonRes.ok) {
//                         const lessonData = await lessonRes.json();
//                         filesToSet = lessonData.files || [];
//                     } else {
//                         console.error("Fallback lesson fetch also failed. Cannot start homework.");
//                         return;
//                     }
//                 }
//                 setHomeworkFiles(filesToSet);
//             } catch (error) {
//                 console.error("A network or other error occurred while fetching homework state:", error);
//                 return;
//             }
//         }
//         setIsDoingHomework(true);
//         // NEW: Set a flag in session storage when entering homework mode.
//         sessionStorage.setItem('isDoingHomework', 'true');
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number | string) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//             console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ type: 'ASSIGN_HOMEWORK', payload }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     if (role === 'student' && isDoingHomework && pendingHomework && homeworkFiles) {
//         return <HomeworkView 
//                     lessonId={pendingHomework.lessonId} 
//                     teacherSessionId={pendingHomework.teacherSessionId} 
//                     token={token} 
//                     onLeave={() => {
//                         setIsDoingHomework(false);
//                         // NEW: Clear the flag when the user explicitly leaves the homework view.
//                         sessionStorage.removeItem('isDoingHomework');
//                     }} 
//                     initialFiles={homeworkFiles}
//                     onFilesChange={setHomeworkFiles}
//                 />;
//     }
    
//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {pendingHomework && role === 'student' && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={isDoingHomework ? () => {
//                             setIsDoingHomework(false);
//                             sessionStorage.removeItem('isDoingHomework');
//                         } : handleStartHomework}>
//                             {isDoingHomework ? 'Return to Classroom' : 'Start Lesson'}
//                             <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage

// perfect MVP LATEST
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor, { OnMount } from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight, BeakerIcon, CheckCircle, XCircle, Trash2, Lightbulb } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
// import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel } from "@/components/ui/alert-dialog";

// // --- TYPE DEFINITIONS ---
// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID
// interface CodeFile { name: string; language: string; content: string; }
// interface LessonFile { id: string; filename: string; content: string; }
// interface Workspace { files: CodeFile[]; activeFileName: string; }
// interface StudentHomeworkState extends Workspace { terminalOutput: string; }
// interface Student { id: string; username: string; }
// interface Lesson { id: number | string; title: string; description: string; course_id: string; files: LessonFile[] }
// interface TestResult { passed: number; failed: number; total: number; results: string; }

// const stunServers = {
//   iceServers: [ { urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' } ],
// };

// // --- MODAL COMPONENTS ---
// const TestResultsModal = ({ results, isLoading, onClose }: { results: TestResult | null, isLoading: boolean, onClose: () => void }) => (
//     <AlertDialog open={true} onOpenChange={onClose}>
//         <AlertDialogContent>
//             <AlertDialogHeader>
//                 <AlertDialogTitle>Test Results</AlertDialogTitle>
//                 <AlertDialogDescription className="pt-4 space-y-4">
//                     {isLoading ? "Running tests..." : results && (
//                         <>
//                             <div className={`p-4 rounded-md ${results.failed > 0 ? 'bg-destructive/10 text-destructive' : 'bg-green-500/10 text-green-700'}`}>
//                                 <h3 className="font-bold text-lg">
//                                     {results.failed > 0 ? `${results.failed} / ${results.total} Tests Failed` : `All ${results.total} Tests Passed!`}
//                                 </h3>
//                             </div>
//                             <div className="bg-muted p-4 rounded-md text-foreground whitespace-pre-wrap text-xs max-h-60 overflow-y-auto">
//                                 <code>{results.results}</code>
//                             </div>
//                         </>
//                     )}
//                 </AlertDialogDescription>
//             </AlertDialogHeader>
//             <AlertDialogFooter>
//                 <AlertDialogCancel>Close</AlertDialogCancel>
//             </AlertDialogFooter>
//         </AlertDialogContent>
//     </AlertDialog>
// );

// // --- HOMEWORK VIEW COMPONENT (MODIFIED for State Preservation) ---
// interface HomeworkViewProps {
//     lessonId: string;
//     teacherSessionId: string;
//     token: string | null;
//     onLeave: () => void;
//     // NEW PROPS to manage state from the parent
//     initialFiles: LessonFile[];
//     onFilesChange: (files: LessonFile[]) => void;
// }

// const HomeworkView: React.FC<HomeworkViewProps> = ({ lessonId, teacherSessionId, token, onLeave, initialFiles, onFilesChange }) => {
//     const [lesson, setLesson] = useState<Lesson | null>(null);
//     // REMOVED: Internal file state. Now managed by the parent component.
//     const [activeFileId, setActiveFileId] = useState<string | null>(initialFiles[0]?.id || null);
//     const [testResults, setTestResults] = useState<TestResult | null>(null);
//     const [isTesting, setIsTesting] = useState(false);
//     const [isTestModalOpen, setIsTestModalOpen] = useState(false);

//     const hwWs = useRef<WebSocket | null>(null);
//     const hwTermRef = useRef<HTMLDivElement>(null);
//     const hwTerm = useRef<Terminal | null>(null);
//     const editorRef = useRef<any>(null);

//     const activeFile = initialFiles.find(f => f.id === activeFileId);

//     // This effect now only fetches lesson metadata, not the files.
//     useEffect(() => {
//         const fetchLessonDetails = async () => {
//             const res = await fetch(`http://localhost:5000/api/lessons/${lessonId}`, { headers: { 'Authorization': `Bearer ${token}` } });
//             if (res.ok) {
//                 const data = await res.json();
//                 setLesson(data);
//             }
//         };
//         fetchLessonDetails();
//     }, [lessonId, token]);

//     useEffect(() => {
//         const homeworkSessionId = crypto.randomUUID();
//         const wsUrl = `ws://localhost:5000?sessionId=${homeworkSessionId}&token=${token}&teacherSessionId=${teacherSessionId}&lessonId=${lessonId}`;
//         const currentWs = new WebSocket(wsUrl);
//         hwWs.current = currentWs;

//         currentWs.onopen = () => {
//             console.log(`[HOMEWORK] WebSocket for lesson ${lessonId} connected.`);
//             setTimeout(() => {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_JOIN' }));
//             }, 500);
//         };
//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             if (message.type === 'TERMINAL_OUT') {
//                 hwTerm.current?.write(message.payload);
//             }
//         };

//         return () => {
//             if(currentWs.readyState === WebSocket.OPEN) {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_LEAVE' }));
//             }
//             currentWs.close();
//         };
//     }, [lessonId, teacherSessionId, token]);
    
//     // This effect now broadcasts the parent's state.
//     useEffect(() => {
//         if (initialFiles.length > 0 && hwWs.current?.readyState === WebSocket.OPEN) {
//             const broadcastFiles = initialFiles.map(f => ({ name: f.filename, language: 'javascript', content: f.content }));
//             const broadcastActiveFile = initialFiles.find(f => f.id === activeFileId)?.filename || '';
//             hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_CODE_UPDATE', payload: { files: broadcastFiles, activeFileName: broadcastActiveFile } }));
//         }
//     }, [initialFiles, activeFileId, hwWs.current?.readyState]);


//     useEffect(() => {
//         if (hwTermRef.current && !hwTerm.current) {
//             const fitAddon = new FitAddon();
//             const term = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             term.loadAddon(fitAddon);
//             term.open(hwTermRef.current);
//             fitAddon.fit();
//             term.onData(data => {
//                 if (hwWs.current?.readyState === WebSocket.OPEN) {
//                     hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_TERMINAL_IN', payload: data }));
//                 }
//             });
//             hwTerm.current = term;
//         }
//     }, []);

//     // MODIFIED: This function now calls the callback prop to update the parent's state.
//     const handleFileContentChange = (content: string | undefined) => {
//         const updatedFiles = initialFiles.map(file => file.id === activeFileId ? { ...file, content: content || '' } : file);
//         onFilesChange(updatedFiles); // Update state in LiveTutorialPage
//     };

//     const handleRunTests = async () => {
//         if (!lessonId) return;
//         setIsTesting(true);
//         setIsTestModalOpen(true);
//         setTestResults(null);
//         try {
//             const response = await fetch(`http://localhost:5000/api/lessons/${lessonId}/run-tests`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                 body: JSON.stringify({ files: initialFiles }) // Use the files from props
//             });
//             const data: TestResult = await response.json();
//             setTestResults(data);
//         } catch (err) {
//             setTestResults({ passed: 0, failed: 1, total: 1, results: "An error occurred while running tests." });
//         } finally {
//             setIsTesting(false);
//         }
//     };
    
//     if (!lesson) return <div className="p-8">Loading Lesson...</div>;

//     return (
//         <div className="w-full h-screen flex flex-col">
//             {isTestModalOpen && <TestResultsModal results={testResults} isLoading={isTesting} onClose={() => setIsTestModalOpen(false)} />}
//             <header className="flex-shrink-0 flex justify-between items-center p-4 border-b bg-white">
//                 <div>
//                     <h1 className="text-2xl font-bold">{lesson.title}</h1>
//                     <p className="text-muted-foreground">You are in a live homework session.</p>
//                 </div>
//                 <div className="flex items-center gap-4">
//                     <Button onClick={handleRunTests} disabled={isTesting}><BeakerIcon className="mr-2 h-4 w-4" /> Run Tests</Button>
//                     <Button variant="outline" onClick={onLeave}>Return to Classroom</Button>
//                 </div>
//             </header>
//             <main className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 p-6 overflow-hidden">
//                 <div className="lg:col-span-1 flex flex-col gap-6">
//                     <Card><CardHeader><CardTitle>Instructions</CardTitle></CardHeader><CardContent><p>{lesson.description}</p></CardContent></Card>
//                     <Card className="flex-grow flex flex-col"><CardHeader><CardTitle>Project Files</CardTitle></CardHeader>
//                         <CardContent className="flex-grow overflow-y-auto">
//                             {initialFiles.map(file => (
//                                 <div key={file.id} onClick={() => setActiveFileId(file.id)} className={`flex items-center p-2 rounded-md cursor-pointer ${activeFileId === file.id ? 'bg-accent' : 'hover:bg-accent/50'}`}>
//                                     <FileIcon className="mr-2 h-4 w-4" />{file.filename}
//                                 </div>
//                             ))}
//                         </CardContent>
//                     </Card>
//                 </div>
//                 <div className="lg:col-span-2 h-full flex flex-col rounded-lg border bg-background overflow-hidden">
//                     <PanelGroup direction="vertical">
//                         <Panel defaultSize={70} minSize={20}>
//                             <Editor height="100%" theme="vs-dark" path={activeFile?.filename} value={activeFile?.content} onChange={handleFileContentChange} onMount={(editor) => editorRef.current = editor} />
//                         </Panel>
//                         <PanelResizeHandle className="h-2 bg-slate-200" />
//                         <Panel defaultSize={30} minSize={10}>
//                             <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                 <div className="p-2 bg-slate-800 text-white text-sm font-semibold flex items-center"><TerminalIcon className="mr-2 h-4 w-4" />Terminal</div>
//                                 <div ref={hwTermRef} className="flex-grow p-2" />
//                             </div>
//                         </Panel>
//                     </PanelGroup>
//                 </div>
//             </main>
//         </div>
//     );
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     const [role, setRole] = useState<UserRole>('unknown');
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [isDoingHomework, setIsDoingHomework] = useState(false);

//     // NEW: State to hold the student's homework files, preserving them when they switch views.
//     const [homeworkFiles, setHomeworkFiles] = useState<LessonFile[] | null>(null);

//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);
//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 } catch (err) { console.error("Could not get user media.", err); }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) setAvailableLessons(await response.json());
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[${role || 'CLIENT'}] Received:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     setFiles(message.payload.files);
//                     setActiveFileName(message.payload.activeFileName);
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     setPendingHomework(message.payload);
//                     // NEW: Reset homework state when a new assignment is given
//                     setHomeworkFiles(null);
//                     setIsDoingHomework(false);
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     break;
//                 case 'HOMEWORK_LEAVE':
//                     setActiveHomeworkStudents(prev => {
//                         const newSet = new Set(prev);
//                         newSet.delete(message.payload.studentId);
//                         return newSet;
//                     });
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                     const { studentId, workspace } = message.payload;
//                     console.log(`[TEACHER] Received homework code update from student ${studentId}.`);
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existingState = newState.get(studentId) || { terminalOutput: '', files: [], activeFileName: '' };
//                         newState.set(studentId, { ...existingState, ...workspace });
//                         return newState;
//                     });
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     console.log(`[TEACHER] Received homework terminal update from student ${message.payload.studentId}.`);
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existing = newState.get(message.payload.studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                         existing.terminalOutput += message.payload.output;
//                         newState.set(message.payload.studentId, existing);
//                         return newState;
//                     });
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     // --- FIXED: Function to handle starting homework with robust data fetching ---
//     const handleStartHomework = async () => {
//         if (!pendingHomework) return;

//         // Only fetch initial files if we haven't already.
//         // This preserves the state if the student returns to the classroom and comes back.
//         if (!homeworkFiles) {
//             console.log("Fetching initial homework state...");
//             let filesToSet = null;
//             try {
//                 const stateRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}/student-state`, { 
//                     headers: { 'Authorization': `Bearer ${token}` } 
//                 });

//                 if (stateRes.ok) {
//                     const data = await stateRes.json();
//                     filesToSet = data.files || [];
//                 } else {
//                     // If the primary endpoint fails, fall back to the base lesson files.
//                     console.error("Failed to fetch student-state. Falling back to base lesson files.");
//                     const lessonRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}`, {
//                         headers: { 'Authorization': `Bearer ${token}` }
//                     });
//                     if (lessonRes.ok) {
//                         const lessonData = await lessonRes.json();
//                         filesToSet = lessonData.files || [];
//                     } else {
//                         console.error("Fallback lesson fetch also failed. Cannot start homework.");
//                         // Here you might want to show an error toast to the user.
//                         return; // Abort starting homework
//                     }
//                 }
//                 setHomeworkFiles(filesToSet);
//             } catch (error) {
//                 console.error("A network or other error occurred while fetching homework state:", error);
//                 return; // Abort
//             }
//         }
//         setIsDoingHomework(true);
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number | string) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//             console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ type: 'ASSIGN_HOMEWORK', payload }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     // MODIFIED LOGIC: Render HomeworkView only when state is ready.
//     if (role === 'student' && isDoingHomework && pendingHomework && homeworkFiles) {
//         return <HomeworkView 
//                     lessonId={pendingHomework.lessonId} 
//                     teacherSessionId={pendingHomework.teacherSessionId} 
//                     token={token} 
//                     onLeave={() => setIsDoingHomework(false)} 
//                     initialFiles={homeworkFiles}
//                     onFilesChange={setHomeworkFiles}
//                 />;
//     }
    
//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {pendingHomework && role === 'student' && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         {/* MODIFIED: Button now toggles between homework and classroom view */}
//                         <Button size="sm" onClick={isDoingHomework ? () => setIsDoingHomework(false) : handleStartHomework}>
//                             {isDoingHomework ? 'Return to Classroom' : 'Start Lesson'}
//                             <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;

// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from '@/components/ui/button';
// import { Badge } from '@/components/ui/badge';
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, UploadCloud, Copy, X, Users, BookMarked, Laptop, XCircle, ChevronRight } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// // --- TYPE DEFINITIONS ---
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// interface Workspace {
//     files: CodeFile[];
//     activeFileName: string;
// }

// interface StudentHomeworkState extends Workspace {
//     terminalOutput: string;
// }

// interface Student {
//     id: string;
//     username: string;
// }

// interface Lesson {
//     id: number;
//     title: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID

// // Helper function to determine language from filename
// const getLanguageForFile = (fileName: string): string => {
//     const extension = fileName.split('.').pop()?.toLowerCase();
//     switch (extension) {
//         case 'js': case 'jsx': return 'javascript';
//         case 'py': return 'python';
//         case 'java': return 'java';
//         case 'html': return 'html';
//         case 'css': return 'css';
//         case 'ts': case 'tsx': return 'typescript';
//         default: return 'plaintext';
//     }
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     // --- STATE MANAGEMENT ---
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [role, setRole] = useState<UserRole>('unknown');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [teacherWorkspace, setTeacherWorkspace] = useState<Workspace>({ files: [], activeFileName: '' });
//     const [myStudentWorkspace, setMyStudentWorkspace] = useState<Workspace>({ files: [], activeFileName: '' });
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [isDeploying, setIsDeploying] = useState(false);
//     const [deploymentUrl, setDeploymentUrl] = useState<string | null>(null);
//     const [error, setError] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());


//     // --- REFS ---
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);


//     // --- DERIVED STATE ---
//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? teacherWorkspace : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : myStudentWorkspace;

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     // --- EFFECTS ---
//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }

//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);

//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) {
//                         localVideoRef.current.srcObject = stream;
//                     }
//                 } catch (err) {
//                     console.error("Could not get user media.", err);
//                     setError("Camera/Mic access was denied. Video chat will be disabled.");
//                 }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 try {
//                     const response = await fetch('http://localhost:5000/api/lessons/teacher/list', {
//                         headers: { 'Authorization': `Bearer ${token}` }
//                     });
//                     if (!response.ok) throw new Error('Failed to fetch lessons.');
//                     const data = await response.json();
//                     setAvailableLessons(data);
//                 } catch (err: any) {
//                     setError(err.message || 'Could not load lessons.');
//                 }
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({
//                 cursorBlink: true,
//                 theme: { background: '#1e1e1e', foreground: '#d4d4d4', cursor: '#d4d4d4' },
//                 scrollback: 1000,
//                 convertEol: true,
//                 fontSize: 13,
//             });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;

//             const resizeObserver = new ResizeObserver(() => setTimeout(() => fitAddon.fit(), 0));
//             if(terminalRef.current) {
//                 resizeObserver.observe(terminalRef.current);
//             }
//             return () => resizeObserver.disconnect();
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = (e) => {
//             setConnectionStatus('Connection Error');
//             console.error('WebSocket error:', e);
//             setError('WebSocket connection error. Please refresh the page.');
//         };

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[${role?.toUpperCase() || 'CLIENT'}] Received message:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED': {
//                     const { role, teacherFiles, activeTeacherFile } = message.payload;
//                     setRole(role);
//                     const initialWorkspace = { files: teacherFiles || [], activeFileName: activeTeacherFile || '' };
                    
//                     if (role === 'teacher' && (!teacherFiles || teacherFiles.length === 0)) {
//                         const defaultFiles: CodeFile[] = [
//                             { name: 'index.html', language: 'html', content: `<h1>Welcome!</h1>` },
//                             { name: 'style.css', language: 'css', content: `body { font-family: sans-serif; }` },
//                             { name: 'script.js', language: 'javascript', content: `console.log("Hello World!");` }
//                         ];
//                         const newWorkspace = { files: defaultFiles, activeFileName: 'index.html' };
//                         setTeacherWorkspace(newWorkspace);
//                         currentWs.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//                     } else {
//                         setTeacherWorkspace(initialWorkspace);
//                     }
//                     setMyStudentWorkspace(initialWorkspace);
//                     break;
//                 }
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     setTeacherWorkspace(message.payload);
//                     if (role === 'student') {
//                         setMyStudentWorkspace(message.payload);
//                     }
//                     break;
                
//                 case 'STUDENT_WORKSPACE_UPDATE':
//                      if (role === 'teacher') {
//                         const { studentId, ...workspace } = message.payload;
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existingState = newState.get(studentId) || { terminalOutput: '' };
//                             newState.set(studentId, { ...existingState, ...workspace });
//                             return newState;
//                         });
//                     }
//                     break;
                
//                 case 'HOMEWORK_JOIN':
//                     if (role === 'teacher') {
//                         console.log(`[TEACHER] Student ${message.payload.studentId} has started their homework. Activating live indicator.`);
//                         setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     }
//                     break;
                
//                 case 'HOMEWORK_LEAVE':
//                      if (role === 'teacher') {
//                         console.log(`[TEACHER] Student ${message.payload.studentId} has left their homework session.`);
//                         setActiveHomeworkStudents(prev => {
//                             const newSet = new Set(prev);
//                             newSet.delete(message.payload.studentId);
//                             return newSet;
//                         });
//                     }
//                     break;
                
//                 case 'HOMEWORK_CODE_UPDATE':
//                     if (role === 'teacher') {
//                         const { studentId, workspace } = message.payload;
//                         console.log(`[TEACHER] Received code update from student ${studentId}.`);
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existingState = newState.get(studentId) || { terminalOutput: '' };
//                             newState.set(studentId, { ...existingState, ...workspace });
//                             return newState;
//                         });
//                     }
//                     break;
                
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                      if (role === 'teacher') {
//                         const { studentId, output } = message.payload;
//                         console.log(`[TEACHER] Received terminal update from student ${studentId}.`);
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existingState = newState.get(studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                             existingState.terminalOutput += output;
//                             newState.set(studentId, existingState);
//                             return newState;
//                         });
//                     }
//                     break;

//                 case 'HOMEWORK_ASSIGNED':
//                     if (role === 'student') {
//                         console.log("[STUDENT] Received HOMEWORK_ASSIGNED message from teacher.");
//                         const { lessonId, teacherSessionId, title } = message.payload;
//                         setPendingHomework({ lessonId, teacherSessionId, title });
//                     }
//                     break;
//                 case 'TERMINAL_OUT':
//                     if ((role === 'teacher' && viewingMode === 'teacher') || role === 'student') {
//                         term.current?.write(message.payload);
//                     }
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//                 default: console.warn('Unknown message type:', message.type);
//             }
//         };
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         const newCode = value || '';
//         if (!activeFile) return;

//         if (role === 'student') return;

//         const updateWorkspace = (workspace: Workspace): Workspace => {
//             const updatedFiles = workspace.files.map(file =>
//                 file.name === activeFile.name ? { ...file, content: newCode } : file
//             );
//             return { ...workspace, files: updatedFiles };
//         };

//         if (role === 'teacher' && viewingMode === 'teacher') {
//             const newWorkspace = updateWorkspace(teacherWorkspace);
//             setTeacherWorkspace(newWorkspace);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//         }
//     };


//     const handleLanguageChange = (newLanguage: string) => {
//         if (!activeFile || role !== 'teacher' || viewingMode !== 'teacher') return;
//         const updatedFiles = teacherWorkspace.files.map(file =>
//             file.name === activeFile.name ? { ...file, language: newLanguage } : file
//         );
//         const newWorkspace = { ...teacherWorkspace, files: updatedFiles, activeFileName: teacherWorkspace.activeFileName };
//         setTeacherWorkspace(newWorkspace);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//     };
    
//     const handleActiveFileChange = (fileName: string) => {
//         if (role === 'student') return;

//         if (role === 'teacher' && viewingMode === 'teacher') {
//             const newWorkspace = { ...teacherWorkspace, activeFileName: fileName };
//             setTeacherWorkspace(newWorkspace);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//         }
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher' || viewingMode !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !teacherWorkspace.files.some(f => f.name === newFileName)) {
//             const language = getLanguageForFile(newFileName);
//             const newFile: CodeFile = { name: newFileName, language, content: '' };
//             const updatedFiles = [...teacherWorkspace.files, newFile];
//             const newWorkspace: Workspace = { ...teacherWorkspace, files: updatedFiles, activeFileName: newFileName };
//             setTeacherWorkspace(newWorkspace);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//         } else if (newFileName) {
//             setError("A file with that name already exists.");
//         }
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number) => {
//         if (role === 'teacher' && ws.current?.readyState === WebSocket.OPEN) {
//             try {
//                 const lesson = availableLessons.find(l => l.id === lessonId);
//                 const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson?.title || 'New Assignment' };
//                 console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//                 ws.current.send(JSON.stringify({ 
//                     type: 'ASSIGN_HOMEWORK', 
//                     payload
//                 }));
//                 setAssigningToStudentId(null);
//             } catch (err) {
//                 console.error("Failed to send ASSIGN_HOMEWORK message:", err);
//                 setError("Failed to assign homework. Please check the connection and try again.");
//             }
//         } else {
//             setError("Cannot assign homework. WebSocket is not connected.");
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN) {
//             if (role === 'teacher' && viewingMode === 'teacher') {
//                  ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//             }
//         }
//     };
//     const handleRunCode = () => {
//         if (!activeFile) return;
//         if(role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };

//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//             setConnectionStatus('Peer connection error');
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };
//     const handleDeploy = async () => {
//         setIsDeploying(true);
//         setDeploymentUrl(null);
//         setError(null);
//         const payload = { files: teacherWorkspace.files };
//         try {
//             const response = await fetch('http://localhost:5000/api/deploy', {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: JSON.stringify(payload),
//             });
//             const result = await response.json();
//             if (!response.ok) {
//                 throw new Error(result.message || `Deployment failed with status: ${response.status}`);
//             }
//             setDeploymentUrl(result.url);
//         } catch (error: any) {
//             setError(error.message || 'An unknown error occurred during deployment.');
//         } finally {
//             setIsDeploying(false);
//         }
//     };


//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800/50">
//                 <h1 className="text-lg font-bold text-slate-800 dark:text-slate-200 tracking-tight">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <div className="flex items-center gap-3">
//                     <Button onClick={handleDeploy} disabled={isDeploying} className="bg-blue-600 hover:bg-blue-700 text-white">
//                         <UploadCloud className="mr-2 h-4 w-4" /> Deploy
//                     </Button>
//                     <Button variant="destructive" onClick={() => navigate('/dashboard')}>
//                         <PhoneOff className="mr-2 h-4 w-4" /> End Session
//                     </Button>
//                 </div>
//             </header>
            
//             {error && <Alert variant="destructive" className="rounded-none border-l-0 border-r-0 border-t-0"><AlertTitle className="flex items-center justify-between">Error <Button variant="ghost" size="icon" onClick={() => setError(null)}><X className="h-4 w-4"/></Button></AlertTitle><AlertDescription>{error}</AlertDescription></Alert>}

//             {role === 'student' && pendingHomework && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned you a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button 
//                             size="sm" 
//                             onClick={() => navigate(`/lessons/${pendingHomework.lessonId}?sessionId=${pendingHomework.teacherSessionId}`)}
//                         >
//                             Start Lesson <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r border-slate-200 dark:border-slate-700">
//                         <div className="flex-shrink-0 p-3 flex justify-between items-center border-b border-slate-200 dark:border-slate-700">
//                             <h2 className="font-semibold text-sm text-slate-600 dark:text-slate-300 tracking-wider uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && (
//                                 <Button variant="ghost" size="icon" onClick={handleAddFile} className="h-7 w-7" title="Add New File">
//                                     <FilePlus className="h-4 w-4" />
//                                 </Button>
//                             )}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm cursor-pointer transition-colors ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'hover:bg-slate-100 dark:hover:bg-slate-700/50'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5 flex-shrink-0" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50" />

//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="flex-shrink-0 px-3 py-2 flex justify-between items-center bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue placeholder="Select language" /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                                 <SelectItem value="java">Java</SelectItem>
//                                                 <SelectItem value="html">HTML</SelectItem>
//                                                 <SelectItem value="css">CSS</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && (
//                                             <Button onClick={handleRunCode} size="sm" disabled={!activeFile} className="bg-green-600 hover:bg-green-700 text-white">
//                                                 <Play className="mr-2 h-4 w-4" /> Run Code
//                                             </Button>
//                                         )}
//                                     </div>
//                                     <div className="flex-grow relative">
//                                         <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={isEditorReadOnly ? undefined : handleEditorChange} options={{ readOnly: isEditorReadOnly, minimap: { enabled: true }, fontSize: 14, automaticLayout: true }} />
//                                     </div>
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="flex-shrink-0 px-3 py-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t border-slate-700 text-slate-300"><TerminalIcon className="h-4 w-4 mr-2" /><span>Terminal</span></div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50" />

//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col bg-white dark:bg-slate-800/50 p-4 space-y-4 border-l border-slate-200 dark:border-slate-700">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start">
//                                             <Laptop className="mr-2 h-4 w-4"/> My Workspace
//                                         </Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}>
//                                                         <BookMarked className="mr-2 h-4 w-4"/>Assign
//                                                     </Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>
//                                                                 {lesson.title}
//                                                             </Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
                            
//                             <Card className="flex-grow">
//                                 <CardHeader className="p-3"><CardTitle className="text-sm font-medium">Remote User</CardTitle></CardHeader>
//                                 <CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center text-slate-400 overflow-hidden"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting for peer...</span>}</div></CardContent>
//                             </Card>
//                             <Card>
//                                 <CardHeader className="p-3"><CardTitle className="text-sm font-medium">My Camera</CardTitle></CardHeader>
//                                 <CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video overflow-hidden"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent>
//                             </Card>
                            
//                             <div className="flex-shrink-0 flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;



// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from '@/components/ui/button';
// import { Badge } from '@/components/ui/badge';
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, UploadCloud, Copy, X, Users, BookMarked, Laptop, XCircle, ChevronRight } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// // --- TYPE DEFINITIONS ---
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// interface Workspace {
//     files: CodeFile[];
//     activeFileName: string;
// }

// interface StudentHomeworkState extends Workspace {
//     terminalOutput: string;
// }

// interface Student {
//     id: string;
//     username: string;
// }

// interface Lesson {
//     id: number;
//     title: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID

// // Helper function to determine language from filename
// const getLanguageForFile = (fileName: string): string => {
//     const extension = fileName.split('.').pop()?.toLowerCase();
//     switch (extension) {
//         case 'js': case 'jsx': return 'javascript';
//         case 'py': return 'python';
//         case 'java': return 'java';
//         case 'html': return 'html';
//         case 'css': return 'css';
//         case 'ts': case 'tsx': return 'typescript';
//         default: return 'plaintext';
//     }
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     // --- STATE MANAGEMENT ---
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [role, setRole] = useState<UserRole>('unknown');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [teacherWorkspace, setTeacherWorkspace] = useState<Workspace>({ files: [], activeFileName: '' });
//     const [myStudentWorkspace, setMyStudentWorkspace] = useState<Workspace>({ files: [], activeFileName: '' });
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [isDeploying, setIsDeploying] = useState(false);
//     const [deploymentUrl, setDeploymentUrl] = useState<string | null>(null);
//     const [error, setError] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());


//     // --- REFS ---
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);

//     // --- DERIVED STATE ---
//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? teacherWorkspace : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : myStudentWorkspace;

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' ? false : viewingMode !== 'teacher';

//     // --- EFFECTS ---
//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }

//         let isMounted = true;
//         const initialize = async () => {
//             let stream: MediaStream | null = null;
//             try {
//                 stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                 if (isMounted) {
//                     setLocalStream(stream);
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 }
//             } catch (err) {
//                 console.error("Could not get user media.", err);
//                 if (isMounted) setError("Camera/Mic access is required to join.");
//             }
            
//             const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//             const currentWs = new WebSocket(wsUrl);
//             ws.current = currentWs;
//             initializeWebSocketEvents(currentWs, stream);
//         };

//         initialize();

//         return () => {
//             isMounted = false;
//             localStream?.getTracks().forEach(track => track.stop());
//             ws.current?.close();
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 try {
//                     const response = await fetch('http://localhost:5000/api/lessons/teacher/list', {
//                         headers: { 'Authorization': `Bearer ${token}` }
//                     });
//                     if (!response.ok) throw new Error('Failed to fetch lessons.');
//                     const data = await response.json();
//                     setAvailableLessons(data);
//                 } catch (err: any) {
//                     setError(err.message || 'Could not load lessons.');
//                 }
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({
//                 cursorBlink: true,
//                 theme: { background: '#1e1e1e', foreground: '#d4d4d4', cursor: '#d4d4d4' },
//                 scrollback: 1000,
//                 convertEol: true,
//                 fontSize: 13,
//             });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;

//             const resizeObserver = new ResizeObserver(() => setTimeout(() => fitAddon.fit(), 0));
//             if(terminalRef.current) {
//                 resizeObserver.observe(terminalRef.current);
//             }
//             return () => resizeObserver.disconnect();
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket, stream: MediaStream | null) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = (e) => {
//             setConnectionStatus('Connection Error');
//             console.error('WebSocket error:', e);
//         };

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log('Received message:', message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED': {
//                     const { role, teacherFiles, activeTeacherFile } = message.payload;
//                     setRole(role);
//                     const initialWorkspace = { files: teacherFiles || [], activeFileName: activeTeacherFile || '' };
                    
//                     if (role === 'teacher' && (!teacherFiles || teacherFiles.length === 0)) {
//                         const defaultFiles: CodeFile[] = [
//                             { name: 'index.html', language: 'html', content: `<h1>Welcome!</h1>` },
//                             { name: 'style.css', language: 'css', content: `body { font-family: sans-serif; }` },
//                             { name: 'script.js', language: 'javascript', content: `console.log("Hello World!");` }
//                         ];
//                         const newWorkspace = { files: defaultFiles, activeFileName: 'index.html' };
//                         setTeacherWorkspace(newWorkspace);
//                         currentWs.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//                     } else {
//                         setTeacherWorkspace(initialWorkspace);
//                     }
//                     setMyStudentWorkspace(initialWorkspace);
//                     break;
//                 }
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     setTeacherWorkspace(message.payload);
//                     if (role === 'student' && !pendingHomework) {
//                         setMyStudentWorkspace(message.payload);
//                     }
//                     break;
                
//                 case 'HOMEWORK_JOIN':
//                     if (role === 'teacher') {
//                         setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     }
//                     break;
                
//                 case 'HOMEWORK_LEAVE':
//                      if (role === 'teacher') {
//                         setActiveHomeworkStudents(prev => {
//                             const newSet = new Set(prev);
//                             newSet.delete(message.payload.studentId);
//                             return newSet;
//                         });
//                     }
//                     break;
                
//                 case 'HOMEWORK_CODE_UPDATE':
//                     if (role === 'teacher') {
//                         const { studentId, workspace } = message.payload;
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existingState = newState.get(studentId) || { terminalOutput: '' };
//                             newState.set(studentId, { ...existingState, ...workspace });
//                             return newState;
//                         });
//                     }
//                     break;
                
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                      if (role === 'teacher') {
//                         const { studentId, output } = message.payload;
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existingState = newState.get(studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                             existingState.terminalOutput += output;
//                             newState.set(studentId, existingState);
//                             return newState;
//                         });
//                     }
//                     break;

//                 case 'HOMEWORK_ASSIGNED':
//                     if (role === 'student') {
//                         const { lessonId, teacherSessionId, title } = message.payload;
//                         setPendingHomework({ lessonId, teacherSessionId, title });
//                     }
//                     break;
//                 case 'TERMINAL_OUT':
//                     if ((role === 'teacher' && viewingMode === 'teacher') || role === 'student') {
//                         term.current?.write(message.payload);
//                     }
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(stream); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(stream); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//                 default: console.warn('Unknown message type:', message.type);
//             }
//         };
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         const newCode = value || '';
//         if (!activeFile) return;

//         const updateWorkspace = (workspace: Workspace): Workspace => {
//             const updatedFiles = workspace.files.map(file =>
//                 file.name === activeFile.name ? { ...file, content: newCode } : file
//             );
//             return { ...workspace, files: updatedFiles };
//         };

//         if (role === 'teacher' && viewingMode === 'teacher') {
//             const newWorkspace = updateWorkspace(teacherWorkspace);
//             setTeacherWorkspace(newWorkspace);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//         } else if (role === 'student') {
//             const newWorkspace = updateWorkspace(myStudentWorkspace);
//             setMyStudentWorkspace(newWorkspace);
//             ws.current?.send(JSON.stringify({ type: 'STUDENT_CODE_UPDATE', payload: newWorkspace }));
//         }
//     };


//     const handleLanguageChange = (newLanguage: string) => {
//         if (!activeFile || role !== 'teacher' || viewingMode !== 'teacher') return;
//         const updatedFiles = teacherWorkspace.files.map(file =>
//             file.name === activeFile.name ? { ...file, language: newLanguage } : file
//         );
//         const newWorkspace = { ...teacherWorkspace, files: updatedFiles, activeFileName: teacherWorkspace.activeFileName };
//         setTeacherWorkspace(newWorkspace);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//     };
    
//     const handleActiveFileChange = (fileName: string) => {
//         if (role === 'teacher' && viewingMode === 'teacher') {
//             const newWorkspace = { ...teacherWorkspace, activeFileName: fileName };
//             setTeacherWorkspace(newWorkspace);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//         } else if (role === 'student') {
//             const newWorkspace = { ...myStudentWorkspace, activeFileName: fileName };
//             setMyStudentWorkspace(newWorkspace);
//             ws.current?.send(JSON.stringify({ type: 'STUDENT_CODE_UPDATE', payload: newWorkspace }));
//         }
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher' || viewingMode !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !teacherWorkspace.files.some(f => f.name === newFileName)) {
//             const language = getLanguageForFile(newFileName);
//             const newFile: CodeFile = { name: newFileName, language, content: '' };
//             const updatedFiles = [...teacherWorkspace.files, newFile];
//             const newWorkspace: Workspace = { ...teacherWorkspace, files: updatedFiles, activeFileName: newFileName };
//             setTeacherWorkspace(newWorkspace);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: newWorkspace }));
//         } else if (newFileName) {
//             setError("A file with that name already exists.");
//         }
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number) => {
//         if (role === 'teacher') {
//             const lesson = availableLessons.find(l => l.id === lessonId);
//             ws.current?.send(JSON.stringify({ 
//                 type: 'ASSIGN_HOMEWORK', 
//                 payload: { studentId, lessonId, teacherSessionId: sessionId, title: lesson?.title || 'New Assignment' } 
//             }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN) {
//             if ((role === 'teacher' && viewingMode === 'teacher') || role === 'student') {
//                  ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//             }
//         }
//     };
//     const handleRunCode = () => {
//         if (!activeFile) return;
//         if(role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };

//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//             setConnectionStatus('Peer connection error');
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };
//     const handleDeploy = async () => {
//         setIsDeploying(true);
//         setDeploymentUrl(null);
//         setError(null);
//         const payload = { files: teacherWorkspace.files };
//         try {
//             const response = await fetch('http://localhost:5000/api/deploy', {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: JSON.stringify(payload),
//             });
//             const result = await response.json();
//             if (!response.ok) {
//                 throw new Error(result.message || `Deployment failed with status: ${response.status}`);
//             }
//             setDeploymentUrl(result.url);
//         } catch (error: any) {
//             setError(error.message || 'An unknown error occurred during deployment.');
//         } finally {
//             setIsDeploying(false);
//         }
//     };


//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800/50">
//                 <h1 className="text-lg font-bold text-slate-800 dark:text-slate-200 tracking-tight">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <div className="flex items-center gap-3">
//                     <Button onClick={handleDeploy} disabled={isDeploying} className="bg-blue-600 hover:bg-blue-700 text-white">
//                         <UploadCloud className="mr-2 h-4 w-4" /> Deploy
//                     </Button>
//                     <Button variant="destructive" onClick={() => navigate('/dashboard')}>
//                         <PhoneOff className="mr-2 h-4 w-4" /> End Session
//                     </Button>
//                 </div>
//             </header>
            
//             {error && <Alert variant="destructive" className="rounded-none border-l-0 border-r-0 border-t-0"><AlertTitle className="flex items-center justify-between">Error <Button variant="ghost" size="icon" onClick={() => setError(null)}><X className="h-4 w-4"/></Button></AlertTitle><AlertDescription>{error}</AlertDescription></Alert>}

//             {role === 'student' && pendingHomework && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned you a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button 
//                             size="sm" 
//                             onClick={() => navigate(`/lessons/${pendingHomework.lessonId}?sessionId=${pendingHomework.teacherSessionId}`)}
//                         >
//                             Start Lesson <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r border-slate-200 dark:border-slate-700">
//                         <div className="flex-shrink-0 p-3 flex justify-between items-center border-b border-slate-200 dark:border-slate-700">
//                             <h2 className="font-semibold text-sm text-slate-600 dark:text-slate-300 tracking-wider uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && (
//                                 <Button variant="ghost" size="icon" onClick={handleAddFile} className="h-7 w-7" title="Add New File">
//                                     <FilePlus className="h-4 w-4" />
//                                 </Button>
//                             )}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm cursor-pointer transition-colors ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'hover:bg-slate-100 dark:hover:bg-slate-700/50'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5 flex-shrink-0" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50" />

//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="flex-shrink-0 px-3 py-2 flex justify-between items-center bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue placeholder="Select language" /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                                 <SelectItem value="java">Java</SelectItem>
//                                                 <SelectItem value="html">HTML</SelectItem>
//                                                 <SelectItem value="css">CSS</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && (
//                                             <Button onClick={handleRunCode} size="sm" disabled={!activeFile} className="bg-green-600 hover:bg-green-700 text-white">
//                                                 <Play className="mr-2 h-4 w-4" /> Run Code
//                                             </Button>
//                                         )}
//                                     </div>
//                                     <div className="flex-grow relative">
//                                         <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={isEditorReadOnly ? undefined : handleEditorChange} options={{ readOnly: isEditorReadOnly, minimap: { enabled: true }, fontSize: 14, automaticLayout: true }} />
//                                     </div>
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="flex-shrink-0 px-3 py-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t border-slate-700 text-slate-300"><TerminalIcon className="h-4 w-4 mr-2" /><span>Terminal</span></div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50" />

//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col bg-white dark:bg-slate-800/50 p-4 space-y-4 border-l border-slate-200 dark:border-slate-700">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start">
//                                             <Laptop className="mr-2 h-4 w-4"/> My Workspace
//                                         </Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}>
//                                                         <BookMarked className="mr-2 h-4 w-4"/>Assign
//                                                     </Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>
//                                                                 {lesson.title}
//                                                             </Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
                            
//                             <Card className="flex-grow">
//                                 <CardHeader className="p-3"><CardTitle className="text-sm font-medium">Remote User</CardTitle></CardHeader>
//                                 <CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center text-slate-400 overflow-hidden"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting for peer...</span>}</div></CardContent>
//                             </Card>
//                             <Card>
//                                 <CardHeader className="p-3"><CardTitle className="text-sm font-medium">My Camera</CardTitle></CardHeader>
//                                 <CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video overflow-hidden"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent>
//                             </Card>
                            
//                             <div className="flex-shrink-0 flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;


// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, UploadCloud, Copy, X } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';


// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// // Define the structure for a code file
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';

// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();

//     // State for managing multiple files
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');

//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [role, setRole] = useState<UserRole>('unknown');

//     // State for deployment and other errors
//     const [isDeploying, setIsDeploying] = useState(false);
//     const [deploymentUrl, setDeploymentUrl] = useState<string | null>(null);
//     const [deploymentError, setDeploymentError] = useState<string | null>(null);
//     const [fileError, setFileError] = useState<string | null>(null);
    
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);

//     // Find the currently active file object
//     const activeFile = files.find(file => file.name === activeFileName);

//     useEffect(() => {
//         let isMounted = true;
//         const initialize = async () => {
//             let stream: MediaStream | null = null;
//             try {
//                 stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                 if (isMounted) {
//                     setLocalStream(stream);
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 }
//             } catch (error) {
//                 console.error("Could not get user media.", error);
//                 if (isMounted) setConnectionStatus("Camera/Mic access denied.");
//             }
//             const wsUrl = `ws://localhost:5000?sessionId=${sessionId}`;
//             const currentWs = new WebSocket(wsUrl);
//             ws.current = currentWs;
//             initializeWebSocketEvents(currentWs, stream);
//         };
//         initialize();

//         return () => {
//             isMounted = false;
//             localStream?.getTracks().forEach(track => track.stop());
//             if (ws.current && ws.current.readyState === WebSocket.OPEN) {
//                 ws.current.close();
//             }
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId]);

//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({
//                 cursorBlink: true,
//                 theme: { 
//                     background: '#1e1e1e',
//                     foreground: '#d4d4d4',
//                     cursor: '#d4d4d4',
//                     selection: '#264f78',
//                 },
//                 scrollback: 1000,
//                 convertEol: true, 
//                 fontSize: 13,
//                 fontFamily: 'Menlo, "DejaVu Sans Mono", Consolas, "Lucida Console", monospace',
//             });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;

//             const resizeObserver = new ResizeObserver(() => {
//                 setTimeout(() => fitAddon.fit(), 0);
//             });
//             resizeObserver.observe(terminalRef.current);

//             return () => resizeObserver.disconnect();
//         }
//     }, []);

//     const initializeWebSocketEvents = (currentWs: WebSocket, stream: MediaStream | null) => {
//         currentWs.onopen = () => {
//             setConnectionStatus('Connected');
//             console.log('WebSocket connection opened.');
//         };
//         currentWs.onclose = () => {
//             setConnectionStatus('Disconnected');
//             console.log('WebSocket connection closed.');
//         };
//         currentWs.onerror = (error) => {
//             setConnectionStatus('Connection Error');
//             console.error('WebSocket connection error:', error);
//         };

//         currentWs.onmessage = (event) => {
//             try {
//                 const message = JSON.parse(event.data);
//                 console.log('Received message:', message);
                
//                 const safelySetFiles = (filePayload: any) => {
//                     if (Array.isArray(filePayload)) {
//                         const validFiles = filePayload.filter(file => 
//                             file && 
//                             typeof file.name === 'string' && 
//                             typeof file.language === 'string' &&
//                             typeof file.content === 'string'
//                         );
//                         setFiles(validFiles);
//                     } else {
//                         console.warn("Received non-array payload for files, ignoring update:", filePayload);
//                     }
//                 };

//                 switch (message.type) {
//                     case 'ROLE_ASSIGNED': {
//                         const { role, files: serverFiles, activeFile: serverActiveFile } = message.payload;
//                         setRole(role);

//                         const projectNeedsInitialization = !serverFiles || !serverFiles.some(file => file.name === 'index.html');

//                         if (role === 'teacher' && projectNeedsInitialization) {
//                             console.log("Teacher joined an uninitialized session. Creating default project.");
//                             const defaultFiles: CodeFile[] = [
//                                 { name: 'index.html', language: 'html', content: `<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Live Coding Project</title>\n    <link rel="stylesheet" href="style.css">\n</head>\n<body>\n    <h1 id="main-heading">Welcome to Your Live Site!</h1>\n    <p>Edit the files in the editor to see changes here.</p>\n    <script src="script.js"></script>\n</body>\n</html>` },
//                                 { name: 'style.css', language: 'css', content: `body {\n    font-family: sans-serif;\n    background-color: #f0f4f8;\n    color: #333;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    text-align: center;\n}\n\nh1 {\n    color: #007bff;\n    font-size: 2.5rem;\n}\n\np {\n    font-size: 1.2rem;\n    color: #555;\n}` },
//                                 { name: 'script.js', language: 'javascript', content: `console.log("Hello from your live-deployed script.js!");\n\n// Example of DOM manipulation\nconst heading = document.getElementById('main-heading');\nheading.addEventListener('click', () => {\n    heading.textContent = 'You clicked the heading!';\n    console.log('Heading was clicked.');\n});` }
//                             ];
                            
//                             setFiles(defaultFiles);
//                             setActiveFileName('index.html');

//                             if (currentWs.readyState === WebSocket.OPEN) {
//                                 currentWs.send(JSON.stringify({ type: 'FILE_STRUCTURE_UPDATE', payload: { files: defaultFiles, activeFile: 'index.html' } }));
//                             }
//                         } else {
//                             safelySetFiles(serverFiles);
//                             if (serverActiveFile) {
//                                 setActiveFileName(serverActiveFile);
//                             } else if (serverFiles && serverFiles.length > 0) {
//                                 setActiveFileName(serverFiles[0].name);
//                             }
//                         }
//                         break;
//                     }
//                     case 'INITIATE_CALL': initializePeerConnection(stream); createOffer(); break;
//                     case 'WEBRTC_OFFER': initializePeerConnection(stream); handleOffer(message.payload); break;
//                     case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                     case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                     case 'PEER_LEFT': handlePeerLeft(); break;
//                     case 'FILE_STRUCTURE_UPDATE':
//                         safelySetFiles(message.payload.files);
//                         if (message.payload.activeFile) {
//                             setActiveFileName(message.payload.activeFile);
//                         }
//                         break;
//                     case 'CODE_UPDATE':
//                         setFiles(prevFiles => prevFiles.map(file => file.name === message.payload.fileName ? { ...file, content: message.payload.code } : file));
//                         break;
//                     case 'LANGUAGE_UPDATE':
//                         setFiles(prevFiles => prevFiles.map(file => file.name === message.payload.fileName ? { ...file, language: message.payload.language } : file));
//                         break;
//                     case 'TERMINAL_OUT':
//                         if (term.current) {
//                             console.log('Terminal < Received:', message.payload);
//                             term.current.write(message.payload);
//                         } else {
//                             console.warn('Terminal < Received data but terminal not initialized.');
//                         }
//                         break;
//                     default:
//                         console.warn('Unknown message type:', message);
//                         break;
//                 }
//             } catch (error) {
//                 console.error('Error processing WebSocket message:', error);
//             }
//         };
//     };
    
//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN) {
//             console.log('Terminal > Sending:', data);
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         } else {
//             console.warn('Terminal > WebSocket not open. State:', ws.current?.readyState);
//         }
//     };

//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//             setConnectionStatus('Peer connection error');
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     function handleEditorChange(value: string | undefined) {
//         const newCode = value || '';
//         if (!activeFile) return;

//         const updatedFiles = files.map(file => file.name === activeFileName ? { ...file, content: newCode } : file);
//         setFiles(updatedFiles);

//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'CODE_UPDATE', payload: { fileName: activeFileName, code: newCode } }));
//         }
//     }

//     function handleLanguageChange(newLanguage: string) {
//         if (!activeFile) return;

//         const updatedFiles = files.map(file => file.name === activeFileName ? { ...file, language: newLanguage } : file);
//         setFiles(updatedFiles);

//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'LANGUAGE_UPDATE', payload: { fileName: activeFileName, language: newLanguage } }));
//         }
//     }

//     const handleAddFile = () => {
//         const newFileName = prompt("Enter new file name (e.g., index.html, style.css):");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile: CodeFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);

//             if (ws.current?.readyState === WebSocket.OPEN) {
//                 ws.current.send(JSON.stringify({ type: 'FILE_STRUCTURE_UPDATE', payload: { files: updatedFiles, activeFile: newFileName } }));
//             }
//         } else if (newFileName) {
//             setFileError("A file with that name already exists.");
//         }
//     };

//     const handleRunCode = () => {
//         if (!ws.current || ws.current.readyState !== WebSocket.OPEN || !activeFile) {
//             console.error('Cannot run code. WebSocket not connected or no active file.');
//             return;
//         }
//         ws.current.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//     };
    
//     const handleDeploy = async () => {
//         setIsDeploying(true);
//         setDeploymentUrl(null);
//         setDeploymentError(null);

//         // CORRECT PAYLOAD: Based on the controller code, the server expects an object
//         // with a 'files' key, which contains the array of file objects.
//         const payload = { files: files };

//         try {
//             console.log('Attempting to deploy with payload:', payload);
//             const response = await fetch('http://localhost:5000/api/deploy', {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: JSON.stringify(payload),
//             });

//             const result = await response.json();

//             if (!response.ok) {
//                 // Log the detailed error message from the server if available
//                 const errorMsg = result.message || `Deployment failed with status: ${response.status}`;
//                 throw new Error(errorMsg);
//             }
            
//             setDeploymentUrl(result.url);

//         } catch (error: any) {
//             console.error('Deployment payload:', payload);
//             console.error('Full deployment error response:', error);
//             setDeploymentError(error.message || 'An unknown error occurred during deployment.');
//         } finally {
//             setIsDeploying(false);
//         }
//     };


//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800/50">
//                 <h1 className="text-lg font-bold text-slate-800 dark:text-slate-200 tracking-tight">Live Coding Session</h1>
//                 <div className="flex items-center gap-4">
//                     <Button onClick={handleDeploy} disabled={isDeploying} className="bg-blue-600 hover:bg-blue-700 text-white">
//                         {isDeploying ? (
//                             <><svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Deploying...</>
//                         ) : (
//                             <><UploadCloud className="mr-2 h-4 w-4" /> Deploy</>
//                         )}
//                     </Button>
//                     <Separator orientation="vertical" className="h-6 bg-slate-200 dark:border-slate-700" />
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}>
//                     <PhoneOff className="mr-2 h-4 w-4" /> End Session
//                 </Button>
//             </header>
            
//             {/* --- Error and Status Banners --- */}
//             {deploymentUrl && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-green-500">
//                     <AlertTitle className="flex items-center justify-between">Deployment Successful! <Button variant="ghost" size="icon" onClick={() => setDeploymentUrl(null)}><X className="h-4 w-4"/></Button></AlertTitle>
//                     <AlertDescription className="flex items-center gap-4 mt-2">
//                         Your project is live at: <a href={deploymentUrl} target="_blank" rel="noopener noreferrer" className="font-mono text-blue-500 hover:underline">{deploymentUrl}</a>
//                         <Button variant="outline" size="sm" onClick={() => navigator.clipboard.writeText(deploymentUrl)}><Copy className="h-3 w-3 mr-2" /> Copy URL</Button>
//                     </AlertDescription>
//                 </Alert>
//             )}
//             {deploymentError && (
//                  <Alert variant="destructive" className="rounded-none border-l-0 border-r-0 border-t-0">
//                     <AlertTitle className="flex items-center justify-between">Deployment Failed <Button variant="ghost" size="icon" onClick={() => setDeploymentError(null)}><X className="h-4 w-4"/></Button></AlertTitle>
//                     <AlertDescription>{deploymentError}</AlertDescription>
//                 </Alert>
//             )}
//             {fileError && (
//                  <Alert variant="destructive" className="rounded-none border-l-0 border-r-0 border-t-0">
//                     <AlertTitle className="flex items-center justify-between">File Error <Button variant="ghost" size="icon" onClick={() => setFileError(null)}><X className="h-4 w-4"/></Button></AlertTitle>
//                     <AlertDescription>{fileError}</AlertDescription>
//                 </Alert>
//             )}


//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r border-slate-200 dark:border-slate-700">
//                         <div className="flex-shrink-0 p-3 flex justify-between items-center border-b border-slate-200 dark:border-slate-700">
//                             <h2 className="font-semibold text-sm text-slate-600 dark:text-slate-300 tracking-wider uppercase">Explorer</h2>
//                             {role === 'teacher' && (
//                                 <Button variant="ghost" size="icon" onClick={handleAddFile} className="h-7 w-7 text-slate-500 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100">
//                                     <FilePlus className="h-4 w-4" />
//                                 </Button>
//                             )}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {files.map(file => (
//                                 <div key={file.name} onClick={() => setActiveFileName(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm cursor-pointer transition-colors ${activeFileName === file.name ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'hover:bg-slate-100 dark:hover:bg-slate-700/50 text-slate-700 dark:text-slate-300'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5 flex-shrink-0" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-col-resize" />

//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="flex-shrink-0 px-3 py-2 flex justify-between items-center bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={role !== 'teacher'}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue placeholder="Select language" /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                                 <SelectItem value="java">Java</SelectItem>
//                                                 <SelectItem value="html">HTML</SelectItem>
//                                                 <SelectItem value="css">CSS</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && (
//                                             <Button onClick={handleRunCode} size="sm" disabled={!activeFile} className="bg-green-600 hover:bg-green-700 text-white">
//                                                 <Play className="mr-2 h-4 w-4" /> Run Code
//                                             </Button>
//                                         )}
//                                     </div>
//                                     <div className="flex-grow relative">
//                                         <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: role === 'student', minimap: { enabled: true }, fontSize: 14, scrollBeyondLastLine: false, automaticLayout: true }} />
//                                     </div>
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-row-resize" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="flex-shrink-0 px-3 py-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t border-slate-700 text-slate-300 tracking-wider uppercase">
//                                         <TerminalIcon className="h-4 w-4 mr-2" />
//                                         <span>Terminal</span>
//                                     </div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
                    
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-col-resize" />

//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col bg-white dark:bg-slate-800/50 p-4 space-y-4 border-l border-slate-200 dark:border-slate-700">
//                             <div className="flex-grow space-y-4">
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium">Remote User</CardTitle></CardHeader>
//                                     <CardContent className="p-0">
//                                         <div className="bg-black rounded-b-lg aspect-video flex items-center justify-center text-slate-400 overflow-hidden">
//                                             <video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />
//                                             {!remoteStream && <span className="text-xs">Waiting for peer...</span>}
//                                         </div>
//                                     </CardContent>
//                                 </Card>
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium">My Camera</CardTitle></CardHeader>
//                                     <CardContent className="p-0">
//                                         <div className="bg-black rounded-b-lg aspect-video overflow-hidden">
//                                             <video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" />
//                                         </div>
//                                     </CardContent>
//                                 </Card>
//                             </div>
//                             <div className="flex-shrink-0 flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12 bg-slate-200/50 dark:bg-slate-700/50 hover:bg-slate-200 dark:hover:bg-slate-700">
//                                     {isMuted ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
//                                 </Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12 bg-slate-200/50 dark:bg-slate-700/50 hover:bg-slate-200 dark:hover:bg-slate-700">
//                                     {isCameraOff ? <VideoOff className="h-5 w-5" /> : <Video className="h-5 w-5" />}
//                                 </Button>
//                                 <Button variant="destructive" size="icon" onClick={() => navigate('/dashboard')} className="rounded-full h-12 w-12">
//                                     <PhoneOff className="h-5 w-5" />
//                                 </Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;

// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, UploadCloud, Copy, X } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';


// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// // Define the structure for a code file
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';

// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();

//     // State for managing multiple files
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');

//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [role, setRole] = useState<UserRole>('unknown');

//     // State for deployment and other errors
//     const [isDeploying, setIsDeploying] = useState(false);
//     const [deploymentUrl, setDeploymentUrl] = useState<string | null>(null);
//     const [deploymentError, setDeploymentError] = useState<string | null>(null);
//     const [fileError, setFileError] = useState<string | null>(null);
    
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);

//     // Find the currently active file object
//     const activeFile = files.find(file => file.name === activeFileName);

//     useEffect(() => {
//         let isMounted = true;
//         const initialize = async () => {
//             let stream: MediaStream | null = null;
//             try {
//                 stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                 if (isMounted) {
//                     setLocalStream(stream);
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 }
//             } catch (error) {
//                 console.error("Could not get user media.", error);
//                 if (isMounted) setConnectionStatus("Camera/Mic access denied.");
//             }
//             const wsUrl = `ws://localhost:5000?sessionId=${sessionId}`;
//             const currentWs = new WebSocket(wsUrl);
//             ws.current = currentWs;
//             initializeWebSocketEvents(currentWs, stream);
//         };
//         initialize();

//         return () => {
//             isMounted = false;
//             localStream?.getTracks().forEach(track => track.stop());
//             if (ws.current && ws.current.readyState === WebSocket.OPEN) {
//                 ws.current.close();
//             }
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId]);

//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({
//                 cursorBlink: true,
//                 theme: { 
//                     background: '#1e1e1e',
//                     foreground: '#d4d4d4',
//                     cursor: '#d4d4d4',
//                     selection: '#264f78',
//                 },
//                 scrollback: 1000,
//                 convertEol: true, 
//                 fontSize: 13,
//                 fontFamily: 'Menlo, "DejaVu Sans Mono", Consolas, "Lucida Console", monospace',
//             });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;

//             const resizeObserver = new ResizeObserver(() => {
//                 setTimeout(() => fitAddon.fit(), 0);
//             });
//             resizeObserver.observe(terminalRef.current);

//             return () => resizeObserver.disconnect();
//         }
//     }, []);

//     const initializeWebSocketEvents = (currentWs: WebSocket, stream: MediaStream | null) => {
//         currentWs.onopen = () => {
//             setConnectionStatus('Connected');
//             console.log('WebSocket connection opened.');
//         };
//         currentWs.onclose = () => {
//             setConnectionStatus('Disconnected');
//             console.log('WebSocket connection closed.');
//         };
//         currentWs.onerror = (error) => {
//             setConnectionStatus('Connection Error');
//             console.error('WebSocket connection error:', error);
//         };

//         currentWs.onmessage = (event) => {
//             try {
//                 const message = JSON.parse(event.data);
//                 console.log('Received message:', message);
                
//                 const safelySetFiles = (filePayload: any) => {
//                     if (Array.isArray(filePayload)) {
//                         const validFiles = filePayload.filter(file => 
//                             file && 
//                             typeof file.name === 'string' && 
//                             typeof file.language === 'string' &&
//                             typeof file.content === 'string'
//                         );
//                         setFiles(validFiles);
//                     } else {
//                         console.warn("Received non-array payload for files, ignoring update:", filePayload);
//                     }
//                 };

//                 switch (message.type) {
//                     case 'ROLE_ASSIGNED': {
//                         const { role, files: serverFiles, activeFile: serverActiveFile } = message.payload;
//                         setRole(role);

//                         const projectNeedsInitialization = !serverFiles || !serverFiles.some(file => file.name === 'index.html');

//                         if (role === 'teacher' && projectNeedsInitialization) {
//                             console.log("Teacher joined an uninitialized session. Creating default project.");
//                             const defaultFiles: CodeFile[] = [
//                                 { name: 'index.html', language: 'html', content: `<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Live Coding Project</title>\n    <link rel="stylesheet" href="style.css">\n</head>\n<body>\n    <h1 id="main-heading">Welcome to Your Live Site!</h1>\n    <p>Edit the files in the editor to see changes here.</p>\n    <script src="script.js"></script>\n</body>\n</html>` },
//                                 { name: 'style.css', language: 'css', content: `body {\n    font-family: sans-serif;\n    background-color: #f0f4f8;\n    color: #333;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    text-align: center;\n}\n\nh1 {\n    color: #007bff;\n    font-size: 2.5rem;\n}\n\np {\n    font-size: 1.2rem;\n    color: #555;\n}` },
//                                 { name: 'script.js', language: 'javascript', content: `console.log("Hello from your live-deployed script.js!");\n\n// Example of DOM manipulation\nconst heading = document.getElementById('main-heading');\nheading.addEventListener('click', () => {\n    heading.textContent = 'You clicked the heading!';\n    console.log('Heading was clicked.');\n});` }
//                             ];
                            
//                             setFiles(defaultFiles);
//                             setActiveFileName('index.html');

//                             if (currentWs.readyState === WebSocket.OPEN) {
//                                 currentWs.send(JSON.stringify({ type: 'FILE_STRUCTURE_UPDATE', payload: { files: defaultFiles, activeFile: 'index.html' } }));
//                             }
//                         } else {
//                             safelySetFiles(serverFiles);
//                             if (serverActiveFile) {
//                                 setActiveFileName(serverActiveFile);
//                             } else if (serverFiles && serverFiles.length > 0) {
//                                 setActiveFileName(serverFiles[0].name);
//                             }
//                         }
//                         break;
//                     }
//                     case 'INITIATE_CALL': initializePeerConnection(stream); createOffer(); break;
//                     case 'WEBRTC_OFFER': initializePeerConnection(stream); handleOffer(message.payload); break;
//                     case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                     case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                     case 'PEER_LEFT': handlePeerLeft(); break;
//                     case 'FILE_STRUCTURE_UPDATE':
//                         safelySetFiles(message.payload.files);
//                         if (message.payload.activeFile) {
//                             setActiveFileName(message.payload.activeFile);
//                         }
//                         break;
//                     case 'CODE_UPDATE':
//                         setFiles(prevFiles => prevFiles.map(file => file.name === message.payload.fileName ? { ...file, content: message.payload.code } : file));
//                         break;
//                     case 'LANGUAGE_UPDATE':
//                         setFiles(prevFiles => prevFiles.map(file => file.name === message.payload.fileName ? { ...file, language: message.payload.language } : file));
//                         break;
//                     case 'TERMINAL_OUT':
//                         if (term.current) {
//                             console.log('Terminal < Received:', message.payload);
//                             term.current.write(message.payload);
//                         } else {
//                             console.warn('Terminal < Received data but terminal not initialized.');
//                         }
//                         break;
//                     default:
//                         console.warn('Unknown message type:', message);
//                         break;
//                 }
//             } catch (error) {
//                 console.error('Error processing WebSocket message:', error);
//             }
//         };
//     };
    
//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN) {
//             console.log('Terminal > Sending:', data);
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         } else {
//             console.warn('Terminal > WebSocket not open. State:', ws.current?.readyState);
//         }
//     };

//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//             setConnectionStatus('Peer connection error');
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     function handleEditorChange(value: string | undefined) {
//         const newCode = value || '';
//         if (!activeFile) return;

//         const updatedFiles = files.map(file => file.name === activeFileName ? { ...file, content: newCode } : file);
//         setFiles(updatedFiles);

//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'CODE_UPDATE', payload: { fileName: activeFileName, code: newCode } }));
//         }
//     }

//     function handleLanguageChange(newLanguage: string) {
//         if (!activeFile) return;

//         const updatedFiles = files.map(file => file.name === activeFileName ? { ...file, language: newLanguage } : file);
//         setFiles(updatedFiles);

//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'LANGUAGE_UPDATE', payload: { fileName: activeFileName, language: newLanguage } }));
//         }
//     }

//     const handleAddFile = () => {
//         const newFileName = prompt("Enter new file name (e.g., index.html, style.css):");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile: CodeFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);

//             if (ws.current?.readyState === WebSocket.OPEN) {
//                 ws.current.send(JSON.stringify({ type: 'FILE_STRUCTURE_UPDATE', payload: { files: updatedFiles, activeFile: newFileName } }));
//             }
//         } else if (newFileName) {
//             setFileError("A file with that name already exists.");
//         }
//     };

//     const handleRunCode = () => {
//         if (!ws.current || ws.current.readyState !== WebSocket.OPEN || !activeFile) {
//             console.error('Cannot run code. WebSocket not connected or no active file.');
//             return;
//         }
//         ws.current.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//     };
    
//     const handleDeploy = async () => {
//         setIsDeploying(true);
//         setDeploymentUrl(null);
//         setDeploymentError(null);

//         // Transform the files array into an object where keys are filenames and values are content.
//         const filesToDeploy = files.reduce((acc, file) => {
//             acc[file.name] = file.content;
//             return acc;
//         }, {} as { [key: string]: string });

//         const payload = { files: filesToDeploy };

//         try {
//             console.log('Attempting to deploy with payload:', payload);
//             const response = await fetch('http://localhost:5000/api/deploy', {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json' },
//                 body: JSON.stringify(payload),
//             });

//             const result = await response.json();

//             if (!response.ok) {
//                 // Log the detailed error message from the server if available
//                 const errorMsg = result.message || `Deployment failed with status: ${response.status}`;
//                 throw new Error(errorMsg);
//             }
            
//             setDeploymentUrl(result.url);

//         } catch (error: any) {
//             console.error('Deployment payload:', payload);
//             console.error('Full deployment error response:', error);
//             setDeploymentError(error.message || 'An unknown error occurred during deployment.');
//         } finally {
//             setIsDeploying(false);
//         }
//     };


//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800/50">
//                 <h1 className="text-lg font-bold text-slate-800 dark:text-slate-200 tracking-tight">Live Coding Session</h1>
//                 <div className="flex items-center gap-4">
//                     <Button onClick={handleDeploy} disabled={isDeploying} className="bg-blue-600 hover:bg-blue-700 text-white">
//                         {isDeploying ? (
//                             <><svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Deploying...</>
//                         ) : (
//                             <><UploadCloud className="mr-2 h-4 w-4" /> Deploy</>
//                         )}
//                     </Button>
//                     <Separator orientation="vertical" className="h-6 bg-slate-200 dark:bg-slate-700" />
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}>
//                     <PhoneOff className="mr-2 h-4 w-4" /> End Session
//                 </Button>
//             </header>
            
//             {/* --- Error and Status Banners --- */}
//             {deploymentUrl && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-green-500">
//                     <AlertTitle className="flex items-center justify-between">Deployment Successful! <Button variant="ghost" size="icon" onClick={() => setDeploymentUrl(null)}><X className="h-4 w-4"/></Button></AlertTitle>
//                     <AlertDescription className="flex items-center gap-4 mt-2">
//                         Your project is live at: <a href={deploymentUrl} target="_blank" rel="noopener noreferrer" className="font-mono text-blue-500 hover:underline">{deploymentUrl}</a>
//                         <Button variant="outline" size="sm" onClick={() => navigator.clipboard.writeText(deploymentUrl)}><Copy className="h-3 w-3 mr-2" /> Copy URL</Button>
//                     </AlertDescription>
//                 </Alert>
//             )}
//             {deploymentError && (
//                  <Alert variant="destructive" className="rounded-none border-l-0 border-r-0 border-t-0">
//                     <AlertTitle className="flex items-center justify-between">Deployment Failed <Button variant="ghost" size="icon" onClick={() => setDeploymentError(null)}><X className="h-4 w-4"/></Button></AlertTitle>
//                     <AlertDescription>{deploymentError}</AlertDescription>
//                 </Alert>
//             )}
//             {fileError && (
//                  <Alert variant="destructive" className="rounded-none border-l-0 border-r-0 border-t-0">
//                     <AlertTitle className="flex items-center justify-between">File Error <Button variant="ghost" size="icon" onClick={() => setFileError(null)}><X className="h-4 w-4"/></Button></AlertTitle>
//                     <AlertDescription>{fileError}</AlertDescription>
//                 </Alert>
//             )}


//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r border-slate-200 dark:border-slate-700">
//                         <div className="flex-shrink-0 p-3 flex justify-between items-center border-b border-slate-200 dark:border-slate-700">
//                             <h2 className="font-semibold text-sm text-slate-600 dark:text-slate-300 tracking-wider uppercase">Explorer</h2>
//                             {role === 'teacher' && (
//                                 <Button variant="ghost" size="icon" onClick={handleAddFile} className="h-7 w-7 text-slate-500 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100">
//                                     <FilePlus className="h-4 w-4" />
//                                 </Button>
//                             )}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {files.map(file => (
//                                 <div key={file.name} onClick={() => setActiveFileName(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm cursor-pointer transition-colors ${activeFileName === file.name ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'hover:bg-slate-100 dark:hover:bg-slate-700/50 text-slate-700 dark:text-slate-300'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5 flex-shrink-0" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-col-resize" />

//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="flex-shrink-0 px-3 py-2 flex justify-between items-center bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={role !== 'teacher'}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue placeholder="Select language" /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                                 <SelectItem value="java">Java</SelectItem>
//                                                 <SelectItem value="html">HTML</SelectItem>
//                                                 <SelectItem value="css">CSS</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && (
//                                             <Button onClick={handleRunCode} size="sm" disabled={!activeFile} className="bg-green-600 hover:bg-green-700 text-white">
//                                                 <Play className="mr-2 h-4 w-4" /> Run Code
//                                             </Button>
//                                         )}
//                                     </div>
//                                     <div className="flex-grow relative">
//                                         <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: role === 'student', minimap: { enabled: true }, fontSize: 14, scrollBeyondLastLine: false, automaticLayout: true }} />
//                                     </div>
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-row-resize" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="flex-shrink-0 px-3 py-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t border-slate-700 text-slate-300 tracking-wider uppercase">
//                                         <TerminalIcon className="h-4 w-4 mr-2" />
//                                         <span>Terminal</span>
//                                     </div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
                    
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-col-resize" />

//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col bg-white dark:bg-slate-800/50 p-4 space-y-4 border-l border-slate-200 dark:border-slate-700">
//                             <div className="flex-grow space-y-4">
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium">Remote User</CardTitle></CardHeader>
//                                     <CardContent className="p-0">
//                                         <div className="bg-black rounded-b-lg aspect-video flex items-center justify-center text-slate-400 overflow-hidden">
//                                             <video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />
//                                             {!remoteStream && <span className="text-xs">Waiting for peer...</span>}
//                                         </div>
//                                     </CardContent>
//                                 </Card>
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium">My Camera</CardTitle></CardHeader>
//                                     <CardContent className="p-0">
//                                         <div className="bg-black rounded-b-lg aspect-video overflow-hidden">
//                                             <video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" />
//                                         </div>
//                                     </CardContent>
//                                 </Card>
//                             </div>
//                             <div className="flex-shrink-0 flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12 bg-slate-200/50 dark:bg-slate-700/50 hover:bg-slate-200 dark:hover:bg-slate-700">
//                                     {isMuted ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
//                                 </Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12 bg-slate-200/50 dark:bg-slate-700/50 hover:bg-slate-200 dark:hover:bg-slate-700">
//                                     {isCameraOff ? <VideoOff className="h-5 w-5" /> : <Video className="h-5 w-5" />}
//                                 </Button>
//                                 <Button variant="destructive" size="icon" onClick={() => navigate('/dashboard')} className="rounded-full h-12 w-12">
//                                     <PhoneOff className="h-5 w-5" />
//                                 </Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;



// __________________________________
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';


// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// // --- TYPE DEFINITIONS ---
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// interface Workspace {
//     files: CodeFile[];
//     activeFileName: string;
// }

// interface StudentHomeworkState extends Workspace {
//     terminalOutput: string;
// }

// interface Student {
//     id: string;
//     username: string;
// }

// interface Lesson {
//     id: number;
//     title: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID

// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     // --- STATE MANAGEMENT ---
//     const [role, setRole] = useState<UserRole>('unknown');
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
    
//     // Student and Homework States
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());

//     // Media and Connection States
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
    
//     // --- REFS ---
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     // --- DERIVED STATE ---
//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     // --- EFFECTS ---
//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }

//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);

//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) {
//                         localVideoRef.current.srcObject = stream;
//                     }
//                 } catch (err) {
//                     console.error("Could not get user media.", err);
//                 }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) {
//                     const data = await response.json();
//                     setAvailableLessons(data);
//                 }
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[${role || 'CLIENT'}] Received:`, message.type);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     if (role === 'student') {
//                         setFiles(message.payload.files);
//                         setActiveFileName(message.payload.activeFileName);
//                     }
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     console.log("[STUDENT] Received HOMEWORK_ASSIGNED. Payload:", message.payload);
//                     setPendingHomework(message.payload);
//                     console.log("[STUDENT] Set pendingHomework state. UI should now show the notification banner.");
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     if (role === 'teacher') {
//                         setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     }
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                 case 'STUDENT_WORKSPACE_UPDATE': // Handle both for robustness
//                     if (role === 'teacher') {
//                         const { studentId, ...workspace } = message.payload;
//                         setStudentHomeworkStates(prev => new Map(prev).set(studentId, { ...prev.get(studentId), ...workspace }));
//                     }
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     if (role === 'teacher') {
//                         const { studentId, output } = message.payload;
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existing = newState.get(studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                             existing.terminalOutput += output;
//                             newState.set(studentId, existing);
//                             return newState;
//                         });
//                     }
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//              console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ 
//                 type: 'ASSIGN_HOMEWORK', 
//                 payload
//             }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {role === 'student' && pendingHomework && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={() => navigate(`/lessons/${pendingHomework.lessonId}?sessionId=${pendingHomework.teacherSessionId}`)}>
//                             Start Lesson <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;


// MVP 3 LATEST
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';


// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// // --- TYPE DEFINITIONS ---
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// interface Workspace {
//     files: CodeFile[];
//     activeFileName: string;
// }

// interface StudentHomeworkState extends Workspace {
//     terminalOutput: string;
// }

// interface Student {
//     id: string;
//     username: string;
// }

// interface Lesson {
//     id: number;
//     title: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID

// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     // --- STATE MANAGEMENT ---
//     const [role, setRole] = useState<UserRole>('unknown');
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
    
//     // Student and Homework States
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());

//     // Media and Connection States
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
    
//     // --- REFS ---
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     // --- DERIVED STATE ---
//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     // --- EFFECTS ---
//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }

//         // Use the authenticated websocket URL
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);

//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) {
//                         localVideoRef.current.srcObject = stream;
//                     }
//                 } catch (err) {
//                     console.error("Could not get user media.", err);
//                 }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) {
//                     const data = await response.json();
//                     setAvailableLessons(data);
//                 }
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[${role || 'CLIENT'}] Received:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     // **FIX**: This is the central sync message. It should ALWAYS update the state.
//                     setFiles(message.payload.files);
//                     setActiveFileName(message.payload.activeFileName);
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     // **FIX**: The role might not be set yet when the first message arrives.
//                     // If this message is received, it's for this client.
//                     console.log("[STUDENT] Received HOMEWORK_ASSIGNED. Payload:", message.payload);
//                     setPendingHomework(message.payload);
//                     console.log("[STUDENT] Set pendingHomework state. UI should now show the notification banner.");
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     if (role === 'teacher') {
//                         console.log(`[TEACHER] Student ${message.payload.studentId} started homework. Activating 'Live' indicator.`);
//                         setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     }
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                 case 'STUDENT_WORKSPACE_UPDATE': // Handle both for robustness
//                     if (role === 'teacher') {
//                         const { studentId, ...workspace } = message.payload;
//                         console.log(`[TEACHER] Received homework code update from student ${studentId}.`);
//                         setStudentHomeworkStates(prev => new Map(prev).set(studentId, { ...prev.get(studentId), ...workspace }));
//                     }
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     if (role === 'teacher') {
//                         const { studentId, output } = message.payload;
//                         console.log(`[TEACHER] Received homework terminal update from student ${studentId}.`);
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existing = newState.get(studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                             existing.terminalOutput += output;
//                             newState.set(studentId, existing);
//                             return newState;
//                         });
//                     }
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//              console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ 
//                 type: 'ASSIGN_HOMEWORK', 
//                 payload
//             }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {pendingHomework && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={() => navigate(`/lessons/${pendingHomework.lessonId}?sessionId=${pendingHomework.teacherSessionId}`)}>
//                             Start Lesson <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;

// MVP 4 latest
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor, { OnMount } from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight, BeakerIcon, CheckCircle, XCircle, Trash2, Lightbulb } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
// import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel } from "@/components/ui/alert-dialog";

// // --- TYPE DEFINITIONS (from both files) ---
// interface CodeFile { name: string; language: string; content: string; }
// interface LessonFile { id: string; filename: string; content: string; }
// interface Workspace { files: CodeFile[]; activeFileName: string; }
// interface StudentHomeworkState extends Workspace { terminalOutput: string; }
// interface Student { id: string; username: string; }
// interface Lesson { id: number; title: string; description: string; course_id: string; files: LessonFile[] }
// interface TestResult { passed: number; failed: number; total: number; results: string; }

// const stunServers = {
//   iceServers: [ { urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' } ],
// };

// // --- HOMEWORK VIEW COMPONENT ---
// // This is a self-contained view for a student doing homework, based on ViewLessonPage.tsx
// const HomeworkView: React.FC<{ lessonId: string; teacherSessionId: string; token: string | null; onLeave: () => void }> = ({ lessonId, teacherSessionId, token, onLeave }) => {
//     const [lesson, setLesson] = useState<Lesson | null>(null);
//     const [files, setFiles] = useState<LessonFile[]>([]);
//     const [activeFileId, setActiveFileId] = useState<string | null>(null);
//     const [testResults, setTestResults] = useState<TestResult | null>(null);
//     const [isTesting, setIsTesting] = useState(false);
//     const [isTestModalOpen, setIsTestModalOpen] = useState(false);

//     const hwWs = useRef<WebSocket | null>(null);
//     const hwTermRef = useRef<HTMLDivElement>(null);
//     const hwTerm = useRef<Terminal | null>(null);
//     const editorRef = useRef<any>(null);

//     const activeFile = files.find(f => f.id === activeFileId);

//     // Effect for fetching lesson data
//     useEffect(() => {
//         const fetchLesson = async () => {
//             const res = await fetch(`http://localhost:5000/api/lessons/${lessonId}`, { headers: { 'Authorization': `Bearer ${token}` } });
//             if (res.ok) {
//                 const data = await res.json();
//                 setLesson(data);
//                 setFiles(data.files || []);
//                 if (data.files && data.files.length > 0) {
//                     setActiveFileId(data.files[0].id);
//                 }
//             }
//         };
//         fetchLesson();
//     }, [lessonId, token]);

//     // Effect for WebSocket connection for this homework session
//     useEffect(() => {
//         const homeworkSessionId = crypto.randomUUID();
//         const wsUrl = `ws://localhost:5000?sessionId=${homeworkSessionId}&token=${token}&teacherSessionId=${teacherSessionId}&lessonId=${lessonId}`;
//         const currentWs = new WebSocket(wsUrl);
//         hwWs.current = currentWs;

//         currentWs.onopen = () => console.log(`[HOMEWORK] WebSocket for lesson ${lessonId} connected.`);
//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             if (message.type === 'TERMINAL_OUT') {
//                 hwTerm.current?.write(message.payload);
//             }
//         };

//         return () => {
//             currentWs.send(JSON.stringify({ type: 'HOMEWORK_LEAVE' }));
//             currentWs.close();
//         };
//     }, [lessonId, teacherSessionId, token]);

//     // Effect for initializing the terminal
//     useEffect(() => {
//         if (hwTermRef.current && !hwTerm.current) {
//             const fitAddon = new FitAddon();
//             const term = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             term.loadAddon(fitAddon);
//             term.open(hwTermRef.current);
//             fitAddon.fit();
//             term.onData(data => {
//                 if (hwWs.current?.readyState === WebSocket.OPEN) {
//                     hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_TERMINAL_IN', payload: data }));
//                 }
//             });
//             hwTerm.current = term;
//         }
//     }, []);

//     const handleFileContentChange = (content: string | undefined) => {
//         const updatedFiles = files.map(file => file.id === activeFileId ? { ...file, content: content || '' } : file);
//         setFiles(updatedFiles);
//         if (hwWs.current?.readyState === WebSocket.OPEN) {
//             hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: activeFile?.filename } }));
//         }
//     };

//     const handleRunTests = async () => {
//         if (!lessonId) return;
//         setIsTesting(true);
//         setIsTestModalOpen(true);
//         setTestResults(null);
//         try {
//             const response = await fetch(`http://localhost:5000/api/lessons/${lessonId}/run-tests`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                 body: JSON.stringify({ files })
//             });
//             const data: TestResult = await response.json();
//             setTestResults(data);
//         } catch (err) {
//             setTestResults({ passed: 0, failed: 1, total: 1, results: "An error occurred while running tests." });
//         } finally {
//             setIsTesting(false);
//         }
//     };
    
//     if (!lesson) return <div>Loading Lesson...</div>;

//     return (
//         <div className="w-full h-full flex flex-col">
//             {isTestModalOpen && <TestResultsModal results={testResults} isLoading={isTesting} onClose={() => setIsTestModalOpen(false)} />}
//             <header className="flex-shrink-0 flex justify-between items-center p-4 border-b">
//                 <div>
//                     <h1 className="text-2xl font-bold">{lesson.title}</h1>
//                     <p className="text-muted-foreground">You are in a live homework session.</p>
//                 </div>
//                 <div className="flex items-center gap-4">
//                     <Button onClick={handleRunTests} disabled={isTesting}><BeakerIcon className="mr-2 h-4 w-4" /> Run Tests</Button>
//                     <Button variant="outline" onClick={onLeave}>Return to Classroom</Button>
//                 </div>
//             </header>
//             <main className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 p-6 overflow-hidden">
//                 <div className="lg:col-span-1 flex flex-col gap-6">
//                     <Card><CardHeader><CardTitle>Instructions</CardTitle></CardHeader><CardContent><p>{lesson.description}</p></CardContent></Card>
//                     <Card className="flex-grow flex flex-col"><CardHeader><CardTitle>Project Files</CardTitle></CardHeader>
//                         <CardContent className="flex-grow overflow-y-auto">
//                             {files.map(file => (
//                                 <div key={file.id} onClick={() => setActiveFileId(file.id)} className={`flex items-center p-2 rounded-md cursor-pointer ${activeFileId === file.id ? 'bg-accent' : 'hover:bg-accent/50'}`}>
//                                     <FileIcon className="mr-2 h-4 w-4" />{file.filename}
//                                 </div>
//                             ))}
//                         </CardContent>
//                     </Card>
//                 </div>
//                 <div className="lg:col-span-2 h-full flex flex-col rounded-lg border bg-background overflow-hidden">
//                     <PanelGroup direction="vertical">
//                         <Panel defaultSize={70} minSize={20}>
//                             <Editor height="100%" theme="vs-dark" path={activeFile?.filename} value={activeFile?.content} onChange={handleFileContentChange} onMount={(editor) => editorRef.current = editor} />
//                         </Panel>
//                         <PanelResizeHandle className="h-2 bg-slate-200" />
//                         <Panel defaultSize={30} minSize={10}>
//                             <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                 <div className="p-2 bg-slate-800 text-white text-sm font-semibold flex items-center"><TerminalIcon className="mr-2 h-4 w-4" />Terminal</div>
//                                 <div ref={hwTermRef} className="flex-grow p-2" />
//                             </div>
//                         </Panel>
//                     </PanelGroup>
//                 </div>
//             </main>
//         </div>
//     );
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     const [role, setRole] = useState<UserRole>('unknown');
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [isDoingHomework, setIsDoingHomework] = useState(false); // **NEW**: To toggle student view

//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);
//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 } catch (err) { console.error("Could not get user media.", err); }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) setAvailableLessons(await response.json());
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[${role || 'CLIENT'}] Received:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     setFiles(message.payload.files);
//                     setActiveFileName(message.payload.activeFileName);
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     setPendingHomework(message.payload);
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     if (role === 'teacher') setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     break;
//                 case 'HOMEWORK_LEAVE':
//                     if (role === 'teacher') {
//                         setActiveHomeworkStudents(prev => {
//                             const newSet = new Set(prev);
//                             newSet.delete(message.payload.studentId);
//                             return newSet;
//                         });
//                     }
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                 case 'STUDENT_WORKSPACE_UPDATE':
//                     if (role === 'teacher') {
//                         const { studentId, workspace } = message.payload;
//                         setStudentHomeworkStates(prev => new Map(prev).set(studentId, { ...prev.get(studentId), ...workspace }));
//                     }
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     if (role === 'teacher') {
//                         const { studentId, output } = message.payload;
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existing = newState.get(studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                             existing.terminalOutput += output;
//                             newState.set(studentId, existing);
//                             return newState;
//                         });
//                     }
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//             console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ type: 'ASSIGN_HOMEWORK', payload }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => { /* ... Full implementation ... */ };
//     const createOffer = async () => { /* ... Full implementation ... */ };
//     const handleOffer = async (offer: RTCSessionDescriptionInit) => { /* ... Full implementation ... */ };
//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => { /* ... Full implementation ... */ };
//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => { /* ... Full implementation ... */ };
//     const handlePeerLeft = () => { /* ... Full implementation ... */ };
//     const toggleMute = () => { /* ... Full implementation ... */ };
//     const toggleCamera = () => { /* ... Full implementation ... */ };

//     // **NEW**: Render logic to switch between classroom and homework view for students
//     if (role === 'student' && isDoingHomework && pendingHomework) {
//         return <HomeworkView 
//                     lessonId={pendingHomework.lessonId} 
//                     teacherSessionId={pendingHomework.teacherSessionId} 
//                     token={token} 
//                     onLeave={() => {
//                         setIsDoingHomework(false);
//                         setPendingHomework(null);
//                     }} 
//                 />;
//     }

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {role === 'student' && pendingHomework && !isDoingHomework && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={() => setIsDoingHomework(true)}>
//                             Start Lesson <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;

// _____________________________________________________
// export default LiveTutorialPage;
// PERFECT FINAL MVP
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor, { OnMount } from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight, BeakerIcon, CheckCircle, XCircle, Trash2, Lightbulb, Save, Send } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
// import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel } from "@/components/ui/alert-dialog";
// import { toast, Toaster } from 'sonner';

// // --- TYPE DEFINITIONS ---
// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID
// interface CodeFile { name: string; language: string; content: string; }
// interface LessonFile { id: string; filename: string; content: string; }
// interface Workspace { files: CodeFile[]; activeFileName: string; }
// interface StudentHomeworkState extends Workspace { terminalOutput: string; }
// interface Student { id: string; username: string; }
// interface Lesson { id: number | string; title: string; description: string; course_id: string; files: LessonFile[] }
// interface TestResult { passed: number; failed: number; total: number; results: string; }

// // --- Helper function to decode JWT ---
// const simpleJwtDecode = (token: string) => {
//     try {
//         const base64Url = token.split('.')[1];
//         const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
//         const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
//             return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
//         }).join(''));
//         return JSON.parse(jsonPayload);
//     } catch (error) {
//         console.error("Invalid token:", error);
//         return null;
//     }
// };


// const stunServers = {
//   iceServers: [ { urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' } ],
// };

// // --- MODAL COMPONENTS ---
// const TestResultsModal = ({ results, isLoading, onClose }: { results: TestResult | null, isLoading: boolean, onClose: () => void }) => (
//     <AlertDialog open={true} onOpenChange={onClose}>
//         <AlertDialogContent>
//             <AlertDialogHeader>
//                 <AlertDialogTitle>Test Results</AlertDialogTitle>
//                 <AlertDialogDescription className="pt-4 space-y-4">
//                     {isLoading ? "Running tests..." : results && (
//                         <>
//                             <div className={`p-4 rounded-md ${results.failed > 0 ? 'bg-destructive/10 text-destructive' : 'bg-green-500/10 text-green-700'}`}>
//                                 <h3 className="font-bold text-lg">
//                                     {results.failed > 0 ? `${results.failed} / ${results.total} Tests Failed` : `All ${results.total} Tests Passed!`}
//                                 </h3>
//                             </div>
//                             <div className="bg-muted p-4 rounded-md text-foreground whitespace-pre-wrap text-xs max-h-60 overflow-y-auto">
//                                 <code>{results.results}</code>
//                             </div>
//                         </>
//                     )}
//                 </AlertDialogDescription>
//             </AlertDialogHeader>
//             <AlertDialogFooter>
//                 <AlertDialogCancel>Close</AlertDialogCancel>
//             </AlertDialogFooter>
//         </AlertDialogContent>
//     </AlertDialog>
// );

// // --- HOMEWORK VIEW COMPONENT (with Save/Submit functionality) ---
// interface HomeworkViewProps {
//     lessonId: string;
//     teacherSessionId: string;
//     token: string | null;
//     onLeave: () => void;
//     initialFiles: LessonFile[];
//     onFilesChange: (files: LessonFile[]) => void;
// }

// const HomeworkView: React.FC<HomeworkViewProps> = ({ lessonId, teacherSessionId, token, onLeave, initialFiles, onFilesChange }) => {
//     const [lesson, setLesson] = useState<Lesson | null>(null);
//     const [activeFileId, setActiveFileId] = useState<string | null>(initialFiles[0]?.id || null);
//     const [testResults, setTestResults] = useState<TestResult | null>(null);
//     const [isTesting, setIsTesting] = useState(false);
//     const [isTestModalOpen, setIsTestModalOpen] = useState(false);
//     const [isSaving, setIsSaving] = useState(false);
//     const [error, setError] = useState<string | null>(null);
//     const [conceptualHint, setConceptualHint] = useState<string | null>(null);

//     const hwWs = useRef<WebSocket | null>(null);
//     const hwTermRef = useRef<HTMLDivElement>(null);
//     const hwTerm = useRef<Terminal | null>(null);
//     const editorRef = useRef<any>(null);

//     const activeFile = initialFiles.find(f => f.id === activeFileId);

//     useEffect(() => {
//         const fetchLessonDetails = async () => {
//             const res = await fetch(`http://localhost:5000/api/lessons/${lessonId}`, { headers: { 'Authorization': `Bearer ${token}` } });
//             if (res.ok) {
//                 const data = await res.json();
//                 setLesson(data);
//             }
//         };
//         fetchLessonDetails();
//     }, [lessonId, token]);

//     useEffect(() => {
//         const homeworkSessionId = crypto.randomUUID();
//         const wsUrl = `ws://localhost:5000?sessionId=${homeworkSessionId}&token=${token}&teacherSessionId=${teacherSessionId}&lessonId=${lessonId}`;
//         const currentWs = new WebSocket(wsUrl);
//         hwWs.current = currentWs;

//         currentWs.onopen = () => {
//             console.log(`[HOMEWORK] WebSocket for lesson ${lessonId} connected.`);
//             setTimeout(() => {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_JOIN' }));
//             }, 500);
//         };
//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             if (message.type === 'TERMINAL_OUT') {
//                 hwTerm.current?.write(message.payload);
//             }
//         };

//         return () => {
//             if(currentWs.readyState === WebSocket.OPEN) {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_LEAVE' }));
//             }
//             currentWs.close();
//         };
//     }, [lessonId, teacherSessionId, token]);
    
//     useEffect(() => {
//         if (initialFiles.length > 0 && hwWs.current?.readyState === WebSocket.OPEN) {
//             const broadcastFiles = initialFiles.map(f => ({ name: f.filename, language: 'javascript', content: f.content }));
//             const broadcastActiveFile = initialFiles.find(f => f.id === activeFileId)?.filename || '';
//             hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_CODE_UPDATE', payload: { files: broadcastFiles, activeFileName: broadcastActiveFile } }));
//         }
//     }, [initialFiles, activeFileId, hwWs.current?.readyState]);


//     useEffect(() => {
//         if (hwTermRef.current && !hwTerm.current) {
//             const fitAddon = new FitAddon();
//             const term = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             term.loadAddon(fitAddon);
//             term.open(hwTermRef.current);
//             fitAddon.fit();
//             term.onData(data => {
//                 if (hwWs.current?.readyState === WebSocket.OPEN) {
//                     hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_TERMINAL_IN', payload: data }));
//                 }
//             });
//             hwTerm.current = term;
//         }
//     }, []);

//     const handleFileContentChange = (content: string | undefined) => {
//         const updatedFiles = initialFiles.map(file => file.id === activeFileId ? { ...file, content: content || '' } : file);
//         onFilesChange(updatedFiles);
//     };

//     const handleRunTests = async () => {
//         if (!lessonId) return;
//         setIsTesting(true);
//         setIsTestModalOpen(true);
//         setTestResults(null);
//         try {
//             const response = await fetch(`http://localhost:5000/api/lessons/${lessonId}/run-tests`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                 body: JSON.stringify({ files: initialFiles })
//             });
//             const data: TestResult = await response.json();
//             setTestResults(data);
//         } catch (err) {
//             setTestResults({ passed: 0, failed: 1, total: 1, results: "An error occurred while running tests." });
//         } finally {
//             setIsTesting(false);
//         }
//     };

//     const handleSaveCode = async () => {
//         if (!lessonId) return;
//         setIsSaving(true);
//         toast.loading("Saving your progress...");

//         try {
//             const response = await fetch(`http://localhost:5000/api/lessons/${lessonId}/save-progress`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                 body: JSON.stringify({ files: initialFiles })
//             });

//             if (!response.ok) {
//                 const errData = await response.json();
//                 throw new Error(errData.error || 'Failed to save progress.');
//             }
            
//             toast.success("Progress saved successfully!");

//         } catch (err) {
//             if (err instanceof Error) {
//                 toast.error(err.message);
//             } else {
//                 toast.error("An unknown error occurred while saving.");
//             }
//         } finally {
//             setIsSaving(false);
//         }
//     };

//     const handleSubmit = async () => {
//         setError(null);
//         setConceptualHint(null);
        
//         const promise = () => new Promise(async (resolve, reject) => {
//             try {
//                 const submitResponse = await fetch(`http://localhost:5000/api/lessons/${lessonId}/submit`, {
//                     method: 'POST',
//                     headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                     body: JSON.stringify({ files: initialFiles })
//                 });

//                 if (!submitResponse.ok) {
//                     const errorData = await submitResponse.json().catch(() => ({
//                         error: 'Submission failed. Please run the tests to see the errors.'
//                     }));
//                     return reject(new Error(errorData.error));
//                 }

//                 const result = await submitResponse.json();
                
//                 if (result.feedback_type === 'conceptual_hint') {
//                     setConceptualHint(result.message);
//                     return resolve("All tests passed! The AI has a suggestion for you.");
//                 } else {
//                     setTimeout(() => onLeave(), 2500);
//                     return resolve("Great work! Your solution is correct. Returning to classroom...");
//                 }

//             } catch (err) {
//                 return reject(err);
//             }
//         });

//         toast.promise(promise, {
//             loading: 'Submitting and checking tests...',
//             success: (message) => `${message}`,
//             error: (err) => {
//                 if (err instanceof Error) {
//                     setError(err.message);
//                     return `Submission Failed: ${err.message}`;
//                 }
//                 return "An unknown error occurred.";
//             },
//         });
//     };
    
//     if (!lesson) return <div className="p-8">Loading Lesson...</div>;

//     return (
//         <div className="w-full h-screen flex flex-col">
//             <Toaster richColors position="top-center" />
//             {isTestModalOpen && <TestResultsModal results={testResults} isLoading={isTesting} onClose={() => setIsTestModalOpen(false)} />}
//             <header className="flex-shrink-0 flex justify-between items-center p-4 border-b bg-white">
//                 <div>
//                     <h1 className="text-2xl font-bold">{lesson.title}</h1>
//                     <p className="text-muted-foreground">You are in a live homework session.</p>
//                 </div>
//                 <div className="flex items-center gap-2">
//                     <Button variant="outline" onClick={handleSaveCode} disabled={isSaving}>
//                         <Save className="mr-2 h-4 w-4" /> {isSaving ? 'Saving...' : 'Save Progress'}
//                     </Button>
//                     <Button onClick={handleRunTests} disabled={isTesting}>
//                         <BeakerIcon className="mr-2 h-4 w-4" /> {isTesting ? 'Running...' : 'Run Tests'}
//                     </Button>
//                     <Button variant="default" onClick={handleSubmit}>
//                         <Send className="mr-2 h-4 w-4" /> Submit Solution
//                     </Button>
//                     <Button variant="outline" onClick={onLeave}>Return to Classroom</Button>
//                 </div>
//             </header>
//             <main className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 p-6 overflow-hidden">
//                 <div className="lg:col-span-1 flex flex-col gap-6">
//                     <Card><CardHeader><CardTitle>Instructions</CardTitle></CardHeader><CardContent><p>{lesson.description}</p></CardContent></Card>
                    
//                     {error && (
//                         <Alert variant="destructive">
//                             <XCircle className="h-4 w-4" />
//                             <AlertTitle className="font-bold">Submission Error</AlertTitle>
//                             <AlertDescription>{error}</AlertDescription>
//                         </Alert>
//                     )}
//                     {conceptualHint && (
//                         <Alert variant="default" className="bg-blue-50 border-blue-200">
//                             <Lightbulb className="h-4 w-4 text-blue-600" />
//                             <AlertTitle className="font-bold text-blue-800">A Helpful Suggestion</AlertTitle>
//                             <AlertDescription className="text-blue-700">{conceptualHint}</AlertDescription>
//                         </Alert>
//                     )}

//                     <Card className="flex-grow flex flex-col"><CardHeader><CardTitle>Project Files</CardTitle></CardHeader>
//                         <CardContent className="flex-grow overflow-y-auto">
//                             {initialFiles.map(file => (
//                                 <div key={file.id} onClick={() => setActiveFileId(file.id)} className={`flex items-center p-2 rounded-md cursor-pointer ${activeFileId === file.id ? 'bg-accent' : 'hover:bg-accent/50'}`}>
//                                     <FileIcon className="mr-2 h-4 w-4" />{file.filename}
//                                 </div>
//                             ))}
//                         </CardContent>
//                     </Card>
//                 </div>
//                 <div className="lg:col-span-2 h-full flex flex-col rounded-lg border bg-background overflow-hidden">
//                     <PanelGroup direction="vertical">
//                         <Panel defaultSize={70} minSize={20}>
//                             <Editor height="100%" theme="vs-dark" path={activeFile?.filename} value={activeFile?.content} onChange={handleFileContentChange} onMount={(editor) => editorRef.current = editor} />
//                         </Panel>
//                         <PanelResizeHandle className="h-2 bg-slate-200" />
//                         <Panel defaultSize={30} minSize={10}>
//                             <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                 <div className="p-2 bg-slate-800 text-white text-sm font-semibold flex items-center"><TerminalIcon className="mr-2 h-4 w-4" />Terminal</div>
//                                 <div ref={hwTermRef} className="flex-grow p-2" />
//                             </div>
//                         </Panel>
//                     </PanelGroup>
//                 </div>
//             </main>
//         </div>
//     );
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     const decodedToken = token ? simpleJwtDecode(token) : null;
//     const initialUserRole = decodedToken?.user?.role || 'unknown';

//     const [role, setRole] = useState<UserRole>(initialUserRole);
    
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
    
//     // MODIFIED: State initializers now read from sessionStorage to persist across refreshes.
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(() => {
//         const saved = sessionStorage.getItem(`pendingHomework_${sessionId}`);
//         return saved ? JSON.parse(saved) : null;
//     });
//     const [isDoingHomework, setIsDoingHomework] = useState<boolean>(() => {
//         const saved = sessionStorage.getItem(`isDoingHomework_${sessionId}`);
//         return saved === 'true';
//     });
//     const [homeworkFiles, setHomeworkFiles] = useState<LessonFile[] | null>(() => {
//         const saved = sessionStorage.getItem(`homeworkFiles_${sessionId}`);
//         return saved ? JSON.parse(saved) : null;
//     });

//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);

//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);
//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         if (role === 'student') {
//             sessionStorage.setItem(`isDoingHomework_${sessionId}`, String(isDoingHomework));
//             if (pendingHomework) {
//                 sessionStorage.setItem(`pendingHomework_${sessionId}`, JSON.stringify(pendingHomework));
//             }
//             if (homeworkFiles) {
//                 sessionStorage.setItem(`homeworkFiles_${sessionId}`, JSON.stringify(homeworkFiles));
//             }
//             if (!isDoingHomework) {
//                 sessionStorage.removeItem(`homeworkFiles_${sessionId}`);
//                 sessionStorage.removeItem(`isDoingHomework_${sessionId}`);
//                 sessionStorage.removeItem(`pendingHomework_${sessionId}`);
//             }
//         }
//     }, [isDoingHomework, homeworkFiles, pendingHomework, role, sessionId]);

//     useEffect(() => {
//         if (pendingHomework && isDoingHomework && !homeworkFiles) {
//             handleStartHomework();
//         }
//     }, [pendingHomework, isDoingHomework, homeworkFiles]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 } catch (err) { console.error("Could not get user media.", err); }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) setAvailableLessons(await response.json());
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[CLIENT] Received:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     if (role === 'student') {
//                         setFiles(message.payload.files);
//                         setActiveFileName(message.payload.activeFileName);
//                     }
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     setPendingHomework(message.payload);
//                     setHomeworkFiles(null);
//                     setIsDoingHomework(false);
//                     sessionStorage.removeItem(`isDoingHomework_${sessionId}`);
//                     sessionStorage.removeItem(`homeworkFiles_${sessionId}`);
//                     sessionStorage.setItem(`pendingHomework_${sessionId}`, JSON.stringify(message.payload));
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     break;
//                 case 'HOMEWORK_LEAVE':
//                     setActiveHomeworkStudents(prev => {
//                         const newSet = new Set(prev);
//                         newSet.delete(message.payload.studentId);
//                         return newSet;
//                     });
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                     const { studentId, workspace } = message.payload;
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existingState = newState.get(studentId) || { terminalOutput: '', files: [], activeFileName: '' };
//                         newState.set(studentId, { ...existingState, ...workspace });
//                         return newState;
//                     });
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existing = newState.get(message.payload.studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                         existing.terminalOutput += message.payload.output;
//                         newState.set(message.payload.studentId, existing);
//                         return newState;
//                     });
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleStartHomework = async () => {
//         if (!pendingHomework) return;

//         if (!homeworkFiles) {
//             console.log("Fetching initial homework state...");
//             let filesToSet = null;
//             try {
//                 const stateRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}/student-state`, { 
//                     headers: { 'Authorization': `Bearer ${token}` } 
//                 });

//                 if (stateRes.ok) {
//                     const data = await stateRes.json();
//                     filesToSet = data.files || [];
//                 } else {
//                     console.error("Failed to fetch student-state. Falling back to base lesson files.");
//                     const lessonRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}`, {
//                         headers: { 'Authorization': `Bearer ${token}` }
//                     });
//                     if (lessonRes.ok) {
//                         const lessonData = await lessonRes.json();
//                         filesToSet = lessonData.files || [];
//                     } else {
//                         console.error("Fallback lesson fetch also failed. Cannot start homework.");
//                         toast.error("Could not load lesson. Please try again later.");
//                         return;
//                     }
//                 }
//                 setHomeworkFiles(filesToSet);
//             } catch (error) {
//                 console.error("A network or other error occurred while fetching homework state:", error);
//                 toast.error("A network error occurred. Please check your connection.");
//                 return;
//             }
//         }
//         setIsDoingHomework(true);
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number | string) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//             console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ type: 'ASSIGN_HOMEWORK', payload }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     if (role === 'student' && isDoingHomework && pendingHomework && homeworkFiles) {
//         return <HomeworkView 
//                     lessonId={pendingHomework.lessonId} 
//                     teacherSessionId={pendingHomework.teacherSessionId} 
//                     token={token} 
//                     onLeave={() => setIsDoingHomework(false)} 
//                     initialFiles={homeworkFiles}
//                     onFilesChange={setHomeworkFiles}
//                 />;
//     }
    
//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {pendingHomework && role === 'student' && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={isDoingHomework ? () => setIsDoingHomework(false) : handleStartHomework}>
//                             {isDoingHomework ? 'Return to Classroom' : 'Start Lesson'}
//                             <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;





// ________________________________________________________________
// // perfect synchronziation with files and code and terminal working.

// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';

// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// // Define the structure for a code file
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';

// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();

//     // State for managing multiple files
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');

//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
//     const [role, setRole] = useState<UserRole>('unknown');
    
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);

//     // Find the currently active file object
//     const activeFile = files.find(file => file.name === activeFileName);

//     useEffect(() => {
//         let isMounted = true;
//         const initialize = async () => {
//             let stream: MediaStream | null = null;
//             try {
//                 stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                 if (isMounted) {
//                     setLocalStream(stream);
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 }
//             } catch (error) {
//                 console.error("Could not get user media.", error);
//                 if (isMounted) setConnectionStatus("Camera/Mic access denied.");
//             }
//             const wsUrl = `ws://localhost:5000?sessionId=${sessionId}`;
//             const currentWs = new WebSocket(wsUrl);
//             ws.current = currentWs;
//             initializeWebSocketEvents(currentWs, stream);
//         };
//         initialize();

//         return () => {
//             isMounted = false;
//             localStream?.getTracks().forEach(track => track.stop());
//             if (ws.current && ws.current.readyState === WebSocket.OPEN) {
//                 ws.current.close();
//             }
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId]);

//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({
//                 cursorBlink: true,
//                 theme: { 
//                     background: '#1e1e1e',
//                     foreground: '#d4d4d4',
//                     cursor: '#d4d4d4',
//                     selection: '#264f78',
//                 },
//                 scrollback: 1000,
//                 convertEol: true, 
//                 fontSize: 13,
//                 fontFamily: 'Menlo, "DejaVu Sans Mono", Consolas, "Lucida Console", monospace',
//             });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;

//             const resizeObserver = new ResizeObserver(() => {
//                 setTimeout(() => fitAddon.fit(), 0);
//             });
//             resizeObserver.observe(terminalRef.current);

//             return () => resizeObserver.disconnect();
//         }
//     }, []);

//     const initializeWebSocketEvents = (currentWs: WebSocket, stream: MediaStream | null) => {
//         currentWs.onopen = () => {
//             setConnectionStatus('Connected');
//             console.log('WebSocket connection opened.');
//         };
//         currentWs.onclose = () => {
//             setConnectionStatus('Disconnected');
//             console.log('WebSocket connection closed.');
//         };
//         currentWs.onerror = (error) => {
//             setConnectionStatus('Connection Error');
//             console.error('WebSocket connection error:', error);
//         };

//         currentWs.onmessage = (event) => {
//             try {
//                 const message = JSON.parse(event.data);
//                 console.log('Received message:', message);
//                 switch (message.type) {
//                     case 'ROLE_ASSIGNED': 
//                         setRole(message.payload.role); 
//                         if(message.payload.files) setFiles(message.payload.files);
//                         if(message.payload.activeFile) setActiveFileName(message.payload.activeFile);
//                         break;
//                     case 'INITIATE_CALL': initializePeerConnection(stream); createOffer(); break;
//                     case 'WEBRTC_OFFER': initializePeerConnection(stream); handleOffer(message.payload); break;
//                     case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                     case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                     case 'PEER_LEFT': handlePeerLeft(); break;
//                     case 'FILE_STRUCTURE_UPDATE':
//                         setFiles(message.payload.files);
//                         setActiveFileName(message.payload.activeFile);
//                         break;
//                     case 'CODE_UPDATE':
//                         setFiles(message.payload.files);
//                         break;
//                     case 'LANGUAGE_UPDATE':
//                          setFiles(message.payload.files);
//                         break;
//                     case 'TERMINAL_OUT':
//                         if (term.current) {
//                             term.current.write(message.payload);
//                         }
//                         break;
//                     default:
//                         console.warn('Unknown message type:', message);
//                         break;
//                 }
//             } catch (error) {
//                 console.error('Error processing WebSocket message:', error);
//             }
//         };
//     };
    
//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//             setConnectionStatus('Peer connection error');
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     function handleEditorChange(value: string | undefined) {
//         const newCode = value || '';
//         if (!activeFile || role !== 'teacher') return;

//         const updatedFiles = files.map(file =>
//             file.name === activeFileName ? { ...file, content: newCode } : file
//         );
//         setFiles(updatedFiles);

//         if (ws.current?.readyState === WebSocket.OPEN) {
//             ws.current.send(JSON.stringify({
//                 type: 'CODE_UPDATE',
//                 payload: { files: updatedFiles, activeFile: activeFileName }
//             }));
//         }
//     }

//     function handleLanguageChange(newLanguage: string) {
//         if (!activeFile || role !== 'teacher') return;

//         const updatedFiles = files.map(file =>
//             file.name === activeFileName ? { ...file, language: newLanguage } : file
//         );
//         setFiles(updatedFiles);

//         if (ws.current?.readyState === WebSocket.OPEN) {
//             ws.current.send(JSON.stringify({
//                 type: 'LANGUAGE_UPDATE',
//                 payload: { files: updatedFiles, activeFile: activeFileName }
//             }));
//         }
//     }

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name (e.g., index.html, style.css):");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile: CodeFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);

//             if (ws.current?.readyState === WebSocket.OPEN) {
//                 ws.current.send(JSON.stringify({
//                     type: 'FILE_STRUCTURE_UPDATE',
//                     payload: { files: updatedFiles, activeFile: newFileName }
//                 }));
//             }
//         } else if (newFileName) {
//             alert("A file with that name already exists.");
//         }
//     };

//     const handleRunCode = () => {
//         if (!ws.current || ws.current.readyState !== WebSocket.OPEN || !activeFile || role !== 'teacher') {
//             console.error('Cannot run code.');
//             return;
//         }
//         ws.current.send(JSON.stringify({
//             type: 'RUN_CODE',
//             payload: {
//                 language: activeFile.language,
//                 code: activeFile.content,
//             }
//         }));
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800/50">
//                 <h1 className="text-lg font-bold text-slate-800 dark:text-slate-200 tracking-tight">Live Coding Session</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     <Separator orientation="vertical" className="h-6 bg-slate-200 dark:bg-slate-700" />
//                     <div className="text-sm text-slate-500 dark:text-slate-400">Session ID: <span className="font-mono bg-slate-100 dark:bg-slate-700/50 px-2 py-1 rounded-md">{sessionId}</span></div>
//                     <Separator orientation="vertical" className="h-6 bg-slate-200 dark:bg-slate-700" />
//                     <div className="flex items-center gap-2 text-sm text-slate-500 dark:text-slate-400">
//                         <span className={`h-2.5 w-2.5 rounded-full ${connectionStatus === 'Connected' ? 'bg-green-500' : 'bg-yellow-500'}`}></span>
//                         <span>{connectionStatus}</span>
//                     </div>
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}>
//                     <PhoneOff className="mr-2 h-4 w-4" /> End Session
//                 </Button>
//             </header>

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r border-slate-200 dark:border-slate-700">
//                         <div className="flex-shrink-0 p-3 flex justify-between items-center border-b border-slate-200 dark:border-slate-700">
//                             <h2 className="font-semibold text-sm text-slate-600 dark:text-slate-300 tracking-wider uppercase">Explorer</h2>
//                             {role === 'teacher' && (
//                                 <Button variant="ghost" size="icon" onClick={handleAddFile} className="h-7 w-7 text-slate-500 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100">
//                                     <FilePlus className="h-4 w-4" />
//                                 </Button>
//                             )}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {files.map(file => (
//                                 <div
//                                     key={file.name}
//                                     onClick={() => role === 'teacher' && setActiveFileName(file.name)}
//                                     className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm transition-colors ${role === 'teacher' ? 'cursor-pointer' : 'cursor-default'} ${activeFileName === file.name ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'hover:bg-slate-100 dark:hover:bg-slate-700/50 text-slate-700 dark:text-slate-300'}`}
//                                 >
//                                     <FileIcon className="h-4 w-4 mr-2.5 flex-shrink-0" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-col-resize" />

//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="flex-shrink-0 px-3 py-2 flex justify-between items-center bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={role !== 'teacher'}>
//                                             <SelectTrigger className="w-[180px]">
//                                                 <SelectValue placeholder="Select language" />
//                                             </SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                                 <SelectItem value="java">Java</SelectItem>
//                                                 <SelectItem value="html">HTML</SelectItem>
//                                                 <SelectItem value="css">CSS</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && (
//                                             <Button onClick={handleRunCode} size="sm" disabled={!activeFile} className="bg-green-600 hover:bg-green-700 text-white">
//                                                 <Play className="mr-2 h-4 w-4" /> Run Code
//                                             </Button>
//                                         )}
//                                     </div>
//                                     <div className="flex-grow relative">
//                                         <Editor
//                                             height="100%"
//                                             theme="vs-dark"
//                                             path={activeFile?.name}
//                                             language={activeFile?.language}
//                                             value={activeFile?.content}
//                                             onChange={handleEditorChange}
//                                             options={{ readOnly: role === 'student', minimap: { enabled: true }, fontSize: 14, scrollBeyondLastLine: false, automaticLayout: true }}
//                                         />
//                                     </div>
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-row-resize" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="flex-shrink-0 px-3 py-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t border-slate-700 text-slate-300 tracking-wider uppercase">
//                                         <TerminalIcon className="h-4 w-4 mr-2" />
//                                         <span>Terminal</span>
//                                     </div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
                    
//                     <PanelResizeHandle className="w-1.5 bg-slate-100 dark:bg-slate-800 hover:bg-blue-500/50 transition-colors duration-200 cursor-col-resize" />

//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col bg-white dark:bg-slate-800/50 p-4 space-y-4 border-l border-slate-200 dark:border-slate-700">
//                             <div className="flex-grow space-y-4">
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium">Remote User</CardTitle></CardHeader>
//                                     <CardContent className="p-0">
//                                         <div className="bg-black rounded-b-lg aspect-video flex items-center justify-center text-slate-400 overflow-hidden">
//                                             <video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />
//                                             {!remoteStream && <span className="text-xs">Waiting for peer...</span>}
//                                         </div>
//                                     </CardContent>
//                                 </Card>
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium">My Camera</CardTitle></CardHeader>
//                                     <CardContent className="p-0">
//                                         <div className="bg-black rounded-b-lg aspect-video overflow-hidden">
//                                             <video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" />
//                                         </div>
//                                     </CardContent>
//                                 </Card>
//                             </div>
//                             <div className="flex-shrink-0 flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12 bg-slate-200/50 dark:bg-slate-700/50 hover:bg-slate-200 dark:hover:bg-slate-700">
//                                     {isMuted ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
//                                 </Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12 bg-slate-200/50 dark:bg-slate-700/50 hover:bg-slate-200 dark:hover:bg-slate-700">
//                                     {isCameraOff ? <VideoOff className="h-5 w-5" /> : <Video className="h-5 w-5" />}
//                                 </Button>
//                                 <Button variant="destructive" size="icon" onClick={() => navigate('/dashboard')} className="rounded-full h-12 w-12">
//                                     <PhoneOff className="h-5 w-5" />
//                                 </Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;

// // MVP 2
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';


// const stunServers = {
//   iceServers: [
//     { urls: 'stun:stun.l.google.com:19302' },
//     { urls: 'stun:stun1.l.google.com:19302' },
//   ],
// };

// // --- TYPE DEFINITIONS ---
// interface CodeFile {
//     name: string;
//     language: string;
//     content: string;
// }

// interface Workspace {
//     files: CodeFile[];
//     activeFileName: string;
// }

// interface StudentHomeworkState extends Workspace {
//     terminalOutput: string;
// }

// interface Student {
//     id: string;
//     username: string;
// }

// interface Lesson {
//     id: number;
//     title: string;
// }

// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID

// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     // --- STATE MANAGEMENT ---
//     const [role, setRole] = useState<UserRole>('unknown');
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
    
//     // Student and Homework States
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(null);
//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());

//     // Media and Connection States
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);
    
//     // --- REFS ---
//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     // --- DERIVED STATE ---
//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     // --- EFFECTS ---
//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }

//         // Use the authenticated websocket URL
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);

//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) {
//                         localVideoRef.current.srcObject = stream;
//                     }
//                 } catch (err) {
//                     console.error("Could not get user media.", err);
//                 }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) {
//                     const data = await response.json();
//                     setAvailableLessons(data);
//                 }
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[${role || 'CLIENT'}] Received:`, message.type);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     // **FIX**: This is the central sync message. Both roles must listen to it.
//                     setFiles(message.payload.files);
//                     setActiveFileName(message.payload.activeFileName);
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     if (role === 'student') {
//                         setPendingHomework(message.payload);
//                     }
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     if (role === 'teacher') {
//                         setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     }
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                 case 'STUDENT_WORKSPACE_UPDATE': // Handle both for robustness
//                     if (role === 'teacher') {
//                         const { studentId, ...workspace } = message.payload;
//                         setStudentHomeworkStates(prev => new Map(prev).set(studentId, { ...prev.get(studentId), ...workspace }));
//                     }
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     if (role === 'teacher') {
//                         const { studentId, output } = message.payload;
//                         setStudentHomeworkStates(prev => {
//                             const newState = new Map(prev);
//                             const existing = newState.get(studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                             existing.terminalOutput += output;
//                             newState.set(studentId, existing);
//                             return newState;
//                         });
//                     }
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             ws.current.send(JSON.stringify({ 
//                 type: 'ASSIGN_HOMEWORK', 
//                 payload: { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title } 
//             }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {role === 'student' && pendingHomework && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={() => navigate(`/lessons/${pendingHomework.lessonId}?sessionId=${pendingHomework.teacherSessionId}`)}>
//                             Start Lesson <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;

// refactored
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor, { OnMount } from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Mic, MicOff, Video, VideoOff, PhoneOff, Terminal as TerminalIcon, Play, FilePlus, File as FileIcon, Users, BookMarked, Laptop, ChevronRight, BeakerIcon, CheckCircle, XCircle, Trash2, Lightbulb, Save, Send } from 'lucide-react';
// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
// import { Separator } from '@/components/ui/separator';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
// import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel } from "@/components/ui/alert-dialog";
// import { toast, Toaster } from 'sonner';

// // --- TYPE DEFINITIONS ---
// type UserRole = 'teacher' | 'student' | 'unknown';
// type ViewingMode = 'teacher' | string; // 'teacher' or a student's ID
// interface CodeFile { name: string; language: string; content: string; }
// interface LessonFile { id: string; filename: string; content: string; }
// interface Workspace { files: CodeFile[]; activeFileName: string; }
// interface StudentHomeworkState extends Workspace { terminalOutput: string; }
// interface Student { id: string; username: string; }
// interface Lesson { id: number | string; title: string; description: string; course_id: string; files: LessonFile[] }
// interface TestResult { passed: number; failed: number; total: number; results: string; }

// // --- Helper function to decode JWT ---
// const simpleJwtDecode = (token: string) => {
//     try {
//         const base64Url = token.split('.')[1];
//         const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
//         const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
//             return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
//         }).join(''));
//         return JSON.parse(jsonPayload);
//     } catch (error) {
//         console.error("Invalid token:", error);
//         return null;
//     }
// };


// const stunServers = {
//   iceServers: [ { urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' } ],
// };

// // --- MODAL COMPONENTS ---
// const TestResultsModal = ({ results, isLoading, onClose }: { results: TestResult | null, isLoading: boolean, onClose: () => void }) => (
//     <AlertDialog open={true} onOpenChange={onClose}>
//         <AlertDialogContent>
//             <AlertDialogHeader>
//                 <AlertDialogTitle>Test Results</AlertDialogTitle>
//                 <AlertDialogDescription className="pt-4 space-y-4">
//                     {isLoading ? "Running tests..." : results && (
//                         <>
//                             <div className={`p-4 rounded-md ${results.failed > 0 ? 'bg-destructive/10 text-destructive' : 'bg-green-500/10 text-green-700'}`}>
//                                 <h3 className="font-bold text-lg">
//                                     {results.failed > 0 ? `${results.failed} / ${results.total} Tests Failed` : `All ${results.total} Tests Passed!`}
//                                 </h3>
//                             </div>
//                             <div className="bg-muted p-4 rounded-md text-foreground whitespace-pre-wrap text-xs max-h-60 overflow-y-auto">
//                                 <code>{results.results}</code>
//                             </div>
//                         </>
//                     )}
//                 </AlertDialogDescription>
//             </AlertDialogHeader>
//             <AlertDialogFooter>
//                 <AlertDialogCancel>Close</AlertDialogCancel>
//             </AlertDialogFooter>
//         </AlertDialogContent>
//     </AlertDialog>
// );

// // --- HOMEWORK VIEW COMPONENT (with Save/Submit functionality) ---
// interface HomeworkViewProps {
//     lessonId: string;
//     teacherSessionId: string;
//     token: string | null;
//     onLeave: () => void;
//     initialFiles: LessonFile[];
//     onFilesChange: (files: LessonFile[]) => void;
// }

// const HomeworkView: React.FC<HomeworkViewProps> = ({ lessonId, teacherSessionId, token, onLeave, initialFiles, onFilesChange }) => {
//     const [lesson, setLesson] = useState<Lesson | null>(null);
//     const [activeFileId, setActiveFileId] = useState<string | null>(initialFiles[0]?.id || null);
//     const [testResults, setTestResults] = useState<TestResult | null>(null);
//     const [isTesting, setIsTesting] = useState(false);
//     const [isTestModalOpen, setIsTestModalOpen] = useState(false);
//     const [isSaving, setIsSaving] = useState(false);
//     const [error, setError] = useState<string | null>(null);
//     const [conceptualHint, setConceptualHint] = useState<string | null>(null);

//     const hwWs = useRef<WebSocket | null>(null);
//     const hwTermRef = useRef<HTMLDivElement>(null);
//     const hwTerm = useRef<Terminal | null>(null);
//     const editorRef = useRef<any>(null);

//     const activeFile = initialFiles.find(f => f.id === activeFileId);

//     useEffect(() => {
//         const fetchLessonDetails = async () => {
//             const res = await fetch(`http://localhost:5000/api/lessons/${lessonId}`, { headers: { 'Authorization': `Bearer ${token}` } });
//             if (res.ok) {
//                 const data = await res.json();
//                 setLesson(data);
//             }
//         };
//         fetchLessonDetails();
//     }, [lessonId, token]);

//     useEffect(() => {
//         const homeworkSessionId = crypto.randomUUID();
//         const wsUrl = `ws://localhost:5000?sessionId=${homeworkSessionId}&token=${token}&teacherSessionId=${teacherSessionId}&lessonId=${lessonId}`;
//         const currentWs = new WebSocket(wsUrl);
//         hwWs.current = currentWs;

//         currentWs.onopen = () => {
//             console.log(`[HOMEWORK] WebSocket for lesson ${lessonId} connected.`);
//             setTimeout(() => {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_JOIN' }));
//             }, 500);
//         };
//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             if (message.type === 'TERMINAL_OUT') {
//                 hwTerm.current?.write(message.payload);
//             }
//         };

//         return () => {
//             if(currentWs.readyState === WebSocket.OPEN) {
//                 currentWs.send(JSON.stringify({ type: 'HOMEWORK_LEAVE' }));
//             }
//             currentWs.close();
//         };
//     }, [lessonId, teacherSessionId, token]);
    
//     useEffect(() => {
//         if (initialFiles.length > 0 && hwWs.current?.readyState === WebSocket.OPEN) {
//             const broadcastFiles = initialFiles.map(f => ({ name: f.filename, language: 'javascript', content: f.content }));
//             const broadcastActiveFile = initialFiles.find(f => f.id === activeFileId)?.filename || '';
//             hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_CODE_UPDATE', payload: { files: broadcastFiles, activeFileName: broadcastActiveFile } }));
//         }
//     }, [initialFiles, activeFileId, hwWs.current?.readyState]);


//     useEffect(() => {
//         if (hwTermRef.current && !hwTerm.current) {
//             const fitAddon = new FitAddon();
//             const term = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             term.loadAddon(fitAddon);
//             term.open(hwTermRef.current);
//             fitAddon.fit();
//             term.onData(data => {
//                 if (hwWs.current?.readyState === WebSocket.OPEN) {
//                     hwWs.current.send(JSON.stringify({ type: 'HOMEWORK_TERMINAL_IN', payload: data }));
//                 }
//             });
//             hwTerm.current = term;
//         }
//     }, []);

//     const handleFileContentChange = (content: string | undefined) => {
//         const updatedFiles = initialFiles.map(file => file.id === activeFileId ? { ...file, content: content || '' } : file);
//         onFilesChange(updatedFiles);
//     };

//     const handleRunTests = async () => {
//         if (!lessonId) return;
//         setIsTesting(true);
//         setIsTestModalOpen(true);
//         setTestResults(null);
//         try {
//             const response = await fetch(`http://localhost:5000/api/lessons/${lessonId}/run-tests`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                 body: JSON.stringify({ files: initialFiles })
//             });
//             const data: TestResult = await response.json();
//             setTestResults(data);
//         } catch (err) {
//             setTestResults({ passed: 0, failed: 1, total: 1, results: "An error occurred while running tests." });
//         } finally {
//             setIsTesting(false);
//         }
//     };

//     const handleSaveCode = async () => {
//         if (!lessonId) return;
//         setIsSaving(true);
//         toast.loading("Saving your progress...");

//         try {
//             const response = await fetch(`http://localhost:5000/api/lessons/${lessonId}/save-progress`, {
//                 method: 'POST',
//                 headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                 body: JSON.stringify({ files: initialFiles })
//             });

//             if (!response.ok) {
//                 const errData = await response.json();
//                 throw new Error(errData.error || 'Failed to save progress.');
//             }
            
//             toast.success("Progress saved successfully!");

//         } catch (err) {
//             if (err instanceof Error) {
//                 toast.error(err.message);
//             } else {
//                 toast.error("An unknown error occurred while saving.");
//             }
//         } finally {
//             setIsSaving(false);
//         }
//     };

//     const handleSubmit = async () => {
//         setError(null);
//         setConceptualHint(null);
        
//         const promise = () => new Promise(async (resolve, reject) => {
//             try {
//                 const submitResponse = await fetch(`http://localhost:5000/api/lessons/${lessonId}/submit`, {
//                     method: 'POST',
//                     headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
//                     body: JSON.stringify({ files: initialFiles })
//                 });

//                 if (!submitResponse.ok) {
//                     const errorData = await submitResponse.json().catch(() => ({
//                         error: 'Submission failed. Please run the tests to see the errors.'
//                     }));
//                     return reject(new Error(errorData.error));
//                 }

//                 const result = await submitResponse.json();
                
//                 if (result.feedback_type === 'conceptual_hint') {
//                     setConceptualHint(result.message);
//                     return resolve("All tests passed! The AI has a suggestion for you.");
//                 } else {
//                     setTimeout(() => onLeave(), 2500);
//                     return resolve("Great work! Your solution is correct. Returning to classroom...");
//                 }

//             } catch (err) {
//                 return reject(err);
//             }
//         });

//         toast.promise(promise, {
//             loading: 'Submitting and checking tests...',
//             success: (message) => `${message}`,
//             error: (err) => {
//                 if (err instanceof Error) {
//                     setError(err.message);
//                     return `Submission Failed: ${err.message}`;
//                 }
//                 return "An unknown error occurred.";
//             },
//         });
//     };
    
//     if (!lesson) return <div className="p-8">Loading Lesson...</div>;

//     return (
//         <div className="w-full h-screen flex flex-col">
//             <Toaster richColors position="top-center" />
//             {isTestModalOpen && <TestResultsModal results={testResults} isLoading={isTesting} onClose={() => setIsTestModalOpen(false)} />}
//             <header className="flex-shrink-0 flex justify-between items-center p-4 border-b bg-white">
//                 <div>
//                     <h1 className="text-2xl font-bold">{lesson.title}</h1>
//                     <p className="text-muted-foreground">You are in a live homework session.</p>
//                 </div>
//                 <div className="flex items-center gap-2">
//                     <Button variant="outline" onClick={handleSaveCode} disabled={isSaving}>
//                         <Save className="mr-2 h-4 w-4" /> {isSaving ? 'Saving...' : 'Save Progress'}
//                     </Button>
//                     <Button onClick={handleRunTests} disabled={isTesting}>
//                         <BeakerIcon className="mr-2 h-4 w-4" /> {isTesting ? 'Running...' : 'Run Tests'}
//                     </Button>
//                     <Button variant="default" onClick={handleSubmit}>
//                         <Send className="mr-2 h-4 w-4" /> Submit Solution
//                     </Button>
//                     <Button variant="outline" onClick={onLeave}>Return to Classroom</Button>
//                 </div>
//             </header>
//             <main className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 p-6 overflow-hidden">
//                 <div className="lg:col-span-1 flex flex-col gap-6">
//                     <Card><CardHeader><CardTitle>Instructions</CardTitle></CardHeader><CardContent><p>{lesson.description}</p></CardContent></Card>
                    
//                     {error && (
//                         <Alert variant="destructive">
//                             <XCircle className="h-4 w-4" />
//                             <AlertTitle className="font-bold">Submission Error</AlertTitle>
//                             <AlertDescription>{error}</AlertDescription>
//                         </Alert>
//                     )}
//                     {conceptualHint && (
//                         <Alert variant="default" className="bg-blue-50 border-blue-200">
//                             <Lightbulb className="h-4 w-4 text-blue-600" />
//                             <AlertTitle className="font-bold text-blue-800">A Helpful Suggestion</AlertTitle>
//                             <AlertDescription className="text-blue-700">{conceptualHint}</AlertDescription>
//                         </Alert>
//                     )}

//                     <Card className="flex-grow flex flex-col"><CardHeader><CardTitle>Project Files</CardTitle></CardHeader>
//                         <CardContent className="flex-grow overflow-y-auto">
//                             {initialFiles.map(file => (
//                                 <div key={file.id} onClick={() => setActiveFileId(file.id)} className={`flex items-center p-2 rounded-md cursor-pointer ${activeFileId === file.id ? 'bg-accent' : 'hover:bg-accent/50'}`}>
//                                     <FileIcon className="mr-2 h-4 w-4" />{file.filename}
//                                 </div>
//                             ))}
//                         </CardContent>
//                     </Card>
//                 </div>
//                 <div className="lg:col-span-2 h-full flex flex-col rounded-lg border bg-background overflow-hidden">
//                     <PanelGroup direction="vertical">
//                         <Panel defaultSize={70} minSize={20}>
//                             <Editor height="100%" theme="vs-dark" path={activeFile?.filename} value={activeFile?.content} onChange={handleFileContentChange} onMount={(editor) => editorRef.current = editor} />
//                         </Panel>
//                         <PanelResizeHandle className="h-2 bg-slate-200" />
//                         <Panel defaultSize={30} minSize={10}>
//                             <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                 <div className="p-2 bg-slate-800 text-white text-sm font-semibold flex items-center"><TerminalIcon className="mr-2 h-4 w-4" />Terminal</div>
//                                 <div ref={hwTermRef} className="flex-grow p-2" />
//                             </div>
//                         </Panel>
//                     </PanelGroup>
//                 </div>
//             </main>
//         </div>
//     );
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     const decodedToken = token ? simpleJwtDecode(token) : null;
//     const initialUserRole = decodedToken?.user?.role || 'unknown';

//     const [role, setRole] = useState<UserRole>(initialUserRole);
    
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
    
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(() => {
//         const saved = sessionStorage.getItem(`pendingHomework_${sessionId}`);
//         return saved ? JSON.parse(saved) : null;
//     });
//     const [isDoingHomework, setIsDoingHomework] = useState<boolean>(() => {
//         const saved = sessionStorage.getItem(`isDoingHomework_${sessionId}`);
//         return saved === 'true';
//     });
//     const [homeworkFiles, setHomeworkFiles] = useState<LessonFile[] | null>(() => {
//         const saved = sessionStorage.getItem(`homeworkFiles_${sessionId}`);
//         return saved ? JSON.parse(saved) : null;
//     });

//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);

//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);
//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         if (role === 'student') {
//             sessionStorage.setItem(`isDoingHomework_${sessionId}`, String(isDoingHomework));
//             if (pendingHomework) {
//                 sessionStorage.setItem(`pendingHomework_${sessionId}`, JSON.stringify(pendingHomework));
//             }
//             if (homeworkFiles) {
//                 sessionStorage.setItem(`homeworkFiles_${sessionId}`, JSON.stringify(homeworkFiles));
//             }
//             if (!isDoingHomework) {
//                 sessionStorage.removeItem(`homeworkFiles_${sessionId}`);
//                 sessionStorage.removeItem(`isDoingHomework_${sessionId}`);
//                 sessionStorage.removeItem(`pendingHomework_${sessionId}`);
//             }
//         }
//     }, [isDoingHomework, homeworkFiles, pendingHomework, role, sessionId]);

//     useEffect(() => {
//         if (pendingHomework && isDoingHomework && !homeworkFiles) {
//             handleStartHomework();
//         }
//     }, [pendingHomework, isDoingHomework, homeworkFiles]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 } catch (err) { console.error("Could not get user media.", err); }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) setAvailableLessons(await response.json());
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[CLIENT] Received:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     if (role === 'student') {
//                         setFiles(message.payload.files);
//                         setActiveFileName(message.payload.activeFileName);
//                     }
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     setPendingHomework(message.payload);
//                     setHomeworkFiles(null);
//                     setIsDoingHomework(false);
//                     sessionStorage.removeItem(`isDoingHomework_${sessionId}`);
//                     sessionStorage.removeItem(`homeworkFiles_${sessionId}`);
//                     sessionStorage.setItem(`pendingHomework_${sessionId}`, JSON.stringify(message.payload));
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     break;
//                 case 'HOMEWORK_LEAVE':
//                     setActiveHomeworkStudents(prev => {
//                         const newSet = new Set(prev);
//                         newSet.delete(message.payload.studentId);
//                         return newSet;
//                     });
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                     const { studentId, workspace } = message.payload;
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existingState = newState.get(studentId) || { terminalOutput: '', files: [], activeFileName: '' };
//                         newState.set(studentId, { ...existingState, ...workspace });
//                         return newState;
//                     });
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existing = newState.get(message.payload.studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                         existing.terminalOutput += message.payload.output;
//                         newState.set(message.payload.studentId, existing);
//                         return newState;
//                     });
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleStartHomework = async () => {
//         if (!pendingHomework) return;

//         if (!homeworkFiles) {
//             console.log("Fetching initial homework state...");
//             let filesToSet = null;
//             try {
//                 const stateRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}/student-state`, { 
//                     headers: { 'Authorization': `Bearer ${token}` } 
//                 });

//                 if (stateRes.ok) {
//                     const data = await stateRes.json();
//                     filesToSet = data.files || [];
//                 } else {
//                     console.error("Failed to fetch student-state. Falling back to base lesson files.");
//                     const lessonRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}`, {
//                         headers: { 'Authorization': `Bearer ${token}` }
//                     });
//                     if (lessonRes.ok) {
//                         const lessonData = await lessonRes.json();
//                         filesToSet = lessonData.files || [];
//                     } else {
//                         console.error("Fallback lesson fetch also failed. Cannot start homework.");
//                         toast.error("Could not load lesson. Please try again later.");
//                         return;
//                     }
//                 }
//                 setHomeworkFiles(filesToSet);
//             } catch (error) {
//                 console.error("A network or other error occurred while fetching homework state:", error);
//                 toast.error("A network error occurred. Please check your connection.");
//                 return;
//             }
//         }
//         setIsDoingHomework(true);
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number | string) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//             console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ type: 'ASSIGN_HOMEWORK', payload }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     if (role === 'student' && isDoingHomework && pendingHomework && homeworkFiles) {
//         return <HomeworkView 
//                     lessonId={pendingHomework.lessonId} 
//                     teacherSessionId={pendingHomework.teacherSessionId} 
//                     token={token} 
//                     onLeave={() => setIsDoingHomework(false)} 
//                     initialFiles={homeworkFiles}
//                     onFilesChange={setHomeworkFiles}
//                 />;
//     }
    
//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {pendingHomework && role === 'student' && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={isDoingHomework ? () => setIsDoingHomework(false) : handleStartHomework}>
//                             {isDoingHomework ? 'Return to Classroom' : 'Start Lesson'}
//                             <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={15} minSize={12} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                         <div className="p-3 border-b flex justify-between items-center">
//                             <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                             {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                         </div>
//                         <div className="flex-grow overflow-y-auto py-1">
//                             {displayedWorkspace.files.map(file => (
//                                 <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                     <FileIcon className="h-4 w-4 mr-2.5" />
//                                     <span className="truncate">{file.name}</span>
//                                 </div>
//                             ))}
//                         </div>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={60} minSize={30}>
//                         <PanelGroup direction="vertical">
//                             <Panel defaultSize={70} minSize={20}>
//                                 <div className="h-full flex flex-col">
//                                     <div className="p-2 flex justify-between items-center bg-white border-b">
//                                         <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                             <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                             <SelectContent>
//                                                 <SelectItem value="javascript">JavaScript</SelectItem>
//                                                 <SelectItem value="python">Python</SelectItem>
//                                             </SelectContent>
//                                         </Select>
//                                         {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                     </div>
//                                     <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                             <Panel defaultSize={30} minSize={10}>
//                                 <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                     <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="mr-2 h-4 w-4" />Terminal</div>
//                                     <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                 </div>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <aside className="w-full h-full flex flex-col p-4 space-y-4 border-l">
//                             {role === 'teacher' && (
//                                 <Card>
//                                     <CardHeader className="p-3"><CardTitle className="text-sm font-medium flex items-center"><Users className="mr-2 h-4 w-4"/>Student Roster</CardTitle></CardHeader>
//                                     <CardContent className="p-2 space-y-1">
//                                         <Button onClick={() => setViewingMode('teacher')} variant={viewingMode === 'teacher' ? 'secondary' : 'ghost'} className="w-full justify-start"><Laptop className="mr-2 h-4 w-4"/> My Workspace</Button>
//                                         <Separator />
//                                         {students.map(student => (
//                                             <div key={student.id} className="p-1">
//                                                 <div className="flex items-center justify-between">
//                                                     <Button onClick={() => setViewingMode(student.id)} variant={viewingMode === student.id ? 'secondary' : 'ghost'} className="flex-grow justify-start text-left">
//                                                         {student.username}
//                                                         {activeHomeworkStudents.has(student.id) && <Badge variant="secondary" className="ml-2 bg-green-500 text-white">Live</Badge>}
//                                                     </Button>
//                                                     <Button variant="outline" size="sm" onClick={() => setAssigningToStudentId(assigningToStudentId === student.id ? null : student.id)}><BookMarked className="mr-2 h-4 w-4"/>Assign</Button>
//                                                 </div>
//                                                 {assigningToStudentId === student.id && (
//                                                     <div className="border-t mt-2 pt-2 space-y-1">
//                                                         {availableLessons.map(lesson => (
//                                                             <Button key={lesson.id} variant="ghost" size="sm" className="w-full justify-start" onClick={() => handleAssignHomework(student.id, lesson.id)}>{lesson.title}</Button>
//                                                         ))}
//                                                     </div>
//                                                 )}
//                                             </div>
//                                         ))}
//                                     </CardContent>
//                                 </Card>
//                             )}
//                             <Card className="flex-grow"><CardHeader className="p-3"><CardTitle className="text-sm">Remote User</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video flex items-center justify-center"><video ref={remoteVideoRef} autoPlay playsInline className="w-full h-full object-cover" />{!remoteStream && <span className="text-xs">Waiting...</span>}</div></CardContent></Card>
//                             <Card><CardHeader className="p-3"><CardTitle className="text-sm">My Camera</CardTitle></CardHeader><CardContent className="p-0"><div className="bg-black rounded-b-lg aspect-video"><video ref={localVideoRef} autoPlay playsInline muted className="w-full h-full object-cover" /></div></CardContent></Card>
//                             <div className="flex justify-center items-center space-x-3 pt-2">
//                                 <Button variant="outline" size="icon" onClick={toggleMute} className="rounded-full h-12 w-12">{isMuted ? <MicOff /> : <Mic />}</Button>
//                                 <Button variant="outline" size="icon" onClick={toggleCamera} className="rounded-full h-12 w-12">{isCameraOff ? <VideoOff /> : <Video />}</Button>
//                             </div>
//                         </aside>
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// perfect MVP 6 
// import React, { useState, useEffect, useRef } from 'react';
// import { useParams, useNavigate } from 'react-router-dom';
// import Editor, { OnMount } from '@monaco-editor/react';
// import { Terminal } from 'xterm';
// import { FitAddon } from 'xterm-addon-fit';
// import 'xterm/css/xterm.css';

// // Import child components
// import { HomeworkView } from '../components/classroom/HomeworkView';
// import { RosterPanel } from '../components/classroom/RosterPanel';

// // Import shadcn components and icons
// import { Button } from "@/components/ui/button";
// import { Badge } from "@/components/ui/badge";
// import { Panel, PanelGroup, PanelResizeHandle } from "react-resizable-panels";
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// import { PhoneOff, ChevronRight, FilePlus, Play, Terminal as TerminalIcon, File as FileIcon } from 'lucide-react';
// import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
// import { toast } from 'sonner';

// // Import types
// import { UserRole, ViewingMode, CodeFile, LessonFile, Student, Lesson, StudentHomeworkState } from '../types';

// // --- Helper function to decode JWT ---
// const simpleJwtDecode = (token: string) => {
//     try {
//         const base64Url = token.split('.')[1];
//         const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
//         const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
//             return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
//         }).join(''));
//         return JSON.parse(jsonPayload);
//     } catch (error) {
//         console.error("Invalid token:", error);
//         return null;
//     }
// };

// const stunServers = {
//   iceServers: [ { urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' } ],
// };


// const LiveTutorialPage: React.FC = () => {
//     const { sessionId } = useParams<{ sessionId: string }>();
//     const navigate = useNavigate();
//     const token = localStorage.getItem('authToken');

//     const decodedToken = token ? simpleJwtDecode(token) : null;
//     const initialUserRole = decodedToken?.user?.role || 'unknown';

//     const [role, setRole] = useState<UserRole>(initialUserRole);
    
//     const [files, setFiles] = useState<CodeFile[]>([]);
//     const [activeFileName, setActiveFileName] = useState<string>('');
//     const [students, setStudents] = useState<Student[]>([]);
//     const [studentHomeworkStates, setStudentHomeworkStates] = useState<Map<string, StudentHomeworkState>>(new Map());
//     const [viewingMode, setViewingMode] = useState<ViewingMode>('teacher');
//     const [availableLessons, setAvailableLessons] = useState<Lesson[]>([]);
//     const [assigningToStudentId, setAssigningToStudentId] = useState<string | null>(null);
    
//     const [pendingHomework, setPendingHomework] = useState<{ lessonId: string; teacherSessionId: string; title: string; } | null>(() => {
//         const saved = sessionStorage.getItem(`pendingHomework_${sessionId}`);
//         return saved ? JSON.parse(saved) : null;
//     });
//     const [isDoingHomework, setIsDoingHomework] = useState<boolean>(() => {
//         const saved = sessionStorage.getItem(`isDoingHomework_${sessionId}`);
//         return saved === 'true';
//     });
//     const [homeworkFiles, setHomeworkFiles] = useState<LessonFile[] | null>(() => {
//         const saved = sessionStorage.getItem(`homeworkFiles_${sessionId}`);
//         return saved ? JSON.parse(saved) : null;
//     });

//     const [activeHomeworkStudents, setActiveHomeworkStudents] = useState<Set<string>>(new Set());
//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');
//     const [localStream, setLocalStream] = useState<MediaStream | null>(null);
//     const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
//     const [isMuted, setIsMuted] = useState(false);
//     const [isCameraOff, setIsCameraOff] = useState(false);

//     const ws = useRef<WebSocket | null>(null);
//     const peerConnection = useRef<RTCPeerConnection | null>(null);
//     const localVideoRef = useRef<HTMLVideoElement>(null);
//     const remoteVideoRef = useRef<HTMLVideoElement>(null);
//     const terminalRef = useRef<HTMLDivElement>(null);
//     const term = useRef<Terminal | null>(null);
//     const localStreamRef = useRef<MediaStream | null>(null);

//     const displayedWorkspace = role === 'teacher'
//         ? (viewingMode === 'teacher' ? { files, activeFileName } : studentHomeworkStates.get(viewingMode) || { files: [], activeFileName: '' })
//         : { files, activeFileName };

//     const activeFile = displayedWorkspace.files.find(file => file.name === displayedWorkspace.activeFileName);
//     const isEditorReadOnly = role === 'student' || (role === 'teacher' && viewingMode !== 'teacher');

//     useEffect(() => {
//         if (!token) {
//             navigate('/login');
//             return;
//         }
//         const wsUrl = `ws://localhost:5000?sessionId=${sessionId}&token=${token}`;
//         const currentWs = new WebSocket(wsUrl);
//         ws.current = currentWs;
//         initializeWebSocketEvents(currentWs);
//         return () => {
//             ws.current?.close();
//             localStreamRef.current?.getTracks().forEach(track => track.stop());
//             peerConnection.current?.close();
//             term.current?.dispose();
//         };
//     }, [sessionId, token, navigate]);

//     useEffect(() => {
//         if (role === 'student') {
//             sessionStorage.setItem(`isDoingHomework_${sessionId}`, String(isDoingHomework));
//             if (pendingHomework) {
//                 sessionStorage.setItem(`pendingHomework_${sessionId}`, JSON.stringify(pendingHomework));
//             }
//             if (homeworkFiles) {
//                 sessionStorage.setItem(`homeworkFiles_${sessionId}`, JSON.stringify(homeworkFiles));
//             }
//             if (!isDoingHomework) {
//                 sessionStorage.removeItem(`homeworkFiles_${sessionId}`);
//                 sessionStorage.removeItem(`isDoingHomework_${sessionId}`);
//                 sessionStorage.removeItem(`pendingHomework_${sessionId}`);
//             }
//         }
//     }, [isDoingHomework, homeworkFiles, pendingHomework, role, sessionId]);

//     useEffect(() => {
//         if (pendingHomework && isDoingHomework && !homeworkFiles) {
//             handleStartHomework();
//         }
//     }, [pendingHomework, isDoingHomework, homeworkFiles]);

//     useEffect(() => {
//         const setupMedia = async () => {
//             if (role === 'teacher') {
//                 try {
//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//                     setLocalStream(stream);
//                     localStreamRef.current = stream;
//                     if (localVideoRef.current) localVideoRef.current.srcObject = stream;
//                 } catch (err) { console.error("Could not get user media.", err); }
//             }
//         };
//         setupMedia();
//     }, [role]);

//     useEffect(() => {
//         if (role === 'teacher') {
//             const fetchLessons = async () => {
//                 const response = await fetch('http://localhost:5000/api/lessons/teacher/list', { headers: { 'Authorization': `Bearer ${token}` } });
//                 if (response.ok) setAvailableLessons(await response.json());
//             };
//             fetchLessons();
//         }
//     }, [role, token]);
    
//     useEffect(() => {
//         if (terminalRef.current && !term.current) {
//             const fitAddon = new FitAddon();
//             const newTerm = new Terminal({ cursorBlink: true, theme: { background: '#1e1e1e', foreground: '#d4d4d4' } });
//             newTerm.loadAddon(fitAddon);
//             newTerm.open(terminalRef.current);
//             fitAddon.fit();
//             newTerm.onData(onTerminalData);
//             term.current = newTerm;
//         }
//     }, []);

//     useEffect(() => {
//         if (term.current && role === 'teacher') {
//             term.current.clear();
//             if (viewingMode !== 'teacher') {
//                 const studentState = studentHomeworkStates.get(viewingMode);
//                 term.current.write(studentState?.terminalOutput || `\r\nWatching ${students.find(s => s.id === viewingMode)?.username || 'student'}'s terminal...\r\n`);
//             }
//         }
//     }, [viewingMode, studentHomeworkStates, role, students]);

//     const initializeWebSocketEvents = (currentWs: WebSocket) => {
//         currentWs.onopen = () => setConnectionStatus('Connected');
//         currentWs.onclose = () => setConnectionStatus('Disconnected');
//         currentWs.onerror = () => setConnectionStatus('Connection Error');

//         currentWs.onmessage = (event) => {
//             const message = JSON.parse(event.data);
//             console.log(`[CLIENT] Received:`, message);

//             switch (message.type) {
//                 case 'ROLE_ASSIGNED':
//                     setRole(message.payload.role);
//                     setFiles(message.payload.files || []);
//                     setActiveFileName(message.payload.activeFile || '');
//                     break;
//                 case 'STUDENT_LIST_UPDATE':
//                     setStudents(message.payload.students);
//                     break;
//                 case 'TEACHER_WORKSPACE_UPDATE':
//                     if (role === 'student') {
//                         setFiles(message.payload.files);
//                         setActiveFileName(message.payload.activeFileName);
//                     }
//                     break;
//                 case 'HOMEWORK_ASSIGNED':
//                     setPendingHomework(message.payload);
//                     setHomeworkFiles(null);
//                     setIsDoingHomework(false);
//                     sessionStorage.removeItem(`isDoingHomework_${sessionId}`);
//                     sessionStorage.removeItem(`homeworkFiles_${sessionId}`);
//                     sessionStorage.setItem(`pendingHomework_${sessionId}`, JSON.stringify(message.payload));
//                     break;
//                 case 'HOMEWORK_JOIN':
//                     setActiveHomeworkStudents(prev => new Set(prev).add(message.payload.studentId));
//                     break;
//                 case 'HOMEWORK_LEAVE':
//                     setActiveHomeworkStudents(prev => {
//                         const newSet = new Set(prev);
//                         newSet.delete(message.payload.studentId);
//                         return newSet;
//                     });
//                     break;
//                 case 'HOMEWORK_CODE_UPDATE':
//                     const { studentId, workspace } = message.payload;
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existingState = newState.get(studentId) || { terminalOutput: '', files: [], activeFileName: '' };
//                         newState.set(studentId, { ...existingState, ...workspace });
//                         return newState;
//                     });
//                     break;
//                 case 'HOMEWORK_TERMINAL_UPDATE':
//                     setStudentHomeworkStates(prev => {
//                         const newState = new Map(prev);
//                         const existing = newState.get(message.payload.studentId) || { files: [], activeFileName: '', terminalOutput: '' };
//                         existing.terminalOutput += message.payload.output;
//                         newState.set(message.payload.studentId, existing);
//                         return newState;
//                     });
//                     break;
//                 case 'TERMINAL_OUT':
//                     term.current?.write(message.payload);
//                     break;
//                 case 'INITIATE_CALL': initializePeerConnection(localStreamRef.current); createOffer(); break;
//                 case 'WEBRTC_OFFER': initializePeerConnection(localStreamRef.current); handleOffer(message.payload); break;
//                 case 'WEBRTC_ANSWER': handleAnswer(message.payload); break;
//                 case 'WEBRTC_ICE_CANDIDATE': handleNewIceCandidate(message.payload); break;
//                 case 'PEER_LEFT': handlePeerLeft(); break;
//             }
//         };
//     };

//     const handleStartHomework = async () => {
//         if (!pendingHomework) return;

//         if (!homeworkFiles) {
//             console.log("Fetching initial homework state...");
//             let filesToSet = null;
//             try {
//                 const stateRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}/student-state`, { 
//                     headers: { 'Authorization': `Bearer ${token}` } 
//                 });

//                 if (stateRes.ok) {
//                     const data = await stateRes.json();
//                     filesToSet = data.files || [];
//                 } else {
//                     console.error("Failed to fetch student-state. Falling back to base lesson files.");
//                     const lessonRes = await fetch(`http://localhost:5000/api/lessons/${pendingHomework.lessonId}`, {
//                         headers: { 'Authorization': `Bearer ${token}` }
//                     });
//                     if (lessonRes.ok) {
//                         const lessonData = await lessonRes.json();
//                         filesToSet = lessonData.files || [];
//                     } else {
//                         console.error("Fallback lesson fetch also failed. Cannot start homework.");
//                         toast.error("Could not load lesson. Please try again later.");
//                         return;
//                     }
//                 }
//                 setHomeworkFiles(filesToSet);
//             } catch (error) {
//                 console.error("A network or other error occurred while fetching homework state:", error);
//                 toast.error("A network error occurred. Please check your connection.");
//                 return;
//             }
//         }
//         setIsDoingHomework(true);
//     };

//     const handleEditorChange = (value: string | undefined) => {
//         if (role !== 'teacher') return;
//         const newCode = value || '';
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, content: newCode } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleLanguageChange = (newLanguage: string) => {
//         if (role !== 'teacher') return;
//         const updatedFiles = files.map(f => f.name === activeFileName ? { ...f, language: newLanguage } : f);
//         setFiles(updatedFiles);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName } }));
//     };

//     const handleAddFile = () => {
//         if (role !== 'teacher') return;
//         const newFileName = prompt("Enter new file name:");
//         if (newFileName && !files.some(f => f.name === newFileName)) {
//             const newFile = { name: newFileName, language: 'plaintext', content: '' };
//             const updatedFiles = [...files, newFile];
//             setFiles(updatedFiles);
//             setActiveFileName(newFileName);
//             ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files: updatedFiles, activeFileName: newFileName } }));
//         }
//     };

//     const handleActiveFileChange = (fileName: string) => {
//         if (role !== 'teacher') return;
//         setActiveFileName(fileName);
//         ws.current?.send(JSON.stringify({ type: 'TEACHER_CODE_UPDATE', payload: { files, activeFileName: fileName } }));
//     };
    
//     const handleAssignHomework = (studentId: string, lessonId: number | string) => {
//         const lesson = availableLessons.find(l => l.id === lessonId);
//         if (ws.current && lesson) {
//             const payload = { studentId, lessonId, teacherSessionId: sessionId, title: lesson.title };
//             console.log("[TEACHER] Sending ASSIGN_HOMEWORK message:", payload);
//             ws.current.send(JSON.stringify({ type: 'ASSIGN_HOMEWORK', payload }));
//             setAssigningToStudentId(null);
//         }
//     };

//     const onTerminalData = (data: string) => {
//         if (ws.current?.readyState === WebSocket.OPEN && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current.send(JSON.stringify({ type: 'TERMINAL_IN', payload: data }));
//         }
//     };

//     const handleRunCode = () => {
//         if (activeFile && role === 'teacher' && viewingMode === 'teacher') {
//             ws.current?.send(JSON.stringify({ type: 'RUN_CODE', payload: { language: activeFile.language, code: activeFile.content } }));
//         }
//     };
    
//     const initializePeerConnection = (stream: MediaStream | null) => {
//         if (peerConnection.current) return;
//         try {
//             peerConnection.current = new RTCPeerConnection(stunServers);
//             if (stream) {
//                 stream.getTracks().forEach(track => peerConnection.current?.addTrack(track, stream));
//             }
//             peerConnection.current.onicecandidate = event => {
//                 if (event.candidate && ws.current?.readyState === WebSocket.OPEN) {
//                     ws.current.send(JSON.stringify({ type: 'WEBRTC_ICE_CANDIDATE', payload: event.candidate }));
//                 }
//             };
//             peerConnection.current.ontrack = event => {
//                 setRemoteStream(event.streams[0]);
//                 if (remoteVideoRef.current) {
//                     remoteVideoRef.current.srcObject = event.streams[0];
//                 }
//             };
//         } catch (error) {
//             console.error('Error initializing peer connection:', error);
//         }
//     };

//     const createOffer = async () => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             const offer = await peerConnection.current.createOffer();
//             await peerConnection.current.setLocalDescription(offer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_OFFER', payload: offer }));
//         } catch (error) {
//             console.error('Error creating and sending offer:', error);
//         }
//     };

//     const handleOffer = async (offer: RTCSessionDescriptionInit) => {
//         if (!peerConnection.current || !ws.current) return;
//         try {
//             await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
//             const answer = await peerConnection.current.createAnswer();
//             await peerConnection.current.setLocalDescription(answer);
//             ws.current.send(JSON.stringify({ type: 'WEBRTC_ANSWER', payload: answer }));
//         } catch (error) {
//             console.error('Error handling offer and sending answer:', error);
//         }
//     };

//     const handleAnswer = async (answer: RTCSessionDescriptionInit) => {
//         if (peerConnection.current?.signalingState === 'have-local-offer') {
//             try {
//                 await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
//                 setConnectionStatus("Peer connected");
//             } catch (error) {
//                 console.error('Error handling answer:', error);
//             }
//         }
//     };

//     const handleNewIceCandidate = async (candidate: RTCIceCandidateInit) => {
//         if (peerConnection.current?.remoteDescription) {
//             try {
//                 await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
//             } catch (error) {
//                 console.error('Error adding new ICE candidate:', error);
//             }
//         }
//     };
    
//     const handlePeerLeft = () => {
//         if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
//         setRemoteStream(null);
//         if (peerConnection.current) {
//             peerConnection.current.close();
//             peerConnection.current = null;
//         }
//         setConnectionStatus("Peer has left");
//     };

//     const toggleMute = () => {
//         if (localStream) {
//             localStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);
//             setIsMuted(!isMuted);
//         }
//     };

//     const toggleCamera = () => {
//         if (localStream) {
//             localStream.getVideoTracks().forEach(track => track.enabled = !track.enabled);
//             setIsCameraOff(!isCameraOff);
//         }
//     };

//     if (role === 'student' && isDoingHomework && pendingHomework && homeworkFiles) {
//         return <HomeworkView 
//                     lessonId={pendingHomework.lessonId} 
//                     teacherSessionId={pendingHomework.teacherSessionId} 
//                     token={token} 
//                     onLeave={() => setIsDoingHomework(false)} 
//                     initialFiles={homeworkFiles}
//                     onFilesChange={setHomeworkFiles}
//                 />;
//     }
    
//     return (
//         <div className="w-full h-screen flex flex-col bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-slate-100 font-sans">
//             <header className="flex-shrink-0 flex justify-between items-center px-4 py-3 border-b">
//                 <h1 className="text-lg font-bold">Interactive Classroom</h1>
//                 <div className="flex items-center gap-4">
//                     <Badge variant={role === 'teacher' ? 'default' : 'secondary'}>{role.toUpperCase()}</Badge>
//                     {role === 'teacher' && <Badge variant="outline">Viewing: {viewingMode === 'teacher' ? 'My Workspace' : students.find(s => s.id === viewingMode)?.username || 'Student'}</Badge>}
//                 </div>
//                 <Button variant="destructive" onClick={() => navigate('/dashboard')}><PhoneOff className="mr-2 h-4 w-4" /> End Session</Button>
//             </header>

//             {pendingHomework && role === 'student' && (
//                 <Alert className="rounded-none border-l-0 border-r-0 border-t-0 border-blue-500">
//                     <AlertTitle className="font-bold">New Assignment!</AlertTitle>
//                     <AlertDescription className="flex items-center justify-between">
//                         Your teacher has assigned a new lesson: <strong>{pendingHomework.title}</strong>
//                         <Button size="sm" onClick={isDoingHomework ? () => setIsDoingHomework(false) : handleStartHomework}>
//                             {isDoingHomework ? 'Return to Classroom' : 'Start Lesson'}
//                             <ChevronRight className="ml-2 h-4 w-4" />
//                         </Button>
//                     </AlertDescription>
//                 </Alert>
//             )}

//             <main className="flex-grow flex flex-row overflow-hidden">
//                 <PanelGroup direction="horizontal">
//                     <Panel defaultSize={75} minSize={30}>
//                         {/* --- MAIN WORKSPACE LOGIC INLINED --- */}
//                         <PanelGroup direction="horizontal" className="w-full h-full">
//                             <Panel defaultSize={20} minSize={15} className="flex flex-col bg-white dark:bg-slate-800/50 border-r">
//                                 <div className="p-3 border-b flex justify-between items-center">
//                                     <h2 className="font-semibold text-sm uppercase">Explorer</h2>
//                                     {role === 'teacher' && viewingMode === 'teacher' && <Button variant="ghost" size="icon" onClick={handleAddFile}><FilePlus className="h-4 w-4" /></Button>}
//                                 </div>
//                                 <div className="flex-grow overflow-y-auto py-1">
//                                     {displayedWorkspace.files.map(file => (
//                                         <div key={file.name} onClick={() => handleActiveFileChange(file.name)} className={`flex items-center px-3 py-1.5 mx-1 rounded-md text-sm ${isEditorReadOnly ? 'cursor-default' : 'cursor-pointer'} ${displayedWorkspace.activeFileName === file.name ? 'bg-blue-100 font-medium' : 'hover:bg-slate-100'}`}>
//                                             <FileIcon className="h-4 w-4 mr-2.5" />
//                                             <span className="truncate">{file.name}</span>
//                                         </div>
//                                     ))}
//                                 </div>
//                             </Panel>
//                             <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                             <Panel defaultSize={80} minSize={30}>
//                                 <PanelGroup direction="vertical">
//                                     <Panel defaultSize={70} minSize={20}>
//                                         <div className="h-full flex flex-col">
//                                             <div className="p-2 flex justify-between items-center bg-white border-b">
//                                                 <Select value={activeFile?.language || 'plaintext'} onValueChange={handleLanguageChange} disabled={isEditorReadOnly}>
//                                                     <SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger>
//                                                     <SelectContent>
//                                                         <SelectItem value="javascript">JavaScript</SelectItem>
//                                                         <SelectItem value="python">Python</SelectItem>
//                                                     </SelectContent>
//                                                 </Select>
//                                                 {role === 'teacher' && viewingMode === 'teacher' && <Button onClick={handleRunCode} size="sm" disabled={!activeFile}><Play className="mr-2 h-4 w-4" /> Run Code</Button>}
//                                             </div>
//                                             <Editor height="100%" theme="vs-dark" path={activeFile?.name} language={activeFile?.language} value={activeFile?.content} onChange={handleEditorChange} options={{ readOnly: isEditorReadOnly }} />
//                                         </div>
//                                     </Panel>
//                                     <PanelResizeHandle className="h-1.5 bg-slate-200" />
//                                     <Panel defaultSize={30} minSize={10}>
//                                         <div className="h-full flex flex-col bg-[#1e1e1e]">
//                                             <div className="p-2 bg-slate-700/50 text-xs font-semibold flex items-center border-b border-t"><TerminalIcon className="h-4 w-4 mr-2" />Terminal</div>
//                                             <div ref={terminalRef} className="flex-grow p-2 overflow-hidden" />
//                                         </div>
//                                     </Panel>
//                                 </PanelGroup>
//                             </Panel>
//                         </PanelGroup>
//                     </Panel>
//                     <PanelResizeHandle className="w-1.5 bg-slate-200" />
//                     <Panel defaultSize={25} minSize={20} maxSize={35}>
//                         <RosterPanel
//                             role={role}
//                             students={students}
//                             viewingMode={viewingMode}
//                             setViewingMode={setViewingMode}
//                             activeHomeworkStudents={activeHomeworkStudents}
//                             assigningToStudentId={assigningToStudentId}
//                             setAssigningToStudentId={setAssigningToStudentId}
//                             availableLessons={availableLessons}
//                             handleAssignHomework={handleAssignHomework}
//                             localVideoRef={localVideoRef}
//                             remoteVideoRef={remoteVideoRef}
//                             remoteStream={remoteStream}
//                             isMuted={isMuted}
//                             toggleMute={toggleMute}
//                             isCameraOff={isCameraOff}
//                             toggleCamera={toggleCamera}
//                         />
//                     </Panel>
//                 </PanelGroup>
//             </main>
//         </div>
//     );
// };

// export default LiveTutorialPage;