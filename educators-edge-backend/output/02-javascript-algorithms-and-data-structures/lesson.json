{
  "section": {
    "id": "02-javascript-algorithms-and-data-structures",
    "name": "02-javascript-algorithms-and-data-structures"
  },
  "challenges": [
    {
      "id": "a77dbc43c33f39daa4429b4f",
      "title": "Boo who",
      "challengeType": 1,
      "dashedName": "boo-who",
      "description": "Check if a value is classified as a boolean primitive. Return `true` or `false`.\n\nBoolean primitives are `true` and `false`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function booWho(bool) {\n  return bool;\n}\n\nbooWho(null);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function booWho(bool) {\n  return typeof bool === 'boolean';\n}\n\nbooWho(null);"
        }
      ],
      "tests": [
        {
          "text": "`booWho(true)` should return `true`.",
          "testCode": "assert.isTrue(booWho(true));"
        },
        {
          "text": "`booWho(false)` should return `true`.",
          "testCode": "assert.isTrue(booWho(false));"
        },
        {
          "text": "`booWho([1, 2, 3])` should return `false`.",
          "testCode": "assert.isFalse(booWho([1, 2, 3]));"
        },
        {
          "text": "`booWho([].slice)` should return `false`.",
          "testCode": "assert.isFalse(booWho([].slice));"
        },
        {
          "text": "`booWho({ \"a\": 1 })` should return `false`.",
          "testCode": "assert.isFalse(booWho({ a: 1 }));"
        },
        {
          "text": "`booWho(1)` should return `false`.",
          "testCode": "assert.isFalse(booWho(1));"
        },
        {
          "text": "`booWho(NaN)` should return `false`.",
          "testCode": "assert.isFalse(booWho(NaN));"
        },
        {
          "text": "`booWho(\"a\")` should return `false`.",
          "testCode": "assert.isFalse(booWho('a'));"
        },
        {
          "text": "`booWho(\"true\")` should return `false`.",
          "testCode": "assert.isFalse(booWho('true'));"
        },
        {
          "text": "`booWho(\"false\")` should return `false`.",
          "testCode": "assert.isFalse(booWho('false'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16000,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\boo-who.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "a9bd25c716030ec90084d8a1",
      "title": "Chunky Monkey",
      "challengeType": 1,
      "dashedName": "chunky-monkey",
      "description": "Write a function that splits an array (first argument) into groups the length of `size` (second argument) and returns them as a two-dimensional array.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function chunkArrayInGroups(arr, size) {\n  return arr;\n}\n\nchunkArrayInGroups(['a', 'b', 'c', 'd'], 2);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups(['a', 'b', 'c', 'd'], 2);"
        }
      ],
      "tests": [
        {
          "text": "`chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2)` should return `[[\"a\", \"b\"], [\"c\", \"d\"]]`.",
          "testCode": "assert.deepEqual(chunkArrayInGroups(['a', 'b', 'c', 'd'], 2), [\n  ['a', 'b'],\n  ['c', 'd']\n]);"
        },
        {
          "text": "`chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)` should return `[[0, 1, 2], [3, 4, 5]]`.",
          "testCode": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3), [\n  [0, 1, 2],\n  [3, 4, 5]\n]);"
        },
        {
          "text": "`chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)` should return `[[0, 1], [2, 3], [4, 5]]`.",
          "testCode": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2), [\n  [0, 1],\n  [2, 3],\n  [4, 5]\n]);"
        },
        {
          "text": "`chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)` should return `[[0, 1, 2, 3], [4, 5]]`.",
          "testCode": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4), [\n  [0, 1, 2, 3],\n  [4, 5]\n]);"
        },
        {
          "text": "`chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)` should return `[[0, 1, 2], [3, 4, 5], [6]]`.",
          "testCode": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3), [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6]\n]);"
        },
        {
          "text": "`chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)` should return `[[0, 1, 2, 3], [4, 5, 6, 7], [8]]`.",
          "testCode": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4), [\n  [0, 1, 2, 3],\n  [4, 5, 6, 7],\n  [8]\n]);"
        },
        {
          "text": "`chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)` should return `[[0, 1], [2, 3], [4, 5], [6, 7], [8]]`.",
          "testCode": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2), [\n  [0, 1],\n  [2, 3],\n  [4, 5],\n  [6, 7],\n  [8]\n]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16005,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\chunky-monkey.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "acda2fb1324d9b0fa741e6b5",
      "title": "Confirm the Ending",
      "challengeType": 1,
      "dashedName": "confirm-the-ending",
      "description": "Check if a string (first argument, `str`) ends with the given target string (second argument, `target`).\n\nThis challenge _can_ be solved with the `.endsWith()` method, which was introduced in ES2015. But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function confirmEnding(str, target) {\n  return str;\n}\n\nconfirmEnding('Bastian', 'n');"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function confirmEnding(str, target) {\n  return str.substring(str.length - target.length) === target;\n}\n\nconfirmEnding('Bastian', 'n');"
        }
      ],
      "tests": [
        {
          "text": "`confirmEnding(\"Bastian\", \"n\")` should return `true`.",
          "testCode": "assert.isTrue(confirmEnding('Bastian', 'n'));"
        },
        {
          "text": "`confirmEnding(\"Congratulation\", \"on\")` should return `true`.",
          "testCode": "assert.isTrue(confirmEnding('Congratulation', 'on'));"
        },
        {
          "text": "`confirmEnding(\"Connor\", \"n\")` should return `false`.",
          "testCode": "assert.isFalse(confirmEnding('Connor', 'n'));"
        },
        {
          "text": "`confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\", \"specification\")` should return `false`.",
          "testCode": "assert.isFalse(\n  confirmEnding(\n    'Walking on water and developing software from a specification are easy if both are frozen',\n    'specification'\n  )\n);"
        },
        {
          "text": "`confirmEnding(\"He has to give me a new name\", \"name\")` should return `true`.",
          "testCode": "assert.isTrue(confirmEnding('He has to give me a new name', 'name'));"
        },
        {
          "text": "`confirmEnding(\"Open sesame\", \"same\")` should return `true`.",
          "testCode": "assert.isTrue(confirmEnding('Open sesame', 'same'));"
        },
        {
          "text": "`confirmEnding(\"Open sesame\", \"sage\")` should return `false`.",
          "testCode": "assert.isFalse(confirmEnding('Open sesame', 'sage'));"
        },
        {
          "text": "`confirmEnding(\"Open sesame\", \"game\")` should return `false`.",
          "testCode": "assert.isFalse(confirmEnding('Open sesame', 'game'));"
        },
        {
          "text": "`confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\")` should return `false`.",
          "testCode": "assert.isFalse(\n  confirmEnding(\n    'If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing',\n    'mountain'\n  )\n);"
        },
        {
          "text": "`confirmEnding(\"Abstraction\", \"action\")` should return `true`.",
          "testCode": "assert.isTrue(confirmEnding('Abstraction', 'action'));"
        },
        {
          "text": "Your code should not use the built-in method `.endsWith()` to solve the challenge.",
          "testCode": "assert.notMatch(__helpers.removeJSComments(code), /\\.endsWith\\(.*?\\)\\s*?;?/);\nassert.notMatch(__helpers.removeJSComments(code), /\\['endsWith'\\]/);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16006,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\confirm-the-ending.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b3",
      "title": "Convert Celsius to Fahrenheit",
      "challengeType": 1,
      "dashedName": "convert-celsius-to-fahrenheit",
      "description": "The formula to convert from Celsius to Fahrenheit is the temperature in Celsius times `9/5`, plus `32`.\n\nYou are given a variable `celsius` representing a temperature in Celsius. Use the variable `fahrenheit` already defined and assign it the Fahrenheit temperature equivalent to the given Celsius temperature. Use the formula mentioned above to help convert the Celsius temperature to Fahrenheit.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function convertCtoF(celsius) {\n  let fahrenheit;\n  return fahrenheit;\n}\n\nconvertCtoF(30);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function convertCtoF(celsius) {\n  let fahrenheit = celsius * (9 / 5) + 32;\n  return fahrenheit;\n}\n\nconvertCtoF(30);"
        }
      ],
      "tests": [
        {
          "text": "`convertCtoF(0)` should return a number",
          "testCode": "assert.isNumber(convertCtoF(0));"
        },
        {
          "text": "`convertCtoF(-30)` should return a value of `-22`",
          "testCode": "assert.strictEqual(convertCtoF(-30), -22);"
        },
        {
          "text": "`convertCtoF(-10)` should return a value of `14`",
          "testCode": "assert.strictEqual(convertCtoF(-10), 14);"
        },
        {
          "text": "`convertCtoF(0)` should return a value of `32`",
          "testCode": "assert.strictEqual(convertCtoF(0), 32);"
        },
        {
          "text": "`convertCtoF(20)` should return a value of `68`",
          "testCode": "assert.strictEqual(convertCtoF(20), 68);"
        },
        {
          "text": "`convertCtoF(30)` should return a value of `86`",
          "testCode": "assert.strictEqual(convertCtoF(30), 86);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16806,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\convert-celsius-to-fahrenheit.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "a302f7aae1aa3152a5b413bc",
      "title": "Factorialize a Number",
      "challengeType": 1,
      "dashedName": "factorialize-a-number",
      "description": "Return the factorial of the provided integer.\n\nIf the integer is represented with the letter `n`, a factorial is the product of all positive integers less than or equal to `n`.\n\nFactorials are often represented with the shorthand notation `n!`\n\nFor example: `5! = 1 * 2 * 3 * 4 * 5 = 120`\n\nOnly integers greater than or equal to zero will be supplied to the function.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function factorialize(num) {\n  return num;\n}\n\nfactorialize(5);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function factorialize(num) {\n  return num < 1 ? 1 : num * factorialize(num - 1);\n}\n\nfactorialize(5);"
        }
      ],
      "tests": [
        {
          "text": "`factorialize(5)` should return a number.",
          "testCode": "assert.isNumber(factorialize(5));"
        },
        {
          "text": "`factorialize(5)` should return `120`.",
          "testCode": "assert.strictEqual(factorialize(5), 120);"
        },
        {
          "text": "`factorialize(10)` should return `3628800`.",
          "testCode": "assert.strictEqual(factorialize(10), 3628800);"
        },
        {
          "text": "`factorialize(20)` should return `2432902008176640000`.",
          "testCode": "assert.strictEqual(factorialize(20), 2432902008176640000);"
        },
        {
          "text": "`factorialize(0)` should return `1`.",
          "testCode": "assert.strictEqual(factorialize(0), 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16013,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\factorialize-a-number.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "adf08ec01beb4f99fc7a68f2",
      "title": "Falsy Bouncer",
      "challengeType": 1,
      "dashedName": "falsy-bouncer",
      "description": "Remove all falsy values from an array. Return a new array; do not mutate the original array.\n\nFalsy values in JavaScript are `false`, `null`, `0`, `\"\"`, `undefined`, and `NaN`.\n\nHint: Try converting each value to a Boolean.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function bouncer(arr) {\n  return arr;\n}\n\nbouncer([7, 'ate', '', false, 9]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function bouncer(arr) {\n  return arr.filter(e => e);\n}\n\nbouncer([7, 'ate', '', false, 9]);"
        }
      ],
      "tests": [
        {
          "text": "`bouncer([7, \"ate\", \"\", false, 9])` should return `[7, \"ate\", 9]`.",
          "testCode": "assert.deepEqual(bouncer([7, 'ate', '', false, 9]), [7, 'ate', 9]);"
        },
        {
          "text": "`bouncer([\"a\", \"b\", \"c\"])` should return `[\"a\", \"b\", \"c\"]`.",
          "testCode": "assert.deepEqual(bouncer(['a', 'b', 'c']), ['a', 'b', 'c']);"
        },
        {
          "text": "`bouncer([false, null, 0, NaN, undefined, \"\"])` should return `[]`.",
          "testCode": "assert.deepEqual(bouncer([false, null, 0, NaN, undefined, '']), []);"
        },
        {
          "text": "`bouncer([null, NaN, 1, 2, undefined])` should return `[1, 2]`.",
          "testCode": "assert.deepEqual(bouncer([null, NaN, 1, 2, undefined]), [1, 2]);"
        },
        {
          "text": "You should not mutate `arr`.",
          "testCode": "const arr = ['a', false, 0, 'Naomi'];\nbouncer(arr);\nassert.deepEqual(arr, ['a', false, 0, 'Naomi']);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16014,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\falsy-bouncer.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "a26cbbe9ad8655a977e1ceb5",
      "title": "Find the Longest Word in a String",
      "challengeType": 1,
      "dashedName": "find-the-longest-word-in-a-string",
      "description": "Return the length of the longest word in the provided sentence.\n\nYour response should be a number.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function findLongestWordLength(str) {\n  return str.length;\n}\n\nfindLongestWordLength('The quick brown fox jumped over the lazy dog');"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function findLongestWordLength(str) {\n  return str.split(' ').sort((a, b) => b.length - a.length)[0].length;\n}\n\nfindLongestWordLength('The quick brown fox jumped over the lazy dog');"
        }
      ],
      "tests": [
        {
          "text": "`findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")` should return a number.",
          "testCode": "assert.isNumber(\n  findLongestWordLength('The quick brown fox jumped over the lazy dog')\n);"
        },
        {
          "text": "`findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")` should return `6`.",
          "testCode": "assert.strictEqual(\n  findLongestWordLength('The quick brown fox jumped over the lazy dog'),\n  6\n);"
        },
        {
          "text": "`findLongestWordLength(\"May the force be with you\")` should return `5`.",
          "testCode": "assert.strictEqual(findLongestWordLength('May the force be with you'), 5);"
        },
        {
          "text": "`findLongestWordLength(\"Google do a barrel roll\")` should return `6`.",
          "testCode": "assert.strictEqual(findLongestWordLength('Google do a barrel roll'), 6);"
        },
        {
          "text": "`findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\")` should return `8`.",
          "testCode": "assert.strictEqual(\n  findLongestWordLength(\n    'What is the average airspeed velocity of an unladen swallow'\n  ),\n  8\n);"
        },
        {
          "text": "`findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\")` should return `19`.",
          "testCode": "assert.strictEqual(\n  findLongestWordLength(\n    'What if we try a super-long word such as otorhinolaryngology'\n  ),\n  19\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16015,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\find-the-longest-word-in-a-string.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "a6e40f1041b06c996f7b2406",
      "title": "Finders Keepers",
      "challengeType": 1,
      "dashedName": "finders-keepers",
      "description": "Create a function that looks through an array `arr` and returns the first element in it that passes a 'truth test'. This means that given an element `x`, the 'truth test' is passed if `func(x)` is `true`. If no element passes the test, return `undefined`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function findElement(arr, func) {\n  let num = 0;\n  return num;\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function findElement(arr, func) {\n  return arr.filter(func)[0];\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);"
        }
      ],
      "tests": [
        {
          "text": "`findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; })` should return `8`.",
          "testCode": "assert.strictEqual(\n  findElement([1, 3, 5, 8, 9, 10], function (num) {\n    return num % 2 === 0;\n  }),\n  8\n);"
        },
        {
          "text": "`findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; })` should return `undefined`.",
          "testCode": "assert.strictEqual(\n  findElement([1, 3, 5, 9], function (num) {\n    return num % 2 === 0;\n  }),\n  undefined\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16016,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\finders-keepers.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "af2170cad53daa0770fabdea",
      "title": "Mutations",
      "challengeType": 1,
      "dashedName": "mutations",
      "description": "Return `true` if the string in the first element of the array contains all of the letters of the string in the second element of the array.\n\nFor example, `[\"hello\", \"Hello\"]`, should return `true` because all of the letters in the second string are present in the first, ignoring case.\n\nThe arguments `[\"hello\", \"hey\"]` should return `false` because the string `hello` does not contain a `y`.\n\nLastly, `[\"Alien\", \"line\"]`, should return `true` because all of the letters in `line` are present in `Alien`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function mutation(arr) {\n  return arr;\n}\n\nmutation(['hello', 'hey']);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function mutation(arr) {\n  let hash = Object.create(null);\n\n  arr[0]\n    .toLowerCase()\n    .split('')\n    .forEach(c => (hash[c] = true));\n\n  return !arr[1]\n    .toLowerCase()\n    .split('')\n    .filter(c => !hash[c]).length;\n}\n\nmutation(['hello', 'hey']);"
        }
      ],
      "tests": [
        {
          "text": "`mutation([\"hello\", \"hey\"])` should return `false`.",
          "testCode": "assert.isFalse(mutation(['hello', 'hey']));"
        },
        {
          "text": "`mutation([\"hello\", \"Hello\"])` should return `true`.",
          "testCode": "assert.isTrue(mutation(['hello', 'Hello']));"
        },
        {
          "text": "`mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"])` should return `true`.",
          "testCode": "assert.isTrue(mutation(['zyxwvutsrqponmlkjihgfedcba', 'qrstu']));"
        },
        {
          "text": "`mutation([\"Mary\", \"Army\"])` should return `true`.",
          "testCode": "assert.isTrue(mutation(['Mary', 'Army']));"
        },
        {
          "text": "`mutation([\"Mary\", \"Aarmy\"])` should return `true`.",
          "testCode": "assert.isTrue(mutation(['Mary', 'Aarmy']));"
        },
        {
          "text": "`mutation([\"Alien\", \"line\"])` should return `true`.",
          "testCode": "assert.isTrue(mutation(['Alien', 'line']));"
        },
        {
          "text": "`mutation([\"floor\", \"for\"])` should return `true`.",
          "testCode": "assert.isTrue(mutation(['floor', 'for']));"
        },
        {
          "text": "`mutation([\"hello\", \"neo\"])` should return `false`.",
          "testCode": "assert.isFalse(mutation(['hello', 'neo']));"
        },
        {
          "text": "`mutation([\"voodoo\", \"no\"])` should return `false`.",
          "testCode": "assert.isFalse(mutation(['voodoo', 'no']));"
        },
        {
          "text": "`mutation([\"ate\", \"date\"])` should return `false`.",
          "testCode": "assert.isFalse(mutation(['ate', 'date']));"
        },
        {
          "text": "`mutation([\"Tiger\", \"Zebra\"])` should return `false`.",
          "testCode": "assert.isFalse(mutation(['Tiger', 'Zebra']));"
        },
        {
          "text": "`mutation([\"Noel\", \"Ole\"])` should return `true`.",
          "testCode": "assert.isTrue(mutation(['Noel', 'Ole']));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16025,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\mutations.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "afcc8d540bea9ea2669306b6",
      "title": "Repeat a String Repeat a String",
      "challengeType": 1,
      "dashedName": "repeat-a-string-repeat-a-string",
      "description": "Repeat a given string `str` (first argument) for `num` times (second argument). Return an empty string if `num` is not a positive number. For the purpose of this challenge, do _not_ use the built-in `.repeat()` method.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function repeatStringNumTimes(str, num) {\n  return str;\n}\n\nrepeatStringNumTimes('abc', 3);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function repeatStringNumTimes(str, num) {\n  if (num < 1) return '';\n  return num === 1 ? str : str + repeatStringNumTimes(str, num - 1);\n}\n\nrepeatStringNumTimes('abc', 3);"
        }
      ],
      "tests": [
        {
          "text": "`repeatStringNumTimes(\"*\", 3)` should return the string `***`.",
          "testCode": "assert.strictEqual(repeatStringNumTimes('*', 3), '***');"
        },
        {
          "text": "`repeatStringNumTimes(\"abc\", 3)` should return the string `abcabcabc`.",
          "testCode": "assert.strictEqual(repeatStringNumTimes('abc', 3), 'abcabcabc');"
        },
        {
          "text": "`repeatStringNumTimes(\"abc\", 4)` should return the string `abcabcabcabc`.",
          "testCode": "assert.strictEqual(repeatStringNumTimes('abc', 4), 'abcabcabcabc');"
        },
        {
          "text": "`repeatStringNumTimes(\"abc\", 1)` should return the string `abc`.",
          "testCode": "assert.strictEqual(repeatStringNumTimes('abc', 1), 'abc');"
        },
        {
          "text": "`repeatStringNumTimes(\"*\", 8)` should return the string `********`.",
          "testCode": "assert.strictEqual(repeatStringNumTimes('*', 8), '********');"
        },
        {
          "text": "`repeatStringNumTimes(\"abc\", -2)` should return an empty string (`\"\"`).",
          "testCode": "assert.isEmpty(repeatStringNumTimes('abc', -2));"
        },
        {
          "text": "The built-in `repeat()` method should not be used.",
          "testCode": "assert.notMatch(__helpers.removeJSComments(code), /\\.repeat/g);"
        },
        {
          "text": "`repeatStringNumTimes(\"abc\", 0)` should return `\"\"`.",
          "testCode": "assert.isEmpty(repeatStringNumTimes('abc', 0));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16041,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\repeat-a-string-repeat-a-string.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "a789b3483989747d63b0e427",
      "title": "Return Largest Numbers in Arrays",
      "challengeType": 1,
      "dashedName": "return-largest-numbers-in-arrays",
      "description": "Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.\n\nRemember, you can iterate through an array with a simple for loop, and access each member with array syntax `arr[i]`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largestOfFour(arr) {\n  return arr;\n}\n\nlargestOfFour([\n  [4, 5, 1, 3],\n  [13, 27, 18, 26],\n  [32, 35, 37, 39],\n  [1000, 1001, 857, 1]\n]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function largestOfFour(arr) {\n  return arr.map(subArr => Math.max.apply(null, subArr));\n}\n\nlargestOfFour([\n  [4, 5, 1, 3],\n  [13, 27, 18, 26],\n  [32, 35, 37, 39],\n  [1000, 1001, 857, 1]\n]);"
        }
      ],
      "tests": [
        {
          "text": "`largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])` should return an array.",
          "testCode": "assert.isArray(\n  largestOfFour([\n    [4, 5, 1, 3],\n    [13, 27, 18, 26],\n    [32, 35, 37, 39],\n    [1000, 1001, 857, 1]\n  ])\n);"
        },
        {
          "text": "`largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])` should return `[27, 5, 39, 1001]`.",
          "testCode": "assert.deepEqual(\n  largestOfFour([\n    [13, 27, 18, 26],\n    [4, 5, 1, 3],\n    [32, 35, 37, 39],\n    [1000, 1001, 857, 1]\n  ]),\n  [27, 5, 39, 1001]\n);"
        },
        {
          "text": "`largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])` should return `[9, 35, 97, 1000000]`.",
          "testCode": "assert.deepEqual(\n  largestOfFour([\n    [4, 9, 1, 3],\n    [13, 35, 18, 26],\n    [32, 35, 97, 39],\n    [1000000, 1001, 857, 1]\n  ]),\n  [9, 35, 97, 1000000]\n);"
        },
        {
          "text": "`largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])` should return `[25, 48, 21, -3]`.",
          "testCode": "assert.deepEqual(\n  largestOfFour([\n    [17, 23, 25, 12],\n    [25, 7, 34, 48],\n    [4, -10, 18, 21],\n    [-72, -3, -17, -10]\n  ]),\n  [25, 48, 21, -3]\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16042,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\return-largest-numbers-in-arrays.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "a202eed8fc186c8434cb6d61",
      "title": "Reverse a String",
      "challengeType": 1,
      "dashedName": "reverse-a-string",
      "description": "Reverse the provided string and return the reversed string.\n\nFor example, `\"hello\"` should become `\"olleh\"`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function reverseString(str) {\n  return str;\n}\n\nreverseString('hello');"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nreverseString('hello');"
        }
      ],
      "tests": [
        {
          "text": "`reverseString(\"hello\")` should return a string.",
          "testCode": "assert.isString(reverseString('hello'));"
        },
        {
          "text": "`reverseString(\"hello\")` should return the string `olleh`.",
          "testCode": "assert.strictEqual(reverseString('hello'), 'olleh');"
        },
        {
          "text": "`reverseString(\"Howdy\")` should return the string `ydwoH`.",
          "testCode": "assert.strictEqual(reverseString('Howdy'), 'ydwoH');"
        },
        {
          "text": "`reverseString(\"Greetings from Earth\")` should return the string `htraE morf sgniteerG`.",
          "testCode": "assert.strictEqual(\n  reverseString('Greetings from Earth'),\n  'htraE morf sgniteerG'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16043,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\reverse-a-string.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "579e2a2c335b9d72dd32e05c",
      "title": "Slice and Splice",
      "challengeType": 1,
      "dashedName": "slice-and-splice",
      "description": "You are given two arrays and an index.\n\nCopy each element of the first array into the second array, in order.\n\nBegin inserting elements at index `n` of the second array.\n\nReturn the resulting array. The input arrays should remain the same after the function runs.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function frankenSplice(arr1, arr2, n) {\n  return arr2;\n}\n\nfrankenSplice([1, 2, 3], [4, 5, 6], 1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function frankenSplice(arr1, arr2, n) {\n  // It's alive. It's alive!\n  let result = arr2.slice();\n  for (let i = 0; i < arr1.length; i++) {\n    result.splice(n + i, 0, arr1[i]);\n  }\n  return result;\n}\n\nfrankenSplice([1, 2, 3], [4, 5], 1);"
        }
      ],
      "tests": [
        {
          "text": "`frankenSplice([1, 2, 3], [4, 5], 1)` should return `[4, 1, 2, 3, 5]`.",
          "testCode": "assert.deepEqual(frankenSplice([1, 2, 3], [4, 5], 1), [4, 1, 2, 3, 5]);"
        },
        {
          "text": "`frankenSplice([1, 2], [\"a\", \"b\"], 1)` should return `[\"a\", 1, 2, \"b\"]`.",
          "testCode": "let testArr1 = [1, 2];\nlet testArr2 = ['a', 'b'];\nassert.deepEqual(frankenSplice(testArr1, testArr2, 1), ['a', 1, 2, 'b']);"
        },
        {
          "text": "`frankenSplice([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2)` should return `[\"head\", \"shoulders\", \"claw\", \"tentacle\", \"knees\", \"toes\"]`.",
          "testCode": "assert.deepEqual(\n  frankenSplice(\n    ['claw', 'tentacle'],\n    ['head', 'shoulders', 'knees', 'toes'],\n    2\n  ),\n  ['head', 'shoulders', 'claw', 'tentacle', 'knees', 'toes']\n);"
        },
        {
          "text": "All elements from the first array should be added to the second array in their original order. `frankenSplice([1, 2, 3, 4], [], 0)` should return `[1, 2, 3, 4]`.",
          "testCode": "assert.deepEqual(frankenSplice([1, 2, 3, 4], [], 0), [1, 2, 3, 4]);"
        },
        {
          "text": "The first array should remain the same after the function runs.",
          "testCode": "let testArr1 = [1, 2];\nlet testArr2 = ['a', 'b'];\nfrankenSplice(testArr1, testArr2, 1);\nassert.deepEqual(testArr1, [1, 2]);"
        },
        {
          "text": "The second array should remain the same after the function runs.",
          "testCode": "let testArr1 = [1, 2];\nlet testArr2 = ['a', 'b'];\nfrankenSplice(testArr1, testArr2, 1);\nassert.deepEqual(testArr2, ['a', 'b']);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301148,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\slice-and-splice.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "ab6137d4e35944e21037b769",
      "title": "Title Case a Sentence",
      "challengeType": 1,
      "dashedName": "title-case-a-sentence",
      "description": "Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case.\n\nFor the purpose of this exercise, you should also capitalize connecting words like `the` and `of`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function titleCase(str) {\n  return str;\n}\n\ntitleCase(\"I'm a little tea pot\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function titleCase(str) {\n  return str\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.substring(1).toLowerCase())\n    .join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");"
        }
      ],
      "tests": [
        {
          "text": "`titleCase(\"I'm a little tea pot\")` should return a string.",
          "testCode": "assert.isString(titleCase(\"I'm a little tea pot\"));"
        },
        {
          "text": "`titleCase(\"I'm a little tea pot\")` should return the string `I'm A Little Tea Pot`.",
          "testCode": "assert.strictEqual(titleCase(\"I'm a little tea pot\"), \"I'm A Little Tea Pot\");"
        },
        {
          "text": "`titleCase(\"sHoRt AnD sToUt\")` should return the string `Short And Stout`.",
          "testCode": "assert.strictEqual(titleCase('sHoRt AnD sToUt'), 'Short And Stout');"
        },
        {
          "text": "`titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\")` should return the string `Here Is My Handle Here Is My Spout`.",
          "testCode": "assert.strictEqual(\n  titleCase('HERE IS MY HANDLE HERE IS MY SPOUT'),\n  'Here Is My Handle Here Is My Spout'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16088,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\title-case-a-sentence.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "ac6993d51946422351508a41",
      "title": "Truncate a String",
      "challengeType": 1,
      "dashedName": "truncate-a-string",
      "description": "Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a `...` ending.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function truncateString(str, num) {\n  return str;\n}\n\ntruncateString('A-tisket a-tasket A green and yellow basket', 8);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function truncateString(str, num) {\n  if (num >= str.length) {\n    return str;\n  }\n\n  return str.slice(0, num) + '...';\n}\n\ntruncateString('A-tisket a-tasket A green and yellow basket', 8);"
        }
      ],
      "tests": [
        {
          "text": "`truncateString(\"A-tisket a-tasket A green and yellow basket\", 8)` should return the string `A-tisket...`.",
          "testCode": "assert.strictEqual(\n  truncateString('A-tisket a-tasket A green and yellow basket', 8),\n  'A-tisket...'\n);"
        },
        {
          "text": "`truncateString(\"Peter Piper picked a peck of pickled peppers\", 11)` should return the string `Peter Piper...`.",
          "testCode": "assert.strictEqual(\n  truncateString('Peter Piper picked a peck of pickled peppers', 11),\n  'Peter Piper...'\n);"
        },
        {
          "text": "`truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length)` should return the string `A-tisket a-tasket A green and yellow basket`.",
          "testCode": "assert.strictEqual(\n  truncateString(\n    'A-tisket a-tasket A green and yellow basket',\n    'A-tisket a-tasket A green and yellow basket'.length\n  ),\n  'A-tisket a-tasket A green and yellow basket'\n);"
        },
        {
          "text": "`truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2)` should return the string `A-tisket a-tasket A green and yellow basket`.",
          "testCode": "assert.strictEqual(\n  truncateString(\n    'A-tisket a-tasket A green and yellow basket',\n    'A-tisket a-tasket A green and yellow basket'.length + 2\n  ),\n  'A-tisket a-tasket A green and yellow basket'\n);"
        },
        {
          "text": "`truncateString(\"A-\", 1)` should return the string `A...`.",
          "testCode": "assert.strictEqual(truncateString('A-', 1), 'A...');"
        },
        {
          "text": "`truncateString(\"Absolutely Longer\", 2)` should return the string `Ab...`.",
          "testCode": "assert.strictEqual(truncateString('Absolutely Longer', 2), 'Ab...');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16089,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\truncate-a-string.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "a24c1a4622e3c05097f71d67",
      "title": "Where do I Belong",
      "challengeType": 1,
      "dashedName": "where-do-i-belong",
      "description": "Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.\n\nFor example, `getIndexToIns([1,2,3,4], 1.5)` should return `1` because it is greater than `1` (index 0), but less than `2` (index 1).\n\nLikewise, `getIndexToIns([20,3,5], 19)` should return `2` because once the array has been sorted it will look like `[3,5,20]` and `19` is less than `20` (index 2) and greater than `5` (index 1).",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function getIndexToIns(arr, num) {\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function getIndexToIns(arr, num) {\n  arr = arr.sort((a, b) => a - b);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      return i;\n    }\n  }\n\n  return arr.length;\n}\n\ngetIndexToIns([40, 60], 50);"
        }
      ],
      "tests": [
        {
          "text": "`getIndexToIns([10, 20, 30, 40, 50], 35)` should return a number.",
          "testCode": "assert.isNumber(getIndexToIns([10, 20, 30, 40, 50], 35));"
        },
        {
          "text": "`getIndexToIns([10, 20, 30, 40, 50], 35)` should return `3`.",
          "testCode": "assert.strictEqual(getIndexToIns([10, 20, 30, 40, 50], 35), 3);"
        },
        {
          "text": "`getIndexToIns([10, 20, 30, 40, 50], 30)` should return a number.",
          "testCode": "assert.isNumber(getIndexToIns([10, 20, 30, 40, 50], 30));"
        },
        {
          "text": "`getIndexToIns([10, 20, 30, 40, 50], 30)` should return `2`.",
          "testCode": "assert.strictEqual(getIndexToIns([10, 20, 30, 40, 50], 30), 2);"
        },
        {
          "text": "`getIndexToIns([40, 60], 50)` should return a number.",
          "testCode": "assert.isNumber(getIndexToIns([40, 60], 50));"
        },
        {
          "text": "`getIndexToIns([40, 60], 50)` should return `1`.",
          "testCode": "assert.strictEqual(getIndexToIns([40, 60], 50), 1);"
        },
        {
          "text": "`getIndexToIns([3, 10, 5], 3)` should return a number.",
          "testCode": "assert.isNumber(getIndexToIns([3, 10, 5], 3));"
        },
        {
          "text": "`getIndexToIns([3, 10, 5], 3)` should return `0`.",
          "testCode": "assert.strictEqual(getIndexToIns([3, 10, 5], 3), 0);"
        },
        {
          "text": "`getIndexToIns([5, 3, 20, 3], 5)` should return a number.",
          "testCode": "assert.isNumber(getIndexToIns([5, 3, 20, 3], 5));"
        },
        {
          "text": "`getIndexToIns([5, 3, 20, 3], 5)` should return `2`.",
          "testCode": "assert.strictEqual(getIndexToIns([5, 3, 20, 3], 5), 2);"
        },
        {
          "text": "`getIndexToIns([2, 20, 10], 19)` should return `2`.",
          "testCode": "assert.strictEqual(getIndexToIns([2, 20, 10], 19), 2);"
        },
        {
          "text": "`getIndexToIns([2, 20, 10], 19)` should return a number.",
          "testCode": "assert.isNumber(getIndexToIns([2, 20, 10], 19));"
        },
        {
          "text": "`getIndexToIns([2, 5, 10], 15)` should return `3`.",
          "testCode": "assert.strictEqual(getIndexToIns([2, 5, 10], 15), 3);"
        },
        {
          "text": "`getIndexToIns([2, 5, 10], 15)` should return a number.",
          "testCode": "assert.isNumber(getIndexToIns([2, 5, 10], 15));"
        },
        {
          "text": "`getIndexToIns([], 1)` should return a number.",
          "testCode": "assert.isNumber(getIndexToIns([], 1));"
        },
        {
          "text": "`getIndexToIns([], 1)` should return `0`.",
          "testCode": "assert.strictEqual(getIndexToIns([], 1), 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16094,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-algorithm-scripting\\where-do-i-belong.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-algorithm-scripting",
        "name": "Basic Algorithm Scripting"
      }
    },
    {
      "id": "5a661e0f1068aca922b3ef17",
      "title": "Access an Array's Contents Using Bracket Notation",
      "challengeType": 1,
      "dashedName": "access-an-arrays-contents-using-bracket-notation",
      "description": "The fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that data on command. So, now that we've learned how to create an array, let's begin to think about how we can access that array's information.\n\nWhen we define a simple array as seen below, there are 3 items in it:\n\n```js\nlet ourArray = [\"a\", \"b\", \"c\"];\n```\n\nIn an array, each array item has an <dfn>index</dfn>. This index doubles as the position of that item in the array, and how you reference it. However, it is important to note, that JavaScript arrays are <dfn>zero-indexed</dfn>, meaning that the first element of an array is actually at the ***zeroth*** position, not the first. In order to retrieve an element from an array we can enclose an index in brackets and append it to the end of an array, or more commonly, to a variable which references an array object. This is known as <dfn>bracket notation</dfn>. For example, if we want to retrieve the `a` from `ourArray` and assign it to a variable, we can do so with the following code:\n\n```js\nlet ourVariable = ourArray[0];\n```\n\nNow `ourVariable` has the value of `a`.\n\nIn addition to accessing the value associated with an index, you can also *set* an index to a value using the same notation:\n\n```js\nourArray[1] = \"not b anymore\";\n```\n\nUsing bracket notation, we have now reset the item at index 1 from the string `b`, to `not b anymore`. Now `ourArray` is `[\"a\", \"not b anymore\", \"c\"]`.",
      "instructions": "In order to complete this challenge, set the 2nd position (index `1`) of `myArray` to anything you want, besides the letter `b`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myArray = [\"a\", \"b\", \"c\", \"d\"];\n// Only change code below this line\n\n// Only change code above this line\nconsole.log(myArray);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myArray = [\"a\", \"b\", \"c\", \"d\"];\nmyArray[1] = \"e\";"
        }
      ],
      "tests": [
        {
          "text": "`myArray[0]` should be equal to the letter `a`",
          "testCode": "assert.strictEqual(myArray[0], 'a');"
        },
        {
          "text": "`myArray[1]` should not be equal to the letter `b`",
          "testCode": "assert.notStrictEqual(myArray[1], 'b');"
        },
        {
          "text": "`myArray[2]` should be equal to the letter `c`",
          "testCode": "assert.strictEqual(myArray[2], 'c');"
        },
        {
          "text": "`myArray[3]` should be equal to the letter `d`",
          "testCode": "assert.strictEqual(myArray[3], 'd');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301149,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\access-an-arrays-contents-using-bracket-notation.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7c367417b2b2512b1a",
      "title": "Access Property Names with Bracket Notation",
      "challengeType": 1,
      "dashedName": "access-property-names-with-bracket-notation",
      "description": "In the first object challenge we mentioned the use of bracket notation as a way to access property values using the evaluation of a variable. For instance, imagine that our `foods` object is being used in a program for a supermarket cash register. We have some function that sets the `selectedFood` and we want to check our `foods` object for the presence of that food. This might look like:\n\n```js\nlet selectedFood = getCurrentFood(scannedItem);\nlet inventory = foods[selectedFood];\n```\n\nThis code will evaluate the value stored in the `selectedFood` variable and return the value of that key in the `foods` object, or `undefined` if it is not present. Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.",
      "instructions": "We've defined a function, `checkInventory`, which receives a scanned item as an argument. Return the current value of the `scannedItem` key in the `foods` object. You can assume that only valid keys will be provided as an argument to `checkInventory`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\nfunction checkInventory(scannedItem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(checkInventory(\"apples\"));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\nfunction checkInventory(scannedItem) {\n  return foods[scannedItem];\n}"
        }
      ],
      "tests": [
        {
          "text": "`checkInventory` should be a function.",
          "testCode": "assert.strictEqual(typeof checkInventory, 'function');"
        },
        {
          "text": "The `foods` object should have only the following key-value pairs: `apples: 25`, `oranges: 32`, `plums: 28`, `bananas: 13`, `grapes: 35`, `strawberries: 27`.",
          "testCode": "assert.deepEqual(foods, {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n});"
        },
        {
          "text": "`checkInventory(\"apples\")` should return `25`.",
          "testCode": "assert.strictEqual(checkInventory('apples'), 25);"
        },
        {
          "text": "`checkInventory(\"bananas\")` should return `13`.",
          "testCode": "assert.strictEqual(checkInventory('bananas'), 13);"
        },
        {
          "text": "`checkInventory(\"strawberries\")` should return `27`.",
          "testCode": "assert.strictEqual(checkInventory('strawberries'), 27);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301150,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\access-property-names-with-bracket-notation.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d78b2367417b2b2512b0e",
      "title": "Add Items to an Array with push() and unshift()",
      "challengeType": 1,
      "dashedName": "add-items-to-an-array-with-push-and-unshift",
      "description": "An array's length, like the data types it can contain, is not fixed. Arrays can be defined with a length of any number of elements, and elements can be added or removed over time; in other words, arrays are <dfn>mutable</dfn>. In this challenge, we will look at two methods with which we can programmatically modify an array: `Array.push()` and `Array.unshift()`.\n\nBoth methods take one or more elements as parameters and add those elements to the array the method is being called on; the `push()` method adds elements to the end of an array, and `unshift()` adds elements to the beginning. Consider the following:\n\n```js\nlet twentyThree = 'XXIII';\nlet romanNumerals = ['XXI', 'XXII'];\n\nromanNumerals.unshift('XIX', 'XX');\n```\n\n`romanNumerals` would have the value `['XIX', 'XX', 'XXI', 'XXII']`.\n\n```js\nromanNumerals.push(twentyThree);\n```\n\n`romanNumerals` would have the value `['XIX', 'XX', 'XXI', 'XXII', 'XXIII']`. Notice that we can also pass variables, which allows us even greater flexibility in dynamically modifying our array's data.",
      "instructions": "We have defined a function, `mixedNumbers`, which we are passing an array as an argument. Modify the function by using `push()` and `unshift()` to add `'I', 2, 'three'` to the beginning of the array and `7, 'VIII', 9` to the end so that the returned array contains representations of the numbers 1-9 in order.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function mixedNumbers(arr) {\n  // Only change code below this line\n\n  // Only change code above this line\n  return arr;\n}\n\nconsole.log(mixedNumbers(['IV', 5, 'six']));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function mixedNumbers(arr) {\n  arr.push(7,'VIII',9);\n  arr.unshift('I',2,'three');\n  return arr;\n}"
        }
      ],
      "tests": [
        {
          "text": "`mixedNumbers([\"IV\", 5, \"six\"])` should now return `[\"I\", 2, \"three\", \"IV\", 5, \"six\", 7, \"VIII\", 9]`",
          "testCode": "assert.deepEqual(mixedNumbers(['IV', 5, 'six']), [\n  'I',\n  2,\n  'three',\n  'IV',\n  5,\n  'six',\n  7,\n  'VIII',\n  9\n]);"
        },
        {
          "text": "The `mixedNumbers` function should utilize the `push()` method",
          "testCode": "assert(mixedNumbers.toString().match(/\\.push/));"
        },
        {
          "text": "The `mixedNumbers` function should utilize the `unshift()` method",
          "testCode": "assert(mixedNumbers.toString().match(/\\.unshift/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301151,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\add-items-to-an-array-with-push-and-unshift.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d78b3367417b2b2512b11",
      "title": "Add Items Using splice()",
      "challengeType": 1,
      "dashedName": "add-items-using-splice",
      "description": "Remember in the last challenge we mentioned that `splice()` can take up to three parameters? Well, you can use the third parameter, comprised of one or more element(s), to add to the array. This can be incredibly useful for quickly switching out an element, or a set of elements, for another.\n\n```js\nconst numbers = [10, 11, 12, 12, 15];\nconst startIndex = 3;\nconst amountToDelete = 1;\n\nnumbers.splice(startIndex, amountToDelete, 13, 14);\nconsole.log(numbers);\n```\n\nThe second occurrence of `12` is removed, and we add `13` and `14` at the same index. The `numbers` array would now be `[ 10, 11, 12, 13, 14, 15 ]`.\n\nHere, we begin with an array of numbers. Then, we pass the following to `splice()`: The index at which to begin deleting elements (3), the number of elements to be deleted (1), and the remaining arguments (13, 14) will be inserted starting at that same index. Note that there can be any number of elements (separated by commas) following `amountToDelete`, each of which gets inserted.",
      "instructions": "We have defined a function, `htmlColorNames`, which takes an array of HTML colors as an argument. Modify the function using `splice()` to remove the first two elements of the array and add `'DarkSalmon'` and `'BlanchedAlmond'` in their respective places.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function htmlColorNames(arr) {\n  // Only change code below this line\n\n  // Only change code above this line\n  return arr;\n}\n\nconsole.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function htmlColorNames(arr) {\n  arr.splice(0,2,'DarkSalmon', 'BlanchedAlmond');\n  return arr;\n}"
        }
      ],
      "tests": [
        {
          "text": "`htmlColorNames` should return `[\"DarkSalmon\", \"BlanchedAlmond\", \"LavenderBlush\", \"PaleTurquoise\", \"FireBrick\"]`",
          "testCode": "assert.deepEqual(\n  htmlColorNames([\n    'DarkGoldenRod',\n    'WhiteSmoke',\n    'LavenderBlush',\n    'PaleTurquoise',\n    'FireBrick'\n  ]),\n  [\n    'DarkSalmon',\n    'BlanchedAlmond',\n    'LavenderBlush',\n    'PaleTurquoise',\n    'FireBrick'\n  ]\n);"
        },
        {
          "text": "The `htmlColorNames` function should utilize the `splice()` method",
          "testCode": "assert(/.splice/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should not use `shift()` or `unshift()`.",
          "testCode": "assert(!/shift|unshift/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should not use array bracket notation.",
          "testCode": "assert(!/\\[\\d\\]\\s*=/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301152,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\add-items-using-splice.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7c367417b2b2512b18",
      "title": "Add Key-Value Pairs to JavaScript Objects",
      "challengeType": 1,
      "dashedName": "add-key-value-pairs-to-javascript-objects",
      "description": "At their most basic, objects are just collections of <dfn>key-value</dfn> pairs. In other words, they are pieces of data (<dfn>values</dfn>) mapped to unique identifiers called <dfn>properties</dfn> (<dfn>keys</dfn>). Take a look at an example:\n\n```js\nconst tekkenCharacter = {\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true\n};\n```\n\nThe above code defines a Tekken video game character object called `tekkenCharacter`. It has three properties, each of which map to a specific value. If you want to add an additional property, such as \"origin\", it can be done by assigning `origin` to the object:\n\n```js\ntekkenCharacter.origin = 'South Korea';\n```\n\nThis uses dot notation. If you were to observe the `tekkenCharacter` object, it will now include the `origin` property. Hwoarang also had distinct orange hair. You can add this property with bracket notation by doing:\n\n```js\ntekkenCharacter['hair color'] = 'dyed orange';\n```\n\nBracket notation is required if your property has a space in it or if you want to use a variable to name the property. In the above case, the property is enclosed in quotes to denote it as a string and will be added exactly as shown. Without quotes, it will be evaluated as a variable and the name of the property will be whatever value the variable is. Here's an example with a variable:\n\n```js\nconst eyes = 'eye color';\n\ntekkenCharacter[eyes] = 'brown';\n```\n\nAfter adding all the examples, the object will look like this:\n\n```js\n{\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true,\n  origin: 'South Korea',\n  'hair color': 'dyed orange',\n  'eye color': 'brown'\n};\n```",
      "instructions": "A `foods` object has been created with three entries. Using the syntax of your choice, add three more entries to it: `bananas` with a value of `13`, `grapes` with a value of `35`, and `strawberries` with a value of `27`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(foods);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n\nfoods['bananas'] = 13;\nfoods['grapes']  = 35;\nfoods['strawberries'] = 27;"
        }
      ],
      "tests": [
        {
          "text": "`foods` should be an object.",
          "testCode": "assert(typeof foods === 'object');"
        },
        {
          "text": "The `foods` object should have a key `bananas` with a value of `13`.",
          "testCode": "assert(foods.bananas === 13);"
        },
        {
          "text": "The `foods` object should have a key `grapes` with a value of `35`.",
          "testCode": "assert(foods.grapes === 35);"
        },
        {
          "text": "The `foods` object should have a key `strawberries` with a value of `27`.",
          "testCode": "assert(foods.strawberries === 27);"
        },
        {
          "text": "The definition of the `foods` object should not be changed.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).search(/let foods/) === -1 &&\n  __helpers.removeJSComments(code).search(/const\\s+foods\\s*=\\s*{\\s*apples:\\s*25,\\s*oranges:\\s*32,\\s*plums:\\s*28\\s*};/\n) !== -1\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301153,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\add-key-value-pairs-to-javascript-objects.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7b367417b2b2512b14",
      "title": "Check For The Presence of an Element With indexOf()",
      "challengeType": 1,
      "dashedName": "check-for-the-presence-of-an-element-with-indexof",
      "description": "Since arrays can be changed, or *mutated*, at any time, there's no guarantee about where a particular piece of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us with another built-in method, `indexOf()`, that allows us to quickly and easily check for the presence of an element on an array. `indexOf()` takes an element as a parameter, and when called, it returns the position, or index, of that element, or `-1` if the element does not exist on the array.\n\nFor example:\n\n```js\nlet fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];\n\nfruits.indexOf('dates');\nfruits.indexOf('oranges');\nfruits.indexOf('pears');\n```\n\n`indexOf('dates')` returns `-1`, `indexOf('oranges')` returns `2`, and `indexOf('pears')` returns `1` (the first index at which each element exists).",
      "instructions": "`indexOf()` can be incredibly useful for quickly checking for the presence of an element on an array. We have defined a function, `quickCheck`, that takes an array and an element as arguments. Modify the function using `indexOf()` so that it returns `true` if the passed element exists on the array, and `false` if it does not.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function quickCheck(arr, elem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function quickCheck(arr, elem) {\n  return arr.indexOf(elem) >= 0; \n}"
        }
      ],
      "tests": [
        {
          "text": "The `quickCheck` function should return a boolean (`true` or `false`), not a string (`\"true\"` or `\"false\"`)",
          "testCode": "assert.isBoolean(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));"
        },
        {
          "text": "`quickCheck([\"squash\", \"onions\", \"shallots\"], \"mushrooms\")` should return `false`",
          "testCode": "assert.strictEqual(\n  quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'),\n  false\n);"
        },
        {
          "text": "`quickCheck([\"onions\", \"squash\", \"shallots\"], \"onions\")` should return `true`",
          "testCode": "assert.strictEqual(\n  quickCheck(['onions', 'squash', 'shallots'], 'onions'),\n  true\n);"
        },
        {
          "text": "`quickCheck([3, 5, 9, 125, 45, 2], 125)` should return `true`",
          "testCode": "assert.strictEqual(quickCheck([3, 5, 9, 125, 45, 2], 125), true);"
        },
        {
          "text": "`quickCheck([true, false, false], undefined)` should return `false`",
          "testCode": "assert.strictEqual(quickCheck([true, false, false], undefined), false);"
        },
        {
          "text": "The `quickCheck` function should utilize the `indexOf()` method",
          "testCode": "assert.notStrictEqual(quickCheck.toString().search(/\\.indexOf\\(/), -1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301154,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\check-for-the-presence-of-an-element-with-indexof.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7d367417b2b2512b1c",
      "title": "Check if an Object has a Property",
      "challengeType": 1,
      "dashedName": "check-if-an-object-has-a-property",
      "description": "Now we can add, modify, and remove keys from objects. But what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. One uses the `hasOwnProperty()` method and the other uses the `in` keyword. If we have an object `users` with a property of `Alan`, we could check for its presence in either of the following ways:\n\n```js\nusers.hasOwnProperty('Alan');\n'Alan' in users;\n```\n\nBoth of these would return `true`.",
      "instructions": "Finish writing the function so that it returns `true` if the object passed to it contains all four names, `Alan`, `Jeff`, `Sarah` and `Ryan` and returns `false` otherwise.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction isEveryoneHere(userObj) {\n  // Only change code below this line\n  \n  // Only change code above this line\n}\n\nconsole.log(isEveryoneHere(users));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction isEveryoneHere(userObj) {\n  return [\n    'Alan',\n    'Jeff',\n    'Sarah',\n    'Ryan'\n  ].every(user => userObj.hasOwnProperty(user));\n}\n\nconsole.log(isEveryoneHere(users));"
        }
      ],
      "tests": [
        {
          "text": "The `users` object should not be accessed directly\n\n```js\n\nassert(__helpers.removeJSComments(code).match(/users/gm).length <= 2)\n\n```\n\nThe `users` object should only contain the keys `Alan`, `Jeff`, `Sarah`, and `Ryan`",
          "testCode": "assert(\n  'Alan' in users &&\n    'Jeff' in users &&\n    'Sarah' in users &&\n    'Ryan' in users &&\n    Object.keys(users).length === 4\n);"
        },
        {
          "text": "The function `isEveryoneHere` should return `true` if `Alan`, `Jeff`, `Sarah`, and `Ryan` are properties on the object passed to it.",
          "testCode": "assert(isEveryoneHere(users) === true);"
        },
        {
          "text": "The function `isEveryoneHere` should return `false` if `Alan` is not a property on the object passed to it.",
          "testCode": "assert(\n  (function () {\n    delete users.Alan;\n    return isEveryoneHere(users);\n  })() === false\n);"
        },
        {
          "text": "The function `isEveryoneHere` should return `false` if `Jeff` is not a property on the object passed to it.",
          "testCode": "assert(\n  (function () {\n    delete users.Jeff;\n    return isEveryoneHere(users);\n  })() === false\n);"
        },
        {
          "text": "The function `isEveryoneHere` should return `false` if `Sarah` is not a property on the object passed to it.",
          "testCode": "assert(\n  (function () {\n    delete users.Sarah;\n    return isEveryoneHere(users);\n  })() === false\n);"
        },
        {
          "text": "The function `isEveryoneHere` should return `false` if `Ryan` is not a property on the object passed to it.",
          "testCode": "assert(\n  (function () {\n    delete users.Ryan;\n    return isEveryoneHere(users);\n  })() === false\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301155,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\check-if-an-object-has-a-property.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7b367417b2b2512b17",
      "title": "Combine Arrays with the Spread Operator",
      "challengeType": 1,
      "dashedName": "combine-arrays-with-the-spread-operator",
      "description": "Another huge advantage of the <dfn>spread</dfn> operator is the ability to combine arrays, or to insert all the elements of one array into another, at any index. With more traditional syntaxes, we can concatenate arrays, but this only allows us to combine arrays at the end of one, and at the start of another. Spread syntax makes the following operation extremely simple:\n\n```js\nlet thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];\n\nlet thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];\n```\n\n`thatArray` would have the value `['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']`.\n\nUsing spread syntax, we have just achieved an operation that would have been more complex and more verbose had we used traditional methods.",
      "instructions": "We have defined a function `spreadOut` that returns the variable `sentence`. Modify the function using the <dfn>spread</dfn> operator so that it returns the array `['learning', 'to', 'code', 'is', 'fun']`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence; // Change this line\n  return sentence;\n}\n\nconsole.log(spreadOut());"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence = ['learning', ...fragment, 'is', 'fun'];\n  return sentence;\n}"
        }
      ],
      "tests": [
        {
          "text": "`spreadOut` should return `[\"learning\", \"to\", \"code\", \"is\", \"fun\"]`",
          "testCode": "assert.deepEqual(spreadOut(), ['learning', 'to', 'code', 'is', 'fun']);"
        },
        {
          "text": "The `spreadOut` function should utilize spread syntax",
          "testCode": "assert.notStrictEqual(spreadOut.toString().search(/[...]/), -1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301156,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\combine-arrays-with-the-spread-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7b367417b2b2512b13",
      "title": "Copy an Array with the Spread Operator",
      "challengeType": 1,
      "dashedName": "copy-an-array-with-the-spread-operator",
      "description": "While `slice()` allows us to be selective about what elements of an array to copy, among several other useful tasks, ES6's new <dfn>spread operator</dfn> allows us to easily copy *all* of an array's elements, in order, with a simple and highly readable syntax. The spread syntax simply looks like this: `...`\n\nIn practice, we can use the spread operator to copy an array like so:\n\n```js\nlet thisArray = [true, true, undefined, false, null];\nlet thatArray = [...thisArray];\n```\n\n`thatArray` equals `[true, true, undefined, false, null]`. `thisArray` remains unchanged and `thatArray` contains the same elements as `thisArray`.",
      "instructions": "We have defined a function, `copyMachine` which takes `arr` (an array) and `num` (a number) as arguments. The function is supposed to return a new array made up of `num` copies of `arr`. We have done most of the work for you, but it doesn't work quite right yet. Modify the function using spread syntax so that it works correctly (hint: another method we have already covered might come in handy here!).",
      "boilerplate": [
        {
          "language": "js",
          "code": "function copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    // Only change code below this line\n\n    // Only change code above this line\n    num--;\n  }\n  return newArr;\n}\n\nconsole.log(copyMachine([true, false, true], 2));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function copyMachine(arr,num){\n    let newArr=[];\n    while(num >=1){\n    newArr.push([...arr]);\n    num--;\n    }\n    return newArr;\n}\nconsole.log(copyMachine([true, false, true], 2));"
        }
      ],
      "tests": [
        {
          "text": "`copyMachine([true, false, true], 2)` should return `[[true, false, true], [true, false, true]]`",
          "testCode": "assert.deepEqual(copyMachine([true, false, true], 2), [\n  [true, false, true],\n  [true, false, true]\n]);"
        },
        {
          "text": "`copyMachine([1, 2, 3], 5)` should return `[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]`",
          "testCode": "assert.deepEqual(copyMachine([1, 2, 3], 5), [\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3]\n]);"
        },
        {
          "text": "`copyMachine([true, true, null], 1)` should return `[[true, true, null]]`",
          "testCode": "assert.deepEqual(copyMachine([true, true, null], 1), [[true, true, null]]);"
        },
        {
          "text": "`copyMachine([\"it works\"], 3)` should return `[[\"it works\"], [\"it works\"], [\"it works\"]]`",
          "testCode": "assert.deepEqual(copyMachine(['it works'], 3), [\n  ['it works'],\n  ['it works'],\n  ['it works']\n]);"
        },
        {
          "text": "The `copyMachine` function should utilize the `spread operator` with array `arr`",
          "testCode": "assert(__helpers.removeJSComments(__helpers.removeJSComments(code)).match(/\\.\\.\\.\\s*arr/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301157,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\copy-an-array-with-the-spread-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7a367417b2b2512b12",
      "title": "Copy Array Items Using slice()",
      "challengeType": 1,
      "dashedName": "copy-array-items-using-slice",
      "description": "The next method we will cover is `slice()`. Rather than modifying an array, `slice()` copies or *extracts* a given number of elements to a new array, leaving the array it is called upon untouched. `slice()` takes only 2 parameters — the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:\n\n```js\nlet weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];\n\nlet todaysWeather = weatherConditions.slice(1, 3);\n```\n\n`todaysWeather` would have the value `['snow', 'sleet']`, while `weatherConditions` would still have `['rain', 'snow', 'sleet', 'hail', 'clear']`.\n\nIn effect, we have created a new array by extracting elements from an existing array.",
      "instructions": "We have defined a function, `forecast`, that takes an array as an argument. Modify the function using `slice()` to extract information from the argument array and return a new array that contains the string elements `warm` and `sunny`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function forecast(arr) {\n  // Only change code below this line\n\n  return arr;\n}\n\n// Only change code above this line\nconsole.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function forecast(arr) {\n  return arr.slice(2,4);\n}"
        }
      ],
      "tests": [
        {
          "text": "`forecast` should return `[\"warm\", \"sunny\"]`",
          "testCode": "assert.deepEqual(\n  forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']),\n  ['warm', 'sunny']\n);"
        },
        {
          "text": "The `forecast` function should utilize the `slice()` method",
          "testCode": "assert(/\\.slice\\(/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301158,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\copy-array-items-using-slice.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7b367417b2b2512b16",
      "title": "Create complex multi-dimensional arrays",
      "challengeType": 1,
      "dashedName": "create-complex-multi-dimensional-arrays",
      "description": "Awesome! You have just learned a ton about arrays! This has been a fairly high level overview, and there is plenty more to learn about working with arrays, much of which you will see in later sections. But before moving on to looking at <dfn>Objects</dfn>, let's take one more look, and see how arrays can become a bit more complex than what we have seen in previous challenges.\n\nOne of the most powerful features when thinking of arrays as data structures, is that arrays can contain, or even be completely made up of other arrays. We have seen arrays that contain arrays in previous challenges, but fairly simple ones. However, arrays can contain an infinite depth of arrays that can contain other arrays, each with their own arbitrary levels of depth, and so on. In this way, an array can very quickly become a very complex data structure, known as a <dfn>multi-dimensional</dfn>, or nested array. Consider the following example:\n\n```js\nlet nestedArray = [\n  ['deep'],\n  [\n    ['deeper'], ['deeper'] \n  ],\n  [\n    [\n      ['deepest'], ['deepest']\n    ],\n    [\n      [\n        ['deepest-est?']\n      ]\n    ]\n  ]\n];\n```\n\nThe `deep` array is nested 2 levels deep. The `deeper` arrays are 3 levels deep. The `deepest` arrays are 4 levels, and the `deepest-est?` is 5.\n\nWhile this example may seem convoluted, this level of complexity is not unheard of, or even unusual, when dealing with large amounts of data. However, we can still very easily access the deepest levels of an array this complex with bracket notation:\n\n```js\nconsole.log(nestedArray[2][1][0][0][0]);\n```\n\nThis logs the string `deepest-est?`. And now that we know where that piece of data is, we can reset it if we need to:\n\n```js\nnestedArray[2][1][0][0][0] = 'deeper still';\n\nconsole.log(nestedArray[2][1][0][0][0]);\n```\n\nNow it logs `deeper still`.",
      "instructions": "We have defined a variable, `myNestedArray`, set equal to an array. Modify `myNestedArray`, using any combination of <dfn>strings</dfn>, <dfn>numbers</dfn>, and <dfn>booleans</dfn> for data elements, so that it has exactly five levels of depth (remember, the outer-most array is level 1). Somewhere on the third level, include the string `deep`, on the fourth level, include the string `deeper`, and on the fifth level, include the string `deepest`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myNestedArray = [\n  // Only change code below this line\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  ['loop', 'shift', 6, 7, 1000, 'method'],\n  ['concat', false, true, 'spread', 'array'],\n  ['mutate', 1327.98, 'splice', 'slice', 'push'],\n  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n  // Only change code above this line\n];"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myNestedArray = [\n  ['unshift', ['deep', ['deeper', ['deepest']]],false, 1, 2, 3, 'complex', 'nested'],\n  ['loop', 'shift', 6, 7, 1000, 'method'],\n  ['concat', false, true, 'spread', 'array'],\n  ['mutate', 1327.98, 'splice', 'slice', 'push'],\n  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n];"
        }
      ],
      "tests": [
        {
          "text": "`myNestedArray` should contain only numbers, booleans, and strings as data elements",
          "testCode": "assert.strictEqual(\n  (function (arr) {\n    let flattened = (function flatten(arr) {\n      const flat = [].concat(...arr);\n      return flat.some(Array.isArray) ? flatten(flat) : flat;\n    })(arr);\n    for (let i = 0; i < flattened.length; i++) {\n      if (\n        typeof flattened[i] !== 'number' &&\n        typeof flattened[i] !== 'string' &&\n        typeof flattened[i] !== 'boolean'\n      ) {\n        return false;\n      }\n    }\n    return true;\n  })(myNestedArray),\n  true\n);"
        },
        {
          "text": "`myNestedArray` should have exactly 5 levels of depth",
          "testCode": "assert.strictEqual(\n  (function (arr) {\n    let depth = 0;\n    function arrayDepth(array, i, d) {\n      if (Array.isArray(array[i])) {\n        arrayDepth(array[i], 0, d + 1);\n      } else {\n        depth = d > depth ? d : depth;\n      }\n      if (i < array.length) {\n        arrayDepth(array, i + 1, d);\n      }\n    }\n    arrayDepth(arr, 0, 0);\n    return depth;\n  })(myNestedArray),\n  4\n);"
        },
        {
          "text": "`myNestedArray` should contain exactly one occurrence of the string `deep` on an array nested 3 levels deep",
          "testCode": "assert(\n  (function howDeep(array, target, depth = 0) {\n    return array.reduce((combined, current) => {\n      if (Array.isArray(current)) {\n        return combined.concat(howDeep(current, target, depth + 1));\n      } else if (current === target) {\n        return combined.concat(depth);\n      } else {\n        return combined;\n      }\n    }, []);\n  })(myNestedArray, 'deep').length === 1 &&\n    (function howDeep(array, target, depth = 0) {\n      return array.reduce((combined, current) => {\n        if (Array.isArray(current)) {\n          return combined.concat(howDeep(current, target, depth + 1));\n        } else if (current === target) {\n          return combined.concat(depth);\n        } else {\n          return combined;\n        }\n      }, []);\n    })(myNestedArray, 'deep')[0] === 2\n);"
        },
        {
          "text": "`myNestedArray` should contain exactly one occurrence of the string `deeper` on an array nested 4 levels deep",
          "testCode": "assert(\n  (function howDeep(array, target, depth = 0) {\n    return array.reduce((combined, current) => {\n      if (Array.isArray(current)) {\n        return combined.concat(howDeep(current, target, depth + 1));\n      } else if (current === target) {\n        return combined.concat(depth);\n      } else {\n        return combined;\n      }\n    }, []);\n  })(myNestedArray, 'deeper').length === 1 &&\n    (function howDeep(array, target, depth = 0) {\n      return array.reduce((combined, current) => {\n        if (Array.isArray(current)) {\n          return combined.concat(howDeep(current, target, depth + 1));\n        } else if (current === target) {\n          return combined.concat(depth);\n        } else {\n          return combined;\n        }\n      }, []);\n    })(myNestedArray, 'deeper')[0] === 3\n);"
        },
        {
          "text": "`myNestedArray` should contain exactly one occurrence of the string `deepest` on an array nested 5 levels deep",
          "testCode": "assert(\n  (function howDeep(array, target, depth = 0) {\n    return array.reduce((combined, current) => {\n      if (Array.isArray(current)) {\n        return combined.concat(howDeep(current, target, depth + 1));\n      } else if (current === target) {\n        return combined.concat(depth);\n      } else {\n        return combined;\n      }\n    }, []);\n  })(myNestedArray, 'deepest').length === 1 &&\n    (function howDeep(array, target, depth = 0) {\n      return array.reduce((combined, current) => {\n        if (Array.isArray(current)) {\n          return combined.concat(howDeep(current, target, depth + 1));\n        } else if (current === target) {\n          return combined.concat(depth);\n        } else {\n          return combined;\n        }\n      }, []);\n    })(myNestedArray, 'deepest')[0] === 4\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301159,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\create-complex-multi-dimensional-arrays.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7d367417b2b2512b1e",
      "title": "Generate an Array of All Object Keys with Object.keys()",
      "challengeType": 1,
      "dashedName": "generate-an-array-of-all-object-keys-with-object-keys",
      "description": "We can also generate an array which contains all the keys stored in an object with the `Object.keys()` method. This method takes an object as the argument and returns an array of strings representing each property in the object. Again, there will be no specific order to the entries in the array.",
      "instructions": "Finish writing the `getArrayOfUsers` function so that it returns an array containing all the properties in the object it receives as an argument.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction getArrayOfUsers(obj) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(getArrayOfUsers(users));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction getArrayOfUsers(obj) {\n  return Object.keys(obj);\n}\n\nconsole.log(getArrayOfUsers(users));"
        }
      ],
      "tests": [
        {
          "text": "The `users` object should only contain the keys `Alan`, `Jeff`, `Sarah`, and `Ryan`",
          "testCode": "assert(\n  'Alan' in users &&\n    'Jeff' in users &&\n    'Sarah' in users &&\n    'Ryan' in users &&\n    Object.keys(users).length === 4\n);"
        },
        {
          "text": "The `getArrayOfUsers` function should return an array which contains all the keys in the `users` object",
          "testCode": "assert(\n  (function () {\n    users.Sam = {};\n    users.Lewis = {};\n    let R = getArrayOfUsers(users);\n    return (\n      R.indexOf('Alan') !== -1 &&\n      R.indexOf('Jeff') !== -1 &&\n      R.indexOf('Sarah') !== -1 &&\n      R.indexOf('Ryan') !== -1 &&\n      R.indexOf('Sam') !== -1 &&\n      R.indexOf('Lewis') !== -1\n    );\n  })() === true\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301160,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\generate-an-array-of-all-object-keys-with-object.keys.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7b367417b2b2512b15",
      "title": "Iterate Through All an Array's Items Using For Loops",
      "challengeType": 1,
      "dashedName": "iterate-through-all-an-arrays-items-using-for-loops",
      "description": "Sometimes when working with arrays, it is very handy to be able to iterate through each item to find one or more elements that we might need, or to manipulate an array based on which data items meet a certain set of criteria. JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results (such as `every()`, `forEach()`, `map()`, etc.), however the technique which is most flexible and offers us the greatest amount of control is a simple `for` loop.\n\nConsider the following:\n\n```js\nfunction greaterThanTen(arr) {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 10) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}\n\ngreaterThanTen([2, 12, 8, 14, 80, 0, 1]);\n```\n\nUsing a `for` loop, this function iterates through and accesses each element of the array, and subjects it to a simple test that we have created. In this way, we have easily and programmatically determined which data items are greater than `10`, and returned a new array, `[12, 14, 80]`, containing those items.",
      "instructions": "We have defined a function, `filteredArray`, which takes `arr`, a nested array, and `elem` as arguments, and returns a new array. `elem` represents an element that may or may not be present on one or more of the arrays nested within `arr`. Modify the function, using a `for` loop, to return a filtered version of the passed array such that any array nested within `arr` containing `elem` has been removed.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function filteredArray(arr, elem) {\n  let newArr = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArr;\n}\n\nconsole.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function filteredArray(arr, elem) {\n  let newArr = [];\n  for (let i = 0; i<arr.length; i++) {\n    if (arr[i].indexOf(elem) < 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}"
        }
      ],
      "tests": [
        {
          "text": "`filteredArray([[10, 8, 3], [14, 6, 23], [3, 18, 6]], 18)` should return `[[10, 8, 3], [14, 6, 23]]`",
          "testCode": "assert.deepEqual(\n  filteredArray(\n    [\n      [10, 8, 3],\n      [14, 6, 23],\n      [3, 18, 6]\n    ],\n    18\n  ),\n  [\n    [10, 8, 3],\n    [14, 6, 23]\n  ]\n);"
        },
        {
          "text": "`filteredArray([[\"trumpets\", 2], [\"flutes\", 4], [\"saxophones\", 2]], 2)` should return `[[\"flutes\", 4]]`",
          "testCode": "assert.deepEqual(\n  filteredArray(\n    [\n      ['trumpets', 2],\n      ['flutes', 4],\n      ['saxophones', 2]\n    ],\n    2\n  ),\n  [['flutes', 4]]\n);"
        },
        {
          "text": "`filteredArray([[\"amy\", \"beth\", \"sam\"], [\"dave\", \"sean\", \"peter\"]], \"peter\")` should return `[[\"amy\", \"beth\", \"sam\"]]`",
          "testCode": "assert.deepEqual(\n  filteredArray(\n    [\n      ['amy', 'beth', 'sam'],\n      ['dave', 'sean', 'peter']\n    ],\n    'peter'\n  ),\n  [['amy', 'beth', 'sam']]\n);"
        },
        {
          "text": "`filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)` should return `[]`",
          "testCode": "assert.deepEqual(\n  filteredArray(\n    [\n      [3, 2, 3],\n      [1, 6, 3],\n      [3, 13, 26],\n      [19, 3, 9]\n    ],\n    3\n  ),\n  []\n);"
        },
        {
          "text": "The `filteredArray` function should utilize a `for` loop",
          "testCode": "assert.notStrictEqual(filteredArray.toString().search(/for/), -1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301161,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\iterate-through-all-an-arrays-items-using-for-loops.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7d367417b2b2512b1d",
      "title": "Iterate Through the Keys of an Object with a for...in Statement",
      "challengeType": 1,
      "dashedName": "iterate-through-the-keys-of-an-object-with-a-for",
      "description": "Sometimes you need to iterate through all the keys within an object. You can use a <dfn>for...in</dfn> loop to do this. The for...in loop looks like:\n\n```javascript\nconst refrigerator = {\n  'milk': 1,\n  'eggs': 12,\n};\n\nfor (const food in refrigerator) {\n  console.log(food, refrigerator[food]);\n}\n```\n\nThis code logs `milk 1`  and `eggs 12`, with each key-value pair on its own line.\n\nWe defined the variable `food` in the loop head and this variable was set to each of the object's keys on each iteration, resulting in each food's name being printed to the console.\n\n**NOTE:** Objects do not maintain an ordering to stored keys like arrays do; thus a key's position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key.",
      "instructions": "We've defined a function `countOnline` which accepts one argument, `allUsers`. Use a <dfn>for...in</dfn> statement inside this function to loop through the `allUsers` object and return the number of users whose `online` property is set to `true`. An example of an object which could be passed to `countOnline` is shown below. Each user will have an `online` property set to either `true` or `false`.\n\n```js\n{\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: true\n  },\n  Sarah: {\n    online: false\n  }\n}\n```",
      "boilerplate": [
        {
          "language": "js",
          "code": "const users = {\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: true\n  },\n  Sarah: {\n    online: false\n  }\n}\n\nfunction countOnline(allUsers) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(countOnline(users));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function countOnline(allUsers) {\n  let numOnline = 0;\n  for(const user in allUsers){\n    if(allUsers[user].online) {\n      numOnline++;\n    }\n  }\n  return numOnline;\n}"
        }
      ],
      "tests": [
        {
          "text": "The function `countOnline` should use a `for in` statement to iterate through the object keys of the object passed to it.",
          "testCode": "assert.match(\n  __helpers.removeJSComments(code),\n    /for\\s*\\(\\s*(var|let|const)\\s+[a-zA-Z_$]\\w*\\s+in\\s+[a-zA-Z_$]\\w*\\s*\\)/\n);"
        },
        {
          "text": "The function `countOnline` should return `1` when the object `{ Alan: { online: false }, Jeff: { online: true }, Sarah: { online: false } }` is passed to it",
          "testCode": "const usersObj1 = {\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: true\n  },\n  Sarah: {\n    online: false\n  }\n}\nassert.equal(countOnline(usersObj1), 1);"
        },
        {
          "text": "The function `countOnline` should return `2` when the object `{ Alan: { online: true }, Jeff: { online: false }, Sarah: { online: true } }` is passed to it",
          "testCode": "const usersObj2 = {\n  Alan: {\n    online: true\n  },\n  Jeff: {\n    online: false\n  },\n  Sarah: {\n    online: true\n  }\n}\nassert.equal(countOnline(usersObj2), 2);"
        },
        {
          "text": "The function `countOnline` should return `0` when the object `{ Alan: { online: false }, Jeff: { online: false }, Sarah: { online: false } }` is passed to it",
          "testCode": "const usersObj3 = {\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: false\n  },\n  Sarah: {\n    online: false\n  }\n}\nassert.equal(countOnline(usersObj3), 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301162,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\iterate-through-the-keys-of-an-object-with-a-for...in-statement.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7d367417b2b2512b1f",
      "title": "Modify an Array Stored in an Object",
      "challengeType": 1,
      "dashedName": "modify-an-array-stored-in-an-object",
      "description": "Now you've seen all the basic operations for JavaScript objects. You can add, modify, and remove key-value pairs, check if keys exist, and iterate over all the keys in an object. As you continue learning JavaScript you will see even more versatile applications of objects. Additionally, the Data Structures lessons located in the Coding Interview Prep section of the curriculum also cover the ES6 <dfn>Map</dfn> and <dfn>Set</dfn> objects, both of which are similar to ordinary objects but provide some additional features. Now that you've learned the basics of arrays and objects, you're fully prepared to begin tackling more complex problems using JavaScript!",
      "instructions": "Take a look at the object we've provided in the code editor. The `user` object contains three keys. The `data` key contains five keys, one of which contains an array of `friends`. From this, you can see how flexible objects are as data structures. We've started writing a function `addFriend`. Finish writing it so that it takes a `user` object and adds the name of the `friend` argument to the array stored in `user.data.friends` and returns that array.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(addFriend(user, 'Pete'));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return userObj.data.friends;\n}"
        }
      ],
      "tests": [
        {
          "text": "The `user` object should have `name`, `age`, and `data` keys.",
          "testCode": "assert('name' in user && 'age' in user && 'data' in user);"
        },
        {
          "text": "The `addFriend` function should accept a `user` object and a `friend` string as arguments and add the friend to the array of `friends` in the `user` object.",
          "testCode": "assert(\n  (function () {\n    let L1 = user.data.friends.length;\n    addFriend(user, 'Sean');\n    let L2 = user.data.friends.length;\n    return L2 === L1 + 1;\n  })()\n);"
        },
        {
          "text": "`addFriend(user, \"Pete\")` should return `[\"Sam\", \"Kira\", \"Tomo\", \"Pete\"]`.",
          "testCode": "assert.deepEqual(\n  (function () {\n    delete user.data.friends;\n    user.data.friends = ['Sam', 'Kira', 'Tomo'];\n    return addFriend(user, 'Pete');\n  })(),\n  ['Sam', 'Kira', 'Tomo', 'Pete']\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301163,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\modify-an-array-stored-in-an-object.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7c367417b2b2512b19",
      "title": "Modify an Object Nested Within an Object",
      "challengeType": 1,
      "dashedName": "modify-an-object-nested-within-an-object",
      "description": "Now let's take a look at a slightly more complex object. Object properties can be nested to an arbitrary depth, and their values can be any type of data supported by JavaScript, including arrays and even other objects. Consider the following:\n\n```js\nlet nestedObject = {\n  id: 28802695164,\n  date: 'December 31, 2016',\n  data: {\n    totalUsers: 99,\n    online: 80,\n    onlineStatus: {\n      active: 67,\n      away: 13,\n      busy: 8\n    }\n  }\n};\n```\n\n`nestedObject` has three properties: `id` (value is a number), `date` (value is a string), and `data` (value is an object with its nested structure). While structures can quickly become complex, we can still use the same notations to access the information we need. To assign the value `10` to the `busy` property of the nested `onlineStatus` object, we use dot notation to reference the property:\n\n```js\nnestedObject.data.onlineStatus.busy = 10;\n```",
      "instructions": "Here we've defined an object `userActivity`, which includes another object nested within it. Set the value of the `online` key to `45`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(userActivity);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\n\nuserActivity.data.online = 45;"
        }
      ],
      "tests": [
        {
          "text": "`userActivity` should have `id`, `date` and `data` properties.",
          "testCode": "assert(\n  'id' in userActivity && 'date' in userActivity && 'data' in userActivity\n);"
        },
        {
          "text": "`userActivity` should have a `data` key set to an object with keys `totalUsers` and `online`.",
          "testCode": "assert('totalUsers' in userActivity.data && 'online' in userActivity.data);"
        },
        {
          "text": "The `online` property nested in the `data` key of `userActivity` should be set to `45`",
          "testCode": "assert(userActivity.data.online === 45);"
        },
        {
          "text": "The `online` property should be set using dot or bracket notation.",
          "testCode": "assert.strictEqual(__helpers.removeJSComments(code).search(/online: 45/), -1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301164,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\modify-an-object-nested-within-an-object.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d78b2367417b2b2512b0f",
      "title": "Remove Items from an Array with pop() and shift()",
      "challengeType": 1,
      "dashedName": "remove-items-from-an-array-with-pop-and-shift",
      "description": "Both `push()` and `unshift()` have corresponding methods that are nearly functional opposites: `pop()` and `shift()`. As you may have guessed by now, instead of adding, `pop()` *removes* an element from the end of an array, while `shift()` removes an element from the beginning. The key difference between `pop()` and `shift()` and their cousins `push()` and `unshift()`, is that neither method takes parameters, and each only allows an array to be modified by a single element at a time.\n\nLet's take a look:\n\n```js\nlet greetings = ['whats up?', 'hello', 'see ya!'];\n\ngreetings.pop();\n```\n\n`greetings` would have the value `['whats up?', 'hello']`.\n\n```js\ngreetings.shift();\n```\n\n`greetings` would have the value `['hello']`.\n\nWe can also return the value of the removed element with either method like this:\n\n```js\nlet popped = greetings.pop();\n```\n\n`greetings` would have the value `[]`, and `popped` would have the value `hello`.",
      "instructions": "We have defined a function, `popShift`, which takes an array as an argument and returns a new array. Modify the function, using `pop()` and `shift()`, to remove the first and last elements of the argument array, and assign the removed elements to their corresponding variables, so that the returned array contains their values.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function popShift(arr) {\n  let popped; // Change this line\n  let shifted; // Change this line\n  return [shifted, popped];\n}\n\nconsole.log(popShift(['challenge', 'is', 'not', 'complete']));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function popShift(arr) {\n  let popped = arr.pop(); // Change this line\n  let shifted = arr.shift(); // Change this line\n  return [shifted, popped];\n}"
        }
      ],
      "tests": [
        {
          "text": "`popShift([\"challenge\", \"is\", \"not\", \"complete\"])` should return `[\"challenge\", \"complete\"]`",
          "testCode": "assert.deepEqual(popShift(['challenge', 'is', 'not', 'complete']), [\n  'challenge',\n  'complete'\n]);"
        },
        {
          "text": "The `popShift` function should utilize the `pop()` method",
          "testCode": "assert.notStrictEqual(popShift.toString().search(/\\.pop\\(/), -1);"
        },
        {
          "text": "The `popShift` function should utilize the `shift()` method",
          "testCode": "assert.notStrictEqual(popShift.toString().search(/\\.shift\\(/), -1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301165,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\remove-items-from-an-array-with-pop-and-shift.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d78b2367417b2b2512b10",
      "title": "Remove Items Using splice()",
      "challengeType": 1,
      "dashedName": "remove-items-using-splice",
      "description": "Ok, so we've learned how to remove elements from the beginning and end of arrays using `shift()` and `pop()`, but what if we want to remove an element from somewhere in the middle? Or remove more than one element at once? Well, that's where `splice()` comes in. `splice()` allows us to do just that: **remove any number of consecutive elements** from anywhere in an array.\n\n`splice()` can take up to 3 parameters, but for now, we'll focus on just the first 2. The first two parameters of `splice()` are integers which represent indexes, or positions, of items in the array that `splice()` is being called upon. And remember, arrays are *zero-indexed*, so to indicate the first element of an array, we would use `0`. `splice()`'s first parameter represents the index on the array from which to begin removing elements, while the second parameter indicates the number of elements to delete. For example:\n\n```js\nlet array = ['today', 'was', 'not', 'so', 'great'];\n\narray.splice(2, 2);\n```\n\nHere we remove 2 elements, beginning with the third element (at index 2). `array` would have the value `['today', 'was', 'great']`.\n\n`splice()` not only modifies the array it's being called on, but it also returns a new array containing the value of the removed elements:\n\n```js\nlet array = ['I', 'am', 'feeling', 'really', 'happy'];\n\nlet newArray = array.splice(3, 2);\n```\n\n`newArray` has the value `['really', 'happy']`.",
      "instructions": "We've initialized an array `arr`. Use `splice()` to remove elements from `arr`, so that it only contains elements that sum to the value of `10`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const arr = [2, 4, 5, 1, 7, 5, 2, 1];\n// Only change code below this line\n\n// Only change code above this line\nconsole.log(arr);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const arr = [2, 4, 5, 1, 7, 5, 2, 1];\narr.splice(1, 4);"
        }
      ],
      "tests": [
        {
          "text": "You should not change the original line of `const arr = [2, 4, 5, 1, 7, 5, 2, 1];`.",
          "testCode": "assert(\n  __helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/constarr=\\[2,4,5,1,7,5,2,1\\];?/)\n);"
        },
        {
          "text": "`arr` should only contain elements that sum to `10`.",
          "testCode": "assert.strictEqual(\n  arr.reduce((a, b) => a + b),\n  10\n);"
        },
        {
          "text": "Your code should utilize the `splice()` method on `arr`.",
          "testCode": "assert(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/arr\\.splice\\(/));"
        },
        {
          "text": "The splice should only remove elements from `arr` and not add any additional elements to `arr`.",
          "testCode": "assert(\n  !__helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/arr\\.splice\\(\\d+,\\d+,\\d+.*\\)/g)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301166,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\remove-items-using-splice.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7e367417b2b2512b20",
      "title": "Use an Array to Store a Collection of Data",
      "challengeType": 1,
      "dashedName": "use-an-array-to-store-a-collection-of-data",
      "description": "The below is an example of the simplest implementation of an array data structure. This is known as a <dfn>one-dimensional array</dfn>, meaning it only has one level, or that it does not have any other arrays nested within it. Notice it contains <dfn>booleans</dfn>, <dfn>strings</dfn>, and <dfn>numbers</dfn>, among other valid JavaScript data types:\n\n```js\nlet simpleArray = ['one', 2, 'three', true, false, undefined, null];\nconsole.log(simpleArray.length);\n```\n\nThe `console.log` call displays `7`.\n\nAll arrays have a length property, which as shown above, can be very easily accessed with the syntax `Array.length`. A more complex implementation of an array can be seen below. This is known as a <dfn>multi-dimensional array</dfn>, or an array that contains other arrays. Notice that this array also contains JavaScript <dfn>objects</dfn>, which we will examine very closely in our next section, but for now, all you need to know is that arrays are also capable of storing complex objects.\n\n```js\nlet complexArray = [\n  [\n    {\n      one: 1,\n      two: 2\n    },\n    {\n      three: 3,\n      four: 4\n    }\n  ],\n  [\n    {\n      a: \"a\",\n      b: \"b\"\n    },\n    {\n      c: \"c\",\n      d: \"d\"\n    }\n  ]\n];\n```",
      "instructions": "We have defined a variable called `yourArray`. Complete the statement by assigning an array of at least 5 elements in length to the `yourArray` variable. Your array should contain at least one <dfn>string</dfn>, one <dfn>number</dfn>, and one <dfn>boolean</dfn>.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let yourArray; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let yourArray = ['a string', 100, true, ['one', 2], 'another string'];"
        }
      ],
      "tests": [
        {
          "text": "`yourArray` should be an array.",
          "testCode": "assert.strictEqual(Array.isArray(yourArray), true);"
        },
        {
          "text": "`yourArray` should be at least 5 elements long.",
          "testCode": "assert.isAtLeast(yourArray.length, 5);"
        },
        {
          "text": "`yourArray` should contain at least one `boolean`.",
          "testCode": "assert(yourArray.filter((el) => typeof el === 'boolean').length >= 1);"
        },
        {
          "text": "`yourArray` should contain at least one `number`.",
          "testCode": "assert(yourArray.filter((el) => typeof el === 'number').length >= 1);"
        },
        {
          "text": "`yourArray` should contain at least one `string`.",
          "testCode": "assert(yourArray.filter((el) => typeof el === 'string').length >= 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301167,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\use-an-array-to-store-a-collection-of-data.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "587d7b7c367417b2b2512b1b",
      "title": "Use the delete Keyword to Remove Object Properties",
      "challengeType": 1,
      "dashedName": "use-the-delete-keyword-to-remove-object-properties",
      "description": "Now you know what objects are and their basic features and advantages. In short, they are key-value stores which provide a flexible, intuitive way to structure data, ***and***, they provide very fast lookup time. Throughout the rest of these challenges, we will describe several common operations you can perform on objects so you can become comfortable applying these useful data structures in your programs.\n\nIn earlier challenges, we have both added to and modified an object's key-value pairs. Here we will see how we can *remove* a key-value pair from an object.\n\nLet's revisit our `foods` object example one last time. If we wanted to remove the `apples` key, we can remove it by using the `delete` keyword like this:\n\n```js\ndelete foods.apples;\n```",
      "instructions": "Use the delete keyword to remove the `oranges`, `plums`, and `strawberries` keys from the `foods` object.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(foods);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\ndelete foods.oranges;\ndelete foods.plums;\ndelete foods.strawberries;\n\nconsole.log(foods);"
        }
      ],
      "tests": [
        {
          "text": "The `foods` object should only have three keys: `apples`, `grapes`, and `bananas`.",
          "testCode": "assert(\n  !foods.hasOwnProperty('oranges') &&\n    !foods.hasOwnProperty('plums') &&\n    !foods.hasOwnProperty('strawberries') &&\n    Object.keys(foods).length === 3\n);"
        },
        {
          "text": "The `oranges`, `plums`, and `strawberries` keys should be removed using `delete`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).search(/oranges:/) !== -1 &&\n    __helpers.removeJSComments(code).search(/plums:/) !== -1 &&\n    __helpers.removeJSComments(code).search(/strawberries:/) !== -1\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301168,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-data-structures\\use-the-delete-keyword-to-remove-object-properties.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-data-structures",
        "name": "Basic Data Structures"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392ca",
      "title": "Access Array Data with Indexes",
      "challengeType": 1,
      "dashedName": "access-array-data-with-indexes",
      "description": "We can access the data inside arrays using <dfn>indexes</dfn>.\n\nArray indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use <dfn>zero-based</dfn> indexing, so the first element in an array has an index of `0`.\n\n<br>\n\n**Example**\n\n```js\nconst array = [50, 60, 70];\nconsole.log(array[0]);\nconst data = array[1];\n```\n\nThe `console.log(array[0])` prints `50`, and `data` has the value `60`.",
      "instructions": "Create a variable called `myData` and set it to equal the first value of `myArray` using bracket notation.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myArray = [50, 60, 70];"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [50, 60, 70];\nconst myData = myArray[0];"
        }
      ],
      "tests": [
        {
          "text": "The variable `myData` should equal the first value of `myArray`.",
          "testCode": "assert(\n  (function () {\n    if (\n      typeof myArray !== 'undefined' &&\n      typeof myData !== 'undefined' &&\n      myArray[0] === myData\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"
        },
        {
          "text": "The data in variable `myArray` should be accessed using bracket notation.",
          "testCode": "assert(\n  (function () {\n    if (__helpers.removeJSComments(code).match(/\\s*=\\s*myArray\\[0\\]/g)) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16158,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\access-array-data-with-indexes.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myArray !== \"undefined\" && typeof myData !== \"undefined\"){(function(y,z){return 'myArray = ' + JSON.stringify(y) + ', myData = ' + JSON.stringify(z);})(myArray, myData);}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56592a60ddddeae28f7aa8e1",
      "title": "Access Multi-Dimensional Arrays With Indexes",
      "challengeType": 1,
      "dashedName": "access-multi-dimensional-arrays-with-indexes",
      "description": "One way to think of a <dfn>multi-dimensional</dfn> array, is as an *array of arrays*. When you use brackets to access your array, the first set of brackets refers to the entries in the outermost (the first level) array, and each additional pair of brackets refers to the next level of entries inside.\n\n**Example**\n\n```js\nconst arr = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [[10, 11, 12], 13, 14]\n];\n\nconst subarray = arr[3];\nconst nestedSubarray = arr[3][0];\nconst element = arr[3][0][1];\n```\n\nIn this example, `subarray` has the value `[[10, 11, 12], 13, 14]`,\n`nestedSubarray` has the value `[10, 11, 12]`,   and `element` has the value `11` .\n\n**Note:** There shouldn't be any spaces between the array name and the square brackets, like `array [0][0]` and even this `array [0] [0]` is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.",
      "instructions": "Using bracket notation select an element from `myArray` such that `myData` is equal to `8`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myArray = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [[10, 11, 12], 13, 14],\n];\n\nconst myData = myArray[0][0];"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [[10, 11, 12], 13, 14]];\nconst myData = myArray[2][1];"
        }
      ],
      "tests": [
        {
          "text": "`myData` should be equal to `8`.",
          "testCode": "assert(myData === 8);"
        },
        {
          "text": "You should be using bracket notation to read the correct value from `myArray`.",
          "testCode": "assert(/myData=myArray\\[2\\]\\[1\\]/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code))));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16159,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\access-multi-dimensional-arrays-with-indexes.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myArray !== \"undefined\"){(function(){return \"myData: \" + myData + \" myArray: \" + JSON.stringify(myArray);})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cd",
      "title": "Accessing Nested Arrays",
      "challengeType": 1,
      "dashedName": "accessing-nested-arrays",
      "description": "As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, array bracket notation can be chained to access nested arrays.\n\nHere is an example of how to access a nested array:\n\n```js\nconst ourPets = [\n  {\n    animalType: \"cat\",\n    names: [\n      \"Meowzer\",\n      \"Fluffy\",\n      \"Kit-Cat\"\n    ]\n  },\n  {\n    animalType: \"dog\",\n    names: [\n      \"Spot\",\n      \"Bowser\",\n      \"Frankie\"\n    ]\n  }\n];\n\nourPets[0].names[1];\nourPets[1].names[0];\n```\n\n`ourPets[0].names[1]` would be the string `Fluffy`, and `ourPets[1].names[0]` would be the string `Spot`.",
      "instructions": "Using dot and bracket notation, set the variable `secondTree` to the second element in the `list` array from the second object in the `myPlants` array.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = \"\";"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = myPlants[1].list[1];"
        }
      ],
      "tests": [
        {
          "text": "`secondTree` should equal the string `pine`.",
          "testCode": "assert(secondTree === 'pine');"
        },
        {
          "text": "Your code should use dot and bracket notation to access `myPlants`.",
          "testCode": "assert(/=\\s*myPlants\\[1\\].list\\[1\\]/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16160,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\accessing-nested-arrays.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(x) {\n  if(typeof x != 'undefined') {\n    return \"secondTree = \" + x;\n  }\n  return \"secondTree is undefined\";\n})(secondTree);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cc",
      "title": "Accessing Nested Objects",
      "challengeType": 1,
      "dashedName": "accessing-nested-objects",
      "description": "The sub-properties of objects can be accessed by chaining together the dot or bracket notation.\n\nHere is a nested object:\n\n```js\nconst ourStorage = {\n  \"desk\": {\n    \"drawer\": \"stapler\"\n  },\n  \"cabinet\": {\n    \"top drawer\": { \n      \"folder1\": \"a file\",\n      \"folder2\": \"secrets\"\n    },\n    \"bottom drawer\": \"soda\"\n  }\n};\n\nourStorage.cabinet[\"top drawer\"].folder2;\nourStorage.desk.drawer;\n```\n\n`ourStorage.cabinet[\"top drawer\"].folder2` would be the string `secrets`, and `ourStorage.desk.drawer` would be the string `stapler`.",
      "instructions": "Access the `myStorage` object and assign the contents of the `glove box` property to the `gloveBoxContents` variable. Use dot notation for all properties where possible, otherwise use bracket notation.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myStorage = {\n  \"car\": {\n    \"inside\": {\n      \"glove box\": \"maps\",\n      \"passenger seat\": \"crumbs\"\n     },\n    \"outside\": {\n      \"trunk\": \"jack\"\n    }\n  }\n};\n\nconst gloveBoxContents = undefined;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myStorage = {\n  \"car\":{\n    \"inside\":{\n      \"glove box\":\"maps\",\n      \"passenger seat\":\"crumbs\"\n    },\n    \"outside\":{\n      \"trunk\":\"jack\"\n    }\n  }\n};\nconst gloveBoxContents = myStorage.car.inside[\"glove box\"];"
        }
      ],
      "tests": [
        {
          "text": "`gloveBoxContents` should equal the string `maps`.",
          "testCode": "assert(gloveBoxContents === 'maps');"
        },
        {
          "text": "Your code should use dot notation, where possible, to access `myStorage`.",
          "testCode": "assert.match(code, /myStorage\\.car\\.inside/);"
        },
        {
          "text": "`gloveBoxContents` should still be declared with `const`.",
          "testCode": "assert.match(code, /const\\s+gloveBoxContents\\s*=/);"
        },
        {
          "text": "You should not change the `myStorage` object.",
          "testCode": "const expectedMyStorage = {\n  \"car\":{\n    \"inside\":{\n      \"glove box\":\"maps\",\n      \"passenger seat\":\"crumbs\"\n    },\n    \"outside\":{\n      \"trunk\":\"jack\"\n    }\n  }\n};\nassert.deepStrictEqual(myStorage, expectedMyStorage);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16161,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\accessing-nested-objects.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(x) { \n  if(typeof x != 'undefined') { \n    return \"gloveBoxContents = \" + x;\n  }\n  return \"gloveBoxContents is undefined\";\n})(gloveBoxContents);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c8",
      "title": "Accessing Object Properties with Bracket Notation",
      "challengeType": 1,
      "dashedName": "accessing-object-properties-with-bracket-notation",
      "description": "The second way to access the properties of an object is bracket notation (`[]`). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.\n\nHowever, you can still use bracket notation on object properties without spaces.\n\nHere is a sample of using bracket notation to read an object's property:\n\n```js\nconst myObj = {\n  \"Space Name\": \"Kirk\",\n  \"More Space\": \"Spock\",\n  \"NoSpace\": \"USS Enterprise\"\n};\n\nmyObj[\"Space Name\"];\nmyObj['More Space'];\nmyObj[\"NoSpace\"];\n```\n\n`myObj[\"Space Name\"]` would be the string `Kirk`, `myObj['More Space']` would be the string `Spock`, and `myObj[\"NoSpace\"]` would be the string `USS Enterprise`.\n\nNote that property names with spaces in them must be in quotes (single or double).",
      "instructions": "Read the values of the properties `an entree` and `the drink` of `testObj` using bracket notation and assign them to `entreeValue` and `drinkValue` respectively.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\n\n// Only change code below this line\nconst entreeValue = testObj;   // Change this line\nconst drinkValue = testObj;    // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\nconst entreeValue = testObj[\"an entree\"];\nconst drinkValue = testObj['the drink'];"
        }
      ],
      "tests": [
        {
          "text": "`entreeValue` should be a string",
          "testCode": "assert(typeof entreeValue === 'string');"
        },
        {
          "text": "The value of `entreeValue` should be the string `hamburger`",
          "testCode": "assert(entreeValue === 'hamburger');"
        },
        {
          "text": "`drinkValue` should be a string",
          "testCode": "assert(typeof drinkValue === 'string');"
        },
        {
          "text": "The value of `drinkValue` should be the string `water`",
          "testCode": "assert(drinkValue === 'water');"
        },
        {
          "text": "You should use bracket notation twice",
          "testCode": "assert(__helpers.removeJSComments(code).match(/testObj\\s*?\\[('|\")[^'\"]+\\1\\]/g).length > 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16163,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\accessing-object-properties-with-bracket-notation.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a,b) { return \"entreeValue = '\" + a + \"', drinkValue = '\" + b + \"'\"; })(entreeValue,drinkValue);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c7",
      "title": "Accessing Object Properties with Dot Notation",
      "challengeType": 1,
      "dashedName": "accessing-object-properties-with-dot-notation",
      "description": "There are two ways to access the properties of an object: dot notation (`.`) and bracket notation (`[]`), similar to an array.\n\nDot notation is what you use when you know the name of the property you're trying to access ahead of time.\n\nHere is a sample of using dot notation (`.`) to read an object's property:\n\n```js\nconst myObj = {\n  prop1: \"val1\",\n  prop2: \"val2\"\n};\n\nconst prop1val = myObj.prop1;\nconst prop2val = myObj.prop2;\n```\n\n`prop1val` would have a value of the string `val1`, and `prop2val` would have a value of the string `val2`.",
      "instructions": "Read in the property values of `testObj` using dot notation. Set the variable `hatValue` equal to the object's property `hat` and set the variable `shirtValue` equal to the object's property `shirt`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst testObj = {\n  hat: \"ballcap\",\n  shirt: \"jersey\",\n  shoes: \"cleats\"\n};\n\n// Only change code below this line\nconst hatValue = testObj;      // Change this line\nconst shirtValue = testObj;    // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const testObj = {\n  hat: \"ballcap\",\n  shirt: \"jersey\",\n  shoes: \"cleats\"\n};\n\nconst hatValue = testObj.hat;\nconst shirtValue = testObj.shirt;"
        }
      ],
      "tests": [
        {
          "text": "`hatValue` should be a string",
          "testCode": "assert(typeof hatValue === 'string');"
        },
        {
          "text": "The value of `hatValue` should be the string `ballcap`",
          "testCode": "assert(hatValue === 'ballcap');"
        },
        {
          "text": "`shirtValue` should be a string",
          "testCode": "assert(typeof shirtValue === 'string');"
        },
        {
          "text": "The value of `shirtValue` should be the string `jersey`",
          "testCode": "assert(shirtValue === 'jersey');"
        },
        {
          "text": "You should use dot notation twice",
          "testCode": "assert(__helpers.removeJSComments(code).match(/testObj\\.\\w+/g).length > 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16164,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\accessing-object-properties-with-dot-notation.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a,b) { return \"hatValue = '\" + a + \"', shirtValue = '\" + b + \"'\"; })(hatValue,shirtValue);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c9",
      "title": "Accessing Object Properties with Variables",
      "challengeType": 1,
      "dashedName": "accessing-object-properties-with-variables",
      "description": "Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.\n\nHere is an example of using a variable to access a property:\n\n```js\nconst dogs = {\n  Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"\n};\n\nconst myDog = \"Hunter\";\nconst myBreed = dogs[myDog];\nconsole.log(myBreed);\n```\n\nThe string `Doberman` would be displayed in the console.\n\nNote that we do *not* use quotes around the variable name when using it to access the property because we are using the *value* of the variable, not the *name*.",
      "instructions": "Set the `playerNumber` variable to `16`. Then, use the variable to look up the player's name and assign it to `player`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\n\n// Only change code below this line\nconst playerNumber = 42;  // Change this line\nconst player = testObj;   // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nconst playerNumber = 16;\nconst player = testObj[playerNumber];"
        }
      ],
      "tests": [
        {
          "text": "`playerNumber` should be a number",
          "testCode": "assert(typeof playerNumber === 'number');"
        },
        {
          "text": "The variable `player` should be a string",
          "testCode": "assert(typeof player === 'string');"
        },
        {
          "text": "The value of `player` should be the string `Montana`",
          "testCode": "assert(player === 'Montana');"
        },
        {
          "text": "You should use bracket notation to access `testObj`",
          "testCode": "assert(/testObj\\s*?\\[.*?\\]/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should not assign the value `Montana` to the variable `player` directly.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/player\\s*=\\s*\"|\\'\\s*Montana\\s*\"|\\'\\s*;/gi));"
        },
        {
          "text": "You should be using the variable `playerNumber` in your bracket notation",
          "testCode": "assert(/testObj\\s*?\\[\\s*playerNumber\\s*\\]/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16165,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\accessing-object-properties-with-variables.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof player !== \"undefined\"){(function(v){return v;})(player);}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d2",
      "title": "Add New Properties to a JavaScript Object",
      "challengeType": 1,
      "dashedName": "add-new-properties-to-a-javascript-object",
      "description": "You can add new properties to existing JavaScript objects the same way you would modify them.\n\nHere's how we would add a `bark` property to `ourDog`:\n\n```js\nourDog.bark = \"bow-wow\";\n```\n\nor\n\n```js\nourDog[\"bark\"] = \"bow-wow\";\n```\n\nNow when we evaluate `ourDog.bark`, we'll get his bark, `bow-wow`.\n\nExample:\n\n```js\nconst ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};\n\nourDog.bark = \"bow-wow\";\n```",
      "instructions": "Add a `bark` property to `myDog` and set it to a dog sound, such as \"woof\". You may use either dot or bracket notation.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.bark = \"Woof Woof\";"
        }
      ],
      "tests": [
        {
          "text": "You should add the property `bark` to `myDog`.",
          "testCode": "assert(myDog.bark !== undefined);"
        },
        {
          "text": "You should not add `bark` to the initialization of `myDog`.",
          "testCode": "assert(!/bark[^\\n]:/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301169,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\add-new-properties-to-a-javascript-object.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return z;})(myDog);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c11feddfaeb3bdef",
      "title": "Add Two Numbers with JavaScript",
      "challengeType": 1,
      "dashedName": "add-two-numbers-with-javascript",
      "description": "`Number` is a data type in JavaScript which represents numeric data.\n\nNow let's try to add two numbers using JavaScript.\n\nJavaScript uses the `+` symbol as an addition operator when placed between two numbers.\n\n**Example:**\n\n```js\nconst myVar = 5 + 10;\n```\n\n`myVar` now has the value `15`.",
      "instructions": "Change the `0` so that sum will equal `20`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const sum = 10 + 0;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const sum = 10 + 10;"
        }
      ],
      "tests": [
        {
          "text": "`sum` should equal `20`.",
          "testCode": "assert(sum === 20);"
        },
        {
          "text": "You should use the `+` operator.",
          "testCode": "assert(/\\+/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16650,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\add-two-numbers-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return 'sum = '+z;})(sum);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244de",
      "title": "Adding a Default Option in Switch Statements",
      "challengeType": 1,
      "dashedName": "adding-a-default-option-in-switch-statements",
      "description": "In a `switch` statement you may not be able to specify all possible values as `case` statements. Instead, you can add the `default` statement which will be executed if no matching `case` statements are found. Think of it like the final `else` statement in an `if/else` chain.\n\nA `default` statement should be the last case.\n\n```js\nswitch (num) {\n  case value1:\n    statement1;\n    break;\n  case value2:\n    statement2;\n    break;\n...\n  default:\n    defaultStatement;\n    break;\n}\n```",
      "instructions": "Write a switch statement to set `answer` for the following conditions:  \n`a` - `apple`  \n`b` - `bird`  \n`c` - `cat`  \n`default` - `stuff`",
      "boilerplate": [
        {
          "language": "js",
          "code": "function switchOfStuff(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\nswitchOfStuff(1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function switchOfStuff(val) {\n  let answer = \"\";\n\n  switch(val) {\n    case \"a\":\n      answer = \"apple\";\n      break;\n    case \"b\":\n      answer = \"bird\";\n      break;\n    case \"c\":\n      answer = \"cat\";\n      break;\n    default:\n      answer = \"stuff\";\n  }\n  return answer;\n}"
        }
      ],
      "tests": [
        {
          "text": "`switchOfStuff(\"a\")` should return the string `apple`",
          "testCode": "assert(switchOfStuff('a') === 'apple');"
        },
        {
          "text": "`switchOfStuff(\"b\")` should return the string `bird`",
          "testCode": "assert(switchOfStuff('b') === 'bird');"
        },
        {
          "text": "`switchOfStuff(\"c\")` should return the string `cat`",
          "testCode": "assert(switchOfStuff('c') === 'cat');"
        },
        {
          "text": "`switchOfStuff(\"d\")` should return the string `stuff`",
          "testCode": "assert(switchOfStuff('d') === 'stuff');"
        },
        {
          "text": "`switchOfStuff(4)` should return the string `stuff`",
          "testCode": "assert(switchOfStuff(4) === 'stuff');"
        },
        {
          "text": "You should not use any `if` or `else` statements",
          "testCode": "assert(!/else/g.test(__helpers.removeJSComments(code)) || !/if/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should use a `default` statement",
          "testCode": "assert(switchOfStuff('string-to-trigger-default-case') === 'stuff');"
        },
        {
          "text": "You should have at least 3 `break` statements",
          "testCode": "assert(__helpers.removeJSComments(code).match(/break/g).length > 2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16653,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\adding-a-default-option-in-switch-statements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ed",
      "title": "Appending Variables to Strings",
      "challengeType": 1,
      "dashedName": "appending-variables-to-strings",
      "description": "Just as we can build a string over multiple lines out of string <dfn>literals</dfn>, we can also append variables to a string using the plus equals (`+=`) operator.\n\nExample:\n\n```js\nconst anAdjective = \"awesome!\";\nlet ourStr = \"freeCodeCamp is \";\nourStr += anAdjective;\n```\n\n`ourStr` would have the value `freeCodeCamp is awesome!`.",
      "instructions": "Set `someAdjective` to a string of at least 3 characters and append it to `myStr` using the `+=` operator.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Change code below this line\nconst someAdjective = \"\";\nlet myStr = \"Learning to code is \";"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const someAdjective = \"neat\";\nlet myStr = \"Learning to code is \";\nmyStr += someAdjective;"
        }
      ],
      "tests": [
        {
          "text": "`someAdjective` should be set to a string at least 3 characters long.",
          "testCode": "assert(typeof someAdjective !== 'undefined' && someAdjective.length > 2);"
        },
        {
          "text": "You should append `someAdjective` to `myStr` using the `+=` operator.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/myStr\\s*\\+=\\s*someAdjective\\s*/).length > 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16656,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\appending-variables-to-strings.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){\n  var output = [];\n  if(typeof someAdjective === 'string') {\n    output.push('someAdjective = \"' + someAdjective + '\"');\n  } else {\n    output.push('someAdjective is not a string');\n  }\n  if(typeof myStr === 'string') {\n    output.push('myStr = \"' + myStr + '\"');\n  } else {\n    output.push('myStr is not a string');\n  }\n  return output.join('\\n');\n})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5ee127a03c3b35dd45426493",
      "title": "Assigning the Value of One Variable to Another",
      "challengeType": 1,
      "dashedName": "assigning-the-value-of-one-variable-to-another",
      "description": "After a value is assigned to a variable using the <dfn>assignment</dfn> operator, you can assign the value of that variable to another variable using the <dfn>assignment</dfn> operator.\n\n```js\nvar myVar;\nmyVar = 5;\nvar myNum;\nmyNum = myVar;\n```\n\nThe above declares a `myVar` variable with no value, then assigns it the value `5`. Next, a variable named `myNum` is declared with no value. Then, the contents of `myVar` (which is `5`) is assigned to the variable `myNum`. Now, `myNum` also has the value of `5`.",
      "instructions": "Assign the contents of `a` to variable `b`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nvar a;\na = 7;\nvar b;\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var a;\na = 7;\nvar b;\nb = a;"
        }
      ],
      "tests": [
        {
          "text": "You should not change code above the specified comment.",
          "testCode": "assert(/var a;/.test(__helpers.removeJSComments(code)) && /a = 7;/.test(__helpers.removeJSComments(code)) && /var b;/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`b` should have a value of `7`.",
          "testCode": "assert(typeof b === 'number' && b === 7);"
        },
        {
          "text": "`a` should be assigned to `b` with `=`.",
          "testCode": "assert(/b\\s*=\\s*a\\s*/g.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 418265,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\assigning-the-value-of-one-variable-to-another.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "if (typeof a != 'undefined') {\n  a = undefined;\n}\nif (typeof b != 'undefined') {\n  b = undefined;\n}"
          }
        ],
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a, b) {\n  return 'a = ' + a + ', b = ' + b;\n})(a, b);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c3",
      "title": "Assignment with a Returned Value",
      "challengeType": 1,
      "dashedName": "assignment-with-a-returned-value",
      "description": "If you'll recall from our discussion about <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Storing Values with the Assignment Operator</a>, everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.\n\nAssume we have defined a function `sum` which adds two numbers together.\n\n```js\nourSum = sum(5, 12);\n```\n\nCalling the `sum` function with the arguments of `5` and `12` produces a return value of `17`. This return value is assigned to the `ourSum` variable.",
      "instructions": "Call the `processArg` function with an argument of `7` and assign its return value to the variable `processed`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nlet processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\nprocessed = processArg(7);"
        }
      ],
      "tests": [
        {
          "text": "`processed` should have a value of `2`",
          "testCode": "assert(processed === 2);"
        },
        {
          "text": "You should assign `processArg` to `processed`",
          "testCode": "assert(/processed\\s*=\\s*processArg\\(\\s*7\\s*\\)/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16658,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\assignment-with-a-returned-value.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){return \"processed = \" + processed})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d0",
      "title": "Build JavaScript Objects",
      "challengeType": 1,
      "dashedName": "build-javascript-objects",
      "description": "You may have heard the term `object` before.\n\nObjects are similar to `arrays`, except that instead of using indexes to access and modify their data, you access the data in objects through what are called `properties`.\n\nObjects are useful for storing data in a structured way, and can represent real world objects, like a cat.\n\nHere's a sample cat object:\n\n```js\nconst cat = {\n  \"name\": \"Whiskers\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"enemies\": [\"Water\", \"Dogs\"]\n};\n```\n\nIn this example, all the properties are stored as strings, such as `name`, `legs`, and `tails`. However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:\n\n```js\nconst anotherObject = {\n  make: \"Ford\",\n  5: \"five\",\n  \"model\": \"focus\"\n};\n```\n\nHowever, if your object has any non-string properties, JavaScript will automatically typecast them as strings.",
      "instructions": "Make an object that represents a dog called `myDog` which contains the properties `name` (a string), `legs`, `tails` and `friends`.\n\nYou can set these object properties to whatever values you want, as long as `name` is a string, `legs` and `tails` are numbers, and `friends` is an array.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myDog = {\n  // Only change code below this line\n\n\n  // Only change code above this line\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};"
        }
      ],
      "tests": [
        {
          "text": "`myDog` should contain the property `name` and it should be a `string`.",
          "testCode": "assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('name') &&\n      z.name !== undefined &&\n      typeof z.name === 'string'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"
        },
        {
          "text": "`myDog` should contain the property `legs` and it should be a `number`.",
          "testCode": "assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('legs') &&\n      z.legs !== undefined &&\n      typeof z.legs === 'number'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"
        },
        {
          "text": "`myDog` should contain the property `tails` and it should be a `number`.",
          "testCode": "assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('tails') &&\n      z.tails !== undefined &&\n      typeof z.tails === 'number'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"
        },
        {
          "text": "`myDog` should contain the property `friends` and it should be an `array`.",
          "testCode": "assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('friends') &&\n      z.friends !== undefined &&\n      Array.isArray(z.friends)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"
        },
        {
          "text": "`myDog` should only contain all the given properties.",
          "testCode": "assert(\n  (function (z) {\n    return Object.keys(z).length === 4;\n  })(myDog)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16769,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\build-javascript-objects.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return z;})(myDog);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244dc",
      "title": "Chaining If Else Statements",
      "challengeType": 1,
      "dashedName": "chaining-if-else-statements",
      "description": "`if/else` statements can be chained together for complex logic. Here is <dfn>pseudocode</dfn> of multiple chained `if` / `else if` statements:\n\n```js\nif (condition1) {\n  statement1\n} else if (condition2) {\n  statement2\n} else if (condition3) {\n  statement3\n. . .\n} else {\n  statementN\n}\n```",
      "instructions": "Write chained `if`/`else if` statements to fulfill the following conditions:\n\n`num < 5` - return `Tiny`  \n`num < 10` - return `Small`  \n`num < 15` - return `Medium`  \n`num < 20` - return `Large`  \n`num >= 20` - return `Huge`",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testSize(num) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ntestSize(7);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testSize(num) {\n  if (num < 5) {\n    return \"Tiny\";\n  } else if (num < 10) {\n    return \"Small\";\n  } else if (num < 15) {\n    return \"Medium\";\n  } else if (num < 20) {\n    return \"Large\";\n  } else {\n    return \"Huge\";\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have at least four `else` statements",
          "testCode": "assert(__helpers.removeJSComments(code).match(/else/g).length > 3);"
        },
        {
          "text": "You should have at least four `if` statements",
          "testCode": "assert(__helpers.removeJSComments(code).match(/if/g).length > 3);"
        },
        {
          "text": "You should have at least one `return` statement",
          "testCode": "assert(__helpers.removeJSComments(code).match(/return/g).length >= 1);"
        },
        {
          "text": "`testSize(0)` should return the string `Tiny`",
          "testCode": "assert(testSize(0) === 'Tiny');"
        },
        {
          "text": "`testSize(4)` should return the string `Tiny`",
          "testCode": "assert(testSize(4) === 'Tiny');"
        },
        {
          "text": "`testSize(5)` should return the string `Small`",
          "testCode": "assert(testSize(5) === 'Small');"
        },
        {
          "text": "`testSize(8)` should return the string `Small`",
          "testCode": "assert(testSize(8) === 'Small');"
        },
        {
          "text": "`testSize(10)` should return the string `Medium`",
          "testCode": "assert(testSize(10) === 'Medium');"
        },
        {
          "text": "`testSize(14)` should return the string `Medium`",
          "testCode": "assert(testSize(14) === 'Medium');"
        },
        {
          "text": "`testSize(15)` should return the string `Large`",
          "testCode": "assert(testSize(15) === 'Large');"
        },
        {
          "text": "`testSize(17)` should return the string `Large`",
          "testCode": "assert(testSize(17) === 'Large');"
        },
        {
          "text": "`testSize(20)` should return the string `Huge`",
          "testCode": "assert(testSize(20) === 'Huge');"
        },
        {
          "text": "`testSize(25)` should return the string `Huge`",
          "testCode": "assert(testSize(25) === 'Huge');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16772,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\chaining-if-else-statements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c441eddfaeb4bdef",
      "title": "Comment Your JavaScript Code",
      "challengeType": 1,
      "dashedName": "comment-your-javascript-code",
      "description": "Comments are lines of code that JavaScript will intentionally ignore. Comments are a great way to leave notes to yourself and to other people who will later need to figure out what that code does.\n\nThere are two ways to write comments in JavaScript:\n\nUsing `//` will tell JavaScript to ignore the remainder of the text on the current line. This is an in-line comment:\n\n```js\n// This is an in-line comment.\n```\n\nYou can make a multi-line comment beginning with `/*` and ending with `*/`. This is a multi-line comment:\n\n```js\n/* This is a\nmulti-line comment */\n```\n\n**NOTE:** As you write code, you should regularly add comments to clarify the function of parts of your code. Good commenting can help communicate the intent of your code—both for others *and* for your future self.",
      "instructions": "Try creating one of each type of comment.",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// Fake Comment\n/* Another Comment */"
        }
      ],
      "tests": [
        {
          "text": "You should create a `//` style comment that contains at least five letters.",
          "testCode": "assert(code.match(/(\\/\\/)...../g));"
        },
        {
          "text": "You should create a `/* */` style comment that contains at least five letters.",
          "testCode": "assert(code.match(/(\\/\\*)([^\\/]{5,})(?=\\*\\/)/gm));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16783,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comment-your-javascript-code.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d0",
      "title": "Comparison with the Equality Operator",
      "challengeType": 1,
      "dashedName": "comparison-with-the-equality-operator",
      "description": "There are many <dfn>comparison operators</dfn> in JavaScript. All of these operators return a boolean `true` or `false` value.\n\nThe most basic operator is the equality operator `==`. The equality operator compares two values and returns `true` if they're equivalent or `false` if they are not. Note that equality is different from assignment (`=`), which assigns the value on the right of the operator to a variable on the left.\n\n```js\nfunction equalityTest(myVal) {\n  if (myVal == 10) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n```\n\nIf `myVal` is equal to `10`, the equality operator returns `true`, so the code in the curly braces will execute, and the function will return `Equal`. Otherwise, the function will return `Not Equal`. In order for JavaScript to compare two different <dfn>data types</dfn> (for example, `numbers` and `strings`), it must convert one type to another. This is known as Type Coercion. Once it does, however, it can compare terms as follows:\n\n```js\n1   ==  1  // true\n1   ==  2  // false\n1   == '1' // true\n\"3\" ==  3  // true\n```",
      "instructions": "Add the equality operator to the indicated line so that the function will return the string `Equal` when `val` is equivalent to `12`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nfunction testEqual(val) {\n  if (val) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ntestEqual(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testEqual(val) {\n  if (val == 12) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`testEqual(10)` should return the string `Not Equal`",
          "testCode": "assert(testEqual(10) === 'Not Equal');"
        },
        {
          "text": "`testEqual(12)` should return the string `Equal`",
          "testCode": "assert(testEqual(12) === 'Equal');"
        },
        {
          "text": "`testEqual(\"12\")` should return the string `Equal`",
          "testCode": "assert(testEqual('12') === 'Equal');"
        },
        {
          "text": "You should use the `==` operator",
          "testCode": "assert(__helpers.removeJSComments(code).match(/==/g) && !__helpers.removeJSComments(code).match(/===/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16784,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparison-with-the-equality-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d4",
      "title": "Comparison with the Greater Than Operator",
      "challengeType": 1,
      "dashedName": "comparison-with-the-greater-than-operator",
      "description": "The greater than operator (`>`) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns `true`. Otherwise, it returns `false`.\n\nLike the equality operator, the greater than operator will convert data types of values while comparing.\n\n**Examples**\n\n```js\n5   >  3  // true\n7   > '3' // true\n2   >  3  // false\n'1' >  9  // false\n```",
      "instructions": "Add the greater than operator to the indicated lines so that the return statements make sense.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testGreaterThan(val) {\n  if (val) {  // Change this line\n    return \"Over 100\";\n  }\n\n  if (val) {  // Change this line\n    return \"Over 10\";\n  }\n\n  return \"10 or Under\";\n}\n\ntestGreaterThan(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testGreaterThan(val) {\n  if (val > 100) {  // Change this line\n    return \"Over 100\";\n  }\n  if (val > 10) {  // Change this line\n    return \"Over 10\";\n  }\n  return \"10 or Under\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`testGreaterThan(0)` should return the string `10 or Under`",
          "testCode": "assert(testGreaterThan(0) === '10 or Under');"
        },
        {
          "text": "`testGreaterThan(10)` should return the string `10 or Under`",
          "testCode": "assert(testGreaterThan(10) === '10 or Under');"
        },
        {
          "text": "`testGreaterThan(11)` should return the string `Over 10`",
          "testCode": "assert(testGreaterThan(11) === 'Over 10');"
        },
        {
          "text": "`testGreaterThan(99)` should return the string `Over 10`",
          "testCode": "assert(testGreaterThan(99) === 'Over 10');"
        },
        {
          "text": "`testGreaterThan(100)` should return the string `Over 10`",
          "testCode": "assert(testGreaterThan(100) === 'Over 10');"
        },
        {
          "text": "`testGreaterThan(101)` should return the string `Over 100`",
          "testCode": "assert(testGreaterThan(101) === 'Over 100');"
        },
        {
          "text": "`testGreaterThan(150)` should return the string `Over 100`",
          "testCode": "assert(testGreaterThan(150) === 'Over 100');"
        },
        {
          "text": "You should use the `>` operator at least twice",
          "testCode": "assert(__helpers.removeJSComments(code).match(/val\\s*>\\s*('|\")*\\d+('|\")*/g).length > 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16786,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparison-with-the-greater-than-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d5",
      "title": "Comparison with the Greater Than Or Equal To Operator",
      "challengeType": 1,
      "dashedName": "comparison-with-the-greater-than-or-equal-to-operator",
      "description": "The greater than or equal to operator (`>=`) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns `true`. Otherwise, it returns `false`.\n\nLike the equality operator, the greater than or equal to operator will convert data types while comparing.\n\n**Examples**\n\n```js\n6   >=  6  // true\n7   >= '3' // true\n2   >=  3  // false\n'7' >=  9  // false\n```",
      "instructions": "Add the greater than or equal to operator to the indicated lines so that the return statements make sense.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testGreaterOrEqual(val) {\n  if (val) {  // Change this line\n    return \"20 or Over\";\n  }\n\n  if (val) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}\n\ntestGreaterOrEqual(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testGreaterOrEqual(val) {\n  if (val >= 20) {  // Change this line\n    return \"20 or Over\";\n  }\n\n  if (val >= 10) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`testGreaterOrEqual(0)` should return the string `Less than 10`",
          "testCode": "assert(testGreaterOrEqual(0) === 'Less than 10');"
        },
        {
          "text": "`testGreaterOrEqual(9)` should return the string `Less than 10`",
          "testCode": "assert(testGreaterOrEqual(9) === 'Less than 10');"
        },
        {
          "text": "`testGreaterOrEqual(10)` should return the string `10 or Over`",
          "testCode": "assert(testGreaterOrEqual(10) === '10 or Over');"
        },
        {
          "text": "`testGreaterOrEqual(11)` should return the string `10 or Over`",
          "testCode": "assert(testGreaterOrEqual(11) === '10 or Over');"
        },
        {
          "text": "`testGreaterOrEqual(19)` should return the string `10 or Over`",
          "testCode": "assert(testGreaterOrEqual(19) === '10 or Over');"
        },
        {
          "text": "`testGreaterOrEqual(100)` should return the string `20 or Over`",
          "testCode": "assert(testGreaterOrEqual(100) === '20 or Over');"
        },
        {
          "text": "`testGreaterOrEqual(21)` should return the string `20 or Over`",
          "testCode": "assert(testGreaterOrEqual(21) === '20 or Over');"
        },
        {
          "text": "You should use the `>=` operator at least twice",
          "testCode": "assert(__helpers.removeJSComments(code).match(/val\\s*>=\\s*('|\")*\\d+('|\")*/g).length > 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16785,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparison-with-the-greater-than-or-equal-to-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d2",
      "title": "Comparison with the Inequality Operator",
      "challengeType": 1,
      "dashedName": "comparison-with-the-inequality-operator",
      "description": "The inequality operator (`!=`) is the opposite of the equality operator. Inequality means not equal. The inequality operator returns `false` when the equality operator would return `true` and *vice versa*. Like the equality operator, the inequality operator will convert data types of values while comparing.\n\n**Examples**\n\n```js\n1 !=  2    // true\n1 != \"1\"   // false\n1 != '1'   // false\n1 != true  // false\n0 != false // false\n```",
      "instructions": "Add the inequality operator `!=` in the `if` statement so that the function will return the string `Not Equal` when `val` is not equivalent to `99`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nfunction testNotEqual(val) {\n  if (val) { // Change this line\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}\n\ntestNotEqual(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testNotEqual(val) {\n  if (val != 99) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`testNotEqual(99)` should return the string `Equal`",
          "testCode": "assert(testNotEqual(99) === 'Equal');"
        },
        {
          "text": "`testNotEqual(\"99\")` should return the string `Equal`",
          "testCode": "assert(testNotEqual('99') === 'Equal');"
        },
        {
          "text": "`testNotEqual(12)` should return the string `Not Equal`",
          "testCode": "assert(testNotEqual(12) === 'Not Equal');"
        },
        {
          "text": "`testNotEqual(\"12\")` should return the string `Not Equal`",
          "testCode": "assert(testNotEqual('12') === 'Not Equal');"
        },
        {
          "text": "`testNotEqual(\"bob\")` should return the string `Not Equal`",
          "testCode": "assert(testNotEqual('bob') === 'Not Equal');"
        },
        {
          "text": "You should use the `!=` operator",
          "testCode": "assert(__helpers.removeJSComments(code).match(/(?!!==)!=/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16787,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparison-with-the-inequality-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d6",
      "title": "Comparison with the Less Than Operator",
      "challengeType": 1,
      "dashedName": "comparison-with-the-less-than-operator",
      "description": "The less than operator (`<`) compares the values of two numbers. If the number to the left is less than the number to the right, it returns `true`. Otherwise, it returns `false`. Like the equality operator, the less than operator converts data types while comparing.\n\n**Examples**\n\n```js\n2   < 5 // true\n'3' < 7 // true\n5   < 5 // false\n3   < 2 // false\n'8' < 4 // false\n```",
      "instructions": "Add the less than operator to the indicated lines so that the return statements make sense.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testLessThan(val) {\n  if (val) {  // Change this line\n    return \"Under 25\";\n  }\n\n  if (val) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}\n\ntestLessThan(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testLessThan(val) {\n  if (val < 25) {  // Change this line\n    return \"Under 25\";\n  }\n\n  if (val < 55) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`testLessThan(0)` should return the string `Under 25`",
          "testCode": "assert(testLessThan(0) === 'Under 25');"
        },
        {
          "text": "`testLessThan(24)` should return the string `Under 25`",
          "testCode": "assert(testLessThan(24) === 'Under 25');"
        },
        {
          "text": "`testLessThan(25)` should return the string `Under 55`",
          "testCode": "assert(testLessThan(25) === 'Under 55');"
        },
        {
          "text": "`testLessThan(54)` should return the string `Under 55`",
          "testCode": "assert(testLessThan(54) === 'Under 55');"
        },
        {
          "text": "`testLessThan(55)` should return the string `55 or Over`",
          "testCode": "assert(testLessThan(55) === '55 or Over');"
        },
        {
          "text": "`testLessThan(99)` should return the string `55 or Over`",
          "testCode": "assert(testLessThan(99) === '55 or Over');"
        },
        {
          "text": "You should use the `<` operator at least twice",
          "testCode": "assert(__helpers.removeJSComments(code).match(/val\\s*<\\s*('|\")*\\d+('|\")*/g).length > 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16789,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparison-with-the-less-than-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d7",
      "title": "Comparison with the Less Than Or Equal To Operator",
      "challengeType": 1,
      "dashedName": "comparison-with-the-less-than-or-equal-to-operator",
      "description": "The less than or equal to operator (`<=`) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns `true`. If the number on the left is greater than the number on the right, it returns `false`. Like the equality operator, the less than or equal to operator converts data types.\n\n**Examples**\n\n```js\n4   <= 5 // true\n'7' <= 7 // true\n5   <= 5 // true\n3   <= 2 // false\n'8' <= 4 // false\n```",
      "instructions": "Add the less than or equal to operator to the indicated lines so that the return statements make sense.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testLessOrEqual(val) {\n  if (val) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n\n  if (val) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}\n\ntestLessOrEqual(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testLessOrEqual(val) {\n  if (val <= 12) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n\n  if (val <= 24) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`testLessOrEqual(0)` should return the string `Smaller Than or Equal to 12`",
          "testCode": "assert(testLessOrEqual(0) === 'Smaller Than or Equal to 12');"
        },
        {
          "text": "`testLessOrEqual(11)` should return the string `Smaller Than or Equal to 12`",
          "testCode": "assert(testLessOrEqual(11) === 'Smaller Than or Equal to 12');"
        },
        {
          "text": "`testLessOrEqual(12)` should return the string `Smaller Than or Equal to 12`",
          "testCode": "assert(testLessOrEqual(12) === 'Smaller Than or Equal to 12');"
        },
        {
          "text": "`testLessOrEqual(23)` should return the string `Smaller Than or Equal to 24`",
          "testCode": "assert(testLessOrEqual(23) === 'Smaller Than or Equal to 24');"
        },
        {
          "text": "`testLessOrEqual(24)` should return the string `Smaller Than or Equal to 24`",
          "testCode": "assert(testLessOrEqual(24) === 'Smaller Than or Equal to 24');"
        },
        {
          "text": "`testLessOrEqual(25)` should return the string `More Than 24`",
          "testCode": "assert(testLessOrEqual(25) === 'More Than 24');"
        },
        {
          "text": "`testLessOrEqual(55)` should return the string `More Than 24`",
          "testCode": "assert(testLessOrEqual(55) === 'More Than 24');"
        },
        {
          "text": "You should use the `<=` operator at least twice",
          "testCode": "assert(__helpers.removeJSComments(code).match(/val\\s*<=\\s*('|\")*\\d+('|\")*/g).length > 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16788,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparison-with-the-less-than-or-equal-to-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d1",
      "title": "Comparison with the Strict Equality Operator",
      "challengeType": 1,
      "dashedName": "comparison-with-the-strict-equality-operator",
      "description": "Strict equality (`===`) is the counterpart to the equality operator (`==`). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.\n\nIf the values being compared have different types, they are considered unequal, and the strict equality operator will return false.\n\n**Examples**\n\n```js\n3 ===  3  // true\n3 === '3' // false\n```\n\nIn the second example, `3` is a `Number` type and `'3'` is a `String` type.",
      "instructions": "Use the strict equality operator in the `if` statement so the function will return the string `Equal` when `val` is strictly equal to `7`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nfunction testStrict(val) {\n  if (val) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ntestStrict(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testStrict(val) {\n  if (val === 7) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`testStrict(10)` should return the string `Not Equal`",
          "testCode": "assert(testStrict(10) === 'Not Equal');"
        },
        {
          "text": "`testStrict(7)` should return the string `Equal`",
          "testCode": "assert(testStrict(7) === 'Equal');"
        },
        {
          "text": "`testStrict(\"7\")` should return the string `Not Equal`",
          "testCode": "assert(testStrict('7') === 'Not Equal');"
        },
        {
          "text": "You should use the `===` operator",
          "testCode": "assert(__helpers.removeJSComments(code).match(/(val\\s*===\\s*\\d+)|(\\d+\\s*===\\s*val)/g).length > 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16790,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparison-with-the-strict-equality-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d3",
      "title": "Comparison with the Strict Inequality Operator",
      "challengeType": 1,
      "dashedName": "comparison-with-the-strict-inequality-operator",
      "description": "The strict inequality operator (`!==`) is the logical opposite of the strict equality operator. It means \"Strictly Not Equal\" and returns `false` where strict equality would return `true` and *vice versa*. The strict inequality operator will not convert data types.\n\n**Examples**\n\n```js\n3 !==  3  // false\n3 !== '3' // true\n4 !==  3  // true\n```",
      "instructions": "Add the strict inequality operator to the `if` statement so the function will return the string `Not Equal` when `val` is not strictly equal to `17`",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nfunction testStrictNotEqual(val) {\n  if (val) { // Change this line\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}\n\ntestStrictNotEqual(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testStrictNotEqual(val) {\n  if (val !== 17) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`testStrictNotEqual(17)` should return the string `Equal`",
          "testCode": "assert(testStrictNotEqual(17) === 'Equal');"
        },
        {
          "text": "`testStrictNotEqual(\"17\")` should return the string `Not Equal`",
          "testCode": "assert(testStrictNotEqual('17') === 'Not Equal');"
        },
        {
          "text": "`testStrictNotEqual(12)` should return the string `Not Equal`",
          "testCode": "assert(testStrictNotEqual(12) === 'Not Equal');"
        },
        {
          "text": "`testStrictNotEqual(\"bob\")` should return the string `Not Equal`",
          "testCode": "assert(testStrictNotEqual('bob') === 'Not Equal');"
        },
        {
          "text": "You should use the `!==` operator",
          "testCode": "assert(__helpers.removeJSComments(code).match(/(val\\s*!==\\s*\\d+)|(\\d+\\s*!==\\s*val)/g).length > 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16791,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparison-with-the-strict-inequality-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d8",
      "title": "Comparisons with the Logical And Operator",
      "challengeType": 1,
      "dashedName": "comparisons-with-the-logical-and-operator",
      "description": "Sometimes you will need to test more than one thing at a time. The <dfn>logical and</dfn> operator (`&&`) returns `true` if and only if the <dfn>operands</dfn> to the left and right of it are true.\n\nThe same effect could be achieved by nesting an `if` statement inside another `if`.\n\n```js\nif (num > 5) {\n  if (num < 10) {\n    return \"Yes\";\n  }\n}\nreturn \"No\";\n```\n\nThis code will return `Yes` if `num` is greater than `5` and less than `10`. The same logic can be written with the <dfn>logical and</dfn> operator.\n\n```js\nif (num > 5 && num < 10) {\n  return \"Yes\";\n}\nreturn \"No\";\n```",
      "instructions": "Replace the two if statements with one statement, using the `&&` operator, which will return the string `Yes` if `val` is less than or equal to `50` and greater than or equal to `25`. Otherwise, will return the string `No`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testLogicalAnd(val) {\n  // Only change code below this line\n\n  if (val) {\n    if (val) {\n      return \"Yes\";\n    }\n  }\n\n  // Only change code above this line\n  return \"No\";\n}\n\ntestLogicalAnd(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testLogicalAnd(val) {\n  if (val >= 25 && val <= 50) {\n    return \"Yes\";\n  }\n  return \"No\";\n}"
        }
      ],
      "tests": [
        {
          "text": "You should use the `&&` operator once",
          "testCode": "assert(__helpers.removeJSComments(code).match(/&&/g).length === 1);"
        },
        {
          "text": "You should only have one `if` statement",
          "testCode": "assert(__helpers.removeJSComments(code).match(/if/g).length === 1);"
        },
        {
          "text": "`testLogicalAnd(0)` should return the string `No`",
          "testCode": "assert(testLogicalAnd(0) === 'No');"
        },
        {
          "text": "`testLogicalAnd(24)` should return the string `No`",
          "testCode": "assert(testLogicalAnd(24) === 'No');"
        },
        {
          "text": "`testLogicalAnd(25)` should return the string `Yes`",
          "testCode": "assert(testLogicalAnd(25) === 'Yes');"
        },
        {
          "text": "`testLogicalAnd(30)` should return the string `Yes`",
          "testCode": "assert(testLogicalAnd(30) === 'Yes');"
        },
        {
          "text": "`testLogicalAnd(50)` should return the string `Yes`",
          "testCode": "assert(testLogicalAnd(50) === 'Yes');"
        },
        {
          "text": "`testLogicalAnd(51)` should return the string `No`",
          "testCode": "assert(testLogicalAnd(51) === 'No');"
        },
        {
          "text": "`testLogicalAnd(75)` should return the string `No`",
          "testCode": "assert(testLogicalAnd(75) === 'No');"
        },
        {
          "text": "`testLogicalAnd(80)` should return the string `No`",
          "testCode": "assert(testLogicalAnd(80) === 'No');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16799,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparisons-with-the-logical-and-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d9",
      "title": "Comparisons with the Logical Or Operator",
      "challengeType": 1,
      "dashedName": "comparisons-with-the-logical-or-operator",
      "description": "The <dfn>logical or</dfn> operator (`||`) returns `true` if either of the <dfn>operands</dfn> is `true`. Otherwise, it returns `false`.\n\nThe <dfn>logical or</dfn> operator is composed of two pipe symbols: (`||`). This can typically be found between your Backspace and Enter keys.\n\nThe pattern below should look familiar from prior waypoints.\n\n```js\nif (num > 10) {\n  return \"No\";\n}\nif (num < 5) {\n  return \"No\";\n}\nreturn \"Yes\";\n```\n\nThis code will return `Yes` if `num` is between `5` and `10` (`5` and `10` included). The same logic can be written with the <dfn>logical or</dfn> operator.\n\n```js\nif (num > 10 || num < 5) {\n  return \"No\";\n}\nreturn \"Yes\";\n```",
      "instructions": "Combine the two `if` statements into one statement which returns the string `Outside` if `val` is not between `10` and `20`, inclusive. Otherwise, return the string `Inside`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testLogicalOr(val) {\n  // Only change code below this line\n\n  if (val) {\n    return \"Outside\";\n  }\n\n  if (val) {\n    return \"Outside\";\n  }\n\n  // Only change code above this line\n  return \"Inside\";\n}\n\ntestLogicalOr(15);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testLogicalOr(val) {\n  if (val < 10 || val > 20) {\n    return \"Outside\";\n  }\n  return \"Inside\";\n}"
        }
      ],
      "tests": [
        {
          "text": "You should use the `||` operator once",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\|\\|/g).length === 1);"
        },
        {
          "text": "You should only have one `if` statement",
          "testCode": "assert(__helpers.removeJSComments(code).match(/if/g).length === 1);"
        },
        {
          "text": "`testLogicalOr(0)` should return the string `Outside`",
          "testCode": "assert(testLogicalOr(0) === 'Outside');"
        },
        {
          "text": "`testLogicalOr(9)` should return the string `Outside`",
          "testCode": "assert(testLogicalOr(9) === 'Outside');"
        },
        {
          "text": "`testLogicalOr(10)` should return the string `Inside`",
          "testCode": "assert(testLogicalOr(10) === 'Inside');"
        },
        {
          "text": "`testLogicalOr(15)` should return the string `Inside`",
          "testCode": "assert(testLogicalOr(15) === 'Inside');"
        },
        {
          "text": "`testLogicalOr(19)` should return the string `Inside`",
          "testCode": "assert(testLogicalOr(19) === 'Inside');"
        },
        {
          "text": "`testLogicalOr(20)` should return the string `Inside`",
          "testCode": "assert(testLogicalOr(20) === 'Inside');"
        },
        {
          "text": "`testLogicalOr(21)` should return the string `Outside`",
          "testCode": "assert(testLogicalOr(21) === 'Outside');"
        },
        {
          "text": "`testLogicalOr(25)` should return the string `Outside`",
          "testCode": "assert(testLogicalOr(25) === 'Outside');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16800,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\comparisons-with-the-logical-or-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244af",
      "title": "Compound Assignment With Augmented Addition",
      "challengeType": 1,
      "dashedName": "compound-assignment-with-augmented-addition",
      "description": "In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of the equals sign is evaluated first, so we can say:\n\n```js\nmyVar = myVar + 5;\n```\n\nto add `5` to `myVar`. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.\n\nOne such operator is the `+=` operator.\n\n```js\nlet myVar = 1;\nmyVar += 5;\nconsole.log(myVar);\n```\n\n`6` would be displayed in the console.",
      "instructions": "Convert the assignments for `a`, `b`, and `c` to use the `+=` operator.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let a = 3;\nlet b = 17;\nlet c = 12;\n\n// Only change code below this line\na = a + 12;\nb = 9 + b;\nc = c + 7;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let a = 3;\nlet b = 17;\nlet c = 12;\n\na += 12;\nb += 9;\nc += 7;"
        }
      ],
      "tests": [
        {
          "text": "`a` should equal `15`.",
          "testCode": "assert(a === 15);"
        },
        {
          "text": "`b` should equal `26`.",
          "testCode": "assert(b === 26);"
        },
        {
          "text": "`c` should equal `19`.",
          "testCode": "assert(c === 19);"
        },
        {
          "text": "You should use the `+=` operator for each variable.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\+=/g).length === 3);"
        },
        {
          "text": "You should not modify the code above the specified comment.",
          "testCode": "assert(\n  /let a = 3;/.test(__helpers.removeJSComments(code)) &&\n    /let b = 17;/.test(__helpers.removeJSComments(code)) &&\n    /let c = 12;/.test(__helpers.removeJSComments(code))\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16661,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\compound-assignment-with-augmented-addition.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b2",
      "title": "Compound Assignment With Augmented Division",
      "challengeType": 1,
      "dashedName": "compound-assignment-with-augmented-division",
      "description": "The `/=` operator divides a variable by another number.\n\n```js\nmyVar = myVar / 5;\n```\n\nWill divide `myVar` by `5`. This can be rewritten as:\n\n```js\nmyVar /= 5;\n```",
      "instructions": "Convert the assignments for `a`, `b`, and `c` to use the `/=` operator.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let a = 48;\nlet b = 108;\nlet c = 33;\n\n// Only change code below this line\na = a / 12;\nb = b / 4;\nc = c / 11;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let a = 48;\nlet b = 108;\nlet c = 33;\n\na /= 12;\nb /= 4;\nc /= 11;"
        }
      ],
      "tests": [
        {
          "text": "`a` should equal `4`.",
          "testCode": "assert(a === 4);"
        },
        {
          "text": "`b` should equal `27`.",
          "testCode": "assert(b === 27);"
        },
        {
          "text": "`c` should equal `3`.",
          "testCode": "assert(c === 3);"
        },
        {
          "text": "You should use the `/=` operator for each variable.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\/=/g).length === 3);"
        },
        {
          "text": "You should not modify the code above the specified comment.",
          "testCode": "assert(\n  /let a = 48;/.test(__helpers.removeJSComments(code)) &&\n    /let b = 108;/.test(__helpers.removeJSComments(code)) &&\n    /let c = 33;/.test(__helpers.removeJSComments(code))\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16659,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\compound-assignment-with-augmented-division.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b1",
      "title": "Compound Assignment With Augmented Multiplication",
      "challengeType": 1,
      "dashedName": "compound-assignment-with-augmented-multiplication",
      "description": "The `*=` operator multiplies a variable by a number.\n\n```js\nmyVar = myVar * 5;\n```\n\nwill multiply `myVar` by `5`. This can be rewritten as:\n\n```js\nmyVar *= 5;\n```",
      "instructions": "Convert the assignments for `a`, `b`, and `c` to use the `*=` operator.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let a = 5;\nlet b = 12;\nlet c = 4.6;\n\n// Only change code below this line\na = a * 5;\nb = 3 * b;\nc = c * 10;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let a = 5;\nlet b = 12;\nlet c = 4.6;\n\na *= 5;\nb *= 3;\nc *= 10;"
        }
      ],
      "tests": [
        {
          "text": "`a` should equal `25`.",
          "testCode": "assert(a === 25);"
        },
        {
          "text": "`b` should equal `36`.",
          "testCode": "assert(b === 36);"
        },
        {
          "text": "`c` should equal `46`.",
          "testCode": "assert(c === 46);"
        },
        {
          "text": "You should use the `*=` operator for each variable.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\*=/g).length === 3);"
        },
        {
          "text": "You should not modify the code above the specified comment.",
          "testCode": "assert(\n  /let a = 5;/.test(__helpers.removeJSComments(code)) &&\n    /let b = 12;/.test(__helpers.removeJSComments(code)) &&\n    /let c = 4\\.6;/.test(__helpers.removeJSComments(code))\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16662,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\compound-assignment-with-augmented-multiplication.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b0",
      "title": "Compound Assignment With Augmented Subtraction",
      "challengeType": 1,
      "dashedName": "compound-assignment-with-augmented-subtraction",
      "description": "Like the `+=` operator, `-=` subtracts a number from a variable.\n\n```js\nmyVar = myVar - 5;\n```\n\nwill subtract `5` from `myVar`. This can be rewritten as:\n\n```js\nmyVar -= 5;\n```",
      "instructions": "Convert the assignments for `a`, `b`, and `c` to use the `-=` operator.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let a = 11;\nlet b = 9;\nlet c = 3;\n\n// Only change code below this line\na = a - 6;\nb = b - 15;\nc = c - 1;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let a = 11;\nlet b = 9;\nlet c = 3;\n\na -= 6;\nb -= 15;\nc -= 1;"
        }
      ],
      "tests": [
        {
          "text": "`a` should equal `5`.",
          "testCode": "assert(a === 5);"
        },
        {
          "text": "`b` should equal `-6`.",
          "testCode": "assert(b === -6);"
        },
        {
          "text": "`c` should equal `2`.",
          "testCode": "assert(c === 2);"
        },
        {
          "text": "You should use the `-=` operator for each variable.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/-=/g).length === 3);"
        },
        {
          "text": "You should not modify the code above the specified comment.",
          "testCode": "assert(\n  /let a = 11;/.test(__helpers.removeJSComments(code)) && /let b = 9;/.test(__helpers.removeJSComments(code)) && /let c = 3;/.test(__helpers.removeJSComments(code))\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16660,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\compound-assignment-with-augmented-subtraction.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b7",
      "title": "Concatenating Strings with Plus Operator",
      "challengeType": 1,
      "dashedName": "concatenating-strings-with-plus-operator",
      "description": "In JavaScript, when the `+` operator is used with a `String` value, it is called the <dfn>concatenation</dfn> operator. You can build a new string out of other strings by <dfn>concatenating</dfn> them together.\n\n**Example**\n\n```js\n'My name is Alan,' + ' I concatenate.'\n```\n\n**Note:** Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.\n\nExample:\n\n```js\nconst ourStr = \"I come first. \" + \"I come second.\";\n```\n\nThe string `I come first. I come second.` would be displayed in the console.",
      "instructions": "Build `myStr` from the strings `This is the start.` and `This is the end.` using the `+` operator. Be sure to include a space between the two strings.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myStr = \"\"; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myStr = \"This is the start. \" + \"This is the end.\";"
        }
      ],
      "tests": [
        {
          "text": "`myStr` should have a single space character between the two strings.",
          "testCode": "assert(/start\\. This/.test(myStr));"
        },
        {
          "text": "`myStr` should have a value of the string `This is the start. This is the end.`",
          "testCode": "assert(myStr === 'This is the start. This is the end.');"
        },
        {
          "text": "You should use the `+` operator to build `myStr`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/([\"']).*\\1\\s*\\+\\s*([\"']).*\\2/g));"
        },
        {
          "text": "`myStr` should be created using the `const` keyword.",
          "testCode": "assert(/const\\s+myStr/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should assign the result to the `myStr` variable.",
          "testCode": "assert(/myStr\\s*=/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16802,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\concatenating-strings-with-plus-operator.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){\n  if(typeof myStr === 'string') {\n    return 'myStr = \"' + myStr + '\"';\n  } else {\n    return 'myStr is not a string';\n  }\n})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b8",
      "title": "Concatenating Strings with the Plus Equals Operator",
      "challengeType": 1,
      "dashedName": "concatenating-strings-with-the-plus-equals-operator",
      "description": "We can also use the `+=` operator to <dfn>concatenate</dfn> a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.\n\n**Note:** Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.\n\nExample:\n\n```js\nlet ourStr = \"I come first. \";\nourStr += \"I come second.\";\n```\n\n`ourStr` now has a value of the string `I come first. I come second.`.",
      "instructions": "Build `myStr` over several lines by concatenating these two strings: `This is the first sentence.` and `This is the second sentence.` using the `+=` operator. Use the `+=` operator similar to how it is shown in the example and be sure to include a space between the two strings. Start by assigning the first string to `myStr`, then add on the second string.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myStr;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";"
        }
      ],
      "tests": [
        {
          "text": "`myStr` should have a single space character between the two strings.",
          "testCode": "assert(/sentence\\. This/.test(myStr));"
        },
        {
          "text": "`myStr` should have a value of the string `This is the first sentence. This is the second sentence.`",
          "testCode": "assert(myStr === 'This is the first sentence. This is the second sentence.');"
        },
        {
          "text": "You should use the `+=` operator to build `myStr`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/myStr\\s*\\+=\\s*([\"']).*\\1/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16803,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\concatenating-strings-with-the-plus-equals-operator.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){\n  if(typeof myStr === 'string') {\n    return 'myStr = \"' + myStr + '\"';\n  } else {\n    return 'myStr is not a string';\n  }\n})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b9",
      "title": "Constructing Strings with Variables",
      "challengeType": 1,
      "dashedName": "constructing-strings-with-variables",
      "description": "Sometimes you will need to build a string. By using the concatenation operator (`+`), you can insert one or more variables into a string you're building.\n\nExample:\n\n```js\nconst ourName = \"freeCodeCamp\";\nconst ourStr = \"Hello, our name is \" + ourName + \", how are you?\";\n```\n\n`ourStr` would have a value of the string `Hello, our name is freeCodeCamp, how are you?`.",
      "instructions": "Set `myName` to a string equal to your name and build `myStr` with `myName` between the strings `My name is ` and ` and I am well!`",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nconst myName = \"\";\nconst myStr = \"\";"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myName = \"Bob\";\nconst myStr = \"My name is \" + myName + \" and I am well!\";"
        }
      ],
      "tests": [
        {
          "text": "`myName` should be set to a string at least 3 characters long.",
          "testCode": "assert(typeof myName !== 'undefined' && myName.length > 2);"
        },
        {
          "text": "You should use two `+` operators to build `myStr` with `myName` inside it.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/[\"']\\s*\\+\\s*myName\\s*\\+\\s*[\"']/g).length > 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16805,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\constructing-strings-with-variables.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){\n  var output = [];\n  if(typeof myName === 'string') {\n    output.push('myName = \"' + myName + '\"');\n  } else {\n    output.push('myName is not a string');\n  }\n  if(typeof myStr === 'string') {\n    output.push('myStr = \"' + myStr + '\"');\n  } else {\n    output.push('myStr is not a string');\n  }\n  return output.join('\\n');\n})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56105e7b514f539506016a5e",
      "title": "Count Backwards With a For Loop",
      "challengeType": 1,
      "dashedName": "count-backwards-with-a-for-loop",
      "description": "A for loop can also count backwards, so long as we can define the right conditions.\n\nIn order to decrement by two each iteration, we'll need to change our initialization, condition, and final expression.\n\nWe'll start at `i = 10` and loop while `i > 0`. We'll decrement `i` by 2 each loop with `i -= 2`.\n\n```js\nconst ourArray = [];\n\nfor (let i = 10; i > 0; i -= 2) {\n  ourArray.push(i);\n}\n```\n\n`ourArray` will now contain `[10, 8, 6, 4, 2]`. Let's change our initialization and final expression so we can count backwards by twos to create an array of descending odd numbers.",
      "instructions": "Push the odd numbers from 9 through 1 to `myArray` using a `for` loop.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [];\nfor (let i = 9; i > 0; i -= 2) {\n  myArray.push(i);\n}"
        }
      ],
      "tests": [
        {
          "text": "You should be using a `for` loop for this.",
          "testCode": "assert(/for\\s*\\([^)]+?\\)/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should be using the array method `push`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/myArray.push/));"
        },
        {
          "text": "`myArray` should equal `[9, 7, 5, 3, 1]`.",
          "testCode": "assert.deepEqual(myArray, [9, 7, 5, 3, 1]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16808,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\count-backwards-with-a-for-loop.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "565bbe00e9cc8ac0725390f4",
      "title": "Counting Cards",
      "challengeType": 1,
      "dashedName": "counting-cards",
      "description": "In the casino game Blackjack, a player can determine whether they have an advantage on the next hand over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called Card Counting.\n\nHaving more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.\n\n<table><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K', 'A'</td></tr></tbody></table>\n\nYou will write a card counting function. It will receive a `card` parameter, which can be a number or a string, and increment or decrement the global `count` variable according to the card's value (see table). The function will then return a string with the current count and the string `Bet` if the count is positive, or `Hold` if the count is zero or negative. The current count and the player's decision (`Bet` or `Hold`) should be separated by a single space.\n\n**Example Outputs:** `-3 Hold` or `5 Bet`\n\n**Hint**  \nDo NOT reset `count` to 0 when value is 7, 8, or 9.  \nDo NOT return an array.  \nDo NOT include quotes (single or double) in the output.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "let count = 0;\n\nfunction cc(card) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ncc(2); cc(3); cc(7); cc('K'); cc('A');"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let count = 0;\nfunction cc(card) {\n  switch(card) {\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      count++;\n      break;\n    case 10:\n    case 'J':\n    case 'Q':\n    case 'K':\n    case 'A':\n      count--;\n  }\n  if(count > 0) {\n    return count + \" Bet\";\n  } else {\n    return count + \" Hold\";\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "Your function should return a value for count and the text (`Bet` or `Hold`) with one space character between them.",
          "testCode": "assert(//\n  (function () {\n    count = 0;\n    let out = cc(10);\n    const hasSpace = /-?\\d+ (Bet|Hold)/.test('' + out);\n    return hasSpace;\n  })()\n);"
        },
        {
          "text": "Cards Sequence 2, 3, 4, 5, 6 should return the string `5 Bet`",
          "testCode": "assert(\n  (function () {\n    count = 0;\n    cc(2);\n    cc(3);\n    cc(4);\n    cc(5);\n    var out = cc(6);\n    if (out === '5 Bet') {\n      return true;\n    }\n    return false;\n  })()\n);"
        },
        {
          "text": "Cards Sequence 7, 8, 9 should return the string `0 Hold`",
          "testCode": "assert(\n  (function () {\n    count = 0;\n    cc(7);\n    cc(8);\n    var out = cc(9);\n    if (out === '0 Hold') {\n      return true;\n    }\n    return false;\n  })()\n);"
        },
        {
          "text": "Cards Sequence 10, J, Q, K, A should return the string `-5 Hold`",
          "testCode": "assert(\n  (function () {\n    count = 0;\n    cc(10);\n    cc('J');\n    cc('Q');\n    cc('K');\n    var out = cc('A');\n    if (out === '-5 Hold') {\n      return true;\n    }\n    return false;\n  })()\n);"
        },
        {
          "text": "Cards Sequence 3, 7, Q, 8, A should return the string `-1 Hold`",
          "testCode": "assert(\n  (function () {\n    count = 0;\n    cc(3);\n    cc(7);\n    cc('Q');\n    cc(8);\n    var out = cc('A');\n    if (out === '-1 Hold') {\n      return true;\n    }\n    return false;\n  })()\n);"
        },
        {
          "text": "Cards Sequence 2, J, 9, 2, 7 should return the string `1 Bet`",
          "testCode": "assert(\n  (function () {\n    count = 0;\n    cc(2);\n    cc('J');\n    cc(9);\n    cc(2);\n    var out = cc(7);\n    if (out === '1 Bet') {\n      return true;\n    }\n    return false;\n  })()\n);"
        },
        {
          "text": "Cards Sequence 2, 2, 10 should return the string `1 Bet`",
          "testCode": "assert(\n  (function () {\n    count = 0;\n    cc(2);\n    cc(2);\n    var out = cc(10);\n    if (out === '1 Bet') {\n      return true;\n    }\n    return false;\n  })()\n);"
        },
        {
          "text": "Cards Sequence 3, 2, A, 10, K should return the string `-1 Hold`",
          "testCode": "assert(\n  (function () {\n    count = 0;\n    cc(3);\n    cc(2);\n    cc('A');\n    cc(10);\n    var out = cc('K');\n    if (out === '-1 Hold') {\n      return true;\n    }\n    return false;\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16809,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\counting-cards.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1391c1c11feddfaeb4bdef",
      "title": "Create Decimal Numbers with JavaScript",
      "challengeType": 1,
      "dashedName": "create-decimal-numbers-with-javascript",
      "description": "We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as <dfn>floating point</dfn> numbers or <dfn>floats</dfn>.\n\n**Note:** when you compute numbers, they are computed with finite precision. Operations using floating points may lead to different results than the desired outcome. If you are getting one of these results, open a topic on the <a href=\"https://forum.freecodecamp.org/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">freeCodeCamp forum</a>.",
      "instructions": "Create a variable `myDecimal` and give it a decimal value with a fractional part (e.g. `5.7`).",
      "boilerplate": [
        {
          "language": "js",
          "code": "const ourDecimal = 5.7;\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myDecimal = 9.9;"
        }
      ],
      "tests": [
        {
          "text": "`myDecimal` should be a number.",
          "testCode": "assert(typeof myDecimal === 'number');"
        },
        {
          "text": "`myDecimal` should have a decimal point",
          "testCode": "assert(myDecimal % 1 != 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16826,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\create-decimal-numbers-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){if(typeof myDecimal !== \"undefined\"){return myDecimal;}})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "587d7b87367417b2b2512b41",
      "title": "Declare a Read-Only Variable with the const Keyword",
      "challengeType": 1,
      "dashedName": "declare-a-read-only-variable-with-the-const-keyword",
      "description": "The keyword `let` is not the only new way to declare variables. In ES6, you can also declare variables using the `const` keyword.\n\n`const` has all the awesome features that `let` has, with the added bonus that variables declared using `const` are read-only. They are a constant value, which means that once a variable is assigned with `const`, it cannot be reassigned:\n\n```js\nconst FAV_PET = \"Cats\";\nFAV_PET = \"Dogs\";\n```\n\nThe console will display an error due to reassigning the value of `FAV_PET`.\n\nYou should always name variables you don't want to reassign using the `const` keyword. This helps when you accidentally attempt to reassign a variable that is meant to stay constant.\n\n**Note:** It is common for developers to use uppercase variable identifiers for immutable values and lowercase or camelCase for mutable values (objects and arrays). You will learn more about objects, arrays, and immutable and mutable values in later challenges. Also in later challenges, you will see examples of uppercase, lowercase, or camelCase variable identifiers.",
      "instructions": "Change the code so that all variables are declared using `let` or `const`. Use `let` when you want the variable to change, and `const` when you want the variable to remain constant. Also, rename variables declared with `const` to conform to common practices. Do not change the strings assigned to the variables.",
      "boilerplate": [
        {
          "language": "js",
          "code": "var fCC = \"freeCodeCamp\"; // Change this line\nvar fact = \"is cool!\"; // Change this line\nfact = \"is awesome!\";\nconsole.log(fCC, fact); // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const FCC = \"freeCodeCamp\";\nlet fact = \"is cool!\";\n\nfact = \"is awesome!\";\nconsole.log(FCC, fact);"
        }
      ],
      "tests": [
        {
          "text": "`var` should not exist in your code.",
          "testCode": "assert.notMatch(code, /var/g);"
        },
        {
          "text": "You should change `fCC` to all uppercase.",
          "testCode": "assert.match(code, /(FCC)/);\nassert.notMatch(code, /(fCC)/);"
        },
        {
          "text": "`FCC` should be a constant variable declared with `const`.",
          "testCode": "assert.match(code, /const\\s+FCC/);"
        },
        {
          "text": "The string assigned to `FCC` should not be changed.",
          "testCode": "assert.equal(FCC, 'freeCodeCamp');"
        },
        {
          "text": "`fact` should be declared with `let`.",
          "testCode": "assert.match(code, /(let\\s+fact)/g);"
        },
        {
          "text": "`console.log` should be changed to print the `FCC` and `fact` variables.",
          "testCode": "assert.match(code, /console\\.log\\(\\s*FCC\\s*\\,\\s*fact\\s*\\)\\s*;?/g);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301201,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\declare-a-read-only-variable-with-the-const-keyword.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c443eddfaeb5bdef",
      "title": "Declare JavaScript Variables",
      "challengeType": 1,
      "dashedName": "declare-javascript-variables",
      "description": "In computer science, <dfn>data</dfn> is anything that is meaningful to the computer. JavaScript provides eight different <dfn>data types</dfn> which are `undefined`, `null`, `boolean`, `string`, `symbol`, `bigint`, `number`, and `object`.\n\nFor example, computers distinguish between numbers, such as the number `12`, and `strings`, such as `\"12\"`, `\"dog\"`, or `\"123 cats\"`, which are collections of characters. Computers can perform mathematical operations on a number, but not on a string.\n\n<dfn>Variables</dfn> allow computers to store and manipulate data in a dynamic fashion. They do this by using a \"label\" to point to the data rather than using the data itself. Any of the eight data types may be stored in a variable.\n\nVariables are similar to the x and y variables you use in mathematics, which means they're a simple name to represent the data we want to refer to. Computer variables differ from mathematical variables in that they can store different values at different times.\n\nWe tell JavaScript to create or <dfn>declare</dfn> a variable by putting the keyword `var` in front of it, like so:\n\n```js\nvar ourName;\n```\n\ncreates a variable called `ourName`. In JavaScript we end statements with semicolons. Variable names can be made up of numbers, letters, and `$` or `_`, but may not contain spaces or start with a number.",
      "instructions": "Use the `var` keyword to create a variable called `myName`.\n\n**Hint**  \nLook at the `ourName` example above if you get stuck.",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var myName;"
        }
      ],
      "tests": [
        {
          "text": "You should declare `myName` with the `var` keyword, ending with a semicolon",
          "testCode": "assert(/var\\s+myName\\s*;/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17556,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\declare-javascript-variables.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myName !== \"undefined\"){(function(v){return v;})(myName);}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c444eddfaeb5bdef",
      "title": "Declare String Variables",
      "challengeType": 1,
      "dashedName": "declare-string-variables",
      "description": "Previously you used the following code to declare a variable:\n\n```js\nvar myName;\n```\n\nBut you can also declare a string variable like this:\n\n```js\nvar myName = \"your name\";\n```\n\n`\"your name\"` is called a <dfn>string</dfn> <dfn>literal</dfn>. A string literal, or string, is a series of zero or more characters enclosed in single or double quotes.",
      "instructions": "Create two new string variables: `myFirstName` and `myLastName` and assign them the values of your first and last name, respectively.",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var myFirstName = \"Alan\";\nvar myLastName = \"Turing\";"
        }
      ],
      "tests": [
        {
          "text": "`myFirstName` should be a string with at least one character in it.",
          "testCode": "assert(\n  (function () {\n    if (\n      typeof myFirstName !== 'undefined' &&\n      typeof myFirstName === 'string' &&\n      myFirstName.length > 0\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"
        },
        {
          "text": "`myLastName` should be a string with at least one character in it.",
          "testCode": "assert(\n  (function () {\n    if (\n      typeof myLastName !== 'undefined' &&\n      typeof myLastName === 'string' &&\n      myLastName.length > 0\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17557,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\declare-string-variables.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myFirstName !== \"undefined\" && typeof myLastName !== \"undefined\"){(function(){return myFirstName + ', ' + myLastName;})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ad",
      "title": "Decrement a Number with JavaScript",
      "challengeType": 1,
      "dashedName": "decrement-a-number-with-javascript",
      "description": "You can easily <dfn>decrement</dfn> or decrease a variable by one with the `--` operator.\n\n```js\ni--;\n```\n\nis the equivalent of\n\n```js\ni = i - 1;\n```\n\n**Note:** The entire line becomes `i--;`, eliminating the need for the equal sign.",
      "instructions": "Change the code to use the `--` operator on `myVar`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myVar = 11;\n\n// Only change code below this line\nmyVar = myVar - 1;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myVar = 11;\nmyVar--;"
        }
      ],
      "tests": [
        {
          "text": "`myVar` should equal `10`.",
          "testCode": "assert(myVar === 10);"
        },
        {
          "text": "`myVar = myVar - 1;` should be changed.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/myVar\\s*=\\s*myVar\\s*[-]\\s*1.*?;?/));"
        },
        {
          "text": "You should not assign `myVar` with `10`.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/myVar\\s*=\\s*10.*?;?/));"
        },
        {
          "text": "You should use the `--` operator on `myVar`.",
          "testCode": "assert(/[-]{2}\\s*myVar|myVar\\s*[-]{2}/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should not change code above the specified comment.",
          "testCode": "assert(/let myVar = 11;/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17558,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\decrement-a-number-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return 'myVar = ' + z;})(myVar);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d3",
      "title": "Delete Properties from a JavaScript Object",
      "challengeType": 1,
      "dashedName": "delete-properties-from-a-javascript-object",
      "description": "We can also delete properties from objects like this:\n\n```js\ndelete ourDog.bark;\n```\n\nExample:\n\n```js\nconst ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"],\n  \"bark\": \"bow-wow\"\n};\n\ndelete ourDog.bark;\n```\n\nAfter the last line shown above, `ourDog` looks like:\n\n```js\n{\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n}\n```",
      "instructions": "Delete the `tails` property from `myDog`. You may use either dot or bracket notation.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\ndelete myDog.tails;"
        }
      ],
      "tests": [
        {
          "text": "You should delete the property `tails` from `myDog`.",
          "testCode": "assert(typeof myDog === 'object' && myDog.tails === undefined);"
        },
        {
          "text": "You should not modify the `myDog` setup.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\"tails\": 1/g).length > 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17560,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\delete-properties-from-a-javascript-object.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return z;})(myDog);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7993c9ca9feddfaeb7bdef",
      "title": "Divide One Decimal by Another with JavaScript",
      "challengeType": 1,
      "dashedName": "divide-one-decimal-by-another-with-javascript",
      "description": "Now let's divide one decimal by another.",
      "instructions": "Change the `0.0` so that `quotient` will equal to `2.2`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const quotient = 0.0 / 2.0; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const quotient = 4.4 / 2.0;"
        }
      ],
      "tests": [
        {
          "text": "The variable `quotient` should equal `2.2`",
          "testCode": "assert(quotient === 2.2);"
        },
        {
          "text": "You should use the `/` operator to divide 4.4 by 2",
          "testCode": "assert(/4\\.40*\\s*\\/\\s*2\\.*0*/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "The quotient variable should only be assigned once",
          "testCode": "assert(__helpers.removeJSComments(code).match(/quotient\\s*=/g).length === 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18255,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\divide-one-decimal-by-another-with-javascript.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c11feddfaeb6bdef",
      "title": "Divide One Number by Another with JavaScript",
      "challengeType": 1,
      "dashedName": "divide-one-number-by-another-with-javascript",
      "description": "We can also divide one number by another.\n\nJavaScript uses the `/` symbol for division.\n\n**Example**\n\n```js\nconst myVar = 16 / 2;\n```\n\n`myVar` now has the value `8`.",
      "instructions": "Change the `0` so that the `quotient` is equal to `2`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const quotient = 66 / 0;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const quotient = 66 / 33;"
        }
      ],
      "tests": [
        {
          "text": "The variable `quotient` should be equal to 2.",
          "testCode": "assert(quotient === 2);"
        },
        {
          "text": "You should use the `/` operator.",
          "testCode": "assert(/\\d+\\s*\\/\\s*\\d+/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17566,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\divide-one-number-by-another-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return 'quotient = '+z;})(quotient);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b6",
      "title": "Escape Sequences in Strings",
      "challengeType": 1,
      "dashedName": "escape-sequences-in-strings",
      "description": "Quotes are not the only characters that can be <dfn>escaped</dfn> inside a string. Escape sequences allow you to use characters you may not otherwise be able to use in a string.\n\n<table><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td><code>\\'</code></td><td>single quote</td></tr><tr><td><code>\\\"</code></td><td>double quote</td></tr><tr><td><code>\\\\</code></td><td>backslash</td></tr><tr><td><code>\\n</code></td><td>newline</td></tr><tr><td><code>\\t</code></td><td>tab</td></tr><tr><td><code>\\r</code></td><td>carriage return</td></tr><tr><td><code>\\b</code></td><td>backspace</td></tr><tr><td><code>\\f</code></td><td>form feed</td></tr></tbody></table>\n\n*Note that the backslash itself must be escaped in order to display as a backslash.*",
      "instructions": "Assign the following three lines of text into the single variable `myStr` using escape sequences.\n\n<pre>\nFirstLine\n    \\SecondLine\nThirdLine\n</pre>\n\nYou will need to use escape sequences to insert special characters correctly. You will also need to follow the spacing as it looks above, with no spaces between escape sequences or words.\n\n**Note:** The indentation for `SecondLine` is achieved with the tab escape character, not spaces.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myStr = \"\"; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myStr = \"FirstLine\\n\\t\\\\SecondLine\\nThirdLine\";"
        }
      ],
      "tests": [
        {
          "text": "`myStr` should not contain any spaces",
          "testCode": "assert(!/ /.test(myStr));"
        },
        {
          "text": "`myStr` should contain the strings `FirstLine`, `SecondLine` and `ThirdLine` (remember case sensitivity)",
          "testCode": "assert(\n  /FirstLine/.test(myStr) && /SecondLine/.test(myStr) && /ThirdLine/.test(myStr)\n);"
        },
        {
          "text": "`FirstLine` should be followed by the newline character `\\n`",
          "testCode": "assert(/FirstLine\\n/.test(myStr));"
        },
        {
          "text": "`myStr` should contain a tab character `\\t` which follows a newline character",
          "testCode": "assert(/\\n\\t/.test(myStr));"
        },
        {
          "text": "`SecondLine` should be preceded by the backslash character `\\`",
          "testCode": "assert(/\\\\SecondLine/.test(myStr));"
        },
        {
          "text": "There should be a newline character between `SecondLine` and `ThirdLine`",
          "testCode": "assert(/SecondLine\\nThirdLine/.test(myStr));"
        },
        {
          "text": "`myStr` should only contain characters shown in the instructions",
          "testCode": "assert(myStr === 'FirstLine\\n\\t\\\\SecondLine\\nThirdLine');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17567,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\escape-sequences-in-strings.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b5",
      "title": "Escaping Literal Quotes in Strings",
      "challengeType": 1,
      "dashedName": "escaping-literal-quotes-in-strings",
      "description": "When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: `\"` or `'` inside of your string?\n\nIn JavaScript, you can <dfn>escape</dfn> a quote from considering it as an end of string quote by placing a <dfn>backslash</dfn> (`\\`) in front of the quote.\n\n```js\nconst sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";\n```\n\nThis signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, you would get:\n\n```js\nAlan said, \"Peter is learning JavaScript\".\n```",
      "instructions": "Use <dfn>backslashes</dfn> to assign a string to the `myStr` variable so that if you were to print it to the console, you would see:\n\n```js\nI am a \"double quoted\" string inside \"double quotes\".\n```",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myStr = \"\"; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myStr = \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".\";"
        }
      ],
      "tests": [
        {
          "text": "You should use two double quotes (`\"`) and four escaped double quotes (`\\\"`).",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\\\\"/g).length === 4 && __helpers.removeJSComments(code).match(/[^\\\\]\"/g).length === 2);"
        },
        {
          "text": "Variable `myStr` should contain the string: `I am a \"double quoted\" string inside \"double quotes\".`",
          "testCode": "assert(/I am a \"double quoted\" string inside \"double quotes(\\.\"|\"\\.)$/.test(myStr));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17568,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\escaping-literal-quotes-in-strings.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){\n  if(typeof myStr === 'string') {\n    console.log(\"myStr = \\\"\" + myStr + \"\\\"\");\n  } else {\n    console.log(\"myStr is undefined\");\n  }\n})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "587d7b87367417b2b2512b3f",
      "title": "Explore Differences Between the var and let Keywords",
      "challengeType": 1,
      "dashedName": "explore-differences-between-the-var-and-let-keywords",
      "description": "One of the biggest problems with declaring variables with the `var` keyword is that you can easily overwrite variable declarations:\n\n```js\nvar camper = \"James\";\nvar camper = \"David\";\nconsole.log(camper);\n```\n\nIn the code above, the `camper` variable is originally declared as `James`, and is then overridden to be `David`. The console then displays the string `David`.\n\nIn a small application, you might not run into this type of problem. But as your codebase becomes larger, you might accidentally overwrite a variable that you did not intend to. Because this behavior does not throw an error, searching for and fixing bugs becomes more difficult.\n\nA keyword called `let` was introduced in ES6, a major update to JavaScript, to solve this potential issue with the `var` keyword. You'll learn about other ES6 features in later challenges.\n\nIf you replace `var` with `let` in the code above, it results in an error:\n\n```js\nlet camper = \"James\";\nlet camper = \"David\";\n```\n\nThe error can be seen in your browser console.\n\nSo unlike `var`, when you use `let`, a variable with the same name can only be declared once.",
      "instructions": "Update the code so it only uses the `let` keyword.",
      "boilerplate": [
        {
          "language": "js",
          "code": "var catName = \"Oliver\";\nvar catSound = \"Meow!\";"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let catName = \"Oliver\";\nlet catSound = \"Meow!\";"
        }
      ],
      "tests": [
        {
          "text": "`var` should not exist in the code.",
          "testCode": "assert.notMatch(code, /var/g);"
        },
        {
          "text": "`catName` should be the string `Oliver`.",
          "testCode": "assert.equal(catName, 'Oliver');"
        },
        {
          "text": "`catSound` should be the string `Meow!`",
          "testCode": "assert.equal(catSound, 'Meow!');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301202,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\explore-differences-between-the-var-and-let-keywords.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c448eddfaeb5bdef",
      "title": "Find the Length of a String",
      "challengeType": 1,
      "dashedName": "find-the-length-of-a-string",
      "description": "You can find the length of a `String` value by writing `.length` after the string variable or string literal.\n\n```js\nconsole.log(\"Alan Peter\".length);\n```\n\nThe value `10` would be displayed in the console. Note that the space character between \"Alan\" and \"Peter\" is also counted.\n\nFor example, if we created a variable `const firstName = \"Ada\"`, we could find out how long the string `Ada` is by using the `firstName.length` property.",
      "instructions": "Use the `.length` property to set `lastNameLength` to the number of characters in `lastName`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nlet lastNameLength = 0;\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nlastNameLength = lastName;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let lastNameLength = 0;\nconst lastName = \"Lovelace\";\nlastNameLength = lastName.length;"
        }
      ],
      "tests": [
        {
          "text": "You should not change the variable declarations in the `// Setup` section.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(/let lastNameLength = 0;/) &&\n    __helpers.removeJSComments(code).match(/const lastName = \"Lovelace\";/)\n);"
        },
        {
          "text": "`lastNameLength` should be equal to eight.",
          "testCode": "assert(typeof lastNameLength !== 'undefined' && lastNameLength === 8);"
        },
        {
          "text": "You should be getting the length of `lastName` by using `.length` like this: `lastName.length`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/=\\s*lastName\\.length/g) && !__helpers.removeJSComments(code).match(/lastName\\s*=\\s*8/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18182,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\find-the-length-of-a-string.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ae",
      "title": "Finding a Remainder in JavaScript",
      "challengeType": 1,
      "dashedName": "finding-a-remainder-in-javascript",
      "description": "The <dfn>remainder</dfn> operator `%` gives the remainder of the division of two numbers.\n\n**Example**\n\n<pre>\n5 % 2 = 1\n5 / 2 = 2 remainder 1\n2 * 2 = 4\n5 - 4 = 1\n</pre>\n\n**Usage**  \nIn mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by `2`. Even numbers have a remainder of `0`, while odd numbers a remainder of `1`.\n\n<pre>\n17 % 2 = 1\n48 % 2 = 0\n</pre>\n\n**Note:** The <dfn>remainder</dfn> operator is sometimes incorrectly referred to as the modulus operator. It is very similar to modulus, but does not work properly with negative numbers.",
      "instructions": "Set `remainder` equal to the remainder of `11` divided by `3` using the <dfn>remainder</dfn> (`%`) operator.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const remainder = 0;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const remainder = 11 % 3;"
        }
      ],
      "tests": [
        {
          "text": "The variable `remainder` should be initialized",
          "testCode": "assert(/(const|let|var)\\s+?remainder/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "The value of `remainder` should be `2`",
          "testCode": "assert(remainder === 2);"
        },
        {
          "text": "You should use the `%` operator",
          "testCode": "assert(/\\s+?remainder\\s*?=\\s*?.*%.*;?/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18184,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\finding-a-remainder-in-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function (y) {\n  return 'remainder = ' + y;\n})(remainder);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c11feddfaeb9bdef",
      "title": "Generate Random Fractions with JavaScript",
      "challengeType": 1,
      "dashedName": "generate-random-fractions-with-javascript",
      "description": "Random numbers are useful for creating random behavior.\n\nJavaScript has a `Math.random()` function that generates a random decimal number between `0` (inclusive) and `1` (exclusive). Thus `Math.random()` can return a `0` but never return a `1`.\n\n**Note:** Like <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Storing Values with the Assignment Operator</a>, all function calls will be resolved before the `return` executes, so we can `return` the value of the `Math.random()` function.",
      "instructions": "Change `randomFraction` to return a random number instead of returning `0`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function randomFraction() {\n\n  // Only change code below this line\n\n  return 0;\n\n  // Only change code above this line\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function randomFraction() {\n  return Math.random();\n}"
        }
      ],
      "tests": [
        {
          "text": "`randomFraction` should return a random number.",
          "testCode": "assert(typeof randomFraction() === 'number');"
        },
        {
          "text": "The number returned by `randomFraction` should be a decimal.",
          "testCode": "assert((randomFraction() + '').match(/\\./g));"
        },
        {
          "text": "You should be using `Math.random` to generate the random decimal number.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/Math\\.random/g).length >= 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18185,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\generate-random-fractions-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){return randomFraction();})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c12feddfaeb1bdef",
      "title": "Generate Random Whole Numbers with JavaScript",
      "challengeType": 1,
      "dashedName": "generate-random-whole-numbers-with-javascript",
      "description": "You can generate random decimal numbers with `Math.random()`, but sometimes you need to generate random whole numbers. The following process will give you a random whole number less than `20`:\n\n1. Use `Math.random()` to generate a random decimal number.\n2. Multiply that random decimal number by `20`.\n3. Use `Math.floor()` to round this number down to its nearest whole number.\n\nRemember that `Math.random()` can never quite return a `1`, so it's impossible to actually get `20` since you are rounding down with `Math.floor()`. This process will give you a random whole number in the range from `0` to `19`.\n\nPutting everything together, this is what your code looks like:\n\n```js\nMath.floor(Math.random() * 20);\n```\n\nYou are calling `Math.random()`, multiplying the result by 20, then passing the value to `Math.floor()` to round the value down to the nearest whole number.",
      "instructions": "Use this technique to generate and return a random whole number in the range from `0` to `9`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function randomWholeNum() {\n  return Math.random();\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function randomWholeNum() {\n  return Math.floor(Math.random() * 10);\n}"
        }
      ],
      "tests": [
        {
          "text": "The result of `randomWholeNum` should be a whole number.",
          "testCode": "assert(\n  typeof randomWholeNum() === 'number' &&\n    (function () {\n      var r = randomWholeNum();\n      return Math.floor(r) === r;\n    })()\n);"
        },
        {
          "text": "You should use `Math.random` to generate a random number.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/Math.random/g).length >= 1);"
        },
        {
          "text": "You should have multiplied the result of `Math.random` by 10 to make it a number in the range from zero to nine.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(/\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\*\\s*?10[\\D]\\s*?/g) ||\n    __helpers.removeJSComments(code).match(/\\s*?10\\s*?\\*\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?/g)\n);"
        },
        {
          "text": "You should use `Math.floor` to remove the decimal part of the number.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/Math.floor/g).length >= 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18186,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\generate-random-whole-numbers-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){return randomWholeNum();})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c12feddfaeb2bdef",
      "title": "Generate Random Whole Numbers within a Range",
      "challengeType": 1,
      "dashedName": "generate-random-whole-numbers-within-a-range",
      "description": "You can generate a random whole number in the range from zero to a given number. You can also pick a different lower number for this range.\n\nYou'll call your minimum number `min` and your maximum number `max`.\n\nThis formula gives a random whole number in the range from `min` to `max`. Take a moment to read it and try to understand what this code is doing:\n\n```js\nMath.floor(Math.random() * (max - min + 1)) + min\n```",
      "instructions": "Create a function called `randomRange` that takes a range `myMin` and `myMax` and returns a random whole number that's greater than or equal to `myMin` and less than or equal to `myMax`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function randomRange(myMin, myMax) {\n  return 0;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function randomRange(myMin, myMax) {\n  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}"
        }
      ],
      "tests": [
        {
          "text": "The lowest random number that can be generated by `randomRange` should be equal to your minimum number, `myMin`.",
          "testCode": "assert(calcMin === 5);"
        },
        {
          "text": "The highest random number that can be generated by `randomRange` should be equal to your maximum number, `myMax`.",
          "testCode": "assert(calcMax === 15);"
        },
        {
          "text": "The random number generated by `randomRange` should be an integer, not a decimal.",
          "testCode": "assert(randomRange(0, 1) % 1 === 0);"
        },
        {
          "text": "`randomRange` should use both `myMax` and `myMin`, and return a random number in your range.",
          "testCode": "assert(\n  (function () {\n    if (\n      __helpers.removeJSComments(code).match(/myMax/g).length > 1 &&\n      __helpers.removeJSComments(code).match(/myMin/g).length > 2 &&\n      __helpers.removeJSComments(code).match(/Math.floor/g) &&\n      __helpers.removeJSComments(code).match(/Math.random/g)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18187,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\generate-random-whole-numbers-within-a-range.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "var calcMin = 100;\nvar calcMax = -100;\nfor(var i = 0; i < 100; i++) {\n  var result = randomRange(5,15);\n  calcMin = Math.min(calcMin, result);\n  calcMax = Math.max(calcMax, result);\n}\n(function(){\n  if(typeof myRandom === 'number') {\n    return \"myRandom = \" + myRandom;\n  } else {\n    return \"myRandom undefined\";\n  }\n})()"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244be",
      "title": "Global Scope and Functions",
      "challengeType": 1,
      "dashedName": "global-scope-and-functions",
      "description": "In JavaScript, <dfn>scope</dfn> refers to the visibility of variables. Variables which are defined outside of a function block have <dfn>Global</dfn> scope. This means, they can be seen everywhere in your JavaScript code.\n\nVariables which are declared without the `let` or `const` keywords are automatically created in the `global` scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with `let` or `const`.",
      "instructions": "Using `let` or `const`, declare a global variable named `myGlobal` outside of any function. Initialize it with a value of `10`.\n\nInside function `fun1`, assign `5` to `oopsGlobal` ***without*** using the `var`, `let` or `const` keywords.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Declare the myGlobal variable below this line\n\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal here\n\n}\n\n// Only change code above this line\n\nfunction fun2() {\n  let output = \"\";\n  if (typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if (typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myGlobal = 10;\n\nfunction fun1() {\n  oopsGlobal = 5;\n}\n\nfunction fun2() {\n  let output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"
        }
      ],
      "tests": [
        {
          "text": "`myGlobal` should be defined",
          "testCode": "assert(typeof myGlobal != 'undefined');"
        },
        {
          "text": "`myGlobal` should have a value of `10`",
          "testCode": "assert(myGlobal === 10);"
        },
        {
          "text": "`myGlobal` should be declared using the `let` or `const` keywords",
          "testCode": "assert(/(let|const)\\s+myGlobal/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`oopsGlobal` should be a global variable and have a value of `5`",
          "testCode": "fun1();\nassert(typeof oopsGlobal != 'undefined');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18193,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\global-scope-and-functions.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c0",
      "title": "Global vs. Local Scope in Functions",
      "challengeType": 1,
      "dashedName": "global-vs--local-scope-in-functions",
      "description": "It is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the local variable takes precedence over the global variable.\n\nIn this example:\n\n```js\nconst someVar = \"Hat\";\n\nfunction myFun() {\n  const someVar = \"Head\";\n  return someVar;\n}\n```\n\nThe function `myFun` will return the string `Head` because the local version of the variable is present.",
      "instructions": "Add a local variable to `myOutfit` function to override the value of `outerWear` with the string `sweater`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst outerWear = \"T-Shirt\";\n\nfunction myOutfit() {\n  // Only change code below this line\n\n  // Only change code above this line\n  return outerWear;\n}\n\nmyOutfit();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const outerWear = \"T-Shirt\";\nfunction myOutfit() {\n  const outerWear = \"sweater\";\n  return outerWear;\n}"
        }
      ],
      "tests": [
        {
          "text": "You should not change the value of the global `outerWear`.",
          "testCode": "assert(outerWear === 'T-Shirt');"
        },
        {
          "text": "`myOutfit` should return the string `sweater`.",
          "testCode": "assert(myOutfit() === 'sweater');"
        },
        {
          "text": "You should not change the return statement.",
          "testCode": "assert(/return outerWear/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18194,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\global-vs.-local-scope-in-functions.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5664820f61c48e80c9fa476c",
      "title": "Golf Code",
      "challengeType": 1,
      "dashedName": "golf-code",
      "description": "In the game of Golf, each hole has a `par`, meaning, the average number of `strokes` a golfer is expected to make in order to sink the ball in the hole to complete the play. Depending on how far above or below `par` your `strokes` are, there is a different nickname.\n\nYour function will be passed `par` and `strokes` arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):\n\n<table><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&#x3C;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>>= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>\n\n`par` and `strokes` will always be numeric and positive. We have added an array of all the names for your convenience.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "const names = [\"Hole-in-one!\", \"Eagle\", \"Birdie\", \"Par\", \"Bogey\", \"Double Bogey\", \"Go Home!\"];\n\nfunction golfScore(par, strokes) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ngolfScore(5, 4);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function golfScore(par, strokes) {\n  if (strokes === 1) {\n    return \"Hole-in-one!\";\n  }\n\n  if (strokes <= par - 2) {\n    return \"Eagle\";\n  }\n\n  if (strokes === par - 1) {\n    return \"Birdie\";\n  }\n\n  if (strokes === par) {\n    return \"Par\";\n  }\n\n  if (strokes === par + 1) {\n    return \"Bogey\";\n  }\n\n  if(strokes === par + 2) {\n    return \"Double Bogey\";\n  }\n\n  return \"Go Home!\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`golfScore(4, 1)` should return the string `Hole-in-one!`",
          "testCode": "assert(golfScore(4, 1) === 'Hole-in-one!');"
        },
        {
          "text": "`golfScore(4, 2)` should return the string `Eagle`",
          "testCode": "assert(golfScore(4, 2) === 'Eagle');"
        },
        {
          "text": "`golfScore(5, 2)` should return the string `Eagle`",
          "testCode": "assert(golfScore(5, 2) === 'Eagle');"
        },
        {
          "text": "`golfScore(4, 3)` should return the string `Birdie`",
          "testCode": "assert(golfScore(4, 3) === 'Birdie');"
        },
        {
          "text": "`golfScore(4, 4)` should return the string `Par`",
          "testCode": "assert(golfScore(4, 4) === 'Par');"
        },
        {
          "text": "`golfScore(1, 1)` should return the string `Hole-in-one!`",
          "testCode": "assert(golfScore(1, 1) === 'Hole-in-one!');"
        },
        {
          "text": "`golfScore(5, 5)` should return the string `Par`",
          "testCode": "assert(golfScore(5, 5) === 'Par');"
        },
        {
          "text": "`golfScore(4, 5)` should return the string `Bogey`",
          "testCode": "assert(golfScore(4, 5) === 'Bogey');"
        },
        {
          "text": "`golfScore(4, 6)` should return the string `Double Bogey`",
          "testCode": "assert(golfScore(4, 6) === 'Double Bogey');"
        },
        {
          "text": "`golfScore(4, 7)` should return the string `Go Home!`",
          "testCode": "assert(golfScore(4, 7) === 'Go Home!');"
        },
        {
          "text": "`golfScore(5, 9)` should return the string `Go Home!`",
          "testCode": "assert(golfScore(5, 9) === 'Go Home!');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18195,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\golf-code.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ac",
      "title": "Increment a Number with JavaScript",
      "challengeType": 1,
      "dashedName": "increment-a-number-with-javascript",
      "description": "You can easily <dfn>increment</dfn> or add one to a variable with the `++` operator.\n\n```js\ni++;\n```\n\nis the equivalent of\n\n```js\ni = i + 1;\n```\n\n**Note:** The entire line becomes `i++;`, eliminating the need for the equal sign.",
      "instructions": "Change the code to use the `++` operator on `myVar`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myVar = 87;\n\n// Only change code below this line\nmyVar = myVar + 1;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myVar = 87;\nmyVar++;"
        }
      ],
      "tests": [
        {
          "text": "`myVar` should equal `88`.",
          "testCode": "assert(myVar === 88);"
        },
        {
          "text": "You should not use the assignment operator.",
          "testCode": "assert(\n  /let\\s+myVar\\s*=\\s*87;\\s*\\/*.*\\s*([+]{2}\\s*myVar|myVar\\s*[+]{2})/.test(__helpers.removeJSComments(code))\n);"
        },
        {
          "text": "You should use the `++` operator.",
          "testCode": "assert(/[+]{2}\\s*myVar|myVar\\s*[+]{2}/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should not change code above the specified comment.",
          "testCode": "assert(/let myVar = 87;/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18201,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\increment-a-number-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return 'myVar = ' + z;})(myVar);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244a9",
      "title": "Initializing Variables with the Assignment Operator",
      "challengeType": 1,
      "dashedName": "initializing-variables-with-the-assignment-operator",
      "description": "It is common to <dfn>initialize</dfn> a variable to an initial value in the same line as it is declared.\n\n```js\nvar myVar = 0;\n```\n\nCreates a new variable called `myVar` and assigns it an initial value of `0`.",
      "instructions": "Define a variable `a` with `var` and initialize it to a value of `9`.",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var a = 9;"
        }
      ],
      "tests": [
        {
          "text": "You should initialize `a` to a value of `9`.",
          "testCode": "assert(/var\\s+a\\s*=\\s*9(\\s*;?\\s*)$/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301171,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\initializing-variables-with-the-assignment-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244db",
      "title": "Introducing Else If Statements",
      "challengeType": 1,
      "dashedName": "introducing-else-if-statements",
      "description": "If you have multiple conditions that need to be addressed, you can chain `if` statements together with `else if` statements.\n\n```js\nif (num > 15) {\n  return \"Bigger than 15\";\n} else if (num < 5) {\n  return \"Smaller than 5\";\n} else {\n  return \"Between 5 and 15\";\n}\n```",
      "instructions": "Convert the logic to use `else if` statements.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testElseIf(val) {\n  if (val > 10) {\n    return \"Greater than 10\";\n  }\n\n  if (val < 5) {\n    return \"Smaller than 5\";\n  }\n\n  return \"Between 5 and 10\";\n}\n\ntestElseIf(7);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testElseIf(val) {\n  if(val > 10) {\n    return \"Greater than 10\";\n  } else if(val < 5) {\n    return \"Smaller than 5\";\n  } else {\n    return \"Between 5 and 10\";\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have at least two `else` statements",
          "testCode": "assert(__helpers.removeJSComments(code).match(/else/g).length > 1);"
        },
        {
          "text": "You should have at least two `if` statements",
          "testCode": "assert(__helpers.removeJSComments(code).match(/if/g).length > 1);"
        },
        {
          "text": "You should have closing and opening curly braces for each `if else` code block.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /if\\s*\\((.+)\\)\\s*\\{[\\s\\S]+\\}\\s*else\\s+if\\s*\\((.+)\\)\\s*\\{[\\s\\S]+\\}\\s*else\\s*\\{[\\s\\S]+\\s*\\}/\n  )\n);"
        },
        {
          "text": "`testElseIf(0)` should return the string `Smaller than 5`",
          "testCode": "assert(testElseIf(0) === 'Smaller than 5');"
        },
        {
          "text": "`testElseIf(5)` should return the string `Between 5 and 10`",
          "testCode": "assert(testElseIf(5) === 'Between 5 and 10');"
        },
        {
          "text": "`testElseIf(7)` should return the string `Between 5 and 10`",
          "testCode": "assert(testElseIf(7) === 'Between 5 and 10');"
        },
        {
          "text": "`testElseIf(10)` should return the string `Between 5 and 10`",
          "testCode": "assert(testElseIf(10) === 'Between 5 and 10');"
        },
        {
          "text": "`testElseIf(12)` should return the string `Greater than 10`",
          "testCode": "assert(testElseIf(12) === 'Greater than 10');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18206,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\introducing-else-if-statements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244da",
      "title": "Introducing Else Statements",
      "challengeType": 1,
      "dashedName": "introducing-else-statements",
      "description": "When a condition for an `if` statement is true, the block of code following it is executed. What about when that condition is false? Normally nothing would happen. With an `else` statement, an alternate block of code can be executed.\n\n```js\nif (num > 10) {\n  return \"Bigger than 10\";\n} else {\n  return \"10 or Less\";\n}\n```",
      "instructions": "Combine the `if` statements into a single `if/else` statement.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testElse(val) {\n  let result = \"\";\n  // Only change code below this line\n\n  if (val > 5) {\n    result = \"Bigger than 5\";\n  }\n\n  if (val <= 5) {\n    result = \"5 or Smaller\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\ntestElse(4);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function testElse(val) {\n  let result = \"\";\n  if(val > 5) {\n    result = \"Bigger than 5\";\n  } else {\n    result = \"5 or Smaller\";\n  }\n  return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "You should only have one `if` statement in the editor",
          "testCode": "assert(__helpers.removeJSComments(code).match(/if/g).length === 1);"
        },
        {
          "text": "You should use an `else` statement",
          "testCode": "assert(/else/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`testElse(4)` should return the string `5 or Smaller`",
          "testCode": "assert(testElse(4) === '5 or Smaller');"
        },
        {
          "text": "`testElse(5)` should return the string `5 or Smaller`",
          "testCode": "assert(testElse(5) === '5 or Smaller');"
        },
        {
          "text": "`testElse(6)` should return the string `Bigger than 5`",
          "testCode": "assert(testElse(6) === 'Bigger than 5');"
        },
        {
          "text": "`testElse(10)` should return the string `Bigger than 5`",
          "testCode": "assert(testElse(10) === 'Bigger than 5');"
        },
        {
          "text": "You should not change the code above or below the specified comments.",
          "testCode": "assert(/let result = \"\";/.test(__helpers.removeJSComments(code)) && /return result;/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18207,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\introducing-else-statements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56104e9e514f539506016a5c",
      "title": "Iterate Odd Numbers With a For Loop",
      "challengeType": 1,
      "dashedName": "iterate-odd-numbers-with-a-for-loop",
      "description": "For loops don't have to iterate one at a time. By changing our `final-expression`, we can count by even numbers.\n\nWe'll start at `i = 0` and loop while `i < 10`. We'll increment `i` by 2 each loop with `i += 2`.\n\n```js\nconst ourArray = [];\n\nfor (let i = 0; i < 10; i += 2) {\n  ourArray.push(i);\n}\n```\n\n`ourArray` will now contain `[0, 2, 4, 6, 8]`. Let's change our `initialization` so we can count by odd numbers.",
      "instructions": "Push the odd numbers from 1 through 9 to `myArray` using a `for` loop.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [];\nfor (let i = 1; i < 10; i += 2) {\n  myArray.push(i);\n}"
        }
      ],
      "tests": [
        {
          "text": "You should be using a `for` loop for this.",
          "testCode": "assert(/for\\s*\\([^)]+?\\)/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`myArray` should equal `[1, 3, 5, 7, 9]`.",
          "testCode": "assert.deepEqual(myArray, [1, 3, 5, 7, 9]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18212,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\iterate-odd-numbers-with-a-for-loop.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5675e877dbd60be8ad28edc6",
      "title": "Iterate Through an Array with a For Loop",
      "challengeType": 1,
      "dashedName": "iterate-through-an-array-with-a-for-loop",
      "description": "A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a `for` loop. This code will output each element of the array `arr` to the console:\n\n```js\nconst arr = [10, 9, 8, 7, 6];\n\nfor (let i = 0; i < arr.length; i++) {\n   console.log(arr[i]);\n}\n```\n\nRemember that arrays have zero-based indexing, which means the last index of the array is `length - 1`. Our condition for this loop is `i < arr.length`, which stops the loop when `i` is equal to `length`. In this case the last iteration is `i === 4` i.e. when `i` becomes equal to `arr.length - 1` and outputs `6` to the console. Then `i` increases to `5`, and the loop terminates because `i < arr.length` is `false`.",
      "instructions": "Declare and initialize a variable `total` to `0`. Use a `for` loop to add the value of each element of the `myArr` array to `total`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArr = [2, 3, 4, 5, 6];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArr = [2, 3, 4, 5, 6];\nlet total = 0;\n\nfor (let i = 0; i < myArr.length; i++) {\n  total += myArr[i];\n}"
        }
      ],
      "tests": [
        {
          "text": "`total` should be declared and initialized to 0.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/(var|let|const)\\s*?total\\s*=\\s*0.*?;?/));"
        },
        {
          "text": "`total` should equal 20.",
          "testCode": "assert(total === 20);"
        },
        {
          "text": "You should use a `for` loop to iterate through `myArr`.",
          "testCode": "assert(/for\\s*\\(/g.test(__helpers.removeJSComments(code)) && /myArr\\s*\\[/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should not attempt to directly assign the value 20 to `total`.",
          "testCode": "assert(!__helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/total[=+-]0*[1-9]+/gm));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18216,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\iterate-through-an-array-with-a-for-loop.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(){if(typeof total !== 'undefined') { return \"total = \" + total; } else { return \"total is undefined\";}})()"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5a2efd662fb457916e1fe604",
      "title": "Iterate with JavaScript Do...While Loops",
      "challengeType": 1,
      "dashedName": "iterate-with-javascript-do",
      "description": "The next type of loop you will learn is called a `do...while` loop. It is called a `do...while` loop because it will first `do` one pass of the code inside the loop no matter what, and then continue to run the loop `while` the specified condition evaluates to `true`.\n\n```js\nconst ourArray = [];\nlet i = 0;\n\ndo {\n  ourArray.push(i);\n  i++;\n} while (i < 5);\n```\n\nThe example above behaves similar to other types of loops, and the resulting array will look like `[0, 1, 2, 3, 4]`. However, what makes the `do...while` different from other loops is how it behaves when the condition fails on the first check. Let's see this in action. Here is a regular `while` loop that will run the code in the loop as long as `i < 5`:\n\n```js\nconst ourArray = []; \nlet i = 5;\n\nwhile (i < 5) {\n  ourArray.push(i);\n  i++;\n}\n```\n\nIn this example, we initialize the value of `ourArray` to an empty array and the value of `i` to 5. When we execute the `while` loop, the condition evaluates to `false` because `i` is not less than 5, so we do not execute the code inside the loop. The result is that `ourArray` will end up with no values added to it, and it will still look like `[]` when all of the code in the example above has completed running. Now, take a look at a `do...while` loop:\n\n```js\nconst ourArray = []; \nlet i = 5;\n\ndo {\n  ourArray.push(i);\n  i++;\n} while (i < 5);\n```\n\nIn this case, we initialize the value of `i` to 5, just like we did with the `while` loop. When we get to the next line, there is no condition to evaluate, so we go to the code inside the curly braces and execute it. We will add a single element to the array and then increment `i` before we get to the condition check. When we finally evaluate the condition `i < 5` on the last line, we see that `i` is now 6, which fails the conditional check, so we exit the loop and are done. At the end of the above example, the value of `ourArray` is `[5]`. Essentially, a `do...while` loop ensures that the code inside the loop will run at least once. Let's try getting a `do...while` loop to work by pushing values to an array.",
      "instructions": "Change the `while` loop in the code to a `do...while` loop so the loop will push only the number `10` to `myArray`, and `i` will be equal to `11` when your code has finished running.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [];\nlet i = 10;\n\n// Only change code below this line\nwhile (i < 5) {\n  myArray.push(i);\n  i++;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [];\nlet i = 10;\ndo {\n  myArray.push(i);\n  i++;\n} while (i < 5)"
        }
      ],
      "tests": [
        {
          "text": "You should be using a `do...while` loop for this exercise.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/do/g));"
        },
        {
          "text": "`myArray` should equal `[10]`.",
          "testCode": "assert.deepEqual(myArray, [10]);"
        },
        {
          "text": "`i` should equal `11`",
          "testCode": "assert.equal(i, 11);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301172,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\iterate-with-javascript-do...while-loops.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c11feddfaeb5bdef",
      "title": "Iterate with JavaScript For Loops",
      "challengeType": 1,
      "dashedName": "iterate-with-javascript-for-loops",
      "description": "You can run the same code multiple times by using a loop.\n\nThe most common type of JavaScript loop is called a `for` loop because it runs for a specific number of times.\n\nFor loops are declared with three optional expressions separated by semicolons:\n\n`for (a; b; c)`, where `a` is the initialization statement, `b` is the condition statement, and `c` is the final expression.\n\nThe initialization statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.\n\nThe condition statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to `true`. When the condition is `false` at the start of the iteration, the loop will stop executing. This means if the condition starts as false, your loop will never execute.\n\nThe final expression is executed at the end of each loop iteration, prior to the next condition check and is usually used to increment or decrement your loop counter.\n\nIn the following example we initialize with `i = 0` and iterate while our condition `i < 5` is true. We'll increment `i` by `1` in each loop iteration with `i++` as our final expression.\n\n```js\nconst ourArray = [];\n\nfor (let i = 0; i < 5; i++) {\n  ourArray.push(i);\n}\n```\n\n`ourArray` will now have the value `[0, 1, 2, 3, 4]`.",
      "instructions": "Use a `for` loop to push the values 1 through 5 onto `myArray`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [];\nfor (let i = 1; i < 6; i++) {\n  myArray.push(i);\n}"
        }
      ],
      "tests": [
        {
          "text": "You should be using a `for` loop for this.",
          "testCode": "assert(/for\\s*\\([^)]+?\\)/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`myArray` should equal `[1, 2, 3, 4, 5]`.",
          "testCode": "assert.deepEqual(myArray, [1, 2, 3, 4, 5]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18219,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\iterate-with-javascript-for-loops.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if (typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c11feddfaeb1bdef",
      "title": "Iterate with JavaScript While Loops",
      "challengeType": 1,
      "dashedName": "iterate-with-javascript-while-loops",
      "description": "You can run the same code multiple times by using a loop.\n\nThe first type of loop we will learn is called a `while` loop because it runs while a specified condition is true and stops once that condition is no longer true.\n\n```js\nconst ourArray = [];\nlet i = 0;\n\nwhile (i < 5) {\n  ourArray.push(i);\n  i++;\n}\n```\n\nIn the code example above, the `while` loop will execute 5 times and append the numbers 0 through 4 to `ourArray`.\n\nLet's try getting a while loop to work by pushing values to an array.",
      "instructions": "Add the numbers 5 through 0 (inclusive) in descending order to `myArray` using a `while` loop.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [];\nlet i = 5;\nwhile (i >= 0) {\n  myArray.push(i);\n  i--;\n}"
        }
      ],
      "tests": [
        {
          "text": "You should be using a `while` loop for this.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/while/g));"
        },
        {
          "text": "`myArray` should equal `[5, 4, 3, 2, 1, 0]`.",
          "testCode": "assert.deepEqual(myArray, [5, 4, 3, 2, 1, 0]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18220,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\iterate-with-javascript-while-loops.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bf",
      "title": "Local Scope and Functions",
      "challengeType": 1,
      "dashedName": "local-scope-and-functions",
      "description": "Variables which are declared within a function, as well as the function parameters, have <dfn>local</dfn> scope. That means they are only visible within that function.\n\nHere is a function `myTest` with a local variable called `loc`.\n\n```js\nfunction myTest() {\n  const loc = \"foo\";\n  console.log(loc);\n}\n\nmyTest();\nconsole.log(loc);\n```\n\nThe `myTest()` function call will display the string `foo` in the console. The `console.log(loc)` line (outside of the `myTest` function) will throw an error, as `loc` is not defined outside of the function.",
      "instructions": "The editor has two `console.log`s to help you see what is happening. Check the console as you code to see how it changes. Declare a local variable `myVar` inside `myLocalScope` and run the tests.\n\n**Note:** The console will still display `ReferenceError: myVar is not defined`, but this will not cause the tests to fail.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function myLocalScope() {\n  // Only change code below this line\n\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function myLocalScope() {\n  // Only change code below this line\n  let myVar;\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);"
        }
      ],
      "tests": [
        {
          "text": "The code should not contain a global `myVar` variable.\n\n```js\nfunction declared() {\n  myVar;\n}\n\nassert.throws(declared, ReferenceError);\n```\n\nYou should add a local `myVar` variable.",
          "testCode": "assert(\n  /functionmyLocalScope\\(\\)\\{.*(var|let|const)myVar[\\s\\S]*}/.test(\n    __helpers.removeWhiteSpace(__helpers.removeJSComments(code))\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18227,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\local-scope-and-functions.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5690307fddb111c6084545d7",
      "title": "Logical Order in If Else Statements",
      "challengeType": 1,
      "dashedName": "logical-order-in-if-else-statements",
      "description": "Order is important in `if`, `else if` statements.\n\nThe function is executed from top to bottom so you will want to be careful of what statement comes first.\n\nTake these two functions as an example.\n\nHere's the first:\n\n```js\nfunction foo(x) {\n  if (x < 1) {\n    return \"Less than one\";\n  } else if (x < 2) {\n    return \"Less than two\";\n  } else {\n    return \"Greater than or equal to two\";\n  }\n}\n```\n\nAnd the second just switches the order of the statements:\n\n```js\nfunction bar(x) {\n  if (x < 2) {\n    return \"Less than two\";\n  } else if (x < 1) {\n    return \"Less than one\";\n  } else {\n    return \"Greater than or equal to two\";\n  }\n}\n```\n\nWhile these two functions look nearly identical if we pass a number to both we get different outputs.\n\n```js\nfoo(0)\nbar(0)\n```\n\n`foo(0)` will return the string `Less than one`, and `bar(0)` will return the string `Less than two`.",
      "instructions": "Change the order of logic in the function so that it will return the correct statements in all cases.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function orderMyLogic(val) {\n  if (val < 10) {\n    return \"Less than 10\";\n  } else if (val < 5) {\n    return \"Less than 5\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}\n\norderMyLogic(7);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function orderMyLogic(val) {\n  if(val < 5) {\n    return \"Less than 5\";\n  } else if (val < 10) {\n    return \"Less than 10\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`orderMyLogic(4)` should return the string `Less than 5`",
          "testCode": "assert(orderMyLogic(4) === 'Less than 5');"
        },
        {
          "text": "`orderMyLogic(6)` should return the string `Less than 10`",
          "testCode": "assert(orderMyLogic(6) === 'Less than 10');"
        },
        {
          "text": "`orderMyLogic(11)` should return the string `Greater than or equal to 10`",
          "testCode": "assert(orderMyLogic(11) === 'Greater than or equal to 10');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18228,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\logical-order-in-if-else-statements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cc",
      "title": "Manipulate Arrays With pop Method",
      "challengeType": 1,
      "dashedName": "manipulate-arrays-with-pop",
      "description": "Another way to change the data in an array is with the `.pop()` function.\n\n`.pop()` is used to pop a value off of the end of an array. We can store this popped off value by assigning it to a variable. In other words, `.pop()` removes the last element from an array and returns that element.\n\nAny type of entry can be popped off of an array - numbers, strings, even nested arrays.\n\n```js\nconst threeArr = [1, 4, 6];\nconst oneDown = threeArr.pop();\nconsole.log(oneDown);\nconsole.log(threeArr);\n```\n\nThe first `console.log` will display the value `6`, and the second will display the value `[1, 4]`.",
      "instructions": "Use the `.pop()` function to remove the last item from `myArray` and assign the popped off value to a new variable, `removedFromMyArray`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [[\"John\", 23], [\"cat\", 2]];\nconst removedFromMyArray = myArray.pop();"
        }
      ],
      "tests": [
        {
          "text": "`myArray` should only contain `[[\"John\", 23]]`.",
          "testCode": "assert(\n  (function (d) {\n    if (d[0][0] == 'John' && d[0][1] === 23 && d[1] == undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"
        },
        {
          "text": "You should use `pop()` on `myArray`.",
          "testCode": "assert(/removedFromMyArray\\s*=\\s*myArray\\s*.\\s*pop\\s*(\\s*)/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`removedFromMyArray` should only contain `[\"cat\", 2]`.",
          "testCode": "assert(\n  (function (d) {\n    if (d[0] == 'cat' && d[1] === 2 && d[2] == undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  })(removedFromMyArray)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18236,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\manipulate-arrays-with-pop.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if (typeof removedFromMyArray !== 'undefined') (function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cb",
      "title": "Manipulate Arrays With push Method",
      "challengeType": 1,
      "dashedName": "manipulate-arrays-with-push",
      "description": "An easy way to append data to the end of an array is via the `push()` method.\n\nThe `push()` method takes one or more <dfn>arguments</dfn> and appends them to the end of the array, in the order in which they appear. It returns the new length of the array.\n\nExamples:\n\n```js\nconst arr1 = [1, 2, 3];\narr1.push(4, 5);\n\nconst arr2 = [\"Stimpson\", \"J\", \"cat\"];\narr2.push([\"happy\", \"joy\"]);\n```\n\n`arr1` now has the value `[1, 2, 3, 4, 5]` and `arr2` has the value `[\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]`.",
      "instructions": "Push `[\"dog\", 3]` onto the end of the `myArray` variable.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);"
        }
      ],
      "tests": [
        {
          "text": "`myArray` should now equal `[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]`.",
          "testCode": "assert(\n  (function (d) {\n    if (\n      d[2] != undefined &&\n      d[0][0] == 'John' &&\n      d[0][1] === 23 &&\n      d[2][0] == 'dog' &&\n      d[2][1] === 3 &&\n      d[2].length == 2\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18237,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\manipulate-arrays-with-push.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return 'myArray = ' + JSON.stringify(z);})(myArray);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cd",
      "title": "Manipulate Arrays With shift Method",
      "challengeType": 1,
      "dashedName": "manipulate-arrays-with-shift",
      "description": "`pop()` always removes the last element of an array. What if you want to remove the first?\n\nThat's where `.shift()` comes in. It works just like `.pop()`, except it removes the first element instead of the last.\n\nExample:\n\n```js\nconst ourArray = [\"Stimpson\", \"J\", [\"cat\"]];\nconst removedFromOurArray = ourArray.shift();\n```\n\n`removedFromOurArray` would have a value of the string `Stimpson`, and `ourArray` would have `[\"J\", [\"cat\"]]`.",
      "instructions": "Use the `.shift()` function to remove the first item from `myArray` and assign the \"shifted off\" value to a new variable, `removedFromMyArray`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line\nconst removedFromMyArray = myArray.shift();"
        }
      ],
      "tests": [
        {
          "text": "`myArray` should now equal `[[\"dog\", 3]]`.",
          "testCode": "assert(\n  (function (d) {\n    if (d[0][0] == 'dog' && d[0][1] === 3 && d[1] == undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"
        },
        {
          "text": "`removedFromMyArray` should contain `[\"John\", 23]`.",
          "testCode": "assert(\n  (function (d) {\n    if (\n      d[0] == 'John' &&\n      d[1] === 23 &&\n      typeof removedFromMyArray === 'object'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(removedFromMyArray)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18238,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\manipulate-arrays-with-shift.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if (typeof removedFromMyArray !== 'undefined') (function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392ce",
      "title": "Manipulate Arrays With unshift Method",
      "challengeType": 1,
      "dashedName": "manipulate-arrays-with-unshift",
      "description": "Not only can you `shift` elements off of the beginning of an array, you can also `unshift` elements to the beginning of an array i.e. add elements in front of the array.\n\n`.unshift()` works exactly like `.push()`, but instead of adding the element at the end of the array, `unshift()` adds the element at the beginning of the array.\n\nExample:\n\n```js\nconst ourArray = [\"Stimpson\", \"J\", \"cat\"];\nourArray.shift();\nourArray.unshift(\"Happy\");\n```\n\nAfter the `shift`, `ourArray` would have the value `[\"J\", \"cat\"]`. After the `unshift`, `ourArray` would have the value `[\"Happy\", \"J\", \"cat\"]`.",
      "instructions": "Add `[\"Paul\", 35]` to the beginning of the `myArray` variable using `unshift()`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);"
        }
      ],
      "tests": [
        {
          "text": "`myArray` should now have `[[\"Paul\", 35], [\"dog\", 3]]`.",
          "testCode": "assert(\n  (function (d) {\n    if (\n      typeof d[0] === 'object' &&\n      d[0][0] == 'Paul' &&\n      d[0][1] === 35 &&\n      d[1][0] != undefined &&\n      d[1][0] == 'dog' &&\n      d[1][1] != undefined &&\n      d[1][1] == 3\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18239,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\manipulate-arrays-with-unshift.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(y, z){return 'myArray = ' + JSON.stringify(y);})(myArray);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cb",
      "title": "Manipulating Complex Objects",
      "challengeType": 1,
      "dashedName": "manipulating-complex-objects",
      "description": "Sometimes you may want to store data in a flexible <dfn>Data Structure</dfn>. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, <dfn>functions</dfn>, and <dfn>objects</dfn>.\n\nHere's an example of a complex data structure:\n\n```js\nconst ourMusic = [\n  {\n    \"artist\": \"Daft Punk\",\n    \"title\": \"Homework\",\n    \"release_year\": 1997,\n    \"formats\": [ \n      \"CD\", \n      \"Cassette\", \n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];\n```\n\nThis is an array which contains one object inside. The object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested `formats` array. If you want to add more album records, you can do this by adding records to the top level array. Objects hold data in a property, which has a key-value format. In the example above, `\"artist\": \"Daft Punk\"` is a property that has a key of `artist` and a value of `Daft Punk`.\n\n**Note:** You will need to place a comma after every object in the array, unless it is the last object in the array.",
      "instructions": "Add a new album to the `myMusic` array. Add `artist` and `title` strings, `release_year` number, and a `formats` array of strings.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CD\",\n      \"8T\",\n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\" ],\n    \"gold\": true\n  },\n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\",\n    \"CD\",\n  ]\n  }\n];"
        }
      ],
      "tests": [
        {
          "text": "`myMusic` should be an array",
          "testCode": "assert(Array.isArray(myMusic));"
        },
        {
          "text": "`myMusic` should have at least two elements",
          "testCode": "assert(myMusic.length > 1);"
        },
        {
          "text": "The elements in the `myMusic` array should be objects",
          "testCode": "myMusic.forEach(object => {assert.typeOf(object, 'object')})"
        },
        {
          "text": "Your object in `myMusic` should have at least 4 properties",
          "testCode": "myMusic.forEach(object => {assert(Object.keys(object).length > 3); });"
        },
        {
          "text": "Your object in `myMusic` should contain the property `artist` which is a string",
          "testCode": "myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['artist']);\n  assert.typeOf(object.artist, 'string')\n})"
        },
        {
          "text": "Your object in `myMusic` should contain the property `title` which is a string",
          "testCode": "myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['title']);\n  assert.typeOf(object.title, 'string')\n})"
        },
        {
          "text": "Your object in `myMusic` should contain the property `release_year` which is a number",
          "testCode": "myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['release_year']);\n  assert.typeOf(object.release_year, 'number')\n})"
        },
        {
          "text": "Your object in `myMusic` should contain a `formats` property which is an array",
          "testCode": "myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['formats']);\n  assert.typeOf(object.formats, 'array')\n})"
        },
        {
          "text": "`formats` should be an array of strings with at least two elements",
          "testCode": "myMusic.forEach(object => {\n  object.formats.forEach(format => {\n    assert.typeOf(format, 'string')\n  });\n  assert.isAtLeast(object.formats.length, 2)\n})"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18208,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\manipulating-complex-objects.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c11feddfaeb8bdef",
      "title": "Modify Array Data With Indexes",
      "challengeType": 1,
      "dashedName": "modify-array-data-with-indexes",
      "description": "Unlike strings, the entries of arrays are <dfn>mutable</dfn> and can be changed freely, even if the array was declared with `const`.\n\n**Example**\n\n```js\nconst ourArray = [50, 40, 30];\nourArray[0] = 15;\n```\n\n`ourArray` now has the value `[15, 40, 30]`.\n\n**Note:** There shouldn't be any spaces between the array name and the square brackets, like `array [0]`. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.",
      "instructions": "Modify the data stored at index `0` of `myArray` to a value of `45`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myArray = [18, 64, 99];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [18, 64, 99];\nmyArray[0] = 45;"
        }
      ],
      "tests": [
        {
          "text": "`myArray` should now be `[45, 64, 99]`.",
          "testCode": "assert(\n  (function () {\n    if (\n      typeof myArray != 'undefined' &&\n      myArray[0] == 45 &&\n      myArray[1] == 64 &&\n      myArray[2] == 99\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"
        },
        {
          "text": "You should be using correct index to modify the value in `myArray`.",
          "testCode": "assert(\n  (function () {\n    if (__helpers.removeJSComments(code).match(/myArray\\[0\\]\\s*=\\s*/g)) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18241,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\modify-array-data-with-indexes.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244df",
      "title": "Multiple Identical Options in Switch Statements",
      "challengeType": 1,
      "dashedName": "multiple-identical-options-in-switch-statements",
      "description": "If the `break` statement is omitted from a `switch` statement's `case`, the following `case` statement(s) are executed until a `break` is encountered. If you have multiple inputs with the same output, you can represent them in a `switch` statement like this:\n\n```js\nlet result = \"\";\nswitch (val) {\n  case 1:\n  case 2:\n  case 3:\n    result = \"1, 2, or 3\";\n    break;\n  case 4:\n    result = \"4 alone\";\n}\n```\n\nCases for 1, 2, and 3 will all produce the same result.",
      "instructions": "Write a switch statement to set `answer` for the following ranges:  \n`1-3` - `Low`  \n`4-6` - `Mid`  \n`7-9` - `High`\n\n**Note:** You will need to have a `case` statement for each number in the range.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sequentialSizes(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\nsequentialSizes(1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function sequentialSizes(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n\n  return answer;\n}"
        }
      ],
      "tests": [
        {
          "text": "`sequentialSizes(1)` should return the string `Low`",
          "testCode": "assert(sequentialSizes(1) === 'Low');"
        },
        {
          "text": "`sequentialSizes(2)` should return the string `Low`",
          "testCode": "assert(sequentialSizes(2) === 'Low');"
        },
        {
          "text": "`sequentialSizes(3)` should return the string `Low`",
          "testCode": "assert(sequentialSizes(3) === 'Low');"
        },
        {
          "text": "`sequentialSizes(4)` should return the string `Mid`",
          "testCode": "assert(sequentialSizes(4) === 'Mid');"
        },
        {
          "text": "`sequentialSizes(5)` should return the string `Mid`",
          "testCode": "assert(sequentialSizes(5) === 'Mid');"
        },
        {
          "text": "`sequentialSizes(6)` should return the string `Mid`",
          "testCode": "assert(sequentialSizes(6) === 'Mid');"
        },
        {
          "text": "`sequentialSizes(7)` should return the string `High`",
          "testCode": "assert(sequentialSizes(7) === 'High');"
        },
        {
          "text": "`sequentialSizes(8)` should return the string `High`",
          "testCode": "assert(sequentialSizes(8) === 'High');"
        },
        {
          "text": "`sequentialSizes(9)` should return the string `High`",
          "testCode": "assert(sequentialSizes(9) === 'High');"
        },
        {
          "text": "You should not use any `if` or `else` statements",
          "testCode": "assert(!/else/g.test(__helpers.removeJSComments(code)) || !/if/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should have nine `case` statements",
          "testCode": "assert(__helpers.removeJSComments(code).match(/case/g).length === 9);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18242,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\multiple-identical-options-in-switch-statements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7993c9c69feddfaeb7bdef",
      "title": "Multiply Two Decimals with JavaScript",
      "challengeType": 1,
      "dashedName": "multiply-two-decimals-with-javascript",
      "description": "In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.\n\nLet's multiply two decimals together to get their product.",
      "instructions": "Change the `0.0` so that product will equal `5.0`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const product = 2.0 * 0.0;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const product = 2.0 * 2.5;"
        }
      ],
      "tests": [
        {
          "text": "The variable `product` should equal `5.0`.",
          "testCode": "assert(product === 5.0);"
        },
        {
          "text": "You should use the `*` operator",
          "testCode": "assert(/\\*/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301173,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\multiply-two-decimals-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(y){return 'product = '+y;})(product);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1231c1c11feddfaeb5bdef",
      "title": "Multiply Two Numbers with JavaScript",
      "challengeType": 1,
      "dashedName": "multiply-two-numbers-with-javascript",
      "description": "We can also multiply one number by another.\n\nJavaScript uses the `*` symbol for multiplication of two numbers.\n\n**Example**\n\n```js\nconst myVar = 13 * 13;\n```\n\n`myVar` would have the value `169`.",
      "instructions": "Change the `0` so that product will equal `80`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const product = 8 * 0;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const product = 8 * 10;"
        }
      ],
      "tests": [
        {
          "text": "The variable `product` should be equal to 80.",
          "testCode": "assert(product === 80);"
        },
        {
          "text": "You should use the `*` operator.",
          "testCode": "assert(/\\*/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18243,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\multiply-two-numbers-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return 'product = '+z;})(product);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c11feddfaeb7bdef",
      "title": "Nest one Array within Another Array",
      "challengeType": 1,
      "dashedName": "nest-one-array-within-another-array",
      "description": "You can also nest arrays within other arrays, like below:\n\n```js\nconst teams = [[\"Bulls\", 23], [\"White Sox\", 45]];\n```\n\nThis is also called a <dfn>multi-dimensional array</dfn>.",
      "instructions": "Create a nested array called `myArray`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nconst myArray = [];"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [[1, 2, 3]];"
        }
      ],
      "tests": [
        {
          "text": "`myArray` should have at least one array nested within another array.",
          "testCode": "assert(Array.isArray(myArray) && myArray.some(Array.isArray));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18247,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\nest-one-array-within-another-array.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244e1",
      "title": "Nesting For Loops",
      "challengeType": 1,
      "dashedName": "nesting-for-loops",
      "description": "If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:\n\n```js\nconst arr = [\n  [1, 2], [3, 4], [5, 6]\n];\n\nfor (let i = 0; i < arr.length; i++) {\n  for (let j = 0; j < arr[i].length; j++) {\n    console.log(arr[i][j]);\n  }\n}\n```\n\nThis outputs each sub-element in `arr` one at a time. Note that for the inner loop, we are checking the `.length` of `arr[i]`, since `arr[i]` is itself an array.",
      "instructions": "Modify function `multiplyAll` so that it returns the product of all the numbers in the sub-arrays of `arr`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function multiplyAll(arr) {\n  let product = 1;\n  // Only change code below this line\n\n  // Only change code above this line\n  return product;\n}\n\nmultiplyAll([[1, 2], [3, 4], [5, 6, 7]]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function multiplyAll(arr) {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      product *= arr[i][j];\n    }\n  }\n  return product;\n}"
        }
      ],
      "tests": [
        {
          "text": "`multiplyAll([[1], [2], [3]])` should return `6`",
          "testCode": "assert(multiplyAll([[1], [2], [3]]) === 6);"
        },
        {
          "text": "`multiplyAll([[1, 2], [3, 4], [5, 6, 7]])` should return `5040`",
          "testCode": "assert(\n  multiplyAll([\n    [1, 2],\n    [3, 4],\n    [5, 6, 7]\n  ]) === 5040\n);"
        },
        {
          "text": "`multiplyAll([[5, 1], [0.2, 4, 0.5], [3, 9]])` should return `54`",
          "testCode": "assert(\n  multiplyAll([\n    [5, 1],\n    [0.2, 4, 0.5],\n    [3, 9]\n  ]) === 54\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18248,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\nesting-for-loops.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bd",
      "title": "Passing Values to Functions with Arguments",
      "challengeType": 1,
      "dashedName": "passing-values-to-functions-with-arguments",
      "description": "<dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.\n\nHere is a function with two parameters, `param1` and `param2`:\n\n```js\nfunction testFun(param1, param2) {\n  console.log(param1, param2);\n}\n```\n\nThen we can call `testFun` like this: `testFun(\"Hello\", \"World\");`. We have passed two string arguments, `Hello` and `World`. Inside the function, `param1` will equal the string `Hello` and `param2` will equal the string `World`. Note that you could call `testFun` again with different arguments and the parameters would take on the value of the new arguments.",
      "instructions": "<ol><li>Create a function called <code>functionWithArgs</code> that accepts two arguments and outputs their sum to the dev console.</li><li>Call the function with two numbers as arguments.</li></ol>",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function functionWithArgs(a, b) {\n  console.log(a + b);\n}\nfunctionWithArgs(10, 5);"
        }
      ],
      "tests": [
        {
          "text": "`functionWithArgs` should be a function.",
          "testCode": "assert(typeof functionWithArgs === 'function');"
        },
        {
          "text": "`functionWithArgs(1,2)` should output `3`.",
          "testCode": "if (typeof functionWithArgs === 'function') {\n  capture();\n  functionWithArgs(1, 2);\n  uncapture();\n}\nassert(logOutput == 3);"
        },
        {
          "text": "`functionWithArgs(7,9)` should output `16`.",
          "testCode": "if (typeof functionWithArgs === 'function') {\n  capture();\n  functionWithArgs(7, 9);\n  uncapture();\n}\nassert(logOutput == 16);"
        },
        {
          "text": "You should call `functionWithArgs` with two numbers after you define it.",
          "testCode": "assert(\n  /functionWithArgs\\([-+]?\\d*\\.?\\d*,[-+]?\\d*\\.?\\d*\\)/.test(\n    __helpers.removeJSComments(code).replace(/\\s/g, '')\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18254,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\passing-values-to-functions-with-arguments.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        if(message) logOutput = JSON.stringify(message).trim();\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();"
          }
        ],
        "afterUserCode": [
          {
            "language": "js",
            "code": "uncapture();\n\nif (typeof functionWithArgs !== \"function\") { \n  (function() { return \"functionWithArgs is not defined\"; })();\n} else {\n  (function() { return logOutput || \"console.log never called\"; })();\n}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "599a789b454f2bbd91a3ff4d",
      "title": "Practice comparing different values",
      "challengeType": 1,
      "dashedName": "practice-comparing-different-values",
      "description": "In the last two challenges, we learned about the equality operator (`==`) and the strict equality operator (`===`). Let's do a quick review and practice using these operators some more.\n\nIf the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values. However, the strict equality operator will compare both the data type and value as-is, without converting one type to the other.\n\n**Examples**\n\n`3 == '3'` returns `true` because JavaScript performs type conversion from string to number. `3 === '3'` returns `false` because the types are different and type conversion is not performed.\n\n**Note:** In JavaScript, you can determine the type of a variable or a value with the `typeof` operator, as follows:\n\n```js\ntypeof 3\ntypeof '3'\n```\n\n`typeof 3` returns the string `number`, and `typeof '3'` returns the string `string`.",
      "instructions": "The `compareEquality` function in the editor compares two values using the equality operator. Modify the function so that it returns the string `Equal` only when the values are strictly equal.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nfunction compareEquality(a, b) {\n  if (a == b) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ncompareEquality(10, \"10\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function compareEquality(a,b) {\n  if (a === b) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`compareEquality(10, \"10\")` should return the string `Not Equal`",
          "testCode": "assert(compareEquality(10, '10') === 'Not Equal');"
        },
        {
          "text": "`compareEquality(\"20\", 20)` should return the string `Not Equal`",
          "testCode": "assert(compareEquality('20', 20) === 'Not Equal');"
        },
        {
          "text": "You should use the `===` operator",
          "testCode": "assert(__helpers.removeJSComments(code).match(/===/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301174,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\practice-comparing-different-values.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5688e62ea601b2482ff8422b",
      "title": "Profile Lookup",
      "challengeType": 1,
      "dashedName": "profile-lookup",
      "description": "We have an array of objects representing different people in our contacts lists.\n\nA `lookUpProfile` function that takes `name` and a property (`prop`) as arguments has been pre-written for you.\n\nThe function should check if `name` is an actual contact's `firstName` and the given property (`prop`) is a property of that contact.\n\nIf both are true, then return the \"value\" of that property.\n\nIf `name` does not correspond to any contacts then return the string `No such contact`.\n\nIf `prop` does not correspond to any valid properties of a contact found to match `name` then return the string `No such property`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst contacts = [\n  {\n    firstName: \"Akira\",\n    lastName: \"Laine\",\n    number: \"0543236543\",\n    likes: [\"Pizza\", \"Coding\", \"Brownie Points\"],\n  },\n  {\n    firstName: \"Harry\",\n    lastName: \"Potter\",\n    number: \"0994372684\",\n    likes: [\"Hogwarts\", \"Magic\", \"Hagrid\"],\n  },\n  {\n    firstName: \"Sherlock\",\n    lastName: \"Holmes\",\n    number: \"0487345643\",\n    likes: [\"Intriguing Cases\", \"Violin\"],\n  },\n  {\n    firstName: \"Kristian\",\n    lastName: \"Vos\",\n    number: \"unknown\",\n    likes: [\"JavaScript\", \"Gaming\", \"Foxes\"],\n  },\n];\n\nfunction lookUpProfile(name, prop) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nlookUpProfile(\"Akira\", \"likes\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const contacts = [\n  {\n    firstName: \"Akira\",\n    lastName: \"Laine\",\n    number: \"0543236543\",\n    likes: [\"Pizza\", \"Coding\", \"Brownie Points\"],\n  },\n  {\n    firstName: \"Harry\",\n    lastName: \"Potter\",\n    number: \"0994372684\",\n    likes: [\"Hogwarts\", \"Magic\", \"Hagrid\"],\n  },\n  {\n    firstName: \"Sherlock\",\n    lastName: \"Holmes\",\n    number: \"0487345643\",\n    likes: [\"Intriguing Cases\", \"Violin\"],\n  },\n  {\n    firstName: \"Kristian\",\n    lastName: \"Vos\",\n    number: \"unknown\",\n    likes: [\"JavaScript\", \"Gaming\", \"Foxes\"],\n  },\n];\nfunction lookUpProfile(name, prop) {\n  for (let i in contacts) {\n    if (contacts[i].firstName === name) {\n      return contacts[i][prop] || \"No such property\";\n    }\n  }\n  return \"No such contact\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`lookUpProfile(\"Kristian\", \"lastName\")` should return the string `Vos`",
          "testCode": "assert(lookUpProfile('Kristian', 'lastName') === 'Vos');"
        },
        {
          "text": "`lookUpProfile(\"Sherlock\", \"likes\")` should return `[\"Intriguing Cases\", \"Violin\"]`",
          "testCode": "assert.deepEqual(lookUpProfile('Sherlock', 'likes'), [\n  'Intriguing Cases',\n  'Violin'\n]);"
        },
        {
          "text": "`lookUpProfile(\"Harry\", \"likes\")` should return an array",
          "testCode": "assert(typeof lookUpProfile('Harry', 'likes') === 'object');"
        },
        {
          "text": "`lookUpProfile(\"Bob\", \"number\")` should return the string `No such contact`",
          "testCode": "assert(lookUpProfile('Bob', 'number') === 'No such contact');"
        },
        {
          "text": "`lookUpProfile(\"Bob\", \"potato\")` should return the string `No such contact`",
          "testCode": "assert(lookUpProfile('Bob', 'potato') === 'No such contact');"
        },
        {
          "text": "`lookUpProfile(\"Akira\", \"address\")` should return the string `No such property`",
          "testCode": "assert(lookUpProfile('Akira', 'address') === 'No such property');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18259,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\profile-lookup.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b4",
      "title": "Quoting Strings with Single Quotes",
      "challengeType": 1,
      "dashedName": "quoting-strings-with-single-quotes",
      "description": "<dfn>String</dfn> values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote. Unlike some other programming languages, single and double quotes work the same in JavaScript.\n\n```js\nconst doubleQuoteStr = \"This is a string\"; \nconst singleQuoteStr = 'This is also a string';\n```\n\nThe reason why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want to save a conversation in a string and have the conversation in quotes. Another use for it would be saving an `<a>` tag with various attributes in quotes, all within a string.\n\n```js\nconst conversation = 'Finn exclaims to Jake, \"Algebraic!\"';\n```\n\nHowever, this becomes a problem if you need to use the outermost quotes within it. Remember, a string has the same kind of quote at the beginning and end. But if you have that same quote somewhere in the middle, the string will stop early and throw an error.\n\n```js\nconst goodStr = 'Jake asks Finn, \"Hey, let\\'s go on an adventure?\"'; \nconst badStr = 'Finn responds, \"Let's go!\"';\n```\n\nHere `badStr` will throw an error.\n\nIn the <dfn>goodStr</dfn> above, you can use both quotes safely by using the backslash `\\` as an escape character.\n\n**Note:** The backslash `\\` should not be confused with the forward slash `/`. They do not do the same thing.",
      "instructions": "Change the provided string to a string with single quotes at the beginning and end and no escape characters.\n\nRight now, the `<a>` tag in the string uses double quotes everywhere. You will need to change the outer quotes to single quotes so you can remove the escape characters.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myStr = \"<a href=\\\"http://www.example.com\\\" target=\\\"_blank\\\">Link</a>\";"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myStr = '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>';"
        }
      ],
      "tests": [
        {
          "text": "You should remove all the backslashes (`\\`).",
          "testCode": "assert(\n  !/\\\\/g.test(__helpers.removeJSComments(code)) &&\n    myStr.match(\n      '\\\\s*<a href\\\\s*=\\\\s*\"http://www.example.com\"\\\\s*target\\\\s*=\\\\s*\"_blank\">\\\\s*Link\\\\s*</a>\\\\s*'\n    )\n);"
        },
        {
          "text": "You should have two single quotes `'` and four double quotes `\"`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\"/g).length === 4 && __helpers.removeJSComments(code).match(/'/g).length === 2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18260,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\quoting-strings-with-single-quotes.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cf",
      "title": "Record Collection",
      "challengeType": 1,
      "dashedName": "record-collection",
      "description": "You are creating a function that aids in the maintenance of a musical album collection. The collection is organized as an object that contains multiple albums which are also objects. Each album is represented in the collection with a unique `id` as the property name. Within each album object, there are various properties describing information about the album. Not all albums have complete information.\n\nThe `updateRecords` function takes 4 arguments represented by the following function parameters:\n\n-   `records` - an object containing several individual albums\n-   `id` - a number representing a specific album in the `records` object\n-   `prop` - a string representing the name of the album’s property to update\n-   `value` - a string containing the information used to update the album’s property\n\nComplete the function using the rules below to modify the object passed to the function.\n\n-   Your function must always return the entire `records` object.\n-   If `value` is an empty string, delete the given `prop` property from the album.\n-   If `prop` isn't `tracks` and `value` isn't an empty string, assign the `value` to that album's `prop`.\n-   If `prop` is `tracks` and `value` isn't an empty string, but the album doesn't have a `tracks` property, create an empty array and add `value` to it.\n-   If prop is `tracks` and `value` isn't an empty string, add `value` to the end of the album's existing `tracks` array.\n\n**Note:** A copy of the `recordCollection` object is used for the tests. You should not directly modify the `recordCollection` object.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};\n\n// Only change code below this line\nfunction updateRecords(records, id, prop, value) {\n  return records;\n}\n\nupdateRecords(recordCollection, 5439, 'artist', 'ABBA');"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};\n\n// Only change code below this line\nfunction updateRecords(records, id, prop, value) {\n  if (value === '') delete records[id][prop];\n  else if (prop === 'tracks') {\n    records[id][prop] = records[id][prop] || [];\n    records[id][prop].push(value);\n  } else {\n    records[id][prop] = value;\n  }\n\n  return records;\n}"
        }
      ],
      "tests": [
        {
          "text": "After `updateRecords(recordCollection, 5439, \"artist\", \"ABBA\")`, `artist` should be the string `ABBA`",
          "testCode": "assert(\n  updateRecords(_recordCollection, 5439, 'artist', 'ABBA')[5439]['artist'] ===\n    'ABBA'\n);"
        },
        {
          "text": "After `updateRecords(recordCollection, 5439, \"tracks\", \"Take a Chance on Me\")`, `tracks` should have the string `Take a Chance on Me` as the last and only element.",
          "testCode": "assert(\n  updateRecords(_recordCollection, 5439, 'tracks', 'Take a Chance on Me') &&\n  _recordCollection[5439]['tracks'].length === 1 &&\n  _recordCollection[5439]['tracks'].pop() === 'Take a Chance on Me'\n);"
        },
        {
          "text": "After `updateRecords(recordCollection, 2548, \"artist\", \"\")`, `artist` should not be set",
          "testCode": "updateRecords(_recordCollection, 2548, 'artist', '');\nassert(!_recordCollection[2548].hasOwnProperty('artist'));"
        },
        {
          "text": "After `updateRecords(recordCollection, 1245, \"tracks\", \"Addicted to Love\")`, `tracks` should have the string `Addicted to Love` as the last element.",
          "testCode": "assert(\n  updateRecords(_recordCollection, 1245, 'tracks', 'Addicted to Love')[1245][\n    'tracks'\n  ].pop() === 'Addicted to Love'\n);"
        },
        {
          "text": "After `updateRecords(recordCollection, 2468, \"tracks\", \"Free\")`, `tracks` should have the string `1999` as the first element.",
          "testCode": "assert(\n  updateRecords(_recordCollection, 2468, 'tracks', 'Free')[2468][\n    'tracks'\n  ][0] === '1999'\n);"
        },
        {
          "text": "After `updateRecords(recordCollection, 2548, \"tracks\", \"\")`, `tracks` should not be set",
          "testCode": "updateRecords(_recordCollection, 2548, 'tracks', '');\nassert(!_recordCollection[2548].hasOwnProperty('tracks'));"
        },
        {
          "text": "After `updateRecords(recordCollection, 1245, \"albumTitle\", \"Riptide\")`, `albumTitle` should be the string `Riptide`",
          "testCode": "assert(\n  updateRecords(_recordCollection, 1245, 'albumTitle', 'Riptide')[1245][\n    'albumTitle'\n  ] === 'Riptide'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18261,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\record-collection.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "const _recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5cfa3679138e7d9595b9d9d4",
      "title": "Replace Loops using Recursion",
      "challengeType": 1,
      "dashedName": "replace-loops-using-recursion",
      "description": "Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: multiply the first `n` elements of an array to create the product of those elements. Using a `for` loop, you could do this:\n\n```js\n  function multiply(arr, n) {\n    let product = 1;\n    for (let i = 0; i < n; i++) {\n      product *= arr[i];\n    }\n    return product;\n  }\n```\n\nHowever, notice that `multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]`. That means you can rewrite `multiply` in terms of itself and never need to use a loop.\n\n```js\n  function multiply(arr, n) {\n    if (n <= 0) {\n      return 1;\n    } else {\n      return multiply(arr, n - 1) * arr[n - 1];\n    }\n  }\n```\n\nThe recursive version of `multiply` breaks down like this. In the <dfn>base case</dfn>, where `n <= 0`, it returns 1. For larger values of `n`, it calls itself, but with `n - 1`. That function call is evaluated in the same way, calling `multiply` again until `n <= 0`. At this point, all the functions can return and the original `multiply` returns the answer.\n\n**Note:** Recursive functions must have a base case when they return without calling the function again (in this example, when `n <= 0`), otherwise they can never finish executing.",
      "instructions": "Write a recursive function, `sum(arr, n)`, that returns the sum of the first `n` elements of an array `arr`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sum(arr, n) {\n  // Only change code below this line\n\n  // Only change code above this line\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function sum(arr, n) {\n  // Only change code below this line\n  if(n <= 0) {\n    return 0;\n  } else {\n    return sum(arr, n - 1) + arr[n - 1];\n  }\n  // Only change code above this line\n}"
        }
      ],
      "tests": [
        {
          "text": "`sum([1], 0)` should equal 0.",
          "testCode": "assert.equal(sum([1], 0), 0);"
        },
        {
          "text": "`sum([2, 3, 4], 1)` should equal 2.",
          "testCode": "assert.equal(sum([2, 3, 4], 1), 2);"
        },
        {
          "text": "`sum([2, 3, 4, 5], 3)` should equal 9.",
          "testCode": "assert.equal(sum([2, 3, 4, 5], 3), 9);"
        },
        {
          "text": "Your code should not rely on any kind of loops (`for` or `while` or higher order functions such as `forEach`, `map`, `filter`, or `reduce`.).",
          "testCode": "assert(\n  !__helpers.removeJSComments(code).match(/for|while|forEach|map|filter|reduce/g)\n);"
        },
        {
          "text": "You should use recursion to solve this problem.",
          "testCode": "assert(\n  sum.toString().match(/sum\\(.*\\)/g).length > 1\n);"
        }
      ],
      "metadata": {
        "videoUrl": ">-",
        "forumTopicId": 301175,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\replace-loops-using-recursion.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244e0",
      "title": "Replacing If Else Chains with Switch",
      "challengeType": 1,
      "dashedName": "replacing-if-else-chains-with-switch",
      "description": "If you have many options to choose from, a `switch` statement can be easier to write than many chained `if`/`else if` statements. The following:\n\n```js\nif (val === 1) {\n  answer = \"a\";\n} else if (val === 2) {\n  answer = \"b\";\n} else {\n  answer = \"c\";\n}\n```\n\ncan be replaced with:\n\n```js\nswitch (val) {\n  case 1:\n    answer = \"a\";\n    break;\n  case 2:\n    answer = \"b\";\n    break;\n  default:\n    answer = \"c\";\n}\n```",
      "instructions": "Change the chained `if`/`else if` statements into a `switch` statement.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function chainToSwitch(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n  if (val === \"bob\") {\n    answer = \"Marley\";\n  } else if (val === 42) {\n    answer = \"The Answer\";\n  } else if (val === 1) {\n    answer = \"There is no #1\";\n  } else if (val === 99) {\n    answer = \"Missed me by this much!\";\n  } else if (val === 7) {\n    answer = \"Ate Nine\";\n  }\n\n  // Only change code above this line\n  return answer;\n}\n\nchainToSwitch(7);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function chainToSwitch(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case \"bob\":\n      answer = \"Marley\";\n      break;\n    case 42:\n      answer = \"The Answer\";\n      break;\n    case 1:\n      answer = \"There is no #1\";\n      break;\n    case 99:\n      answer = \"Missed me by this much!\";\n      break;\n    case 7:\n      answer = \"Ate Nine\";\n  }\n  return answer;\n}"
        }
      ],
      "tests": [
        {
          "text": "You should not use any `else` statements anywhere in the editor",
          "testCode": "assert(!/else/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should not use any `if` statements anywhere in the editor",
          "testCode": "assert(!/if/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should have at least four `break` statements",
          "testCode": "assert(__helpers.removeJSComments(code).match(/break/g).length >= 4);"
        },
        {
          "text": "`chainToSwitch(\"bob\")` should return the string `Marley`",
          "testCode": "assert(chainToSwitch('bob') === 'Marley');"
        },
        {
          "text": "`chainToSwitch(42)` should return the string `The Answer`",
          "testCode": "assert(chainToSwitch(42) === 'The Answer');"
        },
        {
          "text": "`chainToSwitch(1)` should return the string `There is no #1`",
          "testCode": "assert(chainToSwitch(1) === 'There is no #1');"
        },
        {
          "text": "`chainToSwitch(99)` should return the string `Missed me by this much!`",
          "testCode": "assert(chainToSwitch(99) === 'Missed me by this much!');"
        },
        {
          "text": "`chainToSwitch(7)` should return the string `Ate Nine`",
          "testCode": "assert(chainToSwitch(7) === 'Ate Nine');"
        },
        {
          "text": "`chainToSwitch(\"John\")` should return `\"\"` (empty string)",
          "testCode": "assert(chainToSwitch('John') === '');"
        },
        {
          "text": "`chainToSwitch(156)` should return `\"\"` (empty string)",
          "testCode": "assert(chainToSwitch(156) === '');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18266,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\replacing-if-else-chains-with-switch.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c2",
      "title": "Return a Value from a Function with Return",
      "challengeType": 1,
      "dashedName": "return-a-value-from-a-function-with-return",
      "description": "We can pass values into a function with <dfn>arguments</dfn>. You can use a `return` statement to send a value back out of a function.\n\n**Example**\n\n```js\nfunction plusThree(num) {\n  return num + 3;\n}\n\nconst answer = plusThree(5);\n```\n\n`answer` has the value `8`.\n\n`plusThree` takes an <dfn>argument</dfn> for `num` and returns a value equal to `num + 3`.",
      "instructions": "Create a function `timesFive` that accepts one argument, multiplies it by `5`, and returns the new value.",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function timesFive(num) {\n  return num * 5;\n}\ntimesFive(10);"
        }
      ],
      "tests": [
        {
          "text": "`timesFive` should be a function",
          "testCode": "assert(typeof timesFive === 'function');"
        },
        {
          "text": "`timesFive(5)` should return `25`",
          "testCode": "assert(timesFive(5) === 25);"
        },
        {
          "text": "`timesFive(2)` should return `10`",
          "testCode": "assert(timesFive(2) === 10);"
        },
        {
          "text": "`timesFive(0)` should return `0`",
          "testCode": "assert(timesFive(0) === 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18271,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\return-a-value-from-a-function-with-return.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c4",
      "title": "Return Early Pattern for Functions",
      "challengeType": 1,
      "dashedName": "return-early-pattern-for-functions",
      "description": "When a `return` statement is reached, the execution of the current function stops and control returns to the calling location.\n\n**Example**\n\n```js\nfunction myFun() {\n  console.log(\"Hello\");\n  return \"World\";\n  console.log(\"byebye\")\n}\nmyFun();\n```\n\nThe above will display the string `Hello` in the console, and return the string `World`. The string `byebye` will never display in the console, because the function exits at the `return` statement.",
      "instructions": "Modify the function `abTest` so that if `a` or `b` are less than `0` the function will immediately exit with a value of `undefined`.\n\n**Hint**  \nRemember that <a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><code>undefined</code> is a keyword</a>, not a string.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nfunction abTest(a, b) {\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n\n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}\n\nabTest(2,2);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function abTest(a, b) {\n  if(a < 0 || b < 0) {\n    return undefined;\n  }\n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}"
        }
      ],
      "tests": [
        {
          "text": "`abTest(2, 2)` should return a number",
          "testCode": "assert(typeof abTest(2, 2) === 'number');"
        },
        {
          "text": "`abTest(2, 2)` should return `8`",
          "testCode": "assert(abTest(2, 2) === 8);"
        },
        {
          "text": "`abTest(-2, 2)` should return `undefined`",
          "testCode": "assert(abTest(-2, 2) === undefined);"
        },
        {
          "text": "`abTest(2, -2)` should return `undefined`",
          "testCode": "assert(abTest(2, -2) === undefined);"
        },
        {
          "text": "`abTest(2, 8)` should return `18`",
          "testCode": "assert(abTest(2, 8) === 18);"
        },
        {
          "text": "`abTest(3, 3)` should return `12`",
          "testCode": "assert(abTest(3, 3) === 12);"
        },
        {
          "text": "`abTest(0, 0)` should return `0`",
          "testCode": "assert(abTest(0, 0) === 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18272,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\return-early-pattern-for-functions.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5679ceb97cbaa8c51670a16b",
      "title": "Returning Boolean Values from Functions",
      "challengeType": 1,
      "dashedName": "returning-boolean-values-from-functions",
      "description": "You may recall from <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-equality-operator\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Comparison with the Equality Operator</a> that all comparison operators return a boolean `true` or `false` value.\n\nSometimes people use an `if/else` statement to do a comparison, like this:\n\n```js\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\nBut there's a better way to do this. Since `===` returns `true` or `false`, we can return the result of the comparison:\n\n```js\nfunction isEqual(a, b) {\n  return a === b;\n}\n```",
      "instructions": "Fix the function `isLess` to remove the `if/else` statements.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function isLess(a, b) {\n  // Only change code below this line\n  if (a < b) {\n    return true;\n  } else {\n    return false;\n  }\n  // Only change code above this line\n}\n\nisLess(10, 15);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function isLess(a, b) {\n  return a < b;\n}"
        }
      ],
      "tests": [
        {
          "text": "`isLess(10, 15)` should return `true`",
          "testCode": "assert(isLess(10, 15) === true);"
        },
        {
          "text": "`isLess(15, 10)` should return `false`",
          "testCode": "assert(isLess(15, 10) === false);"
        },
        {
          "text": "You should not use any `if` or `else` statements",
          "testCode": "assert(!/if|else/g.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18273,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\returning-boolean-values-from-functions.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244dd",
      "title": "Selecting from Many Options with Switch Statements",
      "challengeType": 1,
      "dashedName": "selecting-from-many-options-with-switch-statements",
      "description": "If you need to match one value against many options, you can use a <dfn>switch</dfn> statement. A `switch` statement compares the value to the <dfn>case</dfn> statements which define various possible values. Any valid JavaScript statements can be executed inside a <dfn>case</dfn> block and will run from the first matched `case` value until a `break` is encountered.\n\nHere is an example of a `switch` statement:\n\n```js\nswitch (fruit) {\n  case \"apple\":\n    console.log(\"The fruit is an apple\");\n    break;\n  case \"orange\":\n    console.log(\"The fruit is an orange\");\n    break;\n}\n```\n\n`case` values are tested with strict equality (`===`). The `break` tells JavaScript to stop executing statements. If the `break` is omitted, the next statement will be executed.",
      "instructions": "Write a switch statement which tests `val` and sets `answer` for the following conditions:  \n`1` - `alpha`  \n`2` - `beta`  \n`3` - `gamma`  \n`4` - `delta`",
      "boilerplate": [
        {
          "language": "js",
          "code": "function caseInSwitch(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\ncaseInSwitch(1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function caseInSwitch(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case 1:\n      answer = \"alpha\";\n      break;\n    case 2:\n      answer = \"beta\";\n      break;\n    case 3:\n      answer = \"gamma\";\n      break;\n    case 4:\n      answer = \"delta\";\n  }\n  return answer;\n}"
        }
      ],
      "tests": [
        {
          "text": "`caseInSwitch(1)` should have a value of the string `alpha`",
          "testCode": "assert(caseInSwitch(1) === 'alpha');"
        },
        {
          "text": "`caseInSwitch(2)` should have a value of the string `beta`",
          "testCode": "assert(caseInSwitch(2) === 'beta');"
        },
        {
          "text": "`caseInSwitch(3)` should have a value of the string `gamma`",
          "testCode": "assert(caseInSwitch(3) === 'gamma');"
        },
        {
          "text": "`caseInSwitch(4)` should have a value of the string `delta`",
          "testCode": "assert(caseInSwitch(4) === 'delta');"
        },
        {
          "text": "You should not use any `if` or `else` statements",
          "testCode": "assert(!/else/g.test(__helpers.removeJSComments(code)) || !/if/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should have at least 3 `break` statements",
          "testCode": "assert(__helpers.removeJSComments(code).match(/break/g).length > 2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18277,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\selecting-from-many-options-with-switch-statements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bc",
      "title": "Shopping List",
      "challengeType": 1,
      "dashedName": "shopping-list",
      "description": "Create a shopping list in the variable `myList`. The list should be a multi-dimensional array containing several sub-arrays.\n\nThe first element in each sub-array should contain a string with the name of the item. The second element should be a number representing the quantity i.e.\n\n```js\n[\"Chocolate Bar\", 15]\n```\n\nThere should be at least 5 sub-arrays in the list.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myList = [];"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myList = [\n  [\"Candy\", 10],\n  [\"Potatoes\", 12],\n  [\"Eggs\", 12],\n  [\"Catfood\", 1],\n  [\"Toads\", 9]\n];"
        }
      ],
      "tests": [
        {
          "text": "`myList` should be an array.",
          "testCode": "assert(isArray);"
        },
        {
          "text": "The first elements in each of your sub-arrays should all be strings.",
          "testCode": "assert(hasString);"
        },
        {
          "text": "The second elements in each of your sub-arrays should all be numbers.",
          "testCode": "assert(hasNumber);"
        },
        {
          "text": "You should have at least 5 items in your list.",
          "testCode": "assert(count > 4);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18280,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\shopping-list.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "var count = 0;\nvar isArray = false;\nvar hasString = false;\nvar hasNumber = false;\n(function(list){\n  if(Array.isArray(myList)) {\n    isArray = true;\n    if(myList.length > 0) {\n      hasString = true;\n      hasNumber = true;\n      for (var elem of myList) {\n        if(!elem || !elem[0] || typeof elem[0] !== 'string') {\n          hasString = false;\n        }\n        if(!elem || typeof elem[1] !== 'number') {\n          hasNumber = false;\n        }\n      }\n    }\n    count = myList.length;\n    return JSON.stringify(myList);\n  } else {\n    return \"myList is not an array\";\n  }\n\n})(myList);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c6",
      "title": "Stand in Line",
      "challengeType": 1,
      "dashedName": "stand-in-line",
      "description": "In Computer Science a <dfn>queue</dfn> is an abstract <dfn>Data Structure</dfn> where items are kept in order. New items can be added at the back of the queue and old items are taken off from the front of the queue.",
      "instructions": "Write a function `nextInLine` which takes an array (`arr`) and a number (`item`) as arguments.\n\nAdd the number to the end of the array, then remove the first element of the array.\n\nThe `nextInLine` function should then return the element that was removed.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nextInLine(arr, item) {\n  // Only change code below this line\n  \n  return item;\n  // Only change code above this line\n}\n\n// Setup\nlet testArr = [1, 2, 3, 4, 5];\n\n// Display code\nconsole.log(\"Before: \" + JSON.stringify(testArr));\nconsole.log(nextInLine(testArr, 6));\nconsole.log(\"After: \" + JSON.stringify(testArr));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let testArr = [1, 2, 3, 4, 5];\n\nfunction nextInLine(arr, item) {\n    arr.push(item);\n    return arr.shift();\n}"
        }
      ],
      "tests": [
        {
          "text": "`nextInLine([], 5)` should return a number.",
          "testCode": "assert.isNumber(nextInLine([], 5));"
        },
        {
          "text": "`nextInLine([], 1)` should return `1`",
          "testCode": "assert(nextInLine([], 1) === 1);"
        },
        {
          "text": "`nextInLine([2], 1)` should return `2`",
          "testCode": "assert(nextInLine([2], 1) === 2);"
        },
        {
          "text": "`nextInLine([5,6,7,8,9], 1)` should return `5`",
          "testCode": "assert(nextInLine([5, 6, 7, 8, 9], 1) === 5);"
        },
        {
          "text": "After `nextInLine(testArr, 10)`, `testArr[4]` should be `10`",
          "testCode": "nextInLine(testArr, 10);\nassert(testArr[4] === 10);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18307,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\stand-in-line.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "var logOutput = [];\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput.push(message);\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();"
          }
        ],
        "afterUserCode": [
          {
            "language": "js",
            "code": "uncapture();\ntestArr = [1,2,3,4,5];\n(function() { return logOutput.join(\"\\n\");})();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7993c9c69feddfaeb8bdef",
      "title": "Store Multiple Values in one Variable using JavaScript Arrays",
      "challengeType": 1,
      "dashedName": "store-multiple-values-in-one-variable-using-javascript-arrays",
      "description": "With JavaScript `array` variables, we can store several pieces of data in one place.\n\nYou start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:\n\n```js\nconst sandwich = [\"peanut butter\", \"jelly\", \"bread\"];\n```",
      "instructions": "Modify the new array `myArray` so that it contains both a string and a number (in that order).",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nconst myArray = [];"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myArray = [\"The Answer\", 42];"
        }
      ],
      "tests": [
        {
          "text": "`myArray` should be an array.",
          "testCode": "assert(typeof myArray == 'object');"
        },
        {
          "text": "The first item in `myArray` should be a string.",
          "testCode": "assert(typeof myArray[0] !== 'undefined' && typeof myArray[0] == 'string');"
        },
        {
          "text": "The second item in `myArray` should be a number.",
          "testCode": "assert(typeof myArray[1] !== 'undefined' && typeof myArray[1] == 'number');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18309,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\store-multiple-values-in-one-variable-using-javascript-arrays.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return z;})(myArray);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244a8",
      "title": "Storing Values with the Assignment Operator",
      "challengeType": 1,
      "dashedName": "storing-values-with-the-assignment-operator",
      "description": "In JavaScript, you can store a value in a variable with the <dfn>assignment</dfn> operator (`=`).\n\n```js\nmyVariable = 5;\n```\n\nThis assigns the `Number` value `5` to `myVariable`.\n\nIf there are any calculations to the right of the `=` operator, those are performed before the value is assigned to the variable on the left of the operator.\n\n```js\nvar myVar;\nmyVar = 5;\n```\n\nFirst, this code creates a variable named `myVar`. Then, the code assigns `5` to `myVar`. Now, if `myVar` appears again in the code, the program will treat it as if it is `5`.",
      "instructions": "Assign the value `7` to variable `a`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nvar a;\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var a;\na = 7;"
        }
      ],
      "tests": [
        {
          "text": "You should not change code above the specified comment.",
          "testCode": "assert(/var a;/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`a` should have a value of 7.",
          "testCode": "assert(typeof a === 'number' && a === 7);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18310,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\storing-values-with-the-assignment-operator.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "if (typeof a != 'undefined') {\n  a = undefined;\n}"
          }
        ],
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a){return \"a = \" + a;})(a);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c11feddfaeb4bdef",
      "title": "Subtract One Number from Another with JavaScript",
      "challengeType": 1,
      "dashedName": "subtract-one-number-from-another-with-javascript",
      "description": "We can also subtract one number from another.\n\nJavaScript uses the `-` symbol for subtraction.\n\n**Example**\n\n```js\nconst myVar = 12 - 6;\n```\n\n`myVar` would have the value `6`.",
      "instructions": "Change the `0` so the difference is `12`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const difference = 45 - 0;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const difference = 45 - 33;"
        }
      ],
      "tests": [
        {
          "text": "The variable `difference` should be equal to `12`.",
          "testCode": "assert(difference === 12);"
        },
        {
          "text": "You should only subtract one number from `45`.",
          "testCode": "assert(/difference=45-33;?/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code))));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18314,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\subtract-one-number-from-another-with-javascript.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return 'difference = '+z;})(difference);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "567af2437cbaa8c51670a16c",
      "title": "Testing Objects for Properties",
      "challengeType": 1,
      "dashedName": "testing-objects-for-properties",
      "description": "To check if a property on a given object exists or not, you can use the `.hasOwnProperty()` method. `someObject.hasOwnProperty(someProperty)` returns `true` or `false` depending on if the property is found on the object or not.\n\n**Example**\n\n```js\nfunction checkForProperty(object, property) {\n  return object.hasOwnProperty(property);\n}\n\ncheckForProperty({ top: 'hat', bottom: 'pants' }, 'top'); // true\ncheckForProperty({ top: 'hat', bottom: 'pants' }, 'middle'); // false\n```\n\nThe first `checkForProperty` function call returns `true`, while the second returns `false`.",
      "instructions": "Modify the function `checkObj` to test if the object passed to the function parameter `obj` contains the specific property passed to the function parameter `checkProp`. If the property passed to `checkProp` is found on `obj`, return that property's value. If not, return `Not Found`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function checkObj(obj, checkProp) {\n  // Only change code below this line\n  return \"Change Me!\";\n  // Only change code above this line\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function checkObj(obj, checkProp) {\n  if(obj.hasOwnProperty(checkProp)) {\n    return obj[checkProp];\n  } else {\n    return \"Not Found\";\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`checkObj({gift: \"pony\", pet: \"kitten\", bed: \"sleigh\"}, \"gift\")` should return the string `pony`.",
          "testCode": "assert(\n  checkObj({ gift: 'pony', pet: 'kitten', bed: 'sleigh' }, 'gift') === 'pony'\n);"
        },
        {
          "text": "`checkObj({gift: \"pony\", pet: \"kitten\", bed: \"sleigh\"}, \"pet\")` should return the string `kitten`.",
          "testCode": "assert(\n  checkObj({ gift: 'pony', pet: 'kitten', bed: 'sleigh' }, 'pet') === 'kitten'\n);"
        },
        {
          "text": "`checkObj({gift: \"pony\", pet: \"kitten\", bed: \"sleigh\"}, \"house\")` should return the string `Not Found`.",
          "testCode": "assert(\n  checkObj({ gift: 'pony', pet: 'kitten', bed: 'sleigh' }, 'house') ===\n    'Not Found'\n);"
        },
        {
          "text": "`checkObj({city: \"Seattle\"}, \"city\")` should return the string `Seattle`.",
          "testCode": "assert(checkObj({ city: 'Seattle' }, 'city') === 'Seattle');"
        },
        {
          "text": "`checkObj({city: \"Seattle\"}, \"district\")` should return the string `Not Found`.",
          "testCode": "assert(checkObj({ city: 'Seattle' }, 'district') === 'Not Found');"
        },
        {
          "text": "`checkObj({pet: \"kitten\", bed: \"sleigh\"}, \"gift\")` should return the string `Not Found`.",
          "testCode": "assert(checkObj({ pet: 'kitten', bed: 'sleigh' }, 'gift') === 'Not Found');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18324,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\testing-objects-for-properties.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ba",
      "title": "Understand String Immutability",
      "challengeType": 1,
      "dashedName": "understand-string-immutability",
      "description": "In JavaScript, `String` values are <dfn>immutable</dfn>, which means that they cannot be altered once created.\n\nFor example, the following code will produce an error because the letter `B` in the string `Bob` cannot be changed to the letter `J`:\n\n```js\nlet myStr = \"Bob\";\nmyStr[0] = \"J\";\n```\n\nNote that this does *not* mean that `myStr` could not be re-assigned. The only way to change `myStr` would be to assign it with a new value, like this:\n\n```js\nlet myStr = \"Bob\";\nmyStr = \"Job\";\n```",
      "instructions": "Correct the assignment to `myStr` so it contains the string value of `Hello World` using the approach shown in the example above.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nlet myStr = \"Jello World\";\n\n// Only change code below this line\nmyStr[0] = \"H\"; // Change this line\n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myStr = \"Jello World\";\nmyStr = \"Hello World\";"
        }
      ],
      "tests": [
        {
          "text": "`myStr` should have a value of the string `Hello World`.",
          "testCode": "assert(myStr === 'Hello World');"
        },
        {
          "text": "You should not change the code above the specified comment.",
          "testCode": "assert(/myStr = \"Jello World\"/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18331,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\understand-string-immutability.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(v){return \"myStr = \" + v;})(myStr);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c441eddfaeb5bdef",
      "title": "Understanding Boolean Values",
      "challengeType": 1,
      "dashedName": "understanding-boolean-values",
      "description": "Another data type is the <dfn>Boolean</dfn>. Booleans may only be one of two values: `true` or `false`. They are basically little on-off switches, where `true` is on and `false` is off. These two states are mutually exclusive.\n\n**Note:** Boolean values are never written with quotes. The strings `\"true\"` and `\"false\"` are not Boolean and have no special meaning in JavaScript.",
      "instructions": "Modify the `welcomeToBooleans` function so that it returns `true` instead of `false`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function welcomeToBooleans() {\n  // Only change code below this line\n\n  return false; // Change this line\n\n  // Only change code above this line\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function welcomeToBooleans() {\n  return true; // Change this line\n}"
        }
      ],
      "tests": [
        {
          "text": "The `welcomeToBooleans()` function should return a Boolean (`true` or `false`) value.",
          "testCode": "assert(typeof welcomeToBooleans() === 'boolean');"
        },
        {
          "text": "`welcomeToBooleans()` should return `true`.",
          "testCode": "assert(welcomeToBooleans() === true);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301176,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\understanding-boolean-values.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "welcomeToBooleans();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ab",
      "title": "Understanding Case Sensitivity in Variables",
      "challengeType": 1,
      "dashedName": "understanding-case-sensitivity-in-variables",
      "description": "In JavaScript all variables and function names are case sensitive. This means that capitalization matters.\n\n`MYVAR` is not the same as `MyVar` nor `myvar`. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you *do not* use this language feature.\n\n**Best Practice**\n\nWrite variable names in JavaScript in <dfn>camelCase</dfn>. In <dfn>camelCase</dfn>, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.\n\n**Examples:**\n\n```js\nvar someVariable;\nvar anotherVariableName;\nvar thisVariableNameIsSoLong;\n```",
      "instructions": "Modify the existing declarations and assignments so their names use <dfn>camelCase</dfn>.\n\nDo not create any new variables.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Variable declarations\nvar StUdLyCapVaR;\nvar properCamelCase;\nvar TitleCaseOver;\n\n// Variable assignments\nSTUDLYCAPVAR = 10;\nPRoperCAmelCAse = \"A String\";\ntITLEcASEoVER = 9000;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var studlyCapVar;\nvar properCamelCase;\nvar titleCaseOver;\n\nstudlyCapVar = 10;\nproperCamelCase = \"A String\";\ntitleCaseOver = 9000;"
        }
      ],
      "tests": [
        {
          "text": "`studlyCapVar` should be defined and have a value of `10`.",
          "testCode": "assert(typeof studlyCapVar !== 'undefined' && studlyCapVar === 10);"
        },
        {
          "text": "`properCamelCase` should be defined and have a value of the string `A String`.",
          "testCode": "assert(\n  typeof properCamelCase !== 'undefined' && properCamelCase === 'A String'\n);"
        },
        {
          "text": "`titleCaseOver` should be defined and have a value of `9000`.",
          "testCode": "assert(typeof titleCaseOver !== 'undefined' && titleCaseOver === 9000);"
        },
        {
          "text": "`studlyCapVar` should use camelCase in both declaration and assignment sections.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/studlyCapVar/g).length === 2);"
        },
        {
          "text": "`properCamelCase` should use camelCase in both declaration and assignment sections.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/properCamelCase/g).length === 2);"
        },
        {
          "text": "`titleCaseOver` should use camelCase in both declaration and assignment sections.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/titleCaseOver/g).length === 2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18334,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\understanding-case-sensitivity-in-variables.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "598e8944f009e646fc236146",
      "title": "Understanding Undefined Value returned from a Function",
      "challengeType": 1,
      "dashedName": "understanding-undefined-value-returned-from-a-function",
      "description": "A function can include the `return` statement but it does not have to. In the case that the function doesn't have a `return` statement, when you call it, the function processes the inner code but the returned value is `undefined`.\n\n**Example**\n\n```js\nlet sum = 0;\n\nfunction addSum(num) {\n  sum = sum + num;\n}\n\naddSum(3);\n```\n\n`addSum` is a function without a `return` statement. The function will change the global `sum` variable but the returned value of the function is `undefined`.",
      "instructions": "Create a function `addFive` without any arguments. This function adds 5 to the `sum` variable, but its returned value is `undefined`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nlet sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\n// Only change code below this line\n\n\n// Only change code above this line\n\naddThree();\naddFive();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\nfunction addFive() {\n  sum = sum + 5;\n}\n\naddThree();\naddFive();"
        }
      ],
      "tests": [
        {
          "text": "`addFive` should be a function.",
          "testCode": "assert(typeof addFive === 'function');"
        },
        {
          "text": "Once both functions have run, the `sum` should be equal to `8`.",
          "testCode": "assert(sum === 8);"
        },
        {
          "text": "Returned value from `addFive` should be `undefined`.",
          "testCode": "assert(addFive() === undefined);"
        },
        {
          "text": "Inside the `addFive` function, you should add `5` to the `sum` variable.",
          "testCode": "assert(\n  __helpers.removeWhiteSpace(addFive.toString()).match(/sum=sum\\+5|sum\\+=5/)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301177,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\understanding-undefined-value-returned-from-a-function.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244aa",
      "title": "Understanding Uninitialized Variables",
      "challengeType": 1,
      "dashedName": "understanding-uninitialized-variables",
      "description": "When JavaScript variables are declared, they have an initial value of `undefined`. If you do a mathematical operation on an `undefined` variable your result will be `NaN` which means <dfn>\"Not a Number\"</dfn>. If you concatenate a string with an `undefined` variable, you will get a <dfn>string</dfn> of `undefined`.",
      "instructions": "Initialize the three variables `a`, `b`, and `c` with `5`, `10`, and `\"I am a\"` respectively so that they will not be `undefined`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nvar a;\nvar b;\nvar c;\n// Only change code above this line\n\na = a + 1;\nb = b + 5;\nc = c + \" String!\";"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var a = 5;\nvar b = 10;\nvar c = \"I am a\";\na = a + 1;\nb = b + 5;\nc = c + \" String!\";"
        }
      ],
      "tests": [
        {
          "text": "`a` should be defined and have a final value of `6`.",
          "testCode": "assert(typeof a === 'number' && a === 6);"
        },
        {
          "text": "`b` should be defined and have a final value of `15`.",
          "testCode": "assert(typeof b === 'number' && b === 15);"
        },
        {
          "text": "`c` should not contain `undefined` and should have a final value of the string `I am a String!`",
          "testCode": "assert(!/undefined/.test(c) && c === 'I am a String!');"
        },
        {
          "text": "You should not change code below the specified comment.",
          "testCode": "assert(\n  /a = a \\+ 1;/.test(__helpers.removeJSComments(code)) &&\n    /b = b \\+ 5;/.test(__helpers.removeJSComments(code)) &&\n    /c = c \\+ \" String!\";/.test(__helpers.removeJSComments(code))\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18335,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\understanding-uninitialized-variables.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = '\" + c + \"'\"; })(a,b,c);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d1",
      "title": "Updating Object Properties",
      "challengeType": 1,
      "dashedName": "updating-object-properties",
      "description": "After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.\n\nFor example, let's look at `ourDog`:\n\n```js\nconst ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};\n```\n\nSince he's a particularly happy dog, let's change his name to the string `Happy Camper`. Here's how we update his object's name property: `ourDog.name = \"Happy Camper\";` or `ourDog[\"name\"] = \"Happy Camper\";` Now when we evaluate `ourDog.name`, instead of getting `Camper`, we'll get his new name, `Happy Camper`.",
      "instructions": "Update the `myDog` object's name property. Let's change her name from `Coder` to `Happy Coder`. You can use either dot or bracket notation.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.name = \"Happy Coder\";"
        }
      ],
      "tests": [
        {
          "text": "You should update `myDog`'s `name` property to equal the string `Happy Coder`.",
          "testCode": "assert(/happy coder/gi.test(myDog.name));"
        },
        {
          "text": "You should not edit the `myDog` definition.",
          "testCode": "assert(/\"name\": \"Coder\"/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18336,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\updating-object-properties.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(z){return z;})(myDog);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c549eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the First Character in a String",
      "challengeType": 1,
      "dashedName": "use-bracket-notation-to-find-the-first-character-in-a-string",
      "description": "<dfn>Bracket notation</dfn> is a way to get a character at a specific index within a string.\n\nMost modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as <dfn>Zero-based</dfn> indexing.\n\nFor example, the character at index 0 in the word `Charles` is `C`. So if `const firstName = \"Charles\"`, you can get the value of the first letter of the string by using `firstName[0]`.\n\nExample:\n\n```js\nconst firstName = \"Charles\";\nconst firstLetter = firstName[0];\n```\n\n`firstLetter` would have a value of the string `C`.",
      "instructions": "Use bracket notation to find the first character in the `lastName` variable and assign it to `firstLetterOfLastName`.\n\n**Hint:** Try looking at the example above if you get stuck.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nlet firstLetterOfLastName = \"\";\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let firstLetterOfLastName = \"\";\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName[0];"
        }
      ],
      "tests": [
        {
          "text": "The `firstLetterOfLastName` variable should have the value of `L`.",
          "testCode": "assert(firstLetterOfLastName === 'L');"
        },
        {
          "text": "You should use bracket notation.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/firstLetterOfLastName\\s*=\\s*lastName\\s*\\[\\s*\\d\\s*\\]/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18341,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-bracket-notation-to-find-the-first-character-in-a-string.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(v){return v;})(firstLetterOfLastName);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c451eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Last Character in a String",
      "challengeType": 1,
      "dashedName": "use-bracket-notation-to-find-the-last-character-in-a-string",
      "description": "In order to get the last letter of a string, you can subtract one from the string's length.\n\nFor example, if `const firstName = \"Ada\"`, you can get the value of the last letter of the string by using `firstName[firstName.length - 1]`.\n\nExample:\n\n```js\nconst firstName = \"Ada\";\nconst lastLetter = firstName[firstName.length - 1];\n```\n\n`lastLetter` would have a value of the string `a`.",
      "instructions": "Use <dfn>bracket notation</dfn> to find the last character in the `lastName` variable.\n\n**Hint:** Try looking at the example above if you get stuck.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst lastLetterOfLastName = lastName; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const lastName = \"Lovelace\";\nconst lastLetterOfLastName = lastName[lastName.length - 1];"
        }
      ],
      "tests": [
        {
          "text": "`lastLetterOfLastName` should be the letter `e`.",
          "testCode": "assert(lastLetterOfLastName === 'e');"
        },
        {
          "text": "You should use `.length` to get the last letter.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.length/g).length > 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18342,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-bracket-notation-to-find-the-last-character-in-a-string.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(v){return v;})(lastLetterOfLastName);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c450eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth Character in a String",
      "challengeType": 1,
      "dashedName": "use-bracket-notation-to-find-the-nth-character-in-a-string",
      "description": "You can also use <dfn>bracket notation</dfn> to get the character at other positions within a string.\n\nRemember that computers start counting at `0`, so the first character is actually the zeroth character.\n\nExample:\n\n```js\nconst firstName = \"Ada\";\nconst secondLetterOfFirstName = firstName[1];\n```\n\n`secondLetterOfFirstName` would have a value of the string `d`.",
      "instructions": "Let's try to set `thirdLetterOfLastName` to equal the third letter of the `lastName` variable using bracket notation.\n\n**Hint:** Try looking at the example above if you get stuck.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst thirdLetterOfLastName = lastName; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const lastName = \"Lovelace\";\nconst thirdLetterOfLastName = lastName[2];"
        }
      ],
      "tests": [
        {
          "text": "The `thirdLetterOfLastName` variable should have the value of `v`.",
          "testCode": "assert(thirdLetterOfLastName === 'v');"
        },
        {
          "text": "You should use bracket notation.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/thirdLetterOfLastName\\s*=\\s*lastName\\s*\\[\\s*\\d\\s*\\]/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18343,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-bracket-notation-to-find-the-nth-character-in-a-string.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(v){return v;})(thirdLetterOfLastName);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "bd7123c9c452eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth-to-Last Character in a String",
      "challengeType": 1,
      "dashedName": "use-bracket-notation-to-find-the-nth-to-last-character-in-a-string",
      "description": "You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.\n\nFor example, you can get the value of the third-to-last letter of the `const firstName = \"Augusta\"` string by using `firstName[firstName.length - 3]`\n\nExample:\n\n```js\nconst firstName = \"Augusta\";\nconst thirdToLastLetter = firstName[firstName.length - 3];\n```\n\n`thirdToLastLetter` would have a value of the string `s`.",
      "instructions": "Use <dfn>bracket notation</dfn> to find the second-to-last character in the `lastName` string.\n\n**Hint:** Try looking at the example above if you get stuck.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst secondToLastLetterOfLastName = lastName; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const lastName = \"Lovelace\";\nconst secondToLastLetterOfLastName = lastName[lastName.length - 2];"
        }
      ],
      "tests": [
        {
          "text": "`secondToLastLetterOfLastName` should be the letter `c`.",
          "testCode": "assert(secondToLastLetterOfLastName === 'c');"
        },
        {
          "text": "You should use `.length` to get the second last letter.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.length/g).length > 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18344,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-bracket-notation-to-find-the-nth-to-last-character-in-a-string.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "(function(v){return v;})(secondToLastLetterOfLastName);"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "cf1111c1c12feddfaeb3bdef",
      "title": "Use Conditional Logic with If Statements",
      "challengeType": 1,
      "dashedName": "use-conditional-logic-with-if-statements",
      "description": "`if` statements are used to make decisions in code. The keyword `if` tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as `Boolean` conditions and they may only be `true` or `false`.\n\nWhen the condition evaluates to `true`, the program executes the statement inside the curly braces. When the Boolean condition evaluates to `false`, the statement inside the curly braces will not execute.\n\n**Pseudocode**\n\n<blockquote>if (<i>condition is true</i>) {<br>  <i>statement is executed</i><br>}</blockquote>\n\n**Example**\n\n```js\nfunction test(myCondition) {\n  if (myCondition) {\n    return \"It was true\";\n  }\n  return \"It was false\";\n}\n\ntest(true);\ntest(false);\n```\n\n`test(true)` returns the string `It was true`, and `test(false)` returns the string `It was false`.\n\nWhen `test` is called with a value of `true`, the `if` statement evaluates `myCondition` to see if it is `true` or not. Since it is `true`, the function returns `It was true`. When we call `test` with a value of `false`, `myCondition` is *not* `true` and the statement in the curly braces is not executed and the function returns `It was false`.",
      "instructions": "Create an `if` statement inside the function to return `Yes, that was true` if the parameter `wasThatTrue` is `true` and return `No, that was false` otherwise.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function trueOrFalse(wasThatTrue) {\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function trueOrFalse(wasThatTrue) {\n  if (wasThatTrue) {\n    return \"Yes, that was true\";\n  }\n  return \"No, that was false\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`trueOrFalse` should be a function",
          "testCode": "assert(typeof trueOrFalse === 'function');"
        },
        {
          "text": "`trueOrFalse(true)` should return a string",
          "testCode": "assert(typeof trueOrFalse(true) === 'string');"
        },
        {
          "text": "`trueOrFalse(false)` should return a string",
          "testCode": "assert(typeof trueOrFalse(false) === 'string');"
        },
        {
          "text": "`trueOrFalse(true)` should return the string `Yes, that was true`",
          "testCode": "assert(trueOrFalse(true) === 'Yes, that was true');"
        },
        {
          "text": "`trueOrFalse(false)` should return the string `No, that was false`",
          "testCode": "assert(trueOrFalse(false) === 'No, that was false');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18348,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-conditional-logic-with-if-statements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "587d7b7e367417b2b2512b21",
      "title": "Use Multiple Conditional (Ternary) Operators",
      "challengeType": 1,
      "dashedName": "use-multiple-conditional-ternary-operators",
      "description": "In the previous challenge, you used a single conditional operator. You can also chain them together to check for multiple conditions.\n\nThe following function uses `if`, `else if`, and `else` statements to check multiple conditions:\n\n```js\nfunction findGreaterOrEqual(a, b) {\n  if (a === b) {\n    return \"a and b are equal\";\n  }\n  else if (a > b) {\n    return \"a is greater\";\n  }\n  else {\n    return \"b is greater\";\n  }\n}\n```\n\nThe above function can be re-written using multiple conditional operators:\n\n```js\nfunction findGreaterOrEqual(a, b) {\n  return (a === b) ? \"a and b are equal\" \n    : (a > b) ? \"a is greater\" \n    : \"b is greater\";\n}\n```\n\nIt is considered best practice to format multiple conditional operators such that each condition is on a separate line, as shown above. Using multiple conditional operators without proper indentation may make your code hard to read. For example:\n\n```js\nfunction findGreaterOrEqual(a, b) {\n  return (a === b) ? \"a and b are equal\" : (a > b) ? \"a is greater\" : \"b is greater\";\n}\n```",
      "instructions": "In the `checkSign` function, use multiple conditional operators - following the recommended format used in `findGreaterOrEqual` - to check if a number is positive, negative or zero. The function should return `positive`, `negative` or `zero`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function checkSign(num) {\n\n}\n\ncheckSign(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function checkSign(num) {\n  return (num > 0) ? 'positive' : (num < 0) ? 'negative' : 'zero';\n}"
        }
      ],
      "tests": [
        {
          "text": "`checkSign` should use multiple conditional operators",
          "testCode": "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`checkSign(10)` should return the string `positive`. Note that capitalization matters",
          "testCode": "assert(checkSign(10) === 'positive');"
        },
        {
          "text": "`checkSign(-12)` should return the string `negative`. Note that capitalization matters",
          "testCode": "assert(checkSign(-12) === 'negative');"
        },
        {
          "text": "`checkSign(0)` should return the string `zero`. Note that capitalization matters",
          "testCode": "assert(checkSign(0) === 'zero');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301179,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-multiple-conditional-ternary-operators.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5cd9a70215d3c4e65518328f",
      "title": "Use Recursion to Create a Countdown",
      "challengeType": 1,
      "dashedName": "use-recursion-to-create-a-countdown",
      "description": "In a <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/replace-loops-using-recursion\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">previous challenge</a>, you learned how to use recursion to replace a `for` loop. Now, let's look at a more complex function that returns an array of consecutive integers starting with `1` through the number passed to the function.\n\nAs mentioned in the previous challenge, there will be a <dfn>base case</dfn>. The base case tells the recursive function when it no longer needs to call itself. It is a simple case where the return value is already known. There will also be a <dfn>recursive call</dfn> which executes the original function with different arguments. If the function is written correctly, eventually the base case will be reached.\n\nFor example, say you want to write a recursive function that returns an array containing the numbers `1` through `n`. This function will need to accept an argument, `n`, representing the final number. Then it will need to call itself with progressively smaller values of `n` until it reaches `1`. You could write the function as follows:\n\n```javascript\nfunction countup(n) {\n  if (n < 1) {\n    return [];\n  } else {\n    const countArray = countup(n - 1);\n    countArray.push(n);\n    return countArray;\n  }\n}\nconsole.log(countup(5));\n```\n\nThe value `[1, 2, 3, 4, 5]` will be displayed in the console.\n\nAt first, this seems counterintuitive since the value of `n` *decreases*, but the values in the final array are *increasing*. This happens because the push happens last, after the recursive call has returned. At the point where `n` is pushed into the array, `countup(n - 1)` has already been evaluated and returned `[1, 2, ..., n - 1]`.",
      "instructions": "We have defined a function called `countdown` with one parameter (`n`). The function should use recursion to return an array containing the integers `n` through `1` based on the `n` parameter. If the function is called with a number less than 1, the function should return an empty array. For example, calling this function with `n = 5` should return the array `[5, 4, 3, 2, 1]`. Your function must use recursion by calling itself and must not use loops of any kind.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nfunction countdown(n){\n  return;\n}\n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function countdown(n){\n   return n < 1 ? [] : [n].concat(countdown(n - 1));\n}"
        }
      ],
      "tests": [
        {
          "text": "`countdown(-1)` should return an empty array.",
          "testCode": "assert.isEmpty(countdown(-1));"
        },
        {
          "text": "`countdown(10)` should return `[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]`",
          "testCode": "assert.deepStrictEqual(countdown(10), [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);"
        },
        {
          "text": "`countdown(5)` should return `[5, 4, 3, 2, 1]`",
          "testCode": "assert.deepStrictEqual(countdown(5), [5, 4, 3, 2, 1]);"
        },
        {
          "text": "Your code should not rely on any kind of loops (`for`, `while` or higher order functions such as `forEach`, `map`, `filter`, and `reduce`).",
          "testCode": "assert(\n  !__helpers.removeJSComments(code).match(/for|while|forEach|map|filter|reduce/g)\n);"
        },
        {
          "text": "You should use recursion to solve this problem.",
          "testCode": "assert(\n  countdown.toString().match(/countdown\\s*\\(.+\\)/)\n);"
        },
        {
          "text": "Global variables should not be used to cache the array.",
          "testCode": "countdown(1)\nassert.deepStrictEqual(countdown(5), [5, 4, 3, 2, 1]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 305925,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-recursion-to-create-a-countdown.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "5cc0bd7a49b71cb96132e54c",
      "title": "Use Recursion to Create a Range of Numbers",
      "challengeType": 1,
      "dashedName": "use-recursion-to-create-a-range-of-numbers",
      "description": "Continuing from the previous challenge, we provide you another opportunity to create a recursive function to solve a problem.",
      "instructions": "We have defined a function named `rangeOfNumbers` with two parameters. The function should return an array of integers which begins with a number represented by the `startNum` parameter and ends with a number represented by the `endNum` parameter. The starting number will always be less than or equal to the ending number. Your function must use recursion by calling itself and not use loops of any kind. It should also work for cases where both `startNum` and `endNum` are the same.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rangeOfNumbers(startNum, endNum) {\n  return [];\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "Your function should return an array.",
          "testCode": "assert(Array.isArray(rangeOfNumbers(5, 10)));"
        },
        {
          "text": "Your code should not use any loop syntax (`for` or `while` or higher order functions such as `forEach`, `map`, `filter`, or `reduce`).",
          "testCode": "assert(\n  !__helpers.removeJSComments(code).match(/for|while|forEach|map|filter|reduce/g)\n);"
        },
        {
          "text": "`rangeOfNumbers` should use recursion (call itself) to solve this challenge.",
          "testCode": "assert(\n  rangeOfNumbers.toString().match(/rangeOfNumbers\\s*\\(.+\\)/)\n);"
        },
        {
          "text": "`rangeOfNumbers(1, 5)` should return `[1, 2, 3, 4, 5]`.",
          "testCode": "assert.deepStrictEqual(rangeOfNumbers(1, 5), [1, 2, 3, 4, 5]);"
        },
        {
          "text": "`rangeOfNumbers(6, 9)` should return `[6, 7, 8, 9]`.",
          "testCode": "assert.deepStrictEqual(rangeOfNumbers(6, 9), [6, 7, 8, 9]);"
        },
        {
          "text": "`rangeOfNumbers(4, 4)` should return `[4]`.",
          "testCode": "assert.deepStrictEqual(rangeOfNumbers(4, 4), [4]);"
        },
        {
          "text": "Global variables should not be used to cache the array.",
          "testCode": "rangeOfNumbers(1, 3)\nassert.deepStrictEqual(rangeOfNumbers(6, 9), [6, 7, 8, 9]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301180,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-recursion-to-create-a-range-of-numbers.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "587d7b7e367417b2b2512b24",
      "title": "Use the Conditional (Ternary) Operator",
      "challengeType": 1,
      "dashedName": "use-the-conditional-ternary-operator",
      "description": "The <dfn>conditional operator</dfn>, also called the <dfn>ternary operator</dfn>, can be used as a one line if-else expression.\n\nThe syntax is `a ? b : c`, where `a` is the condition, `b` is the code to run when the condition returns `true`, and `c` is the code to run when the condition returns `false`.\n\nThe following function uses an `if/else` statement to check a condition:\n\n```js\nfunction findGreater(a, b) {\n  if(a > b) {\n    return \"a is greater\";\n  }\n  else {\n    return \"b is greater or equal\";\n  }\n}\n```\n\nThis can be re-written using the conditional operator:\n\n```js\nfunction findGreater(a, b) {\n  return a > b ? \"a is greater\" : \"b is greater or equal\";\n}\n```",
      "instructions": "Use the conditional operator in the `checkEqual` function to check if two numbers are equal or not. The function should return either the string `Equal` or the string `Not Equal`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function checkEqual(a, b) {\n\n}\n\ncheckEqual(1, 2);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function checkEqual(a, b) {\n  return a === b ? \"Equal\" : \"Not Equal\";\n}"
        }
      ],
      "tests": [
        {
          "text": "`checkEqual` should use the conditional operator",
          "testCode": "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`checkEqual(1, 2)` should return the string `Not Equal`",
          "testCode": "assert(checkEqual(1, 2) === 'Not Equal');"
        },
        {
          "text": "`checkEqual(1, 1)` should return the string `Equal`",
          "testCode": "assert(checkEqual(1, 1) === 'Equal');"
        },
        {
          "text": "`checkEqual(1, -1)` should return the string `Not Equal`",
          "testCode": "assert(checkEqual(1, -1) === 'Not Equal');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301181,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-the-conditional-ternary-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "587d7b7e367417b2b2512b22",
      "title": "Use the parseInt Function with a Radix",
      "challengeType": 1,
      "dashedName": "use-the-parseint-function-with-a-radix",
      "description": "The `parseInt()` function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.\n\nThe function call looks like:\n\n```js\nparseInt(string, radix);\n```\n\nAnd here's an example:\n\n```js\nconst a = parseInt(\"11\", 2);\n```\n\nThe radix variable says that `11` is in the binary system, or base 2. This example converts the string `11` to an integer `3`.",
      "instructions": "Use `parseInt()` in the `convertToInteger` function so it converts a binary number to an integer and returns it.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function convertToInteger(str) {\n\n}\n\nconvertToInteger(\"10011\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function convertToInteger(str) {\n  return parseInt(str, 2);\n}"
        }
      ],
      "tests": [
        {
          "text": "`convertToInteger` should use the `parseInt()` function",
          "testCode": "assert(/parseInt/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`convertToInteger(\"10011\")` should return a number",
          "testCode": "assert(typeof convertToInteger('10011') === 'number');"
        },
        {
          "text": "`convertToInteger(\"10011\")` should return 19",
          "testCode": "assert(convertToInteger('10011') === 19);"
        },
        {
          "text": "`convertToInteger(\"111001\")` should return 57",
          "testCode": "assert(convertToInteger('111001') === 57);"
        },
        {
          "text": "`convertToInteger(\"JamesBond\")` should return `NaN`",
          "testCode": "assert.isNaN(convertToInteger('JamesBond'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301182,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-the-parseint-function-with-a-radix.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "587d7b7e367417b2b2512b23",
      "title": "Use the parseInt Function",
      "challengeType": 1,
      "dashedName": "use-the-parseint-function",
      "description": "The `parseInt()` function parses a string and returns an integer. Here's an example:\n\n```js\nconst a = parseInt(\"007\");\n```\n\nThe above function converts the string `007` to the integer `7`. If the first character in the string can't be converted into a number, then it returns `NaN`.",
      "instructions": "Use `parseInt()` in the `convertToInteger` function so it converts the input string `str` into an integer, and returns it.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function convertToInteger(str) {\n\n}\n\nconvertToInteger(\"56\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function convertToInteger(str) {\n  return parseInt(str);\n}"
        }
      ],
      "tests": [
        {
          "text": "`convertToInteger` should use the `parseInt()` function",
          "testCode": "assert(/parseInt/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`convertToInteger(\"56\")` should return a number",
          "testCode": "assert(typeof convertToInteger('56') === 'number');"
        },
        {
          "text": "`convertToInteger(\"56\")` should return 56",
          "testCode": "assert(convertToInteger('56') === 56);"
        },
        {
          "text": "`convertToInteger(\"77\")` should return 77",
          "testCode": "assert(convertToInteger('77') === 77);"
        },
        {
          "text": "`convertToInteger(\"JamesBond\")` should return `NaN`",
          "testCode": "assert.isNaN(convertToInteger('JamesBond'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301183,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\use-the-parseint-function.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ca",
      "title": "Using Objects for Lookups",
      "challengeType": 1,
      "dashedName": "using-objects-for-lookups",
      "description": "Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to lookup values rather than a `switch` statement or an `if/else` chain. This is most useful when you know that your input data is limited to a certain range.\n\nHere is an example of an article object:\n\n```js\nconst article = {\n  \"title\": \"How to create objects in JavaScript\",\n  \"link\": \"https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/\",\n  \"author\": \"Kaashan Hussain\",\n  \"language\": \"JavaScript\",\n  \"tags\": \"TECHNOLOGY\",\n  \"createdAt\": \"NOVEMBER 28, 2018\"\n};\n\nconst articleAuthor = article[\"author\"];\nconst articleLink = article[\"link\"];\n\nconst value = \"title\";\nconst valueLookup = article[value];\n```\n\n`articleAuthor` is the string `Kaashan Hussain`, `articleLink` is the string `https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/`, and `valueLookup` is the string `How to create objects in JavaScript`.",
      "instructions": "Convert the switch statement into an object called `lookup`. Use it to look up `val` and assign the associated string to the `result` variable.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Setup\nfunction phoneticLookup(val) {\n  let result = \"\";\n\n  // Only change code below this line\n  switch(val) {\n    case \"alpha\":\n      result = \"Adams\";\n      break;\n    case \"bravo\":\n      result = \"Boston\";\n      break;\n    case \"charlie\":\n      result = \"Chicago\";\n      break;\n    case \"delta\":\n      result = \"Denver\";\n      break;\n    case \"echo\":\n      result = \"Easy\";\n      break;\n    case \"foxtrot\":\n      result = \"Frank\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\nphoneticLookup(\"charlie\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function phoneticLookup(val) {\n  let result = \"\";\n\n  const lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "`phoneticLookup(\"alpha\")` should equal the string `Adams`",
          "testCode": "assert(phoneticLookup('alpha') === 'Adams');"
        },
        {
          "text": "`phoneticLookup(\"bravo\")` should equal the string `Boston`",
          "testCode": "assert(phoneticLookup('bravo') === 'Boston');"
        },
        {
          "text": "`phoneticLookup(\"charlie\")` should equal the string `Chicago`",
          "testCode": "assert(phoneticLookup('charlie') === 'Chicago');"
        },
        {
          "text": "`phoneticLookup(\"delta\")` should equal the string `Denver`",
          "testCode": "assert(phoneticLookup('delta') === 'Denver');"
        },
        {
          "text": "`phoneticLookup(\"echo\")` should equal the string `Easy`",
          "testCode": "assert(phoneticLookup('echo') === 'Easy');"
        },
        {
          "text": "`phoneticLookup(\"foxtrot\")` should equal the string `Frank`",
          "testCode": "assert(phoneticLookup('foxtrot') === 'Frank');"
        },
        {
          "text": "`phoneticLookup(\"\")` should equal `undefined`",
          "testCode": "assert(typeof phoneticLookup('') === 'undefined');"
        },
        {
          "text": "You should not modify the `return` statement",
          "testCode": "assert(__helpers.removeJSComments(code).match(/return\\sresult;/));"
        },
        {
          "text": "You should not use `case`, `switch`, or `if` statements",
          "testCode": "assert(\n  !/case|switch|if/g.test(__helpers.removeJSComments(code).replace(/([/]{2}.*)|([/][*][^/*]*[*][/])/g, ''))\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18373,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\using-objects-for-lookups.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bb",
      "title": "Word Blanks",
      "challengeType": 1,
      "dashedName": "word-blanks",
      "description": "You are provided sentences with some missing words, like nouns, verbs, adjectives and adverbs. You then fill in the missing pieces with words of your choice in a way that the completed sentence makes sense.\n\nConsider this sentence:\n\n```md\nIt was really ____, and we ____ ourselves ____.\n```\n\nThis sentence has three missing pieces- an adjective, a verb and an adverb, and we can add words of our choice to complete it. We can then assign the completed sentence to a variable as follows:\n\n```js\nconst sentence = \"It was really \" + \"hot\" + \", and we \" + \"laughed\" + \" ourselves \" + \"silly\" + \".\";\n```",
      "instructions": "In this challenge, we provide you with a noun, a verb, an adjective and an adverb. You need to form a complete sentence using words of your choice, along with the words we provide.\n\nYou will need to use the string concatenation operator `+` to build a new string, using the provided variables: `myNoun`, `myAdjective`, `myVerb`, and `myAdverb`. You will then assign the formed string to the `wordBlanks` variable. You should not change the words assigned to the variables.\n\nYou will also need to account for spaces in your string, so that the final sentence has spaces between all the words. The result should be a complete sentence.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const myNoun = \"dog\";\nconst myAdjective = \"big\";\nconst myVerb = \"ran\";\nconst myAdverb = \"quickly\";\n\n// Only change code below this line\nconst wordBlanks = \"\"; // Change this line\n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myNoun = \"dog\";\nconst myAdjective = \"big\";\nconst myVerb = \"ran\";\nconst myAdverb = \"quickly\";\n\nlet wordBlanks = \"Once there was a \" + myNoun + \" which was very \" + myAdjective + \". \";\nwordBlanks += \"It \" + myVerb + \" \" + myAdverb + \" around the yard.\";"
        }
      ],
      "tests": [
        {
          "text": "`wordBlanks` should be a string.",
          "testCode": "assert(typeof wordBlanks === 'string');"
        },
        {
          "text": "You should not change the values assigned to `myNoun`, `myVerb`, `myAdjective` or `myAdverb`.",
          "testCode": "assert(\n  myNoun === 'dog' &&\n    myVerb === 'ran' &&\n    myAdjective === 'big' &&\n    myAdverb === 'quickly'\n);"
        },
        {
          "text": "You should not directly use the values `dog`, `ran`, `big`, or `quickly` to create `wordBlanks`.",
          "testCode": "const newCode = removeAssignments(__helpers.removeJSComments(code));\nassert(\n  !/dog/.test(newCode) &&\n    !/ran/.test(newCode) &&\n    !/big/.test(newCode) &&\n    !/quickly/.test(newCode)\n);"
        },
        {
          "text": "`wordBlanks` should contain all of the words assigned to the variables `myNoun`, `myVerb`, `myAdjective` and `myAdverb` separated by non-word characters (and any additional words of your choice).",
          "testCode": "assert(\n  /\\bdog\\b/.test(wordBlanks) &&\n    /\\bbig\\b/.test(wordBlanks) &&\n    /\\bran\\b/.test(wordBlanks) &&\n    /\\bquickly\\b/.test(wordBlanks)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18377,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\word-blanks.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const removeAssignments = str => str\n  .replace(/myNoun\\s*=\\s*[\"']dog[\"']/g, '')\n  .replace(/myAdjective\\s*=\\s*[\"']big[\"']/g, '')\n  .replace(/myVerb\\s*=\\s*[\"']ran[\"']/g, '')\n  .replace(/myAdverb\\s*=\\s*[\"']quickly[\"']/g, '');"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cf",
      "title": "Write Reusable JavaScript with Functions",
      "challengeType": 1,
      "dashedName": "write-reusable-javascript-with-functions",
      "description": "In JavaScript, we can divide up our code into reusable parts called <dfn>functions</dfn>.\n\nHere's an example of a function:\n\n```js\nfunction functionName() {\n  console.log(\"Hello World\");\n}\n```\n\nYou can call or <dfn>invoke</dfn> this function by using its name followed by parentheses, like this: `functionName();` Each time the function is called it will print out the message `Hello World` on the dev console. All of the code between the curly braces will be executed every time the function is called.",
      "instructions": "<ol>\n  <li>\n    Create a function called <code>reusableFunction</code> which prints the string <code>Hi World</code> to the dev console.\n  </li>\n  <li>\n    Call the function.\n  </li>\n</ol>",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function reusableFunction() {\n  console.log(\"Hi World\");\n}\nreusableFunction();"
        }
      ],
      "tests": [
        {
          "text": "`reusableFunction` should be a function.",
          "testCode": "assert(typeof reusableFunction === 'function');"
        },
        {
          "text": "If `reusableFunction` is called, it should output the string `Hi World` to the console.",
          "testCode": "assert(testConsole());"
        },
        {
          "text": "You should call `reusableFunction` once it is defined.",
          "testCode": "const functionStr = reusableFunction && __helpers.removeWhiteSpace(reusableFunction.toString());\nconst codeWithoutFunction = __helpers.removeWhiteSpace(__helpers.removeJSComments(code)).replace(/reusableFunction\\(\\)\\{/g, '');\nassert(/reusableFunction\\(\\)/.test(codeWithoutFunction));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18378,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\basic-javascript\\write-reusable-javascript-with-functions.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "function testConsole() {\n  var logOutput = \"\";\n  var originalConsole = console;\n  var nativeLog = console.log;\n  var hiWorldWasLogged = false;\n  console.log = function (message) {\n    if(message === 'Hi World')  {\n      console.warn(message)\n      hiWorldWasLogged = true;\n    }\n    if(message && message.trim) logOutput = message.trim();\n    if(nativeLog.apply) {\n      nativeLog.apply(originalConsole, arguments);\n    } else {\n      var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n      nativeLog(nativeMsg);\n    }\n  };\n  reusableFunction();\n  console.log = nativeLog;\n  return hiWorldWasLogged;\n}"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "basic-javascript",
        "name": "Basic Javascript"
      }
    },
    {
      "id": "587d7b85367417b2b2512b3a",
      "title": "Catch Arguments Passed in the Wrong Order When Calling a Function",
      "challengeType": 1,
      "dashedName": "catch-arguments-passed-in-the-wrong-order-when-calling-a-function",
      "description": "Continuing the discussion on calling functions, the next bug to watch out for is when a function's arguments are supplied in the incorrect order. If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sense. Make sure to supply all required arguments, in the proper order to avoid these issues.",
      "instructions": "The function `raiseToPower` raises a base to an exponent. Unfortunately, it's not called properly - fix the code so the value of `power` is the expected 8.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function raiseToPower(b, e) {\n  return Math.pow(b, e);\n}\n\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(exp, base);\nconsole.log(power);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function raiseToPower(b, e) {\n return Math.pow(b, e);\n}\n\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(base, exp);\nconsole.log(power);"
        }
      ],
      "tests": [
        {
          "text": "Your code should fix the variable `power` so it equals 2 raised to the 3rd power, not 3 raised to the 2nd power.",
          "testCode": "assert(power == 8);"
        },
        {
          "text": "Your code should use the correct order of the arguments for the `raiseToPower` function call.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/raiseToPower\\(\\s*?base\\s*?,\\s*?exp\\s*?\\);/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301184,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\catch-arguments-passed-in-the-wrong-order-when-calling-a-function.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b85367417b2b2512b39",
      "title": "Catch Missing Open and Closing Parenthesis After a Function Call",
      "challengeType": 1,
      "dashedName": "catch-missing-open-and-closing-parenthesis-after-a-function-call",
      "description": "When a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing parentheses when calling it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns.\n\nThe variables in the following example are different:\n\n```js\nfunction myFunction() {\n  return \"You rock!\";\n}\nlet varOne = myFunction;\nlet varTwo = myFunction();\n```\n\nHere `varOne` is the function `myFunction`, and `varTwo` is the string `You rock!`.",
      "instructions": "Fix the code so the variable `result` is set to the value returned from calling the function `getNine`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\n\nlet result = getNine;\nconsole.log(result);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function getNine() {\n let x = 6;\n let y = 3;\n return x + y;\n}\n\nlet result = getNine();\nconsole.log(result);"
        }
      ],
      "tests": [
        {
          "text": "Your code should fix the variable `result` so it is set to the number that the function `getNine` returns.",
          "testCode": "assert(result == 9);"
        },
        {
          "text": "Your code should call the `getNine` function.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/getNine\\(\\)/g).length == 2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301185,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\catch-missing-open-and-closing-parenthesis-after-a-function-call.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b84367417b2b2512b35",
      "title": "Catch Misspelled Variable and Function Names",
      "challengeType": 1,
      "dashedName": "catch-misspelled-variable-and-function-names",
      "description": "The `console.log()` and `typeof` methods are the two primary ways to check intermediate values and types of program output. Now it's time to get into the common forms that bugs take. One syntax-level issue that fast typers can commiserate with is the humble spelling error.\n\nTransposed, missing, or miscapitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. JavaScript variable and function names are case-sensitive.",
      "instructions": "Fix the two spelling errors in the code so the `netWorkingCapital` calculation works.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = recievables - payable;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = receivables - payables;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);"
        }
      ],
      "tests": [
        {
          "text": "Check the spelling of the two variables used in the netWorkingCapital calculation, the console output should show that \"Net working capital is: 2\".",
          "testCode": "assert(netWorkingCapital === 2);"
        },
        {
          "text": "There should be no instances of misspelled variables in the code.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/recievables/g));"
        },
        {
          "text": "The `receivables` variable should be declared and used properly in the code.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/receivables/g).length == 2);"
        },
        {
          "text": "There should be no instances of misspelled variables in the code.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/payable;/g));"
        },
        {
          "text": "The `payables` variable should be declared and used properly in the code.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/payables/g).length == 2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301186,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\catch-misspelled-variable-and-function-names.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b84367417b2b2512b37",
      "title": "Catch Mixed Usage of Single and Double Quotes",
      "challengeType": 1,
      "dashedName": "catch-mixed-usage-of-single-and-double-quotes",
      "description": "JavaScript allows the use of both single (`'`) and double (`\"`) quotes to declare a string. Deciding which one to use generally comes down to personal preference, with some exceptions.\n\nHaving two choices is great when a string has contractions or another piece of text that's in quotes. Just be careful that you don't close the string too early, which causes a syntax error.\n\nHere are some examples of mixing quotes:\n\n```js\nconst grouchoContraction = \"I've had a perfectly wonderful evening, but this wasn't it.\";\nconst quoteInString = \"Groucho Marx once said 'Quote me as saying I was mis-quoted.'\";\nconst uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';\n```\n\nThe first two are correct, but the third is incorrect.\n\nOf course, it is okay to use only one style of quotes. You can escape the quotes inside the string by using the backslash (`\\`) escape character:\n\n```js\nconst allSameQuotes = 'I\\'ve had a perfectly wonderful evening, but this wasn\\'t it.';\n```",
      "instructions": "Fix the string so it either uses different quotes for the `href` value, or escape the existing ones. Keep the double quote marks around the entire string.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let innerHtml = \"<p>Click here to <a href=\"#Home\">return home</a></p>\";\nconsole.log(innerHtml);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let innerHtml = \"<p>Click here to <a href=\\\"#Home\\\">return home</a></p>\";\nconsole.log(innerHtml);"
        }
      ],
      "tests": [
        {
          "text": "Your code should fix the quotes around the `href` value `#Home` by either changing or escaping them.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/<a href=\\s*?('|\\\\\")#Home\\1\\s*?>/g));"
        },
        {
          "text": "Your code should keep the double quotes around the entire string.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\"<p>.*?<\\/p>\";/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301188,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\catch-mixed-usage-of-single-and-double-quotes.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b86367417b2b2512b3b",
      "title": "Catch Off By One Errors When Using Indexing",
      "challengeType": 1,
      "dashedName": "catch-off-by-one-errors-when-using-indexing",
      "description": "<dfn>Off by one errors</dfn> (sometimes called OBOE) crop up when you're trying to target a specific index of a string or array (to slice or access a segment), or when looping over the indices of them. JavaScript indexing starts at zero, not one, which means the last index is always one less than the length of the item. If you try to access an index equal to the length, the program may throw an \"index out of range\" reference error or print `undefined`.\n\nWhen you use string or array methods that take index ranges as arguments, it helps to read the documentation and understand if they are inclusive (the item at the given index is part of what's returned) or not. Here are some examples of off by one errors:\n\n```js\nlet alphabet = \"abcdefghijklmnopqrstuvwxyz\";\nlet len = alphabet.length;\nfor (let i = 0; i <= len; i++) {\n  console.log(alphabet[i]);\n}\nfor (let j = 1; j < len; j++) {\n  console.log(alphabet[j]);\n}\nfor (let k = 0; k < len; k++) {\n  console.log(alphabet[k]);\n}\n```\n\nThe first example here loops one too many times, and the second loops one too few times (missing the first index, 0). The third example is correct.",
      "instructions": "Fix the two indexing errors in the following function so all the numbers 1 through 5 are printed to the console.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countToFive() {\n  let firstFive = \"12345\";\n  let len = firstFive.length;\n  // Only change code below this line\n  for (let i = 1; i <= len; i++) {\n  // Only change code above this line\n    console.log(firstFive[i]);\n  }\n}\n\ncountToFive();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function countToFive() {\n let firstFive = \"12345\";\n let len = firstFive.length;\n // Only change code below this line\n for (let i = 0; i < len; i++) {\n // Only change code above this line\n   console.log(firstFive[i]);\n }\n}\n\ncountToFive();"
        }
      ],
      "tests": [
        {
          "text": "Your code should set the initial condition of the loop so it starts at the first index.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/i\\s*?=\\s*?0\\s*?;/g).length == 1);"
        },
        {
          "text": "Your code should fix the initial condition of the loop so that the index starts at 0.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/i\\s?=\\s*?1\\s*?;/g));"
        },
        {
          "text": "Your code should set the terminal condition of the loop so it stops at the last index.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/i\\s*<\\s*len\\s*;|i\\s*<=\\s*len\\s*-\\s*1\\s*;/g).length == 1);"
        },
        {
          "text": "Your code should fix the terminal condition of the loop so that it stops at 1 before the length.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/i\\s*?<=\\s*?len;/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301189,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\catch-off-by-one-errors-when-using-indexing.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b84367417b2b2512b36",
      "title": "Catch Unclosed Parentheses, Brackets, Braces and Quotes",
      "challengeType": 1,
      "dashedName": "catch-unclosed-parentheses-brackets-braces-and-quotes",
      "description": "Another syntax error to be aware of is that all opening parentheses, brackets, curly braces, and quotes have a closing pair. Forgetting a piece tends to happen when you're editing existing code and inserting items with one of the pair types. Also, take care when nesting code blocks into others, such as adding a callback function as an argument to a method.\n\nOne way to avoid this mistake is as soon as the opening character is typed, immediately include the closing match, then move the cursor back between them and continue coding. Fortunately, most modern code editors generate the second half of the pair automatically.",
      "instructions": "Fix the two pair errors in the code.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myArray = [1, 2, 3;\nlet arraySum = myArray.reduce((previous, current =>  previous + current);\nconsole.log(`Sum of array values is: ${arraySum}`);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myArray = [1, 2, 3];\nlet arraySum = myArray.reduce((previous, current) =>  previous + current);\nconsole.log(`Sum of array values is: ${arraySum}`);"
        }
      ],
      "tests": [
        {
          "text": "Your code should fix the missing piece of the array.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/myArray\\s*?=\\s*?\\[\\s*?1\\s*?,\\s*?2\\s*?,\\s*?3\\s*?\\];/g));"
        },
        {
          "text": "Your code should fix the missing piece of the `.reduce()` method. The console output should show that `Sum of array values is: 6`.",
          "testCode": "assert(arraySum === 6);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301190,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\catch-unclosed-parentheses-brackets-braces-and-quotes.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b85367417b2b2512b38",
      "title": "Catch Use of Assignment Operator Instead of Equality Operator",
      "challengeType": 1,
      "dashedName": "catch-use-of-assignment-operator-instead-of-equality-operator",
      "description": "Branching programs, i.e. ones that do different things if certain conditions are met, rely on `if`, `else if`, and `else` statements in JavaScript. The condition sometimes takes the form of testing whether a result is equal to a value.\n\nThis logic is spoken (in English, at least) as \"if x equals y, then ...\" which can literally translate into code using the `=`, or assignment operator. This leads to unexpected control flow in your program.\n\nAs covered in previous challenges, the assignment operator (`=`) in JavaScript assigns a value to a variable name. And the `==` and `===` operators check for equality (the triple `===` tests for strict equality, meaning both value and type are the same).\n\nThe code below assigns `x` to be 2, which evaluates as `true`. Almost every value on its own in JavaScript evaluates to `true`, except what are known as the \"falsy\" values: `false`, `0`, `\"\"` (an empty string), `NaN`, `undefined`, and `null`.\n\n```js\nlet x = 1;\nlet y = 2;\nif (x = y) {\n\n} else {\n\n}\n```\n\nIn this example, the code block within the `if` statement will run for any value of `y`, unless `y` is falsy. The `else` block, which we expect to run here, will not actually run.",
      "instructions": "Fix the condition so the program runs the right branch, and the appropriate value is assigned to `result`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x = y) {\n  result = \"Equal!\";\n} else {\n  result = \"Not equal!\";\n}\n\nconsole.log(result);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x === y) {\n result = \"Equal!\";\n} else {\n result = \"Not equal!\";\n}\n\nconsole.log(result);"
        }
      ],
      "tests": [
        {
          "text": "Your code should fix the condition so it checks for equality, instead of using assignment.",
          "testCode": "assert(result == 'Not equal!');"
        },
        {
          "text": "The condition should use either `==` or `===` to test for equality.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/x\\s*?===?\\s*?y/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301191,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\catch-use-of-assignment-operator-instead-of-equality-operator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b86367417b2b2512b3d",
      "title": "Prevent Infinite Loops with a Valid Terminal Condition",
      "challengeType": 1,
      "dashedName": "prevent-infinite-loops-with-a-valid-terminal-condition",
      "description": "The final topic is the dreaded infinite loop. Loops are great tools when you need your program to run a code block a certain number of times or until a condition is met, but they need a terminal condition that ends the looping. Infinite loops are likely to freeze or crash the browser, and cause general program execution mayhem, which no one wants.\n\nThere was an example of an infinite loop in the introduction to this section - it had no terminal condition to break out of the `while` loop inside `loopy()`. Do NOT call this function!\n\n```js\nfunction loopy() {\n  while(true) {\n    console.log(\"Hello, world!\");\n  }\n}\n```\n\nIt's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached. One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition. Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.",
      "instructions": "The `myFunc()` function contains an infinite loop because the terminal condition `i != 4` will never evaluate to `false` (and break the looping) - `i` will increment by 2 each pass, and jump right over 4 since `i` is odd to start. Fix the comparison operator in the terminal condition so the loop only runs for `i` less than or equal to 4.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function myFunc() {\n  for (let i = 1; i != 4; i += 2) {\n    console.log(\"Still going!\");\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function myFunc() {\n for (let i = 1; i <= 4; i += 2) {\n   console.log(\"Still going!\");\n }\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should change the comparison operator in the terminal condition (the middle part) of the `for` loop.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/i\\s*?<=\\s*?4;/g).length == 1);"
        },
        {
          "text": "Your code should fix the comparison operator in the terminal condition of the loop.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/i\\s*?!=\\s*?4;/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301192,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\prevent-infinite-loops-with-a-valid-terminal-condition.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b83367417b2b2512b37",
      "title": "Understanding the Differences between the freeCodeCamp and Browser Console",
      "challengeType": 1,
      "dashedName": "understanding-the-differences-between-the-freecodecamp-and-browser-console",
      "description": "You may have noticed that some freeCodeCamp challenges include their own console. This console behaves a little differently than the browser console.\n\nThere are many methods to use with `console` to output messages. `log`, `warn`, and `clear` to name a few. The freeCodeCamp console will only output `log` messages, while the browser console will output all messages. When you make changes to your code, it will automatically run and show the logs. The freeCodeCamp console is then cleared each time your code runs.",
      "instructions": "First, open your browser console so you can see the logs. To do that, you can right-click the freeCodeCamp navigation bar at the top and click `inspect` on most browsers. Then find the `console` tab in the window that opens.\n\nAfter that, use `console.log` to log the `output` variable. View the two consoles to see the log. Finally, use `console.clear` after your log to clear the browser console. View the difference in the two consoles.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let output = \"Get this to show once in the freeCodeCamp console and not at all in the browser console\";"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let output = \"Get this to show once in the freeCodeCamp console and not at all in the browser console\";\n\nconsole.log(output);\nconsole.clear();"
        }
      ],
      "tests": [
        {
          "text": "You should use `console.log()` to print the `output` variable.",
          "testCode": "assert(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/console\\.log\\(output\\)/));"
        },
        {
          "text": "You should use `console.clear()` to clear the browser console.",
          "testCode": "assert(\n  __helpers\n    .removeWhiteSpace(__helpers.removeJSComments(code))\n    .match(/console.clear\\(\\)/)\n);"
        },
        {
          "text": "You should clear the console after your log.",
          "testCode": "assert(\n  __helpers\n    .removeWhiteSpace(__helpers.removeJSComments(code))\n    .match(/console\\.log\\(output\\)[\\s\\S]*console.clear\\(\\)/)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301193,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\understanding-the-differences-between-the-freecodecamp-and-browser-console.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b86367417b2b2512b3c",
      "title": "Use Caution When Reinitializing Variables Inside a Loop",
      "challengeType": 1,
      "dashedName": "use-caution-when-reinitializing-variables-inside-a-loop",
      "description": "Sometimes it's necessary to save information, increment counters, or re-set variables within a loop. A potential issue is when variables either should be reinitialized, and aren't, or vice versa. This is particularly dangerous if you accidentally reset the variable being used for the terminal condition, causing an infinite loop.\n\nPrinting variable values with each cycle of your loop by using `console.log()` can uncover buggy behavior related to resetting, or failing to reset a variable.",
      "instructions": "The following function is supposed to create a two-dimensional array with `m` rows and `n` columns of zeroes. Unfortunately, it's not producing the expected output because the `row` variable isn't being reinitialized (set back to an empty array) in the outer loop. Fix the code so it returns a correct 3x2 array of zeroes, which looks like `[[0, 0], [0, 0], [0, 0]]`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function zeroArray(m, n) {\n  // Creates a 2-D array with m rows and n columns of zeroes\n  let newArray = [];\n  let row = [];\n  for (let i = 0; i < m; i++) {\n    // Adds the m-th row into newArray\n\n    for (let j = 0; j < n; j++) {\n      // Pushes n zeroes into the current row to create the columns\n      row.push(0);\n    }\n    // Pushes the current row, which now has n zeroes in it, to the array\n    newArray.push(row);\n  }\n  return newArray;\n}\n\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function zeroArray(m, n) {\n // Creates a 2-D array with m rows and n columns of zeroes\n let newArray = [];\n for (let i = 0; i < m; i++) {\n   let row = [];\n   // Adds the m-th row into newArray\n\n   for (let j = 0; j < n; j++) {\n     // Pushes n zeroes into the current row to create the columns\n     row.push(0);\n   }\n   // Pushes the current row, which now has n zeroes in it, to the array\n   newArray.push(row);\n }\n return newArray;\n}\n\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);"
        }
      ],
      "tests": [
        {
          "text": "Your code should set the `matrix` variable to an array holding 3 rows of 2 columns of zeroes each.",
          "testCode": "assert(JSON.stringify(matrix) == '[[0,0],[0,0],[0,0]]');"
        },
        {
          "text": "The `matrix` variable should have 3 rows.",
          "testCode": "assert(matrix.length == 3);"
        },
        {
          "text": "The `matrix` variable should have 2 columns in each row.",
          "testCode": "assert(\n  matrix[0].length == 2 && matrix[1].length === 2 && matrix[2].length === 2\n);"
        },
        {
          "text": "`zeroArray(4,3)` should return an array holding 4 rows of 3 columns of zeroes each.",
          "testCode": "assert(JSON.stringify(zeroArray(4,3)) == '[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301194,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\use-caution-when-reinitializing-variables-inside-a-loop.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b83367417b2b2512b33",
      "title": "Use the JavaScript Console to Check the Value of a Variable",
      "challengeType": 1,
      "dashedName": "use-the-javascript-console-to-check-the-value-of-a-variable",
      "description": "Both Chrome and Firefox have excellent JavaScript consoles, also known as DevTools, for debugging your JavaScript.\n\nYou can find Developer tools in your Chrome's menu or Web Console in Firefox's menu. If you're using a different browser, or a mobile phone, we strongly recommend switching to desktop Firefox or Chrome.\n\nThe `console.log()` method, which \"prints\" the output of what's within its parentheses to the console, will likely be the most helpful debugging tool. Placing it at strategic points in your code can show you the intermediate values of variables. It's good practice to have an idea of what the output should be before looking at what it is. Having check points to see the status of your calculations throughout your code will help narrow down where the problem is.\n\nHere's an example to print the string `Hello world!` to the console:\n\n```js\nconsole.log('Hello world!');\n```",
      "instructions": "Use the `console.log()` method to print the value of the variable `a` where noted in the code.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let a = 5;\nlet b = 1;\na++;\n// Only change code below this line\n\n\nlet sumAB = a + b;\nconsole.log(sumAB);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var a = 5; console.log(a);"
        }
      ],
      "tests": [
        {
          "text": "Your code should use `console.log()` to check the value of the variable `a`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/console\\.log\\(a\\)/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18372,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\use-the-javascript-console-to-check-the-value-of-a-variable.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b84367417b2b2512b34",
      "title": "Use typeof to Check the Type of a Variable",
      "challengeType": 1,
      "dashedName": "use-typeof-to-check-the-type-of-a-variable",
      "description": "You can use `typeof` to check the data structure, or type, of a variable. This is useful in debugging when working with multiple data types. If you think you're adding two numbers, but one is actually a string, the results can be unexpected. Type errors can lurk in calculations or function calls. Be careful especially when you're accessing and working with external data in the form of a JavaScript Object Notation (JSON) object.\n\nHere are some examples using `typeof`:\n\n```js\nconsole.log(typeof \"\");\nconsole.log(typeof 0);\nconsole.log(typeof []);\nconsole.log(typeof {});\n```\n\nIn order, the console will display the strings `string`, `number`, `object`, and `object`.\n\nJavaScript recognizes seven primitive (immutable) data types: `Boolean`, `Null`, `Undefined`, `Number`, `String`, `Symbol` (new with ES6), and `BigInt` (new with ES2020), and one type for mutable items: `Object`. Note that in JavaScript, arrays are technically a type of object.",
      "instructions": "Add two `console.log()` statements to check the `typeof` each of the two variables `seven` and `three` in the code.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let seven = 7;\nlet three = \"3\";\nconsole.log(seven + three);\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let seven = 7;let three = \"3\";console.log(typeof seven);\nconsole.log(typeof three);"
        }
      ],
      "tests": [
        {
          "text": "Your code should use `typeof` in two `console.log()` statements to check the type of the variables.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/console\\.log\\s*\\(typeof[\\( ].*\\)?\\)/g).length == 2);"
        },
        {
          "text": "Your code should use `typeof` to check the type of the variable `seven`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/typeof[\\( ]seven\\)?/g));"
        },
        {
          "text": "Your code should use `typeof` to check the type of the variable `three`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/typeof[\\( ]three\\)?/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18374,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\debugging\\use-typeof-to-check-the-type-of-a-variable.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "debugging",
        "name": "Debugging"
      }
    },
    {
      "id": "587d7b87367417b2b2512b40",
      "title": "Compare Scopes of the var and let Keywords",
      "challengeType": 1,
      "dashedName": "compare-scopes-of-the-var-and-let-keywords",
      "description": "If you are unfamiliar with `let`, check out <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/explore-differences-between-the-var-and-let-keywords\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this challenge about the difference between <code>let</code> and <code>var</code></a>.\n\nWhen you declare a variable with the `var` keyword, it is declared globally, or locally if declared inside a function.\n\nThe `let` keyword behaves similarly, but with some extra features. When you declare a variable with the `let` keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.\n\nFor example:\n\n```js\nvar numArray = [];\nfor (var i = 0; i < 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray);\nconsole.log(i);\n```\n\nHere the console will display the values `[0, 1, 2]` and `3`.\n\nWith the `var` keyword, `i` is declared globally. So when `i++` is executed, it updates the global variable. This code is similar to the following:\n\n```js\nvar numArray = [];\nvar i;\nfor (i = 0; i < 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray);\nconsole.log(i);\n```\n\nHere the console will display the values `[0, 1, 2]` and `3`.\n\nThis behavior will cause problems if you were to create a function and store it for later use inside a `for` loop that uses the `i` variable. This is because the stored function will always refer to the value of the updated global `i` variable.\n\n```js\nvar printNumTwo;\nfor (var i = 0; i < 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo());\n```\n\nHere the console will display the value `3`.\n\nAs you can see, `printNumTwo()` prints 3 and not 2. This is because the value assigned to `i` was updated and the `printNumTwo()` returns the global `i` and not the value `i` had when the function was created in the for loop. The `let` keyword does not follow this behavior:\n\n```js\nlet printNumTwo;\nfor (let i = 0; i < 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo());\nconsole.log(i);\n```\n\nHere the console will display the value `2`, and an error that `i is not defined`.\n\n`i` is not defined because it was not declared in the global scope. It is only declared within the `for` loop statement. `printNumTwo()` returned the correct value because three different `i` variables with unique values (0, 1, and 2) were created by the `let` keyword within the loop statement.",
      "instructions": "Fix the code so that `i` declared in the `if` statement is a separate variable than `i` declared in the first line of the function. Be certain not to use the `var` keyword anywhere in your code.\n\nThis exercise is designed to illustrate the difference between how `var` and `let` keywords assign scope to the declared variable. When programming a function similar to the one used in this exercise, it is often better to use different variable names to avoid confusion.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function checkScope() {\n  var i = 'function scope';\n  if (true) {\n    i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n  console.log('Function scope i is: ', i);\n  return i;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function checkScope() {\n  let i = 'function scope';\n  if (true) {\n    let i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n \n  console.log('Function scope i is: ', i);\n  return i;\n}"
        }
      ],
      "tests": [
        {
          "text": "`var` should not exist in code.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/var/g));"
        },
        {
          "text": "The variable `i` declared in the `if` statement should equal the string `block scope`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/(i\\s*=\\s*).*\\s*.*\\s*.*\\1('|\")block\\s*scope\\2/g));"
        },
        {
          "text": "`checkScope()` should return the string `function scope`",
          "testCode": "assert(checkScope() === 'function scope');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301195,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\compare-scopes-of-the-var-and-let-keywords.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "5cdafbc32913098997531680",
      "title": "Complete a Promise with resolve and reject",
      "challengeType": 1,
      "dashedName": "complete-a-promise-with-resolve-and-reject",
      "description": "A promise has three states: `pending`, `fulfilled`, and `rejected`. The promise you created in the last challenge is forever stuck in the `pending` state because you did not add a way to complete the promise. The `resolve` and `reject` parameters given to the promise argument are used to do this. `resolve` is used when you want your promise to succeed, and `reject` is used when you want it to fail. These are methods that take an argument, as seen below.\n\n```js\nconst myPromise = new Promise((resolve, reject) => {\n  if(condition here) {\n    resolve(\"Promise was fulfilled\");\n  } else {\n    reject(\"Promise was rejected\");\n  }\n});\n```\n\nThe example above uses strings for the argument of these functions, but it can really be anything. Often, it might be an object, that you would use data from, to put on your website or elsewhere.",
      "instructions": "Make the promise handle success and failure. If `responseFromServer` is `true`, call the `resolve` method to successfully complete the promise. Pass `resolve` a string with the value `We got the data`. If `responseFromServer` is `false`, use the `reject` method instead and pass it the string: `Data not received`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer represents a response from a server\n  let responseFromServer;\n    \n  if(responseFromServer) {\n    // Change this line\n  } else {  \n    // Change this line\n  }\n});"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer represents a response from a server\n  let responseFromServer;\n\n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});"
        }
      ],
      "tests": [
        {
          "text": "`resolve` should be called with the expected string when the `if` condition is `true`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(/if\\s*\\(\\s*responseFromServer\\s*\\)\\s*{\\s*resolve\\s*\\(\\s*('|\"|`)We got the data\\1\\s*\\)(\\s*|\\s*;\\s*)}/g)\n);"
        },
        {
          "text": "`reject` should be called with the expected string when the `if` condition is `false`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(/}\\s*else\\s*{\\s*reject\\s*\\(\\s*('|\"|`)Data not received\\1\\s*\\)(\\s*|\\s*;\\s*)}/g)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301196,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\complete-a-promise-with-resolve-and-reject.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "5cdafbb0291309899753167f",
      "title": "Create a JavaScript Promise",
      "challengeType": 1,
      "dashedName": "create-a-javascript-promise",
      "description": "A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously. When the task completes, you either fulfill your promise or fail to do so. `Promise` is a constructor function, so you need to use the `new` keyword to create one. It takes a function, as its argument, with two parameters - `resolve` and `reject`. These are methods used to determine the outcome of the promise. The syntax looks like this:\n\n```js\nconst myPromise = new Promise((resolve, reject) => {\n\n});\n```",
      "instructions": "Create a new promise called `makeServerRequest`. Pass in a function with `resolve` and `reject` parameters to the constructor.",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const makeServerRequest = new Promise((resolve, reject) => {\n\n});"
        }
      ],
      "tests": [
        {
          "text": "You should assign a promise to a declared variable named `makeServerRequest`.",
          "testCode": "assert(makeServerRequest instanceof Promise);"
        },
        {
          "text": "Your promise should receive a function with `resolve` and `reject` as parameters.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /Promise\\s*\\(\\s*(function\\s*\\(\\s*resolve\\s*,\\s*reject\\s*\\)\\s*{|\\(\\s*resolve\\s*,\\s*reject\\s*\\)\\s*=>\\s*{)[^}]*}/g\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301197,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\create-a-javascript-promise.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "5cddbfd622f1a59093ec611d",
      "title": "Create a Module Script",
      "challengeType": 6,
      "dashedName": "create-a-module-script",
      "description": "JavaScript started with a small role to play on an otherwise mostly HTML web. Today, it’s huge, and some websites are built almost entirely with JavaScript. In order to make JavaScript more modular, clean, and maintainable; ES6 introduced a way to easily share code among JavaScript files. This involves exporting parts of a file for use in one or more other files, and importing the parts you need, where you need them. In order to take advantage of this functionality, you need to create a script in your HTML document with a `type` of `module`. Here’s an example:\n\n```html\n<script type=\"module\" src=\"filename.js\"></script>\n```\n\nA script that uses this `module` type can now use the `import` and `export` features you will learn about in the upcoming challenges.",
      "instructions": "Add a script to the HTML document of type `module` and give it the source file of `index.js`",
      "boilerplate": [
        {
          "language": "html",
          "code": "<html>\n  <body>\n    <!-- Only change code below this line -->\n\n    <!-- Only change code above this line -->\n  </body>\n</html>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<html>\n  <body>\n    <script type=\"module\" src=\"index.js\"></script>\n  </body>\n</html>"
        }
      ],
      "tests": [
        {
          "text": "You should create a `script` tag.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/<\\s*script[^>]*>\\s*<\\/\\s*script\\s*>/g));"
        },
        {
          "text": "Your `script` tag should have the `type` attribute with a value of `module`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /<\\s*script\\s+[^t]*type\\s*=\\s*('|\")module\\1[^>]*>\\s*<\\/\\s*script\\s*>/g\n  )\n);"
        },
        {
          "text": "Your `script` tag should have a `src` of `index.js`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /<\\s*script\\s+[^s]*src\\s*=\\s*('|\")index\\.js\\1[^>]*>\\s*<\\/\\s*script\\s*>/g\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301198,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\create-a-module-script.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8c367417b2b2512b58",
      "title": "Create an Export Fallback with export default",
      "challengeType": 1,
      "dashedName": "create-an-export-fallback-with-export-default",
      "description": "In the `export` lesson, you learned about the syntax referred to as a <dfn>named export</dfn>. This allowed you to make multiple functions and variables available for use in other files.\n\nThere is another `export` syntax you need to know, known as <dfn>export default</dfn>. Usually you will use this syntax if only one value is being exported from a file. It is also used to create a fallback value for a file or module.\n\nBelow are examples using `export default`:\n\n```js\nexport default function add(x, y) {\n  return x + y;\n}\n\nexport default function(x, y) {\n  return x + y;\n}\n```\n\nThe first is a named function, and the second is an anonymous function.\n\nSince `export default` is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file. Additionally, you cannot use `export default` with `var`, `let`, or `const`",
      "instructions": "The following function should be the fallback value for the module. Please add the necessary code to do so.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function subtract(x, y) {\n  return x - y;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "export default function subtract(x, y) {\n  return x - y;\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should use an `export` fallback.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /export\\s+default\\s+function(\\s+subtract\\s*|\\s*)\\(\\s*x,\\s*y\\s*\\)\\s*{/g\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301199,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\create-an-export-fallback-with-export-default.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8a367417b2b2512b4e",
      "title": "Create Strings using Template Literals",
      "challengeType": 1,
      "dashedName": "create-strings-using-template-literals",
      "description": "A new feature of ES6 is the <dfn>template literal</dfn>. This is a special type of string that makes creating complex strings easier.\n\nTemplate literals allow you to create multi-line strings and to use string interpolation features to create strings.\n\nConsider the code below:\n\n```js\nconst person = {\n  name: \"Zodiac Hasbro\",\n  age: 56\n};\n\nconst greeting = `Hello, my name is ${person.name}!\nI am ${person.age} years old.`;\n\nconsole.log(greeting);\n```\n\nThe console will display the strings `Hello, my name is Zodiac Hasbro!` and `I am 56 years old.`.\n\nA lot of things happened there. Firstly, the example uses backticks (`` ` ``), not quotes (`'` or `\"`), to wrap the string. Secondly, notice that the string is multi-line, both in the code and the output. This saves inserting `\\n` within strings. The `${variable}` syntax used above is a placeholder. Basically, you won't have to use concatenation with the `+` operator anymore. To add variables to strings, you just drop the variable in a template string and wrap it with `${` and `}`. Similarly, you can include other expressions in your string literal, for example `${a + b}`. This new way of creating strings gives you more flexibility to create robust strings.",
      "instructions": "Use template literal syntax with backticks to create an array of list element (`li`) strings. Each list element's text should be one of the array elements from the `failure` property on the `result` object and have a `class` attribute with the value `text-warning`. The `makeList` function should return the array of list item strings.\n\nUse an iterator method (any kind of loop) to get the desired output (shown below).\n\n```js\n[\n  '<li class=\"text-warning\">no-var</li>',\n  '<li class=\"text-warning\">var-on-top</li>',\n  '<li class=\"text-warning\">linebreak</li>'\n]\n```",
      "boilerplate": [
        {
          "language": "js",
          "code": "const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  // Only change code below this line\n  const failureItems = [];\n  // Only change code above this line\n\n  return failureItems;\n}\n\nconst failuresList = makeList(result.failure);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  return arr.map(val => `<li class=\"text-warning\">${val}</li>`);\n}\n\nconst failuresList = makeList(result.failure);"
        }
      ],
      "tests": [
        {
          "text": "`failuresList` should be an array containing `result failure` messages.",
          "testCode": "assert(\n  typeof makeList(result.failure) === 'object' && failuresList.length === 3\n);"
        },
        {
          "text": "`failuresList` should be equal to the specified output.",
          "testCode": "assert(\n  makeList(result.failure).every(\n    (v, i) =>\n      v === `<li class=\"text-warning\">${result.failure[i]}</li>` ||\n      v === `<li class='text-warning'>${result.failure[i]}</li>`\n  )\n);"
        },
        {
          "text": "Template strings and expression interpolation should be used.",
          "testCode": "assert.match(code, /(`.*\\${.*}.*`)/);"
        },
        {
          "text": "An iterator should be used.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/for|map|reduce|forEach|while/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301200,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\create-strings-using-template-literals.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "5cdafbd72913098997531681",
      "title": "Handle a Fulfilled Promise with then",
      "challengeType": 1,
      "dashedName": "handle-a-fulfilled-promise-with-then",
      "description": "Promises are most useful when you have a process that takes an unknown amount of time in your code (i.e. something asynchronous), often a server request. When you make a server request it takes some amount of time, and after it completes you usually want to do something with the response from the server. This can be achieved by using the `then` method.\n\n```js\nPromise.prototype.then(onFulfilled, onRejected)\n```\n\nThe `then` method schedules callback functions for the eventual completion of a Promise - either fulfillment or rejection. One of the `onFulfilled` and `onRejected` handlers will be executed to handle the current promise's fulfillment or rejection. When the promise is fulfilled with `resolve` the `onFulfilled` handler is called.\n\n```js\nmyPromise.then(result => {\n  \n});\n```\n\n`result` comes from the argument given to the `resolve` method.",
      "instructions": "Add the `then` method to your promise. Use `result` as the parameter of its callback function and log `result` to the console.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to true to represent a successful response from a server\n  let responseFromServer = true;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to true to represent a successful response from a server\n  let responseFromServer = true;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});"
        }
      ],
      "tests": [
        {
          "text": "You should call the `then` method on the promise.",
          "testCode": "assert(\n  __helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/(makeServerRequest|\\))\\.then\\(/g)\n);"
        },
        {
          "text": "Your `then` method should have a callback function with `result` as its parameter.",
          "testCode": "assert(resultIsParameter);"
        },
        {
          "text": "You should log `result` to the console.",
          "testCode": "assert(\n  resultIsParameter &&\n    __helpers\n      .removeWhiteSpace(__helpers.removeJSComments(code))\n      .match(/\\.then\\(.*?result.*?console.log\\(result\\).*?\\)/)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301203,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\handle-a-fulfilled-promise-with-then.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const resultIsParameter = /\\.then\\((function\\(result\\){|result|\\(result\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "5cdafbe72913098997531682",
      "title": "Handle a Rejected Promise with catch",
      "challengeType": 1,
      "dashedName": "handle-a-rejected-promise-with-catch",
      "description": "`catch` is the method used when your promise has been rejected. It is executed immediately after a promise's `reject` method is called. Here’s the syntax:\n\n```js\nmyPromise.catch(error => {\n  \n});\n```\n\n`error` is the argument passed in to the `reject` method.",
      "instructions": "Add the `catch` method to your promise. Use `error` as the parameter of its callback function and log `error` to the console.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});"
        }
      ],
      "tests": [
        {
          "text": "You should call the `catch` method on the promise.",
          "testCode": "assert(\n  __helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/(makeServerRequest|\\))\\.catch\\(/g)\n);"
        },
        {
          "text": "Your `catch` method should have a callback function with `error` as its parameter.",
          "testCode": "assert(errorIsParameter);"
        },
        {
          "text": "You should log `error` to the console.",
          "testCode": "assert(\n  errorIsParameter &&\n    __helpers\n      .removeWhiteSpace(__helpers.removeJSComments(code))\n      .match(/\\.catch\\(.*?error.*?console.log\\(error\\).*?\\)/)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301204,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\handle-a-rejected-promise-with-catch.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8d367417b2b2512b59",
      "title": "Import a Default Export",
      "challengeType": 1,
      "dashedName": "import-a-default-export",
      "description": "In the last challenge, you learned about `export default` and its uses. To import a default export, you need to use a different `import` syntax. In the following example, `add` is the default export of the `math_functions.js` file. Here is how to import it:\n\n```js\nimport add from \"./math_functions.js\";\n```\n\nThe syntax differs in one key place. The imported value, `add`, is not surrounded by curly braces (`{}`). `add` here is simply a variable name for whatever the default export of the `math_functions.js` file is. You can use any name here when importing a default.",
      "instructions": "In the following code, import the default export from the `math_functions.js` file, found in the same directory as this file. Give the import the name `subtract`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code above this line\n\nsubtract(7,4);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "import subtract from \"./math_functions.js\";\n\nsubtract(7,4);"
        }
      ],
      "tests": [
        {
          "text": "You should properly import `subtract` from `math_functions.js`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/import\\s+subtract\\s+from\\s+('|\")\\.\\/math_functions\\.js\\1/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301205,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\import-a-default-export.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b87367417b2b2512b42",
      "title": "Mutate an Array Declared with const",
      "challengeType": 1,
      "dashedName": "mutate-an-array-declared-with-const",
      "description": "If you are unfamiliar with `const`, check out <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-a-read-only-variable-with-the-const-keyword\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this challenge about the <code>const</code> keyword</a>.\n\nThe `const` declaration has many use cases in modern JavaScript.\n\nSome developers prefer to assign all their variables using `const` by default, unless they know they will need to reassign the value. Only in that case, they use `let`.\n\nHowever, it is important to understand that objects (including arrays and functions) assigned to a variable using `const` are still mutable. Using the `const` declaration only prevents reassignment of the variable identifier.\n\n```js\nconst s = [5, 6, 7];\ns = [1, 2, 3];\ns[2] = 45;\nconsole.log(s);\n```\n\n`s = [1, 2, 3]` will result in an error. After commenting out that line, the `console.log` will display the value `[5, 6, 45]`.\n\nAs you can see, you can mutate the object `[5, 6, 7]` itself and the variable `s` will still point to the altered array `[5, 6, 45]`. Like all arrays, the array elements in `s` are mutable, but because `const` was used, you cannot use the variable identifier `s` to point to a different array using the assignment operator.",
      "instructions": "An array is declared as `const s = [5, 7, 2]`. Change the array to `[2, 5, 7]` using various element assignments.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const s = [5, 7, 2];\nfunction editInPlace() {\n  // Only change code below this line\n\n  // Using s = [2, 5, 7] would be invalid\n\n  // Only change code above this line\n}\neditInPlace();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const s = [5, 7, 2];\nfunction editInPlace() {\n  s[0] = 2;\n  s[1] = 5;\n  s[2] = 7;\n}\neditInPlace();"
        }
      ],
      "tests": [
        {
          "text": "You should not replace `const` keyword.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/const/g));"
        },
        {
          "text": "`s` should be a constant variable (by using `const`).",
          "testCode": "assert(__helpers.removeJSComments(code).match(/const\\s+s/g));"
        },
        {
          "text": "You should not change the original array declaration.",
          "testCode": "assert(__helpers.removeJSComments(code).match(\n/const\\s+s\\s*=\\s*\\[\\s*5\\s*,\\s*7\\s*,\\s*2\\s*\\]\\s*;?/g\n));"
        },
        {
          "text": "`s` should be equal to `[2, 5, 7]`.",
          "testCode": "assert.deepEqual(s, [2, 5, 7]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301206,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\mutate-an-array-declared-with-const.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "598f48a36c8c40764b4e52b3",
      "title": "Prevent Object Mutation",
      "challengeType": 1,
      "dashedName": "prevent-object-mutation",
      "description": "As seen in the previous challenge, `const` declaration alone doesn't really protect your data from mutation. To ensure your data doesn't change, JavaScript provides a function `Object.freeze` to prevent data mutation.\n\nAny attempt at changing the object will be rejected, with an error thrown if the script is running in strict mode.\n\n```js\nlet obj = {\n  name:\"FreeCodeCamp\",\n  review:\"Awesome\"\n};\nObject.freeze(obj);\nobj.review = \"bad\";\nobj.newProp = \"Test\";\nconsole.log(obj); \n```\n\nThe `obj.review` and `obj.newProp` assignments will result in errors, because our editor runs in strict mode by default, and the console will display the value `{ name: \"FreeCodeCamp\", review: \"Awesome\" }`.",
      "instructions": "In this challenge you are going to use `Object.freeze` to prevent mathematical constants from changing. You need to freeze the `MATH_CONSTANTS` object so that no one is able to alter the value of `PI`, add, or delete properties.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function freezeObj() {\n  const MATH_CONSTANTS = {\n    PI: 3.14\n  };\n  // Only change code below this line\n\n\n  // Only change code above this line\n  try {\n    MATH_CONSTANTS.PI = 99;\n  } catch(ex) {\n    console.log(ex);\n  }\n  return MATH_CONSTANTS.PI;\n}\nconst PI = freezeObj();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function freezeObj() {\n  const MATH_CONSTANTS = {\n    PI: 3.14\n  };\n  Object.freeze(MATH_CONSTANTS);\n\n  try {\n    MATH_CONSTANTS.PI = 99;\n  } catch(ex) {\n    console.log(ex);\n  }\n  return MATH_CONSTANTS.PI;\n}\nconst PI = freezeObj();"
        }
      ],
      "tests": [
        {
          "text": "You should not replace the `const` keyword.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/const/g));"
        },
        {
          "text": "`MATH_CONSTANTS` should be a constant variable (by using `const`).",
          "testCode": "assert(__helpers.removeJSComments(code).match(/const\\s+MATH_CONSTANTS/g));"
        },
        {
          "text": "You should not change the original declaration of `MATH_CONSTANTS`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(\n   /const\\s+MATH_CONSTANTS\\s+=\\s+{\\s+PI:\\s+3.14\\s+};/g\n));"
        },
        {
          "text": "`PI` should equal `3.14`.",
          "testCode": "assert(PI === 3.14);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301207,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\prevent-object-mutation.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8c367417b2b2512b55",
      "title": "Reuse JavaScript Code Using import",
      "challengeType": 1,
      "dashedName": "reuse-javascript-code-using-import",
      "description": "`import` allows you to choose which parts of a file or module to load. In the previous lesson, the examples exported `add` from the `math_functions.js` file. Here's how you can import it to use in another file:\n\n```js\nimport { add } from './math_functions.js';\n```\n\nHere, `import` will find `add` in `math_functions.js`, import just that function for you to use, and ignore the rest. The `./` tells the import to look for the `math_functions.js` file in the same folder as the current file. The relative file path (`./`) and file extension (`.js`) are required when using import in this way.\n\nYou can import more than one item from the file by adding them in the `import` statement like this:\n\n```js\nimport { add, subtract } from './math_functions.js';\n```",
      "instructions": "Add the appropriate `import` statement that will allow the current file to use the `uppercaseString` and `lowercaseString` functions you exported in the previous lesson. These functions are in a file called `string_functions.js`, which is in the same directory as the current file.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code above this line\n\nuppercaseString(\"hello\");\nlowercaseString(\"WORLD!\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "import { uppercaseString, lowercaseString } from './string_functions.js';\n\nuppercaseString(\"hello\");\nlowercaseString(\"WORLD!\");"
        }
      ],
      "tests": [
        {
          "text": "You should properly import `uppercaseString`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /import\\s*{\\s*(uppercaseString[^}]*|[^,]*,\\s*uppercaseString\\s*)}\\s+from\\s+('|\")\\.\\/string_functions\\.js\\2/g\n  )\n);"
        },
        {
          "text": "You should properly import `lowercaseString`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /import\\s*{\\s*(lowercaseString[^}]*|[^,]*,\\s*lowercaseString\\s*)}\\s+from\\s+('|\")\\.\\/string_functions\\.js\\2/g\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301208,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\reuse-javascript-code-using-import.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b88367417b2b2512b46",
      "title": "Set Default Parameters for Your Functions",
      "challengeType": 1,
      "dashedName": "set-default-parameters-for-your-functions",
      "description": "In order to help us create more flexible functions, ES6 introduces <dfn>default parameters</dfn> for functions.\n\nCheck out this code:\n\n```js\nconst greeting = (name = \"Anonymous\") => \"Hello \" + name;\n\nconsole.log(greeting(\"John\"));\nconsole.log(greeting());\n```\n\nThe console will display the strings `Hello John` and `Hello Anonymous`.\n\nThe default parameter kicks in when the argument is not specified (it is undefined). As you can see in the example above, the parameter `name` will receive its default value `Anonymous` when you do not provide a value for the parameter. You can add default values for as many parameters as you want.",
      "instructions": "Modify the function `increment` by adding default parameters so that it will add 1 to `number` if `value` is not specified.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nconst increment = (number, value) => number + value;\n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const increment = (number, value = 1) => number + value;"
        }
      ],
      "tests": [
        {
          "text": "The result of `increment(5, 2)` should be `7`.",
          "testCode": "assert(increment(5, 2) === 7);"
        },
        {
          "text": "The result of `increment(5)` should be `6`.",
          "testCode": "assert(increment(5) === 6);"
        },
        {
          "text": "A default parameter value of `1` should be used for `value`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/value\\s*=\\s*1/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301209,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\set-default-parameters-for-your-functions.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8c367417b2b2512b57",
      "title": "Use * to Import Everything from a File",
      "challengeType": 1,
      "dashedName": "use--to-import-everything-from-a-file",
      "description": "Suppose you have a file and you wish to import all of its contents into the current file. This can be done with the `import * as` syntax. Here's an example where the contents of a file named `math_functions.js` are imported into a file in the same directory:\n\n```js\nimport * as myMathModule from \"./math_functions.js\";\n```\n\nThe above `import` statement will create an object called `myMathModule`. This is just a variable name, you can name it anything. The object will contain all of the exports from `math_functions.js` in it, so you can access the functions like you would any other object property. Here's how you can use the `add` and `subtract` functions that were imported:\n\n```js\nmyMathModule.add(2,3);\nmyMathModule.subtract(5,3);\n```",
      "instructions": "The code in this file requires the contents of the file: `string_functions.js`, that is in the same directory as the current file. Use the `import * as` syntax to import everything from the file into an object called `stringFunctions`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code above this line\n\nstringFunctions.uppercaseString(\"hello\");\nstringFunctions.lowercaseString(\"WORLD!\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "import * as stringFunctions from \"./string_functions.js\";\n\n// add code above this line\nstringFunctions.uppercaseString(\"hello\");\nstringFunctions.lowercaseString(\"WORLD!\");"
        }
      ],
      "tests": [
        {
          "text": "Your code should properly use `import * as` syntax.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /import\\s*\\*\\s*as\\s+stringFunctions\\s+from\\s*('|\")\\.\\/string_functions\\.js\\1/g\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301210,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use--to-import-everything-from-a-file.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b87367417b2b2512b43",
      "title": "Use Arrow Functions to Write Concise Anonymous Functions",
      "challengeType": 1,
      "dashedName": "use-arrow-functions-to-write-concise-anonymous-functions",
      "description": "In JavaScript, we often don't need to name our functions, especially when passing a function as an argument to another function. Instead, we create inline functions. We don't need to name these functions because we do not reuse them anywhere else.\n\nTo achieve this, we often use the following syntax:\n\n```js\nconst myFunc = function() {\n  const myVar = \"value\";\n  return myVar;\n}\n```\n\nES6 provides us with the syntactic sugar to not have to write anonymous functions this way. Instead, you can use **arrow function syntax**:\n\n```js\nconst myFunc = () => {\n  const myVar = \"value\";\n  return myVar;\n}\n```\n\nWhen there is no function body, and only a return value, arrow function syntax allows you to omit the keyword `return` as well as the brackets surrounding the code. This helps simplify smaller functions into one-line statements:\n\n```js\nconst myFunc = () => \"value\";\n```\n\nThis code will still return the string `value` by default.",
      "instructions": "Rewrite the function assigned to the variable `magic` which returns a `new Date()` to use arrow function syntax. Also, make sure nothing is defined using the keyword `var`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "var magic = function() {\n  return new Date();\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const magic = () => {\n  return new Date();\n};"
        }
      ],
      "tests": [
        {
          "text": "You should replace the `var` keyword.",
          "testCode": "assert.notMatch(code, /var/g)"
        },
        {
          "text": "`magic` should be a constant variable (by using `const`).",
          "testCode": "assert.match(code, /const\\s+magic/g)"
        },
        {
          "text": "`magic` should be a `function`.",
          "testCode": "assert(typeof magic === 'function');"
        },
        {
          "text": "`magic()` should return the correct date.",
          "testCode": "assert(magic().setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));"
        },
        {
          "text": "The `function` keyword should not be used.",
          "testCode": "assert.notMatch(code, /function/g)"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301211,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-arrow-functions-to-write-concise-anonymous-functions.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8b367417b2b2512b53",
      "title": "Use class Syntax to Define a Constructor Function",
      "challengeType": 1,
      "dashedName": "use-class-syntax-to-define-a-constructor-function",
      "description": "ES6 provides a new syntax to create objects, using the <dfn>class</dfn> keyword.\n\nIn ES5, an object can be created by defining a `constructor` function and using the `new` keyword to instantiate the object.\n\nIn ES6, a `class` declaration has a `constructor` method that is invoked with the `new` keyword. If the `constructor` method is not explicitly defined, then it is implicitly defined with no arguments.\n\n```js\n// Explicit constructor\nclass SpaceShuttle {\n  constructor(targetPlanet) {\n    this.targetPlanet = targetPlanet;\n  }\n  takeOff() {\n    console.log(\"To \" + this.targetPlanet + \"!\");\n  }\n}\n\n// Implicit constructor \nclass Rocket {\n  launch() {\n    console.log(\"To the moon!\");\n  }\n}\n\nconst zeus = new SpaceShuttle('Jupiter');\n// prints To Jupiter! in console\nzeus.takeOff();\n\nconst atlas = new Rocket();\n// prints To the moon! in console\natlas.launch();\n```\n\nIt should be noted that the `class` keyword declares a new function, to which a constructor is added. This constructor is invoked when `new` is called to create a new object.\n\n**Note:** UpperCamelCase should be used by convention for ES6 class names, as in `SpaceShuttle` used above.\n\nThe `constructor` method is a special method for creating and initializing an object created with a class. You will learn more about it in the Object Oriented Programming section of the JavaScript Algorithms And Data Structures Certification.",
      "instructions": "Use the `class` keyword and write a `constructor` to create the `Vegetable` class.\n\nThe `Vegetable` class allows you to create a vegetable object with a property `name` that gets passed to the `constructor`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\n\n// Only change code above this line\n\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // Should display 'carrot'"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "class Vegetable {\n  constructor(name) {\n    this.name = name;\n  }\n}\nconst carrot = new Vegetable('carrot');"
        }
      ],
      "tests": [
        {
          "text": "`Vegetable` should be a `class` with a defined `constructor` method.",
          "testCode": "assert(\n  typeof Vegetable === 'function' && typeof Vegetable.constructor === 'function'\n);"
        },
        {
          "text": "The `class` keyword should be used.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/class/g));"
        },
        {
          "text": "`Vegetable` should be able to be instantiated.",
          "testCode": "assert(() => {\n  const a = new Vegetable('apple');\n  return typeof a === 'object';\n});"
        },
        {
          "text": "`carrot.name` should return `carrot`.",
          "testCode": "assert(carrot.name == 'carrot');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301212,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-class-syntax-to-define-a-constructor-function.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b89367417b2b2512b4b",
      "title": "Use Destructuring Assignment to Assign Variables from Arrays",
      "challengeType": 1,
      "dashedName": "use-destructuring-assignment-to-assign-variables-from-arrays",
      "description": "ES6 makes destructuring arrays as easy as destructuring objects.\n\nOne key difference between the spread operator and array destructuring is that the spread operator unpacks all contents of an array into a comma-separated list. Consequently, you cannot pick or choose which elements you want to assign to variables.\n\nDestructuring an array lets us do exactly that:\n\n```js\nconst [a, b] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b);\n```\n\nThe console will display the values of `a` and `b` as `1, 2`.\n\nThe variable `a` is assigned the first value of the array, and `b` is assigned the second value of the array. We can also access the value at any index in an array with destructuring by using commas to reach the desired index:\n\n```js\nconst [a, b,,, c] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b, c);\n```\n\nThe console will display the values of `a`, `b`, and `c` as `1, 2, 5`.",
      "instructions": "Use destructuring assignment to swap the values of `a` and `b` so that `a` receives the value stored in `b`, and `b` receives the value stored in `a`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let a = 8, b = 6;\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let a = 8, b = 6;\n[a, b] = [b, a];"
        }
      ],
      "tests": [
        {
          "text": "The value of `a` should be `6`, after swapping.",
          "testCode": "assert(a === 6);"
        },
        {
          "text": "The value of `b` should be `8`, after swapping.",
          "testCode": "assert(b === 8);"
        },
        {
          "text": "You should use array destructuring to swap `a` and `b`.",
          "testCode": "assert(/\\[\\s*(\\w)\\s*,\\s*(\\w)\\s*\\]\\s*=\\s*\\[\\s*\\2\\s*,\\s*\\1\\s*\\]/g.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301213,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-destructuring-assignment-to-assign-variables-from-arrays.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b89367417b2b2512b4a",
      "title": "Use Destructuring Assignment to Assign Variables from Nested Objects",
      "challengeType": 1,
      "dashedName": "use-destructuring-assignment-to-assign-variables-from-nested-objects",
      "description": "You can use the same principles from the previous two lessons to destructure values from nested objects.\n\nUsing an object similar to previous examples:\n\n```js\nconst user = {\n  johnDoe: { \n    age: 34,\n    email: 'johnDoe@freeCodeCamp.com'\n  }\n};\n```\n\nHere's how to extract the values of object properties and assign them to variables with the same name:\n\n```js\nconst { johnDoe: { age, email }} = user;\n```\n\nAnd here's how you can assign an object properties' values to variables with different names:\n\n```js\nconst { johnDoe: { age: userAge, email: userEmail }} = user;\n```",
      "instructions": "Replace the two assignments with an equivalent destructuring assignment. It should still assign the variables `lowToday` and `highToday` the values of `today.low` and `today.high` from the `LOCAL_FORECAST` object.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const LOCAL_FORECAST = {\n  yesterday: { low: 61, high: 75 },\n  today: { low: 64, high: 77 },\n  tomorrow: { low: 68, high: 80 }\n};\n\n// Only change code below this line\n  \nconst lowToday = LOCAL_FORECAST.today.low;\nconst highToday = LOCAL_FORECAST.today.high;\n\n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const LOCAL_FORECAST = {\n  yesterday: { low: 61, high: 75 },\n  today: { low: 64, high: 77 },\n  tomorrow: { low: 68, high: 80 }\n};\n \nconst { today: { low: lowToday, high: highToday }} = LOCAL_FORECAST;"
        }
      ],
      "tests": [
        {
          "text": "You should remove the ES5 assignment syntax.",
          "testCode": "assert(\n  !__helpers.removeJSComments(code).match(/lowToday = LOCAL_FORECAST\\.today\\.low/g) &&\n    !__helpers.removeJSComments(code).match(/highToday = LOCAL_FORECAST\\.today.high/g)\n);"
        },
        {
          "text": "You should use destructuring to create the `lowToday` variable.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /(var|const|let)\\s*{\\s*today\\s*:\\s*{\\s*(low\\s*:\\s*lowToday[^}]*|[^,]*,\\s*low\\s*:\\s*lowToday\\s*)},?\\s*}\\s*=\\s*LOCAL_FORECAST(;|\\s+|\\/\\/)/g\n  )\n);"
        },
        {
          "text": "You should use destructuring to create the `highToday` variable.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /(var|const|let)\\s*{\\s*today\\s*:\\s*{\\s*(high\\s*:\\s*highToday[^}]*|[^,]*,\\s*high\\s*:\\s*highToday,?\\s*)},?\\s*}\\s*=\\s*LOCAL_FORECAST(;|\\s+|\\/\\/)/g\n  )\n);"
        },
        {
          "text": "`lowToday` should be equal to `64` and `highToday` should be equal to `77`.",
          "testCode": "assert(lowToday === 64 && highToday === 77);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301214,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-destructuring-assignment-to-assign-variables-from-nested-objects.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b89367417b2b2512b49",
      "title": "Use Destructuring Assignment to Assign Variables from Objects",
      "challengeType": 1,
      "dashedName": "use-destructuring-assignment-to-assign-variables-from-objects",
      "description": "Destructuring allows you to assign a new variable name when extracting values. You can do this by putting the new name after a colon when assigning the value.\n\nUsing the same object from the last example:\n\n```js\nconst user = { name: 'John Doe', age: 34 };\n```\n\nHere's how you can give new variable names in the assignment:\n\n```js\nconst { name: userName, age: userAge } = user;\n```\n\nYou may read it as \"get the value of `user.name` and assign it to a new variable named `userName`\" and so on. The value of `userName` would be the string `John Doe`, and the value of `userAge` would be the number `34`.",
      "instructions": "Replace the two assignments with an equivalent destructuring assignment. It should still assign the variables `highToday` and `highTomorrow` the values of `today` and `tomorrow` from the `HIGH_TEMPERATURES` object.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\n// Only change code below this line\n  \nconst highToday = HIGH_TEMPERATURES.today;\nconst highTomorrow = HIGH_TEMPERATURES.tomorrow; \n\n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\nconst { today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES;"
        }
      ],
      "tests": [
        {
          "text": "You should remove the ES5 assignment syntax.",
          "testCode": "assert(\n  !__helpers.removeJSComments(code).match(/highToday = HIGH_TEMPERATURES\\.today/g) &&\n    !__helpers.removeJSComments(code).match(/highTomorrow = HIGH_TEMPERATURES\\.tomorrow/g)\n);"
        },
        {
          "text": "You should use destructuring to create the `highToday` variable.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /(var|const|let)\\s*{\\s*(today\\s*:\\s*highToday[^}]*|[^,]*,\\s*today\\s*:\\s*highToday\\s*)}\\s*=\\s*HIGH_TEMPERATURES(;|\\s+|\\/\\/)/g\n  )\n);"
        },
        {
          "text": "You should use destructuring to create the `highTomorrow` variable.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /(var|const|let)\\s*{\\s*(tomorrow\\s*:\\s*highTomorrow[^}]*|[^,]*,\\s*tomorrow\\s*:\\s*highTomorrow\\s*)}\\s*=\\s*HIGH_TEMPERATURES(;|\\s+|\\/\\/)/g\n  )\n);"
        },
        {
          "text": "`highToday` should be equal to `77` and `highTomorrow` should be equal to `80`.",
          "testCode": "assert(highToday === 77 && highTomorrow === 80);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301215,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-destructuring-assignment-to-assign-variables-from-objects.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "5cfa550e84205a357704ccb6",
      "title": "Use Destructuring Assignment to Extract Values from Objects",
      "challengeType": 1,
      "dashedName": "use-destructuring-assignment-to-extract-values-from-objects",
      "description": "<dfn>Destructuring assignment</dfn> is special syntax introduced in ES6, for neatly assigning values taken directly from an object.\n\nConsider the following ES5 code:\n\n```js\nconst user = { name: 'John Doe', age: 34 };\n\nconst name = user.name;\nconst age = user.age;\n```\n\n`name` would have a value of the string `John Doe`, and `age` would have the number `34`.\n\nHere's an equivalent assignment statement using the ES6 destructuring syntax:\n\n```js\nconst { name, age } = user;\n```\n\nAgain, `name` would have a value of the string `John Doe`, and `age` would have the number `34`.\n\nHere, the `name` and `age` variables will be created and assigned the values of their respective values from the `user` object. You can see how much cleaner this is.\n\nYou can extract as many or few values from the object as you want.",
      "instructions": "Replace the two assignments with an equivalent destructuring assignment. It should still assign the variables `today` and `tomorrow` the values of `today` and `tomorrow` from the `HIGH_TEMPERATURES` object.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\n// Only change code below this line\n\nconst today = HIGH_TEMPERATURES.today;\nconst tomorrow = HIGH_TEMPERATURES.tomorrow;\n\n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\nconst { today, tomorrow } = HIGH_TEMPERATURES;"
        }
      ],
      "tests": [
        {
          "text": "You should remove the ES5 assignment syntax.",
          "testCode": "assert(\n  !__helpers.removeJSComments(code).match(/today\\s*=\\s*HIGH_TEMPERATURES\\.(today|tomorrow)/g)\n);"
        },
        {
          "text": "You should use destructuring to create the `today` variable.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(/(var|let|const)\\s*{\\s*(today[^}]*|[^,]*,\\s*today)\\s*}\\s*=\\s*HIGH_TEMPERATURES(;|\\s+|\\/\\/)/g)\n);"
        },
        {
          "text": "You should use destructuring to create the `tomorrow` variable.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(/(var|let|const)\\s*{\\s*(tomorrow[^}]*|[^,]*,\\s*tomorrow)\\s*}\\s*=\\s*HIGH_TEMPERATURES(;|\\s+|\\/\\/)/g)\n);"
        },
        {
          "text": "`today` should be equal to `77` and `tomorrow` should be equal to `80`.",
          "testCode": "assert(today === 77 && tomorrow === 80);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301216,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-destructuring-assignment-to-extract-values-from-objects.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8a367417b2b2512b4d",
      "title": "Use Destructuring Assignment to Pass an Object as a Function's Parameters",
      "challengeType": 1,
      "dashedName": "use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters",
      "description": "In some cases, you can destructure the object in a function argument itself.\n\nConsider the code below:\n\n```js\nconst profileUpdate = (profileData) => {\n  const { name, age, nationality, location } = profileData;\n\n}\n```\n\nThis effectively destructures the object sent into the function. This can also be done in-place:\n\n```js\nconst profileUpdate = ({ name, age, nationality, location }) => {\n\n}\n```\n\nWhen `profileData` is passed to the above function, the values are destructured from the function parameter for use within the function.",
      "instructions": "Use destructuring assignment within the argument to the function `half` to send only `max` and `min` inside the function.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\n\n// Only change code below this line\nconst half = (stats) => (stats.max + stats.min) / 2.0; \n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\n\nconst half = ( {max, min} ) => (max + min) / 2.0;"
        }
      ],
      "tests": [
        {
          "text": "`stats` should be an `object`.",
          "testCode": "assert(typeof stats === 'object');"
        },
        {
          "text": "`half(stats)` should be `28.015`",
          "testCode": "assert(half(stats) === 28.015);"
        },
        {
          "text": "Destructuring should be used.",
          "testCode": "assert(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/half=\\({\\w+,\\w+}\\)/));"
        },
        {
          "text": "Destructured parameter should be used.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/stats\\.max|stats\\.min/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301217,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8a367417b2b2512b4c",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "In some situations involving array destructuring, we might want to collect the rest of the elements into a separate array.\n\nThe result is similar to `Array.prototype.slice()`, as shown below:\n\n```js\nconst [a, b, ...arr] = [1, 2, 3, 4, 5, 7];\nconsole.log(a, b);\nconsole.log(arr);\n```\n\nThe console would display the values `1, 2` and `[3, 4, 5, 7]`.\n\nVariables `a` and `b` take the first and second values from the array. After that, because of the rest syntax presence, `arr` gets the rest of the values in the form of an array. The rest element only works correctly as the last variable in the list. As in, you cannot use the rest syntax to catch a subarray that leaves out the last element of the original array.",
      "instructions": "Use a destructuring assignment with the rest syntax to emulate the behavior of `Array.prototype.slice()`. `removeFirstTwo()` should return a sub-array of the original array `list` with the first two elements omitted.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function removeFirstTwo(list) {\n  return list;\n}\n\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sourceWithoutFirstTwo = removeFirstTwo(source);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function removeFirstTwo(list) {\n  // comment with 'slice' to check comments are removed in tests\n  const [, , ...shorterList] = list;\n  return shorterList;\n}\n\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sourceWithoutFirstTwo = removeFirstTwo(source);"
        }
      ],
      "tests": [
        {
          "text": "`removeFirstTwo([1, 2, 3, 4, 5])` should be `[3, 4, 5]`",
          "testCode": "assert.deepEqual(removeFirstTwo([1, 2, 3, 4, 5]), [3, 4, 5]);"
        },
        {
          "text": "`removeFirstTwo()` should not modify `list`",
          "testCode": "const _testArr = [1, 2, 3, 4, 5];\nremoveFirstTwo(_testArr);\nassert.deepEqual(_testArr, [1, 2, 3, 4, 5])"
        },
        {
          "text": "`Array.slice()` should not be used.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.\\s*slice\\s*\\(/));"
        },
        {
          "text": "You should use the rest syntax.",
          "testCode": "assert.match(code, /\\.\\.\\./);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301218,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-destructuring-assignment-with-the-rest-parameter-to-reassign-array-elements.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8c367417b2b2512b56",
      "title": "Use export to Share a Code Block",
      "challengeType": 1,
      "dashedName": "use-export-to-share-a-code-block",
      "description": "Imagine a file called `math_functions.js` that contains several functions related to mathematical operations. One of them is stored in a variable, `add`, that takes in two numbers and returns their sum. You want to use this function in several different JavaScript files. In order to share it with these other files, you first need to `export` it.\n\n```js\nexport const add = (x, y) => {\n  return x + y;\n}\n```\n\nThe above is a common way to export a single function, but you can achieve the same thing like this:\n\n```js\nconst add = (x, y) => {\n  return x + y;\n}\n\nexport { add };\n```\n\nWhen you export a variable or function, you can import it in another file and use it without having to rewrite the code. You can export multiple things by repeating the first example for each thing you want to export, or by placing them all in the export statement of the second example, like this:\n\n```js\nexport { add, subtract };\n```",
      "instructions": "There are two string-related functions in the editor. Export both of them using the method of your choice.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const uppercaseString = (string) => {\n  return string.toUpperCase();\n}\n\nconst lowercaseString = (string) => {\n  return string.toLowerCase()\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "export const uppercaseString = (string) => {\n  return string.toUpperCase();\n}\n\nexport const lowercaseString = (string) => {\n  return string.toLowerCase()\n}"
        }
      ],
      "tests": [
        {
          "text": "You should properly export `uppercaseString`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /(export\\s+const\\s+uppercaseString|export\\s*{\\s*(uppercaseString[^}]*|[^,]*,\\s*uppercaseString\\s*)})/g\n  )\n);"
        },
        {
          "text": "You should properly export `lowercaseString`.",
          "testCode": "assert(\n  __helpers.removeJSComments(code).match(\n    /(export\\s+const\\s+lowercaseString|export\\s*{\\s*(lowercaseString[^}]*|[^,]*,\\s*lowercaseString\\s*)})/g\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301219,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-export-to-share-a-code-block.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8c367417b2b2512b54",
      "title": "Use getters and setters to Control Access to an Object",
      "challengeType": 1,
      "dashedName": "use-getters-and-setters-to-control-access-to-an-object",
      "description": "You can obtain values from an object and set the value of a property within an object.\n\nThese are classically called <dfn>getters</dfn> and <dfn>setters</dfn>.\n\nGetter functions are meant to simply return (get) the value of an object's private variable to the user without the user directly accessing the private variable.\n\nSetter functions are meant to modify (set) the value of an object's private variable based on the value passed into the setter function. This change could involve calculations, or even overwriting the previous value completely.  \n\n```js\nclass Book {\n  constructor(author) {\n    this._author = author;\n  }\n  // getter\n  get writer() {\n    return this._author;\n  }\n  // setter\n  set writer(updatedAuthor) {\n    this._author = updatedAuthor;\n  }\n}\nconst novel = new Book('anonymous');\nconsole.log(novel.writer);\nnovel.writer = 'newAuthor';\nconsole.log(novel.writer);\n```\n\nThe console would display the strings `anonymous` and `newAuthor`.\n\nNotice the syntax used to invoke the getter and setter. They do not even look like functions. Getters and setters are important because they hide internal implementation details.\n\n**Note:** It is convention to precede the name of a private variable with an underscore (`_`). However, the practice itself does not make a variable private.",
      "instructions": "Use the `class` keyword to create a `Thermostat` class. The `constructor` accepts a Fahrenheit temperature.\n\nIn the class, create a `getter` to obtain the temperature in Celsius and a `setter` that accepts a temperature in Celsius.\n\nRemember that `C = 5/9 * (F - 32)` and `F = C * 9.0 / 5 + 32`, where `F` is the value of temperature in Fahrenheit, and `C` is the value of the same temperature in Celsius.\n\n**Note:** When you implement this, you will track the temperature inside the class in one scale, either Fahrenheit or Celsius.\n\nThis is the power of a getter and a setter. You are creating an API for another user, who can get the correct result regardless of which one you track.\n\nIn other words, you are abstracting implementation details from the user.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\n\n// Only change code above this line\n\nconst thermos = new Thermostat(76); // Setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in Celsius"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "class Thermostat {\n  constructor(fahrenheit) {\n    this._tempInCelsius = 5/9 * (fahrenheit - 32);\n  }\n  get temperature(){\n    return this._tempInCelsius;\n  }\n  set temperature(newTemp){\n    this._tempInCelsius = newTemp;\n  }\n}\n\nconst thermos = new Thermostat(76); // Setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in Celsius"
        }
      ],
      "tests": [
        {
          "text": "`Thermostat` should be a `class` with a defined `constructor` method.",
          "testCode": "assert.isFunction(Thermostat);\nassert.isFunction(Thermostat?.constructor);"
        },
        {
          "text": "The `class` keyword should be used.",
          "testCode": "assert.match(code, /class/);"
        },
        {
          "text": "`Thermostat` should be able to be instantiated.",
          "testCode": "const _t = new Thermostat(122);\nassert.isObject(_t);"
        },
        {
          "text": "When instantiated with a Fahrenheit value, `Thermostat` should set the correct `temperature`.",
          "testCode": "const _t = new Thermostat(122);\nassert.strictEqual(_t?.temperature, 50);"
        },
        {
          "text": "A `getter` should be defined.",
          "testCode": "const _desc = Object.getOwnPropertyDescriptor(Thermostat.prototype, 'temperature');\nassert.isFunction(_desc?.get);"
        },
        {
          "text": "A `setter` should be defined.",
          "testCode": "const _desc = Object.getOwnPropertyDescriptor(Thermostat.prototype, 'temperature');\nassert.isFunction(_desc?.set);"
        },
        {
          "text": "Calling the `setter` with a Celsius value should set the `temperature`.",
          "testCode": "const _t = new Thermostat(32);\n_t.temperature = 26;\nconst _u = new Thermostat(32);\n_u.temperature = 50;\nassert.approximately(_t.temperature, 26, 0.1);\nassert.approximately(_u.temperature, 50, 0.1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301220,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-getters-and-setters-to-control-access-to-an-object.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b88367417b2b2512b47",
      "title": "Use the Rest Parameter with Function Parameters",
      "challengeType": 1,
      "dashedName": "use-the-rest-parameter-with-function-parameters",
      "description": "In order to help us create more flexible functions, ES6 introduces the <dfn>rest parameter</dfn> for function parameters. With the rest parameter, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.\n\nCheck out this code:\n\n```js\nfunction howMany(...args) {\n  return \"You have passed \" + args.length + \" arguments.\";\n}\nconsole.log(howMany(0, 1, 2));\nconsole.log(howMany(\"string\", null, [1, 2, 3], { }));\n```\n\nThe console would display the strings `You have passed 3 arguments.` and `You have passed 4 arguments.`.\n\nThe rest parameter eliminates the need to use the `arguments` object and allows us to use array methods on the array of parameters passed to the function `howMany`.",
      "instructions": "Modify the function `sum` using the rest parameter in such a way that the function `sum` is able to take any number of arguments and return their sum.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const sum = (x, y, z) => {\n  const args = [x, y, z];\n  let total = 0;\n  for (let i = 0; i < args.length; i++) {\n    total += args[i];\n  }\n  return total;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const sum = (...args) => {\n  let total = 0;\n  for (let i = 0; i < args.length; i++) {\n    total += args[i];\n  }\n  return total;\n}"
        }
      ],
      "tests": [
        {
          "text": "The result of `sum(0,1,2)` should be 3",
          "testCode": "assert(sum(0, 1, 2) === 3);"
        },
        {
          "text": "The result of `sum(1,2,3,4)` should be 10",
          "testCode": "assert(sum(1, 2, 3, 4) === 10);"
        },
        {
          "text": "The result of `sum(5)` should be 5",
          "testCode": "assert(sum(5) === 5);"
        },
        {
          "text": "The result of `sum()` should be 0",
          "testCode": "assert(sum() === 0);"
        },
        {
          "text": "`sum` should be an arrow function which uses the rest parameter syntax (`...`) on the `args` parameter.",
          "testCode": "assert(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/sum=\\(\\.\\.\\.args\\)=>/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301221,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-the-rest-parameter-with-function-parameters.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b89367417b2b2512b48",
      "title": "Use the Spread Operator to Evaluate Arrays In-Place",
      "challengeType": 1,
      "dashedName": "use-the-spread-operator-to-evaluate-arrays-in-place",
      "description": "ES6 introduces the <dfn>spread operator</dfn>, which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected.\n\nThe ES5 code below uses `apply()` to compute the maximum value in an array:\n\n```js\nvar arr = [6, 89, 3, 45];\nvar maximus = Math.max.apply(null, arr);\n```\n\n`maximus` would have a value of `89`.\n\nWe had to use `Math.max.apply(null, arr)` because `Math.max(arr)` returns `NaN`. `Math.max()` expects comma-separated arguments, but not an array. The spread operator makes this syntax much better to read and maintain.\n\n```js\nconst arr = [6, 89, 3, 45];\nconst maximus = Math.max(...arr);\n```\n\n`maximus` would have a value of `89`.\n\n`...arr` returns an unpacked array. In other words, it spreads the array. However, the spread operator only works in-place, like in an argument to a function or in an array literal. For example:\n\n```js\nconst spreaded = [...arr];\n```\n\nHowever, the following code will not work:\n\n```js\nconst spreaded = ...arr;\n```",
      "instructions": "Copy all contents of `arr1` into another array `arr2` using the spread operator.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n\narr2 = [];  // Change this line\n\nconsole.log(arr2);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n\narr2 = [...arr1];"
        }
      ],
      "tests": [
        {
          "text": "`arr2` should be correct copy of `arr1`.",
          "testCode": "assert(arr2.every((v, i) => v === arr1[i]) && arr2.length);"
        },
        {
          "text": "`...` spread operator should be used to duplicate `arr1`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/Array\\(\\s*\\.\\.\\.arr1\\s*\\)|\\[\\s*\\.\\.\\.arr1\\s*\\]/));"
        },
        {
          "text": "`arr2` should remain unchanged when `arr1` is changed.",
          "testCode": "assert((arr1, arr2) => {\n  arr1.push('JUN');\n  return arr2.length < arr1.length;\n});"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301222,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\use-the-spread-operator-to-evaluate-arrays-in-place.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b88367417b2b2512b44",
      "title": "Write Arrow Functions with Parameters",
      "challengeType": 1,
      "dashedName": "write-arrow-functions-with-parameters",
      "description": "Just like a regular function, you can pass arguments into an arrow function.\n\n```js\nconst doubler = (item) => item * 2;\ndoubler(4);\n```\n\n`doubler(4)` would return the value `8`.\n\nIf an arrow function has a single parameter, the parentheses enclosing the parameter may be omitted.\n\n```js\nconst doubler = item => item * 2;\n```\n\nIt is possible to pass more than one argument into an arrow function.\n\n```js\nconst multiplier = (item, multi) => item * multi;\nmultiplier(4, 2);\n```\n\n`multiplier(4, 2)` would return the value `8`.",
      "instructions": "Rewrite the `myConcat` function which appends contents of `arr2` to `arr1` so that the function uses arrow function syntax.",
      "boilerplate": [
        {
          "language": "js",
          "code": "var myConcat = function(arr1, arr2) {\n  return arr1.concat(arr2);\n};\n\nconsole.log(myConcat([1, 2], [3, 4, 5]));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const myConcat = (arr1, arr2) =>  {\n  return arr1.concat(arr2);\n};\n\nconsole.log(myConcat([1, 2], [3, 4, 5]));"
        }
      ],
      "tests": [
        {
          "text": "You should replace the `var` keyword.",
          "testCode": "assert.notMatch(code, /var/g);"
        },
        {
          "text": "`myConcat` should be a constant variable (by using `const`).",
          "testCode": "assert.match(code, /const\\s+myConcat/g);"
        },
        {
          "text": "`myConcat` should be an arrow function with two parameters",
          "testCode": "assert(\n  /myConcat=\\(\\w+,\\w+\\)=>/.test(__helpers.removeJSComments(code).replace(/\\s/g, '')) &&\n    typeof myConcat === 'function'\n);"
        },
        {
          "text": "`myConcat()` should return `[1, 2, 3, 4, 5]`.",
          "testCode": "assert.deepEqual(myConcat([1, 2], [3, 4, 5]), [1, 2, 3, 4, 5]);"
        },
        {
          "text": "The `function` keyword should not be used.",
          "testCode": "assert.notMatch(code, /function/g);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301223,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\write-arrow-functions-with-parameters.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8b367417b2b2512b50",
      "title": "Write Concise Declarative Functions with ES6",
      "challengeType": 1,
      "dashedName": "write-concise-declarative-functions-with-es6",
      "description": "When defining functions within objects in ES5, we have to use the keyword `function` as follows:\n\n```js\nconst person = {\n  name: \"Taylor\",\n  sayHello: function() {\n    return `Hello! My name is ${this.name}.`;\n  }\n};\n```\n\nWith ES6, you can remove the `function` keyword and colon altogether when defining functions in objects. Here's an example of this syntax:\n\n```js\nconst person = {\n  name: \"Taylor\",\n  sayHello() {\n    return `Hello! My name is ${this.name}.`;\n  }\n};\n```",
      "instructions": "Refactor the function `setGear` inside the object `bicycle` to use the shorthand syntax described above.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nconst bicycle = {\n  gear: 2,\n  setGear: function(newGear) {\n    this.gear = newGear;\n  }\n};\n// Only change code above this line\nbicycle.setGear(3);\nconsole.log(bicycle.gear);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const bicycle = {\n  gear: 2,\n  // setGear: function(newGear) {\n  setGear(newGear) {\n    this.gear = newGear;\n  }\n};\nbicycle.setGear(3);"
        }
      ],
      "tests": [
        {
          "text": "Traditional function expression should not be used.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/function/));"
        },
        {
          "text": "`setGear` should be a declarative function.",
          "testCode": "assert(\n  typeof bicycle.setGear === 'function' && __helpers.removeJSComments(code).match(/setGear\\s*\\(.+\\)\\s*\\{/)\n);"
        },
        {
          "text": "`bicycle.setGear(48)` should change the `gear` value to 48.",
          "testCode": "bicycle.setGear(48);\nassert(bicycle.gear === 48);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301224,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\write-concise-declarative-functions-with-es6.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7b8a367417b2b2512b4f",
      "title": "Write Concise Object Literal Declarations Using Object Property Shorthand",
      "challengeType": 1,
      "dashedName": "write-concise-object-literal-declarations-using-object-property-shorthand",
      "description": "ES6 adds some nice support for easily defining object literals.\n\nConsider the following code:\n\n```js\nconst getMousePosition = (x, y) => ({\n  x: x,\n  y: y\n});\n```\n\n`getMousePosition` is a simple function that returns an object containing two properties. ES6 provides the syntactic sugar to eliminate the redundancy of having to write `x: x`. You can simply write `x` once, and it will be converted to`x: x` (or something equivalent) under the hood. Here is the same function from above rewritten to use this new syntax:\n\n```js\nconst getMousePosition = (x, y) => ({ x, y });\n```",
      "instructions": "Use object property shorthand with object literals to create and return an object with `name`, `age` and `gender` properties.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const createPerson = (name, age, gender) => {\n  // Only change code below this line\n  return {\n    name: name,\n    age: age,\n    gender: gender\n  };\n  // Only change code above this line\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const createPerson = (name, age, gender) => {\n  // Only change code below this line\n  /*return {\n    name: name,\n    age: age,\n    gender: gender\n  };*/\n  return {\n    name,\n    age,\n    gender\n  };\n  // Only change code above this line\n};"
        }
      ],
      "tests": [
        {
          "text": "`createPerson(\"Zodiac Hasbro\", 56, \"male\")` should return `{name: \"Zodiac Hasbro\", age: 56, gender: \"male\"}`.",
          "testCode": "assert.deepEqual(\n  { name: 'Zodiac Hasbro', age: 56, gender: 'male' },\n  createPerson('Zodiac Hasbro', 56, 'male')\n);"
        },
        {
          "text": "Your code should not use `key:value`.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/:/g))"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301225,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\es6\\write-concise-object-literal-declarations-using-object-property-shorthand.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "es6",
        "name": "Es6"
      }
    },
    {
      "id": "587d7da9367417b2b2512b67",
      "title": "Add Elements to the End of an Array Using concat Instead of push",
      "challengeType": 1,
      "dashedName": "add-elements-to-the-end-of-an-array-using-concat-instead-of-push",
      "description": "Functional programming is all about creating and using non-mutating functions.\n\nThe last challenge introduced the `concat` method as a way to merge arrays into a new array without mutating the original arrays. Compare `concat` to the `push` method. `push` adds items to the end of the same array it is called on, which mutates that array. Here's an example:\n\n```js\nconst arr = [1, 2, 3];\narr.push(4, 5, 6);\n```\n\n`arr` would have a modified value of `[1, 2, 3, 4, 5, 6]`, which is not the functional programming way.\n\n`concat` offers a way to merge new items to the end of an array without any mutating side effects.",
      "instructions": "Change the `nonMutatingPush` function so it uses `concat` to merge `newItem` to the end of `original` without mutating `original` or `newItem` arrays. The function should return an array.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nonMutatingPush(original, newItem) {\n  // Only change code below this line\n  return original.push(newItem);\n\n  // Only change code above this line\n}\n\nconst first = [1, 2, 3];\nconst second = [4, 5];\nnonMutatingPush(first, second);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function nonMutatingPush(original, newItem) {\n  return original.concat(newItem);\n}\nconst first = [1, 2, 3];\nconst second = [4, 5];"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `concat` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.concat/g));"
        },
        {
          "text": "Your code should not use the `push` method.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?push/g));"
        },
        {
          "text": "The `first` array should not change.",
          "testCode": "assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]));"
        },
        {
          "text": "The `second` array should not change.",
          "testCode": "assert(JSON.stringify(second) === JSON.stringify([4, 5]));"
        },
        {
          "text": "`nonMutatingPush([1, 2, 3], [4, 5])` should return `[1, 2, 3, 4, 5]`.",
          "testCode": "assert(\n  JSON.stringify(nonMutatingPush([1, 2, 3], [4, 5])) ===\n    JSON.stringify([1, 2, 3, 4, 5])\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301226,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\add-elements-to-the-end-of-an-array-using-concat-instead-of-push.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7dab367417b2b2512b6d",
      "title": "Apply Functional Programming to Convert Strings to URL Slugs",
      "challengeType": 1,
      "dashedName": "apply-functional-programming-to-convert-strings-to-url-slugs",
      "description": "The last several challenges covered a number of useful array and string methods that follow functional programming principles. We've also learned about `reduce`, which is a powerful method used to reduce problems to simpler forms. From computing averages to sorting, any array operation can be achieved by applying it. Recall that `map` and `filter` are special cases of `reduce`.\n\nLet's combine what we've learned to solve a practical problem.\n\nMany content management sites (CMS) have the titles of a post added to part of the URL for simple bookmarking purposes. For example, if you write a Medium post titled `Stop Using Reduce`, it's likely the URL would have some form of the title string in it (`.../stop-using-reduce`). You may have already noticed this on the freeCodeCamp site.",
      "instructions": "Fill in the `urlSlug` function so it converts a string `title` and returns the hyphenated version for the URL. You can use any of the methods covered in this section, and don't use `replace`. Here are the requirements:\n\nThe input is a string with spaces and title-cased words\n\nThe output is a string with the spaces between words replaced by a hyphen (`-`)\n\nThe output should be all lower-cased letters\n\nThe output should not have any spaces",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nfunction urlSlug(title) {\n\n\n}\n// Only change code above this line\nurlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function urlSlug(title) {\n  return title.trim().split(/\\s+/).join(\"-\").toLowerCase();\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should not use the `replace` method for this challenge.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?replace/g));"
        },
        {
          "text": "`urlSlug(\"Winter Is Coming\")` should return the string `winter-is-coming`.",
          "testCode": "assert(urlSlug('Winter Is Coming') === 'winter-is-coming');"
        },
        {
          "text": "`urlSlug(\" Winter Is  Coming\")` should return the string `winter-is-coming`.",
          "testCode": "assert(urlSlug(' Winter Is  Coming') === 'winter-is-coming');"
        },
        {
          "text": "`urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")` should return the string `a-mind-needs-books-like-a-sword-needs-a-whetstone`.",
          "testCode": "assert(\n  urlSlug('A Mind Needs Books Like A Sword Needs A Whetstone') ===\n    'a-mind-needs-books-like-a-sword-needs-a-whetstone'\n);"
        },
        {
          "text": "`urlSlug(\"Hold The Door\")` should return the string `hold-the-door`.",
          "testCode": "assert(urlSlug('Hold The Door') === 'hold-the-door');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301227,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\apply-functional-programming-to-convert-strings-to-url-slugs.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5e",
      "title": "Avoid Mutations and Side Effects Using Functional Programming",
      "challengeType": 1,
      "dashedName": "avoid-mutations-and-side-effects-using-functional-programming",
      "description": "If you haven't already figured it out, the issue in the previous challenge was with the `splice` call in the `tabClose()` function. Unfortunately, `splice` changes the original array it is called on, so the second call to it used a modified array, and gave unexpected results.\n\nThis is a small example of a much larger pattern - you call a function on a variable, array, or an object, and the function changes the variable or something in the object.\n\nOne of the core principles of functional programming is to not change things. Changes lead to bugs. It's easier to prevent bugs knowing that your functions don't change anything, including the function arguments or any global variable.\n\nThe previous example didn't have any complicated operations but the `splice` method changed the original array, and resulted in a bug.\n\nRecall that in functional programming, changing or altering things is called <dfn>mutation</dfn>, and the outcome is called a <dfn>side effect</dfn>. A function, ideally, should be a <dfn>pure function</dfn>, meaning that it does not cause any side effects.\n\nLet's try to master this discipline and not alter any variable or object in our code.",
      "instructions": "Fill in the code for the function `incrementer` so it returns the value of the global variable `fixedValue` increased by one.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// The global variable\nlet fixedValue = 4;\n\nfunction incrementer() {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let fixedValue = 4\n\nfunction incrementer() {\n  return fixedValue + 1\n}"
        }
      ],
      "tests": [
        {
          "text": "Your function `incrementer` should not change the value of `fixedValue` (which is `4`).",
          "testCode": "incrementer();\nassert(fixedValue === 4);"
        },
        {
          "text": "Your `incrementer` function should return a value that is one larger than the `fixedValue` value.",
          "testCode": "const __newValue = incrementer();\nassert(__newValue === 5);"
        },
        {
          "text": "Your `incrementer` function should return a value based on the global `fixedValue` variable value.",
          "testCode": "(function () {\n  fixedValue = 10;\n  const newValue = incrementer();\n  assert(fixedValue === 10 && newValue === 11);\n  fixedValue = 4;\n})();"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301228,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\avoid-mutations-and-side-effects-using-functional-programming.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7daa367417b2b2512b6c",
      "title": "Combine an Array into a String Using the join Method",
      "challengeType": 1,
      "dashedName": "combine-an-array-into-a-string-using-the-join-method",
      "description": "The `join` method is used to join the elements of an array together to create a string. It takes an argument for the delimiter that is used to separate the array elements in the string.\n\nHere's an example:\n\n```js\nconst arr = [\"Hello\", \"World\"];\nconst str = arr.join(\" \");\n```\n\n`str` would have a value of the string `Hello World`.",
      "instructions": "Use the `join` method (among others) inside the `sentensify` function to make a sentence from the words in the string `str`. The function should return a string. For example, `I-like-Star-Wars` would be converted to `I like Star Wars`. For this challenge, do not use the `replace` method.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sentensify(str) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nsentensify(\"May-the-force-be-with-you\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function sentensify(str) {\n  return str.split(/\\W/).join(' ');\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `join` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.join/g));"
        },
        {
          "text": "Your code should not use the `replace` method.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?replace/g));"
        },
        {
          "text": "`sentensify(\"May-the-force-be-with-you\")` should return a string.",
          "testCode": "assert(typeof sentensify('May-the-force-be-with-you') === 'string');"
        },
        {
          "text": "`sentensify(\"May-the-force-be-with-you\")` should return the string `May the force be with you`.",
          "testCode": "assert(sentensify('May-the-force-be-with-you') === 'May the force be with you');"
        },
        {
          "text": "`sentensify(\"The.force.is.strong.with.this.one\")` should return the string `The force is strong with this one`.",
          "testCode": "assert(\n  sentensify('The.force.is.strong.with.this.one') ===\n    'The force is strong with this one'\n);"
        },
        {
          "text": "`sentensify(\"There,has,been,an,awakening\")` should return the string `There has been an awakening`.",
          "testCode": "assert(\n  sentensify('There,has,been,an,awakening') === 'There has been an awakening'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18221,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\combine-an-array-into-a-string-using-the-join-method.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7da9367417b2b2512b66",
      "title": "Combine Two Arrays Using the concat Method",
      "challengeType": 1,
      "dashedName": "combine-two-arrays-using-the-concat-method",
      "description": "<dfn>Concatenation</dfn> means to join items end to end. JavaScript offers the `concat` method for both strings and arrays that work in the same way. For arrays, the method is called on one, then another array is provided as the argument to `concat`, which is added to the end of the first array. It returns a new array and does not mutate either of the original arrays. Here's an example:\n\n```js\n[1, 2, 3].concat([4, 5, 6]);\n```\n\nThe returned array would be `[1, 2, 3, 4, 5, 6]`.",
      "instructions": "Use the `concat` method in the `nonMutatingConcat` function to concatenate `attach` to the end of `original`. The function should return the concatenated array.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nonMutatingConcat(original, attach) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nconst first = [1, 2, 3];\nconst second = [4, 5];\nnonMutatingConcat(first, second);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function nonMutatingConcat(original, attach) {\n  return original.concat(attach);\n}\nconst first = [1, 2, 3];\nconst second = [4, 5];"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `concat` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.concat/g));"
        },
        {
          "text": "The `first` array should not change.",
          "testCode": "assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]));"
        },
        {
          "text": "The `second` array should not change.",
          "testCode": "assert(JSON.stringify(second) === JSON.stringify([4, 5]));"
        },
        {
          "text": "`nonMutatingConcat([1, 2, 3], [4, 5])` should return `[1, 2, 3, 4, 5]`.",
          "testCode": "assert(\n  JSON.stringify(nonMutatingConcat([1, 2, 3], [4, 5])) ===\n    JSON.stringify([1, 2, 3, 4, 5])\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301229,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\combine-two-arrays-using-the-concat-method.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8f367417b2b2512b62",
      "title": "Implement map on a Prototype",
      "challengeType": 1,
      "dashedName": "implement-map-on-a-prototype",
      "description": "As you have seen from applying `Array.prototype.map()`, or simply `map()` earlier, the `map` method returns an array of the same length as the one it was called on. It also doesn't alter the original array, as long as its callback function doesn't.\n\nIn other words, `map` is a pure function, and its output depends solely on its inputs. Plus, it takes another function as its argument.\n\nYou might learn a lot about the `map` method if you implement your own version of it. It is recommended you use a `for` loop or `Array.prototype.forEach()`.",
      "instructions": "Write your own `Array.prototype.myMap()`, which should behave exactly like `Array.prototype.map()`. You should not use the built-in `map` method. The `Array` instance can be accessed in the `myMap` method using `this`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "Array.prototype.myMap = function(callback) {\n  const newArray = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArray;\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "Array.prototype.myMap = function(callback) {\n  const newArray = [];\n  for (let i = 0; i < this.length; i++) {\n    newArray.push(callback(this[i], i, this));\n  }\n  return newArray;\n};\n\n// Test case\nconst s = [23, 65, 98, 5];\nconst doubled_s = s.myMap(item => item * 2);"
        }
      ],
      "tests": [
        {
          "text": "`[23, 65, 98, 5, 13].myMap(item => item * 2)` should equal `[46, 130, 196, 10, 26]`.",
          "testCode": "const _test_s = [23, 65, 98, 5, 13];\nconst _callback = item => item * 2;\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"
        },
        {
          "text": "`[\"naomi\", \"quincy\", \"camperbot\"].myMap(element => element.toUpperCase())` should return `[\"NAOMI\", \"QUINCY\", \"CAMPERBOT\"]`.",
          "testCode": "const _test_s = [\"naomi\", \"quincy\", \"camperbot\"];\nconst _callback = element => element.toUpperCase();\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"
        },
        {
          "text": "`[1, 1, 2, 5, 2].myMap((element, index, array) => array[index + 1] || array[0])` should return `[1, 2, 5, 2, 1]`.",
          "testCode": "const _test_s = [1, 1, 2, 5, 2];\nconst _callback = (element, index, array) => array[index + 1] || array[0];\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"
        },
        {
          "text": "Your code should not use the `map` method.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?map/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301230,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\implement-map-on-a-prototype.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8f367417b2b2512b64",
      "title": "Implement the filter Method on a Prototype",
      "challengeType": 1,
      "dashedName": "implement-the-filter-method-on-a-prototype",
      "description": "You might learn a lot about the `filter` method if you implement your own version of it. It is recommended you use a `for` loop or `Array.prototype.forEach()`.",
      "instructions": "Write your own `Array.prototype.myFilter()`, which should behave exactly like `Array.prototype.filter()`. You should not use the built-in `filter` method. The `Array` instance can be accessed in the `myFilter` method using `this`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "Array.prototype.myFilter = function(callback) {\n  const newArray = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArray;\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "Array.prototype.myFilter = function(callback) {\n  const newArray = [];\n  for (let i = 0; i < this.length; i++) {\n    if (callback(this[i], i, this)) newArray.push(this[i]);\n  }\n  return newArray;\n};\n\n// Test case\nconst s = [23, 65, 98, 5];\nconst odd_s = s.myFilter(item => item % 2 === 1);"
        }
      ],
      "tests": [
        {
          "text": "`[23, 65, 98, 5, 13].myFilter(item => item % 2)` should equal `[23, 65, 5, 13]`.",
          "testCode": "const _test_s = [23, 65, 98, 5, 13];\nconst _callback = item => item % 2;\nassert(JSON.stringify(_test_s.filter(_callback)) === JSON.stringify(_test_s.myFilter(_callback)));"
        },
        {
          "text": "`[\"naomi\", \"quincy\", \"camperbot\"].myFilter(element => element === \"naomi\")` should return `[\"naomi\"]`.",
          "testCode": "const _test_s = [\"naomi\", \"quincy\", \"camperbot\"];\nconst _callback = element => element === \"naomi\";\nassert(JSON.stringify(_test_s.filter(_callback)) === JSON.stringify(_test_s.myFilter(_callback)));"
        },
        {
          "text": "`[1, 1, 2, 5, 2].myFilter((element, index, array) => array.indexOf(element) === index)` should return `[1, 2, 5]`.",
          "testCode": "const _test_s = [1, 1, 2, 5, 2];\nconst _callback = (element, index, array) => array.indexOf(element) === index;\nassert(JSON.stringify(_test_s.filter(_callback)) === JSON.stringify(_test_s.myFilter(_callback)));"
        },
        {
          "text": "Your code should not use the `filter` method.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?filter/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301231,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\implement-the-filter-method-on-a-prototype.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7dab367417b2b2512b70",
      "title": "Introduction to Currying and Partial Application",
      "challengeType": 1,
      "dashedName": "introduction-to-currying-and-partial-application",
      "description": "The <dfn>arity</dfn> of a function is the number of arguments it requires. <dfn>Currying</dfn> a function means to convert a function of N arity into N functions of arity 1.\n\nIn other words, it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on.\n\nHere's an example:\n\n```js\nfunction unCurried(x, y) {\n  return x + y;\n}\n\nfunction curried(x) {\n  return function(y) {\n    return x + y;\n  }\n}\n\nconst curried = x => y => x + y\n\ncurried(1)(2)\n```\n\n`curried(1)(2)` would return `3`.\n\nThis is useful in your program if you can't supply all the arguments to a function at one time. You can save each function call into a variable, which will hold the returned function reference that takes the next argument when it's available. Here's an example using the curried function in the example above:\n\n```js\nconst funcForY = curried(1);\nconsole.log(funcForY(2)); // 3\n```\n\nSimilarly, <dfn>partial application</dfn> can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments. Here's an example:\n\n```js\nfunction impartial(x, y, z) {\n  return x + y + z;\n}\n\nconst partialFn = impartial.bind(this, 1, 2);\npartialFn(10); // 13\n```",
      "instructions": "Fill in the body of the `add` function so it uses currying to add parameters `x`, `y`, and `z`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function add(x) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nadd(10)(20)(30);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const add = x => y => z => x + y + z"
        }
      ],
      "tests": [
        {
          "text": "`add(10)(20)(30)` should return `60`.",
          "testCode": "assert(add(10)(20)(30) === 60);"
        },
        {
          "text": "`add(1)(2)(3)` should return `6`.",
          "testCode": "assert(add(1)(2)(3) === 6);"
        },
        {
          "text": "`add(11)(22)(33)` should return `66`.",
          "testCode": "assert(add(11)(22)(33) === 66);"
        },
        {
          "text": "Your code should include a final statement that returns `x + y + z`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/[xyz]\\s*?\\+\\s*?[xyz]\\s*?\\+\\s*?[xyz]/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301232,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\introduction-to-currying-and-partial-application.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8d367417b2b2512b5b",
      "title": "Learn About Functional Programming",
      "challengeType": 1,
      "dashedName": "learn-about-functional-programming",
      "description": "Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope: `INPUT -> PROCESS -> OUTPUT`\n\nFunctional programming is about:\n\n1) Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change\n\n2) Pure functions - the same input always gives the same output\n\n3) Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled",
      "instructions": "The members of freeCodeCamp happen to love tea.\n\nIn the code editor, the `prepareTea` and `getTea` functions are already defined for you. Call the `getTea` function to get 40 cups of tea for the team, and store them in the `tea4TeamFCC` variable.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Function that returns a string representing a cup of green tea\nconst prepareTea = () => 'greenTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4TeamFCC = null;\n// Only change code above this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const prepareTea = () => 'greenTea';\n\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n  \n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\nconst tea4TeamFCC = getTea(40);"
        }
      ],
      "tests": [
        {
          "text": "The `tea4TeamFCC` variable should hold 40 cups of tea for the team.",
          "testCode": "assert(tea4TeamFCC.length === 40);"
        },
        {
          "text": "The `tea4TeamFCC` variable should hold cups of green tea.",
          "testCode": "assert(tea4TeamFCC[0] === 'greenTea');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301233,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\learn-about-functional-programming.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5f",
      "title": "Pass Arguments to Avoid External Dependence in a Function",
      "challengeType": 1,
      "dashedName": "pass-arguments-to-avoid-external-dependence-in-a-function",
      "description": "The last challenge was a step closer to functional programming principles, but there is still something missing.\n\nWe didn't alter the global variable value, but the function `incrementer` would not work without the global variable `fixedValue` being there.\n\nAnother principle of functional programming is to always declare your dependencies explicitly. This means if a function depends on a variable or object being present, then pass that variable or object directly into the function as an argument.\n\nThere are several good consequences from this principle. The function is easier to test, you know exactly what input it takes, and it won't depend on anything else in your program.\n\nThis can give you more confidence when you alter, remove, or add new code. You would know what you can or cannot change and you can see where the potential traps are.\n\nFinally, the function would always produce the same output for the same set of inputs, no matter what part of the code executes it.",
      "instructions": "Let's update the `incrementer` function to clearly declare its dependencies.\n\nWrite the `incrementer` function so it takes an argument, and then returns a result after increasing the value by one.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// The global variable\nlet fixedValue = 4;\n\n// Only change code below this line\nfunction incrementer() {\n\n\n  // Only change code above this line\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let fixedValue = 4;\n\nfunction incrementer(fixedValue) {\n  return fixedValue + 1;\n}"
        }
      ],
      "tests": [
        {
          "text": "Your function `incrementer` should not change the value of `fixedValue` (which is `4`).",
          "testCode": "assert(fixedValue === 4);"
        },
        {
          "text": "Your `incrementer` function should take an argument.",
          "testCode": "assert(incrementer.length === 1);"
        },
        {
          "text": "Your `incrementer` function should return a value that is one larger than the `fixedValue` value.",
          "testCode": "const __newValue = incrementer(fixedValue);\nassert(__newValue === 5);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301234,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\pass-arguments-to-avoid-external-dependence-in-a-function.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8f367417b2b2512b60",
      "title": "Refactor Global Variables Out of Functions",
      "challengeType": 1,
      "dashedName": "refactor-global-variables-out-of-functions",
      "description": "So far, we have seen two distinct principles for functional programming:\n\n1) Don't alter a variable or object - create new variables and objects and return them if need be from a function. Hint: using something like `const newArr = arrVar`, where `arrVar` is an array will simply create a reference to the existing variable and not a copy. So changing a value in `newArr` would change the value in `arrVar`.\n\n2) Declare function parameters - any computation inside a function depends only on the arguments passed to the function, and not on any global object or variable.\n\nAdding one to a number is not very exciting, but we can apply these principles when working with arrays or more complex objects.",
      "instructions": "Rewrite the code so the global array `bookList` is not changed inside either function. The `add` function should add the given `bookName` to the end of the array passed to it and return a new array (list). The `remove` function should remove the given `bookName` from the array passed to it.\n\n**Note:** Both functions should return an array, and any new parameters should be added before the `bookName` parameter.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// The global variable\nconst bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];\n\n// Change code below this line\nfunction add(bookName) {\n\n  bookList.push(bookName);\n  return bookList;\n  \n  // Change code above this line\n}\n\n// Change code below this line\nfunction remove(bookName) {\n  const book_index = bookList.indexOf(bookName);\n  if (book_index >= 0) {\n\n    bookList.splice(book_index, 1);\n    return bookList;\n\n    // Change code above this line\n    }\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// The global variable\nconst bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];\n\nfunction add(bookList, bookName) {\n  return [...bookList, bookName];\n}\n\nfunction remove(bookList, bookName) {\n  const bookListCopy = [...bookList];\n  const bookNameIndex = bookList.indexOf(bookName);\n  if (bookNameIndex >= 0) {\n    bookListCopy.splice(bookNameIndex, 1);\n  }\n  return bookListCopy;\n}"
        }
      ],
      "tests": [
        {
          "text": "`bookList` should not change and still equal `[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]`.",
          "testCode": "add(bookList, \"Test\");\nremove(bookList, \"The Hound of the Baskervilles\");\nassert(\n  JSON.stringify(bookList) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'On The Electrodynamics of Moving Bodies',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae'\n    ])\n);"
        },
        {
          "text": "`add(bookList, \"A Brief History of Time\")` should return `[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]`.",
          "testCode": "assert(\n  JSON.stringify(add(bookList, \"A Brief History of Time\")) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'On The Electrodynamics of Moving Bodies',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae',\n      'A Brief History of Time'\n    ])\n);"
        },
        {
          "text": "`remove(bookList, \"On The Electrodynamics of Moving Bodies\")` should return `[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]`.",
          "testCode": "assert(\n  JSON.stringify(remove(bookList, 'On The Electrodynamics of Moving Bodies')) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae'\n    ])\n);"
        },
        {
          "text": "`remove(add(bookList, \"A Brief History of Time\"), \"On The Electrodynamics of Moving Bodies\");` should equal `[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]`.",
          "testCode": "assert(\n  JSON.stringify(remove(add(bookList, 'A Brief History of Time'), 'On The Electrodynamics of Moving Bodies')) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae',\n      'A Brief History of Time'\n    ])\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301235,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\refactor-global-variables-out-of-functions.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "9d7123c8c441eeafaeb5bdef",
      "title": "Remove Elements from an Array Using slice Instead of splice",
      "challengeType": 1,
      "dashedName": "remove-elements-from-an-array-using-slice-instead-of-splice",
      "description": "A common pattern while working with arrays is when you want to remove items and keep the rest of the array. JavaScript offers the `splice` method for this, which takes arguments for the index of where to start removing items, then the number of items to remove. If the second argument is not provided, the default is to remove items through the end. However, the `splice` method mutates the original array it is called on. Here's an example:\n\n```js\nconst cities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];\ncities.splice(3, 1);\n```\n\nHere `splice` returns the string `London` and deletes it from the cities array. `cities` will have the value `[\"Chicago\", \"Delhi\", \"Islamabad\", \"Berlin\"]`.\n\nAs we saw in the last challenge, the `slice` method does not mutate the original array, but returns a new one which can be saved into a variable. Recall that the `slice` method takes two arguments for the indices to begin and end the slice (the end is non-inclusive), and returns those items in a new array. Using the `slice` method instead of `splice` helps to avoid any array-mutating side effects.",
      "instructions": "Rewrite the function `nonMutatingSplice` by using `slice` instead of `splice`. It should limit the provided `cities` array to a length of 3, and return a new array with only the first three items.\n\nDo not mutate the original array provided to the function.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nonMutatingSplice(cities) {\n\n  return cities.splice(3);\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function nonMutatingSplice(cities) {\n  return cities.slice(0,3);\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `slice` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.slice/g));"
        },
        {
          "text": "Your code should not use the `splice` method.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?splice/g));"
        },
        {
          "text": "You should not mutate the original array passed to the function.",
          "testCode": "assert.deepEqual(_inputCities, [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"]);"
        },
        {
          "text": "`nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])` should return `[\"Chicago\", \"Delhi\", \"Islamabad\"]`.",
          "testCode": "assert.deepEqual(nonMutatingSplice(_inputCities), [\"Chicago\", \"Delhi\", \"Islamabad\"]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301236,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\remove-elements-from-an-array-using-slice-instead-of-splice.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7da9367417b2b2512b6a",
      "title": "Return a Sorted Array Without Changing the Original Array",
      "challengeType": 1,
      "dashedName": "return-a-sorted-array-without-changing-the-original-array",
      "description": "A side effect of the `sort` method is that it changes the order of the elements in the original array. In other words, it mutates the array in place. One way to avoid this is to first concatenate an empty array to the one being sorted (remember that `slice` and `concat` return a new array), then run the `sort` method.",
      "instructions": "Use the `sort` method in the `nonMutatingSort` function to sort the elements of an array in ascending order. The function should return a new array, and not mutate the `globalArray` variable.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const globalArray = [5, 6, 3, 2, 9];\n\nfunction nonMutatingSort(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nnonMutatingSort(globalArray);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const globalArray = [5, 6, 3, 2, 9];\nfunction nonMutatingSort(arr) {\n  return [].concat(arr).sort((a,b) => a-b);\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `sort` method.",
          "testCode": "assert(nonMutatingSort.toString().match(/\\.sort/g));"
        },
        {
          "text": "The `globalArray` variable should not change.",
          "testCode": "assert(JSON.stringify(globalArray) === JSON.stringify([5, 6, 3, 2, 9]));"
        },
        {
          "text": "`nonMutatingSort(globalArray)` should return `[2, 3, 5, 6, 9]`.",
          "testCode": "assert(\n  JSON.stringify(nonMutatingSort(globalArray)) ===\n    JSON.stringify([2, 3, 5, 6, 9])\n);"
        },
        {
          "text": "`nonMutatingSort(globalArray)` should not be hard coded.",
          "testCode": "assert(!nonMutatingSort.toString().match(/\\[.*?[23569].*?\\]/gs));"
        },
        {
          "text": "The function should return a new array, not the array passed to it.",
          "testCode": "assert(nonMutatingSort(globalArray) !== globalArray);"
        },
        {
          "text": "`nonMutatingSort([1, 30, 4, 21, 100000])` should return `[1, 4, 21, 30, 100000]`.",
          "testCode": "assert(JSON.stringify(nonMutatingSort([1, 30, 4, 21, 100000])) ===\n    JSON.stringify([1, 4, 21, 30, 100000]))"
        },
        {
          "text": "`nonMutatingSort([140000, 104, 99])` should return `[99, 104, 140000]`.",
          "testCode": "assert(JSON.stringify(nonMutatingSort([140000, 104, 99])) ===\n    JSON.stringify([99, 104, 140000]))"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301237,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\return-a-sorted-array-without-changing-the-original-array.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b90367417b2b2512b65",
      "title": "Return Part of an Array Using the slice Method",
      "challengeType": 1,
      "dashedName": "return-part-of-an-array-using-the-slice-method",
      "description": "The `slice` method returns a copy of certain elements of an array. It can take two arguments, the first gives the index of where to begin the slice, the second is the index for where to end the slice (and it's non-inclusive). If the arguments are not provided, the default is to start at the beginning of the array through the end, which is an easy way to make a copy of the entire array. The `slice` method does not mutate the original array, but returns a new one.\n\nHere's an example:\n\n```js\nconst arr = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\"];\nconst newArray = arr.slice(1, 3);\n```\n\n`newArray` would have the value `[\"Dog\", \"Tiger\"]`.",
      "instructions": "Use the `slice` method in the `sliceArray` function to return part of the `anim` array given the provided `beginSlice` and `endSlice` indices. The function should return an array.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sliceArray(anim, beginSlice, endSlice) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nconst inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];\nsliceArray(inputAnim, 1, 3);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function sliceArray(anim, beginSlice, endSlice) {\n  return anim.slice(beginSlice, endSlice);\n}\nconst inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `slice` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.slice/g));"
        },
        {
          "text": "The `inputAnim` variable should not change.",
          "testCode": "assert(\n  JSON.stringify(inputAnim) ===\n    JSON.stringify(['Cat', 'Dog', 'Tiger', 'Zebra', 'Ant'])\n);"
        },
        {
          "text": "`sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)` should return `[\"Dog\", \"Tiger\"]`.",
          "testCode": "assert(\n  JSON.stringify(sliceArray(['Cat', 'Dog', 'Tiger', 'Zebra', 'Ant'], 1, 3)) ===\n    JSON.stringify(['Dog', 'Tiger'])\n);"
        },
        {
          "text": "`sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)` should return `[\"Cat\"]`.",
          "testCode": "assert(\n  JSON.stringify(sliceArray(['Cat', 'Dog', 'Tiger', 'Zebra', 'Ant'], 0, 1)) ===\n    JSON.stringify(['Cat'])\n);"
        },
        {
          "text": "`sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)` should return `[\"Dog\", \"Tiger\", \"Zebra\"]`.",
          "testCode": "assert(\n  JSON.stringify(sliceArray(['Cat', 'Dog', 'Tiger', 'Zebra', 'Ant'], 1, 4)) ===\n    JSON.stringify(['Dog', 'Tiger', 'Zebra'])\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301239,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\return-part-of-an-array-using-the-slice-method.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7da9367417b2b2512b69",
      "title": "Sort an Array Alphabetically using the sort Method",
      "challengeType": 1,
      "dashedName": "sort-an-array-alphabetically-using-the-sort-method",
      "description": "The `sort` method sorts the elements of an array according to the callback function.\n\nFor example:\n\n```js\nfunction ascendingOrder(arr) {\n  return arr.sort(function(a, b) {\n    return a - b;\n  });\n}\n\nascendingOrder([1, 5, 2, 3, 4]);\n```\n\nThis would return the value `[1, 2, 3, 4, 5]`.\n\n```js\nfunction reverseAlpha(arr) {\n  return arr.sort(function(a, b) {\n    return a === b ? 0 : a < b ? 1 : -1;\n  });\n}\n\nreverseAlpha(['l', 'h', 'z', 'b', 's']);\n```\n\nThis would return the value `['z', 's', 'l', 'h', 'b']`.\n\nJavaScript's default sorting method is by string Unicode point value, which may return unexpected results. Therefore, it is encouraged to provide a callback function to specify how to sort the array items. When such a callback function, normally called `compareFunction`, is supplied, the array elements are sorted according to the return value of the `compareFunction`: If `compareFunction(a,b)` returns a value less than 0 for two elements `a` and `b`, then `a` will come before `b`. If `compareFunction(a,b)` returns a value greater than 0 for two elements `a` and `b`, then `b` will come before `a`. If `compareFunction(a,b)` returns a value equal to 0 for two elements `a` and `b`, then `a` and `b` will remain unchanged.",
      "instructions": "Use the `sort` method in the `alphabeticalOrder` function to sort the elements of `arr` in alphabetical order. The function should return the sorted array.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function alphabeticalOrder(arr) {\n  // Only change code below this line\n\n  return arr\n  // Only change code above this line\n}\n\nalphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function alphabeticalOrder(arr) {\n  return arr.sort();\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `sort` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.sort/g));"
        },
        {
          "text": "`alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])` should return `[\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]`.",
          "testCode": "assert(\n  JSON.stringify(alphabeticalOrder(['a', 'd', 'c', 'a', 'z', 'g'])) ===\n    JSON.stringify(['a', 'a', 'c', 'd', 'g', 'z'])\n);"
        },
        {
          "text": "`alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])` should return `[\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]`.",
          "testCode": "assert(\n  JSON.stringify(alphabeticalOrder(['x', 'h', 'a', 'm', 'n', 'm'])) ===\n    JSON.stringify(['a', 'h', 'm', 'm', 'n', 'x'])\n);"
        },
        {
          "text": "`alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])` should return `[\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]`.",
          "testCode": "assert(\n  JSON.stringify(alphabeticalOrder(['a', 'a', 'a', 'a', 'x', 't'])) ===\n    JSON.stringify(['a', 'a', 'a', 'a', 't', 'x'])\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18303,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\sort-an-array-alphabetically-using-the-sort-method.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7daa367417b2b2512b6b",
      "title": "Split a String into an Array Using the split Method",
      "challengeType": 1,
      "dashedName": "split-a-string-into-an-array-using-the-split-method",
      "description": "The `split` method splits a string into an array of strings. It takes an argument for the delimiter, which can be a character to use to break up the string or a regular expression. For example, if the delimiter is a space, you get an array of words, and if the delimiter is an empty string, you get an array of each character in the string.\n\nHere are two examples that split one string by spaces, then another by digits using a regular expression:\n\n```js\nconst str = \"Hello World\";\nconst bySpace = str.split(\" \");\n\nconst otherString = \"How9are7you2today\";\nconst byDigits = otherString.split(/\\d/);\n```\n\n`bySpace` would have the value `[\"Hello\", \"World\"]` and `byDigits` would have the value `[\"How\", \"are\", \"you\", \"today\"]`.\n\nSince strings are immutable, the `split` method makes it easier to work with them.",
      "instructions": "Use the `split` method inside the `splitify` function to split `str` into an array of words. The function should return the array. Note that the words are not always separated by spaces, and the array should not contain punctuation.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function splitify(str) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nsplitify(\"Hello World,I-am code\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function splitify(str) {\n  return str.split(/\\W/);\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `split` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.split/g));"
        },
        {
          "text": "`splitify(\"Hello World,I-am code\")` should return `[\"Hello\", \"World\", \"I\", \"am\", \"code\"]`.",
          "testCode": "assert(\n  JSON.stringify(splitify('Hello World,I-am code')) ===\n    JSON.stringify(['Hello', 'World', 'I', 'am', 'code'])\n);"
        },
        {
          "text": "`splitify(\"Earth-is-our home\")` should return `[\"Earth\", \"is\", \"our\", \"home\"]`.",
          "testCode": "assert(\n  JSON.stringify(splitify('Earth-is-our home')) ===\n    JSON.stringify(['Earth', 'is', 'our', 'home'])\n);"
        },
        {
          "text": "`splitify(\"This.is.a-sentence\")` should return `[\"This\", \"is\", \"a\", \"sentence\"]`.",
          "testCode": "assert(\n  JSON.stringify(splitify('This.is.a-sentence')) ===\n    JSON.stringify(['This', 'is', 'a', 'sentence'])\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18305,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\split-a-string-into-an-array-using-the-split-method.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5c",
      "title": "Understand Functional Programming Terminology",
      "challengeType": 1,
      "dashedName": "understand-functional-programming-terminology",
      "description": "The FCC Team had a mood swing and now wants two types of tea: green tea and black tea. General Fact: Client mood swings are pretty common.\n\nWith that information, we'll need to revisit the `getTea` function from last challenge to handle various tea requests. We can modify `getTea` to accept a function as a parameter to be able to change the type of tea it prepares. This makes `getTea` more flexible, and gives the programmer more control when client requests change.\n\nBut first, let's cover some functional terminology:\n\n<dfn>Callbacks</dfn> are the functions that are slipped or passed into another function to decide the invocation of that function. You may have seen them passed to other methods, for example in `filter`, the callback function tells JavaScript the criteria for how to filter an array.\n\nFunctions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called <dfn>first class</dfn> functions. In JavaScript, all functions are first class functions.\n\nThe functions that take a function as an argument, or return a function as a return value, are called <dfn>higher order</dfn> functions.\n\nWhen functions are passed in to or returned from another function, then those functions which were passed in or returned can be called a <dfn>lambda</dfn>.",
      "instructions": "Prepare 27 cups of green tea and 13 cups of black tea and store them in `tea4GreenTeamFCC` and `tea4BlackTeamFCC` variables, respectively. Note that the `getTea` function has been modified so it now takes a function as the first argument.\n\nNote: The data (the number of cups of tea) is supplied as the last argument. We'll discuss this more in later lessons.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Function that returns a string representing a cup of green tea\nconst prepareGreenTea = () => 'greenTea';\n\n// Function that returns a string representing a cup of black tea\nconst prepareBlackTea = () => 'blackTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4GreenTeamFCC = null;\nconst tea4BlackTeamFCC = null;\n// Only change code above this line\n\nconsole.log(\n  tea4GreenTeamFCC,\n  tea4BlackTeamFCC\n);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const prepareGreenTea = () => 'greenTea';\nconst prepareBlackTea = () => 'blackTea';\n\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\nconst tea4BlackTeamFCC = getTea(prepareBlackTea, 13);\nconst tea4GreenTeamFCC = getTea(prepareGreenTea, 27);"
        }
      ],
      "tests": [
        {
          "text": "The `tea4GreenTeamFCC` variable should hold 27 cups of green tea for the team.",
          "testCode": "assert(tea4GreenTeamFCC.length === 27);"
        },
        {
          "text": "The `tea4GreenTeamFCC` variable should hold cups of green tea.",
          "testCode": "assert(tea4GreenTeamFCC[0] === 'greenTea');"
        },
        {
          "text": "The `tea4BlackTeamFCC` variable should hold 13 cups of black tea.",
          "testCode": "assert(tea4BlackTeamFCC.length === 13);"
        },
        {
          "text": "The `tea4BlackTeamFCC` variable should hold cups of black tea.",
          "testCode": "assert(tea4BlackTeamFCC[0] === 'blackTea');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301240,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\understand-functional-programming-terminology.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5d",
      "title": "Understand the Hazards of Using Imperative Code",
      "challengeType": 1,
      "dashedName": "understand-the-hazards-of-using-imperative-code",
      "description": "Functional programming is a good habit. It keeps your code easy to manage, and saves you from sneaky bugs. But before we get there, let's look at an imperative approach to programming to highlight where you may have issues.\n\nIn English (and many other languages), the imperative tense is used to give commands. Similarly, an imperative style in programming is one that gives the computer a set of statements to perform a task.\n\nOften the statements change the state of the program, like updating global variables. A classic example is writing a `for` loop that gives exact directions to iterate over the indices of an array.\n\nIn contrast, functional programming is a form of declarative programming. You tell the computer what you want done by calling a method or function.\n\nJavaScript offers many predefined methods that handle common tasks so you don't need to write out how the computer should perform them. For example, instead of using the `for` loop mentioned above, you could call the `map` method which handles the details of iterating over an array. This helps to avoid semantic errors, like the \"Off By One Errors\" that were covered in the Debugging section.\n\nConsider the scenario: you are browsing the web in your browser, and want to track the tabs you have opened. Let's try to model this using some simple object-oriented code.\n\nA Window object is made up of tabs, and you usually have more than one Window open. The titles of each open site in each Window object is held in an array. After working in the browser (opening new tabs, merging windows, and closing tabs), you want to print the tabs that are still open. Closed tabs are removed from the array and new tabs (for simplicity) get added to the end of it.\n\nThe code editor shows an implementation of this functionality with functions for `tabOpen()`, `tabClose()`, and `join()`. The array `tabs` is part of the Window object that stores the name of the open pages.",
      "instructions": "Examine the code in the editor. It's using a method that has side effects in the program, causing incorrect behavior. The final list of open tabs, stored in `finalTabs.tabs`, should be `['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab']` but the list produced by the code is slightly different.\n\nChange `Window.prototype.tabClose` so that it removes the correct tab.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// tabs is an array of titles of each site open within the window\nconst Window = function(tabs) {\n  this.tabs = tabs; // We keep a record of the array inside the object\n};\n\n// When you join two windows into one window\nWindow.prototype.join = function(otherWindow) {\n  this.tabs = this.tabs.concat(otherWindow.tabs);\n  return this;\n};\n\n// When you open a new tab at the end\nWindow.prototype.tabOpen = function(tab) {\n  this.tabs.push('new tab'); // Let's open a new tab for now\n  return this;\n};\n\n// When you close a tab\nWindow.prototype.tabClose = function(index) {\n\n  // Only change code below this line\n\n  const tabsBeforeIndex = this.tabs.splice(0, index); // Get the tabs before the tab\n  const tabsAfterIndex = this.tabs.splice(index + 1); // Get the tabs after the tab\n\n  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // Join them together\n\n  // Only change code above this line\n\n  return this;\n };\n\n// Let's create three browser windows\nconst workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // Your mailbox, drive, and other work sites\nconst socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // Social sites\nconst videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); // Entertainment sites\n\n// Now perform the tab opening, closing, and other operations\nconst finalTabs = socialWindow\n  .tabOpen() // Open a new tab for cat memes\n  .join(videoWindow.tabClose(2)) // Close third tab in video window, and join\n  .join(workWindow.tabClose(1).tabOpen());\nconsole.log(finalTabs.tabs);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const Window = function(tabs) {\n  this.tabs = tabs;\n};\n\nWindow.prototype.join = function(otherWindow) {\n  this.tabs = this.tabs.concat(otherWindow.tabs);\n  return this;\n};\n\nWindow.prototype.tabOpen = function(tab) {\n  this.tabs.push('new tab');\n  return this;\n};\n\nWindow.prototype.tabClose = function(index) {\n  const tabsBeforeIndex = this.tabs.slice(0, index);\n  const tabsAfterIndex = this.tabs.slice(index + 1);\n\n  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex);\n  return this;\n };\n\nconst workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']);\nconst socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']);\nconst videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']);\n\nconst finalTabs = socialWindow\n  .tabOpen()\n  .join(videoWindow.tabClose(2))\n  .join(workWindow.tabClose(1).tabOpen());"
        }
      ],
      "tests": [
        {
          "text": "`finalTabs.tabs` should be `['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab']`",
          "testCode": "assert.deepEqual(finalTabs.tabs, [\n  'FB',\n  'Gitter',\n  'Reddit',\n  'Twitter',\n  'Medium',\n  'new tab',\n  'Netflix',\n  'YouTube',\n  'Vine',\n  'GMail',\n  'Work mail',\n  'Docs',\n  'freeCodeCamp',\n  'new tab'\n]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301241,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\understand-the-hazards-of-using-imperative-code.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b88367417b2b2512b45",
      "title": "Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem",
      "challengeType": 1,
      "dashedName": "use-higher-order-functions-map-filter-or-reduce-to-solve-a-complex-problem",
      "description": "Now that you have worked through a few challenges using higher-order functions like `map()`, `filter()`, and `reduce()`, you now get to apply them to solve a more complex challenge.",
      "instructions": "Complete the code for the `squareList` function using any combination of `map()`, `filter()`, and `reduce()`. The function should return a new array containing the squares of *only* the positive integers (decimal numbers are not integers) when an array of real numbers is passed to it. An example of an array of real numbers is `[-3, 4.8, 5, 3, -3.2]`.\n\n**Note:** Your function should not use any kind of `for` or `while` loops or the `forEach()` function.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const squareList = arr => {\n  // Only change code below this line\n  return arr;\n  // Only change code above this line\n};\n\nconst squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);\nconsole.log(squaredIntegers);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const squareList = arr => {\n  const positiveIntegers = arr.filter(num => {\n    return num >= 0 && Number.isInteger(num);\n  });\n  const squaredIntegers = positiveIntegers.map(num => {\n    return num ** 2;\n  });\n  return squaredIntegers;\n};"
        }
      ],
      "tests": [
        {
          "text": "`squareList` should be a `function`.",
          "testCode": "assert.typeOf(squareList, 'function'),\n  '<code>squareList</code> should be a <code>function</code>';"
        },
        {
          "text": "`for`, `while`, and `forEach` should not be used.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/for|while|forEach/g));"
        },
        {
          "text": "`map`, `filter`, or `reduce` should be used.",
          "testCode": "assert(\n  __helpers\n    .removeWhiteSpace(__helpers.removeJSComments(code))\n    .match(/\\.(map|filter|reduce)\\(/g)\n);"
        },
        {
          "text": "The function should return an `array`.",
          "testCode": "assert(Array.isArray(squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2])));"
        },
        {
          "text": "`squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2])` should return `[16, 1764, 36]`.",
          "testCode": "assert.deepStrictEqual(squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2]), [\n  16,\n  1764,\n  36\n]);"
        },
        {
          "text": "`squareList([-3.7, -5, 3, 10, 12.5, 7, -4.5, -17, 0.3])` should return `[9, 100, 49]`.",
          "testCode": "assert.deepStrictEqual(squareList([-3.7, -5, 3, 10, 12.5, 7, -4.5, -17, 0.3]), [\n  9,\n  100,\n  49\n]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301311,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\use-higher-order-functions-map-filter-or-reduce-to-solve-a-complex-problem.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7dab367417b2b2512b6e",
      "title": "Use the every Method to Check that Every Element in an Array Meets a Criteria",
      "challengeType": 1,
      "dashedName": "use-the-every-method-to-check-that-every-element-in-an-array-meets-a-criteria",
      "description": "The `every` method works with arrays to check if *every* element passes a particular test. It returns a Boolean value - `true` if all values meet the criteria, `false` if not.\n\nFor example, the following code would check if every element in the `numbers` array is less than 10:\n\n```js\nconst numbers = [1, 5, 8, 0, 10, 11];\n\nnumbers.every(function(currentValue) {\n  return currentValue < 10;\n});\n```\n\nThe `every` method would return `false` here.",
      "instructions": "Use the `every` method inside the `checkPositive` function to check if every element in `arr` is positive. The function should return a Boolean value.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function checkPositive(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\ncheckPositive([1, 2, 3, -4, 5]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function checkPositive(arr) {\n  return arr.every(num => num > 0);\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `every` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.every/g));"
        },
        {
          "text": "`checkPositive([1, 2, 3, -4, 5])` should return `false`.",
          "testCode": "assert.isFalse(checkPositive([1, 2, 3, -4, 5]));"
        },
        {
          "text": "`checkPositive([1, 2, 3, 4, 5])` should return `true`.",
          "testCode": "assert.isTrue(checkPositive([1, 2, 3, 4, 5]));"
        },
        {
          "text": "`checkPositive([1, -2, 3, -4, 5])` should return `false`.",
          "testCode": "assert.isFalse(checkPositive([1, -2, 3, -4, 5]));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301312,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\use-the-every-method-to-check-that-every-element-in-an-array-meets-a-criteria.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8f367417b2b2512b63",
      "title": "Use the filter Method to Extract Data from an Array",
      "challengeType": 1,
      "dashedName": "use-the-filter-method-to-extract-data-from-an-array",
      "description": "Another useful array function is `Array.prototype.filter()`, or simply `filter()`.\n\n`filter` calls a function on each element of an array and returns a new array containing only the elements for which that function returns a truthy value - that is, a value which returns `true` if passed to the `Boolean()` constructor. In other words, it filters the array, based on the function passed to it. Like `map`, it does this without needing to modify the original array.\n\nThe callback function accepts three arguments. The first argument is the current element being processed. The second is the index of that element and the third is the array upon which the `filter` method was called.\n\nSee below for an example using the `filter` method on the `users` array to return a new array containing only the users under the age of 30. For simplicity, the example only uses the first argument of the callback.\n\n```js\nconst users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst usersUnder30 = users.filter(user => user.age < 30);\nconsole.log(usersUnder30); \n```\n\nThe console would display the value `[ { name: 'Amy', age: 20 }, { name: 'camperCat', age: 10 } ]`.",
      "instructions": "The variable `watchList` holds an array of objects with information on several movies. Use a combination of `filter` and `map` on `watchList` to assign a new array of objects with only `title` and `rating` keys. The new array should only include objects where `imdbRating` is greater than or equal to 8.0. Note that the `rating` values are saved as strings in the object and you may need to convert them into numbers to perform mathematical operations on them.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\n// Only change code below this line\n\nconst filteredList = \"\";\n\n// Only change code above this line\n\nconsole.log(filteredList);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nconst filteredList = watchList.filter(e => e.imdbRating >= 8).map( ({Title: title, imdbRating: rating}) => ({title, rating}) );"
        }
      ],
      "tests": [
        {
          "text": "The `watchList` variable should not change.",
          "testCode": "assert(\n  watchList[0].Title === 'Inception' && watchList[4].Director == 'James Cameron'\n);"
        },
        {
          "text": "Your code should use the `filter` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\s*\\.\\s*filter/g));"
        },
        {
          "text": "Your code should not use a `for` loop.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/for\\s*?\\([\\s\\S]*?\\)/g));"
        },
        {
          "text": "`filteredList` should equal `[{\"title\": \"Inception\", \"rating\": \"8.8\"}, {\"title\": \"Interstellar\", \"rating\": \"8.6\"}, {\"title\": \"The Dark Knight\", \"rating\": \"9.0\"}, {\"title\": \"Batman Begins\", \"rating\": \"8.3\"}]`.",
          "testCode": "assert.deepEqual(filteredList, [\n  { title: 'Inception', rating: '8.8' },\n  { title: 'Interstellar', rating: '8.6' },\n  { title: 'The Dark Knight', rating: '9.0' },\n  { title: 'Batman Begins', rating: '8.3' }\n]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18179,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\use-the-filter-method-to-extract-data-from-an-array.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7b8f367417b2b2512b61",
      "title": "Use the map Method to Extract Data from an Array",
      "challengeType": 1,
      "dashedName": "use-the-map-method-to-extract-data-from-an-array",
      "description": "So far we have learned to use pure functions to avoid side effects in a program. Also, we have seen the value in having a function only depend on its input arguments.\n\nThis is only the beginning. As its name suggests, functional programming is centered around a theory of functions.\n\nIt would make sense to be able to pass them as arguments to other functions, and return a function from another function. Functions are considered <dfn>first class objects</dfn> in JavaScript, which means they can be used like any other object. They can be saved in variables, stored in an object, or passed as function arguments.\n\nLet's start with some simple array functions, which are methods on the array object prototype. In this exercise we are looking at `Array.prototype.map()`, or more simply `map`.\n\nThe `map` method iterates over each item in an array and returns a new array containing the results of calling the callback function on each element. It does this without mutating the original array.\n\nWhen the callback is used, it is passed three arguments. The first argument is the current element being processed. The second is the index of that element and the third is the array upon which the `map` method was called.\n\nSee below for an example using the `map` method on the `users` array to return a new array containing only the names of the users as elements. For simplicity, the example only uses the first argument of the callback.\n\n```js\nconst users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst names = users.map(user => user.name);\nconsole.log(names);\n```\n\nThe console would display the value `[ 'John', 'Amy', 'camperCat' ]`.",
      "instructions": "The `watchList` array holds objects with information on several movies. Use `map` on `watchList` to assign a new array of objects to the `ratings` variable. Each movie in the new array should have only a `title` key with the name of the film, and a `rating` key with the IMDB rating. The code in the editor currently uses a `for` loop to do this, so you should replace the loop functionality with your `map` expression.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\n// Only change code below this line\n\nconst ratings = [];\nfor (let i = 0; i < watchList.length; i++) {\n  ratings.push({title: watchList[i][\"Title\"], rating: watchList[i][\"imdbRating\"]});\n}\n\n// Only change code above this line\n\nconsole.log(JSON.stringify(ratings));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nconst ratings = watchList.map(function(movie) {\n  return {\n    title: movie[\"Title\"],\n    rating: movie[\"imdbRating\"]\n  }\n});"
        }
      ],
      "tests": [
        {
          "text": "The `watchList` variable should not change.",
          "testCode": "assert(\n  watchList[0].Title === 'Inception' && watchList[4].Director == 'James Cameron'\n);"
        },
        {
          "text": "Your code should not use a `for` loop.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/for\\s*?\\([\\s\\S]*?\\)/));"
        },
        {
          "text": "Your code should use the `map` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.map/g));"
        },
        {
          "text": "`ratings` should equal `[{\"title\": \"Inception\", \"rating\": \"8.8\"}, {\"title\": \"Interstellar\", \"rating\": \"8.6\"}, {\"title\": \"The Dark Knight\", \"rating\": \"9.0\"},{\"title\": \"Batman Begins\", \"rating\": \"8.3\"}, {\"title\": \"Avatar\", \"rating\": \"7.9\"}]`.",
          "testCode": "assert.deepEqual(ratings, [\n  { title: 'Inception', rating: '8.8' },\n  { title: 'Interstellar', rating: '8.6' },\n  { title: 'The Dark Knight', rating: '9.0' },\n  { title: 'Batman Begins', rating: '8.3' },\n  { title: 'Avatar', rating: '7.9' }\n]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18214,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\use-the-map-method-to-extract-data-from-an-array.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7da9367417b2b2512b68",
      "title": "Use the reduce Method to Analyze Data",
      "challengeType": 1,
      "dashedName": "use-the-reduce-method-to-analyze-data",
      "description": "`Array.prototype.reduce()`, or simply `reduce()`, is the most general of all array operations in JavaScript. You can solve almost any array processing problem using the `reduce` method.\n\nThe `reduce` method allows for more general forms of array processing, and it's possible to show that both `filter` and `map` can be derived as special applications of `reduce`. The `reduce` method iterates over each item in an array and returns a single value (i.e. string, number, object, array). This is achieved via a callback function that is called on each iteration.\n\nThe callback function accepts four arguments. The first argument is known as the accumulator, which gets assigned the return value of the callback function from the previous iteration, the second is the current element being processed, the third is the index of that element and the fourth is the array upon which `reduce` is called.\n\nIn addition to the callback function, `reduce` has an additional parameter which takes an initial value for the accumulator. If this second parameter is not used, then the first iteration is skipped and the second iteration gets passed the first element of the array as the accumulator.\n\nSee below for an example using `reduce` on the `users` array to return the sum of all the users' ages. For simplicity, the example only uses the first and second arguments.\n\n```js\nconst users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst sumOfAges = users.reduce((sum, user) => sum + user.age, 0);\nconsole.log(sumOfAges);\n```\n\nThe console would display the value `64`.\n\nIn another example, see how an object can be returned containing the names of the users as properties with their ages as values.\n\n```js\nconst users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst usersObj = users.reduce((obj, user) => {\n  obj[user.name] = user.age;\n  return obj;\n}, {});\nconsole.log(usersObj);\n```\n\nThe console would display the value `{ John: 34, Amy: 20, camperCat: 10 }`.",
      "instructions": "The variable `watchList` holds an array of objects with information on several movies. Use `reduce` to find the average IMDB rating of the movies directed by `Christopher Nolan`. Recall from prior challenges how to `filter` data and `map` over it to pull what you need. You may need to create other variables, and return the average rating from `getRating` function. Note that the rating values are saved as strings in the object and need to be converted into numbers before they are used in any mathematical operations.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nfunction getRating(watchList) {\n  // Only change code below this line\n  let averageRating;\n\n\n  // Only change code above this line\n  return averageRating;\n}\n\nconsole.log(getRating(watchList));"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nfunction getRating(watchList) {\n  let averageRating;\n  const rating = watchList\n    .filter(obj => obj.Director === \"Christopher Nolan\")\n    .map(obj => Number(obj.imdbRating));\n  averageRating = rating.reduce((accum, curr) => accum + curr)/rating.length;\n  return averageRating;\n}"
        }
      ],
      "tests": [
        {
          "text": "The `watchList` variable should not change.",
          "testCode": "assert(\n  watchList[0].Title === 'Inception' && watchList[4].Director == 'James Cameron'\n);"
        },
        {
          "text": "Your code should use the `reduce` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.reduce/g));"
        },
        {
          "text": "The `getRating(watchList)` should equal 8.675.",
          "testCode": "assert(getRating(watchList) === 8.675);"
        },
        {
          "text": "Your code should not use a `for` loop.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/for\\s*?\\([\\s\\S]*?\\)/g));"
        },
        {
          "text": "Your code should return the correct output after modifying the `watchList` object.",
          "testCode": "assert(getRating(watchList.filter((_, i) => i < 1 || i > 2)) === 8.55);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301313,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\use-the-reduce-method-to-analyze-data.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "587d7dab367417b2b2512b6f",
      "title": "Use the some Method to Check that Any Elements in an Array Meet a Criteria",
      "challengeType": 1,
      "dashedName": "use-the-some-method-to-check-that-any-elements-in-an-array-meet-a-criteria",
      "description": "The `some` method works with arrays to check if *any* element passes a particular test. It returns a Boolean value - `true` if any of the values meet the criteria, `false` if not.\n\nFor example, the following code would check if any element in the `numbers` array is less than 10:\n\n```js\nconst numbers = [10, 50, 8, 220, 110, 11];\n\nnumbers.some(function(currentValue) {\n  return currentValue < 10;\n});\n```\n\nThe `some` method would return `true`.",
      "instructions": "Use the `some` method inside the `checkPositive` function to check if any element in `arr` is positive. The function should return a Boolean value.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function checkPositive(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\ncheckPositive([1, 2, 3, -4, 5]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function checkPositive(arr) {\n  return arr.some(elem => elem > 0);\n}"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `some` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.some/g));"
        },
        {
          "text": "`checkPositive([1, 2, 3, -4, 5])` should return `true`.",
          "testCode": "assert(checkPositive([1, 2, 3, -4, 5]));"
        },
        {
          "text": "`checkPositive([1, 2, 3, 4, 5])` should return `true`.",
          "testCode": "assert(checkPositive([1, 2, 3, 4, 5]));"
        },
        {
          "text": "`checkPositive([-1, -2, -3, -4, -5])` should return `false`.",
          "testCode": "assert(!checkPositive([-1, -2, -3, -4, -5]));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301314,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\functional-programming\\use-the-some-method-to-check-that-any-elements-in-an-array-meet-a-criteria.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "functional-programming",
        "name": "Functional Programming"
      }
    },
    {
      "id": "a97fd23d9b809dac9921074f",
      "title": "Arguments Optional",
      "challengeType": 1,
      "dashedName": "arguments-optional",
      "description": "Create a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum.\n\nFor example, `addTogether(2, 3)` should return `5`, and `addTogether(2)` should return a function.\n\nCalling this returned function with a single argument will then return the sum:\n\n```js\nvar sumTwoAnd = addTogether(2);\n```\n\n`sumTwoAnd(3)` returns `5`.\n\nIf either argument isn't a valid number, return undefined.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function addTogether() {\n  return false;\n}\n\naddTogether(2,3);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function addTogether() {\n  const first = arguments[0];\n  if (typeof(first) !== 'number') {\n    return undefined;\n  }\n  if (arguments.length === 1) {\n    return function(second) {\n      if (typeof(second) !== 'number') {\n        return undefined;\n      }\n      return first + second;\n    };\n  }\n  const second = arguments[1];\n  if (typeof(second) !== 'number') {\n    return undefined;\n  }\n  return first + second;\n}"
        }
      ],
      "tests": [
        {
          "text": "`addTogether(2, 3)` should return 5.",
          "testCode": "assert.deepEqual(addTogether(2, 3), 5);"
        },
        {
          "text": "`addTogether(23.4, 30)` should return 53.4.",
          "testCode": "assert.deepEqual(addTogether(23.4, 30), 53.4);"
        },
        {
          "text": "`addTogether(\"2\", 3)` should return `undefined`.",
          "testCode": "assert.isUndefined(addTogether('2', 3));"
        },
        {
          "text": "`addTogether(5, undefined)` should return `undefined`.",
          "testCode": "assert.isUndefined(addTogether(5, undefined));"
        },
        {
          "text": "`addTogether(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")` should return `undefined`.",
          "testCode": "assert.isUndefined(addTogether('https://www.youtube.com/watch?v=dQw4w9WgXcQ'));"
        },
        {
          "text": "`addTogether(5)` should return a function.",
          "testCode": "assert.deepEqual(typeof(addTogether(5)), 'function');"
        },
        {
          "text": "`addTogether(5)(7)` should return 12.",
          "testCode": "assert.deepEqual(addTogether(5)(7), 12);"
        },
        {
          "text": "`addTogether(2)([3])` should return `undefined`.",
          "testCode": "assert.isUndefined(addTogether(2)([3]));"
        },
        {
          "text": "`addTogether(2, \"3\")` should return `undefined`.",
          "testCode": "assert.isUndefined(addTogether(2, '3'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 14271,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\arguments-optional.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a8d97bd4c764e91f9d2bda01",
      "title": "Binary Agents",
      "challengeType": 1,
      "dashedName": "binary-agents",
      "description": "Return an English translated sentence of the passed binary string.\n\nThe binary string will be space separated.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function binaryAgent(str) {\n  return str;\n}\n\nbinaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function binaryAgent(str) {\n  return str.split(' ').map(function(s) { return parseInt(s, 2); }).map(function(b) { return String.fromCharCode(b);}).join('');\n}"
        }
      ],
      "tests": [
        {
          "text": "`binaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\")` should return the string `Aren't bonfires fun!?`",
          "testCode": "assert.deepEqual(\n  binaryAgent(\n    '01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111'\n  ),\n  \"Aren't bonfires fun!?\"\n);"
        },
        {
          "text": "`binaryAgent(\"01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001\")` should return the string `I love FreeCodeCamp!`",
          "testCode": "assert.deepEqual(\n  binaryAgent(\n    '01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001'\n  ),\n  'I love FreeCodeCamp!'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 14273,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\binary-agents.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a6b0bb188d873cb2c8729495",
      "title": "Convert HTML Entities",
      "challengeType": 1,
      "dashedName": "convert-html-entities",
      "description": "Convert the characters `&`, `<`, `>`, `\"` (double quote), and `'` (apostrophe), in a string to their corresponding HTML entities.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function convertHTML(str) {\n  return str;\n}\n\nconvertHTML(\"Dolce & Gabbana\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var MAP = { '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&apos;'};\n\nfunction convertHTML(str) {\n  return str.replace(/[&<>\"']/g, function(c) {\n    return MAP[c];\n  });\n}"
        }
      ],
      "tests": [
        {
          "text": "`convertHTML(\"Dolce & Gabbana\")` should return the string `Dolce &amp; Gabbana`.",
          "testCode": "assert.match(convertHTML('Dolce & Gabbana'), /Dolce &amp; Gabbana/);"
        },
        {
          "text": "`convertHTML(\"Hamburgers < Pizza < Tacos\")` should return the string `Hamburgers &lt; Pizza &lt; Tacos`.",
          "testCode": "assert.match(\n  convertHTML('Hamburgers < Pizza < Tacos'),\n  /Hamburgers &lt; Pizza &lt; Tacos/\n);"
        },
        {
          "text": "`convertHTML(\"Sixty > twelve\")` should return the string `Sixty &gt; twelve`.",
          "testCode": "assert.match(convertHTML('Sixty > twelve'), /Sixty &gt; twelve/);"
        },
        {
          "text": "`convertHTML('Stuff in \"quotation marks\"')` should return the string `Stuff in &quot;quotation marks&quot;`.",
          "testCode": "assert.match(\n  convertHTML('Stuff in \"quotation marks\"'),\n  /Stuff in &quot;quotation marks&quot;/\n);"
        },
        {
          "text": "`convertHTML(\"Schindler's List\")` should return the string `Schindler&apos;s List`.",
          "testCode": "assert.match(convertHTML(\"Schindler's List\"), /Schindler&apos;s List/);"
        },
        {
          "text": "`convertHTML(\"<>\")` should return the string `&lt;&gt;`.",
          "testCode": "assert.match(convertHTML('<>'), /&lt;&gt;/);"
        },
        {
          "text": "`convertHTML(\"abc\")` should return the string `abc`.",
          "testCode": "assert.strictEqual(convertHTML('abc'), 'abc');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16007,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\convert-html-entities.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a5de63ebea8dbee56860f4f2",
      "title": "Diff Two Arrays",
      "challengeType": 1,
      "dashedName": "diff-two-arrays",
      "description": "Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.\n\n**Note:** You can return the array with its elements in any order.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function diffArray(arr1, arr2) {\n  const newArr = [];\n  return newArr;\n}\n\ndiffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function diffArray(arr1, arr2) {\n  if (arr1.length === 0) return arr2;\n  if (arr2.length === 0) return arr1;\n\n  const set1 = new Set(arr1);\n  const set2 = new Set(arr2);\n  \n  const newArr = [];\n\n  set1.forEach(element => {\n    if (!set2.has(element)) newArr.push(element);\n\n  });\n\n  set2.forEach(element => {\n    if (!set1.has(element)) newArr.push(element);\n\n  });\n\n  return newArr;\n  \n}"
        }
      ],
      "tests": [
        {
          "text": "`diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])` should return an array.",
          "testCode": "assert(typeof diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]) === 'object');"
        },
        {
          "text": "`[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]` should return `[\"pink wool\"]`.",
          "testCode": "assert.sameMembers(\n  diffArray(\n    ['diorite', 'andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  ['pink wool']\n);"
        },
        {
          "text": "`[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]` should return an array with one item.",
          "testCode": "assert(\n  diffArray(\n    ['diorite', 'andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 1\n);"
        },
        {
          "text": "`[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]` should return `[\"diorite\", \"pink wool\"]`.",
          "testCode": "assert.sameMembers(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  ['diorite', 'pink wool']\n);"
        },
        {
          "text": "`[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]` should return an array with two items.",
          "testCode": "assert(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 2\n);"
        },
        {
          "text": "`[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]` should return `[]`.",
          "testCode": "assert.sameMembers(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'dead shrub'],\n    ['andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  []\n);"
        },
        {
          "text": "`[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]` should return an empty array.",
          "testCode": "assert(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'dead shrub'],\n    ['andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 0\n);"
        },
        {
          "text": "`[1, 2, 3, 5], [1, 2, 3, 4, 5]` should return `[4]`.",
          "testCode": "assert.sameMembers(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]), [4]);"
        },
        {
          "text": "`[1, 2, 3, 5], [1, 2, 3, 4, 5]` should return an array with one item.",
          "testCode": "assert(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]).length === 1);"
        },
        {
          "text": "`[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]` should return `[\"piglet\", 4]`.",
          "testCode": "assert.sameMembers(diffArray([1, 'calf', 3, 'piglet'], [1, 'calf', 3, 4]), [\n  'piglet',\n  4\n]);"
        },
        {
          "text": "`[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]` should return an array with two items.",
          "testCode": "assert(diffArray([1, 'calf', 3, 'piglet'], [1, 'calf', 3, 4]).length === 2);"
        },
        {
          "text": "`[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]` should return `[\"snuffleupagus\", \"cookie monster\", \"elmo\"]`.",
          "testCode": "assert.sameMembers(diffArray([], ['snuffleupagus', 'cookie monster', 'elmo']), [\n  'snuffleupagus',\n  'cookie monster',\n  'elmo'\n]);"
        },
        {
          "text": "`[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]` should return an array with three items.",
          "testCode": "assert(diffArray([], ['snuffleupagus', 'cookie monster', 'elmo']).length === 3);"
        },
        {
          "text": "`[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]` should return `[1, \"calf\", 3, \"piglet\", 7, \"filly\"]`.",
          "testCode": "assert.sameMembers(diffArray([1, 'calf', 3, 'piglet'], [7, 'filly']), [\n  1,\n  'calf',\n  3,\n  'piglet',\n  7,\n  'filly'\n]);"
        },
        {
          "text": "`[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]` should return an array with six items.",
          "testCode": "assert(diffArray([1, 'calf', 3, 'piglet'], [7, 'filly']).length === 6);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16008,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\diff-two-arrays.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "afd15382cdfb22c9efe8b7de",
      "title": "DNA Pairing",
      "challengeType": 1,
      "dashedName": "dna-pairing",
      "description": "Pairs of DNA strands consist of nucleobase pairs. Base pairs are represented by the characters <em>AT</em> and <em>CG</em>, which form building blocks of the DNA double helix.\n\nThe DNA strand is missing the pairing element. Write a function to match the missing base pairs for the provided DNA strand. For each character in the provided string, find the base pair character. Return the results as a 2d array.\n\nFor example, for the input `GCG`, return `[[\"G\", \"C\"], [\"C\",\"G\"], [\"G\", \"C\"]]`\n\nThe character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pairElement(str) {\n  return str;\n}\n\npairElement(\"GCG\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var lookup = Object.create(null);\nlookup.A = 'T';\nlookup.T = 'A';\nlookup.C = 'G';\nlookup.G = 'C';\n\nfunction pairElement(str) {\n return str.split('').map(function(p) {return [p, lookup[p]];});\n}"
        }
      ],
      "tests": [
        {
          "text": "`pairElement(\"ATCGA\")` should return `[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]]`.",
          "testCode": "assert.deepEqual(pairElement('ATCGA'), [\n  ['A', 'T'],\n  ['T', 'A'],\n  ['C', 'G'],\n  ['G', 'C'],\n  ['A', 'T']\n]);"
        },
        {
          "text": "`pairElement(\"TTGAG\")` should return `[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]]`.",
          "testCode": "assert.deepEqual(pairElement('TTGAG'), [\n  ['T', 'A'],\n  ['T', 'A'],\n  ['G', 'C'],\n  ['A', 'T'],\n  ['G', 'C']\n]);"
        },
        {
          "text": "`pairElement(\"CTCTA\")` should return `[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]]`.",
          "testCode": "assert.deepEqual(pairElement('CTCTA'), [\n  ['C', 'G'],\n  ['T', 'A'],\n  ['C', 'G'],\n  ['T', 'A'],\n  ['A', 'T']\n]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16009,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\dna-pairing.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a5deed1811a43193f9f1c841",
      "title": "Drop it",
      "challengeType": 1,
      "dashedName": "drop-it",
      "description": "Given the array `arr`, iterate through and remove each element starting from the first element (the 0 index) until the function `func` returns `true` when the iterated element is passed through it.\n\nThen return the rest of the array once the condition is satisfied, otherwise, `arr` should be returned as an empty array.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function dropElements(arr, func) {\n  return arr;\n}\n\ndropElements([1, 2, 3], function(n) {return n < 3; });"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function dropElements(arr, func) {\n  while (arr.length && !func(arr[0])) {\n    arr.shift();\n  }\n  return arr;\n}"
        }
      ],
      "tests": [
        {
          "text": "`dropElements([1, 2, 3, 4], function(n) {return n >= 3;})` should return `[3, 4]`.",
          "testCode": "assert.deepEqual(\n  dropElements([1, 2, 3, 4], function (n) {\n    return n >= 3;\n  }),\n  [3, 4]\n);"
        },
        {
          "text": "`dropElements([0, 1, 0, 1], function(n) {return n === 1;})` should return `[1, 0, 1]`.",
          "testCode": "assert.deepEqual(\n  dropElements([0, 1, 0, 1], function (n) {\n    return n === 1;\n  }),\n  [1, 0, 1]\n);"
        },
        {
          "text": "`dropElements([1, 2, 3], function(n) {return n > 0;})` should return `[1, 2, 3]`.",
          "testCode": "assert.deepEqual(\n  dropElements([1, 2, 3], function (n) {\n    return n > 0;\n  }),\n  [1, 2, 3]\n);"
        },
        {
          "text": "`dropElements([1, 2, 3, 4], function(n) {return n > 5;})` should return `[]`.",
          "testCode": "assert.deepEqual(\n  dropElements([1, 2, 3, 4], function (n) {\n    return n > 5;\n  }),\n  []\n);"
        },
        {
          "text": "`dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;})` should return `[7, 4]`.",
          "testCode": "assert.deepEqual(\n  dropElements([1, 2, 3, 7, 4], function (n) {\n    return n > 3;\n  }),\n  [7, 4]\n);"
        },
        {
          "text": "`dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;})` should return `[3, 9, 2]`.",
          "testCode": "assert.deepEqual(\n  dropElements([1, 2, 3, 9, 2], function (n) {\n    return n > 2;\n  }),\n  [3, 9, 2]\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16010,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\drop-it.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a10d2431ad0c6a099a4b8b52",
      "title": "Everything Be True",
      "challengeType": 1,
      "dashedName": "everything-be-true",
      "description": "Check if the predicate (second argument) is <dfn>truthy</dfn> on all elements of a collection (first argument).\n\nIn other words, you are given an array collection of objects. The predicate `pre` will be an object property and you need to return `true` if its value is `truthy`. Otherwise, return `false`.\n\nIn JavaScript, `truthy` values are values that translate to `true` when evaluated in a Boolean context.\n\nRemember, you can access object properties through either dot notation or `[]` notation.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function truthCheck(collection, pre) {\n  return pre;\n}\n\ntruthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function truthCheck(collection, pre) {\n  return collection.every(function(e) { return e[pre]; });\n}"
        }
      ],
      "tests": [
        {
          "text": "`truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\")` should return `false`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"isBot\"), false);"
        },
        {
          "text": "`truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"name\")` should return `true`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"name\"), true);"
        },
        {
          "text": "`truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"role\")` should return `false`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"role\"), false);"
        },
        {
          "text": "`truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}], \"number\")` should return `true`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n  ],\n  \"number\"), true);"
        },
        {
          "text": "`truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}, {name: \"MissingNo\", number: NaN, caught: 0}], \"caught\")` should return `false`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n    { name: \"MissingNo\", number: NaN, caught: 0 },\n  ],\n  \"caught\"), false);"
        },
        {
          "text": "`truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}, {name: \"MissingNo\", number: NaN, caught: 0}], \"number\")` should return `false`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n    { name: \"MissingNo\", number: NaN, caught: 0 },\n  ],\n  \"number\"), false);"
        },
        {
          "text": "`truthCheck([{name: \"Quincy\", username: \"QuincyLarson\"}, {name: \"Naomi\", username: \"nhcarrigan\"}, {name: \"Camperbot\"}], \"username\")` should return `false`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", username: \"QuincyLarson\" },\n    { name: \"Naomi\", username: \"nhcarrigan\" },\n    { name: \"Camperbot\" }\n  ],\n  \"username\"), false);"
        },
        {
          "text": "`truthCheck([{name: \"freeCodeCamp\", users: [{name: \"Quincy\"}, {name: \"Naomi\"}]}, {name: \"Code Radio\", users: [{name: \"Camperbot\"}]}, {name: \"\", users: []}], \"users\")` should return `true`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { name: \"freeCodeCamp\", users: [{ name: \"Quincy\" }, { name: \"Naomi\" }] },\n    { name: \"Code Radio\", users: [{ name: \"Camperbot\" }] },\n    { name: \"\", users: [] },\n  ],\n  \"users\"), true);"
        },
        {
          "text": "`truthCheck([{id: 1, data: {url: \"https://freecodecamp.org\", name: \"freeCodeCamp\"}}, {id: 2, data: {url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\"}}, {id: null, data: {}}], \"data\")` should return `true`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { id: 1, data: { url: \"https://www.freecodecamp.org\", name: \"freeCodeCamp\" } },\n    { id: 2, data: { url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\" } },\n    { id: null, data: {} },\n  ],\n  \"data\"), true);"
        },
        {
          "text": "`truthCheck([{id: 1, data: {url: \"https://freecodecamp.org\", name: \"freeCodeCamp\"}}, {id: 2, data: {url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\"}}, {id: null, data: {}}], \"id\")` should return `false`.",
          "testCode": "assert.strictEqual(truthCheck(\n  [\n    { id: 1, data: { url: \"https://www.freecodecamp.org\", name: \"freeCodeCamp\" } },\n    { id: 2, data: { url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\" } },\n    { id: null, data: {} },\n  ],\n  \"id\"), false);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16011,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\everything-be-true.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a2f1d72d9b908d0bd72bb9f6",
      "title": "Make a Person",
      "challengeType": 1,
      "dashedName": "make-a-person",
      "description": "Fill in the object constructor with the following methods below:\n\n```js\ngetFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(first, last)\n```\n\nRun the tests to see the expected output for each method. These methods must be the only available means of interacting with the object. Each test will declare a new `Person` instance as `new Person('Bob', 'Ross')`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "const Person = function(first, last) {\n  this.getFullName = function() {\n    return \"\";\n  };\n  return \"\";\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const Person = function(first, last) {\n  let firstName = first;\n  let lastName = last;\n\n  this.getFirstName = function(){\n    return firstName;\n  };\n\n  this.getLastName = function(){\n    return lastName;\n  };\n\n  this.getFullName = function(){\n    return firstName + \" \" + lastName;\n  };\n\n  this.setFirstName = function(str){\n    firstName = str;\n  };\n\n\n  this.setLastName = function(str){\n    lastName = str;\n  };\n\n  this.setFullName = function(first, last){\n    firstName = first;\n    lastName = last;\n  };\n};"
        }
      ],
      "tests": [
        {
          "text": "You should not change the function signature.",
          "testCode": "assert.match(code, /const\\s+Person\\s*=\\s*function\\s*\\(\\s*first\\s*,\\s*last\\s*\\)\\s*{/);"
        },
        {
          "text": "You should not reassign the `first` parameter.",
          "testCode": "assert.notMatch(code, /\\bfirst\\s*=\\s*/);"
        },
        {
          "text": "You should not reassign the `last` parameter.",
          "testCode": "assert.notMatch(code, /\\blast\\s*=\\s*/);"
        },
        {
          "text": "No properties should be added. `Object.keys(Person).length` should always return 6.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setFirstName('Haskell');\n_person.setLastName('Curry');\n_person.setFullName('John', 'Smith');\nassert.lengthOf(Object.keys(_person), 6);"
        },
        {
          "text": "You should be able to instantiate your `Person` object.",
          "testCode": "const _person = new Person('Bob', 'Ross');\nassert.instanceOf(_person, Person);"
        },
        {
          "text": "Your `Person` object should not have a `firstName` property.",
          "testCode": "const _person = new Person('Bob', 'Ross');\nassert.notProperty(_person, 'firstName');"
        },
        {
          "text": "Your `Person` object should not have a `lastName` property.",
          "testCode": "const _person = new Person('Bob', 'Ross');\nassert.notProperty(_person, 'lastName');"
        },
        {
          "text": "The `.getFirstName()` method should return the string `Bob`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\nassert.strictEqual(_person.getFirstName(), 'Bob');"
        },
        {
          "text": "The `.getLastName()` should return the string `Ross`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\nassert.strictEqual(_person.getLastName(), 'Ross');"
        },
        {
          "text": "The `.getFullName()` method should return the string `Bob Ross`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\nassert.strictEqual(_person.getFullName(), 'Bob Ross');"
        },
        {
          "text": "The `.getFullName()` method should return the string `Haskell Ross` after calling `.setFirstName('Haskell')`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setFirstName('Haskell');\nassert.strictEqual(_person.getFullName(), 'Haskell Ross');"
        },
        {
          "text": "The `.getFullName()` method should return the string `Bob Curry` after calling `.setLastName('Curry')`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setLastName('Curry');\nassert.strictEqual(_person.getFullName(), 'Bob Curry');"
        },
        {
          "text": "The `.getFullName()` method should return the string `Haskell Curry` after calling `.setFullName('Haskell', 'Curry')`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setFullName('Haskell', 'Curry');\nassert.strictEqual(_person.getFullName(), 'Haskell Curry');"
        },
        {
          "text": "The `.getFirstName()` method should return the string `Haskell` after calling `.setFullName('Haskell', 'Curry')`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setFullName('Haskell', 'Curry');\nassert.strictEqual(_person.getFirstName(), 'Haskell');"
        },
        {
          "text": "The `.getLastName()` method should return the string `Curry` after calling `.setFullName('Haskell', 'Curry')`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setFullName('Haskell', 'Curry');\nassert.strictEqual(_person.getLastName(), 'Curry');"
        },
        {
          "text": "The `.getFullName()` method should return the string `Emily Martinez de la Rosa` after calling `.setFullName('Emily Martinez', 'de la Rosa')`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setFullName('Emily Martinez', 'de la Rosa');\nassert.strictEqual(_person.getFullName(), 'Emily Martinez de la Rosa');"
        },
        {
          "text": "The `.getFirstName()` property should return the string `Emily Martinez` after calling `.setFullName('Emily Martinez', 'de la Rosa')`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setFullName('Emily Martinez', 'de la Rosa');\nassert.strictEqual(_person.getFirstName(), 'Emily Martinez');"
        },
        {
          "text": "The `.getLastName()` property should return the string `de la Rosa` after calling `.setFullName('Emily Martinez', 'de la Rosa')`.",
          "testCode": "const _person = new Person('Bob', 'Ross');\n_person.setFullName('Emily Martinez', 'de la Rosa');\nassert.strictEqual(_person.getLastName(), 'de la Rosa');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16020,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\make-a-person.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "af4afb223120f7348cdfc9fd",
      "title": "Map the Debris",
      "challengeType": 1,
      "dashedName": "map-the-debris",
      "description": "According to Kepler's Third Law, the orbital period $T$ of two point masses orbiting each other in a circular or elliptic orbit is:\n\n$$\nT = 2 \\pi \\sqrt{\\frac{a^{3}}{\\mu}}\n$$\n\n- $a$ is the orbit's semi-major axis\n- $μ = GM$ is the standard gravitational parameter\n- $G$ is the gravitational constant,\n- $M$ is the mass of the more massive body.\n\nReturn a new array that transforms the elements' average altitude into their orbital periods (in seconds).\n\nThe array will contain objects in the format `{name: 'name', avgAlt: avgAlt}`.\n\nThe values should be rounded to the nearest whole number. The body being orbited is Earth.\n\nThe radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km<sup>3</sup>s<sup>-2</sup>.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  return arr;\n}\n\norbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}"
        }
      ],
      "tests": [
        {
          "text": "`orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}])` should return `[{name: \"sputnik\", orbitalPeriod: 86400}]`.",
          "testCode": "assert.deepEqual(orbitalPeriod([{ name: 'sputnik', avgAlt: 35873.5553 }]), [\n  { name: 'sputnik', orbitalPeriod: 86400 }\n]);"
        },
        {
          "text": "`orbitalPeriod([{name: \"iss\", avgAlt: 413.6}, {name: \"hubble\", avgAlt: 556.7}, {name: \"moon\", avgAlt: 378632.553}])` should return `[{name : \"iss\", orbitalPeriod: 5557}, {name: \"hubble\", orbitalPeriod: 5734}, {name: \"moon\", orbitalPeriod: 2377399}]`.",
          "testCode": "assert.deepEqual(\n  orbitalPeriod([\n    { name: 'iss', avgAlt: 413.6 },\n    { name: 'hubble', avgAlt: 556.7 },\n    { name: 'moon', avgAlt: 378632.553 }\n  ]),\n  [\n    { name: 'iss', orbitalPeriod: 5557 },\n    { name: 'hubble', orbitalPeriod: 5734 },\n    { name: 'moon', orbitalPeriod: 2377399 }\n  ]\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16021,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\map-the-debris.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "af7588ade1100bde429baf20",
      "title": "Missing letters",
      "challengeType": 1,
      "dashedName": "missing-letters",
      "description": "Find the missing letter in the passed letter range and return it.\n\nIf all letters are present in the range, return `undefined`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function fearNotLetter(str) {\n  return str;\n}\n\nfearNotLetter(\"abce\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function fearNotLetter (str) {\n  for (var i = str.charCodeAt(0); i <= str.charCodeAt(str.length - 1); i++) {\n    var letter = String.fromCharCode(i);\n    if (str.indexOf(letter) === -1) {\n      return letter;\n    }\n  }\n\n  return undefined;\n}"
        }
      ],
      "tests": [
        {
          "text": "`fearNotLetter(\"abce\")` should return the string `d`.",
          "testCode": "assert.deepEqual(fearNotLetter('abce'), 'd');"
        },
        {
          "text": "`fearNotLetter(\"abcdefghjklmno\")` should return the string `i`.",
          "testCode": "assert.deepEqual(fearNotLetter('abcdefghjklmno'), 'i');"
        },
        {
          "text": "`fearNotLetter(\"stvwx\")` should return the string `u`.",
          "testCode": "assert.deepEqual(fearNotLetter('stvwx'), 'u');"
        },
        {
          "text": "`fearNotLetter(\"bcdf\")` should return the string `e`.",
          "testCode": "assert.deepEqual(fearNotLetter('bcdf'), 'e');"
        },
        {
          "text": "`fearNotLetter(\"abcdefghijklmnopqrstuvwxyz\")` should return `undefined`.",
          "testCode": "assert.isUndefined(fearNotLetter('abcdefghijklmnopqrstuvwxyz'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16023,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\missing-letters.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "aa7697ea2477d1316795783b",
      "title": "Pig Latin",
      "challengeType": 1,
      "dashedName": "pig-latin",
      "description": "Pig Latin is a way of altering English Words. The rules are as follows:\n\n\\- If a word begins with a consonant, take the first consonant or consonant cluster, move it to the end of the word, and add `ay` to it.\n\n\\- If a word begins with a vowel, just add `way` at the end.",
      "instructions": "Translate the provided string to Pig Latin. Input strings are guaranteed to be English words in all lowercase.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function translatePigLatin(str) {\n  return str;\n}\n\ntranslatePigLatin(\"consonant\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function translatePigLatin(str) {\n  if (isVowel(str.charAt(0))) return str + \"way\";\n  var front = [];\n  str = str.split('');\n  while (str.length && !isVowel(str[0])) {\n    front.push(str.shift());\n  }\n  return [].concat(str, front).join('') + 'ay';\n}\n\nfunction isVowel(c) {\n  return ['a', 'e', 'i', 'o', 'u'].indexOf(c.toLowerCase()) !== -1;\n}"
        }
      ],
      "tests": [
        {
          "text": "`translatePigLatin(\"california\")` should return the string `aliforniacay`.",
          "testCode": "assert.deepEqual(translatePigLatin('california'), 'aliforniacay');"
        },
        {
          "text": "`translatePigLatin(\"paragraphs\")` should return the string `aragraphspay`.",
          "testCode": "assert.deepEqual(translatePigLatin('paragraphs'), 'aragraphspay');"
        },
        {
          "text": "`translatePigLatin(\"glove\")` should return the string `oveglay`.",
          "testCode": "assert.deepEqual(translatePigLatin('glove'), 'oveglay');"
        },
        {
          "text": "`translatePigLatin(\"algorithm\")` should return the string `algorithmway`.",
          "testCode": "assert.deepEqual(translatePigLatin('algorithm'), 'algorithmway');"
        },
        {
          "text": "`translatePigLatin(\"eight\")` should return the string `eightway`.",
          "testCode": "assert.deepEqual(translatePigLatin('eight'), 'eightway');"
        },
        {
          "text": "Should handle words where the first vowel comes in the middle of the word.  `translatePigLatin(\"schwartz\")` should return the string `artzschway`.",
          "testCode": "assert.deepEqual(translatePigLatin('schwartz'), 'artzschway');"
        },
        {
          "text": "Should handle words without vowels. `translatePigLatin(\"rhythm\")` should return the string `rhythmay`.",
          "testCode": "assert.deepEqual(translatePigLatin('rhythm'), 'rhythmay');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16039,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\pig-latin.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a0b5010f579e69b815e7c5d6",
      "title": "Search and Replace",
      "challengeType": 1,
      "dashedName": "search-and-replace",
      "description": "Perform a search and replace on the sentence using the arguments provided and return the new sentence.\n\nFirst argument is the sentence to perform the search and replace on.\n\nSecond argument is the word that you will be replacing (before).\n\nThird argument is what you will be replacing the second argument with (after).\n\n**Note:** Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word `Book` with the word `dog`, it should be replaced as `Dog`",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function myReplace(str, before, after) {\n  return str;\n}\n\nmyReplace(\"A quick brown fox jumped over the lazy dog\", \"jumped\", \"leaped\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function myReplace(str, before, after) {\n  if (before.charAt(0) === before.charAt(0).toUpperCase()) {\n    after = after.charAt(0).toUpperCase() + after.substring(1);\n  } else {\n    after = after.charAt(0).toLowerCase() + after.substring(1);\n  }\n  return str.replace(before, after);\n}"
        }
      ],
      "tests": [
        {
          "text": "`myReplace(\"Let us go to the store\", \"store\", \"mall\")` should return the string `Let us go to the mall`.",
          "testCode": "assert.deepEqual(\n  myReplace('Let us go to the store', 'store', 'mall'),\n  'Let us go to the mall'\n);"
        },
        {
          "text": "`myReplace(\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\")` should return the string `He is Sitting on the couch`.",
          "testCode": "assert.deepEqual(\n  myReplace('He is Sleeping on the couch', 'Sleeping', 'sitting'),\n  'He is Sitting on the couch'\n);"
        },
        {
          "text": "`myReplace(\"I think we should look up there\", \"up\", \"Down\")` should return the string `I think we should look down there`.",
          "testCode": "assert.deepEqual(\n  myReplace('I think we should look up there', 'up', 'Down'),\n  'I think we should look down there'\n);"
        },
        {
          "text": "`myReplace(\"This has a spellngi error\", \"spellngi\", \"spelling\")` should return the string `This has a spelling error`.",
          "testCode": "assert.deepEqual(\n  myReplace('This has a spellngi error', 'spellngi', 'spelling'),\n  'This has a spelling error'\n);"
        },
        {
          "text": "`myReplace(\"His name is Tom\", \"Tom\", \"john\")` should return the string `His name is John`.",
          "testCode": "assert.deepEqual(\n  myReplace('His name is Tom', 'Tom', 'john'),\n  'His name is John'\n);"
        },
        {
          "text": "`myReplace(\"Let us get back to more Coding\", \"Coding\", \"algorithms\")` should return the string `Let us get back to more Algorithms`.",
          "testCode": "assert.deepEqual(\n  myReplace('Let us get back to more Coding', 'Coding', 'algorithms'),\n  'Let us get back to more Algorithms'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16045,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\search-and-replace.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a39963a4c10bc8b4d4f06d7e",
      "title": "Seek and Destroy",
      "challengeType": 1,
      "dashedName": "seek-and-destroy",
      "description": "You will be provided with an initial array as the first argument to the `destroyer` function, followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.\n\nThe function must accept an indeterminate number of arguments, also known as a variadic function. You can access the additional arguments by adding a rest parameter to the function definition or using the `arguments` object.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function destroyer(arr) {\n  return arr;\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function destroyer(arr) {\n  var hash = Object.create(null);\n  [].slice.call(arguments, 1).forEach(function(e) {\n    hash[e] = true;\n  });\n  return arr.filter(function(e) { return !(e in hash);});\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);"
        }
      ],
      "tests": [
        {
          "text": "`destroyer([1, 2, 3, 1, 2, 3], 2, 3)` should return `[1, 1]`.",
          "testCode": "assert.deepEqual(destroyer([1, 2, 3, 1, 2, 3], 2, 3), [1, 1]);"
        },
        {
          "text": "`destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3)` should return `[1, 5, 1]`.",
          "testCode": "assert.deepEqual(destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3), [1, 5, 1]);"
        },
        {
          "text": "`destroyer([3, 5, 1, 2, 2], 2, 3, 5)` should return `[1]`.",
          "testCode": "assert.deepEqual(destroyer([3, 5, 1, 2, 2], 2, 3, 5), [1]);"
        },
        {
          "text": "`destroyer([2, 3, 2, 3], 2, 3)` should return `[]`.",
          "testCode": "assert.deepEqual(destroyer([2, 3, 2, 3], 2, 3), []);"
        },
        {
          "text": "`destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53)` should return `[\"hamburger\"]`.",
          "testCode": "assert.deepEqual(destroyer(['tree', 'hamburger', 53], 'tree', 53), [\n  'hamburger'\n]);"
        },
        {
          "text": "`destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"], \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\")` should return `[12,92,65]`.",
          "testCode": "assert.deepEqual(\n  destroyer(\n    [\n      'possum',\n      'trollo',\n      12,\n      'safari',\n      'hotdog',\n      92,\n      65,\n      'grandma',\n      'bugati',\n      'trojan',\n      'yacht'\n    ],\n    'yacht',\n    'possum',\n    'trollo',\n    'safari',\n    'hotdog',\n    'grandma',\n    'bugati',\n    'trojan'\n  ),\n  [12, 92, 65]\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16046,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\seek-and-destroy.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "ae9defd7acaf69703ab432ea",
      "title": "Smallest Common Multiple",
      "challengeType": 1,
      "dashedName": "smallest-common-multiple",
      "description": "Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.\n\nThe range will be an array of two numbers that will not necessarily be in numerical order.\n\nFor example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers *between* 1 and 3. The answer here would be 6.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function smallestCommons(arr) {\n  return arr;\n}\n\nsmallestCommons([1,5]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function gcd(a, b) {\n    while (b !== 0) {\n        a = [b, b = a % b][0];\n    }\n    return a;\n}\n\nfunction lcm(a, b) {\n    return (a * b) / gcd(a, b);\n}\n\nfunction smallestCommons(arr) {\n  arr.sort(function(a,b) {return a-b;});\n  var rng = [];\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    rng.push(i);\n  }\n  return rng.reduce(lcm);\n}"
        }
      ],
      "tests": [
        {
          "text": "`smallestCommons([1, 5])` should return a number.",
          "testCode": "assert.deepEqual(typeof smallestCommons([1, 5]), 'number');"
        },
        {
          "text": "`smallestCommons([1, 5])` should return 60.",
          "testCode": "assert.deepEqual(smallestCommons([1, 5]), 60);"
        },
        {
          "text": "`smallestCommons([5, 1])` should return 60.",
          "testCode": "assert.deepEqual(smallestCommons([5, 1]), 60);"
        },
        {
          "text": "`smallestCommons([2, 10])` should return 2520.",
          "testCode": "assert.deepEqual(smallestCommons([2, 10]), 2520);"
        },
        {
          "text": "`smallestCommons([1, 13])` should return 360360.",
          "testCode": "assert.deepEqual(smallestCommons([1, 13]), 360360);"
        },
        {
          "text": "`smallestCommons([23, 18])` should return 6056820.",
          "testCode": "assert.deepEqual(smallestCommons([23, 18]), 6056820);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16075,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\smallest-common-multiple.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a105e963526e7de52b219be9",
      "title": "Sorted Union",
      "challengeType": 1,
      "dashedName": "sorted-union",
      "description": "Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.\n\nIn other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.\n\nThe unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.\n\nCheck the assertion tests for examples.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function uniteUnique(arr) {\n  return arr;\n}\n\nuniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function uniteUnique(arr) {\n  return [].slice.call(arguments).reduce(function(a, b) {\n    return [].concat(\n      a, \n      b.filter(function(e, currentIndex) {\n        return b.indexOf(e) === currentIndex && a.indexOf(e) === -1;\n      }));\n  }, []);\n}"
        }
      ],
      "tests": [
        {
          "text": "`uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])` should return `[1, 3, 2, 5, 4]`.",
          "testCode": "assert.deepEqual(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]), [1, 3, 2, 5, 4]);"
        },
        {
          "text": "`uniteUnique([1, 2, 3], [5, 2, 1])` should return `[1, 2, 3, 5]`.",
          "testCode": "assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1]), [1, 2, 3, 5]);"
        },
        {
          "text": "`uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])` should return `[1, 2, 3, 5, 4, 6, 7, 8]`.",
          "testCode": "assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8]), [\n  1,\n  2,\n  3,\n  5,\n  4,\n  6,\n  7,\n  8\n]);"
        },
        {
          "text": "`uniteUnique([1, 3, 2], [5, 4], [5, 6])` should return `[1, 3, 2, 5, 4, 6]`.",
          "testCode": "assert.deepEqual(uniteUnique([1, 3, 2], [5, 4], [5, 6]), [1, 3, 2, 5, 4, 6]);"
        },
        {
          "text": "`uniteUnique([1, 3, 2, 3], [5, 2, 1, 4], [2, 1])` should return `[1, 3, 2, 5, 4]`.",
          "testCode": "assert.deepEqual(uniteUnique([1, 3, 2, 3], [5, 2, 1, 4], [2, 1]), [1, 3, 2, 5, 4]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16077,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\sorted-union.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a103376db3ba46b2d50db289",
      "title": "Spinal Tap Case",
      "challengeType": 1,
      "dashedName": "spinal-tap-case",
      "description": "Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function spinalCase(str) {\n  return str;\n}\n\nspinalCase('This Is Spinal Tap');"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function spinalCase(str) {\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n  return str.toLowerCase().replace(/\\ |\\_/g, '-');\n}"
        }
      ],
      "tests": [
        {
          "text": "`spinalCase(\"This Is Spinal Tap\")` should return the string `this-is-spinal-tap`.",
          "testCode": "assert.deepEqual(spinalCase('This Is Spinal Tap'), 'this-is-spinal-tap');"
        },
        {
          "text": "`spinalCase(\"thisIsSpinalTap\")` should return the string `this-is-spinal-tap`.",
          "testCode": "assert.strictEqual(spinalCase('thisIsSpinalTap'), 'this-is-spinal-tap');"
        },
        {
          "text": "`spinalCase(\"The_Andy_Griffith_Show\")` should return the string `the-andy-griffith-show`.",
          "testCode": "assert.strictEqual(\n  spinalCase('The_Andy_Griffith_Show'),\n  'the-andy-griffith-show'\n);"
        },
        {
          "text": "`spinalCase(\"Teletubbies say Eh-oh\")` should return the string `teletubbies-say-eh-oh`.",
          "testCode": "assert.strictEqual(\n  spinalCase('Teletubbies say Eh-oh'),\n  'teletubbies-say-eh-oh'\n);"
        },
        {
          "text": "`spinalCase(\"AllThe-small Things\")` should return the string `all-the-small-things`.",
          "testCode": "assert.strictEqual(spinalCase('AllThe-small Things'), 'all-the-small-things');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16078,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\spinal-tap-case.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "ab306dbdcc907c7ddfc30830",
      "title": "Steamroller",
      "challengeType": 1,
      "dashedName": "steamroller",
      "description": "Flatten a nested array. You must account for varying levels of nesting.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function steamrollArray(arr) {\n  return arr;\n}\n\nsteamrollArray([1, [2], [3, [[4]]]]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function steamrollArray(arr) {\n  if (!Array.isArray(arr)) {\n    return [arr];\n  }\n  var out = [];\n  arr.forEach(function(e) {\n    steamrollArray(e).forEach(function(v) {\n      out.push(v);\n    });\n  });\n  return out;\n}"
        }
      ],
      "tests": [
        {
          "text": "`steamrollArray([[[\"a\"]], [[\"b\"]]])` should return `[\"a\", \"b\"]`.",
          "testCode": "assert.deepEqual(steamrollArray([[['a']], [['b']]]), ['a', 'b']);"
        },
        {
          "text": "`steamrollArray([1, [2], [3, [[4]]]])` should return `[1, 2, 3, 4]`.",
          "testCode": "assert.deepEqual(steamrollArray([1, [2], [3, [[4]]]]), [1, 2, 3, 4]);"
        },
        {
          "text": "`steamrollArray([1, [], [3, [[4]]]])` should return `[1, 3, 4]`.",
          "testCode": "assert.deepEqual(steamrollArray([1, [], [3, [[4]]]]), [1, 3, 4]);"
        },
        {
          "text": "`steamrollArray([1, {}, [3, [[4]]]])` should return `[1, {}, 3, 4]`.",
          "testCode": "assert.deepEqual(steamrollArray([1, {}, [3, [[4]]]]), [1, {}, 3, 4]);"
        },
        {
          "text": "Your solution should not use the `Array.prototype.flat()` or `Array.prototype.flatMap()` methods.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.\\s*flat\\s*\\(/) && !__helpers.removeJSComments(code).match(/\\.\\s*flatMap\\s*\\(/));"
        },
        {
          "text": "Global variables should not be used.",
          "testCode": "steamrollArray([1, {}, [3, [[4]]]])\nassert.deepEqual(steamrollArray([1, {}, [3, [[4]]]]), [1, {}, 3, 4])"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16079,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\steamroller.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a3566b1109230028080c9345",
      "title": "Sum All Numbers in a Range",
      "challengeType": 1,
      "dashedName": "sum-all-numbers-in-a-range",
      "description": "We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them. The lowest number will not always come first.\n\nFor example, `sumAll([4,1])` should return `10` because sum of all the numbers between 1 and 4 (both inclusive) is `10`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumAll(arr) {\n  return 1;\n}\n\nsumAll([1, 4]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function sumAll(arr) {\n  var sum = 0;\n  arr.sort(function(a,b) {return a-b;});\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    sum += i;\n  }\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`sumAll([1, 4])` should return a number.",
          "testCode": "assert(typeof sumAll([1, 4]) === 'number');"
        },
        {
          "text": "`sumAll([1, 4])` should return 10.",
          "testCode": "assert.deepEqual(sumAll([1, 4]), 10);"
        },
        {
          "text": "`sumAll([4, 1])` should return 10.",
          "testCode": "assert.deepEqual(sumAll([4, 1]), 10);"
        },
        {
          "text": "`sumAll([5, 10])` should return 45.",
          "testCode": "assert.deepEqual(sumAll([5, 10]), 45);"
        },
        {
          "text": "`sumAll([10, 5])` should return 45.",
          "testCode": "assert.deepEqual(sumAll([10, 5]), 45);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16083,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\sum-all-numbers-in-a-range.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a5229172f011153519423690",
      "title": "Sum All Odd Fibonacci Numbers",
      "challengeType": 1,
      "dashedName": "sum-all-odd-fibonacci-numbers",
      "description": "Given a positive integer `num`, return the sum of all odd Fibonacci numbers that are less than or equal to `num`.\n\nThe first two numbers in the Fibonacci sequence are 0 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first seven numbers of the Fibonacci sequence are 0, 1, 1, 2, 3, 5 and 8.\n\nFor example, `sumFibs(10)` should return `10` because all odd Fibonacci numbers less than or equal to `10` are 1, 1, 3, and 5.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumFibs(num) {\n  return num;\n}\n\nsumFibs(4);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function sumFibs(num) {\n  var a = 1;\n  var b = 1;\n  var s = 0;\n  while (a <= num) {\n    if (a % 2 !== 0) {\n      s += a;\n    }\n    a = [b, b=b+a][0];\n  }\n  return s;\n}"
        }
      ],
      "tests": [
        {
          "text": "`sumFibs(1)` should return a number.",
          "testCode": "assert(typeof sumFibs(1) === 'number');"
        },
        {
          "text": "`sumFibs(1000)` should return 1785.",
          "testCode": "assert(sumFibs(1000) === 1785);"
        },
        {
          "text": "`sumFibs(4000000)` should return 4613732.",
          "testCode": "assert(sumFibs(4000000) === 4613732);"
        },
        {
          "text": "`sumFibs(4)` should return 5.",
          "testCode": "assert(sumFibs(4) === 5);"
        },
        {
          "text": "`sumFibs(75024)` should return 60696.",
          "testCode": "assert(sumFibs(75024) === 60696);"
        },
        {
          "text": "`sumFibs(75025)` should return 135721.",
          "testCode": "assert(sumFibs(75025) === 135721);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16084,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\sum-all-odd-fibonacci-numbers.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a3bfc1673c0526e06d3ac698",
      "title": "Sum All Primes",
      "challengeType": 1,
      "dashedName": "sum-all-primes",
      "description": "A <dfn>prime number</dfn> is a whole number greater than 1 with exactly two divisors: 1 and itself. For example, 2 is a prime number because it is only divisible by 1 and 2. In contrast, 4 is not prime since it is divisible by 1, 2 and 4.\n\nRewrite `sumPrimes` so it returns the sum of all prime numbers that are less than or equal to num.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumPrimes(num) {\n  return num;\n}\n\nsumPrimes(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSquaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\n\nfunction sumPrimes(num) {\n  const primeSeive = new PrimeSeive(num);\n\n  let sum = 2;\n  for (let i = 3; i <= num; i += 2) {\n    if (primeSeive.isOddPrime(i)) sum += i;\n  }\n  return sum;\n}\n\nsumPrimes(10);"
        }
      ],
      "tests": [
        {
          "text": "`sumPrimes(10)` should return a number.",
          "testCode": "assert.deepEqual(typeof sumPrimes(10), 'number');"
        },
        {
          "text": "`sumPrimes(10)` should return 17.",
          "testCode": "assert.deepEqual(sumPrimes(10), 17);"
        },
        {
          "text": "`sumPrimes(977)` should return 73156.",
          "testCode": "assert.deepEqual(sumPrimes(977), 73156);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16085,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\sum-all-primes.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "a8e512fbe388ac2f9198f0fa",
      "title": "Wherefore art thou",
      "challengeType": 1,
      "dashedName": "wherefore-art-thou",
      "description": "Make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array.\n\nFor example, if the first argument is `[{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }]`, and the second argument is `{ last: \"Capulet\" }`, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function whatIsInAName(collection, source) {\n\n}\n\nwhatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" });"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function whatIsInAName(collection, source) {\n  const arr = [];\n  const keys = Object.keys(source);\n  collection.forEach(function(e) {\n    if(keys.every(function(key) {return e[key] === source[key];})) {\n      arr.push(e);\n    }\n  });\n  return arr;\n}"
        }
      ],
      "tests": [
        {
          "text": "`whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" })` should return `[{ first: \"Tybalt\", last: \"Capulet\" }]`.",
          "testCode": "assert.deepEqual(\n  whatIsInAName(\n    [\n      { first: 'Romeo', last: 'Montague' },\n      { first: 'Mercutio', last: null },\n      { first: 'Tybalt', last: 'Capulet' }\n    ],\n    { last: 'Capulet' }\n  ),\n  [{ first: 'Tybalt', last: 'Capulet' }]\n);"
        },
        {
          "text": "`whatIsInAName([{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], { \"apple\": 1 })` should return `[{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }]`.",
          "testCode": "assert.deepEqual(\n  whatIsInAName([{ apple: 1 }, { apple: 1 }, { apple: 1, bat: 2 }], {\n    apple: 1\n  }),\n  [{ apple: 1 }, { apple: 1 }, { apple: 1, bat: 2 }]\n);"
        },
        {
          "text": "`whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 })` should return `[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]`.",
          "testCode": "assert.deepEqual(\n  whatIsInAName(\n    [{ apple: 1, bat: 2 }, { bat: 2 }, { apple: 1, bat: 2, cookie: 2 }],\n    { apple: 1, bat: 2 }\n  ),\n  [\n    { apple: 1, bat: 2 },\n    { apple: 1, bat: 2, cookie: 2 }\n  ]\n);"
        },
        {
          "text": "`whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 })` should return `[{ \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]`.",
          "testCode": "assert.deepEqual(\n  whatIsInAName(\n    [{ apple: 1, bat: 2 }, { apple: 1 }, { apple: 1, bat: 2, cookie: 2 }],\n    { apple: 1, cookie: 2 }\n  ),\n  [{ apple: 1, bat: 2, cookie: 2 }]\n);"
        },
        {
          "text": "`whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, { \"bat\":2 }], { \"apple\": 1, \"bat\": 2 })` should return `[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\":2 }]`.",
          "testCode": "assert.deepEqual(\n  whatIsInAName(\n    [\n      { apple: 1, bat: 2 },\n      { apple: 1 },\n      { apple: 1, bat: 2, cookie: 2 },\n      { bat: 2 }\n    ],\n    { apple: 1, bat: 2 }\n  ),\n  [\n    { apple: 1, bat: 2 },\n    { apple: 1, bat: 2, cookie: 2 }\n  ]\n);"
        },
        {
          "text": "`whatIsInAName([{\"a\": 1, \"b\": 2, \"c\": 3}], {\"a\": 1, \"b\": 9999, \"c\": 3})` should return `[]`",
          "testCode": "assert.deepEqual(\n  whatIsInAName([{ a: 1, b: 2, c: 3 }], { a: 1, b: 9999, c: 3 }),\n  []\n);"
        },
        {
          "text": "`whatIsInAName([{\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 9999}], {\"a\": 1, \"b\": 9999, \"c\": 3})` should return `[]`",
          "testCode": "assert.deepEqual(\n  whatIsInAName([{ a: 1, b: 2, c: 3, d: 9999 }], { a: 1, b: 9999, c: 3 }),\n  []\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16092,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\intermediate-algorithm-scripting\\wherefore-art-thou.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "intermediate-algorithm-scripting",
        "name": "Intermediate Algorithm Scripting"
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244e2",
      "title": "Caesars Cipher",
      "challengeType": 5,
      "dashedName": "caesars-cipher",
      "description": "One of the simplest and most widely known <dfn>ciphers</dfn> is a <dfn>Caesar cipher</dfn>, also known as a <dfn>shift cipher</dfn>. In a shift cipher the meanings of the letters are shifted by some set amount.\n\nA common modern use is the <a href=\"https://www.freecodecamp.org/news/how-to-code-the-caesar-cipher-an-introduction-to-basic-encryption-3bf77b4e19f7/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">ROT13</a> cipher, where the values of the letters are shifted by 13 places. Thus `A ↔ N`, `B ↔ O` and so on.\n\nWrite a function which takes a <a href=\"https://www.freecodecamp.org/news/how-to-code-the-caesar-cipher-an-introduction-to-basic-encryption-3bf77b4e19f7/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">ROT13</a> encoded string as input and returns a decoded string.\n\nAll letters will be uppercase. Do not transform any non-alphabetic character (i.e. spaces, punctuation), but do pass them on.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rot13(str) {\n  return str;\n}\n\nrot13(\"SERR PBQR PNZC\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var lookup = {\n  'A': 'N','B': 'O','C': 'P','D': 'Q',\n  'E': 'R','F': 'S','G': 'T','H': 'U',\n  'I': 'V','J': 'W','K': 'X','L': 'Y',\n  'M': 'Z','N': 'A','O': 'B','P': 'C',\n  'Q': 'D','R': 'E','S': 'F','T': 'G',\n  'U': 'H','V': 'I','W': 'J','X': 'K',\n  'Y': 'L','Z': 'M'\n};\n\nfunction rot13(encodedStr) {\n  var codeArr = encodedStr.split(\"\");  // String to Array\n  var decodedArr = []; // Your Result goes here\n  // Only change code below this line\n\n  decodedArr = codeArr.map(function(letter) {\n    if(lookup.hasOwnProperty(letter)) {\n      letter = lookup[letter];\n    }\n    return letter;\n  });\n\n  // Only change code above this line\n  return decodedArr.join(\"\"); // Array to String\n}"
        }
      ],
      "tests": [
        {
          "text": "`rot13(\"SERR PBQR PNZC\")` should decode to the string `FREE CODE CAMP`",
          "testCode": "assert(rot13('SERR PBQR PNZC') === 'FREE CODE CAMP');"
        },
        {
          "text": "`rot13(\"SERR CVMMN!\")` should decode to the string `FREE PIZZA!`",
          "testCode": "assert(rot13('SERR CVMMN!') === 'FREE PIZZA!');"
        },
        {
          "text": "`rot13(\"SERR YBIR?\")` should decode to the string `FREE LOVE?`",
          "testCode": "assert(rot13('SERR YBIR?') === 'FREE LOVE?');"
        },
        {
          "text": "`rot13(\"GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.\")` should decode to the string `THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.`",
          "testCode": "assert(\n  rot13('GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.') ===\n    'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16003,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\javascript-algorithms-and-data-structures-projects\\caesars-cipher.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "javascript-algorithms-and-data-structures-projects",
        "name": "Javascript Algorithms And Data Structures Projects"
      }
    },
    {
      "id": "aa2e6f85cab2ab736c9a9b24",
      "title": "Cash Register",
      "challengeType": 5,
      "dashedName": "cash-register",
      "description": "Design a cash register drawer function `checkCashRegister()` that accepts purchase price as the first argument (`price`), payment as the second argument (`cash`), and cash-in-drawer (`cid`) as the third argument.\n\n`cid` is a 2D array listing available currency.\n\nThe `checkCashRegister()` function should always return an object with a `status` key and a `change` key.\n\nReturn `{status: \"INSUFFICIENT_FUNDS\", change: []}` if cash-in-drawer is less than the change due, or if you cannot return the exact change.\n\nReturn `{status: \"CLOSED\", change: [...]}` with cash-in-drawer as the value for the key `change` if it is equal to the change due.\n\nOtherwise, return `{status: \"OPEN\", change: [...]}`, with the change due in coins and bills, sorted in highest to lowest order, as the value of the `change` key.\n\n<table><tbody><tr><th>Currency Unit</th><th>Amount</th></tr><tr><td>Penny</td><td>$0.01 (PENNY)</td></tr><tr><td>Nickel</td><td>$0.05 (NICKEL)</td></tr><tr><td>Dime</td><td>$0.1 (DIME)</td></tr><tr><td>Quarter</td><td>$0.25 (QUARTER)</td></tr><tr><td>Dollar</td><td>$1 (ONE)</td></tr><tr><td>Five Dollars</td><td>$5 (FIVE)</td></tr><tr><td>Ten Dollars</td><td>$10 (TEN)</td></tr><tr><td>Twenty Dollars</td><td>$20 (TWENTY)</td></tr><tr><td>One-hundred Dollars</td><td>$100 (ONE HUNDRED)</td></tr></tbody></table>\n\nSee below for an example of a cash-in-drawer array:\n\n```js\n[\n  [\"PENNY\", 1.01],\n  [\"NICKEL\", 2.05],\n  [\"DIME\", 3.1],\n  [\"QUARTER\", 4.25],\n  [\"ONE\", 90],\n  [\"FIVE\", 55],\n  [\"TEN\", 20],\n  [\"TWENTY\", 60],\n  [\"ONE HUNDRED\", 100]\n]\n```",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function checkCashRegister(price, cash, cid) {\n  let change;\n  return change;\n}\n\ncheckCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const denom = [\n  { name: \"ONE HUNDRED\", val: 100 },\n  { name: \"TWENTY\", val: 20 },\n  { name: \"TEN\", val: 10 },\n  { name: \"FIVE\", val: 5 },\n  { name: \"ONE\", val: 1 },\n  { name: \"QUARTER\", val: 0.25 },\n  { name: \"DIME\", val: 0.1 },\n  { name: \"NICKEL\", val: 0.05 },\n  { name: \"PENNY\", val: 0.01 },\n];\n\nfunction checkCashRegister(price, cash, cid) {\n  const output = { status: null, change: [] };\n  let change = cash - price;\n  const register = cid.reduce(\n    function (acc, curr) {\n      acc.total += curr[1];\n      acc[curr[0]] = curr[1];\n      return acc;\n    },\n    { total: 0 }\n  );\n  if (register.total === change) {\n    output.status = \"CLOSED\";\n    output.change = cid;\n    return output;\n  }\n  if (register.total < change) {\n    output.status = \"INSUFFICIENT_FUNDS\";\n    return output;\n  }\n  const change_arr = denom.reduce(function (acc, curr) {\n    let value = 0;\n    while (register[curr.name] > 0 && change >= curr.val) {\n      change -= curr.val;\n      register[curr.name] -= curr.val;\n      value += curr.val;\n      change = Math.round(change * 100) / 100;\n    }\n    if (value > 0) {\n      acc.push([curr.name, value]);\n    }\n    return acc;\n  }, []);\n  if (change_arr.length < 1 || change > 0) {\n    output.status = \"INSUFFICIENT_FUNDS\";\n    return output;\n  }\n  output.status = \"OPEN\";\n  output.change = change_arr;\n  return output;\n}"
        }
      ],
      "tests": [
        {
          "text": "`checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])` should return an object.",
          "testCode": "assert.deepEqual(\n  Object.prototype.toString.call(\n    checkCashRegister(19.5, 20, [\n      ['PENNY', 1.01],\n      ['NICKEL', 2.05],\n      ['DIME', 3.1],\n      ['QUARTER', 4.25],\n      ['ONE', 90],\n      ['FIVE', 55],\n      ['TEN', 20],\n      ['TWENTY', 60],\n      ['ONE HUNDRED', 100]\n    ])\n  ),\n  '[object Object]'\n);"
        },
        {
          "text": "`checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])` should return `{status: \"OPEN\", change: [[\"QUARTER\", 0.5]]}`.",
          "testCode": "assert.deepEqual(\n  checkCashRegister(19.5, 20, [\n    ['PENNY', 1.01],\n    ['NICKEL', 2.05],\n    ['DIME', 3.1],\n    ['QUARTER', 4.25],\n    ['ONE', 90],\n    ['FIVE', 55],\n    ['TEN', 20],\n    ['TWENTY', 60],\n    ['ONE HUNDRED', 100]\n  ]),\n  { status: 'OPEN', change: [['QUARTER', 0.5]] }\n);"
        },
        {
          "text": "`checkCashRegister(3.26, 100, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])` should return `{status: \"OPEN\", change: [[\"TWENTY\", 60], [\"TEN\", 20], [\"FIVE\", 15], [\"ONE\", 1], [\"QUARTER\", 0.5], [\"DIME\", 0.2], [\"PENNY\", 0.04]]}`.",
          "testCode": "assert.deepEqual(\n  checkCashRegister(3.26, 100, [\n    ['PENNY', 1.01],\n    ['NICKEL', 2.05],\n    ['DIME', 3.1],\n    ['QUARTER', 4.25],\n    ['ONE', 90],\n    ['FIVE', 55],\n    ['TEN', 20],\n    ['TWENTY', 60],\n    ['ONE HUNDRED', 100]\n  ]),\n  {\n    status: 'OPEN',\n    change: [\n      ['TWENTY', 60],\n      ['TEN', 20],\n      ['FIVE', 15],\n      ['ONE', 1],\n      ['QUARTER', 0.5],\n      ['DIME', 0.2],\n      ['PENNY', 0.04]\n    ]\n  }\n);"
        },
        {
          "text": "`checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])` should return `{status: \"INSUFFICIENT_FUNDS\", change: []}`.",
          "testCode": "assert.deepEqual(\n  checkCashRegister(19.5, 20, [\n    ['PENNY', 0.01],\n    ['NICKEL', 0],\n    ['DIME', 0],\n    ['QUARTER', 0],\n    ['ONE', 0],\n    ['FIVE', 0],\n    ['TEN', 0],\n    ['TWENTY', 0],\n    ['ONE HUNDRED', 0]\n  ]),\n  { status: 'INSUFFICIENT_FUNDS', change: [] }\n);"
        },
        {
          "text": "`checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])` should return `{status: \"INSUFFICIENT_FUNDS\", change: []}`.",
          "testCode": "assert.deepEqual(\n  checkCashRegister(19.5, 20, [\n    ['PENNY', 0.01],\n    ['NICKEL', 0],\n    ['DIME', 0],\n    ['QUARTER', 0],\n    ['ONE', 1],\n    ['FIVE', 0],\n    ['TEN', 0],\n    ['TWENTY', 0],\n    ['ONE HUNDRED', 0]\n  ]),\n  { status: 'INSUFFICIENT_FUNDS', change: [] }\n);"
        },
        {
          "text": "`checkCashRegister(19.5, 20, [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])` should return `{status: \"CLOSED\", change: [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]}`.",
          "testCode": "assert.deepEqual(\n  checkCashRegister(19.5, 20, [\n    ['PENNY', 0.5],\n    ['NICKEL', 0],\n    ['DIME', 0],\n    ['QUARTER', 0],\n    ['ONE', 0],\n    ['FIVE', 0],\n    ['TEN', 0],\n    ['TWENTY', 0],\n    ['ONE HUNDRED', 0]\n  ]),\n  {\n    status: 'CLOSED',\n    change: [\n      ['PENNY', 0.5],\n      ['NICKEL', 0],\n      ['DIME', 0],\n      ['QUARTER', 0],\n      ['ONE', 0],\n      ['FIVE', 0],\n      ['TEN', 0],\n      ['TWENTY', 0],\n      ['ONE HUNDRED', 0]\n    ]\n  }\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16012,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\javascript-algorithms-and-data-structures-projects\\cash-register.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "javascript-algorithms-and-data-structures-projects",
        "name": "Javascript Algorithms And Data Structures Projects"
      }
    },
    {
      "id": "aaa48de84e1ecc7c742e1124",
      "title": "Palindrome Checker",
      "challengeType": 5,
      "dashedName": "palindrome-checker",
      "description": "Return `true` if the given string is a palindrome. Otherwise, return `false`.\n\nA <dfn>palindrome</dfn> is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.\n\n**Note:** You'll need to remove **all non-alphanumeric characters** (punctuation, spaces and symbols) and turn everything into the same case (lower or upper case) in order to check for palindromes.\n\nWe'll pass strings with varying formats, such as `racecar`, `RaceCar`, and `race CAR` among others.\n\nWe'll also pass strings with special symbols, such as `2A3*3a2`, `2A3 3a2`, and `2_A3*3#A2`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function palindrome(str) {\n  return true;\n}\n\npalindrome(\"eye\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function palindrome(str) {\n  var string = str.toLowerCase().split(/[^A-Za-z0-9]/gi).join('');\n  var aux = string.split('');\n  if (aux.join('') === aux.reverse().join('')){\n    return true;\n  }\n\n  return false;\n}"
        }
      ],
      "tests": [
        {
          "text": "`palindrome(\"eye\")` should return a boolean.",
          "testCode": "assert(typeof palindrome('eye') === 'boolean');"
        },
        {
          "text": "`palindrome(\"eye\")` should return `true`.",
          "testCode": "assert(palindrome('eye') === true);"
        },
        {
          "text": "`palindrome(\"_eye\")` should return `true`.",
          "testCode": "assert(palindrome('_eye') === true);"
        },
        {
          "text": "`palindrome(\"race car\")` should return `true`.",
          "testCode": "assert(palindrome('race car') === true);"
        },
        {
          "text": "`palindrome(\"not a palindrome\")` should return `false`.",
          "testCode": "assert(palindrome('not a palindrome') === false);"
        },
        {
          "text": "`palindrome(\"A man, a plan, a canal. Panama\")` should return `true`.",
          "testCode": "assert(palindrome('A man, a plan, a canal. Panama') === true);"
        },
        {
          "text": "`palindrome(\"never odd or even\")` should return `true`.",
          "testCode": "assert(palindrome('never odd or even') === true);"
        },
        {
          "text": "`palindrome(\"nope\")` should return `false`.",
          "testCode": "assert(palindrome('nope') === false);"
        },
        {
          "text": "`palindrome(\"almostomla\")` should return `false`.",
          "testCode": "assert(palindrome('almostomla') === false);"
        },
        {
          "text": "`palindrome(\"My age is 0, 0 si ega ym.\")` should return `true`.",
          "testCode": "assert(palindrome('My age is 0, 0 si ega ym.') === true);"
        },
        {
          "text": "`palindrome(\"1 eye for of 1 eye.\")` should return `false`.",
          "testCode": "assert(palindrome('1 eye for of 1 eye.') === false);"
        },
        {
          "text": "`palindrome(\"0_0 (: /-\\ :) 0-0\")` should return `true`.",
          "testCode": "assert(palindrome('0_0 (: /- :) 0-0') === true);"
        },
        {
          "text": "`palindrome(\"five|\\_/|four\")` should return `false`.",
          "testCode": "assert(palindrome('five|_/|four') === false);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16004,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\javascript-algorithms-and-data-structures-projects\\palindrome-checker.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "javascript-algorithms-and-data-structures-projects",
        "name": "Javascript Algorithms And Data Structures Projects"
      }
    },
    {
      "id": "a7f4d8f2483413a6ce226cac",
      "title": "Roman Numeral Converter",
      "challengeType": 5,
      "dashedName": "roman-numeral-converter",
      "description": "Convert the given number into a roman numeral.\n\n| Roman numerals | Arabic numerals |\n|----------------|-----------------|\n| M              | 1000            |\n| CM             | 900             |\n| D              | 500             |\n| CD             | 400             |\n| C              | 100             |\n| XC             | 90              |\n| L              | 50              |\n| XL             | 40              |\n| X              | 10              |\n| IX             | 9               |\n| V              | 5               |\n| IV             | 4               |\n| I              | 1               |\n\nAll roman numerals answers should be provided in upper-case.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function convertToRoman(num) {\n return num;\n}\n\nconvertToRoman(36);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function convertToRoman(num) {\n  var ref = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];\n  var res = [];\n  ref.forEach(function(p) {\n    while (num >= p[1]) {\n      res.push(p[0]);\n      num -= p[1];\n    }\n  });\n  return res.join('');\n}"
        }
      ],
      "tests": [
        {
          "text": "`convertToRoman(2)` should return the string `II`.",
          "testCode": "assert.deepEqual(convertToRoman(2), 'II');"
        },
        {
          "text": "`convertToRoman(3)` should return the string `III`.",
          "testCode": "assert.deepEqual(convertToRoman(3), 'III');"
        },
        {
          "text": "`convertToRoman(4)` should return the string `IV`.",
          "testCode": "assert.deepEqual(convertToRoman(4), 'IV');"
        },
        {
          "text": "`convertToRoman(5)` should return the string `V`.",
          "testCode": "assert.deepEqual(convertToRoman(5), 'V');"
        },
        {
          "text": "`convertToRoman(9)` should return the string `IX`.",
          "testCode": "assert.deepEqual(convertToRoman(9), 'IX');"
        },
        {
          "text": "`convertToRoman(12)` should return the string `XII`.",
          "testCode": "assert.deepEqual(convertToRoman(12), 'XII');"
        },
        {
          "text": "`convertToRoman(16)` should return the string `XVI`.",
          "testCode": "assert.deepEqual(convertToRoman(16), 'XVI');"
        },
        {
          "text": "`convertToRoman(29)` should return the string `XXIX`.",
          "testCode": "assert.deepEqual(convertToRoman(29), 'XXIX');"
        },
        {
          "text": "`convertToRoman(44)` should return the string `XLIV`.",
          "testCode": "assert.deepEqual(convertToRoman(44), 'XLIV');"
        },
        {
          "text": "`convertToRoman(45)` should return the string `XLV`.",
          "testCode": "assert.deepEqual(convertToRoman(45), 'XLV');"
        },
        {
          "text": "`convertToRoman(68)` should return the string `LXVIII`",
          "testCode": "assert.deepEqual(convertToRoman(68), 'LXVIII');"
        },
        {
          "text": "`convertToRoman(83)` should return the string `LXXXIII`",
          "testCode": "assert.deepEqual(convertToRoman(83), 'LXXXIII');"
        },
        {
          "text": "`convertToRoman(97)` should return the string `XCVII`",
          "testCode": "assert.deepEqual(convertToRoman(97), 'XCVII');"
        },
        {
          "text": "`convertToRoman(99)` should return the string `XCIX`",
          "testCode": "assert.deepEqual(convertToRoman(99), 'XCIX');"
        },
        {
          "text": "`convertToRoman(400)` should return the string `CD`",
          "testCode": "assert.deepEqual(convertToRoman(400), 'CD');"
        },
        {
          "text": "`convertToRoman(500)` should return the string `D`",
          "testCode": "assert.deepEqual(convertToRoman(500), 'D');"
        },
        {
          "text": "`convertToRoman(501)` should return the string `DI`",
          "testCode": "assert.deepEqual(convertToRoman(501), 'DI');"
        },
        {
          "text": "`convertToRoman(649)` should return the string `DCXLIX`",
          "testCode": "assert.deepEqual(convertToRoman(649), 'DCXLIX');"
        },
        {
          "text": "`convertToRoman(798)` should return the string `DCCXCVIII`",
          "testCode": "assert.deepEqual(convertToRoman(798), 'DCCXCVIII');"
        },
        {
          "text": "`convertToRoman(891)` should return the string `DCCCXCI`",
          "testCode": "assert.deepEqual(convertToRoman(891), 'DCCCXCI');"
        },
        {
          "text": "`convertToRoman(1000)` should return the string `M`",
          "testCode": "assert.deepEqual(convertToRoman(1000), 'M');"
        },
        {
          "text": "`convertToRoman(1004)` should return the string `MIV`",
          "testCode": "assert.deepEqual(convertToRoman(1004), 'MIV');"
        },
        {
          "text": "`convertToRoman(1006)` should return the string `MVI`",
          "testCode": "assert.deepEqual(convertToRoman(1006), 'MVI');"
        },
        {
          "text": "`convertToRoman(1023)` should return the string `MXXIII`",
          "testCode": "assert.deepEqual(convertToRoman(1023), 'MXXIII');"
        },
        {
          "text": "`convertToRoman(2014)` should return the string `MMXIV`",
          "testCode": "assert.deepEqual(convertToRoman(2014), 'MMXIV');"
        },
        {
          "text": "`convertToRoman(3999)` should return the string `MMMCMXCIX`",
          "testCode": "assert.deepEqual(convertToRoman(3999), 'MMMCMXCIX');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16044,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\javascript-algorithms-and-data-structures-projects\\roman-numeral-converter.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "javascript-algorithms-and-data-structures-projects",
        "name": "Javascript Algorithms And Data Structures Projects"
      }
    },
    {
      "id": "aff0395860f5d3034dc0bfc9",
      "title": "Telephone Number Validator",
      "challengeType": 5,
      "dashedName": "telephone-number-validator",
      "description": "Return `true` if the passed string looks like a valid US phone number.\n\nThe user may fill out the form field any way they choose as long as it has the format of a valid US number. The following are examples of valid formats for US numbers (refer to the tests below for other variants):\n\n<blockquote>555-555-5555<br>(555)555-5555<br>(555) 555-5555<br>555 555 5555<br>5555555555<br>1 555 555 5555</blockquote>\n\nFor this challenge you will be presented with a string such as `800-692-7753` or `8oo-six427676;laskdjf`. Your job is to validate or reject the US phone number based on any combination of the formats provided above. The area code is required. If the country code is provided, you must confirm that the country code is `1`. Return `true` if the string is a valid US phone number; otherwise return `false`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function telephoneCheck(str) {\n  return true;\n}\n\ntelephoneCheck(\"555-555-5555\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "var re = /^([+]?1[\\s]?)?((?:[(](?:[2-9]1[02-9]|[2-9][02-8][0-9])[)][\\s]?)|(?:(?:[2-9]1[02-9]|[2-9][02-8][0-9])[\\s.-]?)){1}([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2}[\\s.-]?){1}([0-9]{4}){1}$/;\n\nfunction telephoneCheck(str) {\n  return re.test(str);\n}\n\ntelephoneCheck(\"555-555-5555\");"
        }
      ],
      "tests": [
        {
          "text": "`telephoneCheck(\"555-555-5555\")` should return a boolean.",
          "testCode": "assert(typeof telephoneCheck('555-555-5555') === 'boolean');"
        },
        {
          "text": "`telephoneCheck(\"1 555-555-5555\")` should return `true`.",
          "testCode": "assert(telephoneCheck('1 555-555-5555') === true);"
        },
        {
          "text": "`telephoneCheck(\"1 (555) 555-5555\")` should return `true`.",
          "testCode": "assert(telephoneCheck('1 (555) 555-5555') === true);"
        },
        {
          "text": "`telephoneCheck(\"5555555555\")` should return `true`.",
          "testCode": "assert(telephoneCheck('5555555555') === true);"
        },
        {
          "text": "`telephoneCheck(\"555-555-5555\")` should return `true`.",
          "testCode": "assert(telephoneCheck('555-555-5555') === true);"
        },
        {
          "text": "`telephoneCheck(\"(555)555-5555\")` should return `true`.",
          "testCode": "assert(telephoneCheck('(555)555-5555') === true);"
        },
        {
          "text": "`telephoneCheck(\"1(555)555-5555\")` should return `true`.",
          "testCode": "assert(telephoneCheck('1(555)555-5555') === true);"
        },
        {
          "text": "`telephoneCheck(\"555-5555\")` should return `false`.",
          "testCode": "assert(telephoneCheck('555-5555') === false);"
        },
        {
          "text": "`telephoneCheck(\"5555555\")` should return `false`.",
          "testCode": "assert(telephoneCheck('5555555') === false);"
        },
        {
          "text": "`telephoneCheck(\"1 555)555-5555\")` should return `false`.",
          "testCode": "assert(telephoneCheck('1 555)555-5555') === false);"
        },
        {
          "text": "`telephoneCheck(\"1 555 555 5555\")` should return `true`.",
          "testCode": "assert(telephoneCheck('1 555 555 5555') === true);"
        },
        {
          "text": "`telephoneCheck(\"1 456 789 4444\")` should return `true`.",
          "testCode": "assert(telephoneCheck('1 456 789 4444') === true);"
        },
        {
          "text": "`telephoneCheck(\"123**&!!asdf#\")` should return `false`.",
          "testCode": "assert(telephoneCheck('123**&!!asdf#') === false);"
        },
        {
          "text": "`telephoneCheck(\"55555555\")` should return `false`.",
          "testCode": "assert(telephoneCheck('55555555') === false);"
        },
        {
          "text": "`telephoneCheck(\"(6054756961)\")` should return `false`.",
          "testCode": "assert(telephoneCheck('(6054756961)') === false);"
        },
        {
          "text": "`telephoneCheck(\"2 (757) 622-7382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('2 (757) 622-7382') === false);"
        },
        {
          "text": "`telephoneCheck(\"0 (757) 622-7382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('0 (757) 622-7382') === false);"
        },
        {
          "text": "`telephoneCheck(\"-1 (757) 622-7382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('-1 (757) 622-7382') === false);"
        },
        {
          "text": "`telephoneCheck(\"2 757 622-7382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('2 757 622-7382') === false);"
        },
        {
          "text": "`telephoneCheck(\"10 (757) 622-7382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('10 (757) 622-7382') === false);"
        },
        {
          "text": "`telephoneCheck(\"27576227382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('27576227382') === false);"
        },
        {
          "text": "`telephoneCheck(\"(275)76227382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('(275)76227382') === false);"
        },
        {
          "text": "`telephoneCheck(\"2(757)6227382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('2(757)6227382') === false);"
        },
        {
          "text": "`telephoneCheck(\"2(757)622-7382\")` should return `false`.",
          "testCode": "assert(telephoneCheck('2(757)622-7382') === false);"
        },
        {
          "text": "`telephoneCheck(\"555)-555-5555\")` should return `false`.",
          "testCode": "assert(telephoneCheck('555)-555-5555') === false);"
        },
        {
          "text": "`telephoneCheck(\"(555-555-5555\")` should return `false`.",
          "testCode": "assert(telephoneCheck('(555-555-5555') === false);"
        },
        {
          "text": "`telephoneCheck(\"(555)5(55?)-5555\")` should return `false`.",
          "testCode": "assert(telephoneCheck('(555)5(55?)-5555') === false);"
        },
        {
          "text": "`telephoneCheck(\"55 55-55-555-5\")` should return `false`.",
          "testCode": "assert(telephoneCheck('55 55-55-555-5') === false);"
        },
        {
          "text": "`telephoneCheck(\"11 555-555-5555\")` should return `false`.",
          "testCode": "assert(telephoneCheck('11 555-555-5555') === false);"
        },
        {
          "text": "`telephoneCheck()`, when called with any valid number, should return `true`.\n\n```js\n\nconst validPatterns = [\n  '1 XXX-XXX-XXXX',\n  '1 (XXX) XXX-XXXX',\n  '1(XXX)XXX-XXXX',\n  '1 XXX XXX XXXX',\n  'XXXXXXXXXX',\n  'XXX-XXX-XXXX',\n  '(XXX)XXX-XXXX',\n];\n\nvalidPatterns.forEach(pattern => {\n  while (pattern.includes('X')) {\n    pattern = pattern.replace('X',  Math.floor(Math.random() * 7) + 2); //While this may seem weird at first, it's required for the CI build to pass\n    //This is apparently because the solution provided for CI purposes actually checks for valid area and exchange codes.\n  }\n  assert.isTrue(telephoneCheck(pattern));\n});\n```\n\n`telephoneCheck()`, when called with an invalid number, should return `false`.\n\n```js\n\nconst invalidPatterns = [\n  '10 XXX-XXX-XXXX',\n  '1 (XX)XXX-XXXX',\n  '1!(XXX)XXX-XXXX',\n  '-1 XXX XXX XXXX',\n  'XXXXXXXX',\n  'XXX#XXX-XXXX',\n  '(XXXXXX-XXXX',\n];\n\ninvalidPatterns.forEach(pattern => {\n  while (pattern.includes('X')) {\n    pattern = pattern.replace('X',  Math.floor(Math.random() * 10));\n  }\n  assert.isFalse(telephoneCheck(pattern));\n});\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16090,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\javascript-algorithms-and-data-structures-projects\\telephone-number-validator.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "javascript-algorithms-and-data-structures-projects",
        "name": "Javascript Algorithms And Data Structures Projects"
      }
    },
    {
      "id": "587d7db1367417b2b2512b87",
      "title": "Add Methods After Inheritance",
      "challengeType": 1,
      "dashedName": "add-methods-after-inheritance",
      "description": "A constructor function that inherits its `prototype` object from a supertype constructor function can still have its own methods in addition to inherited methods.\n\nFor example, `Bird` is a constructor that inherits its `prototype` from `Animal`:\n\n```js\nfunction Animal() { }\nAnimal.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n};\nfunction Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nBird.prototype.constructor = Bird;\n```\n\nIn addition to what is inherited from `Animal`, you want to add behavior that is unique to `Bird` objects. Here, `Bird` will get a `fly()` function. Functions are added to `Bird's` `prototype` the same way as any constructor function:\n\n```js\nBird.prototype.fly = function() {\n  console.log(\"I'm flying!\");\n};\n```\n\nNow instances of `Bird` will have both `eat()` and `fly()` methods:\n\n```js\nlet duck = new Bird();\nduck.eat();\nduck.fly();\n```\n\n`duck.eat()` would display the string `nom nom nom` in the console, and `duck.fly()` would display the string `I'm flying!`.",
      "instructions": "Add all necessary code so the `Dog` object inherits from `Animal` and the `Dog`'s `prototype` constructor is set to `Dog`. Then add a `bark()` method to the `Dog` object so that `beagle` can both `eat()` and `bark()`. The `bark()` method should print `Woof!` to the console.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\n\n// Only change code below this line\n\n\n\n\n// Only change code above this line\n\nlet beagle = new Dog();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nDog.prototype.bark = function () {\n  console.log('Woof!');\n};\nlet beagle = new Dog();\n\nbeagle.eat();\nbeagle.bark();"
        }
      ],
      "tests": [
        {
          "text": "`Animal` should not respond to the `bark()` method.",
          "testCode": "assert(typeof Animal.prototype.bark == 'undefined');"
        },
        {
          "text": "`Dog` should inherit the `eat()` method from `Animal`.",
          "testCode": "assert(typeof Dog.prototype.eat == 'function');"
        },
        {
          "text": "The `Dog` prototype should have a `bark()` method.",
          "testCode": "assert('bark' in Dog.prototype);"
        },
        {
          "text": "`beagle` should be an `instanceof` `Animal`.",
          "testCode": "assert(beagle instanceof Animal);"
        },
        {
          "text": "The constructor for `beagle` should be set to `Dog`.",
          "testCode": "assert(beagle.constructor === Dog);"
        },
        {
          "text": "`beagle.eat()` should log the string `nom nom nom`",
          "testCode": "capture();\nbeagle.eat();\nuncapture();\nassert(logOutput == 'nom nom nom');"
        },
        {
          "text": "`beagle.bark()` should log the string `Woof!`",
          "testCode": "capture();\nbeagle.bark();\nuncapture();\nassert(logOutput == 'Woof!');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301315,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\add-methods-after-inheritance.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput = message;\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();"
          }
        ],
        "afterUserCode": [
          {
            "language": "js",
            "code": "uncapture();\n(function() { return logOutput || \"console.log never called\"; })();"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7daf367417b2b2512b7f",
      "title": "Change the Prototype to a New Object",
      "challengeType": 1,
      "dashedName": "change-the-prototype-to-a-new-object",
      "description": "Up until now you have been adding properties to the `prototype` individually:\n\n```js\nBird.prototype.numLegs = 2;\n```\n\nThis becomes tedious after more than a few properties.\n\n```js\nBird.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n}\n\nBird.prototype.describe = function() {\n  console.log(\"My name is \" + this.name);\n}\n```\n\nA more efficient way is to set the `prototype` to a new object that already contains the properties. This way, the properties are added all at once:\n\n```js\nBird.prototype = {\n  numLegs: 2, \n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n```",
      "instructions": "Add the property `numLegs` and the two methods `eat()` and `describe()` to the `prototype` of `Dog` by setting the `prototype` to a new object.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype = {\n  // Only change code below this line\n\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\nDog.prototype = {\nnumLegs: 4,\n  eat () {\n    console.log('nom nom nom');\n  },\n  describe () {\n    console.log('My name is ' + this.name);\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`Dog.prototype` should be set to a new object.",
          "testCode": "assert(/Dog\\.prototype\\s*?=\\s*?{/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "`Dog.prototype` should have the property `numLegs`.",
          "testCode": "assert(Dog.prototype.numLegs !== undefined);"
        },
        {
          "text": "`Dog.prototype` should have the method `eat()`.",
          "testCode": "assert(typeof Dog.prototype.eat === 'function');"
        },
        {
          "text": "`Dog.prototype` should have the method `describe()`.",
          "testCode": "assert(typeof Dog.prototype.describe === 'function');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301316,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\change-the-prototype-to-a-new-object.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dac367417b2b2512b73",
      "title": "Create a Basic JavaScript Object",
      "challengeType": 1,
      "dashedName": "create-a-basic-javascript-object",
      "description": "Think about things people see every day, like cars, shops, and birds. These are all <dfn>objects</dfn>: tangible things people can observe and interact with.\n\nWhat are some qualities of these objects? A car has wheels. Shops sell items. Birds have wings.\n\nThese qualities, or <dfn>properties</dfn>, define what makes up an object. Note that similar objects share the same properties, but may have different values for those properties. For example, all cars have wheels, but not all cars have the same number of wheels.\n\nObjects in JavaScript are used to model real-world objects, giving them properties and behavior just like their real-world counterparts. Here's an example using these concepts to create a `duck` object:\n\n```js\nlet duck = {\n  name: \"Aflac\",\n  numLegs: 2\n};\n```\n\nThis `duck` object has two property/value pairs: a `name` of `Aflac` and a `numLegs` of 2.",
      "instructions": "Create a `dog` object with `name` and `numLegs` properties, and set them to a string and a number, respectively.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let dog = {\n\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let dog = {\n  name: '',\n  numLegs: 4\n};"
        }
      ],
      "tests": [
        {
          "text": "`dog` should be an object.",
          "testCode": "assert(typeof dog === 'object');"
        },
        {
          "text": "`dog` should have a `name` property set to a string.",
          "testCode": "assert(typeof dog.name === 'string');"
        },
        {
          "text": "`dog` should have a `numLegs` property set to a number.",
          "testCode": "assert(typeof dog.numLegs === 'number');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301317,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\create-a-basic-javascript-object.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dad367417b2b2512b75",
      "title": "Create a Method on an Object",
      "challengeType": 1,
      "dashedName": "create-a-method-on-an-object",
      "description": "Objects can have a special type of property, called a <dfn>method</dfn>.\n\nMethods are properties that are functions. This adds different behavior to an object. Here is the `duck` example with a method:\n\n```js\nlet duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n};\nduck.sayName();\n```\n\nThe example adds the `sayName` method, which is a function that returns a sentence giving the name of the `duck`. Notice that the method accessed the `name` property in the return statement using `duck.name`. The next challenge will cover another way to do this.",
      "instructions": "Using the `dog` object, give it a method called `sayLegs`. The method should return the sentence `This dog has 4 legs.`",
      "boilerplate": [
        {
          "language": "js",
          "code": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n\n};\n\ndog.sayLegs();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();"
        }
      ],
      "tests": [
        {
          "text": "`dog.sayLegs()` should be a function.",
          "testCode": "assert(typeof dog.sayLegs === 'function');"
        },
        {
          "text": "`dog.sayLegs()` should return the given string - note that punctuation and spacing matter.",
          "testCode": "assert(dog.sayLegs() === 'This dog has 4 legs.');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301318,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\create-a-method-on-an-object.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dad367417b2b2512b77",
      "title": "Define a Constructor Function",
      "challengeType": 1,
      "dashedName": "define-a-constructor-function",
      "description": "<dfn>Constructors</dfn> are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.\n\nHere is an example of a constructor:\n\n```js\nfunction Bird() {\n  this.name = \"Albert\";\n  this.color = \"blue\";\n  this.numLegs = 2;\n}\n```\n\nThis constructor defines a `Bird` object with properties `name`, `color`, and `numLegs` set to Albert, blue, and 2, respectively. Constructors follow a few conventions:\n\n<ul><li>Constructors are defined with a capitalized name to distinguish them from other functions that are not <code>constructors</code>.</li><li>Constructors use the keyword <code>this</code> to set properties of the object they will create. Inside the constructor, <code>this</code> refers to the new object it will create.</li><li>Constructors define properties and behaviors instead of returning a value as other functions might.</li></ul>",
      "instructions": "Create a constructor, `Dog`, with properties `name`, `color`, and `numLegs` that are set to a string, a string, and a number, respectively.",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog (name, color, numLegs) {\n  this.name = 'name';\n  this.color = 'color';\n  this.numLegs = 4;\n}"
        }
      ],
      "tests": [
        {
          "text": "`Dog` should have a `name` property set to a string.",
          "testCode": "assert(typeof new Dog().name === 'string');"
        },
        {
          "text": "`Dog` should have a `color` property set to a string.",
          "testCode": "assert(typeof new Dog().color === 'string');"
        },
        {
          "text": "`Dog` should have a `numLegs` property set to a number.",
          "testCode": "assert(typeof new Dog().numLegs === 'number');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16804,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\define-a-constructor-function.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dae367417b2b2512b79",
      "title": "Extend Constructors to Receive Arguments",
      "challengeType": 1,
      "dashedName": "extend-constructors-to-receive-arguments",
      "description": "The `Bird` and `Dog` constructors from the last challenge worked well. However, notice that all `Birds` that are created with the `Bird` constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It's possible to change the properties of each bird manually but that would be a lot of work:\n\n```js\nlet swan = new Bird();\nswan.name = \"Carlos\";\nswan.color = \"white\";\n```\n\nSuppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one. To more easily create different `Bird` objects, you can design your Bird constructor to accept parameters:\n\n```js\nfunction Bird(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n```\n\nThen pass in the values as arguments to define each unique bird into the `Bird` constructor: `let cardinal = new Bird(\"Bruce\", \"red\");` This gives a new instance of `Bird` with `name` and `color` properties set to `Bruce` and `red`, respectively. The `numLegs` property is still set to 2. The `cardinal` has these properties:\n\n```js\ncardinal.name\ncardinal.color\ncardinal.numLegs\n```\n\nThe constructor is more flexible. It's now possible to define the properties for each `Bird` at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.",
      "instructions": "Create another `Dog` constructor. This time, set it up to take the parameters `name` and `color`, and have the property `numLegs` fixed at 4. Then create a new `Dog` saved in a variable `terrier`. Pass it two strings as arguments for the `name` and `color` properties.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog() {\n\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog (name, color) {\n  this.numLegs = 4;\n  this.name = name;\n  this.color = color;\n}\n\nconst terrier = new Dog();"
        }
      ],
      "tests": [
        {
          "text": "`Dog` should receive an argument for `name`.",
          "testCode": "assert(new Dog('Clifford').name === 'Clifford');"
        },
        {
          "text": "`Dog` should receive an argument for `color`.",
          "testCode": "assert(new Dog('Clifford', 'yellow').color === 'yellow');"
        },
        {
          "text": "`Dog` should have property `numLegs` set to 4.",
          "testCode": "assert(new Dog('Clifford').numLegs === 4);"
        },
        {
          "text": "`terrier` should be created using the `Dog` constructor.",
          "testCode": "assert(terrier instanceof Dog);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18235,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\extend-constructors-to-receive-arguments.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db0367417b2b2512b84",
      "title": "Inherit Behaviors from a Supertype",
      "challengeType": 1,
      "dashedName": "inherit-behaviors-from-a-supertype",
      "description": "In the previous challenge, you created a `supertype` called `Animal` that defined behaviors shared by all animals:\n\n```js\nfunction Animal() { }\nAnimal.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n};\n```\n\nThis and the next challenge will cover how to reuse the methods of `Animal` inside `Bird` and `Dog` without defining them again. It uses a technique called inheritance. This challenge covers the first step: make an instance of the `supertype` (or parent). You already know one way to create an instance of `Animal` using the `new` operator:\n\n```js\nlet animal = new Animal();\n```\n\nThere are some disadvantages when using this syntax for inheritance, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:\n\n```js\nlet animal = Object.create(Animal.prototype);\n```\n\n`Object.create(obj)` creates a new object, and sets `obj` as the new object's `prototype`. Recall that the `prototype` is like the \"recipe\" for creating an object. By setting the `prototype` of `animal` to be the `prototype` of `Animal`, you are effectively giving the `animal` instance the same \"recipe\" as any other instance of `Animal`.\n\n```js\nanimal.eat();\nanimal instanceof Animal;\n```\n\nThe `instanceof` method here would return `true`.",
      "instructions": "Use `Object.create` to make two instances of `Animal` named `duck` and `beagle`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\n// Only change code below this line\n\nlet duck; // Change this line\nlet beagle; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\nlet duck = Object.create(Animal.prototype);\nlet beagle = Object.create(Animal.prototype);\n\nduck.eat();\nbeagle.eat();"
        }
      ],
      "tests": [
        {
          "text": "The `duck` variable should be defined.",
          "testCode": "assert(typeof duck !== 'undefined');"
        },
        {
          "text": "The `beagle` variable should be defined.",
          "testCode": "assert(typeof beagle !== 'undefined');"
        },
        {
          "text": "The `duck` variable should be initialised with `Object.create`.",
          "testCode": "assert(\n  /(let|const|var)\\s{1,}duck\\s*=\\s*Object\\.create\\s*\\(\\s*Animal\\.prototype\\s*\\)\\s*/.test(\n    __helpers.removeJSComments(code)\n  )\n);"
        },
        {
          "text": "The `beagle` variable should be initialised with `Object.create`.",
          "testCode": "assert(\n  /(let|const|var)\\s{1,}beagle\\s*=\\s*Object\\.create\\s*\\(\\s*Animal\\.prototype\\s*\\)\\s*/.test(\n    __helpers.removeJSComments(code)\n  )\n);"
        },
        {
          "text": "`duck` should have a `prototype` of `Animal`.",
          "testCode": "assert(duck instanceof Animal);"
        },
        {
          "text": "`beagle` should have a `prototype` of `Animal`.",
          "testCode": "assert(beagle instanceof Animal);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301319,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\inherit-behaviors-from-a-supertype.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7daf367417b2b2512b7d",
      "title": "Iterate Over All Properties",
      "challengeType": 1,
      "dashedName": "iterate-over-all-properties",
      "description": "You have now seen two kinds of properties: <dfn>own properties</dfn> and `prototype` properties. Own properties are defined directly on the object instance itself. And prototype properties are defined on the `prototype`.\n\n```js\nfunction Bird(name) {\n  this.name = name;  //own property\n}\n\nBird.prototype.numLegs = 2; // prototype property\n\nlet duck = new Bird(\"Donald\");\n```\n\nHere is how you add `duck`'s own properties to the array `ownProps` and `prototype` properties to the array `prototypeProps`:\n\n```js\nlet ownProps = [];\nlet prototypeProps = [];\n\nfor (let property in duck) {\n  if(duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  } else {\n    prototypeProps.push(property);\n  }\n}\n\nconsole.log(ownProps);\nconsole.log(prototypeProps);\n```\n\n`console.log(ownProps)` would display `[\"name\"]` in the console, and `console.log(prototypeProps)` would display `[\"numLegs\"]`.",
      "instructions": "Add all of the own properties of `beagle` to the array `ownProps`. Add all of the `prototype` properties of `Dog` to the array `prototypeProps`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\nfor (let prop in beagle) {\n  if (beagle.hasOwnProperty(prop)) {\n    ownProps.push(prop);\n  } else {\n    prototypeProps.push(prop);\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "The `ownProps` array should only contain `name`.",
          "testCode": "assert.deepEqual(ownProps, ['name']);"
        },
        {
          "text": "The `prototypeProps` array should only contain `numLegs`.",
          "testCode": "assert.deepEqual(prototypeProps, ['numLegs']);"
        },
        {
          "text": "You should solve this challenge without using the built in method `Object.keys()`.",
          "testCode": "assert(!/\\Object.keys/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301320,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\iterate-over-all-properties.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dad367417b2b2512b76",
      "title": "Make Code More Reusable with the this Keyword",
      "challengeType": 1,
      "dashedName": "make-code-more-reusable-with-the-this-keyword",
      "description": "The last challenge introduced a method to the `duck` object. It used `duck.name` dot notation to access the value for the `name` property within the return statement:\n\n```js\nsayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n```\n\nWhile this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.\n\nA way to avoid these issues is with the `this` keyword:\n\n```js\nlet duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + this.name + \".\";}\n};\n```\n\n`this` is a deep topic, and the above example is only one way to use it. In the current context, `this` refers to the object that the method is associated with: `duck`. If the object's name is changed to `mallard`, it is not necessary to find all the references to `duck` in the code. It makes the code reusable and easier to read.",
      "instructions": "Modify the `dog.sayLegs` method to remove any references to `dog`. Use the `duck` example for guidance.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}\n};\n\ndog.sayLegs();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();"
        }
      ],
      "tests": [
        {
          "text": "`dog.sayLegs()` should return the given string.",
          "testCode": "assert(dog.sayLegs() === 'This dog has 4 legs.');"
        },
        {
          "text": "Your code should use the `this` keyword to access the `numLegs` property of `dog`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/this\\.numLegs/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301321,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\make-code-more-reusable-with-the-this-keyword.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db1367417b2b2512b88",
      "title": "Override Inherited Methods",
      "challengeType": 1,
      "dashedName": "override-inherited-methods",
      "description": "In previous lessons, you learned that an object can inherit its behavior (methods) from another object by referencing its `prototype` object:\n\n```js\nChildObject.prototype = Object.create(ParentObject.prototype);\n```\n\nThen the `ChildObject` received its own methods by chaining them onto its `prototype`:\n\n```js\nChildObject.prototype.methodName = function() {...};\n```\n\nIt's possible to override an inherited method. It's done the same way - by adding a method to `ChildObject.prototype` using the same method name as the one to override. Here's an example of `Bird` overriding the `eat()` method inherited from `Animal`:\n\n```js\nfunction Animal() { }\nAnimal.prototype.eat = function() {\n  return \"nom nom nom\";\n};\nfunction Bird() { }\n\nBird.prototype = Object.create(Animal.prototype);\n\nBird.prototype.eat = function() {\n  return \"peck peck peck\";\n};\n```\n\nIf you have an instance `let duck = new Bird();` and you call `duck.eat()`, this is how JavaScript looks for the method on the `prototype` chain of `duck`:\n\n1.  `duck` => Is `eat()` defined here? No.\n2.  `Bird` => Is `eat()` defined here? => Yes. Execute it and stop searching.\n3.  `Animal` => `eat()` is also defined, but JavaScript stopped searching before reaching this level.\n4.  Object => JavaScript stopped searching before reaching this level.",
      "instructions": "Override the `fly()` method for `Penguin` so that it returns the string `Alas, this is a flightless bird.`",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\n\n// Only change code below this line\n\n\n\n// Only change code above this line\n\nlet penguin = new Penguin();\nconsole.log(penguin.fly());"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\nPenguin.prototype.fly = () => 'Alas, this is a flightless bird.';\nlet penguin = new Penguin();\nconsole.log(penguin.fly());"
        }
      ],
      "tests": [
        {
          "text": "`penguin.fly()` should return the string `Alas, this is a flightless bird.`",
          "testCode": "assert(penguin.fly() === 'Alas, this is a flightless bird.');"
        },
        {
          "text": "The `bird.fly()` method should return the string `I am flying!`",
          "testCode": "assert(new Bird().fly() === 'I am flying!');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301322,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\override-inherited-methods.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7daf367417b2b2512b80",
      "title": "Remember to Set the Constructor Property when Changing the Prototype",
      "challengeType": 1,
      "dashedName": "remember-to-set-the-constructor-property-when-changing-the-prototype",
      "description": "There is one crucial side effect of manually setting the prototype to a new object. It erases the `constructor` property! This property can be used to check which constructor function created the instance, but since the property has been overwritten, it now gives false results:\n\n```js\nduck.constructor === Bird;\nduck.constructor === Object;\nduck instanceof Bird;\n```\n\nIn order, these expressions would evaluate to `false`, `true`, and `true`.\n\nTo fix this, whenever a prototype is manually set to a new object, remember to define the `constructor` property:\n\n```js\nBird.prototype = {\n  constructor: Bird,\n  numLegs: 2,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name); \n  }\n};\n```",
      "instructions": "Define the `constructor` property on the `Dog` `prototype`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\n\n// Only change code below this line\nDog.prototype = {\n\n  numLegs: 4,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\nDog.prototype = {\n  constructor: Dog,\n  numLegs: 4,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`Dog.prototype` should set the `constructor` property.",
          "testCode": "assert(Dog.prototype.constructor === Dog);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301323,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\remember-to-set-the-constructor-property-when-changing-the-prototype.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db1367417b2b2512b86",
      "title": "Reset an Inherited Constructor Property",
      "challengeType": 1,
      "dashedName": "reset-an-inherited-constructor-property",
      "description": "When an object inherits its `prototype` from another object, it also inherits the supertype's constructor property.\n\nHere's an example:\n\n```js\nfunction Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nlet duck = new Bird();\nduck.constructor\n```\n\nBut `duck` and all instances of `Bird` should show that they were constructed by `Bird` and not `Animal`. To do so, you can manually set the constructor property of `Bird` to the `Bird` object:\n\n```js\nBird.prototype.constructor = Bird;\nduck.constructor\n```",
      "instructions": "Fix the code so `duck.constructor` and `beagle.constructor` return their respective constructors.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\n\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\n\n// Only change code below this line\n\n\n\nlet duck = new Bird();\nlet beagle = new Dog();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nBird.prototype.constructor = Bird;\nlet duck = new Bird();\nlet beagle = new Dog();"
        }
      ],
      "tests": [
        {
          "text": "`Bird.prototype` should be an instance of `Animal`.",
          "testCode": "assert(Animal.prototype.isPrototypeOf(Bird.prototype));"
        },
        {
          "text": "`duck.constructor` should return `Bird`.",
          "testCode": "assert(duck.constructor === Bird);"
        },
        {
          "text": "`Dog.prototype` should be an instance of `Animal`.",
          "testCode": "assert(Animal.prototype.isPrototypeOf(Dog.prototype));"
        },
        {
          "text": "`beagle.constructor` should return `Dog`.",
          "testCode": "assert(beagle.constructor === Dog);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301324,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\reset-an-inherited-constructor-property.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db1367417b2b2512b85",
      "title": "Set the Child's Prototype to an Instance of the Parent",
      "challengeType": 1,
      "dashedName": "set-the-childs-prototype-to-an-instance-of-the-parent",
      "description": "In the previous challenge you saw the first step for inheriting behavior from the supertype (or parent) `Animal`: making a new instance of `Animal`.\n\nThis challenge covers the next step: set the `prototype` of the subtype (or child)—in this case, `Bird`—to be an instance of `Animal`.\n\n```js\nBird.prototype = Object.create(Animal.prototype);\n```\n\nRemember that the `prototype` is like the \"recipe\" for creating an object. In a way, the recipe for `Bird` now includes all the key \"ingredients\" from `Animal`.\n\n```js\nlet duck = new Bird(\"Donald\");\nduck.eat();\n```\n\n`duck` inherits all of `Animal`'s properties, including the `eat` method.",
      "instructions": "Modify the code so that instances of `Dog` inherit from `Animal`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\n\n// Only change code below this line\n\n\nlet beagle = new Dog();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\n\nlet beagle = new Dog();\nbeagle.eat();"
        }
      ],
      "tests": [
        {
          "text": "`Dog.prototype` should be an instance of `Animal`.",
          "testCode": "assert(Animal.prototype.isPrototypeOf(Dog.prototype));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301325,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\set-the-childs-prototype-to-an-instance-of-the-parent.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dae367417b2b2512b7b",
      "title": "Understand Own Properties",
      "challengeType": 1,
      "dashedName": "understand-own-properties",
      "description": "In the following example, the `Bird` constructor defines two properties: `name` and `numLegs`:\n\n```js\nfunction Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet duck = new Bird(\"Donald\");\nlet canary = new Bird(\"Tweety\");\n```\n\n`name` and `numLegs` are called <dfn>own properties</dfn>, because they are defined directly on the instance object. That means that `duck` and `canary` each has its own separate copy of these properties. In fact every instance of `Bird` will have its own copy of these properties. The following code adds all of the own properties of `duck` to the array `ownProps`:\n\n```js\nlet ownProps = [];\n\nfor (let property in duck) {\n  if(duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  }\n}\n\nconsole.log(ownProps);\n```\n\nThe console would display the value `[\"name\", \"numLegs\"]`.",
      "instructions": "Add the own properties of `canary` to the array `ownProps`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nlet ownProps = [];\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nfunction getOwnProps (obj) {\n  const props = [];\n\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      props.push(prop);\n    }\n  }\n\n  return props;\n}\n\nconst ownProps = getOwnProps(canary);"
        }
      ],
      "tests": [
        {
          "text": "`ownProps` should include the values `numLegs` and `name`.",
          "testCode": "assert(ownProps.indexOf('name') !== -1 && ownProps.indexOf('numLegs') !== -1);"
        },
        {
          "text": "You should solve this challenge without using the built in method `Object.keys()`.",
          "testCode": "assert(!/Object(\\.keys|\\[(['\"`])keys\\2\\])/.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "You should solve this challenge without hardcoding the `ownProps` array.",
          "testCode": "assert(\n  !/\\[\\s*(?:'|\")(?:name|numLegs)|(?:push|concat)\\(\\s*(?:'|\")(?:name|numLegs)/.test(\n    __helpers.removeJSComments(code)\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301326,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\understand-own-properties.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7daf367417b2b2512b7e",
      "title": "Understand the Constructor Property",
      "challengeType": 1,
      "dashedName": "understand-the-constructor-property",
      "description": "There is a special `constructor` property located on the object instances `duck` and `beagle` that were created in the previous challenges:\n\n```js\nlet duck = new Bird();\nlet beagle = new Dog();\n\nconsole.log(duck.constructor === Bird); \nconsole.log(beagle.constructor === Dog);\n```\n\nBoth of these `console.log` calls would display `true` in the console.\n\nNote that the `constructor` property is a reference to the constructor function that created the instance. The advantage of the `constructor` property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:\n\n```js\nfunction joinBirdFraternity(candidate) {\n  if (candidate.constructor === Bird) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n**Note:** Since the `constructor` property can be overwritten (which will be covered in the next two challenges) it’s generally better to use the `instanceof` method to check the type of an object.",
      "instructions": "Write a `joinDogFraternity` function that takes a `candidate` parameter and, using the `constructor` property, return `true` if the candidate is a `Dog`, otherwise return `false`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\n\n// Only change code below this line\nfunction joinDogFraternity(candidate) {\n\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\nfunction joinDogFraternity(candidate) {\n  return candidate.constructor === Dog;\n}"
        }
      ],
      "tests": [
        {
          "text": "`joinDogFraternity` should be defined as a function.",
          "testCode": "assert(typeof joinDogFraternity === 'function');"
        },
        {
          "text": "`joinDogFraternity` should return `true` if `candidate` is an instance of `Dog`.",
          "testCode": "assert(joinDogFraternity(new Dog('')) === true);"
        },
        {
          "text": "`joinDogFraternity` should use the `constructor` property.",
          "testCode": "assert(/\\.constructor/.test(__helpers.removeJSComments(code)) && !/instanceof/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301327,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\understand-the-constructor-property.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db2367417b2b2512b8b",
      "title": "Understand the Immediately Invoked Function Expression (IIFE)",
      "challengeType": 1,
      "dashedName": "understand-the-immediately-invoked-function-expression-iife",
      "description": "A common pattern in JavaScript is to execute a function as soon as it is declared:\n\n```js\n(function () {\n  console.log(\"Chirp, chirp!\");\n})();\n```\n\nThis is an anonymous function expression that executes right away, and outputs `Chirp, chirp!` immediately.\n\nNote that the function has no name and is not stored in a variable. The two parentheses () at the end of the function expression cause it to be immediately executed or invoked. This pattern is known as an <dfn>immediately invoked function expression</dfn> or <dfn>IIFE</dfn>.",
      "instructions": "Rewrite the function `makeNest` and remove its call so instead it's an anonymous immediately invoked function expression (IIFE).",
      "boilerplate": [
        {
          "language": "js",
          "code": "function makeNest() {\n  console.log(\"A cozy nest is ready\");\n}\n\nmakeNest();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "(function () {\n  console.log(\"A cozy nest is ready\");\n})();"
        },
        {
          "language": "js",
          "code": "(function () {\n  console.log(\"A cozy nest is ready\");\n}());"
        },
        {
          "language": "js",
          "code": "(() => {\n  console.log(\"A cozy nest is ready\");\n})();"
        },
        {
          "language": "js",
          "code": "(() =>\n  console.log(\"A cozy nest is ready\")\n)();"
        }
      ],
      "tests": [
        {
          "text": "The function should be anonymous.",
          "testCode": "assert(/\\((function|\\(\\))(=>|\\(\\)){?/.test(__helpers.removeJSComments(code).replace(/\\s/g, '')));"
        },
        {
          "text": "Your function should have parentheses at the end of the expression to call it immediately.",
          "testCode": "assert(/\\(.*(\\)\\(|\\}\\(\\))\\)/.test(__helpers.removeJSComments(code).replace(/[\\s;]/g, '')));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301328,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\understand-the-immediately-invoked-function-expression-iife.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db0367417b2b2512b82",
      "title": "Understand the Prototype Chain",
      "challengeType": 1,
      "dashedName": "understand-the-prototype-chain",
      "description": "All objects in JavaScript (with a few exceptions) have a `prototype`. Also, an object’s `prototype` itself is an object.\n\n```js\nfunction Bird(name) {\n  this.name = name;\n}\n\ntypeof Bird.prototype;\n```\n\nBecause a `prototype` is an object, a `prototype` can have its own `prototype`! In this case, the `prototype` of `Bird.prototype` is `Object.prototype`:\n\n```js\nObject.prototype.isPrototypeOf(Bird.prototype);\n```\n\nHow is this useful? You may recall the `hasOwnProperty` method from a previous challenge:\n\n```js\nlet duck = new Bird(\"Donald\");\nduck.hasOwnProperty(\"name\");\n```\n\nThe `hasOwnProperty` method is defined in `Object.prototype`, which can be accessed by `Bird.prototype`, which can then be accessed by `duck`. This is an example of the `prototype` chain. In this `prototype` chain, `Bird` is the `supertype` for `duck`, while `duck` is the `subtype`. `Object` is a `supertype` for both `Bird` and `duck`. `Object` is a `supertype` for all objects in JavaScript. Therefore, any object can use the `hasOwnProperty` method.",
      "instructions": "Modify the code to show the correct prototype chain.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\nDog.prototype.isPrototypeOf(beagle);  // yields true\n\n// Fix the code below so that it evaluates to true\n???.isPrototypeOf(Dog.prototype);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);\nObject.prototype.isPrototypeOf(Dog.prototype);"
        }
      ],
      "tests": [
        {
          "text": "Your code should show that `Object.prototype` is the prototype of `Dog.prototype`",
          "testCode": "assert(/Object\\.prototype\\.isPrototypeOf/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301329,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\understand-the-prototype-chain.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db0367417b2b2512b81",
      "title": "Understand Where an Object’s Prototype Comes From",
      "challengeType": 1,
      "dashedName": "understand-where-an-objects-prototype-comes-from",
      "description": "Just like people inherit genes from their parents, an object inherits its `prototype` directly from the constructor function that created it. For example, here the `Bird` constructor creates the `duck` object:\n\n```js\nfunction Bird(name) {\n  this.name = name;\n}\n\nlet duck = new Bird(\"Donald\");\n```\n\n`duck` inherits its `prototype` from the `Bird` constructor function. You can show this relationship with the `isPrototypeOf` method:\n\n```js\nBird.prototype.isPrototypeOf(duck);\n```\n\nThis would return `true`.",
      "instructions": "Use `isPrototypeOf` to check the `prototype` of `beagle`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);"
        }
      ],
      "tests": [
        {
          "text": "You should show that `Dog.prototype` is the `prototype` of `beagle`",
          "testCode": "assert(/Dog\\.prototype\\.isPrototypeOf\\(beagle\\)/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301330,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\understand-where-an-objects-prototype-comes-from.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dad367417b2b2512b78",
      "title": "Use a Constructor to Create Objects",
      "challengeType": 1,
      "dashedName": "use-a-constructor-to-create-objects",
      "description": "Here's the `Bird` constructor from the previous challenge:\n\n```js\nfunction Bird() {\n  this.name = \"Albert\";\n  this.color  = \"blue\";\n  this.numLegs = 2;\n}\n\nlet blueBird = new Bird();\n```\n\n**NOTE:** `this` inside the constructor always refers to the object being created.\n\nNotice that the `new` operator is used when calling a constructor. This tells JavaScript to create a new instance of `Bird` called `blueBird`. Without the `new` operator, `this` inside the constructor would not point to the newly created object, giving unexpected results. Now `blueBird` has all the properties defined inside the `Bird` constructor:\n\n```js\nblueBird.name;\nblueBird.color;\nblueBird.numLegs;\n```\n\nJust like any other object, its properties can be accessed and modified:\n\n```js\nblueBird.name = 'Elvira';\nblueBird.name;\n```",
      "instructions": "Use the `Dog` constructor from the last lesson to create a new instance of `Dog`, assigning it to a variable `hound`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog() {\n  this.name = \"Rupert\";\n  this.color = \"brown\";\n  this.numLegs = 4;\n}\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog() {\n  this.name = \"Rupert\";\n  this.color = \"brown\";\n  this.numLegs = 4;\n}\nconst hound = new Dog();"
        }
      ],
      "tests": [
        {
          "text": "`hound` should be created using the `Dog` constructor.",
          "testCode": "assert(hound instanceof Dog);"
        },
        {
          "text": "Your code should use the `new` operator to create an instance of `Dog`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/new/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18233,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\use-a-constructor-to-create-objects.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db2367417b2b2512b89",
      "title": "Use a Mixin to Add Common Behavior Between Unrelated Objects",
      "challengeType": 1,
      "dashedName": "use-a-mixin-to-add-common-behavior-between-unrelated-objects",
      "description": "As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like `Bird` and `Airplane`. They can both fly, but a `Bird` is not a type of `Airplane` and vice versa.\n\nFor unrelated objects, it's better to use <dfn>mixins</dfn>. A mixin allows other objects to use a collection of functions.\n\n```js\nlet flyMixin = function(obj) {\n  obj.fly = function() {\n    console.log(\"Flying, wooosh!\");\n  }\n};\n```\n\nThe `flyMixin` takes any object and gives it the `fly` method.\n\n```js\nlet bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet plane = {\n  model: \"777\",\n  numPassengers: 524\n};\n\nflyMixin(bird);\nflyMixin(plane);\n```\n\nHere `bird` and `plane` are passed into `flyMixin`, which then assigns the `fly` function to each object. Now `bird` and `plane` can both fly:\n\n```js\nbird.fly();\nplane.fly();\n```\n\nThe console would display the string `Flying, wooosh!` twice, once for each `.fly()` call.\n\nNote how the mixin allows for the same `fly` method to be reused by unrelated objects `bird` and `plane`.",
      "instructions": "Create a mixin named `glideMixin` that defines a method named `glide`. Then use the `glideMixin` to give both `bird` and `boat` the ability to glide.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\nfunction glideMixin (obj) {\n  obj.glide = () => 'Gliding!';\n}\n\nglideMixin(bird);\nglideMixin(boat);"
        }
      ],
      "tests": [
        {
          "text": "Your code should declare a `glideMixin` variable that is a function.",
          "testCode": "assert(typeof glideMixin === 'function');"
        },
        {
          "text": "Your code should use the `glideMixin` on the `bird` object to give it the `glide` method.",
          "testCode": "assert(typeof bird.glide === 'function');"
        },
        {
          "text": "Your code should use the `glideMixin` on the `boat` object to give it the `glide` method.",
          "testCode": "assert(typeof boat.glide === 'function');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301331,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\use-a-mixin-to-add-common-behavior-between-unrelated-objects.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db2367417b2b2512b8c",
      "title": "Use an IIFE to Create a Module",
      "challengeType": 1,
      "dashedName": "use-an-iife-to-create-a-module",
      "description": "An immediately invoked function expression (IIFE) is often used to group related functionality into a single object or <dfn>module</dfn>. For example, an earlier challenge defined two mixins:\n\n```js\nfunction glideMixin(obj) {\n  obj.glide = function() {\n    console.log(\"Gliding on the water\");\n  };\n}\nfunction flyMixin(obj) {\n  obj.fly = function() {\n    console.log(\"Flying, wooosh!\");\n  };\n}\n```\n\nWe can group these mixins into a module as follows:\n\n```js\nlet motionModule = (function () {\n  return {\n    glideMixin: function(obj) {\n      obj.glide = function() {\n        console.log(\"Gliding on the water\");\n      };\n    },\n    flyMixin: function(obj) {\n      obj.fly = function() {\n        console.log(\"Flying, wooosh!\");\n      };\n    }\n  }\n})();\n```\n\nNote that you have an immediately invoked function expression (IIFE) that returns an object `motionModule`. This returned object contains all of the mixin behaviors as properties of the object. The advantage of the module pattern is that all of the motion behaviors can be packaged into a single object that can then be used by other parts of your code. Here is an example using it:\n\n```js\nmotionModule.glideMixin(duck);\nduck.glide();\n```",
      "instructions": "Create a module named `funModule` to wrap the two mixins `isCuteMixin` and `singMixin`. `funModule` should return an object.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let isCuteMixin = function(obj) {\n  obj.isCute = function() {\n    return true;\n  };\n};\nlet singMixin = function(obj) {\n  obj.sing = function() {\n    console.log(\"Singing to an awesome tune\");\n  };\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();"
        }
      ],
      "tests": [
        {
          "text": "`funModule` should be defined and return an object.",
          "testCode": "assert(typeof funModule === 'object');"
        },
        {
          "text": "`funModule.isCuteMixin` should access a function.",
          "testCode": "assert(typeof funModule.isCuteMixin === 'function');"
        },
        {
          "text": "`funModule.singMixin` should access a function.",
          "testCode": "assert(typeof funModule.singMixin === 'function');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301332,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\use-an-iife-to-create-a-module.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db2367417b2b2512b8a",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "In the previous challenge, `bird` had a public property `name`. It is considered public because it can be accessed and changed outside of `bird`'s definition.\n\n```js\nbird.name = \"Duffy\";\n```\n\nTherefore, any part of your code can easily change the name of `bird` to any value. Think about things like passwords and bank accounts being easily changeable by any part of your codebase. That could cause a lot of issues.\n\nThe simplest way to make this public property private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the variable can only be accessed and changed by methods also within the constructor function.\n\n```js\nfunction Bird() {\n  let hatchedEgg = 10;\n\n  this.getHatchedEggCount = function() { \n    return hatchedEgg;\n  };\n}\nlet ducky = new Bird();\nducky.getHatchedEggCount();\n```\n\nHere `getHatchedEggCount` is a privileged method, because it has access to the private variable `hatchedEgg`. This is possible because `hatchedEgg` is declared in the same context as `getHatchedEggCount`. In JavaScript, a function always has access to the context in which it was created. This is called `closure`.",
      "instructions": "Change how `weight` is declared in the `Bird` function so it is a private variable. Then, create a method `getWeight` that returns the value of `weight` 15.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Bird() {\n  this.weight = 15;\n\n\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Bird() {\n  let weight = 15;\n\n  this.getWeight = () => weight;\n}"
        }
      ],
      "tests": [
        {
          "text": "The `weight` property should be a private variable and should be assigned the value of `15`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/(var|let|const)\\s+weight\\s*\\=\\s*15\\;?/g));"
        },
        {
          "text": "Your code should create a method in `Bird` called `getWeight` that returns the value of the private variable `weight`.",
          "testCode": "assert(new Bird().getWeight() === 15);"
        },
        {
          "text": "Your `getWeight` function should return the private variable `weight`.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/((return\\s+)|(\\(\\s*\\)\\s*\\=\\>\\s*))weight\\;?/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18234,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\use-closure-to-protect-properties-within-an-object-from-being-modified-externally.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dac367417b2b2512b74",
      "title": "Use Dot Notation to Access the Properties of an Object",
      "challengeType": 1,
      "dashedName": "use-dot-notation-to-access-the-properties-of-an-object",
      "description": "The last challenge created an object with various properties. Now you'll see how to access the values of those properties. Here's an example:\n\n```js\nlet duck = {\n  name: \"Aflac\",\n  numLegs: 2\n};\nconsole.log(duck.name);\n```\n\nDot notation is used on the object name, `duck`, followed by the name of the property, `name`, to access the value of `Aflac`.",
      "instructions": "Print both properties of the `dog` object to your console.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let dog = {\n  name: \"Spot\",\n  numLegs: 4\n};\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let dog = {\n  name: \"Spot\",\n  numLegs: 4\n};\nconsole.log(dog.name);\nconsole.log(dog.numLegs);"
        }
      ],
      "tests": [
        {
          "text": "Your code should use `console.log` to print the value for the `name` property of the `dog` object.",
          "testCode": "assert(/console.log\\(.*dog\\.name.*\\)/g.test(__helpers.removeJSComments(code)));"
        },
        {
          "text": "Your code should use `console.log` to print the value for the `numLegs` property of the `dog` object.",
          "testCode": "assert(/console.log\\(.*dog\\.numLegs.*\\)/g.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301333,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\use-dot-notation-to-access-the-properties-of-an-object.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7db0367417b2b2512b83",
      "title": "Use Inheritance So You Don't Repeat Yourself",
      "challengeType": 1,
      "dashedName": "use-inheritance-so-you-dont-repeat-yourself",
      "description": "There's a principle in programming called <dfn>Don't Repeat Yourself (DRY)</dfn>. The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.\n\nNotice in the example below that the `describe` method is shared by `Bird` and `Dog`:\n\n```js\nBird.prototype = {\n  constructor: Bird,\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n\nDog.prototype = {\n  constructor: Dog,\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n```\n\nThe `describe` method is repeated in two places. The code can be edited to follow the DRY principle by creating a `supertype` (or parent) called `Animal`:\n\n```js\nfunction Animal() { };\n\nAnimal.prototype = {\n  constructor: Animal, \n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n```\n\nSince `Animal` includes the `describe` method, you can remove it from `Bird` and `Dog`:\n\n```js\nBird.prototype = {\n  constructor: Bird\n};\n\nDog.prototype = {\n  constructor: Dog\n};\n```",
      "instructions": "The `eat` method is repeated in both `Cat` and `Bear`. Edit the code in the spirit of DRY by moving the `eat` method to the `Animal` `supertype`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`Animal.prototype` should have the `eat` property.",
          "testCode": "assert(Animal.prototype.hasOwnProperty('eat'));"
        },
        {
          "text": "`Bear.prototype` should not have the `eat` property.",
          "testCode": "assert(!Bear.prototype.hasOwnProperty('eat'));"
        },
        {
          "text": "`Cat.prototype` should not have the `eat` property.",
          "testCode": "assert(!Cat.prototype.hasOwnProperty('eat'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301334,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\use-inheritance-so-you-dont-repeat-yourself.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dae367417b2b2512b7c",
      "title": "Use Prototype Properties to Reduce Duplicate Code",
      "challengeType": 1,
      "dashedName": "use-prototype-properties-to-reduce-duplicate-code",
      "description": "Since `numLegs` will probably have the same value for all instances of `Bird`, you essentially have a duplicated variable `numLegs` inside each `Bird` instance.\n\nThis may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.\n\nA better way is to use the `prototype` of `Bird`. Properties in the `prototype` are shared among ALL instances of `Bird`. Here's how to add `numLegs` to the `Bird prototype`:\n\n```js\nBird.prototype.numLegs = 2;\n```\n\nNow all instances of `Bird` have the `numLegs` property.\n\n```js\nconsole.log(duck.numLegs);\nconsole.log(canary.numLegs);\n```\n\nSince all instances automatically have the properties on the `prototype`, think of a `prototype` as a \"recipe\" for creating objects. Note that the `prototype` for `duck` and `canary` is part of the `Bird` constructor as `Bird.prototype`.",
      "instructions": "Add a `numLegs` property to the `prototype` of `Dog`",
      "boilerplate": [
        {
          "language": "js",
          "code": "function Dog(name) {\n  this.name = name;\n}\n\n\n\n// Only change code above this line\nlet beagle = new Dog(\"Snoopy\");"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function Dog (name) {\n  this.name = name;\n}\nDog.prototype.numLegs = 4;\nlet beagle = new Dog(\"Snoopy\");"
        }
      ],
      "tests": [
        {
          "text": "`beagle` should have a `numLegs` property.",
          "testCode": "assert(beagle.numLegs !== undefined);"
        },
        {
          "text": "`beagle.numLegs` should be a number.",
          "testCode": "assert(typeof beagle.numLegs === 'number');"
        },
        {
          "text": "`numLegs` should be a `prototype` property not an own property.",
          "testCode": "assert(beagle.hasOwnProperty('numLegs') === false);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301336,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\use-prototype-properties-to-reduce-duplicate-code.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dae367417b2b2512b7a",
      "title": "Verify an Object's Constructor with instanceof",
      "challengeType": 1,
      "dashedName": "verify-an-objects-constructor-with-instanceof",
      "description": "Anytime a constructor function creates a new object, that object is said to be an <dfn>instance</dfn> of its constructor. JavaScript gives a convenient way to verify this with the `instanceof` operator. `instanceof` allows you to compare an object to a constructor, returning `true` or `false` based on whether or not that object was created with the constructor. Here's an example:\n\n```js\nlet Bird = function(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n\nlet crow = new Bird(\"Alexis\", \"black\");\n\ncrow instanceof Bird;\n```\n\nThis `instanceof` method would return `true`.\n\nIf an object is created without using a constructor, `instanceof` will verify that it is not an instance of that constructor:\n\n```js\nlet canary = {\n  name: \"Mildred\",\n  color: \"Yellow\",\n  numLegs: 2\n};\n\ncanary instanceof Bird;\n```\n\nThis `instanceof` method would return `false`.",
      "instructions": "Create a new instance of the `House` constructor, calling it `myHouse` and passing a number of bedrooms. Then, use `instanceof` to verify that it is an instance of `House`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\nconst myHouse = new House(4);\nconsole.log(myHouse instanceof House);"
        }
      ],
      "tests": [
        {
          "text": "`myHouse` should have a `numBedrooms` attribute set to a number.",
          "testCode": "assert(typeof myHouse.numBedrooms === 'number');"
        },
        {
          "text": "You should verify that `myHouse` is an instance of `House` using the `instanceof` operator.",
          "testCode": "assert(/myHouse\\s*instanceof\\s*House/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301337,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\object-oriented-programming\\verify-an-objects-constructor-with-instanceof.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "object-oriented-programming",
        "name": "Object Oriented Programming"
      }
    },
    {
      "id": "587d7dba367417b2b2512ba8",
      "title": "Check for All or None",
      "challengeType": 1,
      "dashedName": "check-for-all-or-none",
      "description": "Sometimes the patterns you want to search for may have parts of it that may or may not exist. However, it may be important to check for them nonetheless.\n\nYou can specify the possible existence of an element with a question mark, `?`. This checks for zero or one of the preceding element. You can think of this symbol as saying the previous element is optional.\n\nFor example, there are slight differences in American and British English and you can use the question mark to match both spellings.\n\n```js\nlet american = \"color\";\nlet british = \"colour\";\nlet rainbowRegex= /colou?r/;\nrainbowRegex.test(american);\nrainbowRegex.test(british);\n```\n\nBoth uses of the `test` method would return `true`.",
      "instructions": "Change the regex `favRegex` to match both the American English (`favorite`) and the British English (`favourite`) version of the word.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let favWord = \"favorite\";\nlet favRegex = /change/; // Change this line\nlet result = favRegex.test(favWord);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let favWord = \"favorite\";\nlet favRegex = /favou?r/;\nlet result = favRegex.test(favWord);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use the optional symbol, `?`.",
          "testCode": "favRegex.lastIndex = 0;\nassert(favRegex.source.match(/\\?/).length > 0);"
        },
        {
          "text": "Your regex should match the string `favorite`",
          "testCode": "favRegex.lastIndex = 0;\nassert(favRegex.test('favorite'));"
        },
        {
          "text": "Your regex should match the string `favourite`",
          "testCode": "favRegex.lastIndex = 0;\nassert(favRegex.test('favourite'));"
        },
        {
          "text": "Your regex should not match the string `fav`",
          "testCode": "favRegex.lastIndex = 0;\nassert(!favRegex.test('fav'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301338,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\check-for-all-or-none.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "5c3dda8b4d8df89bea71600f",
      "title": "Check For Mixed Grouping of Characters",
      "challengeType": 1,
      "dashedName": "check-for-mixed-grouping-of-characters",
      "description": "Sometimes we want to check for groups of characters using a Regular Expression and to achieve that we use parentheses `()`.\n\nIf you want to find either `Penguin` or `Pumpkin` in a string, you can use the following Regular Expression: `/P(engu|umpk)in/g`\n\nThen check whether the desired string groups are in the test string by using the `test()` method.\n\n```js\nlet testStr = \"Pumpkin\";\nlet testRegex = /P(engu|umpk)in/;\ntestRegex.test(testStr);\n```\n\nThe `test` method here would return `true`.",
      "instructions": "Fix the regex so that it checks for the names of `Franklin Roosevelt` or `Eleanor Roosevelt` in a case sensitive manner and it should make concessions for middle names.\n\nThen fix the code so that the regex that you have created is checked against `myString` and either `true` or `false` is returned depending on whether the regex matches.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myString = \"Eleanor Roosevelt\";\nlet myRegex = /False/; // Change this line\nlet result = false; // Change this line\n// After passing the challenge experiment with myString and see how the grouping works"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myString = \"Eleanor Roosevelt\";\nlet myRegex = /(Franklin|Eleanor) (([A-Z]\\.?|[A-Z][a-z]+) )?Roosevelt/;\nlet result = myRegex.test(myString);"
        }
      ],
      "tests": [
        {
          "text": "Your regex `myRegex` should return `true` for the string `Franklin D. Roosevelt`",
          "testCode": "myRegex.lastIndex = 0;\nassert(myRegex.test('Franklin D. Roosevelt'));"
        },
        {
          "text": "Your regex `myRegex` should return `true` for the string `Eleanor Roosevelt`",
          "testCode": "myRegex.lastIndex = 0;\nassert(myRegex.test('Eleanor Roosevelt'));"
        },
        {
          "text": "Your regex `myRegex` should return `false` for the string `Franklin Rosevelt`",
          "testCode": "myRegex.lastIndex = 0;\nassert(!myRegex.test('Franklin Rosevelt'));"
        },
        {
          "text": "Your regex `myRegex` should return `false` for the string `Frank Roosevelt`",
          "testCode": "myRegex.lastIndex = 0;\nassert(!myRegex.test('Frank Roosevelt'));"
        },
        {
          "text": "Your regex `myRegex` should return `false` for the string `FranklinRoosevelt`",
          "testCode": "myRegex.lastIndex = 0;\nassert(!myRegex.test('FranklinRoosevelt'));"
        },
        {
          "text": "Your regex `myRegex` should return `false` for the string `EleanorRoosevelt`",
          "testCode": "myRegex.lastIndex = 0;\nassert(!myRegex.test('EleanorRoosevelt'));"
        },
        {
          "text": "You should use `.test()` to test the regex.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/myRegex.test\\(\\s*myString\\s*\\)/));"
        },
        {
          "text": "Your result should return `true`.",
          "testCode": "assert(result === true);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301339,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\check-for-mixed-grouping-of-characters.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db4367417b2b2512b92",
      "title": "Extract Matches",
      "challengeType": 1,
      "dashedName": "extract-matches",
      "description": "So far, you have only been checking if a pattern exists or not within a string. You can also extract the actual matches you found with the `.match()` method.\n\nTo use the `.match()` method, apply the method on a string and pass in the regex inside the parentheses.\n\nHere's an example:\n\n```js\n\"Hello, World!\".match(/Hello/);\nlet ourStr = \"Regular expressions\";\nlet ourRegex = /expressions/;\nourStr.match(ourRegex);\n```\n\nHere the first `match` would return `[\"Hello\"]` and the second would return `[\"expressions\"]`.\n\nNote that the `.match` syntax is the \"opposite\" of the `.test` method you have been using thus far:\n\n```js\n'string'.match(/regex/);\n/regex/.test('string');\n```",
      "instructions": "Apply the `.match()` method to extract the string `coding`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /change/; // Change this line\nlet result = extractStr; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /coding/; // Change this line\nlet result = extractStr.match(codingRegex); // Change this line"
        }
      ],
      "tests": [
        {
          "text": "The `result` should have the string `coding`",
          "testCode": "assert(result.join() === 'coding');"
        },
        {
          "text": "Your regex `codingRegex` should search for the string `coding`",
          "testCode": "assert(codingRegex.source === 'coding');"
        },
        {
          "text": "You should use the `.match()` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.match\\(.*\\)/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301340,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\extract-matches.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db6367417b2b2512b9b",
      "title": "Find Characters with Lazy Matching",
      "challengeType": 1,
      "dashedName": "find-characters-with-lazy-matching",
      "description": "In regular expressions, a <dfn>greedy</dfn> match finds the longest possible part of a string that fits the regex pattern and returns it as a match. The alternative is called a <dfn>lazy</dfn> match, which finds the smallest possible part of the string that satisfies the regex pattern.\n\nYou can apply the regex `/t[a-z]*i/` to the string `\"titanic\"`. This regex is basically a pattern that starts with `t`, ends with `i`, and has some letters in between.\n\nRegular expressions are by default greedy, so the match would return `[\"titani\"]`. It finds the largest sub-string possible to fit the pattern.\n\nHowever, you can use the `?` character to change it to lazy matching. `\"titanic\"` matched against the adjusted regex of `/t[a-z]*?i/` returns `[\"ti\"]`.\n\n**Note:** Parsing HTML with regular expressions should be avoided, but pattern matching an HTML string with regular expressions is completely fine.",
      "instructions": "Fix the regex `/<.*>/` to return the HTML tag `<h1>` and not the text `\"<h1>Winter is coming</h1>\"`. Remember the wildcard `.` in a regular expression matches any character.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let text = \"<h1>Winter is coming</h1>\";\nlet myRegex = /<.*>/; // Change this line\nlet result = text.match(myRegex);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let text = \"<h1>Winter is coming</h1>\";\nlet myRegex = /<.*?>/; // Change this line\nlet result = text.match(myRegex);"
        }
      ],
      "tests": [
        {
          "text": "The `result` variable should be an array with `<h1>` in it",
          "testCode": "assert(result[0] == '<h1>');"
        },
        {
          "text": "`myRegex` should use lazy matching",
          "testCode": "assert(/[^\\\\][\\*\\+\\?]\\?/.test(myRegex));"
        },
        {
          "text": "`myRegex` should not include the string `h1`",
          "testCode": "assert(!myRegex.source.match('h1'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301341,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\find-characters-with-lazy-matching.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db4367417b2b2512b93",
      "title": "Find More Than the First Match",
      "challengeType": 1,
      "dashedName": "find-more-than-the-first-match",
      "description": "So far, you have only been able to extract or search a pattern once.\n\n```js\nlet testStr = \"Repeat, Repeat, Repeat\";\nlet ourRegex = /Repeat/;\ntestStr.match(ourRegex);\n```\n\nHere `match` would return `[\"Repeat\"]`.\n\nTo search or extract a pattern more than once, you can use the global search flag: `g`.\n\n```js\nlet repeatRegex = /Repeat/g;\ntestStr.match(repeatRegex);\n```\n\nAnd here `match` returns the value `[\"Repeat\", \"Repeat\", \"Repeat\"]`",
      "instructions": "Using the regex `starRegex`, find and extract both `Twinkle` words from the string `twinkleStar`.\n\n**Note**  \nYou can have multiple flags on your regex like `/search/gi`",
      "boilerplate": [
        {
          "language": "js",
          "code": "let twinkleStar = \"Twinkle, twinkle, little star\";\nlet starRegex = /change/; // Change this line\nlet result = twinkleStar; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let twinkleStar = \"Twinkle, twinkle, little star\";\nlet starRegex = /twinkle/gi;\nlet result = twinkleStar.match(starRegex);"
        }
      ],
      "tests": [
        {
          "text": "Your regex `starRegex` should use the global flag `g`",
          "testCode": "assert(starRegex.flags.match(/g/).length == 1);"
        },
        {
          "text": "Your regex `starRegex` should use the case insensitive flag `i`",
          "testCode": "assert(starRegex.flags.match(/i/).length == 1);"
        },
        {
          "text": "Your match should match both occurrences of the word `Twinkle`",
          "testCode": "assert(\n  result.sort().join() ==\n    twinkleStar\n      .match(/twinkle/gi)\n      .sort()\n      .join()\n);"
        },
        {
          "text": "Your match `result` should have two elements in it.",
          "testCode": "assert(result.length == 2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301342,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\find-more-than-the-first-match.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db7367417b2b2512b9c",
      "title": "Find One or More Criminals in a Hunt",
      "challengeType": 1,
      "dashedName": "find-one-or-more-criminals-in-a-hunt",
      "description": "Time to pause and test your new regex writing skills. A group of criminals escaped from jail and ran away, but you don't know how many. However, you do know that they stay close together when they are around other people. You are responsible for finding all of the criminals at once.\n\nHere's an example to review how to do this:\n\nThe regex `/z+/` matches the letter `z` when it appears one or more times in a row. It would find matches in all of the following strings:\n\n```js\n\"z\"\n\"zzzzzz\"\n\"ABCzzzz\"\n\"zzzzABC\"\n\"abczzzzzzzzzzzzzzzzzzzzzabc\"\n```\n\nBut it does not find matches in the following strings since there are no letter `z` characters:\n\n```js\n\"\"\n\"ABC\"\n\"abcabc\"\n```",
      "instructions": "Write a greedy regex that finds one or more criminals within a group of other people. A criminal is represented by the capital letter `C`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let reCriminals = /./; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let reCriminals = /C+/; // Change this line"
        }
      ],
      "tests": [
        {
          "text": "Your regex should match one criminal (`C`) in the string `C`",
          "testCode": "assert('C'.match(reCriminals) && 'C'.match(reCriminals)[0] == 'C');"
        },
        {
          "text": "Your regex should match two criminals (`CC`) in the string `CC`",
          "testCode": "assert('CC'.match(reCriminals) && 'CC'.match(reCriminals)[0] == 'CC');"
        },
        {
          "text": "Your regex should match three criminals (`CCC`) in the string `P1P5P4CCCcP2P6P3`.",
          "testCode": "assert(\n  'P1P5P4CCCcP2P6P3'.match(reCriminals) &&\n    'P1P5P4CCCcP2P6P3'.match(reCriminals)[0] == 'CCC'\n);"
        },
        {
          "text": "Your regex should match five criminals (`CCCCC`) in the string `P6P2P7P4P5CCCCCP3P1`",
          "testCode": "assert(\n  'P6P2P7P4P5CCCCCP3P1'.match(reCriminals) &&\n    'P6P2P7P4P5CCCCCP3P1'.match(reCriminals)[0] == 'CCCCC'\n);"
        },
        {
          "text": "Your regex should not match any criminals in the empty string `\"\"`",
          "testCode": "reCriminals.lastIndex = 0;\nassert(!reCriminals.test(''));"
        },
        {
          "text": "Your regex should not match any criminals in the string `P1P2P3`",
          "testCode": "reCriminals.lastIndex = 0;\nassert(!reCriminals.test('P1P2P3'));"
        },
        {
          "text": "Your regex should match fifty criminals (`CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC`) in the string `P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3`.",
          "testCode": "assert(\n  'P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3'.match(\n    reCriminals\n  ) &&\n    'P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3'.match(\n      reCriminals\n    )[0] == 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301343,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\find-one-or-more-criminals-in-a-hunt.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db4367417b2b2512b91",
      "title": "Ignore Case While Matching",
      "challengeType": 1,
      "dashedName": "ignore-case-while-matching",
      "description": "Up until now, you've looked at regexes to do literal matches of strings. But sometimes, you might want to also match case differences.\n\nCase (or sometimes letter case) is the difference between uppercase letters and lowercase letters. Examples of uppercase are `A`, `B`, and `C`. Examples of lowercase are `a`, `b`, and `c`.\n\nYou can match both cases using what is called a flag. There are other flags but here you'll focus on the flag that ignores case - the `i` flag. You can use it by appending it to the regex. An example of using this flag is `/ignorecase/i`. This regex can match the strings `ignorecase`, `igNoreCase`, and `IgnoreCase`.",
      "instructions": "Write a regex `fccRegex` to match `freeCodeCamp`, no matter its case. Your regex should not match any abbreviations or variations with spaces.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myString = \"freeCodeCamp\";\nlet fccRegex = /change/; // Change this line\nlet result = fccRegex.test(myString);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myString = \"freeCodeCamp\";\nlet fccRegex = /freecodecamp/i; // Change this line\nlet result = fccRegex.test(myString);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should match the string `freeCodeCamp`",
          "testCode": "fccRegex.lastIndex = 0; \nassert(fccRegex.test('freeCodeCamp'));"
        },
        {
          "text": "Your regex should match the string `FreeCodeCamp`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(fccRegex.test('FreeCodeCamp'));"
        },
        {
          "text": "Your regex should match the string `FreecodeCamp`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(fccRegex.test('FreecodeCamp'));"
        },
        {
          "text": "Your regex should match the string `FreeCodecamp`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(fccRegex.test('FreeCodecamp'));"
        },
        {
          "text": "Your regex should not match the string `Free Code Camp`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(!fccRegex.test('Free Code Camp'));"
        },
        {
          "text": "Your regex should match the string `FreeCOdeCamp`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(fccRegex.test('FreeCOdeCamp'));"
        },
        {
          "text": "Your regex should not match the string `FCC`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(!fccRegex.test('FCC'));"
        },
        {
          "text": "Your regex should match the string `FrEeCoDeCamp`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(fccRegex.test('FrEeCoDeCamp'));"
        },
        {
          "text": "Your regex should match the string `FrEeCodECamp`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(fccRegex.test('FrEeCodECamp'));"
        },
        {
          "text": "Your regex should match the string `FReeCodeCAmp`",
          "testCode": "fccRegex.lastIndex = 0;\nassert(fccRegex.test('FReeCodeCAmp'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301344,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\ignore-case-while-matching.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db4367417b2b2512b90",
      "title": "Match a Literal String with Different Possibilities",
      "challengeType": 1,
      "dashedName": "match-a-literal-string-with-different-possibilities",
      "description": "Using regexes like `/coding/`, you can look for the pattern `coding` in another string.\n\nThis is powerful to search single strings, but it's limited to only one pattern. You can search for multiple patterns using the `alternation` or `OR` operator: `|`.\n\nThis operator matches patterns either before or after it. For example, if you wanted to match the strings `yes` or `no`, the regex you want is `/yes|no/`.\n\nYou can also search for more than just two patterns. You can do this by adding more patterns with more `OR` operators separating them, like `/yes|no|maybe/`.",
      "instructions": "Complete the regex `petRegex` to match the pets `dog`, `cat`, `bird`, or `fish`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let petString = \"James has a pet cat.\";\nlet petRegex = /change/; // Change this line\nlet result = petRegex.test(petString);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let petString = \"James has a pet cat.\";\nlet petRegex = /dog|cat|bird|fish/; // Change this line\nlet result = petRegex.test(petString);"
        }
      ],
      "tests": [
        {
          "text": "Your regex `petRegex` should return `true` for the string `John has a pet dog.`",
          "testCode": "petRegex.lastIndex = 0;\nassert(petRegex.test('John has a pet dog.'));"
        },
        {
          "text": "Your regex `petRegex` should return `false` for the string `Emma has a pet rock.`",
          "testCode": "petRegex.lastIndex = 0;\nassert(!petRegex.test('Emma has a pet rock.'));"
        },
        {
          "text": "Your regex `petRegex` should return `true` for the string `Emma has a pet bird.`",
          "testCode": "petRegex.lastIndex = 0;\nassert(petRegex.test('Emma has a pet bird.'));"
        },
        {
          "text": "Your regex `petRegex` should return `true` for the string `Liz has a pet cat.`",
          "testCode": "petRegex.lastIndex = 0;\nassert(petRegex.test('Liz has a pet cat.'));"
        },
        {
          "text": "Your regex `petRegex` should return `false` for the string `Kara has a pet dolphin.`",
          "testCode": "petRegex.lastIndex = 0;\nassert(!petRegex.test('Kara has a pet dolphin.'));"
        },
        {
          "text": "Your regex `petRegex` should return `true` for the string `Alice has a pet fish.`",
          "testCode": "petRegex.lastIndex = 0;\nassert(petRegex.test('Alice has a pet fish.'));"
        },
        {
          "text": "Your regex `petRegex` should return `false` for the string `Jimmy has a pet computer.`",
          "testCode": "petRegex.lastIndex = 0;\nassert(!petRegex.test('Jimmy has a pet computer.'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301345,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-a-literal-string-with-different-possibilities.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db7367417b2b2512b9f",
      "title": "Match All Letters and Numbers",
      "challengeType": 1,
      "dashedName": "match-all-letters-and-numbers",
      "description": "Using character classes, you were able to search for all letters of the alphabet with `[a-z]`. This kind of character class is common enough that there is a shortcut for it, although it includes a few extra characters as well.\n\nThe closest character class in JavaScript to match the alphabet is `\\w`. This shortcut is equal to `[A-Za-z0-9_]`. This character class matches upper and lowercase letters plus numbers. Note, this character class also includes the underscore character (`_`).\n\n```js\nlet longHand = /[A-Za-z0-9_]+/;\nlet shortHand = /\\w+/;\nlet numbers = \"42\";\nlet varNames = \"important_var\";\nlongHand.test(numbers);\nshortHand.test(numbers);\nlongHand.test(varNames);\nshortHand.test(varNames);\n```\n\nAll four of these `test` calls would return `true`.\n\nThese shortcut character classes are also known as <dfn>shorthand character classes</dfn>.",
      "instructions": "Use the shorthand character class `\\w` to count the number of alphanumeric characters in various quotes and strings.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet alphabetRegexV2 = /change/; // Change this line\nlet result = quoteSample.match(alphabetRegexV2).length;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet alphabetRegexV2 = /\\w/g; // Change this line\nlet result = quoteSample.match(alphabetRegexV2).length;"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use the global flag.",
          "testCode": "assert(alphabetRegexV2.global);"
        },
        {
          "text": "Your regex should use the shorthand character `\\w` to match all characters which are alphanumeric.",
          "testCode": "assert(/\\\\w/.test(alphabetRegexV2.source));"
        },
        {
          "text": "Your regex should find 31 alphanumeric characters in the string `The five boxing wizards jump quickly.`",
          "testCode": "assert(\n  'The five boxing wizards jump quickly.'.match(alphabetRegexV2).length === 31\n);"
        },
        {
          "text": "Your regex should find 32 alphanumeric characters in the string `Pack my box with five dozen liquor jugs.`",
          "testCode": "assert(\n  'Pack my box with five dozen liquor jugs.'.match(alphabetRegexV2).length ===\n    32\n);"
        },
        {
          "text": "Your regex should find 30 alphanumeric characters in the string `How vexingly quick daft zebras jump!`",
          "testCode": "assert(\n  'How vexingly quick daft zebras jump!'.match(alphabetRegexV2).length === 30\n);"
        },
        {
          "text": "Your regex should find 36 alphanumeric characters in the string `123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.`",
          "testCode": "assert(\n  '123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.'.match(alphabetRegexV2)\n    .length === 36\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301346,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-all-letters-and-numbers.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db8367417b2b2512ba1",
      "title": "Match All Non-Numbers",
      "challengeType": 1,
      "dashedName": "match-all-non-numbers",
      "description": "The last challenge showed how to search for digits using the shortcut `\\d` with a lowercase `d`. You can also search for non-digits using a similar shortcut that uses an uppercase `D` instead.\n\nThe shortcut to look for non-digit characters is `\\D`. This is equal to the character class `[^0-9]`, which looks for a single character that is not a number between zero and nine.",
      "instructions": "Use the shorthand character class for non-digits `\\D` to count how many non-digits are in movie titles.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let movieName = \"2001: A Space Odyssey\";\nlet noNumRegex = /change/; // Change this line\nlet result = movieName.match(noNumRegex).length;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let movieName = \"2001: A Space Odyssey\";\nlet noNumRegex = /\\D/g; // Change this line\nlet result = movieName.match(noNumRegex).length;"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use the shortcut character to match non-digit characters",
          "testCode": "assert(/\\\\D/.test(noNumRegex.source));"
        },
        {
          "text": "Your regex should use the global flag.",
          "testCode": "assert(noNumRegex.global);"
        },
        {
          "text": "Your regex should find no non-digits in the string `9`.",
          "testCode": "assert('9'.match(noNumRegex) == null);"
        },
        {
          "text": "Your regex should find 6 non-digits in the string `Catch 22`.",
          "testCode": "assert('Catch 22'.match(noNumRegex).length == 6);"
        },
        {
          "text": "Your regex should find 11 non-digits in the string `101 Dalmatians`.",
          "testCode": "assert('101 Dalmatians'.match(noNumRegex).length == 11);"
        },
        {
          "text": "Your regex should find 15 non-digits in the string `One, Two, Three`.",
          "testCode": "assert('One, Two, Three'.match(noNumRegex).length == 15);"
        },
        {
          "text": "Your regex should find 12 non-digits in the string `21 Jump Street`.",
          "testCode": "assert('21 Jump Street'.match(noNumRegex).length == 12);"
        },
        {
          "text": "Your regex should find 17 non-digits in the string `2001: A Space Odyssey`.",
          "testCode": "assert('2001: A Space Odyssey'.match(noNumRegex).length == 17);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301347,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-all-non-numbers.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "5d712346c441eddfaeb5bdef",
      "title": "Match All Numbers",
      "challengeType": 1,
      "dashedName": "match-all-numbers",
      "description": "You've learned shortcuts for common string patterns like alphanumerics. Another common pattern is looking for just digits or numbers.\n\nThe shortcut to look for digit characters is `\\d`, with a lowercase `d`. This is equal to the character class `[0-9]`, which looks for a single character of any number between zero and nine.",
      "instructions": "Use the shorthand character class `\\d` to count how many digits are in movie titles. Written out numbers (\"six\" instead of 6) do not count.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let movieName = \"2001: A Space Odyssey\";\nlet numRegex = /change/; // Change this line\nlet result = movieName.match(numRegex).length;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let movieName = \"2001: A Space Odyssey\";\nlet numRegex = /\\d/g; // Change this line\nlet result = movieName.match(numRegex).length;"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use the shortcut character to match digit characters",
          "testCode": "assert(/\\\\d/.test(numRegex.source));"
        },
        {
          "text": "Your regex should use the global flag.",
          "testCode": "assert(numRegex.global);"
        },
        {
          "text": "Your regex should find 1 digit in the string `9`.",
          "testCode": "assert('9'.match(numRegex).length == 1);"
        },
        {
          "text": "Your regex should find 2 digits in the string `Catch 22`.",
          "testCode": "assert('Catch 22'.match(numRegex).length == 2);"
        },
        {
          "text": "Your regex should find 3 digits in the string `101 Dalmatians`.",
          "testCode": "assert('101 Dalmatians'.match(numRegex).length == 3);"
        },
        {
          "text": "Your regex should find no digits in the string `One, Two, Three`.",
          "testCode": "assert('One, Two, Three'.match(numRegex) == null);"
        },
        {
          "text": "Your regex should find 2 digits in the string `21 Jump Street`.",
          "testCode": "assert('21 Jump Street'.match(numRegex).length == 2);"
        },
        {
          "text": "Your regex should find 4 digits in the string `2001: A Space Odyssey`.",
          "testCode": "assert('2001: A Space Odyssey'.match(numRegex).length == 4);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18181,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-all-numbers.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db5367417b2b2512b94",
      "title": "Match Anything with Wildcard Period",
      "challengeType": 1,
      "dashedName": "match-anything-with-wildcard-period",
      "description": "Sometimes you won't (or don't need to) know the exact characters in your patterns. Thinking of all words that match, say, a misspelling would take a long time. Luckily, you can save time using the wildcard character: `.`\n\nThe wildcard character `.` will match any one character. The wildcard is also called `dot` and `period`. You can use the wildcard character just like any other character in the regex. For example, if you wanted to match `hug`, `huh`, `hut`, and `hum`, you can use the regex `/hu./` to match all four words.\n\n```js\nlet humStr = \"I'll hum a song\";\nlet hugStr = \"Bear hug\";\nlet huRegex = /hu./;\nhuRegex.test(humStr);\nhuRegex.test(hugStr);\n```\n\nBoth of these `test` calls would return `true`.",
      "instructions": "Complete the regex `unRegex` so that it matches the strings `run`, `sun`, `fun`, `pun`, `nun`, and `bun`. Your regex should use the wildcard character.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let exampleStr = \"Let's have fun with regular expressions!\";\nlet unRegex = /change/; // Change this line\nlet result = unRegex.test(exampleStr);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let exampleStr = \"Let's have fun with regular expressions!\";\nlet unRegex = /.un/; // Change this line\nlet result = unRegex.test(exampleStr);"
        }
      ],
      "tests": [
        {
          "text": "You should use the `.test()` method.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.test\\(.*\\)/));"
        },
        {
          "text": "You should use the wildcard character in your regex `unRegex`",
          "testCode": "assert(/\\./.test(unRegex.source));"
        },
        {
          "text": "Your regex `unRegex` should match `run` in the string `Let us go on a run.`",
          "testCode": "unRegex.lastIndex = 0;\nassert(unRegex.test('Let us go on a run.'));"
        },
        {
          "text": "Your regex `unRegex` should match `sun` in the string `The sun is out today.`",
          "testCode": "unRegex.lastIndex = 0;\nassert(unRegex.test('The sun is out today.'));"
        },
        {
          "text": "Your regex `unRegex` should match `fun` in the string `Coding is a lot of fun.`",
          "testCode": "unRegex.lastIndex = 0;\nassert(unRegex.test('Coding is a lot of fun.'));"
        },
        {
          "text": "Your regex `unRegex` should match `pun` in the string `Seven days without a pun makes one weak.`",
          "testCode": "unRegex.lastIndex = 0;\nassert(unRegex.test('Seven days without a pun makes one weak.'));"
        },
        {
          "text": "Your regex `unRegex` should match `nun` in the string `One takes a vow to be a nun.`",
          "testCode": "unRegex.lastIndex = 0;\nassert(unRegex.test('One takes a vow to be a nun.'));"
        },
        {
          "text": "Your regex `unRegex` should match `bun` in the string `She got fired from the hot dog stand for putting her hair in a bun.`",
          "testCode": "unRegex.lastIndex = 0;\nassert(\n  unRegex.test(\n    'She got fired from the hot dog stand for putting her hair in a bun.'\n  )\n);"
        },
        {
          "text": "Your regex `unRegex` should not match the string `There is a bug in my code.`",
          "testCode": "unRegex.lastIndex = 0;\nassert(!unRegex.test('There is a bug in my code.'));"
        },
        {
          "text": "Your regex `unRegex` should not match the string `Catch me if you can.`",
          "testCode": "unRegex.lastIndex = 0;\nassert(!unRegex.test('Catch me if you can.'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301348,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-anything-with-wildcard-period.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db7367417b2b2512b9d",
      "title": "Match Beginning String Patterns",
      "challengeType": 1,
      "dashedName": "match-beginning-string-patterns",
      "description": "Prior challenges showed that regular expressions can be used to look for a number of matches. They are also used to search for patterns in specific positions in strings.\n\nIn an earlier challenge, you used the caret character (`^`) inside a character set to create a negated character set in the form `[^thingsThatWillNotBeMatched]`. Outside of a character set, the caret is used to search for patterns at the beginning of strings.\n\n```js\nlet firstString = \"Ricky is first and can be found.\";\nlet firstRegex = /^Ricky/;\nfirstRegex.test(firstString);\nlet notFirst = \"You can't find Ricky now.\";\nfirstRegex.test(notFirst);\n```\n\nThe first `test` call would return `true`, while the second would return `false`.",
      "instructions": "Use the caret character in a regex to find `Cal` only in the beginning of the string `rickyAndCal`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let rickyAndCal = \"Cal and Ricky both like racing.\";\nlet calRegex = /change/; // Change this line\nlet result = calRegex.test(rickyAndCal);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let rickyAndCal = \"Cal and Ricky both like racing.\";\nlet calRegex = /^Cal/; // Change this line\nlet result = calRegex.test(rickyAndCal);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should search for the string `Cal` with a capital letter.",
          "testCode": "assert(calRegex.source == '^Cal');"
        },
        {
          "text": "Your regex should not use any flags.",
          "testCode": "assert(calRegex.flags == '');"
        },
        {
          "text": "Your regex should match the string `Cal` at the beginning of the string.",
          "testCode": "calRegex.lastIndex = 0;\nassert(calRegex.test('Cal and Ricky both like racing.'));"
        },
        {
          "text": "Your regex should not match the string `Cal` in the middle of a string.",
          "testCode": "calRegex.lastIndex = 0;\nassert(!calRegex.test('Ricky and Cal both like racing.'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301349,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-beginning-string-patterns.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db6367417b2b2512b99",
      "title": "Match Characters that Occur One or More Times",
      "challengeType": 1,
      "dashedName": "match-characters-that-occur-one-or-more-times",
      "description": "Sometimes, you need to match a character (or group of characters) that appears one or more times in a row. This means it occurs at least once, and may be repeated.\n\nYou can use the `+` character to check if that is the case. Remember, the character or pattern has to be present consecutively. That is, the character has to repeat one after the other.\n\nFor example, `/a+/g` would find one match in `abc` and return `[\"a\"]`. Because of the `+`, it would also find a single match in `aabc` and return `[\"aa\"]`.\n\nIf it were instead checking the string `abab`, it would find two matches and return `[\"a\", \"a\"]` because the `a` characters are not in a row - there is a `b` between them. Finally, since there is no `a` in the string `bcd`, it wouldn't find a match.",
      "instructions": "You want to find matches when the letter `s` occurs one or more times in `Mississippi`. Write a regex that uses the `+` sign.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let difficultSpelling = \"Mississippi\";\nlet myRegex = /change/; // Change this line\nlet result = difficultSpelling.match(myRegex);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let difficultSpelling = \"Mississippi\";\nlet myRegex = /s+/g; // Change this line\nlet result = difficultSpelling.match(myRegex);"
        }
      ],
      "tests": [
        {
          "text": "Your regex `myRegex` should use the `+` sign to match one or more `s` characters.",
          "testCode": "assert(/\\+/.test(myRegex.source));"
        },
        {
          "text": "Your regex `myRegex` should match 2 items.",
          "testCode": "assert(result.length == 2);"
        },
        {
          "text": "The `result` variable should be an array with two matches of `ss`",
          "testCode": "assert(result[0] == 'ss' && result[1] == 'ss');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301350,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-characters-that-occur-one-or-more-times.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db6367417b2b2512b9a",
      "title": "Match Characters that Occur Zero or More Times",
      "challengeType": 1,
      "dashedName": "match-characters-that-occur-zero-or-more-times",
      "description": "The last challenge used the plus `+` sign to look for characters that occur one or more times. There's also an option that matches characters that occur zero or more times.\n\nThe character to do this is the asterisk or star: `*`.\n\n```js\nlet soccerWord = \"gooooooooal!\";\nlet gPhrase = \"gut feeling\";\nlet oPhrase = \"over the moon\";\nlet goRegex = /go*/;\nsoccerWord.match(goRegex);\ngPhrase.match(goRegex);\noPhrase.match(goRegex);\n```\n\nIn order, the three `match` calls would return the values `[\"goooooooo\"]`, `[\"g\"]`, and `null`.",
      "instructions": "For this challenge, `chewieQuote` has been initialized as the string `Aaaaaaaaaaaaaaaarrrgh!` behind the scenes. Create a regex `chewieRegex` that uses the `*` character to match an uppercase `A` character immediately followed by zero or more lowercase `a` characters in `chewieQuote`. Your regex does not need flags or character classes, and it should not match any of the other quotes.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Only change code below this line\nlet chewieRegex = /change/; // Change this line\n// Only change code above this line\n\nlet result = chewieQuote.match(chewieRegex);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let chewieRegex = /Aa*/;\n  let result = chewieQuote.match(chewieRegex);"
        }
      ],
      "tests": [
        {
          "text": "Your regex `chewieRegex` should use the `*` character to match zero or more `a` characters.",
          "testCode": "assert(/\\*/.test(chewieRegex.source));"
        },
        {
          "text": "Your regex should match the string `A` in `chewieQuote`.",
          "testCode": "assert(result[0][0] === 'A');"
        },
        {
          "text": "Your regex should match the string `Aaaaaaaaaaaaaaaa` in `chewieQuote`.",
          "testCode": "assert(result[0] === 'Aaaaaaaaaaaaaaaa');"
        },
        {
          "text": "Your regex `chewieRegex` should match 16 characters in `chewieQuote`.",
          "testCode": "assert(result[0].length === 16);"
        },
        {
          "text": "Your regex should not match any characters in the string `He made a fair move. Screaming about it can't help you.`",
          "testCode": "assert(\n  !\"He made a fair move. Screaming about it can't help you.\".match(chewieRegex)\n);"
        },
        {
          "text": "Your regex should not match any characters in the string `Let him have it. It's not wise to upset a Wookiee.`",
          "testCode": "assert(\n  !\"Let him have it. It's not wise to upset a Wookiee.\".match(chewieRegex)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301351,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-characters-that-occur-zero-or-more-times.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "const chewieQuote = \"Aaaaaaaaaaaaaaaarrrgh!\";"
          }
        ]
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db7367417b2b2512b9e",
      "title": "Match Ending String Patterns",
      "challengeType": 1,
      "dashedName": "match-ending-string-patterns",
      "description": "In the last challenge, you learned to use the caret character to search for patterns at the beginning of strings. There is also a way to search for patterns at the end of strings.\n\nYou can search the end of strings using the dollar sign character `$` at the end of the regex.\n\n```js\nlet theEnding = \"This is a never ending story\";\nlet storyRegex = /story$/;\nstoryRegex.test(theEnding);\nlet noEnding = \"Sometimes a story will have to end\";\nstoryRegex.test(noEnding);\n```\n\nThe first `test` call would return `true`, while the second would return `false`.",
      "instructions": "Use the anchor character (`$`) to match the string `caboose` at the end of the string `caboose`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let caboose = \"The last car on a train is the caboose\";\nlet lastRegex = /change/; // Change this line\nlet result = lastRegex.test(caboose);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let caboose = \"The last car on a train is the caboose\";\nlet lastRegex = /caboose$/; // Change this line\nlet result = lastRegex.test(caboose);"
        }
      ],
      "tests": [
        {
          "text": "You should search for `caboose` with the dollar sign `$` anchor in your regex.",
          "testCode": "assert(lastRegex.source == 'caboose$');"
        },
        {
          "text": "Your regex should not use any flags.",
          "testCode": "assert(lastRegex.flags == '');"
        },
        {
          "text": "You should match `caboose` at the end of the string `The last car on a train is the caboose`",
          "testCode": "lastRegex.lastIndex = 0;\nassert(lastRegex.test('The last car on a train is the caboose'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301352,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-ending-string-patterns.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db8367417b2b2512ba0",
      "title": "Match Everything But Letters and Numbers",
      "challengeType": 1,
      "dashedName": "match-everything-but-letters-and-numbers",
      "description": "You've learned that you can use a shortcut to match alphanumerics `[A-Za-z0-9_]` using `\\w`. A natural pattern you might want to search for is the opposite of alphanumerics.\n\nYou can search for the opposite of the `\\w` with `\\W`. Note, the opposite pattern uses a capital letter. This shortcut is the same as `[^A-Za-z0-9_]`.\n\n```js\nlet shortHand = /\\W/;\nlet numbers = \"42%\";\nlet sentence = \"Coding!\";\nnumbers.match(shortHand);\nsentence.match(shortHand);\n```\n\nThe first `match` call would return the value `[\"%\"]` and the second would return `[\"!\"]`.",
      "instructions": "Use the shorthand character class `\\W` to count the number of non-alphanumeric characters in various quotes and strings.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet nonAlphabetRegex = /change/; // Change this line\nlet result = quoteSample.match(nonAlphabetRegex).length;"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let quoteSample = \"The five boxing wizards_jump quickly.\";\nlet nonAlphabetRegex = /\\W/g; // Change this line\nlet result = quoteSample.match(nonAlphabetRegex).length;"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use the global flag.",
          "testCode": "assert(nonAlphabetRegex.global);"
        },
        {
          "text": "Your regex should find 6 non-alphanumeric characters in the string `The five boxing wizards jump quickly.`.",
          "testCode": "assert(\n  'The five boxing wizards jump quickly.'.match(nonAlphabetRegex).length == 6\n);"
        },
        {
          "text": "Your regex should use the shorthand character to match characters which are non-alphanumeric.",
          "testCode": "assert(/\\\\W/.test(nonAlphabetRegex.source));"
        },
        {
          "text": "Your regex should find 8 non-alphanumeric characters in the string `Pack my box with five dozen liquor jugs.`",
          "testCode": "assert(\n  'Pack my box with five dozen liquor jugs.'.match(nonAlphabetRegex).length == 8\n);"
        },
        {
          "text": "Your regex should find 6 non-alphanumeric characters in the string `How vexingly quick daft zebras jump!`",
          "testCode": "assert(\n  'How vexingly quick daft zebras jump!'.match(nonAlphabetRegex).length == 6\n);"
        },
        {
          "text": "Your regex should find 12 non-alphanumeric characters in the string `123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.`",
          "testCode": "assert(\n  '123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.'.match(nonAlphabetRegex)\n    .length == 12\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301353,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-everything-but-letters-and-numbers.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db5367417b2b2512b96",
      "title": "Match Letters of the Alphabet",
      "challengeType": 1,
      "dashedName": "match-letters-of-the-alphabet",
      "description": "You saw how you can use <dfn>character sets</dfn> to specify a group of characters to match, but that's a lot of typing when you need to match a large range of characters (for example, every letter in the alphabet). Fortunately, there is a built-in feature that makes this short and simple.\n\nInside a character set, you can define a range of characters to match using a hyphen character: `-`.\n\nFor example, to match lowercase letters `a` through `e` you would use `[a-e]`.\n\n```js\nlet catStr = \"cat\";\nlet batStr = \"bat\";\nlet matStr = \"mat\";\nlet bgRegex = /[a-e]at/;\ncatStr.match(bgRegex);\nbatStr.match(bgRegex);\nmatStr.match(bgRegex);\n```\n\nIn order, the three `match` calls would return the values `[\"cat\"]`, `[\"bat\"]`, and `null`.",
      "instructions": "Match all the letters in the string `quoteSample`.\n\n**Note**: Be sure to match both uppercase and lowercase letters.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let quoteSample = \"The quick brown fox jumps over the lazy dog.\";\nlet alphabetRegex = /change/; // Change this line\nlet result = alphabetRegex; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let quoteSample = \"The quick brown fox jumps over the lazy dog.\";\nlet alphabetRegex = /[a-z]/gi; // Change this line\nlet result = quoteSample.match(alphabetRegex); // Change this line"
        }
      ],
      "tests": [
        {
          "text": "Your regex `alphabetRegex` should match 35 items.",
          "testCode": "assert(result.length == 35);"
        },
        {
          "text": "Your regex `alphabetRegex` should use the global flag.",
          "testCode": "assert(alphabetRegex.flags.match(/g/).length == 1);"
        },
        {
          "text": "Your regex `alphabetRegex` should use the case insensitive flag.",
          "testCode": "assert(alphabetRegex.flags.match(/i/).length == 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301354,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-letters-of-the-alphabet.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db3367417b2b2512b8f",
      "title": "Match Literal Strings",
      "challengeType": 1,
      "dashedName": "match-literal-strings",
      "description": "In the last challenge, you searched for the word `Hello` using the regular expression `/Hello/`. That regex searched for a literal match of the string `Hello`. Here's another example searching for a literal match of the string `Kevin`:\n\n```js\nlet testStr = \"Hello, my name is Kevin.\";\nlet testRegex = /Kevin/;\ntestRegex.test(testStr);\n```\n\nThis `test` call will return `true`.\n\nAny other forms of `Kevin` will not match. For example, the regex `/Kevin/` will not match `kevin` or `KEVIN`.\n\n```js\nlet wrongRegex = /kevin/;\nwrongRegex.test(testStr);\n```\n\nThis `test` call will return `false`.\n\nA future challenge will show how to match those other forms as well.",
      "instructions": "Complete the regex `waldoRegex` to find `\"Waldo\"` in the string `waldoIsHiding` with a literal match.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /search/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /Waldo/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);"
        }
      ],
      "tests": [
        {
          "text": "Your regex `waldoRegex` should find the string `Waldo`",
          "testCode": "waldoRegex.lastIndex = 0;\nassert(waldoRegex.test(waldoIsHiding));"
        },
        {
          "text": "Your regex `waldoRegex` should not search for anything else.",
          "testCode": "waldoRegex.lastIndex = 0;\nassert(!waldoRegex.test('Somewhere is hiding in this text.'));"
        },
        {
          "text": "You should perform a literal string match with your regex.",
          "testCode": "assert(!/\\/.*\\/i/.test(__helpers.removeJSComments(code)));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301355,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-literal-strings.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db9367417b2b2512ba4",
      "title": "Match Non-Whitespace Characters",
      "challengeType": 1,
      "dashedName": "match-non-whitespace-characters",
      "description": "You learned about searching for whitespace using `\\s`, with a lowercase `s`. You can also search for everything except whitespace.\n\nSearch for non-whitespace using `\\S`, which is an uppercase `s`. This pattern will not match whitespace, carriage return, tab, form feed, and new line characters. You can think of it being similar to the character class `[^ \\r\\t\\f\\n\\v]`.\n\n```js\nlet whiteSpace = \"Whitespace. Whitespace everywhere!\"\nlet nonSpaceRegex = /\\S/g;\nwhiteSpace.match(nonSpaceRegex).length;\n```\n\nThe value returned by the `.length` method would be `32`.",
      "instructions": "Change the regex `countNonWhiteSpace` to look for multiple non-whitespace characters in a string.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let sample = \"Whitespace is important in separating words\";\nlet countNonWhiteSpace = /change/; // Change this line\nlet result = sample.match(countNonWhiteSpace);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let sample = \"Whitespace is important in separating words\";\nlet countNonWhiteSpace = /\\S/g; // Change this line\nlet result = sample.match(countNonWhiteSpace);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use the global flag.",
          "testCode": "assert(countNonWhiteSpace.global);"
        },
        {
          "text": "Your regex should use the shorthand character `\\S` to match all non-whitespace characters.",
          "testCode": "assert(/\\\\S/.test(countNonWhiteSpace.source));"
        },
        {
          "text": "Your regex should find 35 non-spaces in the string `Men are from Mars and women are from Venus.`",
          "testCode": "assert(\n  'Men are from Mars and women are from Venus.'.match(countNonWhiteSpace)\n    .length == 35\n);"
        },
        {
          "text": "Your regex should find 23 non-spaces in the string `Space: the final frontier.`",
          "testCode": "assert('Space: the final frontier.'.match(countNonWhiteSpace).length == 23);"
        },
        {
          "text": "Your regex should find 21 non-spaces in the string `MindYourPersonalSpace`",
          "testCode": "assert('MindYourPersonalSpace'.match(countNonWhiteSpace).length == 21);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18210,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-non-whitespace-characters.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db5367417b2b2512b97",
      "title": "Match Numbers and Letters of the Alphabet",
      "challengeType": 1,
      "dashedName": "match-numbers-and-letters-of-the-alphabet",
      "description": "Using the hyphen (`-`) to match a range of characters is not limited to letters. It also works to match a range of numbers.\n\nFor example, `/[0-5]/` matches any number between `0` and `5`, including the `0` and `5`.\n\nAlso, it is possible to combine a range of letters and numbers in a single character set.\n\n```js\nlet jennyStr = \"Jenny8675309\";\nlet myRegex = /[a-z0-9]/ig;\njennyStr.match(myRegex);\n```",
      "instructions": "Create a single regex that matches a range of letters between `h` and `s`, and a range of numbers between `2` and `6`. Remember to include the appropriate flags in the regex.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let quoteSample = \"Blueberry 3.141592653s are delicious.\";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let quoteSample = \"Blueberry 3.141592653s are delicious.\";\nlet myRegex = /[h-s2-6]/gi; // Change this line\nlet result = quoteSample.match(myRegex); // Change this line"
        }
      ],
      "tests": [
        {
          "text": "Your regex `myRegex` should match 17 items.",
          "testCode": "assert(result.length == 17);"
        },
        {
          "text": "Your regex `myRegex` should use the global flag.",
          "testCode": "assert(myRegex.flags.match(/g/).length == 1);"
        },
        {
          "text": "Your regex `myRegex` should use the case insensitive flag.",
          "testCode": "assert(myRegex.flags.match(/i/).length == 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301356,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-numbers-and-letters-of-the-alphabet.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db5367417b2b2512b95",
      "title": "Match Single Character with Multiple Possibilities",
      "challengeType": 1,
      "dashedName": "match-single-character-with-multiple-possibilities",
      "description": "You learned how to match literal patterns (`/literal/`) and wildcard character (`/./`). Those are the extremes of regular expressions, where one finds exact matches and the other matches everything. There are options that are a balance between the two extremes.\n\nYou can search for a literal pattern with some flexibility with <dfn>character classes</dfn>. Character classes allow you to define a group of characters you wish to match by placing them inside square (`[` and `]`) brackets.\n\nFor example, you want to match `bag`, `big`, and `bug` but not `bog`. You can create the regex `/b[aiu]g/` to do this. The `[aiu]` is the character class that will only match the characters `a`, `i`, or `u`.\n\n```js\nlet bigStr = \"big\";\nlet bagStr = \"bag\";\nlet bugStr = \"bug\";\nlet bogStr = \"bog\";\nlet bgRegex = /b[aiu]g/;\nbigStr.match(bgRegex);\nbagStr.match(bgRegex);\nbugStr.match(bgRegex);\nbogStr.match(bgRegex);\n```\n\nIn order, the four `match` calls would return the values `[\"big\"]`, `[\"bag\"]`, `[\"bug\"]`, and `null`.",
      "instructions": "Use a character class with vowels (`a`, `e`, `i`, `o`, `u`) in your regex `vowelRegex` to find all the vowels in the string `quoteSample`.\n\n**Note:** Be sure to match both upper- and lowercase vowels.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let quoteSample = \"Beware of bugs in the above code; I have only proved it correct, not tried it.\";\nlet vowelRegex = /change/; // Change this line\nlet result = vowelRegex; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let quoteSample = \"Beware of bugs in the above code; I have only proved it correct, not tried it.\";\nlet vowelRegex = /[aeiou]/gi; // Change this line\nlet result = quoteSample.match(vowelRegex); // Change this line"
        }
      ],
      "tests": [
        {
          "text": "You should find all 25 vowels.",
          "testCode": "assert(result.length == 25);"
        },
        {
          "text": "Your regex `vowelRegex` should use a character class.",
          "testCode": "assert(/\\[.*\\]/.test(vowelRegex.source));"
        },
        {
          "text": "Your regex `vowelRegex` should use the global flag.",
          "testCode": "assert(vowelRegex.flags.match(/g/).length == 1);"
        },
        {
          "text": "Your regex `vowelRegex` should use the case insensitive flag.",
          "testCode": "assert(vowelRegex.flags.match(/i/).length == 1);"
        },
        {
          "text": "Your regex should not match any consonants.",
          "testCode": "assert(!/[b-df-hj-np-tv-z]/gi.test(result.join()));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301357,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-single-character-with-multiple-possibilities.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db6367417b2b2512b98",
      "title": "Match Single Characters Not Specified",
      "challengeType": 1,
      "dashedName": "match-single-characters-not-specified",
      "description": "So far, you have created a set of characters that you want to match, but you could also create a set of characters that you do not want to match. These types of character sets are called <dfn>negated character sets</dfn>.\n\nTo create a negated character set, you place a caret character (`^`) after the opening bracket and before the characters you do not want to match.\n\nFor example, `/[^aeiou]/gi` matches all characters that are not a vowel. Note that characters like `.`, `!`, `[`, `@`, `/` and white space are matched - the negated vowel character set only excludes the vowel characters.",
      "instructions": "Create a single regex that matches all characters that are not a number or a vowel. Remember to include the appropriate flags in the regex.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let quoteSample = \"3 blind mice.\";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let quoteSample = \"3 blind mice.\";\nlet myRegex = /[^0-9aeiou]/gi; // Change this line\nlet result = quoteSample.match(myRegex); // Change this line"
        }
      ],
      "tests": [
        {
          "text": "Your regex `myRegex` should match 9 items.",
          "testCode": "assert(result.length == 9);"
        },
        {
          "text": "Your regex `myRegex` should use the global flag.",
          "testCode": "assert(myRegex.flags.match(/g/).length == 1);"
        },
        {
          "text": "Your regex `myRegex` should use the case insensitive flag.",
          "testCode": "assert(myRegex.flags.match(/i/).length == 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301358,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-single-characters-not-specified.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db8367417b2b2512ba3",
      "title": "Match Whitespace",
      "challengeType": 1,
      "dashedName": "match-whitespace",
      "description": "The challenges so far have covered matching letters of the alphabet and numbers. You can also match the whitespace or spaces between letters.\n\nYou can search for whitespace using `\\s`, which is a lowercase `s`. This pattern not only matches whitespace, but also carriage return, tab, form feed, and new line characters. You can think of it as similar to the character class `[ \\r\\t\\f\\n\\v]`.\n\n```js\nlet whiteSpace = \"Whitespace. Whitespace everywhere!\"\nlet spaceRegex = /\\s/g;\nwhiteSpace.match(spaceRegex);\n```\n\nThis `match` call would return `[\" \", \" \"]`.",
      "instructions": "Change the regex `countWhiteSpace` to look for multiple whitespace characters in a string.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let sample = \"Whitespace is important in separating words\";\nlet countWhiteSpace = /change/; // Change this line\nlet result = sample.match(countWhiteSpace);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let sample = \"Whitespace is important in separating words\";\nlet countWhiteSpace = /\\s/g;\nlet result = sample.match(countWhiteSpace);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use the global flag.",
          "testCode": "assert(countWhiteSpace.global);"
        },
        {
          "text": "Your regex should use the shorthand character `\\s` to match all whitespace characters.",
          "testCode": "assert(/\\\\s/.test(countWhiteSpace.source));"
        },
        {
          "text": "Your regex should find eight spaces in the string `Men are from Mars and women are from Venus.`",
          "testCode": "assert(\n  'Men are from Mars and women are from Venus.'.match(countWhiteSpace).length ==\n    8\n);"
        },
        {
          "text": "Your regex should find three spaces in the string `Space: the final frontier.`",
          "testCode": "assert('Space: the final frontier.'.match(countWhiteSpace).length == 3);"
        },
        {
          "text": "Your regex should find no spaces in the string `MindYourPersonalSpace`",
          "testCode": "assert('MindYourPersonalSpace'.match(countWhiteSpace) == null);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301359,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\match-whitespace.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7dba367417b2b2512ba9",
      "title": "Positive and Negative Lookahead",
      "challengeType": 1,
      "dashedName": "positive-and-negative-lookahead",
      "description": "<dfn>Lookaheads</dfn> are patterns that tell JavaScript to look-ahead in your string to check for patterns further along. This can be useful when you want to search for multiple patterns over the same string.\n\nThere are two kinds of lookaheads: <dfn>positive lookahead</dfn> and <dfn>negative lookahead</dfn>.\n\nA positive lookahead will look to make sure the element in the search pattern is there, but won't actually match it. A positive lookahead is used as `(?=...)` where the `...` is the required part that is not matched.\n\nOn the other hand, a negative lookahead will look to make sure the element in the search pattern is not there. A negative lookahead is used as `(?!...)` where the `...` is the pattern that you do not want to be there. The rest of the pattern is returned if the negative lookahead part is not present.\n\nLookaheads are a bit confusing but some examples will help.\n\n```js\nlet quit = \"qu\";\nlet noquit = \"qt\";\nlet quRegex= /q(?=u)/;\nlet qRegex = /q(?!u)/;\nquit.match(quRegex);\nnoquit.match(qRegex);\n```\n\nBoth of these `match` calls would return `[\"q\"]`.\n\nA more practical use of lookaheads is to check two or more patterns in one string. Here is a (naively) simple password checker that looks for between 3 and 6 characters and at least one number:\n\n```js\nlet password = \"abc123\";\nlet checkPass = /(?=\\w{3,6})(?=\\D*\\d)/;\ncheckPass.test(password);\n```",
      "instructions": "Use lookaheads in the `pwRegex` to match passwords that are greater than 5 characters long, and have two consecutive digits.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let sampleWord = \"astronaut\";\nlet pwRegex = /change/; // Change this line\nlet result = pwRegex.test(sampleWord);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let pwRegex =  /(?=\\w{6})(?=\\w*\\d{2})/;"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use two positive `lookaheads`.",
          "testCode": "assert(pwRegex.source.match(/\\(\\?=.*?\\)\\(\\?=.*?\\)/) !== null);"
        },
        {
          "text": "Your regex should not match the string `astronaut`",
          "testCode": "pwRegex.lastIndex = 0;\nassert(!pwRegex.test('astronaut'));"
        },
        {
          "text": "Your regex should not match the string `banan1`",
          "testCode": "pwRegex.lastIndex = 0;\nassert(!pwRegex.test('banan1'));"
        },
        {
          "text": "Your regex should match the string `bana12`",
          "testCode": "pwRegex.lastIndex = 0;\nassert(pwRegex.test('bana12'));"
        },
        {
          "text": "Your regex should match the string `abc123`",
          "testCode": "pwRegex.lastIndex = 0;\nassert(pwRegex.test('abc123'));"
        },
        {
          "text": "Your regex should not match the string `12345`",
          "testCode": "pwRegex.lastIndex = 0;\nassert(!pwRegex.test('12345'));"
        },
        {
          "text": "Your regex should match the string `8pass99`",
          "testCode": "pwRegex.lastIndex = 0;\nassert(pwRegex.test('8pass99'));"
        },
        {
          "text": "Your regex should not match the string `1a2bcde`",
          "testCode": "pwRegex.lastIndex = 0;\nassert(!pwRegex.test('1a2bcde'));"
        },
        {
          "text": "Your regex should match the string `astr1on11aut`",
          "testCode": "pwRegex.lastIndex = 0;\nassert(pwRegex.test('astr1on11aut'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301360,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\positive-and-negative-lookahead.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7dbb367417b2b2512bac",
      "title": "Remove Whitespace from Start and End",
      "challengeType": 1,
      "dashedName": "remove-whitespace-from-start-and-end",
      "description": "Sometimes whitespace characters around strings are not wanted but are there. Typical processing of strings is to remove the whitespace at the start and end of it.",
      "instructions": "Write a regex and use the appropriate string methods to remove whitespace at the beginning and end of strings.\n\n**Note:** The `String.prototype.trim()` method would work here, but you'll need to complete this challenge using regular expressions.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let hello = \"   Hello, World!  \";\nlet wsRegex = /change/; // Change this line\nlet result = hello; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');"
        }
      ],
      "tests": [
        {
          "text": "`result` should be equal to the string `Hello, World!`",
          "testCode": "assert(result === 'Hello, World!');"
        },
        {
          "text": "Your solution should not use the `String.prototype.trim()` method.",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?trim/));"
        },
        {
          "text": "The `result` variable should not directly be set to a string",
          "testCode": "assert(!__helpers.removeJSComments(code).match(/result\\s*=\\s*[\"'`].*?[\"'`]/));"
        },
        {
          "text": "The value of the `hello` variable should not be changed.",
          "testCode": "assert(hello === '   Hello, World!  ');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301362,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\remove-whitespace-from-start-and-end.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db8367417b2b2512ba2",
      "title": "Restrict Possible Usernames",
      "challengeType": 1,
      "dashedName": "restrict-possible-usernames",
      "description": "Usernames are used everywhere on the internet. They are what give users a unique identity on their favorite sites.\n\nYou need to check all the usernames in a database. Here are some simple rules that users have to follow when creating their username.\n\n1) Usernames can only use alphanumeric characters.\n\n2) The only numbers in the username have to be at the end. There can be zero or more of them at the end. Username cannot start with the number.\n\n3) Username letters can be lowercase and uppercase.\n\n4) Usernames have to be at least two characters long. A two-character username can only use alphabet letters as characters.",
      "instructions": "Change the regex `userCheck` to fit the constraints listed above.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let username = \"JackOfAllTrades\";\nlet userCheck = /change/; // Change this line\nlet result = userCheck.test(username);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let username = \"JackOfAllTrades\";\nconst userCheck = /^[a-z]([0-9]{2,}|[a-z]+\\d*)$/i;\nlet result = userCheck.test(username);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should match the string `JACK`",
          "testCode": "userCheck.lastIndex = 0;\nassert(userCheck.test('JACK'));"
        },
        {
          "text": "Your regex should not match the string `J`",
          "testCode": "userCheck.lastIndex = 0;\nassert(!userCheck.test('J'));"
        },
        {
          "text": "Your regex should match the string `Jo`",
          "testCode": "userCheck.lastIndex = 0;\nassert(userCheck.test('Jo'));"
        },
        {
          "text": "Your regex should match the string `Oceans11`",
          "testCode": "userCheck.lastIndex = 0;\nassert(userCheck.test('Oceans11'));"
        },
        {
          "text": "Your regex should match the string `RegexGuru`",
          "testCode": "userCheck.lastIndex = 0;\nassert(userCheck.test('RegexGuru'));"
        },
        {
          "text": "Your regex should not match the string `007`",
          "testCode": "userCheck.lastIndex = 0;\nassert(!userCheck.test('007'));"
        },
        {
          "text": "Your regex should not match the string `9`",
          "testCode": "userCheck.lastIndex = 0;\nassert(!userCheck.test('9'));"
        },
        {
          "text": "Your regex should not match the string `A1`",
          "testCode": "userCheck.lastIndex = 0;\nassert(!userCheck.test('A1'));"
        },
        {
          "text": "Your regex should not match the string `BadUs3rnam3`",
          "testCode": "userCheck.lastIndex = 0;\nassert(!userCheck.test('BadUs3rnam3'));"
        },
        {
          "text": "Your regex should match the string `Z97`",
          "testCode": "userCheck.lastIndex = 0;\nassert(userCheck.test('Z97'));"
        },
        {
          "text": "Your regex should not match the string `c57bT3`",
          "testCode": "userCheck.lastIndex = 0;\nassert(!userCheck.test('c57bT3'));"
        },
        {
          "text": "Your regex should match the string `AB1`",
          "testCode": "userCheck.lastIndex = 0;\nassert(userCheck.test('AB1'));"
        },
        {
          "text": "Your regex should not match the string `J%4`",
          "testCode": "userCheck.lastIndex = 0;\nassert(!userCheck.test('J%4'))"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301363,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\restrict-possible-usernames.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7dbb367417b2b2512baa",
      "title": "Reuse Patterns Using Capture Groups",
      "challengeType": 1,
      "dashedName": "reuse-patterns-using-capture-groups",
      "description": "Say you want to match a word that occurs multiple times like below.\n\n```js\nlet repeatStr = \"row row row your boat\";\n```\n\nYou could use `/row row row/`, but what if you don't know the specific word repeated? <dfn>Capture groups</dfn> can be used to find repeated substrings.\n\nCapture groups are constructed by enclosing the regex pattern to be captured in parentheses. In this case, the goal is to capture a word consisting of alphanumeric characters so the capture group will be `\\w+` enclosed by parentheses: `/(\\w+)/`.\n\nThe substring matched by the group is saved to a temporary \"variable\", which can be accessed within the same regex using a backslash and the number of the capture group (e.g. `\\1`). Capture groups are automatically numbered by the position of their opening parentheses (left to right), starting at 1.\n\nThe example below matches a word that occurs thrice separated by spaces:\n\n```js\nlet repeatRegex = /(\\w+) \\1 \\1/;\nrepeatRegex.test(repeatStr); // Returns true\nrepeatStr.match(repeatRegex); // Returns [\"row row row\", \"row\"]\n```\n\nUsing the `.match()` method on a string will return an array with the matched substring, along with its captured groups.",
      "instructions": "Use capture groups in `reRegex` to match a string that consists of only the same number repeated exactly three times separated by single spaces.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let repeatNum = \"42 42 42\";\nlet reRegex = /change/; // Change this line\nlet result = reRegex.test(repeatNum);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let repeatNum = \"42 42 42\";\nlet reRegex = /^(\\d+) \\1 \\1$/;\nlet result = reRegex.test(repeatNum);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use the shorthand character class for digits.",
          "testCode": "assert(reRegex.source.match(/\\\\d/));"
        },
        {
          "text": "Your regex should reuse a capture group twice.",
          "testCode": "assert(reRegex.source.match(/\\\\1|\\\\2/g).length >= 2);"
        },
        {
          "text": "Your regex should match the string `42 42 42`.",
          "testCode": "reRegex.lastIndex = 0;\nassert(reRegex.test('42 42 42'));"
        },
        {
          "text": "Your regex should match the string `100 100 100`.",
          "testCode": "reRegex.lastIndex = 0;\nassert(reRegex.test('100 100 100'));"
        },
        {
          "text": "Your regex should not match the string `42 42 42 42`.",
          "testCode": "assert.equal('42 42 42 42'.match(reRegex.source), null);"
        },
        {
          "text": "Your regex should not match the string `42 42`.",
          "testCode": "assert.equal('42 42'.match(reRegex.source), null);"
        },
        {
          "text": "Your regex should not match the string `101 102 103`.",
          "testCode": "reRegex.lastIndex = 0;\nassert(!reRegex.test('101 102 103'));"
        },
        {
          "text": "Your regex should not match the string `1 2 3`.",
          "testCode": "reRegex.lastIndex = 0;\nassert(!reRegex.test('1 2 3'));"
        },
        {
          "text": "Your regex should match the string `10 10 10`.",
          "testCode": "reRegex.lastIndex = 0;\nassert(reRegex.test('10 10 10'));"
        },
        {
          "text": "Your regex should not match the string `42\\t42\\t42`.",
          "testCode": "reRegex.lastIndex = 0;\nassert(!reRegex.test('42\\t42\\t42'));"
        },
        {
          "text": "Your regex should not match the string `42  42  42`.",
          "testCode": "reRegex.lastIndex = 0;\nassert(!reRegex.test('42  42  42'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301364,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\reuse-patterns-using-capture-groups.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db9367417b2b2512ba7",
      "title": "Specify Exact Number of Matches",
      "challengeType": 1,
      "dashedName": "specify-exact-number-of-matches",
      "description": "You can specify the lower and upper number of patterns with quantity specifiers using curly brackets. Sometimes you only want a specific number of matches.\n\nTo specify a certain number of patterns, just have that one number between the curly brackets.\n\nFor example, to match only the word `hah` with the letter `a` `3` times, your regex would be `/ha{3}h/`.\n\n```js\nlet A4 = \"haaaah\";\nlet A3 = \"haaah\";\nlet A100 = \"h\" + \"a\".repeat(100) + \"h\";\nlet multipleHA = /ha{3}h/;\nmultipleHA.test(A4);\nmultipleHA.test(A3);\nmultipleHA.test(A100);\n```\n\nIn order, the three `test` calls would return `false`, `true`, and `false`.",
      "instructions": "Change the regex `timRegex` to match the word `Timber` only when it has four letter `m`'s.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let timStr = \"Timmmmber\";\nlet timRegex = /change/; // Change this line\nlet result = timRegex.test(timStr);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let timStr = \"Timmmmber\";\nlet timRegex = /Tim{4}ber/; // Change this line\nlet result = timRegex.test(timStr);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use curly brackets.",
          "testCode": "assert(timRegex.source.match(/{.*?}/).length > 0);"
        },
        {
          "text": "Your regex should not match the string `Timber`",
          "testCode": "timRegex.lastIndex = 0;\nassert(!timRegex.test('Timber'));"
        },
        {
          "text": "Your regex should not match the string `Timmber`",
          "testCode": "timRegex.lastIndex = 0;\nassert(!timRegex.test('Timmber'));"
        },
        {
          "text": "Your regex should not match the string `Timmmber`",
          "testCode": "timRegex.lastIndex = 0;\nassert(!timRegex.test('Timmmber'));"
        },
        {
          "text": "Your regex should match the string `Timmmmber`",
          "testCode": "timRegex.lastIndex = 0;\nassert(timRegex.test('Timmmmber'));"
        },
        {
          "text": "Your regex should not match the string `Timber` with 30 `m`'s in it.",
          "testCode": "timRegex.lastIndex = 0;\nassert(!timRegex.test('Ti' + 'm'.repeat(30) + 'ber'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301365,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\specify-exact-number-of-matches.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db9367417b2b2512ba6",
      "title": "Specify Only the Lower Number of Matches",
      "challengeType": 1,
      "dashedName": "specify-only-the-lower-number-of-matches",
      "description": "You can specify the lower and upper number of patterns with quantity specifiers using curly brackets. Sometimes you only want to specify the lower number of patterns with no upper limit.\n\nTo only specify the lower number of patterns, keep the first number followed by a comma.\n\nFor example, to match only the string `hah` with the letter `a` appearing at least `3` times, your regex would be `/ha{3,}h/`.\n\n```js\nlet A4 = \"haaaah\";\nlet A2 = \"haah\";\nlet A100 = \"h\" + \"a\".repeat(100) + \"h\";\nlet multipleA = /ha{3,}h/;\nmultipleA.test(A4);\nmultipleA.test(A2);\nmultipleA.test(A100);\n```\n\nIn order, the three `test` calls would return `true`, `false`, and `true`.",
      "instructions": "Change the regex `haRegex` to match the word `Hazzah` only when it has four or more letter `z`'s.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let haStr = \"Hazzzzah\";\nlet haRegex = /change/; // Change this line\nlet result = haRegex.test(haStr);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let haStr = \"Hazzzzah\";\nlet haRegex = /Haz{4,}ah/; // Change this line\nlet result = haRegex.test(haStr);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use curly brackets.",
          "testCode": "assert(haRegex.source.match(/{.*?}/).length > 0);"
        },
        {
          "text": "Your regex should not match the string `Hazzah`",
          "testCode": "haRegex.lastIndex = 0;\nassert(!haRegex.test('Hazzah'));"
        },
        {
          "text": "Your regex should not match the string `Hazzzah`",
          "testCode": "haRegex.lastIndex = 0;\nassert(!haRegex.test('Hazzzah'));"
        },
        {
          "text": "Your regex should match the string `Hazzzzah`",
          "testCode": "assert('Hazzzzah'.match(haRegex)[0].length === 8);"
        },
        {
          "text": "Your regex should match the string `Hazzzzzah`",
          "testCode": "assert('Hazzzzzah'.match(haRegex)[0].length === 9);"
        },
        {
          "text": "Your regex should match the string `Hazzzzzzah`",
          "testCode": "assert('Hazzzzzzah'.match(haRegex)[0].length === 10);"
        },
        {
          "text": "Your regex should match the string `Hazzah` with 30 `z`'s in it.",
          "testCode": "assert('Hazzzzzzzzzzzzzzzzzzzzzzzzzzzzzzah'.match(haRegex)[0].length === 34);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301366,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\specify-only-the-lower-number-of-matches.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db9367417b2b2512ba5",
      "title": "Specify Upper and Lower Number of Matches",
      "challengeType": 1,
      "dashedName": "specify-upper-and-lower-number-of-matches",
      "description": "Recall that you use the plus sign `+` to look for one or more characters and the asterisk `*` to look for zero or more characters. These are convenient but sometimes you want to match a certain range of patterns.\n\nYou can specify the lower and upper number of patterns with <dfn>quantity specifiers</dfn>. Quantity specifiers are used with curly brackets (`{` and `}`). You put two numbers between the curly brackets - for the lower and upper number of patterns.\n\nFor example, to match only the letter `a` appearing between `3` and `5` times in the string `ah`, your regex would be `/a{3,5}h/`.\n\n```js\nlet A4 = \"aaaah\";\nlet A2 = \"aah\";\nlet multipleA = /a{3,5}h/;\nmultipleA.test(A4);\nmultipleA.test(A2);\n```\n\nThe first `test` call would return `true`, while the second would return `false`.",
      "instructions": "Change the regex `ohRegex` to match the entire phrase `Oh no` only when it has `3` to `6` letter `h`'s.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let ohStr = \"Ohhh no\";\nlet ohRegex = /change/; // Change this line\nlet result = ohRegex.test(ohStr);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let ohStr = \"Ohhh no\";\nlet ohRegex = /Oh{3,6} no/; // Change this line\nlet result = ohRegex.test(ohStr);"
        }
      ],
      "tests": [
        {
          "text": "Your regex should use curly brackets.",
          "testCode": "assert(ohRegex.source.match(/{.*?}/).length > 0);"
        },
        {
          "text": "Your regex should not match the string `Ohh no`",
          "testCode": "ohRegex.lastIndex = 0;\nassert(!ohRegex.test('Ohh no'));"
        },
        {
          "text": "Your regex should match the string `Ohhh no`",
          "testCode": "assert('Ohhh no'.match(ohRegex)[0].length === 7);"
        },
        {
          "text": "Your regex should match the string `Ohhhh no`",
          "testCode": "assert('Ohhhh no'.match(ohRegex)[0].length === 8);"
        },
        {
          "text": "Your regex should match the string `Ohhhhh no`",
          "testCode": "assert('Ohhhhh no'.match(ohRegex)[0].length === 9);"
        },
        {
          "text": "Your regex should match the string `Ohhhhhh no`",
          "testCode": "assert('Ohhhhhh no'.match(ohRegex)[0].length === 10);"
        },
        {
          "text": "Your regex should not match the string `Ohhhhhhh no`",
          "testCode": "ohRegex.lastIndex = 0;\nassert(!ohRegex.test('Ohhhhhhh no'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301367,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\specify-upper-and-lower-number-of-matches.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7dbb367417b2b2512bab",
      "title": "Use Capture Groups to Search and Replace",
      "challengeType": 1,
      "dashedName": "use-capture-groups-to-search-and-replace",
      "description": "Searching is useful. However, you can make searching even more powerful when it also changes (or replaces) the text you match.\n\nYou can search and replace text in a string using `.replace()` on a string. The inputs for `.replace()` is first the regex pattern you want to search for. The second parameter is the string to replace the match or a function to do something.\n\n```js\nlet wrongText = \"The sky is silver.\";\nlet silverRegex = /silver/;\nwrongText.replace(silverRegex, \"blue\");\n```\n\nThe `replace` call would return the string `The sky is blue.`.\n\nYou can also access capture groups in the replacement string with dollar signs (`$`).\n\n```js\n\"Code Camp\".replace(/(\\w+)\\s(\\w+)/, '$2 $1');\n```\n\nThe `replace` call would return the string `Camp Code`.",
      "instructions": "Write a regex `fixRegex` using three capture groups that will search for each word in the string `one two three`. Then update the `replaceText` variable to replace `one two three` with the string `three two one` and assign the result to the `result` variable. Make sure you are utilizing capture groups in the replacement string using the dollar sign (`$`) syntax.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let str = \"one two three\";\nlet fixRegex = /change/; // Change this line\nlet replaceText = \"\"; // Change this line\nlet result = str.replace(fixRegex, replaceText);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let str = \"one two three\";\nlet fixRegex = /(\\w+) (\\w+) (\\w+)/g; // Change this line\nlet replaceText = \"$3 $2 $1\"; // Change this line\nlet result = str.replace(fixRegex, replaceText);"
        }
      ],
      "tests": [
        {
          "text": "You should use `.replace()` to search and replace.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/\\.replace\\(.*\\)/));"
        },
        {
          "text": "Your regex should change the string `one two three` to the string `three two one`",
          "testCode": "assert(result === 'three two one');"
        },
        {
          "text": "You should not change the last line.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/result\\s*=\\s*str\\.replace\\(.*?\\)/));"
        },
        {
          "text": "`fixRegex` should use at least three capture groups.",
          "testCode": "assert(new RegExp(fixRegex.source + '|').exec('').length - 1 >= 3);"
        },
        {
          "text": "`replaceText` should use parenthesized submatch string(s) (i.e. the nth parenthesized submatch string, $n, corresponds to the nth capture group).",
          "testCode": "{\n  const re = /(\\$\\d{1,2})+(?:[\\D]|\\b)/g;\n  assert(replaceText.match(re).length >= 3);\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301368,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\use-capture-groups-to-search-and-replace.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    },
    {
      "id": "587d7db3367417b2b2512b8e",
      "title": "Using the Test Method",
      "challengeType": 1,
      "dashedName": "using-the-test-method",
      "description": "Regular expressions are used in programming languages to match parts of strings. You create patterns to help you do that matching.\n\nIf you want to find the word `the` in the string `The dog chased the cat`, you could use the following regular expression: `/the/`. Notice that quote marks are not required within the regular expression.\n\nJavaScript has multiple ways to use regexes. One way to test a regex is using the `.test()` method. The `.test()` method takes the regex, applies it to a string (which is placed inside the parentheses), and returns `true` or `false` if your pattern finds something or not.\n\n```js\nlet testStr = \"freeCodeCamp\";\nlet testRegex = /Code/;\ntestRegex.test(testStr);\n```\n\nThe `test` method here returns `true`.",
      "instructions": "Apply the regex `myRegex` on the string `myString` using the `.test()` method.",
      "boilerplate": [
        {
          "language": "js",
          "code": "let myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex; // Change this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex.test(myString); // Change this line"
        }
      ],
      "tests": [
        {
          "text": "You should use `.test()` to test the regex.",
          "testCode": "assert(__helpers.removeJSComments(code).match(/myRegex.test\\(\\s*myString\\s*\\)/));"
        },
        {
          "text": "Your result should return `true`.",
          "testCode": "assert(result === true);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301369,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\02-javascript-algorithms-and-data-structures\\regular-expressions\\using-the-test-method.md"
      },
      "section": {
        "id": "02-javascript-algorithms-and-data-structures",
        "name": "02-javascript-algorithms-and-data-structures"
      },
      "lesson": {
        "id": "regular-expressions",
        "name": "Regular Expressions"
      }
    }
  ],
  "metadata": {
    "total_challenges": 299,
    "challenges_with_content": 299
  }
}