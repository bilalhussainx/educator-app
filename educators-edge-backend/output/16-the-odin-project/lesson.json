{
  "section": {
    "id": "16-the-odin-project",
    "name": "16-the-odin-project"
  },
  "challenges": [
    {
      "id": "6619240f46cec8e04d77e03a",
      "title": "Basic Functions Exercise A",
      "challengeType": 1,
      "dashedName": "top-basic-functions-exercise-a",
      "description": "Create a function that takes in an integer. This function should return the given `integer + 7` if the integer is less than `10`. If the integer is greater than or equal to `10`, it should return the given `integer - 3`.\n\nThe name of the function should be `addOrSubtract`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function addOrSubtract(num) {\n  if (num < 10) {\n    return num + 7;\n  } else {\n    return num - 3;\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have a function called `addOrSubtract`.",
          "testCode": "assert.isFunction(addOrSubtract);"
        },
        {
          "text": "Your function should take in an integer as an argument.",
          "testCode": "assert.match(addOrSubtract.toString(), /\\s*addOrSubtract\\(\\s*\\w+\\s*\\)/);"
        },
        {
          "text": "You should return the given integer + 7 if the integer is less than 10.",
          "testCode": "assert.strictEqual(addOrSubtract(5), 12);"
        },
        {
          "text": "You should return the given integer - 3 if the integer is greater than or equal to 10.",
          "testCode": "assert.strictEqual(addOrSubtract(10), 7);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-basic-function-projects",
        "name": "Top Basic Function Projects"
      }
    },
    {
      "id": "661e131f068359c3ccf2f4d6",
      "title": "Basic Functions Exercise B",
      "challengeType": 1,
      "dashedName": "top-basic-functions-exercise-b",
      "description": "Write a function, named `multiply`, that takes two parameters and returns their product.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [],
      "tests": [
        {
          "text": "You should have a function named `multiply`.",
          "testCode": "assert.isFunction(multiply);"
        },
        {
          "text": "Your function should take in two integers as arguments.",
          "testCode": "assert.match(multiply.toString(), /\\s*multiply\\(\\s*\\w+\\s*,\\s*\\w+\\s*\\)/);"
        },
        {
          "text": "You should return the product of the two integers.",
          "testCode": "assert.strictEqual(multiply(10, 10), 100);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-basic-function-projects",
        "name": "Top Basic Function Projects"
      }
    },
    {
      "id": "661e151f068359c3ccf2f4d7",
      "title": "Basic Functions Exercise C",
      "challengeType": 1,
      "dashedName": "top-basic-functions-exercise-c",
      "description": "Write a function, named `capitalize`, that takes a string as an parameter and returns a new string with the first letter capitalized.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have a function named `capitalize`.",
          "testCode": "assert.isFunction(capitalize);"
        },
        {
          "text": "Your function should take in a string as a parameter.",
          "testCode": "assert.match(capitalize.toString(), /\\s*capitalize\\(\\s*\\w+\\s*\\)/);"
        },
        {
          "text": "Your function should return a new string with the first letter capitalized.",
          "testCode": "assert.strictEqual(capitalize('sem'), 'Sem');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-basic-function-projects",
        "name": "Top Basic Function Projects"
      }
    },
    {
      "id": "661e17c6068359c3ccf2f4d8",
      "title": "Basic Functions Exercise D",
      "challengeType": 1,
      "dashedName": "top-basic-functions-exercise-d",
      "description": "Write a function, named `lastLetter`, that takes a string as a parameter and returns the last letter of the string.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function lastLetter(str) {\n  return str[str.length - 1];\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have a function named `lastLetter`.",
          "testCode": "assert.isFunction(lastLetter);"
        },
        {
          "text": "Your function should take in a string as a parameter.",
          "testCode": "assert.match(lastLetter.toString(), /\\s*lastLetter\\(\\s*\\w+\\s*\\)/);"
        },
        {
          "text": "You should return the last letter of the string.",
          "testCode": "assert.strictEqual(lastLetter('Sem'), 'm');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-basic-function-projects\\top-basic-functions-exercise-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-basic-function-projects",
        "name": "Top Basic Function Projects"
      }
    },
    {
      "id": "6391d1a4f7ac71efd0621380",
      "title": "Build a Recipe Page Project",
      "challengeType": 25,
      "dashedName": "top-build-a-recipe-project",
      "description": "The website will consist of a main index page which will have links to a few recipes. The website won’t look very pretty by the time you’ve finished.\n\n**User Stories:**\n\n1. Your recipe page should contain a `DOCTYPE` tag.\n1. Your recipe page should include an `html` element with a `head` and `body` element as children.\n1. You should have a `title` element within the `head` element with the text `The Odin Recipes`.\n1. You should see an `h1` element that has the text `Creamy Chocolate Fudge`.\n1. You should see a related image with an `alt` attribute.\n1. There should be an `h2` element with the text `Description` under the image.\n1. You should see a couple of paragraphs under `Description` that describe the recipe.\n1. There should be an `h2` element with the text `Ingredients`.\n1. Under the `Ingredients` heading there should be an unordered list with the ingredients needed for the recipe.\n1. Under the list of ingredients add another heading called `Steps`.\n1. You should see an ordered list with a couple of steps needed to complete the recipe.\n1. Under the steps there should be an `h2` element with the text `More Recipes`.\n1. You should see a couple of links to other recipes inside an unordered list which has a couple of list items with anchor elements within.\n1. These anchor elements should have an `href` attribute with the value set to `#`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": ""
        },
        {
          "language": "css",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>The Odin Recipes</title>\n  </head>\n  <body>\n    <h1>Creamy Chocolate Fudge</h1>\n    <img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/build-a-recipe-page/build-a-recipe-page-01.jpg\" alt=\"A delicious chocolate fudge dessert\">\n    <h2>Description</h2>\n    <p>This recipe is for a rich and creamy chocolate fudge that is sure to satisfy your sweet tooth. It's perfect for a special occasion or as a tasty treat for any time of the year.</p>\n    <p>This recipe is easy to follow and only requires a few simple ingredients. With just a few steps, you'll be able to create a delicious dessert that everyone will love.</p>\n    <h2>Ingredients</h2>\n    <ul>\n      <li>1 cup sugar</li>\n      <li>1/2 cup unsalted butter</li>\n      <li>1/4 cup milk</li>\n      <li>1/4 cup cocoa powder</li>\n      <li>1/4 cup chocolate chips</li>\n      <li>1/4 tsp salt</li>\n      <li>1 tsp vanilla extract</li>\n    </ul>\n    <h2>Steps</h2>\n    <ol>\n      <li>In a medium saucepan, melt the butter over medium heat.</li>\n      <li>Add the sugar, milk, cocoa powder, and salt to the saucepan and stir until well combined.</li>\n      <li>Bring the mixture to a boil, stirring constantly, and then reduce the heat to low and simmer for 5 minutes.</li>\n      <li>Remove the saucepan from the heat and stir in the chocolate chips and vanilla extract until the chocolate is melted and the mixture is smooth.</li>\n      <li>Pour the fudge into a greased 8-inch square pan and let it cool completely before cutting into squares.</li>\n    </ol>\n    <h2>More Recipes</h2>\n    <ul>\n      <li><a href=\"#\">Peanut Butter Cookies</a></li>\n      <li><a href=\"#\">Lemon Bars</a></li>\n      <li><a href=\"#\">Chocolate Chip Pancakes</a></li>\n    </ul>\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": ""
        }
      ],
      "tests": [
        {
          "text": "You should have a `DOCTYPE` tag.",
          "testCode": "assert(code.match(/<!DOCTYPE\\s+?html\\s*?>/gi));"
        },
        {
          "text": "You should have an `html` element with `head` and `body` element.\n\n```js\nconst html = document.querySelectorAll('html')[0];\nconst head = document.querySelectorAll('html > head')[0];\nconst body = document.querySelectorAll('html > body')[0];\n\nassert(html && head && body);\n```\n\nYou should have a `title` element within the `head` element that contains the text \n`The Odin Recipes`.",
          "testCode": "assert(document.querySelectorAll('HEAD > TITLE')[0]?.innerText == 'The Odin Recipes');"
        },
        {
          "text": "You should have an `h1` element within your `body` element that contains the text\n`Creamy Chocolate Fudge`.",
          "testCode": "assert(document.querySelectorAll('BODY > H1')[0]?.innerText == 'Creamy Chocolate Fudge');"
        },
        {
          "text": "You should have an image with an `alt` attribute.\n\n```js\nconst img = document.querySelectorAll('IMG')[0];\n\nassert(img && img.alt !='' && img.src != '')\n```\n\nYou should have an `h2` element with the text `Description`.\n\n```js\nconst h2 = document.querySelectorAll('H2')[0];\n\nassert(h2?.innerText == 'Description');\n```\n\nYou should have at least two `p` elements describing the recipe.\n\n```js\nconst paragraphs = document.querySelectorAll('P');\n\nassert(paragraphs?.length > 1);\n```\n\nYou should have an `h2` element with the text `Ingredients`.\n\n```js\nconst h2 = document.querySelectorAll('H2')[1];\n\nassert(h2?.innerText == 'Ingredients');\n```\n\nYou should have an `ul` element nested with `li` elements that contain the ingredients.\n\n```js\nconst headers = document.querySelectorAll(\"h2\");\n\nheaders.forEach(header => {\n    if (header.textContent.trim() === \"Ingredients\") {\n        const next = header.nextElementSibling;\n\nif(next.tagName === \"UL\") {\n            const listItems = next.querySelectorAll(\"LI\");\n\nassert(listItems.length > 1);\n        } else {\n            assert(false);\n        }\n    }\n});\n```\n\nYou should have an `h2` element with the text `Steps`.\n\n```js\nconst h2 = document.querySelectorAll('H2')[2];\n\nassert(h2?.innerText == 'Steps');\n```\n\nYou should have an `ol` element that contains `li` elements with the steps of the recipe.\n\n```js\nconst orderedList = document.querySelectorAll('OL')[0];\nconst listItems = document.querySelectorAll('OL > LI');\n\nassert(orderedList && listItems && listItems.length > 1);\n```\n\nYou should have an `h2` element with the text `More Recipes`.\n\n```js\nconst h2 = document.querySelectorAll('H2')[3];\n\nassert(h2?.innerText == 'More Recipes');\n```\n\nYou should have an `ul` element nested with `li` elements that contain `a` elements that link to other recipes.\n\n```js\nconst headers = document.querySelectorAll(\"h2\");\n\nheaders.forEach(header => {\n    if (header.textContent.trim() === \"More Recipes\") {\n        const next = header.nextElementSibling;\n\nif(next.tagName === \"UL\") {\n            const listItems = next.querySelectorAll(\"LI\");\n\nassert(listItems.length > 1);\n\nlistItems.forEach(listItem => {\n                const anchor = listItem.querySelector(\"A\");\n\nassert(anchor);\n            });\n        } else {\n            assert(false);\n        }\n    }\n});\n```\n\nYour anchor elements linking to the recipes should have an `href` attribute with the value set to `#`.\n\n```js\nconst anchorTags = document.querySelectorAll(\"a\");\n\nconst allAnchorsHaveHrefHash = [...anchorTags].every(function(anchorTag) {\n  return anchorTag.hasAttribute(\"href\") && anchorTag.getAttribute(\"href\") === \"#\";\n});\n\nassert(allAnchorsHaveHrefHash && anchorTags.length > 0); \n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-recipe-project\\top-build-a-recipe-project.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-build-a-recipe-project",
        "name": "Top Build A Recipe Project"
      }
    },
    {
      "id": "66629f407d679d3105e8317f",
      "title": "Build a Rock Paper Scissors Game",
      "challengeType": 25,
      "dashedName": "top-build-a-rock-paper-scissors-game",
      "description": "Your game will be played against the computer. You will write a function that randomly returns `\"rock\"`, `\"paper\"` or `\"scissors\"`.\n\nYou do not need to worry about the front-end part of the game. You will only write the logic for the game. Open the `script.js` and start following the instructions.\n\n**User stories:**\n\n1. You should have a function named `getComputerChoice`.\n\n1. Your `getComputerChoice` function should return `\"rock\"`, `\"paper\"`, or `\"scissors\"` at random.\n\n**Hint:** The [Math.random](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) method returns a random number that’s greater than or equal to 0 and less than 1. Think about how you can use this to conditionally return one of the multiple choices.\n\nYour game will be played by a human player. You will write a function that takes the user's choice and returns it.\n\n1. Create a function named `getHumanChoice`.\n\n1. Write the code so that `getHumanChoice` will return one of the valid choices depending on what the user inputs.\n\n**Hint:** Use the [prompt](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) method to get the user’s input.\n\nYour game will keep track of the player's score. You will write variables to keep track of the player's score.\n\n1. Create two new variables named `humanScore` and `computerScore` in the global scope.\n\n1. Initialize those variables with the value of `0`.\n\nYour game will be played round by round. You will write a function that takes the human and computer player choices as arguments, plays a single round, increments the round winner’s score and logs a winner announcement.\n\n1. Create a new function named `playRound`.\n\n1. Define two parameters for `playRound`. Parameter one `humanChoice` and parameter two `computerChoice`. Use these two parameters to take the human and computer choices as arguments.\n\n1. Make your function’s `humanChoice` parameter case-insensitive so that players can input `\"rock\"`, `\"ROCK\"`, `\"RocK\"`, or other variations.\n\n1. Write the code for your `playRound` function that returns a string value representing the round winner.\n\n- If it is a tie, it should return `\"It's a tie!\"`.\n\n- If the player wins, it should return `\"You win! [player choice] beats [computer choice]\"`.\n\n- If the computer wins, it should return `\"You lose! [computer choice] beats [player choice]\"`.\n\n1. Increment the `humanScore` or `computerScore` variable based on the round winner.\n\nYour game will play 3 rounds. You will write a function named `playGame` that calls `playRound` to play 3 rounds, keeps track of the scores, and declares a winner at the end.\n\n1. Create a new function named `playGame`.\n\n1. Create a loop that plays 3 rounds and calls the `playRound` function each time with the human's choice and the computer's choice functions as arguments.\n\n1. At the end of the game, return the winner of the game based on who won the most rounds.\n\n- If the human player wins more rounds than the computer player, return a message that says `\"You win the game!\"`.\n\n- If the computer player wins more rounds than the human player, return a message that says `\"You lose the game!\"`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "const hand = ['rock', 'paper', 'scissors'];"
        },
        {
          "language": "html",
          "code": "<html lang=\"en\">\n<head>\n  <script src=\"script.js\"></script>\n</head>\n</html>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<html lang=\"en\">\n<head>\n  <script src=\"script.js\"></script>\n</head>\n</html>"
        },
        {
          "language": "js",
          "code": "const hand = ['rock', 'paper', 'scissors'];\n\n\nlet computerScore = 0;\nlet humanScore = 0;\n\nconst getComputerChoice = () => {\n  return hand[Math.floor(Math.random() * hand.length)];\n}\n\nconst getHumanChoice = () => {\n  return prompt();\n}\n\nconst playRound = (humanChoice, computerChoice) => {\n  humanChoice = humanChoice.toLowerCase()\n\n  const tie = \"It's a tie!\"\n  const win = `You win! ${humanChoice} beats ${computerChoice}`\n  const lose = `You lose! ${computerChoice} beats ${humanChoice}`\n\n\n  if (humanChoice == 'rock') {\n    if (computerChoice == 'rock') {\n      computerScore++;\n      humanScore++;\n      return tie;\n    } else if (computerChoice == 'paper') {\n      computerScore++;\n      return lose;\n    } else {\n      humanScore++;\n      return win;\n    }\n  } else if (humanChoice == 'paper') {\n    if (computerChoice == 'rock') {\n      humanScore++;\n      return win;\n    } else if (computerChoice == 'paper') {\n      computerScore++;\n      humanScore++;\n      return tie;\n    } else {\n      computerScore++;\n      return lose;\n    }\n  } else if (humanChoice == 'scissors') {\n    if (computerChoice == 'rock') {\n      computerScore++;\n      return lose;\n    } else if (computerChoice == 'paper') {\n      humanScore++;\n      return win;\n    } else {\n      computerScore++;\n      humanScore++;\n      return tie;\n    }\n  }\n}\n\nconst playGame = () => {\n  for(let i = 0; i < 3; i++){\n    playRound(getHumanChoice(), getComputerChoice())\n  }\n\n  return humanScore > computerScore ? \"You win the game!\" : \"You lose the game!\"\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have a function called `getComputerChoice`",
          "testCode": "assert.isFunction(getComputerChoice);"
        },
        {
          "text": "Your `getComputerChoice` function should return `\"rock\"`, `\"paper\"`, or `\"scissors\"` at random.",
          "testCode": "const counts = {}\nfor (let i = 0; i < 100; i++) {\n  const result = getComputerChoice();\n  counts[result] = (counts[result] ?? 0) + 1;\n}\nassert.lengthOf(Object.keys(counts), 3);\nassert.include(Object.keys(counts), \"rock\");\nassert.include(Object.keys(counts), \"paper\"); \nassert.include(Object.keys(counts), \"scissors\");"
        },
        {
          "text": "You should have a function called `getHumanChoice`",
          "testCode": "assert.isFunction(getHumanChoice);"
        },
        {
          "text": "You should have two variables named `humanScore` and `computerScore` in the global scope.",
          "testCode": "assert.exists(humanScore);\nassert.exists(computerScore);"
        },
        {
          "text": "You should have a function called `playRound`",
          "testCode": "assert.isFunction(playRound);"
        },
        {
          "text": "Your `playRound` function should take the human and computer player choices as arguments with the parameters `humanChoice` and `computerChoice`.",
          "testCode": "assert.match(playRound.toString(), /\\s*(?:\\bhumanChoice\\b\\s*,\\s*\\bcomputerChoice\\b)/);"
        },
        {
          "text": "Your `playRound` function should be case-insensitive so that players can input `\"rock\"`, `\"ROCK\"`, `\"RocK\"`, or other variations.",
          "testCode": "assert.match(playRound.toString(), /\\bhumanChoice\\s*\\.toLowerCase\\(\\)/);"
        },
        {
          "text": "Your `playRound` function should return the string `\"It's a tie!\"` if the human and computer choices are the same.",
          "testCode": "assert.equal(playRound(\"rock\", \"rock\"), \"It's a tie!\");"
        },
        {
          "text": "Your `playRound` function should return the string `\"You win! [player choice] beats [computer choice]\"` if the player wins.",
          "testCode": "assert.equal(playRound(\"rock\", \"scissors\"), \"You win! rock beats scissors\");"
        },
        {
          "text": "Your `playRound` function should return the string `\"You lose! [computer choice] beats [player choice]\"` if the computer wins.",
          "testCode": "assert.equal(playRound(\"rock\", \"paper\"), \"You lose! paper beats rock\");"
        },
        {
          "text": "Your `playRound` function should increment the `humanScore` or `computerScore` variable based on the round winner.",
          "testCode": "humanScore = 0;\ncomputerScore = 0;\nplayRound(\"rock\", \"scissors\");\nassert.equal(humanScore, 1);"
        },
        {
          "text": "You should have a function called `playGame`.",
          "testCode": "assert.isFunction(playGame);"
        },
        {
          "text": "You should use a loop to play 3 rounds.",
          "testCode": "assert.match(playGame.toString(), /\\bfor\\s*\\(/);"
        },
        {
          "text": "You should return the winner of the game based on who won the most rounds.",
          "testCode": "window.prompt = () => \"rock\";\nassert.match(playGame(), /You (win|lose) the game!/);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-build-a-rock-paper-scissors-game\\build-a-rock-paper-scissors-game.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-build-a-rock-paper-scissors-game",
        "name": "Top Build A Rock Paper Scissors Game"
      }
    },
    {
      "id": "6571b2fccc1de61d7b4dd37f",
      "title": "Introduction to Flexbox Lesson A",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-a",
      "description": "## Before we get started\n\nFlexbox layouts can get a little complicated. In a previous lesson, you learned how to inspect and debug things using your browser’s developer tools. Those tools will be crucial for you in the following lessons. If something isn’t behaving the way you expect, inspecting it in the developer tools should be your first step every time.\n\nFlexbox isn’t necessarily any more difficult than the other concepts that we’ve covered so far, but it does have a few more moving parts. It is going to be somewhat difficult to make use of any of the things you’re learning in these first lessons until you get to the end and can put it all together. As we go, do yourself a favor and <strong>play with all of the code examples.</strong>\n\nYou will almost definitely need to come back and reference these lessons (or a couple of the resources we share with you) when you get to the assignments at the end of the section, but if you take your time and experiment with all the code examples we provide, you’ll know better where to look when that time comes.\n\n## Let’s flex\n\nFlexbox is a way to arrange items into rows or columns. These items will flex (i.e. grow or shrink) based on some simple rules that you can define. To get started, let’s look at a simple demonstration.\n\n> We’ve embedded a lot of interactive examples in these lessons. Take your time to experiment with them as you go to cement the concepts in your mind!\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\"  frameborder=\"0\" height=\"400\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/QWgNxrp?height=400&amp;default-tab=html%2Cresult&amp;slug-hash=QWgNxrp&amp;editable=true&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\"></iframe>\n\nWe’ll get into exactly what’s going on here soon enough. But for now, let’s uncomment the two flex related CSS declarations in the above Codepen by removing the `/*` and `*/` tags surrounding them, then check out the result.\n\n> Comments prevent the browser from interpreting lines as code, and are wrapped between specific tags. CSS uses `/*` as an opening comment tag and `*/` as a closing comment tag, while HTML and JavaScript have their own syntax. Commented out lines of code can be re-enabled simply by removing the comment tags surrounding the code.\n\nAll 3 divs should now be arranged horizontally. If you resize the results frame with the `1x`, `.5x` and `.25x` buttons you’ll also see that the `div` elements will \"flex\". They will fill the available area and will each have equal width.\n\nIf you add another `div` to the HTML, inside of `.flex-container`, it will show up alongside the others, and everything will flex to fit within the available area.\n\n> If it’s hard to see what's going on in the small embedded CodePen, feel free to click the \"Edit on CodePen\" or \"Fork on CodePen\" button. This will bring the example into a full-sized environment. Some of the later examples might especially benefit from doing this.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571b2fecc1de61d7b4dd380",
      "title": "Introduction to Flexbox Lesson B",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-b",
      "description": "As you’ve seen, flexbox is not just a single CSS property but a whole toolbox of properties that you can use to put things where you need them. Some of these properties belong on the flex container, while some go on the flex items. This is a simple yet important concept.\n\nA flex container is any element that has `display: flex` on it. A flex item is any element that lives directly inside of a flex container.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/flex-box/flexbox-01.png\" style=\"width: 95%; height: 95%;\" alt=\"An outer rectangle representing a flex container encompassing three smaller inner rectangles lined up side by side, each representing a flex item.\">",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571b2fecc1de61d7b4dd381",
      "title": "Introduction to Flexbox Lesson C",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-c",
      "description": "Somewhat confusingly, any element can be both a flex container and a flex item. Said another way, you can also put `display: flex` on a flex item and then use flexbox to arrange its children.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/flex-box/flexbox-03.png\" style=\"width: 95%; height: 95%;\" alt=\"a flex container that has multiple flex items, within those flex items are nested flex items as well. Making the parent of those nested flex items also a flex container.\" />\n\nCreating and nesting multiple flex containers and items is the primary way you will be building up complex layouts. The following image was achieved using only flexbox to arrange, size, and place the various elements. Flexbox is a very powerful tool.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/flex-box/flexbox-02.png\" alt=\"a complex layout of flex items and flex containers. There are multiple flex containers nested into each other, thus making them flex items as well\"/>\n\nCertainly, the image features a representation of a CSS Flexbox layout with nested flex containers. The outer container is denoted as \"ALSO a flex container\" highlighted in blue, and within it is another container marked as \"with flex items\" in red. Inside the red container, there are three items labeled as \"flex items\" in peach. This demonstrates that a flex container can be nested within another flex container and contain its own flex items, showcasing the recursive nature of Flexbox layout structures.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571b2ffcc1de61d7b4dd382",
      "title": "Introduction to Flexbox Lesson D",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-d",
      "description": "Now that you have a basic understanding of how flexbox works, what is the primairy role of a flex item in a `flexbox` layout? Try and answer the question below.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571b300cc1de61d7b4dd383",
      "title": "Introduction to Flexbox Lesson E",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-e",
      "description": "The `flex` declaration is actually a shorthand for 3 properties that you can set on a flex item. These properties affect how flex items size themselves within their container. You've seen some shorthand properties before, but you haven't officially defined them yet.\n\n> Shorthand properties are CSS properties that let you set the values of multiple other CSS properties simultaneously. Using a shorthand property, you can write more concise (and often more readable) stylesheets, saving time and energy.\n\nIn this case, `flex` is actually a shorthand for `flex-grow`, `flex-shrink` and `flex-basis`.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/flex-box/flexbox-04.png\" alt=\"CSS code setting the flex property to 1 for a div element.\">\n\nIn the above screenshot, `flex: 1` equates to: `flex-grow: 1`, `flex-shrink: 1`, `flex-basis: 0`.\n\nVery often, you see the flex shorthand defined with only one value. In that case, that value is applied to `flex-grow`. So when you put `flex: 1` on our divs, you were actually specifying a shorthand of `flex: 1 1 0`.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571b300cc1de61d7b4dd384",
      "title": "Introduction to Flexbox Lesson F",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-f",
      "description": "`flex-grow` expects a single number as its value, and that number is used as the flex-item's \"growth factor\". When you applied `flex: 1` to every div inside our container, you were telling every div to grow the same amount. The result of this is that every div ends up the exact same size. If you instead add `flex: 2` to just one of the divs, then that div would grow to 2x the size of the others.\n\nIn the following example the `flex` shorthand has values for `flex-shrink` and `flex-basis` specified with their default values.\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/YzQqvgK?height=300&amp;default-tab=html%2Cresult&amp;slug-hash=YzQqvgK&amp;editable=true&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_YzQqvgK\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571c34568e4b3b17d3957f8",
      "title": "Introduction to Flexbox Lesson G",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-g",
      "description": "`flex-shrink` is similar to `flex-grow`, but sets the \"shrink factor\" of a flex item. `flex-shrink` only ends up being applied if the size of all flex items is larger than their parent container. For example, if our 3 divs from above had a width declaration like: `width: 100px`, and `.flex-container` was smaller than `300px`, our divs would have to shrink to fit.\n\nThe default shrink factor is `flex-shrink: 1`, which means all items will shrink evenly. If you do not want an item to shrink then you can specify `flex-shrink: 0;`. You can also specify higher numbers to make certain items shrink at a higher rate than normal.\n\nHere's an example. If you shrink your browser window you'll notice that `.two` never gets smaller than the given width of `250px`, even though the `flex-grow` rule would otherwise specify that each element should be equally sized.\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/JjJXZVz?height=300&amp;default-tab=html%2Cresult&amp;slug-hash=JjJXZVz&amp;editable=true&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_JjJXZVz\"></iframe>\n\nAn important implication to notice here is that when you specify `flex-grow` or `flex-shrink`, flex items do not necessarily respect your given values for `width`. In the above example, all 3 divs are given a `width` of `250px`, but when their parent is big enough, they grow to fill it. Likewise, when the parent is too small, the default behavior is for them to shrink to fit. This is not a bug, but it could be confusing behavior if you aren’t expecting it.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571c34668e4b3b17d3957f9",
      "title": "Introduction to Flexbox Lesson H",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-h",
      "description": "No matter which direction you're using, you need to think of your flex-containers as having 2 axes: the main axis and the cross axis. It is the direction of these axes that changes when the `flex-direction` is changed. In most circumstances, `flex-direction: row` puts the main axis horizontal (left-to-right), and `column` puts the main axis vertical (top-to-bottom).\n\nIn other words, in our very first example, you put `display: flex` on a div and it arranged its children horizontally. This is a demonstration of `flex-direction: row`, the default setting. The following example is very similar. If you uncomment the line that says `flex-direction: column`, those divs will stack vertically.\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"400\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/BaZKPdw?height=400&amp;default-tab=html%2Cresult&amp;slug-hash=BaZKPdw&amp;editable=true&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_BaZKPdw\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571c34768e4b3b17d3957fa",
      "title": "Introduction to Flexbox Lesson I",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-i",
      "description": "<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"400\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/BaZKPdw?height=400&amp;default-tab=html%2Cresult&amp;slug-hash=BaZKPdw&amp;editable=true&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_BaZKPdw\"></iframe>\n\nOne thing to note is that in this example, `flex-direction: column` would not work as expected if you used the shorthand `flex: 1`. Try it out now (i.e. go change the flex value on the `flex: 1 1 auto;` line). Can you figure out why it does not work if `flex: 1` is used? The divs collapse, even though they clearly have a height defined there.\n\nThe reason for this is that the flex shorthand expands `flex-basis` to `0`, which means that all `flex-growing` and `flex-shrinking` would begin their calculations from 0. Empty divs by default have 0 height, so for our flex items to fill up the height of their container, they don't actually need to have any height at all.\n\nThe example above fixed this by specifying `flex: 1 1 auto`, telling the flex items to default to their given height. You could also have fixed it by putting a `height` on the parent `.flex-container`, or by using `flex-grow: 1` instead of the shorthand.\n\nAnother detail to notice: when you changed the `flex-direction` to `column`, `flex-basis` refers to `height` instead of `width`. Given the context this may be obvious, but it's something to be aware of.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-i.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6571c34868e4b3b17d3957fb",
      "title": "Introduction to Flexbox Lesson J",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-j",
      "description": "Let's look at an example.\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"400\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/MWoyBzR?height=400&amp;default-tab=html%2Cresult&amp;slug-hash=MWoyBzR&amp;editable=true&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_MWoyBzR\"></iframe>\n\nYou should be able to predict what happens if you put `flex: 1` on the `.item` by now. Give it a shot before you move on!\n\nAdding `flex: 1` to `.item` makes each of the items grow to fill the available space, but what if you wanted them to stay the same width, but distribute themselves differently inside the container? You can do this!\n\nRemove `flex: 1` from `.item` and add `justify-content: space-between` to `.container`. Doing so should give you something like this:\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/flex-box/flexbox-05.png\" alt=\"Three small boxes within a much larger rectangle. The boxes are arranged in a single row, one close to the left edge of the container, one close to the right edge of the container, and the last directly in the middle of the container, placing as much space as possible between each box.\">\n\n`justify-content` aligns items across the **main axis**. There are a few values that you can use here. You'll learn the rest of them in the reading assignments, but for now try changing it to center, which should center the boxes along the main axis.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-j.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "6597b43d854b3fa8e35d66d7",
      "title": "Introduction to Flexbox Lesson K",
      "challengeType": 15,
      "dashedName": "introduction-flexbox-lesson-k",
      "description": "<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\"\nstyle=\"margin: 15px 0\"\nallowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"400\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/MWoyBzR?height=400&amp;default-tab=html%2Cresult&amp;slug-hash=MWoyBzR&amp;editable=true&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_MWoyBzR\"></iframe>\n\nTo change the placement of items along the cross axis use `align-items`. Try getting the boxes to the center of the container by adding `align-items: center` to `.container`. The desired result looks like this:\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/flex-box/flexbox-06.png\" alt=\"three blue squares centered in the middle of the flex container\" style=\"margin: 15px 0\">\n\nBecause `justify-content` and `align-items` are based on the main and cross axis of your container, their behavior changes when you change the flex-direction of a flex-container. For example, when you change `flex-direction` to `column`, `justify-content` aligns vertically and `align-items` aligns horizontally. The most common behavior, however, is the default, i.e. `justify-content` aligns items horizontally (because the main axis defaults to horizontal), and `align-items` aligns them vertically. One of the biggest sticking points that beginners have with flexbox is confusion when this behavior changes.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-introduction-to-flexbox\\introduction-flexbox-lesson-k.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-introduction-to-flexbox",
        "name": "Top Introduction To Flexbox"
      }
    },
    {
      "id": "661e27508602567c118451d1",
      "title": "Learn Arrays and Loops Lesson A",
      "challengeType": 15,
      "dashedName": "learn-arrays-and-loops-lesson-a",
      "description": "Strings and numbers may be our building blocks, but as your scripts get more complex, you're going to need a way to deal with large quantities of them. Luckily, JavaScript has a couple of data types that are used for just that. An Array is an ordered collection of items (Strings, numbers, or other things).\n\nArrays are a way to store multiple values in a single variable. They are a special type of object that has a length property and a series of numbered properties. Each numbered property is called an element, and each element can store a value of any type.\n\nAn Example of an array is:\n\n```javascript\nconst fruits = ['apple', 'banana', 'orange'];\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-arrays-and-loops",
        "name": "Top Learn Arrays And Loops"
      }
    },
    {
      "id": "661e27568602567c118451d2",
      "title": "Learn Arrays and Loops Lesson B",
      "challengeType": 15,
      "dashedName": "learn-arrays-and-loops-lesson-b",
      "description": "To access the elements of an array, you can use the index number. The index number starts from 0, so the first element of an array is at index 0, the second element is at index 1, and so on.\n\nFor example, to access the first element of the `fruits` array, you can use the following code:\n\n```javascript\nconst fruits = ['apple', 'banana', 'orange'];\nconsole.log(fruits[0]); // Output: apple\nconsole.log(fruits[2]); // Output: orange\n```\n\nIf the index is out of range, JavaScript will return `undefined`. Meaning that if you try to access `fruits[3]` in the above example, it will return `undefined`.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-arrays-and-loops",
        "name": "Top Learn Arrays And Loops"
      }
    },
    {
      "id": "661e27578602567c118451d3",
      "title": "Learn Arrays and Loops Lesson C",
      "challengeType": 15,
      "dashedName": "learn-arrays-and-loops-lesson-c",
      "description": "One of the most common ways to add a new element to an array is by using the `push()` method. The `push()` method adds one or more elements to the end of an array and returns the new length of the array.\n\nFor example, to add a new element to the `pet` array, you can use the following code:\n\n```javascript\nconst pet = ['cat', 'dog', 'bunny'];\npet.push('parrot');\nconsole.log(pet); // Output: ['cat', 'dog', 'bunny', 'parrot']\n```\n\nTo remove the last element of an array, you can use the `pop()` method. The `pop()` method removes the last element from an array and returns that element.\n\nFor example, to remove the last element from the `pet` array, you can use the following code:\n\n```javascript\nconst pet = ['cat', 'dog', 'tiger'];\npet.pop();\nconsole.log(pet); // Output: ['cat', 'dog']\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-arrays-and-loops",
        "name": "Top Learn Arrays And Loops"
      }
    },
    {
      "id": "661e27588602567c118451d4",
      "title": "Learn Arrays and Loops Lesson D",
      "challengeType": 15,
      "dashedName": "learn-arrays-and-loops-lesson-d",
      "description": "One of the more complex methods used with arrays are the `splice()` and `slice()` methods. The `splice()` method changes the contents of an array by removing or replacing an element in the array. The `slice()` method returns a shallow copy of a portion of an array into a new array object selected from `begin` to `end` (`end` not included). The original array will not be modified.\n\nFor example, to remove the second element from the `characters` array, you can use the following code:\n\n```javascript\nconst characters = ['Harry', 'Ron', 'Hermione'];\ncharacters.splice(1, 1);\nconsole.log(characters); // Output: ['Harry', 'Hermione']\n```\n\nThe above element removes the second element from the `characters` array. The `splice()` method takes two arguments: the index of the element to remove and the number of elements to remove.\n\n\nTo create a new array with the second element from the `character` array, you can use the following code:\n\n```javascript\nconst characters = ['Harry', 'Ron', 'Hermione'];\nconst newCharacters = characters.slice(1, 2);\nconsole.log(newCharacters); // Output: ['Ron']\n```\n\nThe above code creates a new array `newCharacters` with the second element from the `characters` array. The `slice()` method takes two arguments: the index of the element to start the slice and the index of the element to end the slice (not included).",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-arrays-and-loops",
        "name": "Top Learn Arrays And Loops"
      }
    },
    {
      "id": "661e27588602567c118451d5",
      "title": "Learn Arrays and Loops Lesson E",
      "challengeType": 15,
      "dashedName": "learn-arrays-and-loops-lesson-e",
      "description": "Now that you have a basic understanding about arrays, let's talk about loops. Loops are used to execute a block of code multiple times. One of those loops is the `while` loop. The `while` loop executes a block of code as long as the condition is true. The syntax of the `while` loop is as follows:\n\n```javascript\nwhile (condition) {\n  // code block to be executed\n}\n```\n\nFor example, the following code snippet prints the numbers from 1 to 5:\n\n```javascript\nlet i = 1;\nwhile (i <= 5) {\n  console.log(i);\n  i++;\n}\n```\n\nThe above code snippet initializes a variable `i` with the value `1`. The `while` loop executes the block of code as long as the value of `i` is less than or equal to `5`. The value of `i` is incremented by `1` in each iteration.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-arrays-and-loops",
        "name": "Top Learn Arrays And Loops"
      }
    },
    {
      "id": "661e27598602567c118451d6",
      "title": "Learn Arrays and Loops Lesson F",
      "challengeType": 15,
      "dashedName": "learn-arrays-and-loops-lesson-f",
      "description": "The `for` loop is another type of loop that is used to execute a block of code multiple times. The `for` loop is used when the number of iterations is known. The syntax of the `for` loop is as follows:\n\n```javascript\nfor (initialization; condition; increment/decrement) {\n  // code block to be executed\n}\n```\n\nFor example, the following code snippet prints the numbers from 1 to 5:\n\n```javascript\nfor (let i = 1; i <= 5; i++) {\n  console.log(i);\n}\n```\n\nTo iterate over an array using a `for` loop, you can use the array's length property. For example, the following code snippet prints the elements of an array:\n\n```javascript\nconst arr = [1, 2, 3, 4, 5];\nfor (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-arrays-and-loops",
        "name": "Top Learn Arrays And Loops"
      }
    },
    {
      "id": "661e275a8602567c118451d7",
      "title": "Learn Arrays and Loops Lesson G",
      "challengeType": 15,
      "dashedName": "learn-arrays-and-loops-lesson-g",
      "description": "Now that you know about the most common ways to iterate over values and arrays, there are a few more ways to iterate over arrays. Arrays have a built-in method called `map()`, which is used to create a new array by applying a function to each element of the original array. The `map()` method does not change the original array. The syntax of the `map()` method is as follows:\n\n```javascript\nconst array = [1, 2, 3, 4, 5];\n\nconst newArray = array.map((arrayValue) => {\n  return arrayValue * 2;\n});\n\nconsole.log(newArray); // Output: [2, 4, 6, 8, 10]\n```\n\nThe `map()` method creates a new array by applying the function `(arrayValue) => { return arrayValue * 2; }` to each element of the original array. This is particularly useful when you want to transform the elements of an array without changing the original array.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-arrays-and-loops",
        "name": "Top Learn Arrays And Loops"
      }
    },
    {
      "id": "661e275a8602567c118451d8",
      "title": "Learn Arrays and Loops Lesson H",
      "challengeType": 15,
      "dashedName": "learn-arrays-and-loops-lesson-h",
      "description": "One other useful array method is the `filter()` method. The `filter()` method creates a new array with all elements that pass the test implemented by the provided function. The syntax of the `filter()` method is as follows:\n\n```javascript\nconst numbers = [2, 5, 6, 1, 9, -1]\n\nconst newNumbers = numbers.filter((number) => {\n  return number > 2;\n});\n\nconsole.log(newNumbers); // Output: [5, 6, 9]\n```\n\nThe `filter()` method creates a new array with all elements that are greater than 2. The `filter()` method does not change the original array.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-arrays-and-loops\\learn-arrays-and-loops-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-arrays-and-loops",
        "name": "Top Learn Arrays And Loops"
      }
    },
    {
      "id": "6570447ce7b02272663824df",
      "title": "Learn Block and Inline Lesson A",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-a",
      "description": "Most of the elements that you have learned about so far are block elements. In other words, their default style is `display: block`. By default, block elements will appear on the page stacked atop each other, each new element starting on a new line.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "6570447de7b02272663824e0",
      "title": "Learn Block and Inline Lesson B",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-b",
      "description": "Inline elements, however, do not start on a new line. They appear in line with whatever elements they are placed beside. A clear example of an inline element is a link, or `<a>` tag. If you stick one of these in the middle of a paragraph of text, it will behave like a part of the paragraph. <a  href=\"https://www.freecodecamp.org/\" target=\"_blank\">(Like this)</a> The link’s text will sit alongside other words in that paragraph. Additionally, padding and margin behave differently on inline elements. In general, you do not want to try to put extra padding or margin on inline elements.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "6570447ee7b02272663824e1",
      "title": "Learn Block and Inline Lesson C",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-c",
      "description": "Padding is used to create space around an element's content, inside of any defined borders. With inline elements, padding adds space to the left, right, top, and bottom of the content. However, it's important to note that while padding does affect the space around the content, it does not affect the layout of other elements around the inline element. This means that horizontal padding (left and right) is respected, but vertical padding (top and bottom) does not cause other elements to move away.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "6570447ee7b02272663824e2",
      "title": "Learn Block and Inline Lesson D",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-d",
      "description": "Now that you have a basic understanding on how adding width and height to `inline` elements works, what happens when you add a top margin to an `inline` element?",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "6570447fe7b02272663824e3",
      "title": "Learn Block and Inline Lesson E",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-e",
      "description": "Inline-block elements behave like inline elements, but with block-style padding and margin. `display: inline-block` is a useful tool to know about, but in practice, you'll probably end up reaching for flexbox more often if you're trying to line up a bunch of boxes. Flexbox will be covered in-depth in the next lesson.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "65704480e7b02272663824e4",
      "title": "Learn Block and Inline Lesson F",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-f",
      "description": "The concept of “Normal flow” is implied in the box-model resources, but isn’t laid out very specifically. Read <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow\" target=\"_blank\">Normal Flow</a> from MDN to make sure you understand how elements lay themselves out by default.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "65704482e7b02272663824e5",
      "title": "Learn Block and Inline Lesson G",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-g",
      "description": "Now that you have some basic understanding of `block` and `inline` elements, pull up your list of `block` and `inline` elements from a couple questions ago and see if you can identify which of the following elements are `block` elements and which are `inline` elements.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "65704483e7b02272663824e6",
      "title": "Learn Block and Inline Lesson H",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-h",
      "description": "Now that you have some basic understanding of `block` and inline elements, pull up your list of `block` and `inline` elements from a couple questions ago and see if you can identify which of the following elements are `block` elements and which are `inline` elements.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "65704484e7b02272663824e7",
      "title": "Learn Block and Inline Lesson I",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-i",
      "description": "You can't talk about `block` and `inline` elements without discussing `div`s and `span`s. All the other HTML elements you have encountered so far give meaning to their content. For example, paragraph elements tell the browser to display the text it contains as a paragraph. Strong elements tell the browser which texts within are important and so on. Yet, `div`s and `span`s give no particular meaning to their content. They are just generic boxes that can contain anything.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-i.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "65704485e7b02272663824e8",
      "title": "Learn Block and Inline Lesson J",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-j",
      "description": "Now that you have a basic understanding on how adding width and height to `inline` elements works, what happens when you add a top padding of 10 pixels to a `span` element?",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-j.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "65704486e7b02272663824e9",
      "title": "Learn Block and Inline Lesson K",
      "challengeType": 15,
      "dashedName": "learn-block-and-inline-lesson-k",
      "description": "Now that you have a basic understanding on how adding width and height to `inline` elements works.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-block-and-inline\\learn-block-and-inline-lesson-k.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-block-and-inline",
        "name": "Top Learn Block And Inline"
      }
    },
    {
      "id": "63ee351d0d8d4841c3a7091a",
      "title": "CSS Foundations Lesson A",
      "challengeType": 19,
      "dashedName": "css-foundations-lesson-a",
      "description": "A type selector (or element selector) will select all elements of the given element type, and the syntax is just the name of the element:\n\n```html\n<!-- index.html -->\n\n<div>Hello, World!</div>\n<div>Hello again!</div>\n<p>Hi...</p>\n<div>Okay, bye.</div>\n```\n\n```css\n/* styles.css */\n\ndiv {\n  color: white;\n}\n```\n\nHere, all three `<div>` elements would be selected, while the `<p>` element wouldn’t be.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations",
        "name": "Top Learn Css Foundations"
      }
    },
    {
      "id": "63ee35240d8d4841c3a7091b",
      "title": "CSS Foundations Lesson B",
      "challengeType": 19,
      "dashedName": "css-foundations-lesson-b",
      "description": "Class selectors will select all elements with the given `class`, which is just an attribute you place on an HTML element. Here’s how you add a class to an HTML tag and select it in CSS:\n\n```html\n<!-- index.html -->\n\n<div class=\"alert-text\">\n  Please agree to our terms of service.\n</div>\n```\n\n```css\n/* styles.css */\n\n.alert-text {\n  color: red;\n}\n```\n\nNote the syntax for `class` selectors: a period immediately followed by the case-sensitive value of the class attribute. Classes aren’t required to be unique, so you can use the same `class` on as many elements as you want.\n\nAnother thing you can do with the `class` attribute is to add multiple classes to a single element as a space-separated list, such as `class=\"alert-text severe-alert\"`. Since whitespace is used to separate `class` names like this, you should never use spaces for multi-worded names and should use a hyphen instead.\n\n## ID Selectors\nID selectors are similar to `class` selectors. They select an element with the given `id`, which is another attribute you place on an HTML element:\n\n```html\n<!-- index.html -->\n\n<div id=\"title\">My Awesome 90's Page</div>\n```\n\n```css\n/* styles.css */\n\n#title {\n  background-color: red;\n}\n```\n\nInstead of a period, you use a hashtag immediately followed by the case-sensitive value of the `id` attribute. A common pitfall is people overusing the `id` attribute when they don’t necessarily need to, and when classes will suffice. While there are cases where using an `id` makes sense or is needed, such as taking advantage of specificity or having links redirect to a section on the current page, you should use `id`s sparingly (if at all).\n\nThe major difference between classes and IDs is that an element can only have one `id`. An `id` cannot be repeated on a single page, and the `id` attribute should not contain any whitespace at all.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations",
        "name": "Top Learn Css Foundations"
      }
    },
    {
      "id": "63ee352b0d8d4841c3a7091c",
      "title": "CSS Foundations Lesson C",
      "challengeType": 19,
      "dashedName": "css-foundations-lesson-c",
      "description": "What if you have two groups of elements that share some of their style declarations?\n\n```css\n.read {\n  color: white;\n  background-color: black;\n  /* several unique declarations */\n}\n\n.unread {\n  color: white;\n  background-color: black;\n  /* several unique declarations */\n}\n```\n\nBoth our `.read` and `.unread` selectors share the `color: white;` and `background-color: black;` declarations, but otherwise have several of their own unique declarations. To cut down on the repetition, you can group these two selectors together as a comma-separated list:\n\n```css\n.read,\n.unread {\n  color: white;\n  background-color: black;\n}\n\n.read {\n  /* several unique declarations */\n}\n\n.unread {\n  /* several unique declarations */\n}\n```\n\nBoth of the examples above (with and without grouping) will have the same result, but the second example reduces the repetition of declarations and makes it easier to edit either the `color` or `background-color` for both classes at once.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations",
        "name": "Top Learn Css Foundations"
      }
    },
    {
      "id": "63ee35300d8d4841c3a7091d",
      "title": "CSS Foundations Lesson D",
      "challengeType": 19,
      "dashedName": "css-foundations-lesson-d",
      "description": "Another way to use selectors is to chain them as a list without any separation. Let’s say you had the following HTML:\n\n```html\n<div>\n  <div class=\"subsection header\">Latest Posts</div>\n  <p class=\"subsection preview\">This is where a preview for a post might go.</p>\n</div>\n```\n\nYou have two elements with the `subsection` class that have some sort of unique styles, but what if you only want to apply a separate rule to the element that also has `header` as a second class? Well, you could chain both the `class` selectors together in your CSS like so:\n\n```css\n.subsection.header {\n  color: red;\n}\n```\n\nWhat `.subsection.header` does is it selects any element that has both the `subsection` and `header` classes. Notice how there isn’t any space between the `.subsection` and `.header` `class` selectors. This syntax basically works for chaining any combination of selectors, except for chaining more than one type selector.\n\nThis can also be used to chain a class and an ID, as shown below:\n\n```html\n<div>\n  <div class=\"subsection header\">Latest Posts</div>\n  <p class=\"subsection\" id=\"preview\">This is where a preview for a post might go.</p>\n</div>\n```\n\nYou can take the two elements above and combine them with the following:\n\n```css\n.subsection.header {\n  color: red;\n}\n\n.subsection#preview {\n  color: blue;\n}\n```\n\nIn general, you can’t chain more than one type selector since an element can’t be two different types at once. For example, chaining two type selectors like `div` and `p` would give us the selector `divp`, which wouldn’t work since the selector would try to find a literal `<divp>` element, which doesn’t exist.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations",
        "name": "Top Learn Css Foundations"
      }
    },
    {
      "id": "63ee35370d8d4841c3a7091e",
      "title": "CSS Foundations Lesson E",
      "challengeType": 19,
      "dashedName": "css-foundations-lesson-e",
      "description": "Combinators allow us to combine multiple selectors differently than either grouping or chaining them, as they show a relationship between the selectors. There are four types of combinators in total, but for right now we’re going to only show you the descendant combinator, which is represented in CSS by a single space between selectors. A descendant combinator will only cause elements that match the last selector to be selected if they also have an ancestor (parent, grandparent, etc) that matches the previous selector.\n\nSo something like `.ancestor .child` would select an element with the class `child` if it has an ancestor with the class `ancestor`. Another way to think of it is child will only be selected if it is nested inside of `ancestor`, no matter how deep. Take a quick look at the example below and see if you can tell which elements would be selected based on the CSS rule provided:\n\n```html\n<!-- index.html -->\n\n<div class=\"ancestor\"> <!-- A -->\n  <div class=\"contents\"> <!-- B -->\n    <div class=\"contents\"> <!-- C -->\n    </div>\n  </div>\n</div>\n\n<div class=\"contents\"></div> <!-- D -->\n```\n\n```css\n/* styles.css */\n\n.ancestor .contents {\n  /* some declarations */\n}\n```\n\nIn the above example, the first two elements with the `contents` class (`B` and `C`) would be selected, but that last element (`D`) won’t be. Was your guess correct?\n\nThere’s really no limit to how many combinators you can add to a rule, so `.one .two .three .four` would be totally valid. This would just select an element that has a class of `four` if it has an ancestor with a class of `three`, and if that ancestor has its own ancestor with a class of `two`, and so on. You generally want to avoid trying to select elements that need this level of nesting, though, as it can get pretty confusing and long, and it can cause issues when it comes to specificity.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations",
        "name": "Top Learn Css Foundations"
      }
    },
    {
      "id": "63ee353e0d8d4841c3a7091f",
      "title": "CSS Foundations Lesson F",
      "challengeType": 19,
      "dashedName": "css-foundations-lesson-f",
      "description": "Okay, you went over quite a bit so far. The only thing left for now is to go over how to add all this CSS to your HTML. There are three methods to do so.\n\nExternal CSS is the most common method you will come across, and it involves creating a separate file for the CSS and linking it inside of an HTML’s opening and closing `<head>` tags with a `<link>` element (which is a void element and doesn't require a closing tag):\n\nFirst, you add a void element `<link>` tag inside of the opening and closing `<head>` tags of the HTML file. The `href` attribute is the location of the CSS file, either an absolute URL or, what you’ll be utilizing, a URL relative to the location of the HTML file. In the example above, you are assuming both files are located in the same directory. The `rel` attribute is required, and it specifies the relationship between the HTML file and the linked file.\n\nThen inside of the newly created `styles.css` file, you have the selector (the `div` and `p`), followed by a pair of opening and closing curly braces, which create a “declaration block”. Finally, you place any declarations inside of the declaration block. `color: white; ` is one declaration, with `color` being the property and `white` being the value, and `background-color: black;` is another declaration.\n\nA note on file names: `styles.css` is just what you went with as the file name here. You can name the file whatever you want as long as the file type is `.css`, though “style” or “styles” is most commonly used.\n\nA couple of the pros to this method are:\n\n1. It keeps your HTML and CSS separated, which results in the HTML file being smaller and making things look cleaner.\n2. You only need to edit the CSS in one place, which is especially handy for websites with many pages that all share similar styles.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations",
        "name": "Top Learn Css Foundations"
      }
    },
    {
      "id": "63ee35450d8d4841c3a70920",
      "title": "CSS Foundations Lesson G",
      "challengeType": 19,
      "dashedName": "css-foundations-lesson-g",
      "description": "Internal CSS (or embedded CSS) involves adding the CSS within the HTML file itself instead of creating a completely separate file. With the internal method, you place all the rules inside of a pair of opening and closing `<style>` tags, which are then placed inside of the opening and closing `<head>` tags of your HTML file. Since the styles are being placed directly inside of the `<head>` tags, you no longer need a `<link>` element that the external method requires.\n\nBesides these differences, the syntax is exactly the same as the external method (selector, curly braces, declarations):\n\n```html\n<head>\n  <style>\n    div {\n      color: white;\n      background-color: black;\n    }\n\n    p {\n      color: red;\n    }\n  </style>\n</head>\n<body>...</body>\n```\n\nThis method can be useful for adding unique styles to a single page of a website, but it doesn’t keep things separate like the external method, and depending on how many rules and declarations there are it can cause the HTML file to get pretty big.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations",
        "name": "Top Learn Css Foundations"
      }
    },
    {
      "id": "63ee354c0d8d4841c3a70921",
      "title": "CSS Foundations Lesson H",
      "challengeType": 19,
      "dashedName": "css-foundations-lesson-h",
      "description": "Inline `CSS` makes it possible to add styles directly to `HTML` elements, though this method isn’t as recommended:\n\n```html\n<body>\n  <div style=\"color: white; background-color: black;\">...</div>\n</body>\n```\n\nThe first thing to note is that there aren't any selectors here, since the styles are being added directly to the opening `<div>` tag itself. Next, you have the `style` attribute, with its value within the pair of quotation marks being the declarations.\n\nIf you need to add a unique style for a single element, this method can work just fine. Generally, though, this isn’t exactly a recommended way for adding CSS to HTML for a few reasons:\n\nIt can quickly become pretty messy once you start adding a lot of declarations to a single element, causing your HTML file to become unnecessarily bloated.\nIf you want many elements to have the same style, you would have to copy + paste the same style to each individual element, causing lots of unnecessary repetition and more bloat.\nAny inline CSS will override the other two methods, which can cause unexpected results. (While you won’t dive into it here, this can actually be taken advantage of).",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations\\css-foundations-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations",
        "name": "Top Learn Css Foundations"
      }
    },
    {
      "id": "63ee3f71381756f9716727ef",
      "title": "CSS Foundations Exercise A",
      "challengeType": 25,
      "dashedName": "css-foundations-exercise-a",
      "description": "**Objective:** \nIn this exercise, you're going to practice adding CSS to an HTML file using all three methods: external CSS, internal CSS, and inline CSS. You should only be using type selectors for this exercise when adding styles via the external and internal methods. You should also use keywords for colors (e.g. \"blue\") instead of using `RGB` or `HEX` values.\n\n## User Stories\n\n- You should see a `div` element with some text.\n  - It should have a `red` background, `white` text, a font size of `32px`, text center aligned and `bold`.\n  - The CSS for the `div` element should be added externally, and using a type selector.\n- You should see a `p` element with some text.\n  - It should have a `green` background, `white` text, and a font size of `18px`.\n  - The CSS for the `p` element should be added internally, and using a type selector.\n- You should see a `button` element with some text.\n  - The `button` element should have an `orange` background and a font size of `18px`.\n  - The CSS for the `button` element should be added using inline styles.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Exercise A</title>\n  </head>\n  <body>\n\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": "/* styles.css */"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My Styling Example</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n  <style>\n    p {\n      background-color: green;\n      color: white;\n      font-size: 18px;\n    }\n  </style>\n</head>\n<body>\n  <div>Hello World!</div>\n  <p>This is a paragraph.</p>\n  <button style=\"background-color: orange; font-size: 18px;\">Click Me</button>\n</body>\n</html>"
        },
        {
          "language": "css",
          "code": "div {\n  background-color: red;\n  color: white;\n  font-size: 32px;\n  text-align: center;\n  font-weight: bold;\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have one `div` element containing some text.\n\n```js\nconst divElement = document.querySelector('div');\n\nassert.isNotNull(divElement);\nassert.isAtLeast(divElement?.innerText.length, 1);\n```\n\nYou should have an external stylesheet containing the `div` element styles.\n\n```js\nconst styleSheet = new __helpers.CSSHelp(document).getStyleSheet();\nconst isExternal = styleSheet?.ownerNode.classList.contains('fcc-injected-styles');\nconst divStyle = new __helpers.CSSHelp(document).getStyle('div');\n\nassert.isTrue(isExternal);\nassert.isNotNull(divStyle);\n```\n\nYour `div` element should not have its CSS added using internal or inline styles.\n\n```js\nconst styleElement = document.querySelector('style:not([class])');\n\nassert.isNotTrue(styleElement?.innerText.includes('div'));\nassert.isNotTrue(document.querySelector('div')?.hasAttribute('style'));\n```\n\nYour `div` element should have a `background-color` of `red` and a `color` of `white`.\n\n```js\nconst divStyle = new __helpers.CSSHelp(document).getStyle('div');\nconst divBGColor = divStyle?.getPropertyValue('background-color');\nconst divColor = divStyle?.getPropertyValue('color');\n\nassert.equal(divBGColor, 'red');\nassert.equal(divColor, 'white');\n```\n\nYour `div` element should have `font-weight` set to `bold`, `font-size` set to `32px`, and `text-align` set to `center`.\n\n```js\nconst divStyle = new __helpers.CSSHelp(document).getStyle('div');\nconst textAlign = divStyle?.getPropertyValue('text-align');\nconst fontSize = divStyle?.getPropertyValue('font-size');\nconst fontWeight = divStyle?.getPropertyValue('font-weight');\n\nassert.equal(textAlign, 'center');\nassert.equal(fontSize, '32px');\nassert.equal(fontWeight,'bold');\n```\n\nYou should have one `p` element and it should contain some text.\n\n```js\nconst pElement = document.querySelector('p');\n\nassert.isNotNull(pElement);\nassert.isAtLeast(pElement?.innerText.length, 1)\n```\n\nYour `p` element should have its styles added internally using a `style` element.\n\n```js\nconst styleElement = document.querySelector('style:not([class])');\nconst rules = styleElement?.sheet?.cssRules?.[0] || styleElement?.sheet?.rules?.[0];\nlet isStyled = false;\n\nif (rules && rules.selectorText === 'p') {\n  isStyled = true;\n}\n\nassert.isTrue(isStyled);\n```\n\nYour `p` element should have a `font-size` of `18px` and have `color` set to `white`.\n\n```js\nconst styleElement = document.querySelector('style:not([class])');\nconst rules = styleElement?.sheet?.cssRules?.[0] || styleElement?.sheet?.rules?.[0];\nlet fontSize, color;\n\nif (rules && rules.selectorText === 'p') {\n  fontSize = rules.style.fontSize;\n  color = rules.style.color;\n}\n\nassert.equal(fontSize, \"18px\");\nassert.equal(color, 'white');\n```\n\nYou should have one `button` element containing some text.\n\n```js\nconst btnElement = document.querySelector('button');\n\nassert.isNotNull(btnElement);\nassert.isAtLeast(btnElement?.innerText.length, 1);\n```\n\nYour `button` element should have an inline style.",
          "testCode": "assert.isTrue(document.querySelector('button')?.hasAttribute('style'));"
        },
        {
          "text": "Your `button` element should have its `background-color` set to `orange`.",
          "testCode": "assert.equal(document.querySelector('button')?.style.backgroundColor, 'orange')"
        },
        {
          "text": "Your `button` element should have its `font-size` set to `18px`.",
          "testCode": "assert.equal(document.querySelector('button')?.style.fontSize, '18px')"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations-projects",
        "name": "Top Learn Css Foundations Projects"
      }
    },
    {
      "id": "63ee3fe4381756f9716727f0",
      "title": "CSS Foundations Exercise B",
      "challengeType": 25,
      "dashedName": "css-foundations-exercise-b",
      "description": "**Objective:** There are several elements in the HTML file provided, which you will have to add either class or ID attributes to. You will then have to add rules in the CSS file provided using the correct selector syntax.\n\n## User Stories\n\n1. You should see a `yellow` background for all odd numbered elements in the list.\n\n1. You should have a `class` selector used for all odd numbered elements in the list.\n\n1. You should see that the second element in the list has `blue` text and a `font-size` of `36px`.\n\n1. The `font-size` and text color on the second element should be set by using an `id` attribute.\n\n1. You should see that the third element in the list has a `font-size` of `24px`.\n\n1. The `font-size` on the third element should be set by using a `class` attribute.\n\n1. You should see that the fourth element in the list has a `red` background, a `font-size` of `24px`, and a `font-weight` of `bold`.\n\n1. The `font-size` of the fourth element should be set with a `class` attribute. The `font-weight` and the color should be set with an `id` attribute.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Class and ID Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <p>Number 1 - I'm a class!</p>\n    <div>Number 2 - I'm one ID.</div>\n    <p>Number 3 - I'm a class, but cooler!</p>\n    <div>Number 4 - I'm another ID.</div>\n    <p>Number 5 - I'm a class!</p>\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Class and ID Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <p class=\"odd\">Number 1 - I'm a class!</p>\n    <div id=\"two\">Number 2 - I'm one ID.</div>\n    <p class=\"odd adjust-font-size\">Number 3 - I'm a class, but cooler!</p>\n    <div id=\"four\" class=\"adjust-font-size\">Number 4 - I'm another ID.</div>\n    <p class=\"odd\">Number 5 - I'm a class!</p>\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": ".odd {\n  background-color: yellow;\n  font-family: Verdana, \"DejaVu Sans\", sans-serif;\n}\n\n.adjust-font-size {\n  font-size: 24px;\n}\n\n#two {\n  color: blue;\n  font-size: 36px;\n}\n\n#four {\n  background-color: red;\n  font-weight: bold;\n}"
        }
      ],
      "tests": [
        {
          "text": "Every odd element should have a `class` attribute.\n\n```js\nconst p = Array.from(document.querySelectorAll('P'));\n\nconst everyPHasClass = p?.every((paragraph) => paragraph.classList.length > 0);\n\nassert(everyPHasClass);\n```\n\nYour odd elements should have a `background-color` of `yellow`.\n\n```js\nconst p = Array.from(document.querySelectorAll('P'));\n\nconst everyPHasBackgroundColor = p?.every((paragraph) => {\n  const style = getComputedStyle(paragraph);\n\nreturn style?.backgroundColor === 'rgb(255, 255, 0)';\n})\n\nassert.equal(everyPHasBackgroundColor, true);\n```\n\nYour second element should have `blue` text and a `font-size` of `36px`.\n\n```js\nconst secondElementId = document.querySelectorAll('div')?.[0]?.id;\n\nconst style = new __helpers.CSSHelp(document).getStyle(`#${secondElementId}`);\n\nassert.equal(style?.color, 'blue');\nassert.equal(style?.fontSize, '36px');\n```\n\nYour third element should have text and a `font-size` of `24px`.\n\n```js\nconst thirdElement = document.querySelectorAll('p')?.[1];\n\nassert(thirdElement?.innerText?.length > 0);\n\nconst thirdElementClasses = Array.from(thirdElement?.classList?.values());\n\nassert(thirdElementClasses.some(thirdElementClass => {\n\nconst style = new __helpers.CSSHelp(document).getStyle(`.${thirdElementClass}`);\n\nreturn style?.fontSize === '24px';\n\n}))\n\n```\n\nThe fourth element should have a `font-size` of `24px`.\n\n```js\nconst fourthElementClass = document.querySelectorAll('div')?.[1]?.classList[0];\n\nconst style = new __helpers.CSSHelp(document).getStyle(`.${fourthElementClass}`);\n\nassert(style?.fontSize === '24px');\n```\n\nThe fourth element should have a `red` `background-color`.\n\n```js\nconst fourthElement = document.querySelectorAll('div')?.[1]?.id;\n\nconst style = new __helpers.CSSHelp(document).getStyle(`#${fourthElement}`);\n\nassert(style?.backgroundColor === 'red');\n```\n\nThe fourth element should have a `font-weight` of `bold`.\n\n```js\nconst fourthElement = document.querySelectorAll('div')?.[1]?.id;\n\nconst style = new __helpers.CSSHelp(document).getStyle(`#${fourthElement}`);\n\nassert(style?.fontWeight === 'bold');\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations-projects",
        "name": "Top Learn Css Foundations Projects"
      }
    },
    {
      "id": "63ee3fe9381756f9716727f1",
      "title": "CSS Foundations Exercise C",
      "challengeType": 25,
      "dashedName": "css-foundations-exercise-c",
      "description": "Let's build a little off the previous exercise, in which you added multiple classes to a single element in order to apply two different rules to it.\n\n1. You should see a black background and white text on the first `button` element.\n1. You should see a yellow background on the second `button` element.\n1. You should set a font size of `28px` using a selector list.\n1. You should have a list of fonts containing `Helvetica` and `Times New Roman` with `sans-serif` as a fallback in the selector list.\n1. You should see a unique class name on each element.\n1. You should have a selector list for styles that both elements share.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Grouping Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <button>Click Me!</button>\n    <button>No, Click Me!</button>\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Grouping Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <button class=\"inverted\">Click Me!</button>\n    <button class=\"fancy\">No, Click Me!</button>\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": ".inverted,\n.fancy {\n  font-family: Helvetica, \"Times New Roman\", sans-serif;\n  font-size: 28px;\n}\n\n.inverted {\n  background-color: black;\n  color: white;\n}\n\n.fancy {\n  background-color: yellow;\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have a `black` background on the first element.\n\n```js\nconst classes = document.querySelectorAll('button')?.[0].classList;\n\nconst style = new __helpers.CSSHelp(document).getStyle(`.${classes[0]}`);\n\nassert.equal(style?.backgroundColor, 'black');\n\n```\n\nYour first element should have a text color of `white`.\n\n```js\n\nconst classes = document.querySelectorAll('button')?.[0].classList;\n\nconst style = new __helpers.CSSHelp(document).getStyle(`.${classes[0]}`);\n\nassert.equal(style?.color, 'white');\n\n```\n\nYou should set the `font-size` for both elements to `28px` using a selector list.\n\n```js\nconst classOne = document.querySelectorAll('button')?.[0].classList?.[0];\nconst classTwo = document.querySelectorAll('button')?.[1].classList?.[0];\n\nfunction eitherOr() {\n  const a = new __helpers.CSSHelp(document)\n  return a.getStyle(`.${classOne}, .${classTwo}`) ?? a.getStyle(`.${classTwo}, .${classOne}`);\n}\nassert.equal(eitherOr()?.fontSize, '28px');\n```\n\nYou should have a unique class name on each element.\n\n```js\nconst elementOneClasses = document.querySelectorAll('button')?.[0].classList;\nconst elementTwoClasses = document.querySelectorAll('button')?.[1].classList;\n\nfor(let i = 0; i < elementOneClasses.length; i++){\n    assert(![...elementTwoClasses].includes(elementOneClasses[i]));\n}\n\n```\n\nYou should have a selector list for styles that both elements share.\n\n```js\nconst classOne = document.querySelectorAll('button')?.[0].classList?.[0];\nconst classTwo = document.querySelectorAll('button')?.[1].classList?.[0];\n\nfunction eitherOr() {\n  const a = new __helpers.CSSHelp(document)\n  return a.getStyle(`.${classOne}, .${classTwo}`) ?? a.getStyle(`.${classTwo}, .${classOne}`);\n}\nassert.exists(eitherOr());\n```\n\nYou should have a list of fonts containing `Helvetica` and `Times New Roman` with `sans-serif` as a fallback in the selector list.\n\n```js\nconst classOne = document.querySelectorAll('button')?.[0].classList?.[0];\nconst classTwo = document.querySelectorAll('button')?.[1].classList?.[0];\n\nfunction eitherOr() {\n  const a = new __helpers.CSSHelp(document)\n  return a.getStyle(`.${classOne}, .${classTwo}`) ?? a.getStyle(`.${classTwo}, .${classOne}`);\n}\n\nassert.equal(eitherOr()?.fontFamily, 'Helvetica, \"Times New Roman\", sans-serif');\n```\n\nEach element should only have one class.\n\n```js\nconst elementOneClasses = document.querySelectorAll('button')?.[0].classList;\nconst elementTwoClasses = document.querySelectorAll('button')?.[1].classList;\n\nassert(elementOneClasses.length === 1 && elementTwoClasses.length === 1);\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations-projects",
        "name": "Top Learn Css Foundations Projects"
      }
    },
    {
      "id": "63ee3ff1381756f9716727f2",
      "title": "CSS Foundations Exercise D",
      "challengeType": 25,
      "dashedName": "css-foundations-exercise-d",
      "description": "With this exercise, we've provided you a completed HTML file, so you will only have to edit the CSS file. For this exercise, it's more important to understand how chaining different selectors works than how to actually add the attributes.\n\n1. You should see a `width` of `300px` on the `avatar` and `proportioned` class.\n1. You should give it a height so that it retains its original square proportions (don't hardcode in a pixel value for the height!).\n1. You should give the elements with both the `avatar` and `distorted` classes a `width` of `200px`.\n1. You should give it a `height` twice as big as it's width.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "css",
          "code": ""
        },
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Chaining Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <!-- Use the classes BELOW this line -->\n    <div>\n      <img class=\"avatar proportioned\" src=\"https://cdn.freecodecamp.org/curriculum/odin-project/css-foundations/css-foundations-01.jpg\" alt=\"Two cute kittens\">\n      <img class=\"avatar distorted\" src=\"https://cdn.freecodecamp.org/curriculum/odin-project/css-foundations/css-foundations-02.jpg\" alt=\"Three cute kittens\">\n    </div>\n    <!-- Use the classes ABOVE this line -->\n    <div>\n      <img class=\"original proportioned\" src=\"https://cdn.freecodecamp.org/curriculum/odin-project/css-foundations/css-foundations-01.jpg\" alt=\"Two cute kittens\">\n      <img class=\"original distorted\" src=\"https://cdn.freecodecamp.org/curriculum/odin-project/css-foundations/css-foundations-02.jpg\" alt=\"Three cute kittens\">\n    </div>\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Chaining Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <!-- Use the classes BELOW this line -->\n    <div>\n      <img class=\"avatar proportioned\" src=\"https://cdn.freecodecamp.org/curriculum/odin-project/css-foundations/css-foundations-01.jpg\" alt=\"Two cute kittens\">\n      <img class=\"avatar distorted\" src=\"https://cdn.freecodecamp.org/curriculum/odin-project/css-foundations/css-foundations-02.jpg\" alt=\"Three cute kittens\">\n    </div>\n    <!-- Use the classes ABOVE this line -->\n    <div>\n      <img class=\"avatar proportioned\" src=\"https://cdn.freecodecamp.org/curriculum/odin-project/css-foundations/css-foundations-01.jpg\" alt=\"Two cute kittens\">\n      <img class=\"avatar distorted\" src=\"https://cdn.freecodecamp.org/curriculum/odin-project/css-foundations/css-foundations-02.jpg\" alt=\"Three cute kittens\">\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": ".avatar.proportioned {\n  height: auto;\n  width: 300px;\n}\n\n.avatar.distorted {\n  height: 400px;\n  width: 200px;\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have a `width` of `300px` on the `avatar` and `proportioned` class.",
          "testCode": "const style = new __helpers.CSSHelp(document).getStyle(`.avatar.proportioned`) || new __helpers.CSSHelp(document).getStyle(`.proportioned.avatar`);\nassert(style?.width === '300px');"
        },
        {
          "text": "You should have a height of `auto` on the `avatar` and `proportioned` class.",
          "testCode": "const style = new __helpers.CSSHelp(document).getStyle(`.avatar.proportioned`) || new __helpers.CSSHelp(document).getStyle(`.proportioned.avatar`)\nassert(style?.height === 'auto');"
        },
        {
          "text": "You should use a chaining selector on the `avatar` and `proportioned` class.",
          "testCode": "const style = new __helpers.CSSHelp(document).getStyle(`.avatar.proportioned`) || new __helpers.CSSHelp(document).getStyle(`.proportioned.avatar`);\nassert(style);"
        },
        {
          "text": "You should have a `width` of `200px` on the `avatar` and `distorted` class.",
          "testCode": "const style = new __helpers.CSSHelp(document).getStyle(`.avatar.distorted`) || new __helpers.CSSHelp(document).getStyle(`.distorted.avatar`);\nassert(style?.width === '200px');"
        },
        {
          "text": "You should use a chaining selector on the `avatar` and `distorted` class.",
          "testCode": "const style = new __helpers.CSSHelp(document).getStyle(`.avatar.distorted`) || new __helpers.CSSHelp(document).getStyle(`.distorted.avatar`);\nassert(style);"
        },
        {
          "text": "You should have a `height` two times the width on the `avatar` and `distorted` class.",
          "testCode": "const style = new __helpers.CSSHelp(document).getStyle(`.avatar.distorted`) || new __helpers.CSSHelp(document).getStyle(`.distorted.avatar`);\nassert(style?.height === '400px');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations-projects",
        "name": "Top Learn Css Foundations Projects"
      }
    },
    {
      "id": "63ee3ff8381756f9716727f3",
      "title": "CSS Foundations Exercise E",
      "challengeType": 25,
      "dashedName": "css-foundations-exercise-e",
      "description": "Understanding how combinators work can become a lot easier when you start playing around with them and see what exactly is affected by them versus what isn't.\n\nThe goal of this exercise is to apply styles to elements that are descendants of another element, while leaving elements that aren't descendants of that element unstyled.\n\n1. You should see a `yellow` background for `p` elements that are descendants of the `div` element.\n1. You should see a text color of `red` for elements that are descendants of the `div` element.\n1. You should see a font size of `20px` for elements that are descendants of the `div` element.\n1. You should center align text for elements that are descendants of the `div` element.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "css",
          "code": "```"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Descendant Combinator</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <div class=\"container\">\n      <p class=\"text\">This should be styled.</p>\n    </div>\n    <p class=\"text\">This should be unstyled.</p>\n    <p class=\"text\">This should be unstyled.</p>\n    <div class=\"container\">\n      <p class=\"text\">This should be styled.</p>\n      <p class=\"text\">This should be styled.</p>\n    </div>\n  </body>\n</html>"
        },
        {
          "language": "css",
          "code": ".container .text {\n  background-color: yellow;\n  color: red;\n  font-size: 20px;\n  text-align: center;\n}"
        }
      ],
      "tests": [
        {
          "text": "You should have a background color of `yellow` on your descendants.\n\n```js\nconst styleOne = new __helpers.CSSHelp(document).getStyle('.container .text');\nconst styleTwo =  new __helpers.CSSHelp(document).getStyle('div p');\nconst styleThree =  new __helpers.CSSHelp(document).getStyle('div .text');\nconst styleFour =  new __helpers.CSSHelp(document).getStyle('.container p');\n\nconst styles = [styleOne, styleTwo, styleThree, styleFour];\n\nfunction getCorrectStyle(){\n    for(let i = 0; i < styles.length; i++){\n        if(styles[i] != undefined){\n            return styles[i];\n        }\n    }\n}\n\nassert(getCorrectStyle()?.backgroundColor === 'yellow');\n\n```\n\nYou should have a text color of `red` on your descendants.\n\n```js\nconst styleOne = new __helpers.CSSHelp(document).getStyle('.container .text');\nconst styleTwo =  new __helpers.CSSHelp(document).getStyle('div p');\nconst styleThree =  new __helpers.CSSHelp(document).getStyle('div .text');\nconst styleFour =  new __helpers.CSSHelp(document).getStyle('.container p');\n\nconst styles = [styleOne, styleTwo, styleThree, styleFour];\n\nfunction getCorrectStyle(){\n    for(let i = 0; i < styles.length; i++){\n        if(styles[i] != undefined){\n            return styles[i];\n        }\n    }\n}\n\nassert(getCorrectStyle()?.color === 'red');\n\n```\n\nYou should have a font size of `20px` on your descendants.\n\n```js\nconst styleOne = new __helpers.CSSHelp(document).getStyle('.container .text');\nconst styleTwo =  new __helpers.CSSHelp(document).getStyle('div p');\nconst styleThree =  new __helpers.CSSHelp(document).getStyle('div .text');\nconst styleFour =  new __helpers.CSSHelp(document).getStyle('.container p');\n\nconst styles = [styleOne, styleTwo, styleThree, styleFour];\n\nfunction getCorrectStyle(){\n    for(let i = 0; i < styles.length; i++){\n        if(styles[i] != undefined){\n            return styles[i];\n        }\n    }\n}\n\nassert(getCorrectStyle()?.fontSize === '20px');\n\n```\n\nYou should center align the text on your descendants.\n\n```js\nconst styleOne = new __helpers.CSSHelp(document).getStyle('.container .text');\nconst styleTwo =  new __helpers.CSSHelp(document).getStyle('div p');\nconst styleThree =  new __helpers.CSSHelp(document).getStyle('div .text');\nconst styleFour =  new __helpers.CSSHelp(document).getStyle('.container p');\n\nconst styles = [styleOne, styleTwo, styleThree, styleFour];\n\nfunction getCorrectStyle(){\n    for(let i = 0; i < styles.length; i++){\n        if(styles[i] != undefined){\n            return styles[i];\n        }\n    }\n}\n\nassert(getCorrectStyle()?.textAlign === 'center');\n\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-foundations-projects\\css-foundations-exercise-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-foundations-projects",
        "name": "Top Learn Css Foundations Projects"
      }
    },
    {
      "id": "6489bcd7b7600c818dc297ea",
      "title": "The Cascade of CSS Lesson A",
      "challengeType": 15,
      "dashedName": "the-cascade-of-css-lesson-a",
      "description": "Sometimes we may have rules that conflict with one another, and we end up with some unexpected results. “But I wanted these paragraphs to be blue, why are they red like these other paragraphs?!” As frustrating as this can be, it’s important to understand that CSS doesn’t just do things against your wishes. CSS only does what we tell it to do. One exception to this is the default styles that are provided by a browser. These default styles vary from browser to browser, and they are why some elements create a large “gap” between themselves and other elements, or why buttons look the way they do, despite us not writing any CSS rules to style them that way.\n\nSo if you end up with some unexpected behavior like this it’s either because of these default styles, not understanding how a property works, or not understanding this little thing called the cascade.\n\nThe cascade is what determines which rules actually get applied to your HTML. There are different factors that the cascade uses to determine this. We will examine three of these factors, which will hopefully help you avoid those frustrating “I hate CSS” moments.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-specificity",
        "name": "Top Learn Css Specificity"
      }
    },
    {
      "id": "6489c96782cf2e4f86f03ae2",
      "title": "The Cascade of CSS Lesson B",
      "challengeType": 15,
      "dashedName": "the-cascade-of-css-lesson-b",
      "description": "A CSS declaration that is more specific will take precedence over less specific ones. Inline styles, which you went over in a previous lesson, have the highest specificity compared to selectors, while each type of selector has its own specificity level that contributes to how specific a declaration is. Other selectors contribute to specificity, but you're focusing only on the ones you’ve gone over so far:\n\n1. ID selectors (most specific selector)\n2. Class selectors\n3. Type selectors\n\nSpecificity will only be taken into account when an element has multiple, conflicting declarations targeting it, sort of like a tie-breaker. An ID selector will always beat any number of class selectors, a class selector will always beat any number of type selectors, and a type selector will always beat any number of anything less specific than it. When no declaration has a selector with a higher specificity, a larger amount of a single selector will beat a smaller amount of that same selector.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-specificity",
        "name": "Top Learn Css Specificity"
      }
    },
    {
      "id": "6489cb0b82cf2e4f86f03ae3",
      "title": "The Cascade of CSS Lesson C",
      "challengeType": 15,
      "dashedName": "the-cascade-of-css-lesson-c",
      "description": "Let’s take a look at a few quick examples to visualize how specificity works. Consider the following HTML and CSS code:\n\n```html\n<!-- index.html -->\n\n<div class=\"main\">\n  <div class=\"list subsection\"></div>\n</div>\n```\n\n```css\n/* rule 1 */\n.subsection {\n  color: blue;\n}\n\n/* rule 2 */\n.main .list {\n  color: red;\n}\n```\n\nIn the example above, both rules are using only class selectors, but rule 2 is more specific because it is using more class selectors.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-specificity",
        "name": "Top Learn Css Specificity"
      }
    },
    {
      "id": "6489cf5882cf2e4f86f03ae5",
      "title": "The Cascade of CSS Lesson D",
      "challengeType": 15,
      "dashedName": "the-cascade-of-css-lesson-d",
      "description": "Now, let’s change things a little bit:\n\n```html\n<!-- index.html -->\n\n<div class=\"main\">\n  <div class=\"list\" id=\"subsection\"></div>\n</div>\n```\n\n```css\n/* rule 1 */\n#subsection {\n  color: blue;\n}\n\n/* rule 2 */\n.main .list {\n  color: red;\n}\n```\n\nIn the example above, despite rule 2 having more class selectors than ID selectors, rule 1 is more specific because ID beats class.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-specificity",
        "name": "Top Learn Css Specificity"
      }
    },
    {
      "id": "6489cf6282cf2e4f86f03ae6",
      "title": "The Cascade of CSS Lesson E",
      "challengeType": 15,
      "dashedName": "the-cascade-of-css-lesson-e",
      "description": "```css\n/* rule 1 */\n#subsection .list {\n  background-color: yellow;\n  color: blue;\n}\n\n/* rule 2 */\n#subsection .main .list {\n  color: red;\n}\n```\n\nIn this final example, both rules are using ID and class selectors, so neither rule is using a more specific selector than the other. The cascade then checks the amounts of each selector type. Both rules only have one ID selector, but rule 2 has more class selectors, so rule 2 has a higher specificity!\n\nWhile the `color: red` declaration would take precedence, the `background-color: yellow` declaration would still be applied since there’s no conflicting declaration for it.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-specificity",
        "name": "Top Learn Css Specificity"
      }
    },
    {
      "id": "6489cf6782cf2e4f86f03ae7",
      "title": "The Cascade of CSS Lesson F",
      "challengeType": 15,
      "dashedName": "the-cascade-of-css-lesson-f",
      "description": "```css\n/* rule 1 */\n.class.second-class {\n  font-size: 12px;\n}\n\n/* rule 2 */\n.class .second-class {\n  font-size: 24px;\n}\n```\n\nHere both rule 1 and rule 2 have the same specificity. Rule 1 uses a chaining selector (no space) and rule 2 uses a descendant combinator (the empty space). But both rules have two classes and the combinator symbol itself does not add to the specificity.\n\n```css\n/* rule 1 */\n.class.second-class {\n  font-size: 12px;\n}\n/* rule 2 */\n.class > .second-class {\n  font-size: 24px;\n}\n```\n\nThis example shows the same thing. Even though rule 2 is using a child combinator (`>`), this does not change the specificity value. Both rules still have two classes so they have the same specificity values.\n\n*Note:* Not everything adds to specificity\n\nWhen comparing selectors, you may come across special symbols for the universal selector (`*`) as well as combinators (`+`, `~`, `>`, and an empty space). These symbols do not add any specificity in and of themselves.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-specificity",
        "name": "Top Learn Css Specificity"
      }
    },
    {
      "id": "6489cf7682cf2e4f86f03ae8",
      "title": "The Cascade of CSS Lesson G",
      "challengeType": 15,
      "dashedName": "the-cascade-of-css-lesson-g",
      "description": "Inheritance refers to certain CSS properties that, when applied to an element, are inherited by that element’s descendants, even if we don’t explicitly write a rule for those descendants. Typography based properties (`color`, `font-size`, `font-family`, etc.) are usually inherited, while most other properties aren’t.\n\nThe exception to this is when directly targeting an element, as this always beats inheritance:\n\n```html\n<!-- index.html -->\n\n<div id=\"parent\">\n  <div class=\"child\"></div>\n</div>\n```\n\n```css\n/* styles.css */\n\n#parent {\n  color: red;\n}\n\n.child {\n  color: blue;\n}\n```\n\nDespite the `parent` element having a higher specificity with an ID, the `child` element would have the `color: blue` style applied since that declaration directly targets it, while `color: red` from the parent is only inherited.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-specificity",
        "name": "Top Learn Css Specificity"
      }
    },
    {
      "id": "648acb0745e79f79650fa2ac",
      "title": "The Cascade of CSS Lesson H",
      "challengeType": 15,
      "dashedName": "the-cascade-of-css-lesson-h",
      "description": "The final factor, the end of the line, the tie-breaker of the tie-breaker. Let’s say that after every other factor has been taken into account, there are still multiple conflicting rules targeting an element. How does the cascade determine which rule to apply?\n\nReally simply, actually. Whichever rule was the last defined is the winner.\n\n```css\n/* styles.css */\n\n.alert {\n  color: red;\n}\n\n.warning {\n  color: yellow;\n}\n```\n\nFor an element that has both the `alert` and `warning` classes, the cascade would run through every other factor, including inheritance (none here) and specificity (neither rule is more specific than the other). Since the `.warning` rule was the last one defined, and no other factor was able to determine which rule to apply, it’s the one that gets applied to the element.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-css-specificity\\the-cascade-of-css-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-css-specificity",
        "name": "Top Learn Css Specificity"
      }
    },
    {
      "id": "65e9713d484dd50f720e6fe6",
      "title": "Learn Data Types and Conditionals Lesson A",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-a",
      "description": "Depending on what kind of work you're doing, you might end up working more with pieces of text rather than numbers. A **string** is a piece of text… and is a fundamental building block of the language.\n\nHTML provides structure and meaning to text, CSS allows us to precisely style it, and JavaScript offers many features for manipulating strings. These include creating custom welcome messages and prompts, showing the right text labels when needed, sorting terms into the desired order, and much more.\n\nStrings are a fundamental data type in JavaScript. They are used to represent text and are wrapped in either single, double quotes or backticks:\n\n```javascript\nlet greeting = \"Hello World!\";\n\nlet greeting2 = 'I am learning JavaScript!';\n\nlet greeting3 = `with The Odin Project!`;\n```\n\nStrings declared using single quotes and strings declared using double quotes are the same, and which you use is down to personal preference — although it is good practice to choose one style and use it consistently in your code.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e97164484dd50f720e6fe7",
      "title": "Learn Data Types and Conditionals Lesson B",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-b",
      "description": "Now that you have gone through the points listed in the assignment of the previous challenge, you should have a good understanding of how strings can be manipulated in JavaScript.\n\nCurrently, this given string has a trailing space at the end after the exclamation mark. To solve this, you need to remove the trailing space from the string using a predefined method.\n\n```javascript\nlet greeting = \"Hello World!  \";\n\nconsole.log(greeting);\n```\n\n<a href=\"https://www.freecodecamp.org/news/javascript-string-handbook\" target=\"_blank\"> Link to Guide </a>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e97251484dd50f720e6fe8",
      "title": "Learn Data Types and Conditionals Lesson C",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-c",
      "description": "Seeing the example below, You want to make sure the word `loves` is present in the string.\n\n```javascript\nlet sentence = \"freeCodeCamp loves The Odin Project!\";\n```\n\n<a href=\"https://www.freecodecamp.org/news/javascript-string-handbook\" target=\"_blank\"> Link to Guide </a>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e9725a484dd50f720e6fe9",
      "title": "Learn Data Types and Conditionals Lesson D",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-d",
      "description": "Seeing the example below You want to know the index of the last occurrence of the word `The` in the string.\n\n```javascript\nlet sentence = \"freeCodeCamp loves The Odin Project! The Odin Project is great!\";\n```\n\n<a href=\"https://www.freecodecamp.org/news/javascript-string-handbook\" target=\"_blank\"> Link to Guide </a>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e97260484dd50f720e6fea",
      "title": "Learn Data Types and Conditionals Lesson E",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-e",
      "description": "Strings defined using backticks are called template literals. They are a new way to define strings in JavaScript. They allow you to embed expressions within the string. This is done by wrapping the expression in `${}`.\n\nFor example, the following code:\n\n```javascript\nlet name = \"John\";\nlet age = 25;\nlet greeting = `Hello, my name is ${name} and I am ${age} years old.`;\n```\n\nwill result in the `greeting` variable containing the string \"Hello, my name is John and I am 25 years old.\"",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e97267484dd50f720e6feb",
      "title": "Learn Data Types and Conditionals Lesson F",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-f",
      "description": "You know that JavaScript has a variety of data types, including strings, numbers and booleans. You can use comparison operators to compare these data types and make decisions based on the results.\n\nThe following comparison operators are available in JavaScript:\n\n| Operator | Description                              | Example      |\n|----------|------------------------------------------|--------------|\n| ==       | Equal (value comparison)                 | x == y       |\n| !=       | Not equal                                | x != y       |\n| >        | Greater than                             | x > y        |\n| <        | Less than                                | x < y        |\n| >=       | Greater than or equal to                 | x >= y       |\n| <=       | Less than or equal to                    | x <= y       |\n\nTo use a comparison in a variable assignment, you can use the `==` operator. For example:\n\n```javascript\nlet x = 5;\nlet y = 5;\n\nlet result = x == y;\n\nconsole.log(result); // true\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e9726d484dd50f720e6fec",
      "title": "Learn Data Types and Conditionals Lesson G",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-g",
      "description": "JavaScript also has the ability to compare types and values using the strict equality operator `===`. This operator checks if the two values are equal and of the same type. For example:\n\n```javascript\nlet x = 5;\nlet y = \"5\";\n\nlet result = x === y;\n\nconsole.log(result); // false\n```\n\nIn this example, the `result` variable will contain `false` because `x` is a number and `y` is a string. But if you use the `==` operator, the result will be `true` because JavaScript will convert the string to a number and compare the values.\n\nThis operator is called the strict equality operator because it checks for both value and type equality. It is often recommended to use the `===` operator to avoid unexpected results when comparing values.\n\nThere is also a strict inequality operator `!==` that checks if the two values are not equal and of the same type.\n\nThere are a lot of ways to use the strict equality operator, and it's important to understand how it works.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e9727a484dd50f720e6fed",
      "title": "Learn Data Types and Conditionals Lesson H",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-h",
      "description": "In any programming language, you need to compare values to make decisions. For example, if the weather is sunny, you will go out, otherwise you will stay at home. Another example would be to see if a user has enough points to level up in a game.\n\nThe `if-else` conditional statement is used to make decisions in JavaScript. It is often used with comparison operators to compare values and make decisions based on the results.\n\nAn example of an if statement is:\n\n```javascript\nlet x = 5;\n\nif (x > 3) {\n  console.log(\"x is greater than 3\");\n} else {\n  console.log(\"x is less than or equal to 3\");\n}\n```\n\nIn this example, the `x` variable is compared to the number `3` using the `>` operator. If `x` is greater than `3`, the first block of code will be executed. Otherwise, the second block of code will be executed.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e97280484dd50f720e6fee",
      "title": "Learn Data Types and Conditionals Lesson I",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-i",
      "description": "In the last example, you had two choices `if` or `else`. But what if you want to have more than two choices? You can use the `else if` statement to add more conditions to our code. The `else if` statement allows us to check multiple conditions and execute a block of code when the first condition is true. If the first condition is false, it will check the next condition and so on. If none of the conditions are true, the `else` block will be executed.\n\nHere is an example of the `else if` statement:\n\n```javascript\nlet x = 5;\n\nif (x > 10) {\n  console.log(\"x is greater than 10\");\n} else if (x > 5) {\n  console.log(\"x is greater than 5\");\n} else {\n  console.log(\"x is less than or equal to 5\");\n}\n```\n\nIn this example, the `x` variable is compared to the number `10` using the `>` operator. If `x` is greater than `10`, the first block of code will be executed. Otherwise, the `else if` statement will check the next condition. If `x` is greater than `5`, the second block of code will be executed. Otherwise, the `else` block will be executed.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-i.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e97288484dd50f720e6fef",
      "title": "Learn Data Types and Conditionals Lesson J",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-j",
      "description": "More complex conditional statements might include multiple conditions. That is why logical operators are used to combine multiple conditions. The logical operators are `&&`, `||` and `!` which are used to represent `and`, `or` and `not` respectively.\n\nThe logical operator `||` is used to combine two boolean conditions. It returns `true` if at least one of the conditions is `true`. Otherwise, it returns `false`:\n\n```javascript\nlet a = 5;\nlet b = 10;\nlet c = 15;\n\nif (a > b || a > c) {\n  console.log(\"At least one of the conditions is true\");\n} else {\n  console.log(\"Both of the conditions are false\");\n}\n```\n\nThe logical operator `&&` is used to combine two boolean conditions. It returns `true` only if both of the conditions are `true`. Otherwise, it returns `false`:\n\n```javascript\nlet a = 5;\nlet b = 10;\nlet c = 15;\n\nif (a < b && a < c) {\n  console.log(\"Both of the conditions are true\");\n} else {\n  console.log(\"At least one of the conditions is false\");\n}\n```\n\nThe logical operator `!` is used to negate a boolean condition. It returns `true` if the condition is `false`. Otherwise, it returns `false`:\n\n```javascript\nlet a = 5;\nlet b = 10;\n\nif (!(a > b)) {\n  console.log(\"The condition is false\");\n} else {\n  console.log(\"The condition is true\");\n}\n```\n\nIn the above example, the extra pair of parentheses is used to make the code more readable. It is not necessary to use them.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-j.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e9728d484dd50f720e6ff0",
      "title": "Learn Data Types and Conditionals Lesson K",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-k",
      "description": "The `switch` statement is used to perform different actions based on different conditions. It is similar to the `if-else` statement, but is more readable and easier to understand when there are multiple conditions to check. The `switch` statement is used to select one of many code blocks to be executed.\n\nThe `switch` statement evaluates an expression and compares it with the values of each case. If there is a match, the associated block of code is executed. If there is no match, the default block of code is executed.\n\n```javascript\nlet day = \"Monday\";\n\nswitch (day) {\n  case \"Monday\":\n    console.log(\"Today is Monday\");\n    break;\n  case \"Tuesday\":\n    console.log(\"Today is Tuesday\");\n    break;\n  case \"Wednesday\":\n    console.log(\"Today is Wednesday\");\n    break;\n  case \"Thursday\":\n    console.log(\"Today is Thursday\");\n    break;\n  case \"Friday\":\n    console.log(\"Today is Friday\");\n    break;\n  case \"Saturday\":\n    console.log(\"Today is Saturday\");\n    break;\n  case \"Sunday\":\n    console.log(\"Today is Sunday\");\n    break;\n  default:\n    console.log(\"Invalid day\");\n}\n```\n\nIn the above example, the value of the `day` variable is compared with the values of each case. If there is a match, the associated block of code is executed. If there is no match, the default block of code is executed.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-k.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "65e97293484dd50f720e6ff1",
      "title": "Learn Data Types and Conditionals Lesson L",
      "challengeType": 15,
      "dashedName": "learn-data-types-and-conditionals-lesson-l",
      "description": "Another way to compare conditional statements would be the ternary operator. The ternary operator is a shorthand way of writing an `if-else` statement. It is used to evaluate a condition and return a value based on the result of the condition. The syntax of the ternary operator is as follows:\n\n```javascript\nlet result = condition ? value1 : value2;\n```\n\nIn the above example, if the condition is true, the value of `result` will be `value1`. Otherwise, the value of `result` will be `value2`.\n\nTernary operators are often used to assign a value to a variable based on a condition. They are also used to return a value based on a condition.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-data-types-and-conditionals\\learn-data-types-and-conditionals-lesson-l.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-data-types-and-conditionals",
        "name": "Top Learn Data Types And Conditionals"
      }
    },
    {
      "id": "6617a128e90de1b3fd10bd4d",
      "title": "Learn Function Basics Lesson A",
      "challengeType": 15,
      "dashedName": "learn-function-basics-lesson-a",
      "description": "Let’s discuss parameters and arguments in the context of the following example function:\n\n```js\nfunction favoriteAnimal(animal) {\n  return animal + \" is my favorite animal!\"\n}\n\nconsole.log(favoriteAnimal('Goat'));\n```\n\nIn JavaScript, parameters are the items listed between the parentheses `()` in the function declaration. Function arguments are the actual values you decide to pass to the function.\n\nIn the example above, the function definition is written on the first line: `function favoriteAnimal(animal)`. The parameter, `animal`, is found inside the parentheses. You could just as easily replace `animal` with `pet`, `x`, or `blah`. But in this case, naming the parameter `animal` gives someone reading your code a bit of context so that they don't have to guess what `animal` may eventually contain.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-function-basics",
        "name": "Top Learn Function Basics"
      }
    },
    {
      "id": "6617a1fce90de1b3fd10bd4e",
      "title": "Learn Function Basics Lesson B",
      "challengeType": 15,
      "dashedName": "learn-function-basics-lesson-b",
      "description": "```js\nfunction favoriteAnimal(animal) {\n  return animal + \" is my favorite animal!\"\n}\n\nconsole.log(favoriteAnimal('Goat'));\n```\n\nBy putting `animal` inside the parentheses of the `favoriteAnimal()` function, you are telling JavaScript that you will send some value to your `favoriteAnimal` function. This means that animal is just a placeholder for some future value. But what value are you sending?\n\nThe last line, `favoriteAnimal('Goat')`, is where you are calling your `favoriteAnimal` function and passing the value `'Goat'` inside that function. Here, `'Goat'` is your argument. You are telling the `favoriteAnimal` function, \"Please send `'Goat'` to the `favoriteAnimal` function and use `'Goat'` wherever the `'animal'` placeholder is.\" Because of the flexibility that using a parameter provides, you can declare any animal to be your favorite.\n\nHere is a diagram to help you visualize how parameters are passed to a function, and how values get returned from it.\n\n<img src=\"https://cdn.statically.io/gh/TheOdinProject/curriculum/c53dd9a12f0c9afde0d9229f82a176170f12e120/foundations/javascript_basics/function_basics/imgs/00.png\" alt=\"A description of a function with arrows explaining that the values between the parentheses of the function itself are called parameters, and the values which are issued when the function is used are called arguments\" style=\"width:95%;height:auto;\">\n\nMake note of the fact that by calling `favoriteAnimal()` inside of `console.log()` with the argument `'Goat'`, you get the return value of the function, string of `\"Goat is my favorite animal!\"`, printed to the console. You're passing in a function call `favoriteAnimal('Goat')` as an argument in a different function call - `log()`.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-function-basics",
        "name": "Top Learn Function Basics"
      }
    },
    {
      "id": "6617aee05b87c334e7ae8014",
      "title": "Learn Function Basics Lesson C",
      "challengeType": 15,
      "dashedName": "learn-function-basics-lesson-c",
      "description": "A variable declared inside a function is only visible inside a function. This is called the scope of the variable, this particular scope is called the local scope. Variables declared outside of a function are called global variables and are visible throughout the program. For example, the following code will raise an error:\n\n```js\nfunction myFunction() {\n  let x = 10;\n}\n\nconsole.log(x);\n```\n\nThe variable `x` is declared inside the function `myFunction` and is not visible outside of the function. The code will raise a `ReferenceError` because `x` is not defined.\n\nIf you declare a variable outside of a function, it is called a global variable and is visible throughout the program. For example, the following code will work:\n\n```js\nlet x = 10;\n\nfunction myFunction() {\n  console.log(x);\n}\n\nmyFunction();\n```\n\nIf a same-named variable is declared inside the function then it shadows the outer one.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-function-basics",
        "name": "Top Learn Function Basics"
      }
    },
    {
      "id": "6617aee95b87c334e7ae8015",
      "title": "Learn Function Basics Lesson D",
      "challengeType": 15,
      "dashedName": "learn-function-basics-lesson-d",
      "description": "If a function is called, but an argument is not provided, then the parameter will be assigned the value of `undefined`. This can lead to unexpected results if the function is not designed to handle this case.\n\n```js\nfunction favoriteAnimal(animal) {\n  return animal + \" is my favorite animal!\"\n}\n\nconsole.log(favoriteAnimal()); // Output: undefined is my favorite animal!\n```\n\nIn the example above, the function `favoriteAnimal` is called without an argument. The parameter `animal` is assigned the value of `undefined`, which is then concatenated with the string `\" is my favorite animal!\"`.\n\nIf a value is not provided you can make use of default parameters. Default parameters allow you to assign a default value to a parameter if no value is provided when the function is called.\n\n```js\nfunction favoriteAnimal(animal = 'Giant Panda') {\n  return animal + \" is my favorite animal!\"\n}\n```\n\nIn the example above, the default value of the parameter `animal` is set to `'Giant Panda'`. If the function `favoriteAnimal` is called without an argument, the parameter `animal` will be assigned the value `'Giant Panda'`.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-function-basics",
        "name": "Top Learn Function Basics"
      }
    },
    {
      "id": "6617aef05b87c334e7ae8016",
      "title": "Learn Function Basics Lesson E",
      "challengeType": 15,
      "dashedName": "learn-function-basics-lesson-e",
      "description": "As you have seen before, functions can return a value using the `return` keyword. The `return` keyword is used to return a value from a function. When the `return` keyword is used, the function will stop executing and return the value specified after the `return` keyword.\n\n```js\nfunction add(a, b) {\n  return a + b\n}\n\nconsole.log(add(2, 3)); // Output: 5\n```\n\nBut what happens if the `return` keyword is used before the end of the function?\nTo answer this question, consider the following example:\n\n```js\nfunction add(a, b) {\n  if(a > 2){\n    return b;\n  }\n\n  return a + b;\n}\n\nconsole.log(add(3, 7)); // Output: 7\n``` \n\nIn the example above, the function `add` has a conditional statement that checks if the value of `a` is greater than `2`. If the condition is met, the function will return the value of `b` and stop executing. If the condition is not met, the function will return the sum of `a` and `b`.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-function-basics",
        "name": "Top Learn Function Basics"
      }
    },
    {
      "id": "6617aef85b87c334e7ae8017",
      "title": "Learn Function Basics Lesson F",
      "challengeType": 15,
      "dashedName": "learn-function-basics-lesson-f",
      "description": "Arrow functions are a more modern way to write functions in JavaScript. They provide a more compact syntax compared to traditional function expressions. Arrow functions are defined using the `=>` syntax. \n\n```js\nconst add = (a, b) => {\n  return a + b;\n}\n```\n\nIn the example above, the arrow function `add` takes two parameters `a` and `b` and returns their sum. The `return` keyword is used to return the result of the addition operation.\n\nIf the arrow function has only one expression, the curly braces `{}` and the `return` keyword can be omitted. The expression will be implicitly returned.\n\n```js\nconst add = (a, b) => a + b;\n```\n\nIn the example above, the arrow function `add` takes two parameters `a` and `b` and returns their sum. The `return` keyword and curly braces `{}` are omitted, and the result of the addition operation is implicitly returned.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-function-basics\\learn-function-basics-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-function-basics",
        "name": "Top Learn Function Basics"
      }
    },
    {
      "id": "637f4e0e72c65bc8e73dfe1e",
      "title": "HTML Foundations Lesson A",
      "challengeType": 15,
      "dashedName": "html-foundations-lesson-a",
      "description": "Almost all elements on an HTML page are just pieces of content wrapped in opening and closing HTML tags.\n\nOpening tags tell the browser this is the start of an HTML element. They are comprised of a keyword enclosed in angle brackets `<>`. For example, an opening paragraph tag looks like this: `<p>`.\n\nClosing tags tell the browser where an element ends. They are almost the same as opening tags; the only difference is that they have a forward slash before the keyword. For example, a closing paragraph tag looks like this: `</p>`.\n\nA full paragraph element looks like this:\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/html-foundations/html-foundations-01.png\" alt='An opening p tag, followed by the content string \"some text content\", followed by a closing p tag.'>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-html-foundations",
        "name": "Top Learn Html Foundations"
      }
    },
    {
      "id": "637f4e1672c65bc8e73dfe1f",
      "title": "HTML Foundations Lesson B",
      "challengeType": 15,
      "dashedName": "html-foundations-lesson-b",
      "description": "You can think of elements as containers for content. The opening and closing tags tell the browser what content the element contains. The browser can then use that information to determine how it should interpret and format the content.\n\nThere are some HTML elements that do not have a closing tag. These elements often look like this: `<br />` or `<img/>`, but some can also be used without the closing forward slash such as `<br>` or `<img>`. These are known as void elements or empty elements because they don’t wrap any content. You will encounter a few of these in later lessons, but for the most part, elements will have both opening and closing tags.\n\nHTML has a vast list of predefined tags that you can use to create all kinds of different elements. It is important to use the correct tags for content. Using the correct tags can have a big impact on two aspects of your sites: how they are ranked in search engines; and how accessible they are to users who rely on assistive technologies, like screen readers, to use the internet.\n\nUsing the correct elements for content is called semantic HTML. You will explore this in much more depth later on in the curriculum.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-html-foundations",
        "name": "Top Learn Html Foundations"
      }
    },
    {
      "id": "637f4e1c72c65bc8e73dfe20",
      "title": "HTML Foundations Lesson C",
      "challengeType": 15,
      "dashedName": "html-foundations-lesson-c",
      "description": "To demonstrate an HTML boilerplate, you first need an HTML file to work with.\n\nCreate a new folder on your computer and name it `html-boilerplate`. Within that folder create a new file and name it `index.html`.\n\nYou’re probably already familiar with a lot of different types of files, for example doc, pdf, and image files.\n\nTo let the computer know you want to create an HTML file, you need to append the filename with the `.html` extension as you have done when creating the `index.html` file.\n\nIt is worth noting that you named your HTML file index. You should always name the HTML file that will contain the homepage of your websites `index.html`. This is because web servers will by default look for an `index.html` page when users land on your websites - and not having one will cause big problems.\n\n## The DOCTYPE\n\nEvery HTML page starts with a doctype declaration. The doctype’s purpose is to tell the browser what version of HTML it should use to render the document. The latest version of HTML is HTML5, and the doctype for that version is simply `<!DOCTYPE html>`.\n\nThe doctypes for older versions of HTML were a bit more complicated. For example, this is the doctype declaration for HTML4:\n\n```html\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n```\n\nHowever, you probably won’t ever want to be using an older version of HTML, and so you’ll always use `<!DOCTYPE html>`.\n\nOpen the `index.html` file created earlier in your text editor and add `<!DOCTYPE html>` to the very first line.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-html-foundations",
        "name": "Top Learn Html Foundations"
      }
    },
    {
      "id": "637f4e2872c65bc8e73dfe21",
      "title": "HTML Foundations Lesson D",
      "challengeType": 15,
      "dashedName": "html-foundations-lesson-d",
      "description": "After you declare the doctype, you need to provide an `<html>` element. This is what’s known as the root element of the document, meaning that every other element in the document will be a descendant of it.\n\nThis becomes more important later on when you learn about manipulating HTML with JavaScript. For now, just know that the `html` element should be included on every HTML document.\n\nBack in the `index.html` file, let’s add the `<html>` element by typing out its opening and closing tags, like so:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n</html>\n```\n\n## What is the lang attribute?\n`lang` specifies the language of the text content in that element. This attribute is primarily used for improving accessibility of the webpage. It allows assistive technologies, for example screen readers, to adapt according to the language and invoke correct pronunciation.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-html-foundations",
        "name": "Top Learn Html Foundations"
      }
    },
    {
      "id": "637f4e2f72c65bc8e73dfe22",
      "title": "HTML Foundations Lesson E",
      "challengeType": 15,
      "dashedName": "html-foundations-lesson-e",
      "description": "The `<head>` element is where you put important meta-information about your webpages, and stuff required for your webpages to render correctly in the browser. Inside the `<head>`, you should not use any element that displays content on the webpage.\n\n## The Charset Meta Element\nYou should always have the `meta` tag for the `charset` encoding of the webpage in the `head` element: `<meta charset=\"utf-8\">`.\n\nSetting the encoding is very important because it ensures that the webpage will display special symbols and characters from different languages correctly in the browser.\n\n## Title Element\nAnother element you should always include in the head of an HTML document is the `title` element:\n\n```html\n<title>My First Webpage</title>\n```\n\nThe `title` element is used to give webpages a human-readable title which is displayed in your webpage’s browser tab.\n\nIf you didn’t include a `title` element, the webpage’s title would default to its file name. In your case that would be `index.html`, which isn’t very meaningful for users; this would make it very difficult to find your webpage if the user has many browser tabs open.\n\nThere are many more elements that can go within the `head` of an HTML document. However, for now it’s only crucial to know about the two elements you have covered here. You will introduce more elements that go into the `head` throughout the rest of the curriculum.\n\nBack in `index.html` file, let’s add a `head` element with a `charset` `meta` element and a `title` within it. The head element goes within the HTML element and should always be the first element under the opening `<html>` tag:\n\n\n```html\n<!DOCTYPE html>\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My First Webpage</title>\n  </head>\n</html>\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-html-foundations",
        "name": "Top Learn Html Foundations"
      }
    },
    {
      "id": "637f4e3672c65bc8e73dfe23",
      "title": "HTML Foundations Lesson F",
      "challengeType": 15,
      "dashedName": "html-foundations-lesson-f",
      "description": "The final element needed to complete the HTML boilerplate is the `<body>` element. This is where all the content that will be displayed to users will go - the text, images, lists, links, and so on.\n\nTo complete the boilerplate, add a `body` element to the `index.html` file. The `body` element also goes within the `html` element and is always below the `head` element, like so:",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-html-foundations",
        "name": "Top Learn Html Foundations"
      }
    },
    {
      "id": "6376327e2724a688c04636e3",
      "title": "HTML Foundations Lesson G",
      "challengeType": 15,
      "dashedName": "html-foundations-lesson-g",
      "description": "HTML and CSS are two languages that work together to create everything that you see when you look at something on the internet. HTML is the raw data that a webpage is built out of. All the text, links, cards, lists, and buttons are created in HTML. CSS is what adds style to those plain elements. HTML puts information on a webpage, and CSS positions that information, gives it color, changes the font, and makes it look great!",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-html-foundations",
        "name": "Top Learn Html Foundations"
      }
    },
    {
      "id": "637633162724a688c04636e4",
      "title": "HTML Foundations Lesson H",
      "challengeType": 15,
      "dashedName": "html-foundations-lesson-h",
      "description": "HTML and CSS are primarily concerned with presenting information. They are not used to program logic. JavaScript, which you will learn in the next section, is used to make webpages do things. There is quite a lot you can do with just HTML and CSS, and you will definitely need them both. Throughout our curriculum, the following lessons focus on giving you the tools you need to succeed once you reach JavaScript content.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-html-foundations\\html-foundations-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-html-foundations",
        "name": "Top Learn Html Foundations"
      }
    },
    {
      "id": "66581a78b1eb2281159492fa",
      "title": "Learn to Solve Problems and Understand Errors Lesson A",
      "challengeType": 15,
      "dashedName": "learn-to-solve-problems-and-understand-errors-lesson-a",
      "description": "Before you start digging into some pretty nifty JavaScript, you need to begin talking about problem solving: the most important skill a developer needs.\n\nProblem solving is the core thing software developers do. The programming languages and tools they use are secondary to this fundamental skill.\n\nFrom his book, \"Think Like a Programmer\", V. Anton Spraul defines problem solving in programming as:\n\n> Problem solving is writing an original program that performs a particular set of tasks and meets all stated constraints.\n\nThe set of tasks can range from solving small coding exercises all the way up to building a social network site like Facebook or a search engine like Google. Each problem has its own set of constraints, for example, high performance and scalability may not matter too much in a coding exercise but it will be vital in apps like Google that need to service billions of search queries each day.\n\nNew programmers often find problem solving the hardest skill to build. It's not uncommon for budding programmers to breeze through learning syntax and programming concepts, yet when trying to code something on their own, they find themselves staring blankly at their text editor not knowing where to start.\n\nThe best way to improve your problem solving ability is by building experience by making lots and lots of programs. The more practice you have the better you'll be prepared to solve real world problems.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-to-solve-problems-and-understand-errors",
        "name": "Top Learn To Solve Problems And Understand Errors"
      }
    },
    {
      "id": "66581a7ab1eb2281159492fb",
      "title": "Learn to Solve Problems and Understand Errors Lesson B",
      "challengeType": 15,
      "dashedName": "learn-to-solve-problems-and-understand-errors-lesson-b",
      "description": "## Understand the problem\nThe first step to solving a problem is understanding exactly what the problem is. If you don’t understand the problem, you won’t know when you’ve successfully solved it and may waste a lot of time on a wrong solution.\n\nTo gain clarity and understanding of the problem, write it down on paper, reword it in plain English until it makes sense to you, and draw diagrams if that helps. When you can explain the problem to someone else in plain English, you understand it.\n\n### Plan\nNow that you know what you’re aiming to solve, don’t jump into coding just yet. It’s time to plan out how you’re going to solve it first. Some of the questions you should answer at this stage of the process:\n\n- Does your program have a user interface? What will it look like? What functionality will the interface have? Sketch this out on paper.\n\n- What inputs will your program have? Will the user enter data or will you get input from somewhere else?\n\n- What’s the desired output?\n\n- Given your inputs, what are the steps necessary to return the desired output?\n\nThe last question is where you will write out an algorithm to solve the problem. You can think of an algorithm as a recipe for solving a particular problem. It defines the steps that need to be taken by the computer to solve a problem in pseudocode.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-to-solve-problems-and-understand-errors",
        "name": "Top Learn To Solve Problems And Understand Errors"
      }
    },
    {
      "id": "66581a7bb1eb2281159492fc",
      "title": "Learn to Solve Problems and Understand Errors Lesson C",
      "challengeType": 15,
      "dashedName": "learn-to-solve-problems-and-understand-errors-lesson-c",
      "description": "## Pseudocode\n\nPseudocode is writing out the logic for your program in natural language instead of code. It helps you slow down and think through the steps your program will have to go through to solve the problem.\n\nHere’s an example of what the pseudocode for a program that prints all numbers up to an inputted number might look like:\n\n```md\nWhen the user inputs a number\nInitialize a counter variable and set its value to zero\nWhile counter is smaller than user inputted number increment the counter by one\nPrint the value of the counter variable\n```\n\nThis is a basic program to demonstrate how pseudocode looks. There will be more examples of pseudocode included in the assignments.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-to-solve-problems-and-understand-errors",
        "name": "Top Learn To Solve Problems And Understand Errors"
      }
    },
    {
      "id": "66581a7bb1eb2281159492fd",
      "title": "Learn to Solve Problems and Understand Errors Lesson D",
      "challengeType": 15,
      "dashedName": "learn-to-solve-problems-and-understand-errors-lesson-d",
      "description": "Reading and understanding error messages is a requirement as a developer. At first glance, many beginners shrink away from error messages as they appear to be “scary” and difficult to understand because they include terms one may not be familiar with.\n\nHowever, error messages provide developers with a treasure trove of knowledge, and tell you everything you need to know about how to resolve them! Being able to parse error messages and warnings without fear will enable you to effectively debug your applications, receive meaningful help from others, and empower yourself to push forward when faced with an error.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-to-solve-problems-and-understand-errors",
        "name": "Top Learn To Solve Problems And Understand Errors"
      }
    },
    {
      "id": "66581a7cb1eb2281159492fe",
      "title": "Learn to Solve Problems and Understand Errors Lesson E",
      "challengeType": 15,
      "dashedName": "learn-to-solve-problems-and-understand-errors-lesson-e",
      "description": "Let’s assume you have written the following code:\n\n```javascript\nconst a = \"Hello\";\nconst b = \"World\";\n\nconsole.log(c);\n```\n\nThis code will run, but it will generate an error. In technical terms, this is called <dfn>throwing</dfn> an error. The first part of an error displays the type of error. This provides the first clue as to what you're dealing with. You'll learn more about the different error types later in the lesson. In this example, you have a `ReferenceError`.\n\n<img src=\"https://cdn.statically.io/gh/TheOdinProject/curriculum/175b5ef2a1b4758a7b75f4ef43d7e27203e5707b/foundations/javascript_basics/understanding_errors/imgs/00.png\" width=\"100%\" alt=\"An error being displayed in the developer console\"/>\n\nA `ReferenceError` is thrown when one refers to a variable that is not declared and/or initialized within the current scope. In our case, the error message explains that the error has occurred because `c is not defined`.\n\nDifferent errors of this type have different messages based on what is causing the `ReferenceError`. For example, another message you may run into is `ReferenceError: can't access lexical declaration 'X' before initialization`.\n\nThe next part of an error gives us the name of the file in which you can find the error (in this case, our `script.js`), and also the line number.\n\nThis allows you to easily navigate to the problematic line in your code. Here, the error originates from the fourth line of `script.js`, which is displayed as a link under the error message with the text at `script.js:4`. If you click this link, most browsers will navigate to the exact line of code and the rest of your script in the Sources tab of the Developer Tools.\n\nSometimes your browser’s console will also display the column (or character) in the line at which the error is occurring. In our example, this would be at `script.js:4:13`.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-to-solve-problems-and-understand-errors",
        "name": "Top Learn To Solve Problems And Understand Errors"
      }
    },
    {
      "id": "66581a7db1eb2281159492ff",
      "title": "Learn to Solve Problems and Understand Errors Lesson F",
      "challengeType": 15,
      "dashedName": "learn-to-solve-problems-and-understand-errors-lesson-f",
      "description": "Another important part of an error is the stack trace. This helps you understand when the error was thrown in your application, and what functions were called that led up to the error. So, for example, if you have the following code:\n\n```javascript\nconst a = 5;\nconst b = 10;\n\nfunction add() {\n  return c;\n}\n\nfunction print() {\n  add();\n}\n\nprint();\n```\n\nOur function `print()` should call on `add()`, which returns a variable named `c`, which currently has not been declared. The corresponding error is as follows:\n\n<img src=\"https://cdn.statically.io/gh/TheOdinProject/curriculum/284f0cdc998be7e4751e29e8458323ad5d320303/foundations/javascript_basics/understanding_errors/imgs/01.png\" width=\"100%\" alt=\"An error showing with a stacktrace in the developer console\">\n\nThe stack trace tells us that:\n\n1. `c is not defined` in scope of `add()`, which is declared on line 5.\n1. `add()` was called by `print()`, which was declared on line 9.\n1. `print()` itself was called on line 12.\n\nThus the stack trace lets you trace the evolution of an error back to its origin, which here is the declaration of `add()`.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-to-solve-problems-and-understand-errors",
        "name": "Top Learn To Solve Problems And Understand Errors"
      }
    },
    {
      "id": "66581a7eb1eb228115949300",
      "title": "Learn to Solve Problems and Understand Errors Lesson G",
      "challengeType": 15,
      "dashedName": "learn-to-solve-problems-and-understand-errors-lesson-g",
      "description": "Say you have two strings that you would like to combine to create one message, such as below:\n\n```js\nconst str1 = \"Hello\";\nconst str2 = \"World!\";\nconst message = str1.push(str2);\n```\n\n<img src=\"https://cdn.statically.io/gh/TheOdinProject/curriculum/4ed59981b4ce2c60b5b83bf7415d3127b61821f5/foundations/javascript_basics/understanding_errors/imgs/03.png\" style=\"width:100%\" alt=\"an example of a type error in the Chrome developer console\">\n\nHere, you'll get a `TypeError` with a message stating that `str1.push is not a function`. This is a common error message that confuses learners because you might know that `.push()` is certainly a function (for example, if you have used it to add items to arrays before).\n\nBut that's the key - `.push()` is not a String method, it's an Array method. Hence, it is “not a function” that you can find as a String method. If you change`.push()` to `.concat()`, a proper String method, our code runs as intended!\n\nA good note to keep in mind when faced with a `TypeError` is to consider the data type you are trying to run a method or operation against. You'll likely find that it is not what you think, or the operation or method is not compatible with that type.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-to-solve-problems-and-understand-errors",
        "name": "Top Learn To Solve Problems And Understand Errors"
      }
    },
    {
      "id": "66581a7fb1eb228115949301",
      "title": "Learn to Solve Problems and Understand Errors Lesson H",
      "challengeType": 15,
      "dashedName": "learn-to-solve-problems-and-understand-errors-lesson-h",
      "description": "At this point, you might be wondering how you can resolve these errors.\n\n1. You can start by understanding that the error message is your friend - not your enemy. Error messages tell you exactly what is wrong with your code, and which lines to examine to find the source of the error. Without error messages it would be a nightmare to debug our code - because it would still not work, you just wouldn’t know why!\n\n1. You should search your error on the web, most of the time you will be able to find a fix or explanation on StackOverflow or in the documentation. If nothing else, you will receive more clarity as to why you are receiving this error.\n\n1. Another way is to use `console.log()` — it is a popular choice for quick debugging. For more involved troubleshooting, using the debugger might be more appropriate, but using `console.log()` is great for getting immediate feedback without needing to step through your functions. There are also other useful methods such as `console.table()`, `console.trace()`, and more!",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-to-solve-problems-and-understand-errors\\learn-to-solve-problems-and-understand-errors-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-to-solve-problems-and-understand-errors",
        "name": "Top Learn To Solve Problems And Understand Errors"
      }
    },
    {
      "id": "65e185b1500d930ce8ed909b",
      "title": "Learn Variables and Operators Lesson A",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-a",
      "description": "The simplest way to get started is to create an HTML file with the JavaScript code inside of it. Type the basic HTML skeleton into a file on your computer somewhere:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Page Title</title>\n</head>\n<body>\n  <script>\n    // Your JavaScript goes here!\n    console.log(\"Hello, World!\")\n  </script>\n</body>\n</html>\n```\n\nSave and open this file up in a web browser (you can use <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" target=\"_blank\" >\"Live Server\" on Visual Studio Code</a> to do this!) and then open up the browser’s console by right-clicking on the blank webpage and selecting \"Inspect\" or \"Inspect Element\". In the ‘Developer Tools’ pane find and select the ‘Console’ tab, where you should see the output of our `console.log` statement.\n\n> `console.log()` is the command to print something to the developer console in your browser. You can use this to print the results from any of the following articles and exercises to the console. We encourage you to code along with all of the examples in this and future lessons.\n\nAnother way to include JavaScript in a webpage is through an external script. This is very similar to linking external CSS docs to your website.\n\n```html\n  <script src=\"javascript.js\"></script>\n```\n\nJavaScript files have the extension `.js` similar to `.css` for stylesheets. External JavaScript files are used for more complex scripts.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "65e18d61500d930ce8ed90a5",
      "title": "Learn Variables and Operators Lesson B",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-b",
      "description": "You can think of variables as \"storage containers\" for data in your code.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/variables-and-operators/top-learn-variables-and-operators.png\" alt='the concept of variables in coding as boxes labeled \"birthday\" that store and provide access to data, specifically a date \"16-09-2003\"'>\n\nA variable is a \"named storage\" for data. You can use variables to store goodies, visitors, and other data.\n\nTo create a variable in JavaScript, use the `let` keyword.\n\nThe statement below creates (in other words: declares) a variable with the name \"message\":\n\n```js\nlet message;\n```\n\nNow, you can put some data into it by using the assignment operator `=`:\n\n```js\nlet message;\n\n// store the string 'Hello' in the variable named message\nmessage = 'Hello'; \n```\n\nTo be concise, you can combine the variable declaration and assignment into a single line:\n\n```js\nlet message = 'Hello';\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "65e1957a500d930ce8ed90a6",
      "title": "Learn Variables and Operators Lesson C",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-c",
      "description": "To declare a constant (unchanging) variable, use `const` instead of `let`:\n\n```javascript\nconst myBirthday = '16-09-2003';\n```\n\nVariables declared using `const` are called \"constants\". They cannot be reassigned. An attempt to do so would cause an error:\n\n```javascript\nconst myBirthday = '16-09-2003';\n\nmyBirthday = '01-01-2001'; // error, can't reassign the constant!\n```\n\nWhen a programmer is sure that a variable will never change, they can declare it with `const` to guarantee and communicate that fact to everyone.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "65e1985e500d930ce8ed90a7",
      "title": "Learn Variables and Operators Lesson D",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-d",
      "description": "There are two limitations on variable names in JavaScript:\n\n1. The name must contain only letters, digits, or the symbols `$` and `_`.\n1. The first character must not be a digit.\n\nExamples of valid names:\n\n```js\nlet userName;\nlet test123;\n```\n\nWhat’s interesting – the dollar sign `'$'` and the underscore `'_'` can also be used in names. They are regular symbols, just like letters, without any special meaning.\n\nThese names are valid:\n\n```js\nlet $ = 1; // declared a variable with the name \"$\"\nlet _ = 2; // and now a variable with the name \"_\"\n\nconsole.log($ + _); // 3\n```\n\nExamples of incorrect variable names:\n\n```js\nlet 1a; // cannot start with a digit\n\nlet my-name; // hyphens '-' aren't allowed in the name\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "65e19bc3500d930ce8ed90a8",
      "title": "Learn Variables and Operators Lesson E",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-e",
      "description": "Numbers are the building blocks of programming logic! In fact, it’s hard to think of any useful programming task that doesn’t involve at least a little basic math… so knowing how numbers work is obviously quite important. Luckily, it’s also fairly straightforward.\n\n| Operator | Description                  | Example            |\n|----------|------------------------------|--------------------|\n| +        | Addition                     | 5 + 3 = 8          |\n| -        | Subtraction                  | 5 - 3 = 2          |\n| *        | Multiplication               | 5 * 3 = 15         |\n| **       | Exponentiation               | 5 ** 3 = 125       |\n| /        | Division                     | 6 / 3 = 2          |\n| %        | Modulus                      | 5 % 3 = 2          |",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "65e1a2ea500d930ce8ed90a9",
      "title": "Learn Variables and Operators Lesson F",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-f",
      "description": "Let’s meet the features of JavaScript operators that are beyond school arithmetics.\n\nUsually, the plus operator `+` sums numbers.\n\nBut, if the binary `+` is applied to strings, it merges (concatenates) them:\n\n```js\nlet s = \"my\" + \"string\";\nconsole.log(s); // mystring\n```\n\nNote that if any of the operands is a string, then the other one is converted to a string too.\n\nFor example:\n\n```js\nconsole.log(1 + '2'); // '12'\nconsole.log('1' + 2); // '12'\n```\n\nSee, it doesn’t matter whether the first operand is a string or the second one.\n\nHere’s a more complex example:\n\n```js\nconsole.log(2 + 2 + '1') // \"41\" and not \"221\"\n```\n\nHere, operators work one after another. The first `+` sums two numbers, so it returns `4`, then the next `+`   adds the string `1` to it, so it’s like `4 + '1' = '41'`.\n\n```js\nconsole.log('1' + 2 + 2) // \"122\" and not \"14\"\n```\n\nHere, the first `+` concatenates the string and the number, so it returns `'12'`, then the next `+` adds `2` to it, so it’s like `'12' + 2 = '122'`.\n\nThe binary `+` is the only operator that supports strings in such a way. Other arithmetic operators work only with numbers and always convert their operands to numbers.\n\nHere’s the demo for subtraction and division:\n\n```js\nconsole.log( 6 - '2' ); // 4, converts '2' to a number\nconsole.log( '6' / '2' ); // 3, converts both operands to numbers\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "65e1aaf8500d930ce8ed90aa",
      "title": "Learn Variables and Operators Lesson G",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-g",
      "description": "The plus `+` exists in two forms: the binary form that you used in the last challenge and the unary form.\n\nThe unary plus or, in other words, the plus operator `+` applied to a single value, doesn’t do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.\n\nFor example:\n\n```js\n// No effect on numbers\nlet x = 1;\nconsole.log( +x ); // 1\n\nlet y = -2;\nconsole.log( +y ); // -2\n\n// Converts non-numbers\nconsole.log( +true ); // 1\nconsole.log( +\"\" );   //\n```\n\nThe need to convert strings to numbers arises very often. For example, if you are getting values from HTML form fields, they are usually strings. What if you want to sum them?\n\nThe binary plus would add them as strings:\n\n```js\nlet apples = \"2\";\nlet oranges = \"3\";\n\nalert( apples + oranges ); // \"23\", the binary plus concatenates strings\n```\n\nIf you want to treat them as numbers, you need to convert and then sum them:\n\n```js\nlet apples = \"2\";\nlet oranges = \"3\";\n\n// both values converted to numbers before the binary plus\nalert( +apples + +oranges ); // 5\n\n// the longer variant\n// alert( Number(apples) + Number(oranges) ); // 5\n```\n\nFrom a mathematician’s standpoint, the abundance of pluses may seem strange. But from a programmer’s standpoint, there’s nothing special: unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up.\n\nWhy are unary pluses applied to values before the binary ones? As you’re going to see, that’s because of their _higher_ precedence.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "65e1aedc500d930ce8ed90ac",
      "title": "Learn Variables and Operators Lesson H",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-h",
      "description": "If an expression has more than one operator, the execution order is defined by their precedence, or, in other words, the default priority order of operators.\n\nFrom school, you know that the multiplication in the expression `1 + 2 * 2` should be calculated before the addition. That’s exactly the precedence thing. The multiplication is said to have a higher precedence than the addition.\n\nParentheses override any precedence, so if you’re not satisfied with the default order, you can use them to change it. For example, write `(1 + 2) * 2`.\n\nThere are many operators in JavaScript. Every operator has a corresponding precedence number. The one with the larger number executes first. If the precedence is the same, the execution order is from left to right.\n\nHere’s an extract from the precedence table (you don’t need to remember this, but note that unary operators are higher than corresponding binary ones):\n\n| Precedence | Name             | Sign |\n|------------|------------------|------|\n| ...        | ...              | ...  |\n| 14         | unary plus       | +    |\n| 14         | unary negation   | -    |\n| 13         | exponentiation   | **   |\n| 12         | multiplication   | *    |\n| 12         | division         | /    |\n| 11         | addition         | +    |\n| 11         | subtraction      | -    |\n| ...        | ...              | ...  |\n| 2          | assignment       | =    |\n| ...        | ...              | ...  |",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "65e1b46e500d930ce8ed90ad",
      "title": "Learn Variables and Operators Lesson I",
      "challengeType": 15,
      "dashedName": "learn-variables-and-operators-lesson-i",
      "description": "Increasing or decreasing a number by one is among the most common numerical operations.\n\nSo, there are special operators for it:\n\n- Increment `++` increases a variable by 1:\n\n```js\nlet counter = 2;\n\n// works the same as counter = counter + 1, but is shorter\ncounter++;      \n\nconsole.log(counter); // 3\n```\n\n- Decrement `--` decreases a variable by 1:\n\n```js\nlet counter = 2;\n\n// works the same as counter = counter - 1, but is shorter\ncounter--;\n\nconsole.log(counter); // 1\n```\n\nThe operators `++` and `--` can be placed either before or after a variable.\n\n- When the operator goes after the variable, it is in \"postfix form\": `counter++`.\n\n- The \"prefix form\" is when the operator goes before the variable: `++counter`.\n\nBoth of these statements do the same thing: increase `counter` by `1`.\n\nIs there any difference? Yes, but you can only see it if you use the returned value of `++/--`  .\n\nLet’s clarify. As you know, all operators return a value. Increment/decrement is no exception. The prefix form returns the new value while the postfix form returns the old value (prior to increment/decrement).\n\nTo see the difference, here’s an example:\n\n```js\nlet counter = 1;\nlet a = ++counter; // (*)\n\nconsole.log(a); // 2\n```\n\nTo summarize:\n\n- If the result of increment/decrement is not used, there is no difference in which form to use:\n\n```js\nlet counter = 0;\ncounter++;\n++counter;\n\nconsole.log( counter ); // 2, the lines above did the same\n```\n\n- If you’d like to increase a value and immediately use the result of the operator, you need the prefix form:\n\n```js\nlet counter = 0;\nconsole.log( ++counter ); // 1\n```\n\n- If you’d like to increment a value but use its previous value, you need the postfix form:\n\n```js \nlet counter = 0;\nconsole.log( counter++ ); // 0\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-learn-variables-and-operators\\learn-variables-and-operators-lesson-i.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-learn-variables-and-operators",
        "name": "Top Learn Variables And Operators"
      }
    },
    {
      "id": "637f704072c65bc8e73dfe36",
      "title": "Links and Images Lesson A",
      "challengeType": 15,
      "dashedName": "links-and-images-lesson-a",
      "description": "To get some practice using links and images throughout this lesson you need an HTML project to work with.\n\n- Create a new directory named `odin-links-and-images`.\n\n- Within that directory, create a new file named `index.html`.\n\n- Fill in the usual HTML boilerplate.\n\n- Finally, add the following `h1` to the `body`: `<h1>Homepage</h1>`\n\n## Anchor Elements\nTo create a link in HTML, you use the anchor element. An anchor element is defined by wrapping the text or another HTML element you want to be a link with an `<a>` tag.\n\nAdd the following to the `body` of the `index.html` page you created and open it in the browser:\n\n```html\n<a>click me</a>\n```\n\nYou may have noticed that clicking this link doesn’t do anything. This is because an anchor tag on its own won’t know where you want to link to. You have to tell it a destination to go to. You do this by using an HTML attribute.\n\nAn HTML attribute gives additional information to an HTML element and always goes in the element’s opening tag. An attribute is usually made up of two parts: a name, and a value; however, not all attributes require a value. In your case, you need to add an `href` (hyperlink reference) attribute to the opening anchor tag. The value of the `href` attribute is the destination you want your link to go to.\n\nAdd the following `href` attribute to the anchor element you created previously and try clicking it again, don’t forget to refresh the browser so the new changes can be applied.\n\n```html\n<a href=\"https://www.theodinproject.com/about\">click me</a>\n```\n\nBy default, any text wrapped with an anchor tag without an `href` attribute will look like plain text. If the `href` attribute is present, the browser will give the text a blue color and underline it to signify it is a link.\n\nIt’s worth noting you can use anchor tags to link to any kind of resource on the internet, not just other HTML documents. You can link to videos, pdf files, images, and so on, but for the most part, you will be linking to other HTML documents.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-links-and-images",
        "name": "Top Links And Images"
      }
    },
    {
      "id": "637f703572c65bc8e73dfe35",
      "title": "Links and Images Lesson B",
      "challengeType": 15,
      "dashedName": "links-and-images-lesson-b",
      "description": "To get some practice using links and images throughout this lesson you need an HTML project to work with.\n\n- Create a new directory named `odin-links-and-images`.\n\n- Within that directory, create a new file named `index.html`.\n\n- Fill in the usual HTML boilerplate.\n\n- Finally, add the following `h1` to the `body`: `<h1>Homepage</h1>`\n\n## Anchor Elements\nTo create a link in HTML, you use the anchor element. An anchor element is defined by wrapping the text or another HTML element you want to be a link with an `<a>` tag.\n\nAdd the following to the `body` of the `index.html` page you created and open it in the browser:\n\n```html\n<a>click me</a>\n```\n\nYou may have noticed that clicking this link doesn’t do anything. This is because an anchor tag on its own won’t know where you want to link to. You have to tell it a destination to go to. You do this by using an HTML attribute.\n\nAn HTML attribute gives additional information to an HTML element and always goes in the element’s opening tag. An attribute is usually made up of two parts: a name, and a value; however, not all attributes require a value. In your case, you need to add an `href` (hyperlink reference) attribute to the opening anchor tag. The value of the `href` attribute is the destination you want your link to go to.\n\nAdd the following `href` attribute to the anchor element you created previously and try clicking it again, don’t forget to refresh the browser so the new changes can be applied.\n\n```html\n<a href=\"https://www.theodinproject.com/about\">click me</a>\n```\n\nBy default, any text wrapped with an anchor tag without an `href` attribute will look like plain text. If the `href` attribute is present, the browser will give the text a blue color and underline it to signify it is a link.\n\nIt’s worth noting you can use anchor tags to link to any kind of resource on the internet, not just other HTML documents. You can link to videos, pdf files, images, and so on, but for the most part, you will be linking to other HTML documents.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-links-and-images",
        "name": "Top Links And Images"
      }
    },
    {
      "id": "637f703072c65bc8e73dfe34",
      "title": "Links and Images Lesson C",
      "challengeType": 15,
      "dashedName": "links-and-images-lesson-c",
      "description": "To get some practice using links and images throughout this lesson you need an HTML project to work with.\n\n- Create a new directory named `odin-links-and-images`.\n\n- Within that directory, create a new file named `index.html`.\n\n- Fill in the usual HTML boilerplate.\n\n- Finally, add the following `h1` to the `body`: `<h1>Homepage</h1>`\n\n## Anchor Elements\nTo create a link in HTML, you use the anchor element. An anchor element is defined by wrapping the text or another HTML element you want to be a link with an `<a>` tag.\n\nAdd the following to the `body` of the `index.html` page you created and open it in the browser:\n\n```html\n<a>click me</a>\n```\n\nYou may have noticed that clicking this link doesn’t do anything. This is because an anchor tag on its own won’t know where you want to link to. You have to tell it a destination to go to. You do this by using an HTML attribute.\n\nAn HTML attribute gives additional information to an HTML element and always goes in the element’s opening tag. An attribute is usually made up of two parts: a name, and a value; however, not all attributes require a value. In your case, you need to add an `href` (hyperlink reference) attribute to the opening anchor tag. The value of the `href` attribute is the destination you want your link to go to.\n\nAdd the following `href` attribute to the anchor element you created previously and try clicking it again, don’t forget to refresh the browser so the new changes can be applied.\n\n```html\n<a href=\"https://www.theodinproject.com/about\">click me</a>\n```\n\nBy default, any text wrapped with an anchor tag without an `href` attribute will look like plain text. If the `href` attribute is present, the browser will give the text a blue color and underline it to signify it is a link.\n\nIt’s worth noting you can use anchor tags to link to any kind of resource on the internet, not just other HTML documents. You can link to videos, pdf files, images, and so on, but for the most part, you will be linking to other HTML documents.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-links-and-images",
        "name": "Top Links And Images"
      }
    },
    {
      "id": "637f702872c65bc8e73dfe33",
      "title": "Links and Images Lesson D",
      "challengeType": 15,
      "dashedName": "links-and-images-lesson-d",
      "description": "Generally, there are two kinds of links you will create:\n\n- Links to pages on other websites on the internet\n\n- Links to pages located on your own websites\n\n\n## Absolute Links\nLinks to pages on other websites on the internet are called absolute links. A typical absolute link will be made up of the following parts: `protocol://domain/path`. An absolute link will always contain the protocol and domain of the destination.\n\nYou’ve already seen an absolute link in action. The link you created to The Odin Project’s About page earlier was an absolute link as it contains the protocol and domain.\n\n`https://www.theodinproject.com/about`\n\n## Relative Links\nLinks to other pages within your own website are called relative links. Relative links do not include the domain name, since it is another page on the same site, it assumes the domain name will be the same as the page you created the link on.\n\nRelative links only include the file path to the other page, relative to the page you are creating the link on. This is quite abstract, let’s see this in action using an example.\n\nWithin the `odin-links-and-images` directory, create another HTML file named `about.html` and paste the following code into it:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Odin Links and Images</title>\n  </head>\n\n  <body>\n    <h1>About Page</h1>\n  </body>\n</html>\n```\n\nBack in the `index` page, add the following anchor element to create a link to the `about` page:\n\n```html\n<body>\n  <h1>Homepage</h1>\n\t<a href=\"https://www.theodinproject.com/about\">click me</a>\n\n\t<a href=\"about.html\">About</a>\n</body>\n```\n\nOpen the `index.html` file in a browser and click on the about link to make sure it is all wired together correctly. Clicking the link should go to the `about` page you just created.\n\nThis works because the `index` and `about` page are in the same directory. That means you can simply use its name (`about.html`) as the link’s `href` value.\n\nBut you will usually want to organize your website directories a little better. Normally you would only have the `index.html` at the root directory and all other HTML files in their own directory.\n\nCreate a directory named `pages` within the `odin-links-and-images` directory and move the `about.html` file into this new directory.\n\nRefresh the `index` page in the browser and then click on the `about` link. It will now be broken. This is because the location of the `about` page file has changed.\n\nTo fix this, you just need to update the `about` link `href` value to include the `pages/` directory since that is the new location of the `about.html` file relative to the `index.html` file.\n\n```html\n<body>\n  <h1>Homepage</h1>\n  <a href=\"pages/about.html\">About</a>\n</body>\n```\n\nRefresh the `index` page in the browser and try clicking the `about` link again, it should now be back in working order.\n\nIn many cases, this will work just fine; however, you can still run into unexpected issues with this approach. Prepending `./` before the link will in most cases prevent such issues. By adding `./` you are specifying to your code that it should start looking for the file/directory relative to the **current** directory.\n\n```html\n<body>\n  <h1>Homepage</h1>\n  <a href=\"./pages/about.html\">About</a>\n</body>\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-links-and-images",
        "name": "Top Links And Images"
      }
    },
    {
      "id": "637f702372c65bc8e73dfe32",
      "title": "Links and Images Lesson E",
      "challengeType": 15,
      "dashedName": "links-and-images-lesson-e",
      "description": "Websites would be fairly boring if they could only display text. Luckily HTML provides a wide variety of elements for displaying all sorts of different media. The most widely used of these is the image element.\n\nTo display an image in HTML you use the `<img>` element. Unlike the other elements you have encountered, the `<img>` is a void element. Empty, void HTML elements do not need a closing tag.\n\nInstead of wrapping content with an opening and closing tag, it embeds an image into the page using a `src` attribute which tells the browser where the image file is located. The `src` attribute works much like the `href` attribute for anchor tags. It can embed an image using both absolute and relative paths.\n\nFor example, using an absolute path you can display an image located on The Odin Project site:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/gORbExZ?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=gORbExZ&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_gORbExZ\"></iframe>\n\nTo use images that you have on your own websites, you can use a relative path.\n\n- Create a new directory named `images` within the `odin-links-and-images` project.\n\n- Next, download <a href=\"https://unsplash.com/photos/Mv9hjnEUHR4/download?force=true&w=640\" target=\"_blank\">this image</a> and move it into the `images` directory you just created.\n\n- Rename the image to `dog.jpg`.\n\nFinally add the image to the `index.html` file:\n\n```html\n<body>\n  <h1>Homepage</h1>\n\t<a href=\"https://www.theodinproject.com/about\">click me</a>\n\n\t<a href=\"pages/about.html\">About</a>\n\n\t<img src=\"images/dog.jpg\">\n</body>\n```\n\nSave the `index.html` file and open it in a browser to view Charles in all his glory.\n\n\n## Parent Directories\n\nWhat if you want to use the dog image in the `about` page? You would first have to go up one level out of the pages directory into its parent directory so you could then access the images directory.\n\nTo go to the parent directory you need to use two dots in the relative filepath like this: `../.` Let’s see this in action, within the `body` of the `about.html` file, add the following image below the heading you added earlier:\n\n```html\n<img src=\"../images/dog.jpg\">\n```\n\nTo break this down:\n\n- First, you are going to the parent directory of the pages directory which is `odin-links-and-images`.\n\n- Then, from the parent directory, you can go into the `images` directory.\n\n- Finally, you can access the `dog.jpg` file.\n\nUsing the metaphor we used earlier, using `../` in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room.\n\n## `Alt` attribute\n\nBesides the `src` attribute, every image element should also have an `alt` (alternative text) attribute.\n\nThe `alt` attribute is used to describe an image. It will be used in place of the image if it cannot be loaded. It is also used with screen readers to describe what the image is to visually impaired users.\n\nThis is how the The Odin Project logo example you used earlier looks with an `alt` attribute included:\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/ExXjoEp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=ExXjoEp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_ExXjoEp\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-links-and-images",
        "name": "Top Links And Images"
      }
    },
    {
      "id": "637f701c72c65bc8e73dfe31",
      "title": "Links and Images Lesson F",
      "challengeType": 15,
      "dashedName": "links-and-images-lesson-f",
      "description": "Websites would be fairly boring if they could only display text. Luckily HTML provides a wide variety of elements for displaying all sorts of different media. The most widely used of these is the image element.\n\nTo display an image in HTML you use the `<img>` element. Unlike the other elements you have encountered, the `<img>` is a void element. Empty, void HTML elements do not need a closing tag.\n\nInstead of wrapping content with an opening and closing tag, it embeds an image into the page using a `src` attribute which tells the browser where the image file is located. The `src` attribute works much like the `href` attribute for anchor tags. It can embed an image using both absolute and relative paths.\n\nFor example, using an absolute path you can display an image located on The Odin Project site:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/gORbExZ?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=gORbExZ&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_gORbExZ\"></iframe>\n\nTo use images that you have on your own websites, you can use a relative path.\n\n- Create a new directory named `images` within the `odin-links-and-images` project.\n\n- Next, download <a href=\"https://unsplash.com/photos/Mv9hjnEUHR4/download?force=true&w=640\" target=\"_blank\">this image</a> and move it into the images directory you just created.\n\n- Rename the image to `dog.jpg`.\n\nFinally add the image to the `index.html` file:\n\n```html\n<body>\n  <h1>Homepage</h1>\n\t<a href=\"https://www.theodinproject.com/about\">click me</a>\n\n\t<a href=\"pages/about.html\">About</a>\n\n\t<img src=\"images/dog.jpg\">\n</body>\n```\n\nSave the `index.html` file and open it in a browser to view Charles in all his glory.\n\n\n## Parent Directories\n\nWhat if you want to use the dog image in the `about` page? You would first have to go up one level out of the pages directory into its parent directory so you could then access the images directory.\n\nTo go to the parent directory you need to use two dots in the relative filepath like this: `../.` Let’s see this in action, within the `body` of the `about.html` file, add the following image below the heading you added earlier:\n\n```html\n<img src=\"../images/dog.jpg\">\n```\n\nTo break this down:\n\n- First, you are going to the parent directory of the pages directory which is `odin-links-and-images`.\n\n- Then, from the parent directory, you can go into the `images` directory.\n\n- Finally, you can access the `dog.jpg` file.\n\nUsing the metaphor we used earlier, using `../` in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room.\n\n## Alt attribute\n\nBesides the `src` attribute, every image element should also have an `alt` (alternative text) attribute.\n\nThe `alt` attribute is used to describe an image. It will be used in place of the image if it cannot be loaded. It is also used with screen readers to describe what the image is to visually impaired users.\n\nThis is how the The Odin Project logo example you used earlier looks with an alt attribute included:\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/ExXjoEp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=ExXjoEp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_ExXjoEp\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-links-and-images",
        "name": "Top Links And Images"
      }
    },
    {
      "id": "637f701572c65bc8e73dfe30",
      "title": "Links and Images Lesson G",
      "challengeType": 15,
      "dashedName": "links-and-images-lesson-g",
      "description": "Websites would be fairly boring if they could only display text. Luckily HTML provides a wide variety of elements for displaying all sorts of different media. The most widely used of these is the image element.\n\nTo display an image in HTML you use the `<img>` element. Unlike the other elements you have encountered, the `<img>` is a void element. Empty, void HTML elements do not need a closing tag.\n\nInstead of wrapping content with an opening and closing tag, it embeds an image into the page using a `src` attribute which tells the browser where the image file is located. The `src` attribute works much like the `href` attribute for anchor tags. It can embed an image using both absolute and relative paths.\n\nFor example, using an absolute path you can display an image located on The Odin Project site:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/gORbExZ?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=gORbExZ&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_gORbExZ\"></iframe>\n\nTo use images that you have on your own websites, you can use a relative path.\n\n- Create a new directory named `images` within the `odin-links-and-images` project.\n\n- Next, download <a href=\"https://unsplash.com/photos/Mv9hjnEUHR4/download?force=true&w=640\" target=\"_blank\">this image</a> and move it into the images directory you just created.\n\n- Rename the image to `dog.jpg`.\n\nFinally add the image to the `index.html` file:\n\n```html\n<body>\n  <h1>Homepage</h1>\n\t<a href=\"https://www.theodinproject.com/about\">click me</a>\n\n\t<a href=\"pages/about.html\">About</a>\n\n\t<img src=\"images/dog.jpg\">\n</body>\n```\n\nSave the `index.html` file and open it in a browser to view Charles in all his glory.\n\n\n## Parent Directories\n\nWhat if you want to use the dog image in the `about` page? You would first have to go up one level out of the pages directory into its parent directory so you could then access the images directory.\n\nTo go to the parent directory you need to use two dots in the relative filepath like this: `../.` Let’s see this in action, within the `body` of the `about.html` file, add the following image below the heading you added earlier:\n\n```html\n<img src=\"../images/dog.jpg\">\n```\n\nTo break this down:\n\n- First, you are going to the parent directory of the pages directory which is `odin-links-and-images`.\n\n- Then, from the parent directory, you can go into the `images` directory.\n\n- Finally, you can access the `dog.jpg` file.\n\nUsing the metaphor we used earlier, using `../` in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room.\n\n## Alt attribute\n\nBesides the `src` attribute, every image element should also have an `alt` (alternative text) attribute.\n\nThe `alt` attribute is used to describe an image. It will be used in place of the image if it cannot be loaded. It is also used with screen readers to describe what the image is to visually impaired users.\n\nThis is how the The Odin Project logo example you used earlier looks with an alt attribute included:\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/ExXjoEp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=ExXjoEp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_ExXjoEp\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-links-and-images",
        "name": "Top Links And Images"
      }
    },
    {
      "id": "637f700b72c65bc8e73dfe2f",
      "title": "Links and Images Lesson H",
      "challengeType": 15,
      "dashedName": "links-and-images-lesson-h",
      "description": "Websites would be fairly boring if they could only display text. Luckily HTML provides a wide variety of elements for displaying all sorts of different media. The most widely used of these is the image element.\n\nTo display an image in HTML you use the `<img>` element. Unlike the other elements you have encountered, the `<img>` is a void element. Empty, void HTML elements do not need a closing tag.\n\nInstead of wrapping content with an opening and closing tag, it embeds an image into the page using a `src` attribute which tells the browser where the image file is located. The `src` attribute works much like the `href` attribute for anchor tags. It can embed an image using both absolute and relative paths.\n\nFor example, using an absolute path you can display an image located on The Odin Project site:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/gORbExZ?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=gORbExZ&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_gORbExZ\"></iframe>\n\nTo use images that you have on your own websites, you can use a relative path.\n\n- Create a new directory named `images` within the `odin-links-and-images` project.\n\n- Next, download <a href=\"https://unsplash.com/photos/Mv9hjnEUHR4/download?force=true&w=640\" target=\"_blank\">this image</a> and move it into the images directory you just created.\n\n- Rename the image to `dog.jpg`.\n\nFinally add the image to the `index.html` file:\n\n```html\n<body>\n  <h1>Homepage</h1>\n\t<a href=\"https://www.theodinproject.com/about\">click me</a>\n\n\t<a href=\"pages/about.html\">About</a>\n\n\t<img src=\"images/dog.jpg\">\n</body>\n```\n\nSave the `index.html` file and open it in a browser to view Charles in all his glory.\n\n\n## Parent Directories\n\nWhat if you want to use the dog image in the `about` page? You would first have to go up one level out of the pages directory into its parent directory so you could then access the images directory.\n\nTo go to the parent directory you need to use two dots in the relative filepath like this: `../.` Let’s see this in action, within the `body` of the `about.html` file, add the following image below the heading you added earlier:\n\n```html\n<img src=\"../images/dog.jpg\">\n```\n\nTo break this down:\n\n- First, you are going to the parent directory of the pages directory which is `odin-links-and-images`.\n\n- Then, from the parent directory, you can go into the `images` directory.\n\n- Finally, you can access the `dog.jpg` file.\n\nUsing the metaphor we used earlier, using `../` in a filepath is kind of like stepping out from the room you are currently in to the main hallway so you can go to another room.\n\n## Alt attribute\n\nBesides the `src` attribute, every image element should also have an `alt` (alternative text) attribute.\n\nThe `alt` attribute is used to describe an image. It will be used in place of the image if it cannot be loaded. It is also used with screen readers to describe what the image is to visually impaired users.\n\nThis is how the The Odin Project logo example you used earlier looks with an alt attribute included:\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/ExXjoEp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=ExXjoEp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_ExXjoEp\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-links-and-images\\links-and-images-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-links-and-images",
        "name": "Top Links And Images"
      }
    },
    {
      "id": "64a5529c02815a7d323aab88",
      "title": "The Box Model Lesson A",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-a",
      "description": "Being able to inspect and debug your HTML and CSS is critical to frontend development. This lesson will take us through the Chrome Dev Tools, which allow you to see detailed information about your elements and CSS rules, as well as assist you in finding and fixing problems in your code.\n\nTo open up the inspector, you can right-click on any element of a webpage and click “Inspect” or press F12. Go ahead and do that right now to see the HTML and CSS used on this page.\n\nDon’t get overwhelmed with all the tools you’re now seeing! For this lesson, we want to focus on the Elements and Styles panes.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a553ed02815a7d323aab89",
      "title": "The Box Model Lesson B",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-b",
      "description": "In the Elements pane, you can see the entire HTML structure of your page. You can click on any of the elements in this pane to select that specific element. Alternatively, you can click the blue-highlighted icon shown below on the left, and hover over any element on the page.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/the-box-model/inspector-icon.png\" alt=\"A web development environment with developer tools open, highlighting a blue inspector icon in the top-left for selecting webpage elements to view HTML structure and styles.\">\n\nWhen an element is selected, the Styles tab will show all the currently applied styles, as well as any styles that are being overwritten (indicated by a strikethrough of the text). For example, if you use the inspector to click on the “Your Career in Web Development Starts Here” header on <a href=\"https://www.theodinproject.com/\" target=\"_blank\">the The Odin Project homepage</a>, on the right-hand side you’ll see all the styles that are currently affecting the element, as seen below:\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/the-box-model/overwritten-style.png\" alt=\"CSS code snippet in the developer console showing .hero_main-heading with applied margin-bottom: 100px, padding-bottom: 1.875rem, .accent color #ce973e. h1 style rules include font-size, weight, letter-spacing, with its margin-bottom: 2rem overridden.\">",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a5551d02815a7d323aab8a",
      "title": "The Box Model Lesson C",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-c",
      "description": "In the Elements pane, you can see the entire HTML structure of your page. You can click on any of the elements in this pane to select that specific element. Alternatively, you can click the blue-highlighted icon shown below on the left, and hover over any element on the page.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/the-box-model/inspector-icon.png\" alt=\"A web development environment with developer tools open, highlighting a blue inspector icon in the top-left for selecting webpage elements to view HTML structure and styles.\">\n\nWhen an element is selected, the Styles tab will show all the currently applied styles, as well as any styles that are being overwritten (indicated by a strikethrough of the text). For example, if you use the inspector to click on the “Your Career in Web Development Starts Here” header on <a href=\"https://www.theodinproject.com/\" target=\"_blank\">the The Odin Project homepage</a>, on the right-hand side you’ll see all the styles that are currently affecting the element, as seen below:\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/the-box-model/overwritten-style.png\" alt=\"CSS code snippet in the developer console showing .hero_main-heading with applied margin-bottom: 100px, padding-bottom: 1.875rem, .accent color #ce973e. h1 style rules include font-size, weight, letter-spacing, with its margin-bottom: 2rem overridden.\">",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a55a6102815a7d323aab8b",
      "title": "The Box Model Lesson D",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-d",
      "description": "In the Elements pane, you can see the entire HTML structure of your page. You can click on any of the elements in this pane to select that specific element. Alternatively, you can click the blue-highlighted icon shown below on the left, and hover over any element on the page.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/the-box-model/inspector-icon.png\" alt=\"A web development environment with developer tools open, highlighting a blue inspector icon in the top-left for selecting webpage elements to view HTML structure and styles.\">\n\nWhen an element is selected, the Styles tab will show all the currently applied styles, as well as any styles that are being overwritten (indicated by a strikethrough of the text). For example, if you use the inspector to click on the “Your Career in Web Development Starts Here” header on <a href=\"https://www.theodinproject.com/\" target=\"_blank\">the The Odin Project homepage</a>, on the right-hand side you’ll see all the styles that are currently affecting the element, as seen below:\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/the-box-model/overwritten-style.png\" alt=\"CSS code snippet in the developer console showing .hero_main-heading with applied margin-bottom: 100px, padding-bottom: 1.875rem, .accent color #ce973e. h1 style rules include font-size, weight, letter-spacing, with its margin-bottom: 2rem overridden.\">",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a669f77a7d00f97013ed0c",
      "title": "The Box Model Lesson E",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-e",
      "description": "Now that you understand the basic syntax of HTML and CSS, we’re going to get serious. The most important skills you need to master with CSS are positioning and layout. Changing fonts and colors is a crucial skill, but being able to put things exactly where you want them on a webpage is even more crucial. After all, how many webpages can you find where absolutely every element is just stacked one on top of another?\n\nLearning to position elements on a webpage is not that difficult once you understand just a few key concepts. Unfortunately, many learners race through learning HTML and CSS to get to JavaScript and end up missing these fundamental concepts. This leads to frustration, pain, (and funny gifs) because all the JavaScript skills in the world are meaningless if you can’t stick your elements on the page where you need them to be. So with that in mind, let’s get started.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a66c917a7d00f97013ed0d",
      "title": "The Box Model Lesson F",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-f",
      "description": "The first important concept that you need to understand to be successful in CSS is the box model. It isn’t complicated, but skipping over it now will cause you much frustration down the line.\n\nEvery single thing on a webpage is a rectangular box. These boxes can have other boxes in them and can sit alongside one another. You can get a rough idea of how this works by sticking a border on every item on the page like this:\n\n```css\n* {\n  border: 1px solid red;\n}\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a6702e7a7d00f97013ed0e",
      "title": "The Box Model Lesson G",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-g",
      "description": "<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/the-box-model/box-model-lines.png\" alt=\"an image showing the odin project website surrounded by red borders indicating that the site is build out of multiple components\" style=\"width: 95%; height: 95%;\">\n\nOK, so there might be some circles in the above image… but when it comes to layout, they fit together like rectangular boxes and not circles. In the end, laying out a webpage and positioning all its elements is deciding how you are going to nest and stack these boxes.\n\nThe only real complication here is that there are many ways to manipulate the size of these boxes, and the space between them, using padding, margin, and border. But to sum it up briefly:\n\n- `padding` increases the space between the border of a box and the content of the box.\n- `margin` increases the space between the borders of a box and the borders of adjacent boxes.\n- `border` adds space (even if it’s only a pixel or two) between the margin and the padding.\n\nBe sure to study the diagrams carefully.\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/odin-project/the-box-model/the-box-model.png\" alt=\"Visual representation of CSS box model with text, surrounded by 'padding' in pink, a purple 'border', and 'margin' indicated by blue arrows, explaining space between text, box edge, and window edge.\">",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a674937a7d00f97013ed0f",
      "title": "The Box Model Lesson H",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-h",
      "description": "Because the box model concept is so incredibly fundamental, let’s dig a bit deeper with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#what_is_the_css_box_model\" target=\"_blank\">this lesson from MDN</a>. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a6749a7a7d00f97013ed10",
      "title": "The Box Model Lesson I",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-i",
      "description": "Because the box model concept is so incredibly fundamental, let’s dig a bit deeper with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#what_is_the_css_box_model\" target=\"_blank\">this lesson from MDN</a>. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-i.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a674a47a7d00f97013ed11",
      "title": "The Box Model Lesson J",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-j",
      "description": "Because the box model concept is so incredibly fundamental, let’s dig a bit deeper with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#what_is_the_css_box_model\" target=\"_blank\">this lesson from MDN</a>. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-j.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a674ac7a7d00f97013ed12",
      "title": "The Box Model Lesson K",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-k",
      "description": "Because the box model concept is so incredibly fundamental, let’s dig a bit deeper with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#what_is_the_css_box_model\" target=\"_blank\">this lesson from MDN</a>. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-k.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a674b97a7d00f97013ed13",
      "title": "The Box Model Lesson L",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-l",
      "description": "Because the box model concept is so incredibly fundamental, let’s dig a bit deeper with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#what_is_the_css_box_model\" target=\"_blank\">this lesson from MDN</a>. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-l.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "64a674c27a7d00f97013ed14",
      "title": "The Box Model Lesson M",
      "challengeType": 15,
      "dashedName": "the-box-model-lesson-m",
      "description": "Because the box model concept is so incredibly fundamental, let’s dig a bit deeper with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model#what_is_the_css_box_model\" target=\"_blank\">this lesson from MDN</a>. It covers the same material as the video above and will introduce you to inline boxes that we will explore in the next lesson. Pay close attention to the examples and take the time to experiment with their in-browser editor!",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-the-box-model\\the-box-model-lesson-m.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-the-box-model",
        "name": "Top The Box Model"
      }
    },
    {
      "id": "637f4e5872c65bc8e73dfe27",
      "title": "Working With Text Lesson A",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-a",
      "description": "What would you expect the following text to output on an HTML page?\n\n```html\n<body>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua.\n\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat.\n</body>\n```\n\nIt looks like two paragraphs of text, and so you might expect it to display in that way. However that is not the case, as you can see in the output below:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/xxrKqeV?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=xxrKqeV&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_xxrKqeV\"></iframe>\n\nWhen the browser encounters new lines like this in your HTML, it will compress them down into one single space. The result of this compression is that all of the text is clumped together into one long line.\n\nIf you want to create paragraphs in HTML, you need to use the paragraph element, which will add a newline after each of your paragraphs. A paragraph element is defined by wrapping text content with a `<p>` tag.\n\nChanging our example from before to use paragraph elements fixes the issue:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/mdwbmdp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=mdwbmdp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_mdwbmdp\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-a.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e5f72c65bc8e73dfe28",
      "title": "Working With Text Lesson B",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-b",
      "description": "Headings are different from other HTML text elements: they are displayed larger and bolder than other text to signify that they are headings.\n\nThere are 6 different levels of headings starting from `<h1>` to `<h6>`. The number within a heading tag represents that heading’s level. The largest and most important heading is `h1`, while `h6` is the tiniest heading at the lowest level.\n\nHeadings are defined much like paragraphs. For example, to create an `h1` heading, we wrap our heading text in a `<h1>` tag.\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_3\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/LYLPLbg?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=LYLPLbg&amp;user=TheOdinProjectExamples&amp;name=cp_embed_3\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_LYLPLbg\"></iframe>\n\nUsing the correct level of heading is important as levels provide a hierarchy to the content. An `h1` heading should always be used for the heading of the overall page, and the lower level headings should be used as the headings for content in smaller sections of the page.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-b.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e6672c65bc8e73dfe29",
      "title": "Working With Text Lesson C",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-c",
      "description": "The `<strong>` element makes text bold. It also semantically marks text as important; this affects tools, like screen readers, that users with visual impairments will rely on to use your website. The tone of voice on some screen readers will change to communicate the importance of the text within a `strong` element. To define a `strong` element you wrap text content in a `<strong>` tag.\n\nYou can use `strong` on its own:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_4\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/qBjWXrB?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=qBjWXrB&amp;user=TheOdinProjectExamples&amp;name=cp_embed_4\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_qBjWXrB\"></iframe>\n\nBut you will probably find yourself using the `strong` element much more in combination with other text elements, like this:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_5\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/wvewqJr?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=wvewqJr&amp;user=TheOdinProjectExamples&amp;name=cp_embed_5\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_wvewqJr\"></iframe>\n\nSometimes you will want to make text bold without giving it an important meaning. You’ll learn how to do that in the CSS lessons later in the curriculum.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-c.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e6e72c65bc8e73dfe2a",
      "title": "Working With Text Lesson D",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-d",
      "description": "The `em` element makes text italic. It also semantically places emphasis on the text, which again may affect things like screen readers. To define an emphasized element you wrap text content in an `<em>` tag.\n\nTo use `em` on its own:\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_6\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/wvewqpp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=wvewqpp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_6\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_wvewqpp\"></iframe>\n\nAgain, like the `strong` element, you will find yourself mostly using the `em` element with other text elements:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_7\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/VwWZzyj?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=VwWZzyj&amp;user=TheOdinProjectExamples&amp;name=cp_embed_7\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_VwWZzyj\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-d.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e7972c65bc8e73dfe2b",
      "title": "Working With Text Lesson E",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-e",
      "description": "You may have noticed that in all the examples in this lesson you indent any elements that are within other elements. This is known as nesting elements.\n\nWhen you nest elements within other elements, you create a parent and child relationship between them. The nested elements are the children and the element they are nested within is the parent.\n\nIn the following example, the `body` element is the parent and the `p` is the child:\n\n```html\n<html>\n  <head>\n  </head>\n  <body>\n    <p>Lorem ipsum dolor sit amet.</p>\n  </body>\n </html>\n```\n\nJust as in human relationships, HTML parent elements can have many children. Elements at the same level of nesting are considered to be siblings.\n\nFor example, the two `p` elements in the following code are siblings, since they are both children of the `body` tag and are at the same level of nesting as each other:\n\n```html\n<html>\n  <head>\n  </head>\n  <body>\n    <p>Lorem ipsum dolor sit amet.</p>\n    <p>Ut enim ad minim veniam.</p>\n  </body>\n </html>\n```\n\nYou use indentation to make the level of nesting clear and readable for yourselves and other developers who will work with your HTML in the future. It is recommended to indent any child elements by two spaces.\n\nThe parent, child, and sibling relationships between elements will become much more important later when you start styling your HTML with CSS and adding behavior with JavaScript. For now, however, it is just important to know the distinction between how elements are related and the terminology used to describe their relationships.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-e.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e8072c65bc8e73dfe2c",
      "title": "Working With Text Lesson F",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-f",
      "description": "You may have noticed that in all the examples in this lesson you indent any elements that are within other elements. This is known as nesting elements.\n\nWhen you nest elements within other elements, you create a parent and child relationship between them. The nested elements are the children and the element they are nested within is the parent.\n\nIn the following example, the body element is the parent and the paragraph is the child:\n\n```html\n<html>\n  <head>\n  </head>\n  <body>\n    <p>Lorem ipsum dolor sit amet.</p>\n  </body>\n </html>\n```\n\nJust as in human relationships, HTML parent elements can have many children. Elements at the same level of nesting are considered to be siblings.\n\nFor example, the two paragraphs in the following code are siblings, since they are both children of the body tag and are at the same level of nesting as each other:\n\n```html\n<html>\n  <head>\n  </head>\n  <body>\n    <p>Lorem ipsum dolor sit amet.</p>\n    <p>Ut enim ad minim veniam.</p>\n  </body>\n </html>\n```\n\nYou use indentation to make the level of nesting clear and readable for yourselves and other developers who will work with your HTML in the future. It is recommended to indent any child elements by two spaces.\n\nThe parent, child, and sibling relationships between elements will become much more important later when you start styling your HTML with CSS and adding behavior with JavaScript. For now, however, it is just important to know the distinction between how elements are related and the terminology used to describe their relationships.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-f.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e8772c65bc8e73dfe2d",
      "title": "Working With Text Lesson G",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-g",
      "description": "HTML comments are not visible to the browser; they allow us to comment on your code so that other developers or your future selves can read them and get some context about something that might not be clear in the code.\n\nWriting an HTML comment is simple: You just enclose the comment with `<!--` and `-->`tags. For example:\n\n```html\n<h1> View the html to see the hidden comments </h1>\n\n<!-- I am a html comment -->\n\n<p>Some paragraph text</p>\n\n<!-- I am another html comment -->\n```",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-g.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e3e72c65bc8e73dfe24",
      "title": "Working With Text Lesson H",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-h",
      "description": "If you want to have a list of items where the order doesn’t matter, like a shopping list of items that can be bought in any order, then you can use an unordered list.\n\nUnordered lists are created using the `<ul>` element, and each item within the list is created using the list item element `<li>`.\n\nEach list item in an unordered list begins with a bullet point:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/powjajd?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=powjajd&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_powjajd\"></iframe>\n\nIf you instead want to create a list of items where the order does matter, like step-by-step instructions for a recipe, or your top 10 favorite TV shows, then you can use an ordered list.\n\nOrdered lists are created using the `<ol>` element. Each individual item in them is again created using the list item element `<li>`. However, each list item in an ordered list begins with a number instead:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/yLXYvYp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=yLXYvYp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_yLXYvYp\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-h.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e4672c65bc8e73dfe25",
      "title": "Working With Text Lesson I",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-i",
      "description": "If you want to have a list of items where the order doesn’t matter, like a shopping list of items that can be bought in any order, then you can use an unordered list.\n\nUnordered lists are created using the `<ul>` element, and each item within the list is created using the list item element `<li>`.\n\nEach list item in an unordered list begins with a bullet point:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/powjajd?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=powjajd&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_powjajd\"></iframe>\n\nIf you instead want to create a list of items where the order does matter, like step-by-step instructions for a recipe, or your top 10 favorite TV shows, then you can use an ordered list.\n\nOrdered lists are created using the `<ol>` element. Each individual item in them is again created using the list item element `<li>`. However, each list item in an ordered list begins with a number instead:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/yLXYvYp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=yLXYvYp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_yLXYvYp\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-i.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    },
    {
      "id": "637f4e5172c65bc8e73dfe26",
      "title": "Working With Text Lesson J",
      "challengeType": 15,
      "dashedName": "working-with-text-lesson-j",
      "description": "If you want to have a list of items where the order doesn’t matter, like a shopping list of items that can be bought in any order, then you can use an unordered list.\n\nUnordered lists are created using the `<ul>` element, and each item within the list is created using the list item element `<li>`.\n\nEach list item in an unordered list begins with a bullet point:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_1\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/powjajd?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=powjajd&amp;user=TheOdinProjectExamples&amp;name=cp_embed_1\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_powjajd\"></iframe>\n\nIf you instead want to create a list of items where the order does matter, like step-by-step instructions for a recipe, or your top 10 favorite TV shows, then you can use an ordered list.\n\nOrdered lists are created using the `<ol>` element. Each individual item in them is again created using the list item element `<li>`. However, each list item in an ordered list begins with a number instead:\n\n<iframe allowfullscreen=\"true\" allowpaymentrequest=\"true\" allowtransparency=\"true\" class=\"cp_embed_iframe \" frameborder=\"0\" height=\"300\" width=\"100%\" name=\"cp_embed_2\" scrolling=\"no\" src=\"https://codepen.io/TheOdinProjectExamples/embed/yLXYvYp?height=300&amp;theme-id=dark&amp;default-tab=html%2Cresult&amp;slug-hash=yLXYvYp&amp;user=TheOdinProjectExamples&amp;name=cp_embed_2\" style=\"width: 100%; overflow:hidden; display:block;\" title=\"CodePen Embed\" loading=\"lazy\" id=\"cp_embed_yLXYvYp\"></iframe>",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\16-the-odin-project\\top-working-with-text\\working-with-text-lesson-j.md"
      },
      "section": {
        "id": "16-the-odin-project",
        "name": "16-the-odin-project"
      },
      "lesson": {
        "id": "top-working-with-text",
        "name": "Top Working With Text"
      }
    }
  ],
  "metadata": {
    "total_challenges": 131,
    "challenges_with_content": 131
  }
}