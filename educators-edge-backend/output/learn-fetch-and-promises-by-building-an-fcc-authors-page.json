{
  "title": "Learn Fetch And Promises By Building An Fcc Authors Page",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Step 1",
      "description": "All the HTML and CSS for this project has been provided for you. You can take a look at the two files to familiarize yourself with them.\n\nStart by getting the `#author-container` and `#load-more-btn` elements with the `.getElementById()` method. Assign them to the variables `authorContainer` and `loadMoreBtn`, respectively.\n\nThe variables will not change, so use `const` to declare them.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `document.getElementById()` to get the `#author-container` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)author\\-container\\1\\s*\\)/);\n```\n\nYou should assign the `#author-container` element to the variable `authorContainer`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+authorContainer\\s*\\=\\s*document\\.getElementById\\(\\s*('|\"|`)author\\-container\\1\\s*\\)/);\n```\n\nYou should use `document.getElementById()` to get the `#load-more-btn` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)load\\-more\\-btn\\1\\s*\\)/);\n```\n\nYou should assign the `#load-more-btn` element to the variable `loadMoreBtn`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+loadMoreBtn\\s*\\=\\s*document\\.getElementById\\(\\s*('|\"|`)load\\-more\\-btn\\1\\s*\\)/);\n```"
    },
    {
      "title": "Step 2",
      "description": "In this project we want data about the authors on freeCodeCamp News.\nIf you want data from an online source, you need use an `API` (Application Programming Interface).\nAn `API` lets people from outside of an organization retrieve its internal data. \n\nThere is a method called `fetch` that allows code to receive data from an `API` by sending a `GET` request. \n\nHere is how you can make a `GET` request with the `fetch()` method:\n\n```js\nfetch(\"url-goes-here\")\n```\n\nMake a `GET` request to this URL: `\"https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json\"`. Don't terminate your code with a semicolon yet.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `fetch()` method to make a `GET` request to `\"https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json\"`.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)/)\n```\n\nYou should not have a semicolon after your `fetch` call.\n\n```js\nassert.notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*;/)\n```"
    },
    {
      "title": "Step 3",
      "description": "The `fetch()` method returns a `Promise`, which is a placeholder object that will either be fulfilled if your request is successful, or rejected if your request is unsuccessful.\n\nIf the `Promise` is fulfilled, it resolves to a `Response` object, and you can use the `.then()` method to access the `Response`.\n\nHere's how you can chain `.then()` to the `fetch()` method:\n\n```js\nfetch(\"sample-url-goes-here\")\n  .then((res) => res)\n```\n\nChain the `.then()` method to your `fetch` call. Inside the `.then()` method, add a callback function with `res` as a parameter, then log the `res` to the console so you can see the `Response` object. Open your browser console and expand the `Response` object to see what it contains.\n\nAgain, don't terminate the code with a semicolon yet.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\n--fcc-editable-region--\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `fetch()` method to make a `GET` request to `\"https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json\"`.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)/)\n```\n\nYou should chain the `.then()` method to your `fetch()` syntax\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(/)\n```\n\nYou should add a `res` parameter to your `.then()` method.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)/)\n```\n\nYour `.then()` method should use arrow function syntax.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*/)\n```\n\nYou should log the `res` parameter to the console so you can see the `Response` object.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*console\\.log\\(\\s*res\\s*\\)\\s*\\)/)\n```\n\nYou should not have a semicolon after your `.then()`.\n\n```js\nassert.notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*console\\.log\\(\\s*res\\s*\\)\\s*\\)\\s*;/)\n```"
    },
    {
      "title": "Step 4",
      "description": "The data you get from a `GET` request is not usable at first. To make the data usable, you can use the `.json()` method on the `Response` object to parse it into JSON. If you expand the `Prototype` of the `Response` object in the browser console, you will see the `.json()` method there.\n\nRemove `console.log(res)` and implicitly return `res.json()` instead.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n--fcc-editable-region--\n.then((res) => console.log(res))\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should remove the `console.log(res)`.\n\n```js\nassert.notMatch(code, /\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*console\\.log\\(\\s*res\\s*\\)\\s*\\)/)\n```\n\nYou should implicitly return `res.json()` in your `.then()`.\n\n```js\nassert.match(code, /\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)/)\n```\n\nYou should not have a semicolon after your `.then()`.\n\n```js\nassert.notMatch(code, /\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*;/)\n```"
    },
    {
      "title": "Step 5",
      "description": "In order to start working with the data, you will need to use another `.then()` method.\n\nChain another `.then()` to the existing `.then()` method. This time, pass in `data` as the parameter for the callback function. For the callback, use curly braces because you will have more than one expression. Within your callback function, log `data` to the console to see what it looks like.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\n--fcc-editable-region--\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `fetch()` method to make a `GET` request to `\"https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json\"`.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)/)\n```\n\nYour first `.then()` should not have a semicolon.\n\n```js\nassert.notMatch(code, /\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*;/)\n```\n\nYou should chain another `.then()` to the existing `.then()`.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(/)\n```\n\nYou should add a `data` parameter to your second `.then()` method.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)/)\n```\n\nYour second `.then()` method should use arrow function syntax.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/)\n```\n\nYour second `.then()` method should have curly braces.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*/)\n```\n\nYour second `.then()` method should log `data` to the console.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*?console\\.log\\(\\s*data\\s*\\)\\s*;?\\s*\\}\\s*\\)/)\n```\n\nYour second `.then()` should not have semicolon after it.\n\n```js\nassert.notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*?console\\.log\\(\\s*data\\s*\\)\\s*;?\\s*\\}\\s*\\)\\s*;/)\n```"
    },
    {
      "title": "Step 6",
      "description": "The `.catch()` method is another asynchronous JavaScript method you can use to handle errors. This is useful in case the `Promise` gets rejected.\n\nChain `.catch()` to the last `.then()`. Pass in a callback function with `err` as the parameter. Inside the callback, use `console.error()` to log possible errors to the console with the text `There was an error: ${err}`. Since you're using `err` in the text, don't forget to use a template literal string with backticks (\\`\\`) instead of single or double quotes.\n\n**Note**: `catch` is the last call chained on to fetch, so you can terminate your code with a semicolon.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data);\n  })\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `fetch()` method to make a `GET` request to `\"https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json\"`.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)/)\n```\n\nYou should chain another `.then()` to the existing `.then()`.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(/)\n```\n\nYou should add a `data` parameter to your second `.then()` method.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)/)\n```\n\nYour second `.then()` method should use arrow function syntax.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*/)\n```\n\nYour second `.then()` method should have curly braces.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*/)\n```\n\nYour second `.then()` method should log `data` to the console.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*?console\\.log\\(\\s*data\\s*\\)\\s*;?\\n?\\s*\\}\\s*\\)/)\n```\n\nYour second `.then()` should not have a semicolon.\n\n```js\nassert.notMatch(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*?console\\.log\\(\\s*data\\s*\\)\\s*;?\\n?\\s*\\}\\s*\\)\\s*;/)\n```\n\nYou should chain the `.catch()` method to the second `.then()` you already have.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*?console\\.log\\(\\s*data\\s*\\)\\s*;?\\n?\\s*\\}\\s*\\)\\n?\\s*\\.catch\\(/)\n```\n\nYou should add an `err` parameter to your `.catch()` method.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*?console\\.log\\(\\s*data\\s*\\)\\s*;?\\n?\\s*\\}\\s*\\)\\n?\\s*\\.catch\\(\\s*(\\(\\s*err\\s*\\)|err)/)\n```\n\nYour `.catch()` method should have an arrow function syntax.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*?console\\.log\\(\\s*data\\s*\\)\\s*;?\\n?\\s*\\}\\s*\\)\\n?\\s*\\.catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{?/)\n```\n\nYour `.catch()` method should use `console.error()` to log `err` to the console with the text `` `There was an error: ${err}` ``. Don't forget to use backticks.\n\n```js\nassert.match(code, /fetch\\(\\s*('|\"|`)https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/news\\-author\\-page\\/authors\\.json\\1\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*res\\s*\\)|res)\\s*=>\\s*res\\.json\\(\\s*\\)\\s*\\)\\s*\\.then\\(\\s*(\\(\\s*data\\s*\\)|data)\\s*=>\\s*\\{\\s*\\n?\\s*?console\\.log\\(\\s*data\\s*\\)\\s*;?\\n?\\s*\\}\\s*\\)\\n?\\s*\\.catch\\(\\s*(\\(\\s*err\\s*\\)|err)\\s*=>\\s*\\{?\\n?(\\s*)?console\\.error\\(\\s*`There\\swas\\san\\serror:\\s?\\$\\{\\s*err\\s*\\}`\\s*\\)\\s*;?\\n?(\\s*)?\\}?\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 7",
      "description": "Now that you have the data you want, you can use it to populate the UI. But the fetched data contains an array of 26 authors, and if you add them all to the page at the same time, it could lead to poor performance.\n\nInstead, you should add 8 authors at a time, and have a button to add 8 more until there's no more data to display.\n\nUse `let` to create 2 variables named `startingIndex` and `endingIndex`, and assign them the number values `0` and `8`, respectively. Also, create an `authorDataArr` variable with `let` and set it to an empty array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data);   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });"
        }
      ],
      "testCode": "You should use `let` to declare a variable named `startingIndex`.\n\n```js\nassert.match(code, /let\\s+startingIndex/)\n```\n\nYou should set your `startingIndex` variable to `0`.\n\n```js\nassert.match(code, /let\\s+startingIndex\\s*=\\s*0\\s*;?/)\n```\n\nYou should use `let` to declare a variable named `endingIndex`.\n\n```js\nassert.match(code, /let\\s+endingIndex/)\n```\n\nYou should set your `endingIndex` variable to `8`.\n\n```js\nassert.match(code, /let\\s+endingIndex\\s*=\\s*8\\s*;?/)\n```\n\nYou should use `let` to declare a variable named `authorDataArr`.\n\n```js\nassert.match(code, /let\\s+authorDataArr/)\n```\n\nYou should set your `authorDataArr` variable to an empty array (`[]`).\n\n```js\nassert.match(code, /let\\s+authorDataArr\\s*=\\s*\\[\\s*\\]\\s*;?/)\n```"
    },
    {
      "title": "Step 8",
      "description": "Now you'll create a function to populate the UI with the author data. You will call this function inside the second `.then()` method.\n\nCreate an empty arrow function named `displayAuthors` that takes `authors` as a parameter.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data);   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `const` to create an empty function named `displayAuthors`.\n\n```js\nassert.match(code, /const\\s+displayAuthors\\s*=\\s*/)\n```\n\n`displayAuthors` should be a function.\n\n```js\nassert.isFunction(displayAuthors)\n```\n\nYour `displayAuthors` function should use an arrow syntax.\n\n```js\nassert.match(code, /const\\s+displayAuthors\\s*=\\s*(\\(.*\\)|[^\\s()]+)\\s*=>\\s*/)\n```\n\nYour `displayAuthors` function should take an `authors` parameter.\n\n```js\nassert.match(code, /const\\s+displayAuthors\\s*=\\s*\\(?\\s*authors/)\n```\n\nYour `displayAuthors` function  should be empty.\n\n```js\nassert.match(code, /const\\s+displayAuthors\\s*=\\s*(\\(\\s*authors\\s*\\)|authors)\\s*=>\\s*\\{\\n?\\s*?\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 9",
      "description": "Inside your `displayAuthors` function, chain `.forEach()` to `authors`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data);   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n};"
        }
      ],
      "testCode": "You should chain `.forEach()` to `authors`.\n\n```js\nassert.match(code, /authors\\.forEach\\(\\s*\\)/)\n```"
    },
    {
      "title": "Step 10",
      "description": "Pass an empty callback function to the `.forEach()` method. For the first parameter of the callback, destructure the `author`, `image`, `url`, and `bio` items. \n\nFor the second parameter, pass in `index`. This will represent the position of each author, and will be useful for pagination later.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data);   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  --fcc-editable-region--\n  authors.forEach();\n  --fcc-editable-region--\n};"
        }
      ],
      "testCode": "You should destructure `author`, `image`, `url`, and `bio` as the first parameter of your callback function. Don't forget to put them inside curly braces.\n\n```js\nassert.match(code, /authors\\.forEach\\(\\s*\\(\\s*\\{\\s*(?:author\\s*,\\s*image\\s*,\\s*url\\s*,\\s*bio)|(?:image\\s*,\\s*author\\s*,\\s*url\\s*,\\s*bio)|(?:url\\s*,\\s*author\\s*,\\s*image\\s*,\\s*bio)|(?:author\\s*,\\s*url\\s*,\\s*image\\s*,\\s*bio)|(?:image\\s*,\\s*url\\s*,\\s*author\\s*,\\s*bio)|(?:url\\s*,\\s*image\\s*,\\s*author\\s*,\\s*bio)|(?:url\\s*,\\s*image\\s*,\\s*bio\\s*,\\s*author)|(?:image\\s*,\\s*url\\s*,\\s*bio\\s*,\\s*author)|(?:bio\\s*,\\s*url\\s*,\\s*image\\s*,\\s*author)|(?:url\\s*,\\s*bio\\s*,\\s*image\\s*,\\s*author)|(?:image\\s*,\\s*bio\\s*,\\s*url\\s*,\\s*author)|(?:bio\\s*,\\s*image\\s*,\\s*url\\s*,\\s*author)|(?:bio\\s*,\\s*author\\s*,\\s*url\\s*,\\s*image)|(?:author\\s*,\\s*bio\\s*,\\s*url\\s*,\\s*image)|(?:url\\s*,\\s*bio\\s*,\\s*author\\s*,\\s*image)|(?:bio\\s*,\\s*url\\s*,\\s*author\\s*,\\s*image)|(?:author\\s*,\\s*url\\s*,\\s*bio\\s*,\\s*image)|(?:url\\s*,\\s*author\\s*,\\s*bio\\s*,\\s*image)|(?:image\\s*,\\s*author\\s*,\\s*bio\\s*,\\s*url)|(?:author\\s*,\\s*image\\s*,\\s*bio\\s*,\\s*url)|(?:bio\\s*,\\s*image\\s*,\\s*author\\s*,\\s*url)|(?:image\\s*,\\s*bio\\s*,\\s*author\\s*,\\s*url)|(?:author\\s*,\\s*bio\\s*,\\s*image\\s*,\\s*url)|(?:bio\\s*,\\s*author\\s*,\\s*image\\s*,\\s*url)\\s*\\}/)\n```\n\nYou should destructure `index` as the second parameter of your callback function. It has to be outside of the curly braces you put the others in.\n\n```js\nassert.match(code, /authors\\.forEach\\(\\s*\\(\\s*\\{.*\\}\\s*,\\s*index\\s*\\)/)\n```\n\nYour callback function should use an arrow syntax.\n\n```js\nassert.match(code, /authors\\.forEach\\(\\s*\\(\\s*\\{.*\\}\\s*,\\s*index\\s*\\)\\s*=>\\s*/)\n```\n\nYour callback function should be empty.\n\n```js\nassert.match(code, /authors\\.forEach\\(\\s*\\(\\s*\\{.*\\}\\s*,\\s*index\\s*\\)\\s*=>\\s*\\{\\s*\\}\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 11",
      "description": "Now it's time to start building the HTML for the page with your destructured data. You can do this with a combination of the compound assignment operator (`+=`) and the `innerHTML` property.\n\nInside your callback function, use the compound assignment operator to append an empty template literal to the `innerHTML` of `authorContainer`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data);   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n  });\n};"
        }
      ],
      "testCode": "You should access the `innerHTML` of `authorContainer`.\n\n```js\nassert.match(code, /authorContainer\\.innerHTML\\s*/)\n```\n\nYou should use compound assignment to append an empty template literal to the `innerHTML` of `authorContainer`.\n\n```js\nassert.match(code, /authorContainer\\.innerHTML\\s*\\+=\\s*`\\s*\\n?\\s*`\\s*;?/)\n```"
    },
    {
      "title": "Step 12",
      "description": "Inside the template literal, create a `div` element with the `id` set to the `index` from the `.forEach()` array method. Remember to use string interpolation to do this.\n\nAlso, add a `class` of `\"user-card\"` to the `div`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data);   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n--fcc-editable-region--\n    authorContainer.innerHTML += ``;\n--fcc-editable-region--\n  });\n};"
        }
      ],
      "testCode": "You should create a `div` element with the class `\"user-card\"`.\n\n```js\ndisplayAuthors([{author: \"Kolade\"}]);\nassert.include(document.querySelector('#author-container > div')?.className, 'user-card');\n```\n\nYour `div` element should have the `id` of `index`. Remember to use string interpolation to set the `id`.\n\n```js\ndisplayAuthors([{author: \"Naomi\"}]);\nassert.equal(document.querySelector('#author-container > div')?.id, '0');\n```\n\nYour `div` element should be empty.\n\n```js\nassert.equal(document.querySelector('#author-container > div')?.innerText, '');\n```"
    },
    {
      "title": "Step 13",
      "description": "Now you need to show some information about the author. First, show the author's name.\n\nCreate an `h2` tag with the `class` `\"author-name\"`. Then, interpolate `author` inside the `h2` tag. This is the author's name.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    console.log(data);   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      --fcc-editable-region--\n\n      --fcc-editable-region-- \n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should create an `h2` element within your `div` element.\n\n```js\ndisplayAuthors([{author: \"Kolade\"}]);\nassert.exists(document.querySelector('#author-container > div > h2'));\n```\n\nYour `h2` element should have a class set to `\"author-name\"`\n\n```js\ndisplayAuthors([{name: \"Jane\", height: 12}])\nassert.equal(document.querySelector('#author-container > div > h2')?.className, 'author-name');\n```\n\nYou should interpolate the `author` in your `h2` tag to show the authors' names\n\n```js\ndisplayAuthors([{author: \"Kolade\"}]);\nassert.equal(document.querySelector('#author-container > div > h2')?.innerText, 'Kolade');\n```"
    },
    {
      "title": "Step 14",
      "description": "To see the authors' names on the page, you need to call the `displayAuthors` function inside the second `.then()` method. But before that, you need to assign the author data to the empty `authorDataArr` array.\n\nFirst, remove your `console.log()` statement. Then, assign `data` to the `authorDataArr` variable.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    --fcc-editable-region--\n    console.log(data);\n\n    --fcc-editable-region--   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should remove the console log showing the `data`.\n\n```js\nassert.notMatch(code, /console\\.log\\(\\s*data\\s*\\)\\s*;?/)\n```\n\nYou should assign `data` to the `authorDataArr` variable\n\n```js\nassert.match(code, /authorDataArr\\s*=\\s*data\\s*;?/)\n```"
    },
    {
      "title": "Step 15",
      "description": "Now `authorDataArr` is the same as the `data` you logged to the console a while ago. Log `authorDataArr` to the console to confirm this.\n\nInside your `console.log()` statement, add the text `\"Author Data Array:\"` as the first argument and `authorDataArr` as the second argument. Use comma to separate the text from `authorDataArr`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n--fcc-editable-region--\n    authorDataArr = data;\n\n--fcc-editable-region--\n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should assign `data` to the `authorDataArr` variable\n\n```js\nassert.match(code, /authorDataArr\\s*=\\s*data\\s*;?/)\n```\n\nYou should have a console log with the text `\"Author Data Array:\"`.\n\n```js\nassert.match(code, /console\\.log\\(\\s*(\"|'|`)Author\\s+Data\\s+Array:\\s*\\1/)\n```\n\nYou should use comma to separate your `\"Author Data Array:\"` text and `authorDataArr`.\n\n```js\nassert.match(code, /console\\.log\\(\\s*(\"|'|`)Author\\s+Data\\s+Array:\\s*\\1\\s*,/)\n```\n\n`authorDataArr` should be the second argument of your console log statement.\n\n```js\nassert.match(code, /console\\.log\\(\\s*(\"|'|`)Author\\s+Data\\s+Array:\\s*\\1\\s*,\\s*authorDataArr\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 16",
      "description": "Now it's time to call the `displayAuthors` function. But again, you don't want to populate the page with all the authors at once. Instead, you can extract a portion of the authors with the `startingIndex` and `endingIndex` variables. The best method to do this is the `.slice()` array method.\n\nFirst, remove the console log statement showing `authorDataArr`. Then, call the `displayAuthors` function with the `authorDataArr` array and `.slice()`. Use the `startingIndex` variable for the starting point and the `endingIndex` variable for the ending point.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    --fcc-editable-region--\n    authorDataArr = data;\n    console.log(\"Author Data Array:\", authorDataArr);\n\n    --fcc-editable-region-- \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should assign `data` to the `authorDataArr` variable\n\n```js\nassert.match(code, /authorDataArr\\s*=\\s*data\\s*;?/)\n```\n\nYou should remove the console log statement showing `authorDataArr`\n\n```js\nassert.notMatch(code, /console\\.log\\(\\s*(\"|'|`)Author\\s+Data\\s+Array:\\s*\\1\\s*,\\s*authorDataArr\\s*\\)\\s*;?/)\n```\n\nYou should call your `displayAuthors` function.\n\n```js\nassert.match(code, /displayAuthors\\(/)\n```\n\nYou should call your `displayAuthors` function and pass in an argument of `authorDataArr.slice()`.\n\n```js\nassert.match(code, /displayAuthors\\(\\s*authorDataArr\\.slice\\(/)\n```\n\nThe first parameter of your `slice()` method should be `startingIndex`.\n\n```js\nassert.match(code, /displayAuthors\\(\\s*authorDataArr\\.slice\\(\\s*startingIndex/)\n```\n\nThe second parameter of your `slice()` method should be `endingIndex`.\n\n```js\nassert.match(code, /displayAuthors\\(\\s*authorDataArr\\.slice\\(\\s*startingIndex\\s*,\\s*endingIndex\\s*\\)\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 17",
      "description": "Now create an image tag and give it the `class` `\"user-img\"`. Use string interpolation to set the `src` attribute to the `image` you destructured earlier. Set the `alt` attribute to `author` followed by the text `\"avatar\"`. Make sure there is a space between the `author` variable and the word `\"avatar\"`, for example, `\"Quincy Larson avatar\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));\n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      --fcc-editable-region--\n\n      --fcc-editable-region--\n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should create an `img` element.\n\n```js\nconst retryingTest = (test, message, tries = 20) => {\n  if (tries < 1) return Promise.reject(message);\n  if (test()) return Promise.resolve();\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      retryingTest(test, message, tries - 1)\n        .then(resolve)\n        .catch(reject);\n    }, 1);\n  });\n};\n() => retryingTest(() => document.querySelector('img'), \"'img' element not found\");\n```\n\nYour `img` element should have the class `\"user-img\"`.\n\n```js\nassert.include(document.querySelector('img')?.className, \"user-img\");\n```\n\nYou should set the `src` attribute of your `img` element to `${image}`.\n\n```js\nassert.equal(document.querySelector('img')?.getAttribute('src'), authorDataArr[0].image);\n```\n\nYou should set the `alt` attribute of your `img` element to `${author} avatar`.\n\n```js\nassert.equal(document.querySelector('img')?.getAttribute('alt'), `${authorDataArr[0].author} avatar`);\n```"
    },
    {
      "title": "Step 18",
      "description": "The next thing you'll show are biographical details about the author. You can do this with `bio` that you destructured earlier.\n\nAdd a paragraph element with the `class` `\"bio\"`, then interpolate `bio` inside the paragraph element.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      --fcc-editable-region--\n\n      --fcc-editable-region--\n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should create a `p` element.\n\n```js\nconst retryingTest = (test, message, tries = 20) => {\n  if (tries < 1) return Promise.reject(message);\n  if (test()) return Promise.resolve();\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      retryingTest(test, message, tries - 1)\n        .then(resolve)\n        .catch(reject);\n    }, 1);\n  });\n};\n() => retryingTest(() => document.querySelector('p'), \"'p' element not found\");\n```\n\nYour `p` element should have the class `\"bio\"`\n\n```js\nassert.include(document.querySelector('p')?.className, 'bio');\n```\n\nYou should interpolate `bio` in your `p` element.\n\n```js\nassert.equal(document.querySelector('p')?.innerText, authorDataArr[0].bio);\n```"
    },
    {
      "title": "Step 19",
      "description": "Next, add a link to the author's page on freeCodeCamp News.\n\nAdd an anchor element with the `class` `\"author-link\"`, interpolate `url` as the value for the `href` attribute, and set `target` to `\"_blank\"`. For the text of the anchor element, interpolate `author` followed by the text `\"'s author page\"`. For example, `\"Quincy Larson's author page\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));   \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst displayAuthors = (authors) => {\n  authors.forEach( ({ author, image, url, bio }, index) =>\n  (authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <p class=\"bio\">${bio}</p>\n      --fcc-editable-region--\n\n      --fcc-editable-region--\n    </div>\n  `)\n  )\n};"
        }
      ],
      "testCode": "You should create an anchor element.\n\n```js\nconst retryingTest = (test, message, tries = 20) => {\n  if (tries < 1) return Promise.reject(message);\n  if (test()) return Promise.resolve();\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      retryingTest(test, message, tries - 1)\n        .then(resolve)\n        .catch(reject);\n    }, 1);\n  });\n};\n() => retryingTest(() => document.querySelector('a'), \"'a' element not found\");\n```\n\nYour anchor element should have the class `\"author-link\"`.\n\n```js\nassert.include(document.querySelector('a')?.className, \"author-link\");\n```\n\nYou should interpolate `url` as the value of your anchor's `href` attribute.\n\n```js\nassert.equal(document.querySelector('a')?.getAttribute('href'), authorDataArr[0].url);\n```\n\nYou should set the `target` attribute of your anchor element to `\"_blank\"`.\n\n```js\nassert.equal(document.querySelector('a')?.getAttribute('target'), '_blank');\n```\n\nYou should interpolate `author` followed by the text `\"'s author page\"` inside your anchor element.\n\n```js\nassert.equal(document.querySelector('a')?.textContent.trim(), `${authorDataArr[0].author}'s author page`);\n```"
    },
    {
      "title": "Step 20",
      "description": "Now you have everything you want to include in the UI. The next step is to make the `Load More Authors` button fetch more authors whenever it's clicked. You can do this by adding a `click` event to the button and carefully incrementing the `startingIndex` and `endingIndex` variables.\n\nCreate a `fetchMoreAuthors` function with the arrow function syntax. Don't put anything in it yet. Make sure you use curly braces because you'll have more than one expression inside the function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\n--fcc-editable-region--\n\n--fcc-editable-region--  \n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <p class=\"bio\">${bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author}'s author page</a>\n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should use `const` to create a `fetchMoreAuthors` function.\n\n```js\nassert.match(code, /const\\s+fetchMoreAuthors\\s*=\\s*/)\n```\n\n`fetchMoreAuthors` should be a function.\n\n```js\nassert.isFunction(fetchMoreAuthors)\n```\n\nYour `fetchMoreAuthors` function should not take any parameter.\n\n```js\nassert.match(code, /const\\s+fetchMoreAuthors\\s*=\\s*\\(\\s*\\)\\s*/)\n```\n\nYour `fetchMoreAuthors` function should use arrow syntax.\n\n```js\nassert.match(code, /const\\s+fetchMoreAuthors\\s*=\\s*\\(\\s*\\)\\s*=>\\s*/)\n```\n\nYour `fetchMoreAuthors` function should be empty.\n\n```js\nassert.match(code, /const\\s+fetchMoreAuthors\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*\\}/)\n```"
    },
    {
      "title": "Step 21",
      "description": "Inside the `fetchMoreAuthors` function, set the `startingIndex` and `endingIndex` variables to `+= 8` each.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst fetchMoreAuthors = () => {\n--fcc-editable-region--\n\n\n--fcc-editable-region--\n};\n\n\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <p class=\"bio\">${bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author}'s author page</a>\n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should set the `startingIndex` variable to `+=8`.\n\n```js\nassert.match(code, /startingIndex\\s*\\+=\\s*8\\s*;?/)\n```\n\nYou should set the `endingIndex` variable to `+=8`.\n\n```js\nassert.match(code, /endingIndex\\s*\\+=\\s*8\\s*;?/)\n```"
    },
    {
      "title": "Step 22",
      "description": "Now call the `displayAuthors` function with a portion of the author data just like you did before.\n\nIf you click the `Load More Authors` button after calling the function, it won't work. That's because you still have to add the `click` event listener to the button. You'll do that next.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst fetchMoreAuthors = () => {\n  startingIndex += 8;\n  endingIndex += 8;\n--fcc-editable-region--\n\n--fcc-editable-region--\n};\n\n\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <p class=\"bio\">${bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author}'s author page</a>\n    </div>\n  `;\n  });\n};"
        }
      ],
      "testCode": "You should call your `displayAuthors` function.\n\n```js\nconst afterAdd = code.split(\"endingIndex += 8;\")[1];\nassert.match(afterAdd, /displayAuthors\\(/)\n```\n\nYou should call your `displayAuthors` function and pass in an argument of `authorDataArr.slice()`.\n\n```js\nconst afterAdd = code.split(\"endingIndex += 8;\")[1];\nassert.match(afterAdd, /displayAuthors\\(\\s*authorDataArr\\.slice\\(/)\n```\n\nThe first argument of your `slice()` method should be `startingIndex`.\n\n```js\nconst afterAdd = code.split(\"endingIndex += 8;\")[1];\nassert.match(afterAdd, /displayAuthors\\(\\s*authorDataArr\\.slice\\(\\s*startingIndex/)\n```\n\nThe second argument of your `slice()` method should be `endingIndex`.\n\n```js\nconst afterAdd = code.split(\"endingIndex += 8;\")[1];\nassert.match(afterAdd, /displayAuthors\\(\\s*authorDataArr\\.slice\\(\\s*startingIndex\\s*,\\s*endingIndex\\s*\\)\\s*\\)/)\n```"
    },
    {
      "title": "Step 23",
      "description": "Remember that in step 1 you selected the `Load More Authors` button and assigned it to `loadMoreBtn`.\n\nUse `addEventListener` to add a `\"click\"` event listener to `loadMoreBtn`. Also, pass in a reference to the `fetchMoreAuthors` function to run whenever the button is clicked.\n\nAfter that, when you click the button you should see 8 more authors.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst fetchMoreAuthors = () => {\n  startingIndex += 8;\n  endingIndex += 8;\n\n  displayAuthors(authorDataArr.slice(startingIndex, endingIndex));\n};\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <p class=\"bio\">${bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author}'s author page</a>\n    </div>\n  `;\n  });\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `addEventListener()` method on your `loadMoreBtn` variable.\n\n```js\nassert.match(code, /loadMoreBtn\\.addEventListener\\(/)\n```\n\nYour event listener should listen for a `\"click\"` event.\n\n```js\nassert.match(code, /loadMoreBtn\\.addEventListener\\(\\s*('|\"|`)click\\1/)\n```\n\nYour event listener should take `fetchMoreAuthors` as the function to run.\n\n```js\nassert.match(code, /loadMoreBtn\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*fetchMoreAuthors\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 24",
      "description": "Your fCC Authors Page is now complete. But you could improve on a few things.\n\nFirst, if you click the `Load More Authors` button a couple of times, you'll see that it won't add more authors to the page. That's because you've reached the end of the authors list. For a better user experience, you should make it clear when there's no more data to display by disabling the button and changing its text. An `if` statement is the perfect tool for this.\n\nInside the `fetchMoreAuthors` function, write an `if` statement and set the condition to `authorDataArr.length <= endingIndex` – meaning there's no more data to load.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst fetchMoreAuthors = () => {\n  startingIndex += 8;\n  endingIndex += 8;\n\n  displayAuthors(authorDataArr.slice(startingIndex, endingIndex));\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n};\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <p class=\"bio\">${bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author}'s author page</a>\n    </div>\n  `;\n  });\n};\n\nloadMoreBtn.addEventListener('click', fetchMoreAuthors);"
        }
      ],
      "testCode": "You should have an `if` statement.\n\n```js\nassert.match(code, /if\\s*\\(/)\n```\n\nYour `if` statement should take in `authorDataArr.length <= endingIndex` as its condition.\n\n```js\nassert.match(code, /if\\s*\\(\\s*authorDataArr\\.length\\s*<=\\s*endingIndex\\s*\\)\\s*/)\n```\n\nYour `if` statement should be empty.\n\n```js\nassert.match(code, /if\\s*\\(\\s*authorDataArr\\.length\\s*<=\\s*endingIndex\\s*\\)\\s*\\{\\s*\\}/)\n```"
    },
    {
      "title": "Step 25",
      "description": "If this condition is met, disable the button by setting its `disabled` property to `true`. Also, set the `textContent` of the button to `\"No more data to load\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst fetchMoreAuthors = () => {\n  startingIndex += 8;\n  endingIndex += 8;\n\n  displayAuthors(authorDataArr.slice(startingIndex, endingIndex));\n  if (authorDataArr.length <= endingIndex) {\n    --fcc-editable-region--\n    \n    --fcc-editable-region--\n  }\n};\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <p class=\"bio\">${bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author}'s author page</a>\n    </div>\n  `;\n  });\n};\n\nloadMoreBtn.addEventListener('click', fetchMoreAuthors);"
        }
      ],
      "testCode": "You should set the `disabled` property of `loadMoreBtn` to `true`.\n\n```js\nassert.match(code, /loadMoreBtn\\.disabled\\s*=\\s*true\\s*;?/)\n```\n\nYou should set the `textContent` of `loadMoreBtn` to `\"No more data to load\"`.\n\n```js\nassert.match(code, /loadMoreBtn\\.textContent\\s*=\\s*('|\"|`)No\\s+more\\s+data\\s+to\\s+load\\1\\s*;?/)\n```"
    },
    {
      "title": "Step 26",
      "description": "Next, there's not a lot of separation between each author's name and image, and the rest of the details on the card. A divider will give the author cards a clear visual hierarchy.\n\nAdd a `div` element above the author's bio and give it the `class` `\"purple-divider\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst fetchMoreAuthors = () => {\n  startingIndex += 8;\n  endingIndex += 8;\n\n  displayAuthors(authorDataArr.slice(startingIndex, endingIndex));\n  if (authorDataArr.length <= endingIndex) {\n    loadMoreBtn.disabled = true;\n    loadMoreBtn.textContent = 'No more data to load';\n  }\n};\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      --fcc-editable-region--\n    \n      --fcc-editable-region--\n      <p class=\"bio\">${bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author}'s author page</a>\n    </div>\n  `;\n  });\n};\n\nloadMoreBtn.addEventListener('click', fetchMoreAuthors);"
        }
      ],
      "testCode": "You should create a `div` element before your `p` element.\n\n```js\nconst retryingTest = (test, message, tries = 20) => {\n  if (tries < 1) return Promise.reject(message);\n  if (test()) return Promise.resolve();\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      retryingTest(test, message, tries - 1)\n        .then(resolve)\n        .catch(reject);\n    }, 1);\n  });\n};\n() => retryingTest(() => document.querySelector('p')?.previousElementSibling?.tagName === 'DIV', \"'div' element not found\");\n```\n\nYour `div` element should have the `class` set to `\"purple-divider\"`.\n\n```js\nassert.include(document.querySelector('p')?.previousElementSibling?.className, 'purple-divider');\n```"
    },
    {
      "title": "Step 27",
      "description": "Some of the author bios are much longer than others. To give the cards a uniform look, you can extract the first 50 characters of each one and replace the rest with an ellipsis `(\"...\")`. Otherwise, you can show the entire bio.\n\nWithin the paragraph element, replace `bio` with a ternary operator. For the condition, check if the length of `bio` is greater than 50. If it is, use the `.slice()` method to extract the first 50 characters of `bio` and add an ellipsis at the end. Otherwise, show the full `bio`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    console.error(`There was an error: ${err}`);\n  });\n\nconst fetchMoreAuthors = () => {\n  startingIndex += 8;\n  endingIndex += 8;\n\n  displayAuthors(authorDataArr.slice(startingIndex, endingIndex));\n  if (authorDataArr.length <= endingIndex) {\n    loadMoreBtn.disabled = true;\n    loadMoreBtn.textContent = 'No more data to load';\n  }\n};\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <div class=\"purple-divider\"></div>\n      --fcc-editable-region--\n      <p class=\"bio\">${bio}</p>\n      --fcc-editable-region--\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author}'s author page</a>\n    </div>\n  `;\n  });\n};\n\nloadMoreBtn.addEventListener('click', fetchMoreAuthors);"
        }
      ],
      "testCode": "You should create a `p` element.\n\n```js\nassert.match(code, /<p\\s*/)\n```\n\nYour `p` element should have the class `bio`\n\n```js\nassert.match(code, /<p\\s*class=(\"|')bio\\1>/);\n```\n\nYou should check if the length of the `bio` text is greater than `50`. \n\n```js\nassert.match(code, /<p\\s*class=(\"|')bio\\1>\\s*\\$\\{\\s*bio\\.length\\s*>\\s*50/)\n```\n\nIf the `bio` text is greater than `50` characters, you should extract the first 50 characters with `slice()` and replace the rest with `\"...\"`. Don't forget that indexes are zero-based.\n\n```js\nassert.match(code, /<p\\s*class\\s*=\\s*(\"|')bio\\1\\s*>\\s*\\$\\{\\s*bio\\.length\\s*>\\s*50\\s*\\?\\s*(?:bio\\.slice\\(\\s*0\\s*,\\s*50\\s*\\)\\s*\\+\\s*(\"|')\\.\\.\\.\\2|`\\$\\{\\s*bio\\.slice\\(\\s*0\\s*,\\s*50\\s*\\)\\s*\\}\\.\\.\\.`)\\s*:/);\n```\n\nIf the `bio` text is less than 50 characters, use the `bio` text directly.\n\n```js\nassert.match(code, /<p\\s*class\\s*=\\s*(\"|')bio\\1\\s*>\\s*\\$\\{\\s*bio\\.length\\s*>\\s*50\\s*\\?\\s*(?:bio\\.slice\\(\\s*0\\s*,\\s*50\\s*\\)\\s*\\+\\s*(\"|')\\.\\.\\.\\2|`\\$\\{\\s*bio\\.slice\\(\\s*0\\s*,\\s*50\\s*\\)\\s*\\}\\.\\.\\.`)\\s*:\\s*bio\\s*\\}\\s*<\\/p>/);\n```"
    },
    {
      "title": "Step 28",
      "description": "Finally, what if there's an error and the author data fail to load? Then we need to show an error in the UI. That's exactly what the `.catch()` method is for – handling errors.\n\nInside the `.catch()`, remove the `console.error()` and set the `innerHTML` of the `authorContainer` to a `p` element with the `class` `\"error-msg\"` and text `\"There was an error loading the authors\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n    --fcc-editable-region--\n    console.error(`There was an error: ${err}`);\n\n    --fcc-editable-region--\n  });\n\nconst fetchMoreAuthors = () => {\n  startingIndex += 8;\n  endingIndex += 8;\n\n  displayAuthors(authorDataArr.slice(startingIndex, endingIndex));\n  if (authorDataArr.length <= endingIndex) {\n    loadMoreBtn.disabled = true;\n    loadMoreBtn.textContent = 'No more data to load';\n  }\n};\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\" />\n      <div class=\"purple-divider\"></div>\n      <p class=\"bio\">${bio.length > 50 ? bio.slice(0, 50) + '...' : bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author} author page</a>\n    </div>\n  `;\n  });\n};\n\nloadMoreBtn.addEventListener('click', fetchMoreAuthors);"
        }
      ],
      "testCode": "You should remove your `console.error` and its text.\n\n```js\nassert.notMatch(code, /console\\.error\\(\\s*`There\\s+was\\s+an\\s+error:\\s+\\$\\{err\\}`\\s*\\)\\s*;?/)\n```\n\nYou should access the `innerHTML` of `authorContainer` and set it to a `p` element. Don't forget to surround the `p` element with a template literal.\n\n\n```js\nassert.match(code, /authorContainer\\.innerHTML\\s*=\\s*(`|\"|')\\s*<p.*>.*<\\/p>\\s*\\1/)\n```\n\nYour `p` element should have the class `\"error-msg\"`.\n\n```js\nassert.match(code, /(`|\"|')\\s*<p\\s+class\\s*=\\s*(\"|')error-msg\\2>/)\n```\n\nYour `p` element should have the text `\"There was an error loading the authors\"`.\n\n```js\nassert.match(code, /(`|\"|')<p\\s+class\\s*=\\s*(\"|')error-msg\\2>\\s*There\\s+was\\s+an\\s+error\\s+loading\\s+the\\s+authors\\s*<\\/p>\\s*\\1\\s*;?/)\n```"
    },
    {
      "title": "Step 29",
      "description": "One more thing. If you keep clicking the `Load More Authors` button until there's no more data to load and the text changes to `\"No more data to load\"`, the cursor value is still `pointer`. Why not change the cursor value to `not-allowed` instead?\n\nAccess the `style` property of the `Load More Authors` button and set `cursor` to `\"not-allowed\"`.\n\nWith that, your author page is complete!",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp News Author Page</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1 class=\"title\">freeCodeCamp News Author Page</h1>\n\n    <main>\n      <div id=\"author-container\"></div>\n      <button class=\"btn\" id=\"load-more-btn\">Load More Authors</button>\n    </main>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #1b1b32;\n  --light-grey: #f5f6f7;\n  --dark-purple: #5a01a7;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  text-align: center;\n}\n\n.title {\n  color: var(--light-grey);\n  margin: 20px 0;\n}\n\n#author-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.user-card {\n  border-radius: 15px;\n  width: 300px;\n  height: 350px;\n  background-color: var(--light-grey);\n  margin: 20px;\n}\n\n.user-img {\n  width: 150px;\n  height: 150px;\n  object-fit: cover;\n}\n\n.purple-divider {\n  background-color: var(--dark-purple);\n  width: 100%;\n  height: 15px;\n}\n\n.author-name {\n  margin: 10px;\n}\n\n.bio {\n  margin: 20px;\n}\n\n.error-msg {\n  color: var(--light-grey);\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px;\n  color: var(--main-bg-color);\n  font-size: 14px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const authorContainer = document.getElementById('author-container');\nconst loadMoreBtn = document.getElementById('load-more-btn');\n\nlet startingIndex = 0;\nlet endingIndex = 8;\nlet authorDataArr = [];\n\nfetch('https://cdn.freecodecamp.org/curriculum/news-author-page/authors.json')\n  .then((res) => res.json())\n  .then((data) => {\n    authorDataArr = data;\n    displayAuthors(authorDataArr.slice(startingIndex, endingIndex));  \n  })\n  .catch((err) => {\n   authorContainer.innerHTML = '<p class=\"error-msg\">There was an error loading the authors</p>';\n  });\n\nconst fetchMoreAuthors = () => {\n  startingIndex += 8;\n  endingIndex += 8;\n\n  displayAuthors(authorDataArr.slice(startingIndex, endingIndex));\n  if (authorDataArr.length <= endingIndex) {\n    loadMoreBtn.disabled = true;\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n    loadMoreBtn.textContent = 'No more data to load';\n  }\n};\n\nconst displayAuthors = (authors) => {\n  authors.forEach(({ author, image, url, bio }, index) => {\n    authorContainer.innerHTML += `\n    <div id=\"${index}\" class=\"user-card\">\n      <h2 class=\"author-name\">${author}</h2>\n      <img class=\"user-img\" src=\"${image}\" alt=\"${author} avatar\">\n      <div class=\"purple-divider\"></div>\n      <p class=\"bio\">${bio.length > 50 ? bio.slice(0, 50) + '...' : bio}</p>\n      <a class=\"author-link\" href=\"${url}\" target=\"_blank\">${author} author page</a>\n    </div>\n  `;\n  });\n};\n\nloadMoreBtn.addEventListener('click', fetchMoreAuthors);"
        }
      ],
      "testCode": "You should access the `style` property of `loadMoreBtn` with a dot notation.\n\n```js\nassert.match(code, /loadMoreBtn\\.style/)\n```\n\nYou should access `cursor` from the `style` property with dot notation.\n\n```js\nassert.match(code, /loadMoreBtn\\.style\\.cursor/)\n```\n\nYou should set the value of the `cursor` property to `\"not-allowed\"`.\n\n```js\nassert.match(code, /loadMoreBtn\\.style\\.cursor\\s*=\\s*('|\"|`)not\\-allowed\\1\\s*;?/)\n```"
    }
  ]
}