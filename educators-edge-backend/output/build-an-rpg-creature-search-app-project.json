{
  "title": "Build An Rpg Creature Search App Project",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Build an RPG Creature Search App",
      "description": "In this project, you'll build an app that will search for creatures from an RPG game by name or ID and display the results to the user. To retrieve the creature data and images, you'll use freeCodeCamp's <a href=\"https://rpg-creature-api.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">RPG Creature API</a>.\n\n **Note:** The first 13 steps must be completed inside the `index.html` file. \n\n**Objective:** Build an app that is functionally similar to <a href=\"https://rpg-creature-search-app.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://rpg-creature-search-app.freecodecamp.rocks</a>.\n\n**User Stories:**\n\n1. You should have an `input` element with an `id` of `\"search-input\"`, and is required.\n1. You should have a `button` element with an `id` of `\"search-button\"`.\n1. You should have an element with an `id` of `\"creature-name\"`.\n1. You should have an element with an `id` of `\"creature-id\"`.\n1. You should have an element with an `id` of `\"weight\"`.\n1. You should have an element with an `id` of `\"height\"`.\n1. You should have an element with an `id` of `\"types\"`.\n1. You should have an element with an `id` of `\"hp\"`.\n1. You should have an element with an `id` of `\"attack\"`.\n1. You should have an element with an `id` of `\"defense\"`.\n1. You should have an element with an `id` of `\"special-attack\"`.\n1. You should have an element with an `id` of `\"special-defense\"`.\n1. You should have an element with an `id` of `\"speed\"`.\n1. When the `#search-input` element contains the value `Red` and the `#search-button` element is clicked, an alert should appear with the text `\"Creature not found\"`.\n1. When the `#search-input` element contains the value `Pyrolynx` and the `#search-button` element is clicked, the values in the `#creature-name`, `#creature-id`, `#weight`, `#height`, `#hp`, `#attack`, `#defense`, `#special-attack`, `#special-defense`, and `#speed` elements should be `PYROLYNX`, `#1` or `1`, `Weight: 42` or `42`, `Height: 32` or `32`, `65`, `80`, `50`, `90`, `55`, and `100`, respectively.\n1. When the `#search-input` element contains the value `Pyrolynx` and the `#search-button` element is clicked, a single element should be added within the `#types` element that contains the text `FIRE`. The `#types` element content should be cleared between searches.\n1. When the `#search-input` element contains the value `2` and the `#search-button` element is clicked, the values in the `#creature-name`, `#creature-id`, `#weight`, `#height`, `#hp`, `#attack`, `#defense`, `#special-attack`, `#special-defense`, and `#speed` elements should be `AQUOROC`, `#2` or `2`, `Weight: 220` or `220`, `Height: 53` or `53`, `85`, `90`, `120`, `60`, `70`, and `40`, respectively.\n1. When the `#search-input` element contains the value `2` and the `#search-button` element is clicked, two elements should be added within the `#types` element that contain text values `WATER` and `ROCK`, respectively. The `#types` element content should be cleared between searches.\n1. When the `#search-input` element contains an invalid creature name, and the `#search-button` element is clicked, an alert should appear with the text `\"Creature not found\"`.\n1. When the `#search-input` element contains a valid creature ID and the `#search-button` element is clicked, the UI should be filled with the correct data.\n\nFulfill the user stories and pass all the tests below to complete this project. Give it your own personal style. Happy Coding!\n\n**Note:** When running the tests there will be a slight delay. Please wait a few seconds to allow the tests to finish. Do not refresh the page before they are done.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": ""
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ""
        },
        {
          "name": "script.js",
          "language": "js",
          "content": ""
        }
      ],
      "testCode": "You should have an `input` element with an `id` of `\"search-input\"`. The `input` should be marked as required.\n\n```js\nconst el = document.getElementById('search-input');\nassert.strictEqual(el?.nodeName?.toLowerCase(), 'input');\nassert.isTrue(el?.required);\n```\n\nYou should have a `button` element with an `id` of `\"search-button\"`.\n\n```js\nconst el = document.getElementById('search-button');\nassert.strictEqual(el?.nodeName?.toLowerCase(), 'button');\n```\n\nYou should have an element with an `id` of `\"creature-name\"`.\n\n```js\nconst el = document.getElementById('creature-name');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"creature-id\"`.\n\n```js\nconst el = document.getElementById('creature-id');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"weight\"`.\n\n```js\nconst el = document.getElementById('weight');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"height\"`.\n\n```js\nconst el = document.getElementById('height');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"types\"`.\n\n```js\nconst el = document.getElementById('types');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"hp\"`.\n\n```js\nconst el = document.getElementById('hp');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"attack\"`.\n\n```js\nconst el = document.getElementById('attack');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"defense\"`.\n\n```js\nconst el = document.getElementById('defense');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"special-attack\"`.\n\n```js\nconst el = document.getElementById('special-attack');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"special-defense\"`.\n\n```js\nconst el = document.getElementById('special-defense');\nassert.exists(el);\n```\n\nYou should have an element with an `id` of `\"speed\"`.\n\n```js\nconst el = document.getElementById('speed');\nassert.exists(el);\n```\n\nWhen the `#search-input` element contains the value `Red` and the `#search-button` element is clicked, an alert should appear with the text `\"Creature not found\"`.\n\n```js\nasync () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    let alertMessage;\n    window.alert = (message) => alertMessage = message; // Override alert and store message\n    searchInput.value = 'Red';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://rpg-creature-api.freecodecamp.rocks/api/creature/red'); // Fetch from proxy to simulate network delay\n\n    if (!res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow the alert to trigger\n\n      assert.equal(alertMessage?.trim().replace(/[.,?!]+$/g, '').toLowerCase(), 'creature not found');\n    } else {\n      assert.fail();\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n```\n\nWhen the `#search-input` element contains the value `Pyrolynx` and the `#search-button` element is clicked, the values in the `#creature-name`, `#creature-id`, `#weight`, `#height`, `#hp`, `#attack`, `#defense`, `#special-attack`, `#special-defense`, and `#speed` elements should be `PYROLYNX`, `#1` or `1`, `Weight: 42` or `42`, `Height: 32` or `32`, `65`, `80`, `50`, `90`, `55`, and `100`, respectively.\n\n```js\nasync () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = 'Pyrolynx';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://rpg-creature-api.freecodecamp.rocks/api/creature/Pyrolynx'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n\n      const creatureName = document.getElementById('creature-name');\n      const creatureID = document.getElementById('creature-id');\n      const weight = document.getElementById('weight');\n      const height = document.getElementById('height');\n      const hp = document.getElementById('hp');\n      const attack = document.getElementById('attack');\n      const defense = document.getElementById('defense');\n      const specialAttack = document.getElementById('special-attack');\n      const specialDefense = document.getElementById('special-defense');\n      const speed = document.getElementById('speed');\n\n      assert.strictEqual(creatureName.innerText.trim().toLowerCase(), 'pyrolynx');\n      assert.include(['#1', '1'], creatureID.innerText.trim());\n      assert.include(['weight: 42', '42'], weight.innerText.trim().toLowerCase());\n      assert.include(['height: 32', '32'], height.innerText.trim().toLowerCase());\n      assert.strictEqual(hp.innerText.trim(), '65');\n      assert.strictEqual(attack.innerText.trim(), '80');\n      assert.strictEqual(defense.innerText.trim(), '50');\n      assert.strictEqual(specialAttack.innerText.trim(), '90');\n      assert.strictEqual(specialDefense.innerText.trim(), '55');\n      assert.strictEqual(speed.innerText.trim(), '100');\n    } else {\n      assert.fail();\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n```\n\nWhen the `#search-input` element contains the value `Pyrolynx` and the `#search-button` element is clicked, a single element should be added within the `#types` element that contains the text `FIRE`. The `#types` element content should be cleared between searches.\n\n```js\nasync () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = 'Pyrolynx';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://rpg-creature-api.freecodecamp.rocks/api/creature/Pyrolynx'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n\n      const typesEl = document.getElementById('types');\n\n      assert.lengthOf(typesEl.children, 1);\n      assert.strictEqual(typesEl?.children[0]?.innerText.trim().toLowerCase(), 'fire');\n    } else {\n      assert.fail();\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n```\n\nWhen the `#search-input` element contains the value `2` and the `#search-button` element is clicked, the values in the `#creature-name`, `#creature-id`, `#weight`, `#height`, `#hp`, `#attack`, `#defense`, `#special-attack`, `#special-defense`, and `#speed` elements should be `AQUOROC`, `#2` or `2`, `Weight: 220` or `220`, `Height: 53` or `53`, `85`, `90`, `120`, `60`, `70`, and `40`, respectively.\n\n```js\nasync () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = '2';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://rpg-creature-api.freecodecamp.rocks/api/creature/2'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n\n      const creatureName = document.getElementById('creature-name');\n      const creatureID = document.getElementById('creature-id');\n      const weight = document.getElementById('weight');\n      const height = document.getElementById('height');\n      const hp = document.getElementById('hp');\n      const attack = document.getElementById('attack');\n      const defense = document.getElementById('defense');\n      const specialAttack = document.getElementById('special-attack');\n      const specialDefense = document.getElementById('special-defense');\n      const speed = document.getElementById('speed');\n\n      assert.strictEqual(creatureName.innerText.trim().toLowerCase(), 'aquoroc');\n      assert.include(['#2', '2'], creatureID.innerText.trim());\n      assert.include(['weight: 220', '220'], weight.innerText.trim().toLowerCase());\n      assert.include(['height: 53', '53'], height.innerText.trim().toLowerCase());\n      assert.strictEqual(hp.innerText.trim(), '85');\n      assert.strictEqual(attack.innerText.trim(), '90');\n      assert.strictEqual(defense.innerText.trim(), '120');\n      assert.strictEqual(specialAttack.innerText.trim(), '60');\n      assert.strictEqual(specialDefense.innerText.trim(), '70');\n      assert.strictEqual(speed.innerText.trim(), '40');\n    } else {\n      assert.fail();\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n```\n\nWhen the `#search-input` element contains the value `2` and the `#search-button` element is clicked, two elements should be added within the `#types` element that contain text values `WATER` and `ROCK`, respectively. The `#types` element content should be cleared between searches.\n\n```js\nasync () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = '2';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://rpg-creature-api.freecodecamp.rocks/api/creature/2'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n      const targetTypes = ['water', 'rock'];\n\n      const typesEl = document.getElementById('types');\n\n      assert.lengthOf(typesEl.children, 2);\n      assert.sameMembers(['water', 'rock'], [...typesEl.children].map(el => el.innerText.trim().toLowerCase()));\n    } else {\n      assert.fail();\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n```\n\nWhen the `#search-input` element contains an invalid creature name and the `#search-button` element is clicked, an alert should appear with the text `\"Creature not found\"`.\n\n```js\nasync () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    let alertMessage;\n    window.alert = (message) => alertMessage = message; // Override alert and store message\n\n    const randomInvalidCreatureId = crypto.randomUUID().substring(0, 6);\n\n    searchInput.value = randomInvalidCreatureId;\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://rpg-creature-api.freecodecamp.rocks/api/creature/' + randomInvalidCreatureId); // Fetch from proxy to simulate network delay\n\n    if (!res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Additional delay to allow the alert to trigger\n\n      assert.equal(alertMessage?.trim().replace(/[.,?!]+$/g, '').toLowerCase(), 'creature not found');\n    } else {\n      assert.fail();\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n```\n\n\nWhen the `#search-input` element contains a valid creature ID and the `#search-button` element is clicked, the UI should be filled with the correct data.\n\n```js\nasync () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    let alertMessage;\n    window.alert = (message) => alertMessage = message; // Override alert and store message\n\n    const randomValidCreatureId = String(Math.floor(Math.random() * 20) + 1);\n\n    searchInput.value = randomValidCreatureId;\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://rpg-creature-api.freecodecamp.rocks/api/creature/' +  randomValidCreatureId); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Additional delay to allow UI to update\n     \n      const data = await res.json();\n      const typesEl = document.getElementById('types');\n      const actualTypes = data.types.map(typeSlot => typeSlot.name);\n\n      assert.lengthOf(typesEl.children, actualTypes.length);\n      assert.sameMembers(actualTypes, [...typesEl.children].map(el => el.innerText.trim().toLowerCase()));\n    } else {\n      assert.fail();\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n```\n\nWhen the search button is clicked, the app should send a fetch request to the correct endpoint for the creature name or ID.\n\n```js\nasync () => {\n  const spy = __helpers.spyOn(window, 'fetch');\n  const searchInput = document.getElementById('search-input');\n  const searchButton = document.getElementById('search-button');\n\n  searchInput.value = 'Pyrolynx';\n  searchInput.dispatchEvent(new Event('change'));\n  searchButton.click();\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  searchInput.value = '2';\n  searchInput.dispatchEvent(new Event('change'));\n  searchButton.click();\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  // Test with random valid ID\n  const randomValidCreatureId = String(Math.floor(Math.random() * 20) + 1);\n  searchInput.value = randomValidCreatureId;\n  searchInput.dispatchEvent(new Event('change'));\n  searchButton.click();\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  const calls = spy.calls.map((call) => call[0]);\n  assert.strictEqual(calls[0].toLowerCase(), 'https://rpg-creature-api.freecodecamp.rocks/api/creature/pyrolynx');\n  assert.strictEqual(calls[1], 'https://rpg-creature-api.freecodecamp.rocks/api/creature/2');\n  assert.strictEqual(calls[2], `https://rpg-creature-api.freecodecamp.rocks/api/creature/${randomValidCreatureId}`);\n};\n```"
    }
  ]
}