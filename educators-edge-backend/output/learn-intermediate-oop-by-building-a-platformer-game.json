{
  "title": "Learn Intermediate Oop By Building A Platformer Game",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Step 1",
      "description": "In this project, you are going to learn intermediate Object Oriented Programming principles by building a platformer game. All of the HTML and CSS have been provided for you. \n\nStart by using `document.getElementById()` to get the `#start-btn` and `#canvas` elements. \n\nStore them in `const` variables named `startBtn` and `canvas` respectively.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `document.getElementById()`.\n\n```js\nassert.match(code, /document\\.getElementById\\(/);\n```\n\nYou should get the element with the `id` of `start-btn`.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)start-btn\\1\\s*\\)/);\n```\n\nYou should use `const` to declare the variable called `startBtn` and assign it the `#start-btn` element. \n\n```js\nassert.match(code, /const\\s+startBtn\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)start-btn\\1\\s*\\)/);\n```\n\nYou should use the `document.getElementById()` method to get the `#canvas` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)canvas\\1\\s*\\)/);\n```\n\nYou should use `const` to declare the variable called `canvas` and assign it the `#canvas` element. \n\n```js\nassert.match(code, /const\\s+canvas\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)canvas\\1\\s*\\)/);\n```"
    },
    {
      "title": "Step 2",
      "description": "Next, you will need to use `document.querySelector` to get the `.start-screen` and `.checkpoint-screen` elements. \n\nStore them in `const` variables called `startScreen` and `checkpointScreen` respectively.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `document.querySelector()`.\n\n```js\nassert.match(code, /document\\.querySelector\\(/);\n```\n\nYou should get the element with the `class` of `start-screen`. Don't forget to include the `.` inside the `document.querySelector` method.\n\n```js\nassert.match(code, /document\\.querySelector\\(\\s*('|\"|`)\\.start-screen\\1\\s*\\)/);\n```\n\nYou should use `const` to declare the variable called `startScreen` and assign it the `.start-screen` element. \n\n```js\nassert.match(code, /const\\s+startScreen\\s*=\\s*document\\.querySelector\\(\\s*('|\"|`)\\.start-screen\\1\\s*\\)/);\n```\n\nYou should use the `document.querySelector()` method to get the `.checkpoint-screen` element.\n\n```js\nassert.match(code, /document\\.querySelector\\(\\s*('|\"|`)\\.checkpoint-screen\\1\\s*\\)/);\n```\n\nYou should use `const` to declare the variable called `checkpointScreen` and assign it the `.checkpoint-screen` element. \n\n```js\nassert.match(code, /const\\s+checkpointScreen\\s*=\\s*document\\.querySelector\\(\\s*('|\"|`)\\.checkpoint-screen\\1\\s*\\)/);\n```"
    },
    {
      "title": "Step 3",
      "description": "The next step is to target the paragraph element inside the `.checkpoint-screen` element. \n\nUse `document.querySelector` and the child combinator `>` to target the paragraph element. \n\nAssign that value to a `const` variable called `checkpointMessage`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the child combinator `>` to access the paragraph element inside the `.checkpoint-screen` element.\n\n```js\nassert.match(code, /document\\.querySelector\\(\\s*('|\"|`)\\.checkpoint-screen\\s+>\\s+p\\1\\s*\\)/);\n```\n\nYou should use `const` to declare the variable called `checkpointMessage` and assign it the `p` element inside the `.checkpoint-screen` element. \n\n```js\nassert.match(code, /const\\s+checkpointMessage\\s*=\\s*document\\.querySelector\\(\\s*('|\"|`)\\.checkpoint-screen\\s+>\\s+p\\1\\s*\\)/);\n```"
    },
    {
      "title": "Step 4",
      "description": "Before you can begin building out the functionality for the game, you will need to set up the ability to add 2D graphics.\n\nThe <dfn>Canvas API</dfn> can be used to create graphics in games using JavaScript and the HTML `canvas` element. \n\nYou will need to use the `getContext` method which will provide the context for where the graphics will be rendered.\n\n```js\ncanvas.getContext(\"2d\");\n```\n\nAssign that `getContext` method to a `const` variable called `ctx`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `canvas.getContext(\"2d\")` method. \n\n```js\nassert.match(code, /canvas\\.getContext\\(\\s*('|\"|`)2d\\1\\s*\\)/);\n```\n\nYou should use `const` to declare the variable called `ctx` and assign it `canvas.getContext(\"2d\")`.\n\n```js\nassert.match(code, /const\\s+ctx\\s*=\\s*canvas\\.getContext\\(\\s*('|\"|`)2d\\1\\s*\\)/);\n```"
    },
    {
      "title": "Step 5",
      "description": "The `canvas` element has a `width` property which is a positive number that represents the width of the canvas. \n\n```js\ncanvas.width\n```\n\nBelow your `const` declarations, append the `width` property to the `canvas` variable.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should append the `width` property to the `canvas` variable.\n\n```js\nassert.match(code, /canvas\\.width/);\n```"
    },
    {
      "title": "Step 6",
      "description": "The `innerWidth` property is a number that represents the interior width of the browser window.\n\nAssign `innerWidth` to `canvas.width`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\n\n--fcc-editable-region--\n\ncanvas.width\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should assign the `innerWidth` property to `canvas.width`.\n\n```js\nassert.match(code, /canvas\\.width\\s*=\\s*innerWidth/);\n```"
    },
    {
      "title": "Step 7",
      "description": "The `innerHeight` property is a number that represents the interior height of the browser window.\n\nBelow your `canvas.width`, append the `height` property to the `canvas` variable and assign it `innerHeight`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should append the `height` property to the `canvas` variable.\n\n```js\nassert.match(code, /canvas\\.height/);\n```\n\nYou should assign the `innerHeight` property to `canvas.height`.\n\n```js\nassert.match(code, /canvas\\.height\\s*=\\s*innerHeight/);\n```"
    },
    {
      "title": "Step 8",
      "description": "In your platformer game, the main player will need to jump between the different platforms. When the player jumps, you will need to apply gravity to bring them back down. \n\nCreate a new `const` variable called `gravity` and assign it the number `0.5`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should create a `const` variable called `gravity` and assign it `0.5`.\n\n```js\nassert.match(code, /const\\s+gravity\\s*=\\s*0?\\.5/);\n```"
    },
    {
      "title": "Step 9",
      "description": "In the game, the player will have the opportunity to cross different checkpoints. You will need to keep track of the status for the checkpoint collision detection.\n\nUse `let` to create a new variable called `isCheckpointCollisionDetectionActive` and assign it the value of `true`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `let` keyword to declare your `isCheckpointCollisionDetectionActive` variable.\n\n```js\nassert.match(code, /let\\s+isCheckpointCollisionDetectionActive/);\n```\n\n\nYou should assign the value of `true` to `isCheckpointCollisionDetectionActive` \n\n```js\nassert.match(code, /let\\s+isCheckpointCollisionDetectionActive\\s*=\\s*true/);\n```"
    },
    {
      "title": "Step 12",
      "description": "The next step is to define some characteristics for the main player of the game.\n\nStart by creating a new `class` called `Player`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "`Player` should be a class.\n\n```js\nassert(\n  typeof Player === 'function' \n);\n```\n\nThe `class` keyword should be used.\n\n```js\nassert.match(code, /^\\s*class/m);\n```\n\nYou should create a new class called `Player`\n\n```js\nassert.match(code, /class\\s+Player\\s*{\\s*}\\s*/);\n```"
    },
    {
      "title": "Step 13",
      "description": "Inside your `Player` class, you will need to define the player's position, velocity, width, and height values. All of these values will be defined inside the constructor method.\n\nCreate an empty constructor inside your `Player` class.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\n--fcc-editable-region--\n\nclass Player {\n\n}\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should add a `constructor` method to the `Player` class.\n\n```js\nassert.match(code,  /class\\s+Player\\s*\\{\\s*constructor\\s*\\(\\s*\\)\\s*/)\n```\n\nYour `constructor` method should be empty.\n\n```js\nassert.match(code,  /class\\s+Player\\s*\\{\\s*constructor\\s*\\(\\s*\\)\\s*\\{\\s*\\}\\s*\\}/)\n```"
    },
    {
      "title": "Step 14",
      "description": "Inside your constructor, use the `this` keyword to set the `position` property to an empty object.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\n--fcc-editable-region--\n\nclass Player {\n  constructor() {\n\n  }\n}\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `this` keyword to set the `position` property of your class to an empty object.\n\n```js\nassert.match(code, /this\\.position/);\nconst player = new Player();\nassert.isObject(player.position);\nassert.isEmpty(player.position);\n```"
    },
    {
      "title": "Step 15",
      "description": "Inside your `position` object, add a new key called `x` with a value of `proportionalSize(10)`. After that, add another key called `y` with a value of `proportionalSize(400)`.\n\nYou need to use the `proportionalSize` function here to make sure that the player's position is always proportional to the screen size. This is important because you want the player to be able to move around the screen regardless of the screen size.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\n--fcc-editable-region--\n\nclass Player {\n  constructor() {\n    this.position = {\n\n    }\n  }\n}\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should add a new key called `x` to your `position` object.\n\n```js\nassert.match(code, /this\\.position/);\nconst player = new Player();\n\nassert.property(player.position, 'x');\n```\n\nYou should set the value of `x` to `proportionalSize(10)`.\n\n```js\nassert.match(code, /this\\.position/);\nconst player = new Player();\n\nassert.propertyVal(player.position, 'x', proportionalSize(10));\n```\n\n\nYou should add a key called `y` to your `position` object.\n\n```js\nassert.match(code, /this\\.position/);\nconst player = new Player();\n\nassert.property(player.position, 'y');\n```\n\nYou should set the value of `y` to `proportionalSize(400)`.\n\n```js\nassert.match(code, /this\\.position/);\nconst player = new Player();\n\nassert.propertyVal(player.position, 'y', proportionalSize(400));\n```"
    },
    {
      "title": "Step 16",
      "description": "Below your `position` object, use the `this` keyword to set the `velocity` property to an object.\n\nInside that new `velocity` object, create a key called `x` with a value of `0` and a new key called `y` with a value of `0`.\n\nThe `velocity` property will be used to store the player's speed in the `x` and `y` directions.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\n--fcc-editable-region--\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n\n  }\n}\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `this` keyword to set the `velocity` property of your class to an object.\n\n```js\nassert.match(code, /this\\.velocity/);\nconst player = new Player();\nassert.isObject(player.velocity);\n```\n\nYou should add a new key called `x` with a value of 0 inside your `velocity` object.\n\n```js\nassert.match(code, /this\\.velocity/);\nconst player = new Player();\n\nassert(\n  (function (obj) {\n    if (\n      obj.hasOwnProperty('x') &&\n      obj.x !== undefined &&\n      typeof obj.x === 'number' &&\n      obj.x === 0\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(player.velocity)\n);\n```\n\n\nYou should add a key called `y` with a value of 0 inside your `velocity` object.\n\n\n```js\nassert.match(code, /this\\.velocity/);\nconst player = new Player();\n\nassert(\n  (function (obj) {\n    if (\n      obj.hasOwnProperty('y') &&\n      obj.y !== undefined &&\n      typeof obj.y === 'number' &&\n      obj.y === 0\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(player.velocity)\n);\n```"
    },
    {
      "title": "Step 17",
      "description": "Below your `velocity` object, use the `this` keyword to set the `width` property to `proportionalSize(40)`.\n\nBelow your `width` property, use the `this` keyword to set the `height` property to `proportionalSize(40)`.\n\nYou are using the `proportionalSize()` function here to set the `width` and `height` properties of your class to be proportional to the height of the screen.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\n--fcc-editable-region--\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n\n  }\n}\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `this` keyword to set the `width` property of your class to `proportionalSize(40)`.\n\n```js\nassert.match(code, /this\\.width/);\nconst player = new Player();\nassert.equal(player.width, proportionalSize(40));\n```\n\nYou should use the `this` keyword to set the `height` property of your class to `proportionalSize(40)`.\n\n```js\nassert.match(code, /this\\.height/);\nconst player = new Player();\nassert.equal(player.height, proportionalSize(40));\n```"
    },
    {
      "title": "Step 18",
      "description": "The next step is to create a `draw()` method, which will be responsible for creating the player's `width`, `height`, `position`, and fill color.\n\nBelow your constructor, create an empty `draw()` method.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  \n--fcc-editable-region--\n\n\n--fcc-editable-region--\n\n}"
        }
      ],
      "testCode": "Your `Player` class should have a `draw` method.\n\n```js\nconst player = new Player();\nassert.isFunction(player.draw);\n```\n\nYour `draw` method should be empty.\n\n```js\nconst player = new Player();\nassert.match(player.draw.toString(), /\\(\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 19",
      "description": "Now, you need to set the color for your player.\n\nInside the `draw()` method, assign the string `\"#99c9ff\"` to `ctx.fillStyle`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  \n--fcc-editable-region--\n\n  draw() {\n\n  }\n\n--fcc-editable-region--\n\n}"
        }
      ],
      "testCode": "Your `draw()` method should have a `ctx.fillStyle`.\n\n```js\nconst player = new Player();\nassert.match(player.draw.toString(), /ctx\\.fillStyle\\s*/);\n```\n\nYou should assign the string `\"#99c9ff\"` to `ctx.fillStyle`.\n\n```js\nconst player = new Player();\nassert.match(player.draw.toString(), /ctx\\.fillStyle\\s*=\\s*('|\"|`)#99c9ff\\1\\s*/);\n```"
    },
    {
      "title": "Step 20",
      "description": "Below your `ctx.fillStyle`, you need to create the player's shape by calling the `fillRect()` method on the `ctx` object which you instantiated earlier. \n\n```js\nfillRect(x, y, width, height)\n```\n\nInside the `fillRect()` method add the `this.position.x`, `this.position.y`, `this.width` and `this.height` values.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  \n--fcc-editable-region--\n\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n\n  }\n\n--fcc-editable-region--\n\n}"
        }
      ],
      "testCode": "Your `draw()` method should have a `ctx.fillRect`.\n\n```js\nconst player = new Player();\nassert.match(player.draw.toString(), /ctx\\.fillRect\\s*(\\s*)\\s*/);\n```\n\nYou should add the `this.position.x`, `this.position.y`, `this.width` and `this.height` values to the `fillRect()` method.\n\n```js\nconst player = new Player();\nassert.match(player.draw.toString(), /ctx\\.fillRect\\s*\\(\\s*this\\.position\\.x\\s*,\\s*this\\.position\\.y\\s*,\\s*this\\.width\\s*,\\s*this\\.height\\s*\\)\\s*/);\n```"
    },
    {
      "title": "Step 21",
      "description": "The next step is to create an `update()` method which will be responsible for updating the player's position and velocity as it moves throughout the game. \n\nBelow your `draw()` method, create an empty `update()` method.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n--fcc-editable-region--\n\n\n--fcc-editable-region--\n\n}"
        }
      ],
      "testCode": "Your `Player` class should have an `update` method.\n\n```js\nconst player = new Player();\nassert.isFunction(player.update);\n```\n\nYour `update` method should be empty.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /\\(\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 22",
      "description": "Inside the `update()` method, call the `draw()` method to ensure that the player is continually drawn on the screen as the game updates.\n\nDon't forget to include the `this` keyword.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n--fcc-editable-region--\n\n  update() {\n    \n  }\n\n--fcc-editable-region--\n\n}"
        }
      ],
      "testCode": "You should use the `this` keyword and call the `draw()` method.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.draw\\s*(\\s*)\\s*/);\n```"
    },
    {
      "title": "Step 23",
      "description": "When the player moves to the right, you will need to adjust its velocity.\n\nUse the addition assignment operator to add the velocity's `x` coordinate to the player's `x` position. \n\nDon't forget to include the `this` keyword for the velocity and position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n--fcc-editable-region--\n\n  update() {\n    this.draw();\n    \n  }\n\n--fcc-editable-region--\n\n}"
        }
      ],
      "testCode": "Your `update()` method should have the player's `x` position.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.position\\.x\\s*/);\n```\n\nYou should use the addition assignment operator `+=` to add the velocity's `x` coordinate to the player's `x` position. \n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.position\\.x\\s*\\+=\\s*this\\.velocity\\.x\\s*/);\n```"
    },
    {
      "title": "Step 24",
      "description": "When the player jumps up, you will need to add the logic for adjusting its velocity.\n\nUse the addition assignment operator to add the velocity's `y` coordinate to the player's `y` position. \n\nDon't forget to include the `this` keyword for the velocity and position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n--fcc-editable-region--\n\n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n\n  }\n\n--fcc-editable-region--\n\n}"
        }
      ],
      "testCode": "Your `update()` method should have player's `y` position.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.position\\.y\\s*/);\n```\n\nYou should use the addition assignment operator `+=` to add the velocity's `y` coordinate to the player's `y` position. \n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.position\\.y\\s*\\+=\\s*this\\.velocity\\.y\\s*/);\n```"
    },
    {
      "title": "Step 25",
      "description": "Right now, when the player jumps up, it is possible for it to move past the height of the canvas. \n\nTo fix that, you will need to add a condition to stop the player from falling past the height of the canvas.\n\nCreate an empty `if` statement that checks if the sum of the player's `y` position, height, and `y` velocity is less than or equal to the height of the canvas.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n--fcc-editable-region--\n\n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n  }\n\n--fcc-editable-region--\n\n}"
        }
      ],
      "testCode": "Your `update()` method should have an `if` statement.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /if\\s*\\(/);\n```\n\nYour condition for the `if` statement should check if the sum of the player's `y` position, height and `y` velocity is less than or equal to the height of the canvas.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /if\\s*\\(\\s*(?:this\\.position\\.y\\s*\\+\\s*this\\.height\\s*\\+\\s*this\\.velocity\\.y|this\\.position\\.y\\s*\\+\\s*this\\.velocity\\.y\\s*\\+\\s*this\\.height|this\\.height\\s*\\+\\s*this\\.position\\.y\\s*\\+\\s*this\\.velocity\\.y|this\\.height\\s*\\+\\s*this\\.velocity\\.y\\s*\\+\\s*this\\.position\\.y|this\\.velocity\\.y\\s*\\+\\s*this\\.position\\.y\\s*\\+\\s*this\\.height|this\\.velocity\\.y\\s*\\+\\s*this\\.height\\s*\\+\\s*this\\.position\\.y)\\s*<=\\s*canvas\\.height\\s*\\)/);\n```\n\nYour `if` statement should be empty.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /if\\s*\\(.*\\)\\s*{\\s*}/);\n```"
    },
    {
      "title": "Step 26",
      "description": "In the `if` statement, add another `if` statement to check if the player's `y` position is less than `0`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n--fcc-editable-region--\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n    \n    }\n\n--fcc-editable-region--\n\n  }\n\n}"
        }
      ],
      "testCode": "Your condition for the `if` statement should check if the player's `y` position is less than `0`.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.position\\.y\\s*<\\s*0/)\n```"
    },
    {
      "title": "Step 27",
      "description": "Inside the inner `if` statement, assign 0 to the player's `y` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n--fcc-editable-region--\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        \n      }\n    }\n\n--fcc-editable-region--\n\n  }\n\n}"
        }
      ],
      "testCode": "You should assign `0` to the player's `y` position. \n\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.position\\.y\\s*=\\s*0/);\n```"
    },
    {
      "title": "Step 28",
      "description": "Below the `this.position.y = 0`, assign `gravity` to the velocity's `y` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n--fcc-editable-region--\n\n      if (this.position.y < 0) {\n        this.position.y = 0;\n       \n      }\n      \n--fcc-editable-region--\n    }\n  }\n}"
        }
      ],
      "testCode": "You should assign `gravity` to the velocity's `y` position.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.velocity\\.y\\s*=\\s*gravity/);\n```"
    },
    {
      "title": "Step 29",
      "description": "Below your inner `if` statement, use the addition assignment operator to add `gravity` to the `y` velocity.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n--fcc-editable-region--\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      \n\n    }\n\n--fcc-editable-region--\n\n  }\n\n}"
        }
      ],
      "testCode": "You should use the addition assignment operator to add `gravity` to `this.velocity.y`.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.velocity\\.y\\s*\\+=\\s*gravity/);\n```"
    },
    {
      "title": "Step 30",
      "description": "Add an `else` clause that assigns `0` to `this.velocity.y`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n--fcc-editable-region--\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    }\n\n--fcc-editable-region--\n\n  }\n\n}"
        }
      ],
      "testCode": "You should add an `else` statement to your `update` function.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /else/);\n```\n\nYour `else` statement should come after your `if` statement.\n\n```js\nconst player = new Player();\nconst split = player.update.toString().split(/\\s|\\n/);\nassert.isAbove(split.indexOf('else'), split.indexOf('if'));\n```\n\nYou should add an `else` clause that assigns 0 to `this.velocity.y`.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.velocity\\.y\\s*=\\s*0\\s*;?/);\n```"
    },
    {
      "title": "Step 31",
      "description": "The final condition you need to add inside the `Player` class is to ensure that the player stays within the boundaries of the canvas screen and doesn't move too far off to the left.\n\nCreate an `if` statement, to check if the player's `x` position is less than the width.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n--fcc-editable-region--\n\n\n--fcc-editable-region--\n\n  }\n\n}"
        }
      ],
      "testCode": "Your condition should check if the player's `x` position is less than the width\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /if\\s*\\(\\s*this\\.position\\.x\\s*<\\s*this\\.width\\s*\\)\\s*{\\s*}/);\n```"
    },
    {
      "title": "Step 32",
      "description": "Inside the `if` statement, assign the width to the player's `x` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n--fcc-editable-region--\n    if (this.position.x < this.width) {\n      \n    }\n\n--fcc-editable-region--\n\n  }\n\n}"
        }
      ],
      "testCode": "Your `if` statement should contain an assignment of the width to the player's `x` position.\n\n```js\nconst player = new Player();\nassert.match(player.update.toString(), /this\\.position\\.x\\s*=\\s*this\\.width\\s*;?/);\n```"
    },
    {
      "title": "Step 35",
      "description": "The next step is to use the `new` keyword to create a new instance of the `Player` object and assign it to a new `const` variable called `player`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `const` to declare a `player` variable.\n\n```js\nassert.match(code, /const\\s+player\\s*=/);\n```\n\nYou should use the `new` keyword to instantiate a new `Player` object.\n\n```js\nassert.match(code, /new\\s+Player\\s*\\(\\s*\\)/);\n```\n\nYou should assign your new `Player` object to the `player` variable.\n\n```js\nassert.isTrue(player instanceof Player);\n```"
    },
    {
      "title": "Step 36",
      "description": "Now it is time to see your new player drawn on the screen.\n\nStart by creating an empty arrow function called `startGame`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "`startGame` should be a function\n\n```js\nassert.isFunction(startGame);\n```\n\n`startGame` should be an arrow function\n\n\n```js\n\nassert.match(code, /\\s*const\\s+startGame\\s*=\\s*\\(\\s*\\)\\s*=>\\s*{\\s*}\\s*;?/);\n\n```"
    },
    {
      "title": "Step 37",
      "description": "Inside your `startGame` function, you will need to display the `canvas` element and hide the `startScreen` container.\n\nUse `canvas.style.display` to change the display value to `\"block\"`. \n\nBelow that, use `startScreen.style.display` to change the display value to `\"none\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  \n}\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use dot notation to access the `style` property of `canvas`.\n\n```js\nassert.match(startGame.toString(), /canvas\\.style/);\n```\n\nYou should use dot notation to access the `display` property of the `style` property.\n\n```js\nassert.match(startGame.toString(), /canvas\\.style\\.display/);\n```\n\nYou should set the `canvas` `display` property to `\"block\"`.\n\n```js\nassert.match(startGame.toString(), /canvas\\.style\\.display\\s*=\\s*('|\")block\\1/);\n```\n\nYou should use dot notation to access the `style` property of `startScreen`.\n\n```js\nassert.match(startGame.toString(), /startScreen\\.style/);\n```\n\nYou should use dot notation to access the `display` property of the `style` property.\n\n```js\nassert.match(startGame.toString(), /startScreen\\.style\\.display/);\n```\n\nYou should set the `startScreen` `display` property to `\"none\"`.\n\n```js\nassert.match(startGame.toString(), /startScreen\\.style\\.display\\s*=\\s*('|\")none\\1/);\n```"
    },
    {
      "title": "Step 38",
      "description": "To visualize the player on the screen, you need to draw it on the canvas.\n\nInside the `startGame` function, call the `.draw()` method of your `player` object.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n\n}\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `.draw()` method of your `player` object.\n\n\n```js\nassert.match(code, /\\s*player\\s*\\.\\s*draw\\s*\\(\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 39",
      "description": "Now it's time to add the functionality for the start game button.\n\nAdd an `addEventListener` to the `startBtn` and pass in a `click` event and a reference to the `startGame` function.\n\nClick on the start game button, and you should see a light blue square on the screen which represents the main player.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\n--fcc-editable-region--\n\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `.addEventListener()` method of the `startBtn`.\n\n```js\nassert.match(code, /startBtn\\.addEventListener\\(/);\n```\n\nYou should pass `click` as the first argument to the `.addEventListener()` method.\n\n```js\nassert.match(code, /startBtn\\.addEventListener\\(\\s*('|\")click\\1\\s*/);\n```\n\nYou should pass a reference to `startGame` as the second argument to the `.addEventListener()` method.\n\n```js\nassert.match(code, /startBtn\\.addEventListener\\(\\s*('|\")click\\1\\s*,\\s*startGame(?!\\s*\\()\\s*/);\n```"
    },
    {
      "title": "Step 40",
      "description": "Now that you can see the player on the screen, it is time to start adding the functionality for moving the player across the screen. \n\nCreate a new empty arrow function called `animate`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should add a new arrow function called `animate`.\n\n```js\n\nassert.match(code, /\\s*const\\s+animate\\s*=\\s*\\(\\s*\\)\\s*=>\\s*{\\s*}\\s*;?/);\n\n```"
    },
    {
      "title": "Step 41",
      "description": "The <dfn>requestAnimationFrame()</dfn> web API, takes in a callback and is used to update the animation on the screen. The `animate` function will be responsible for updating the player's position and continually drawing it on the canvas. \n\nInside the `animate` function, call the `requestAnimationFrame()` API and pass `animate` as the argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst animate = () => {\n\n}\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should call the `requestAnimationFrame()` API and pass in `animate` for the argument.\n\n```js\nassert.match(code, /\\s*requestAnimationFrame\\s*\\(\\s*animate\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 42",
      "description": "As the player moves through the game, you will need to clear the canvas before rendering the next frame of the animation. \n\nYou can use the <dfn>clearRect()</dfn> Web API to accomplish this. It takes in an `x`, `y`, `width`, and `height` arguments.\n\nBelow your `requestAnimationFrame`, call the `clearRect()` method on the `ctx` variable and pass in `0, 0, canvas.width, canvas.height` as the arguments.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n\n}\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should call the `clearRect()` method on the `ctx` variable.\n\n```js\nassert.match(code, /\\s*ctx\\s*\\.\\s*clearRect\\s*\\([^)]*\\)\\s*;?/);\n```\n\nYou should pass in `0, 0, canvas.width, canvas.height` for the arguments of the `clearRect()` method.\n\n```js\nassert.match(code, /\\s*ctx\\s*\\.\\s*clearRect\\s*\\(\\s*0\\s*,\\s*0\\s*,\\s*canvas\\s*\\.\\s*width\\s*,\\s*canvas\\s*\\.\\s*height\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 43",
      "description": "The next step is to update the player's position as it moves throughout the game.\n\nBelow your `ctx.clearRect()`, call the `update()` method on the player.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n}\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should call the `update()` method on the player.\n\n```js\nassert.match(code, /\\s*player\\s*\\.\\s*update\\s*\\(\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 44",
      "description": "To manage the player's movement in the game, you will need to monitor when the left and right arrow keys are pressed.\n\nCreate a new `const` variable called `keys` and assign it an empty object.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n}\n\n--fcc-editable-region--\n\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should create a new `const` variable called `keys`.\n\n```js\nassert.match(code, /\\s*const\\s+keys/);\n```\n\nYou should assign an empty object to the `keys` variable.\n\n```js\nassert.match(code, /\\s*const\\s+keys\\s*=\\s*{\\s*}\\s*;?/);\n```"
    },
    {
      "title": "Step 45",
      "description": "Inside the `keys` object, add a new key called `rightKey` and assign it an object with the key-value pair of `pressed: false`.\n\nBelow the `rightKey` object, create a `leftKey` object and assign it an object with the key-value pair of `pressed: false`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n}\n\n--fcc-editable-region--\n\nconst keys = {\n\n}\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "Your `keys` object should have a `rightKey` property.\n\n```js\nassert.property(keys, 'rightKey');\n```\n\nYour `rightKey` value should be an object.\n\n```js\nassert.isObject(keys.rightKey)\n```\n\nYour `rightKey` object should have a `pressed` key.\n\n```js\nassert.property(keys.rightKey, 'pressed');\n```\n\nYou should set `false` to the `pressed` key of the `rightKey` object.\n\n```js\nassert.equal(keys.rightKey.pressed, false);\n```\n\nYour `leftKey` value should be an object.\n\n```js\nassert.isObject(keys.leftKey)\n```\n\nYour `leftKey` object should have a `pressed` key.\n\n```js\nassert.property(keys.leftKey, 'pressed');\n```\n\nYou should set `false` to the `pressed` key of the `leftKey` object.\n\n```js\nassert.equal(keys.leftKey.pressed, false);\n```"
    },
    {
      "title": "Step 46",
      "description": "The next step is to add the logic for increasing or decreasing a player's velocity based on if they move to the left or right of the screen. \n\nInside the `animate` function, create an `if` statement where the condition checks if the right key was pressed and the player's `x` position is less than `proportionalSize(400)`.\n\nYou need to use the `proportionalSize` function here to make sure the player's `x` position is always proportional to the screen size.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n}\n\n--fcc-editable-region--\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should have an `if` statement that checks if the right key was pressed and the player's `x` position is less than `proportionalSize(400)`. Remember that the `this` keyword should not be used here because that is only for the `Player` class and not for the `player` object.\n\n```js\nassert.match(animate.toString(), /keys\\.rightKey\\.(pressed|pressed\\s*===\\s*true)\\s*&&\\s*player\\.position\\.x\\s*<\\s*proportionalSize\\(\\s*400\\s*\\)/);\n```"
    },
    {
      "title": "Step 47",
      "description": "Inside the `if` statement, assign the number `5` to the player's `x` velocity.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  --fcc-editable-region--\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n\n  }\n\n  --fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should assign the number `5` to the player's `x` velocity.\n\n```js\nassert.match(animate.toString(), /player\\.velocity\\.x\\s*=\\s*5\\s*;?/);\n```"
    },
    {
      "title": "Step 48",
      "description": "Add an `else if` statement where the condition checks if the left key was pressed and the player's `x` position is greater than `proportionalSize(100)`. You need to use the `proportionalSize` function here to make sure the player's `x` position is always proportional to the screen size. \n\nInside the `else if` statement, assign the number `-5` to the player's `x` velocity.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n--fcc-editable-region--\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  }\n\n--fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should add an `else if` statement to your `animate` function.\n\n```js\nassert.match(animate.toString(), /else\\s+if/);\n```\n\nYou should check if the left key was pressed and if the player's `x` position is greater than `proportionalSize(100)`.\n\n```js\nassert.match(animate.toString(), /keys\\.leftKey\\.pressed\\s*&&\\s*player\\.position\\.x\\s*>\\s*proportionalSize\\(\\s*100\\s*\\)/);\n```\n\nYou should assign the number `-5` to the player's `x` velocity inside the `else if`.\n\n```js\nassert.match(animate.toString(), /player\\.velocity\\.x\\s*=\\s*-5\\s*;?/);\n```"
    },
    {
      "title": "Step 49",
      "description": "Add an `else` clause that assigns the number `0` to the player's `x` velocity.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n--fcc-editable-region--\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  }\n\n--fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should add an `else` statement to your `animate` function.\n\n```js\nassert.match(animate.toString(), /\\}\\s*else\\s*\\{/);\n```\n\nYour `else` statement should come after your `else if` statement.\n\n```js\nconst elseIfMatch = animate.toString().match(/else\\s*if/);\nconst elseMatch = animate.toString().match(/\\}\\s*else\\s\\{/);\nassert.isBelow(elseIfMatch?.index, elseMatch?.index);\n```\n\nYou should include an `else` clause that assigns the number `0` to the player's `x` velocity.\n\n```js\nassert.match(animate.toString(), /else\\s*\\{\\s*player\\.velocity\\.x\\s*=\\s*0\\s*;?/);\n```"
    },
    {
      "title": "Step 50",
      "description": "The next step is to add the functionality that will be responsible for moving the player across the screen. \n\nCreate a new arrow function called `movePlayer` that has three parameters called `key`, `xVelocity`, `isPressed`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\n--fcc-editable-region--\n\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should declare a `movePlayer` function.\n\n```js\nassert.isFunction(movePlayer);\n```\n\nYour `movePlayer` function should take the parameters of `key`, `xVelocity`, and `isPressed`.\n\n```js\nassert.match(movePlayer.toString(), /\\(\\s*key\\s*,\\s*xVelocity\\s*,\\s*isPressed\\s*\\)/);\n```\n\nYour `movePlayer` function should be empty.\n\n```js\nassert.match(movePlayer.toString(), /\\(\\s*key\\s*,\\s*xVelocity\\s*,\\s*isPressed\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 51",
      "description": "In the game, the player will interact with different checkpoints. If the `isCheckpointCollisionDetectionActive` is false, then you will need to stop the player's movements on the `x` and `y` axes.\n\nStart by creating an `if` statement where the condition checks if the `isCheckpointCollisionDetectionActive` is false.\n\nRemember that you can use the `!` operator to check if the variable is false.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\n--fcc-editable-region--\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n\n}\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should add an `if` statement to your `movePlayer` function.\n\n```js\nassert.match(movePlayer.toString(), /if\\s*\\(/);\n```\n\nYou should check if the `isCheckpointCollisionDetectionActive` variable is false.\n\n```js\nassert.match(\n  movePlayer.toString(),\n  /if\\s*\\(\\s*(?:!isCheckpointCollisionDetectionActive|isCheckpointCollisionDetectionActive\\s*(?:===|==)\\s*false)\\s*\\)\\s*\\{/\n);\n\n```"
    },
    {
      "title": "Step 52",
      "description": "Inside the `if` statement, set the player's `x` velocity to `0` and the player's `y` velocity to `0`.\n\nBelow that, add a `return` statement.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\n--fcc-editable-region--\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n\n  }\n}\n\n--fcc-editable-region--\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should set the player's `x` velocity to `0`. \n\n```js\nassert.match(movePlayer.toString(), /player\\.velocity\\.x\\s*=\\s*0\\s*;?/);\n```\n\nYou should set the player's `y` velocity to `0`. \n\n```js\nassert.match(movePlayer.toString(), /player\\.velocity\\.y\\s*=\\s*0\\s*;?/);\n```\n\nYou should have a `return` statement inside the `if` statement.\n\n```js\nassert.match(movePlayer.toString(), /return\\s*;?/);\n```"
    },
    {
      "title": "Step 53",
      "description": "Below the `if` statement, create a `switch` statement with a value of `key`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  --fcc-editable-region--\n\n\n  --fcc-editable-region--\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should use a `switch` statement.\n\n```js\nassert.match(code, /switch/);\n```\n\nYour `switch` statement should have a value of `key`.\n\n```js\nassert.match(code, /switch\\s*\\(\\s*key\\s*\\)/);\n```\n\nYour `switch` statement should be empty.\n\n```js\nassert.match(code, /\\s*switch\\s*\\(\\s*key\\s*\\)\\s*{\\s*}/);\n```"
    },
    {
      "title": "Step 54",
      "description": "The first case you will want to add is when the left arrow key is pressed.\n\nInside the `switch` statement, add a new case called `\"ArrowLeft\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n--fcc-editable-region--\n\n  switch (key) {\n\n  }\n\n--fcc-editable-region--\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "Your switch statement should have a case called `\"ArrowLeft\"`.\n\n```js\nassert.match(code, /switch\\s*\\(\\s*key\\s*\\)\\s*{\\s*case\\s*('|\")ArrowLeft\\1\\s*:\\s*/);\n```"
    },
    {
      "title": "Step 55",
      "description": "Inside the `case` clause, assign `isPressed` to `keys.leftKey.pressed`. \n\nBelow that, add an `if` statement that checks if `xVelocity` is equal to 0. If so, assign the `xVelocity` to `player.velocity.x`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n--fcc-editable-region--\n\n  switch (key) {\n    case \"ArrowLeft\":\n\n  }\n\n--fcc-editable-region--\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should assign `isPressed` to `keys.leftKey.pressed`.\n\n```js\nassert.match(code, /s*keys\\.leftKey\\.pressed\\s*=\\s*isPressed\\s*;?/);\n```\n\nYou should have an `if` statement that checks if `xVelocity` is equal to 0.\n\n```js\nassert.match(code, /if\\s*\\(\\s*xVelocity\\s*===\\s*0\\s*\\)\\s*{\\s*/);\n```\n\nYour `if` statement should assign `player.velocity.x` to `xVelocity`.\n\n```js\nassert.match(code, /player\\.velocity\\.x\\s*=\\s*xVelocity\\s*;?/);\n```"
    },
    {
      "title": "Step 56",
      "description": "Below your `if` statement, use the subtraction assignment operator to subtract the `xVelocity` from `player.velocity.x`. \n\nTo close out this case, make sure to add a `break` statement.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n--fcc-editable-region--\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      \n  }\n\n--fcc-editable-region--\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should use the subtraction assignment operator to subtract the `xVelocity` from `player.velocity.x`.\n\n```js\nassert.match(code, /player\\.velocity\\.x\\s*-=\\s*xVelocity\\s*;?/);\n```\n\nYour case should have a `break` statement.\n\n```js\nassert.match(code, /break\\s*;?/);\n```"
    },
    {
      "title": "Step 57",
      "description": "The player can jump up by using the up arrow key or the spacebar. \n\nAdd three new cases for `\"ArrowUp\"`, `\" \"`, and `\"Spacebar\"`. Remember that you can group cases together when they share the same operation. \n\nInside those cases, use the subtraction assignment operator to subtract `8` from `player.velocity.y`.\n\nTo close out these cases, make sure to add a `break` statement.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n--fcc-editable-region--\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    \n  }\n\n--fcc-editable-region--\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should add a new `case` clause for `\"ArrowUp\"` inside your `switch` statement.\n\n```js\nassert.match(code, /\\s*case\\s*('|\"|`)\\s*ArrowUp\\s*\\1\\s*:\\s*/)\n```\n\nYou should add a new `case` clause for `\" \"` inside your `switch` statement.\n\n```js\nassert.match(code, /\\s*case\\s*('|\"|`)\\s\\1\\s*:\\s*/);\n```\n\nYou should add a new `case` clause for `\"Spacebar\"` inside your `switch` statement.\n\n```js\nassert.match(code, /\\s*case\\s*('|\"|`)\\s*Spacebar\\s*\\1\\s*:\\s*/)\n```\n\nYou should use the subtraction assignment operator to subtract 8 from `player.velocity.y`.\n\n```js\nassert.match(code, /player\\.velocity\\.y\\s*-=\\s*8\\s*;?/);\n```"
    },
    {
      "title": "Step 58",
      "description": "The last case you will need to add will be for `\"ArrowRight\"`.\n\nInside that case, assign `isPressed` to `keys.rightKey.pressed`.\n\nAdd an if statement that checks if `xVelocity` is equal to 0. If so, assign the `xVelocity` to `player.velocity.x`.\n\nBelow that `if` statement, use the addition assignment operator to assign the `xVelocity` to `player.velocity.x`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n--fcc-editable-region--\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    \n  }\n\n--fcc-editable-region--\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);"
        }
      ],
      "testCode": "You should have a `case` for \"ArrowRight\".\n\n```js\nassert.match(code, /case\\s*('|\")ArrowRight\\1\\s*:\\s*/);\n```\n\nYou need to assign `isPressed` to `keys.rightKey.pressed`.\n\n```js\nassert.match(code, /\\s*keys\\.rightKey\\.pressed\\s*=\\s*isPressed\\s*;?/);\n```\n\nYou need to add an `if` statement that checks if `xVelocity` is equal to 0.\n\n```js\nassert.lengthOf(code.match(/if\\s*\\(\\s*xVelocity\\s*===\\s*0\\s*\\)\\s*{\\s*/g), 2);\n```\n\nYou need to assign the `xVelocity` to `player.velocity.x`.\n\n```js\nassert.lengthOf(code.match(/\\s*player\\.velocity\\.x\\s*=\\s*xVelocity\\s*;?/g), 2);\n```\n\nYou need to use the addition assignment operator to assign the `xVelocity` to `player.velocity.x`.\n\n```js\nassert.match(code, /\\s*player\\.velocity\\.x\\s*\\+=\\s*xVelocity\\s*;?/);\n```"
    },
    {
      "title": "Step 59",
      "description": "Now it is time to add the event listeners that will be responsible for calling the `movePlayer` function.\n\nStart by adding an `addEventListener` to the global `window` object. \n\nFor the arguments, pass in the `keydown` event and an arrow function that uses the destructuring assignment to get the `key` property from the `event` object in the event listener parameter. \n\nHere is the syntax for using the destructuring assignment in the parameter list of the arrow function:\n\n```js\nbtn.addEventListener('click', ({ target }) => {\n  console.log(target);\n});\n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You need to add an `addEventListener` to the global `window` object.\n\n```js\nassert.match(code, /window\\.addEventListener\\s*\\(\\s*.*\\s*\\)/);\n```\n\nYour event listener should listen for the `keydown` event.\n\n```js\nassert.match(code, /window\\.addEventListener\\s*\\(\\s*('|\")keydown\\1\\s*,\\s*.*\\s*\\)/);\n\n```\n\nYou should use the destructuring assignment to get the `key` property from the `event` object.\n\n```js\nassert.match(code, /window\\.addEventListener\\s*\\(\\s*('|\")keydown\\1\\s*,\\s*\\(\\s*{\\s*key\\s*}\\s*\\)\\s*=>\\s*{\\s*}\\s*\\)/);\n```"
    },
    {
      "title": "Step 60",
      "description": "Inside the arrow function, call the `movePlayer` function and pass in `key`, `8`, and `true` as arguments.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\n--fcc-editable-region--\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  \n});\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `movePlayer` function.\n\n```js\nassert.match(code, /movePlayer\\s*\\(.*\\)/);\n```\n\nYou should pass in `key`, `8`, and `true` as arguments to the `movePlayer` function.\n\n```js\nassert.match(code, /movePlayer\\s*\\(\\s*key\\s*,\\s*8\\s*,\\s*true\\s*\\)/);  \n```"
    },
    {
      "title": "Step 61",
      "description": "Add another `addEventListener` to the global `window` object and pass in the `keyup` event and use destructuring to pass in the `key` property from the event.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should have an `addEventListener` that listens for the `keyup` event.\n\n```js\nassert.match(code, /window\\.addEventListener\\s*\\(\\s*('|\")keyup\\1\\s*,\\s*.*\\s*\\)/);\n```\n\nYou should use the destructuring assignment to get the `key` property from the `event` object.\n\n```js\nassert.match(code, /window\\.addEventListener\\s*\\(\\s*('|\")keyup\\1\\s*,\\s*\\(\\s*{\\s*key\\s*}\\s*\\)\\s*=>\\s*{\\s*}\\s*\\)/);\n```"
    },
    {
      "title": "Step 62",
      "description": "Inside the callback function, call the `movePlayer` function and pass in `key`, `0`, and `false` as arguments.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  player.draw();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\n--fcc-editable-region--\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  \n});\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `movePlayer` function.\n\n```js\nassert.match(code, /movePlayer\\s*\\(.*\\).+movePlayer\\s*\\(.*\\)/s);\n```\n\nYou should pass in `key`, 0 and `false` as arguments.\n\n```js\nassert.match(code, /movePlayer\\s*\\(\\s*key\\s*,\\s*0\\s*,\\s*false\\s*\\)/);\n```"
    },
    {
      "title": "Step 63",
      "description": "Before you can start moving your player across the screen, you will need to use the `animate` function.\n\nInside the `startGame` function, delete `player.draw()` and call the `animate` function.\n\nClick the Start Game button and use the left and right arrow keys to move the player across the screen. You can also use the spacebar or the up arrow key to jump up.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nconst player = new Player();\n\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n\n  --fcc-editable-region--\n\n  player.draw();\n\n  --fcc-editable-region--\n}\n\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should delete the `player.draw()` method call.\n\n```js\nconst code = startGame.toString();\nassert.notMatch(code, /player\\.draw\\s*\\(\\s*\\)\\s*;?/);\n```\n\nYou should call the `animate` function.\n\n```js\nconst code = startGame.toString();\nassert.match(code, /animate\\s*\\(\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 64",
      "description": "The next step is to create the platforms and platform logic.\n\nStart by creating a new `Platform` class.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should create a new `Platform` class.\n\n```js\nassert.match(code, /class\\s+Platform\\s+{/);\n```"
    },
    {
      "title": "Step 65",
      "description": "Inside the `Platform` class, create a constructor that takes in the `x` and `y` coordinates.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\n--fcc-editable-region--\n\nclass Platform {\n\n}\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a constructor that takes in the `x` and `y` coordinates.\n\n```js\nassert.match(code, /constructor\\s*\\(\\s*x\\s*,\\s*y\\s*\\)\\s*{\\s*}/);\n```"
    },
    {
      "title": "Step 66",
      "description": "When working with objects where the property name and value are the same, you can use the shorthand property name syntax. This syntax allows you to omit the property value if it is the same as the property name.\n\n```js\n// using shorthand property name syntax\nobj = {\n  a, b, c\n}\n```\n\nThe following code is the same as:\n\n```js\nobj = {\n  a: a,\n  b: b,\n  c: c\n}\n```\n\nInside the constructor,  add `this.position` and assign it an object with the `x` and `y` coordinates. Make sure to use the shorthand property syntax .",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\n--fcc-editable-region--\n\nclass Platform {\n  constructor(x, y) {\n\n  }\n}\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `this.position` property.\n\n```js\nassert.match(Platform.toString(), /this\\.position\\s*;?/);\n```\n\nThe `this.position` property should be an object with the `x` and `y` coordinates. Make sure to use the shorthand property syntax.\n\n```js\nassert.match(Platform.toString(), /this\\.position\\s*=\\s*\\{\\s*x\\s*:\\s*x\\s*,\\s*y\\s*:\\s*y\\s*,?\\s*\\}\\s*;?/);\nassert.match(code, /this\\.position\\s*=\\s*\\{\\s*x\\s*,\\s*y\\s*,?\\s*\\}/);\n```"
    },
    {
      "title": "Step 67",
      "description": "Next, add a `width` property to the constructor and assign it the number 200.\n\nDon't forget to use the `this` keyword to access the properties.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\n--fcc-editable-region--\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n\n  }\n}\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `width` property and assign it the number 200.\n\n```js\nassert.match(code, /this\\.width\\s*=\\s*200\\s*;?/);\n```"
    },
    {
      "title": "Step 68",
      "description": "Below that, add a `height` property and assign it the number `proportionalSize(40)`. You need to use the `proportionalSize()` function to make sure the `height` is proportional to the screen size.\n\nRemember to use the `this` keyword to access the properties.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\n--fcc-editable-region--\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n\n  }\n}\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `height` property.\n\n```js\nconst splitter = code.split(\"if (this.position.x < this.width) {\")\nassert.match(splitter[1], /this\\.height\\s*=\\s*proportionalSize\\(\\s*\\d+\\s*\\)\\s*;?/);\n```\n\nYou should assign `proportionalSize(40)` to the `height` property.\n\n```js\nconst splitter = code.split(\"if (this.position.x < this.width) {\")\nassert.match(splitter[1], /this\\.height\\s*=\\s*proportionalSize\\(\\s*40\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 69",
      "description": "Next, add a `draw` method to the `Platform` class.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\n--fcc-editable-region--\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n\n}\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "Your `Platform` class should have a `draw` method.\n\n```js\nconst platform = new Platform();\nassert.isFunction(platform.draw);\n```\n\nYour `draw` method should be empty.\n\n```js\nconst platform = new Platform();\nassert.match(platform.draw.toString(), /\\(\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 70",
      "description": "Inside the `draw` method, assign `\"#acd157\"` to the `ctx.fillStyle`.\n\nBelow that, call the `ctx.fillRect` method and pass in the `x` and `y` coordinates, along with the `width` and `height` properties. Remember to include `this` before each property.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\n--fcc-editable-region--\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n\n  }\n}\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should assign `\"#acd157\"` to the `ctx.fillStyle`.\n\n```js\nassert.match(code, /ctx\\.fillStyle\\s*=\\s*('|\")#acd157\\1\\s*;?/);\n```\n\nYou should call the `ctx.fillRect` method passing in the correct arguments.\n\n```js\nconst splitter = code.split(\"class Platform {\")\nassert.match(splitter[1], /ctx\\.fillRect\\s*\\(\\s*this\\.position\\.x\\s*,\\s*this\\.position\\.y\\s*,\\s*this\\.width\\s*,\\s*this\\.height\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 71",
      "description": "The next step will be to create a list of positions for the platforms.\n\nStart by creating a new `const` variable called `platformPositions` and assign it an empty array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `const` variable called `platformPositions` and  assign it an empty array.\n\n```js\nassert.match(code, /const\\s+platformPositions\\s*=\\s*\\[\\s*\\]\\s*;?/);\n```"
    },
    {
      "title": "Step 72",
      "description": "Inside the `platformPositions`, you will need to add the list of positions for the platforms. \n\nAdd a new object that has an `x` property with a value of `500` and a `y` property with a value of `proportionalSize(450)`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst platformPositions = [\n\n];\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have an object with an `x` property with a value of `500` and a `y` property with a value of `proportionalSize(450)`. You are using the `proportionalSize()` function here to make sure the `y` value is proportional to the screen size.\n\n```js\nassert.match(code, /{\\s*x\\s*:\\s*500\\s*,\\s*y\\s*:\\s*proportionalSize\\(\\s*450\\s*\\)\\s*}/);\n```"
    },
    {
      "title": "Step 73",
      "description": "Below that, add another object with an `x` property with a value of `700` and a `y` property with a value of `proportionalSize(400)`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  \n];\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have an object with an `x` property with a value of `700` and a `y` property with a value of `proportionalSize(400)`.\n\n```js\nassert.match(code, /{.*x\\s*:\\s*700.*y\\s*:\\s*proportionalSize\\(\\s*400\\s*\\).*}/);\n```"
    },
    {
      "title": "Step 74",
      "description": "Add the rest of the platform positions to the `platformPositions` array with the following values:\n\n```js\nx=850  y=proportionalSize(350)\nx=900  y=proportionalSize(350)\nx=1050 y=proportionalSize(150)\nx=2500 y=proportionalSize(450)\nx=2900 y=proportionalSize(400)\nx=3150 y=proportionalSize(350)\nx=3900 y=proportionalSize(450)\nx=4200 y=proportionalSize(400)\nx=4400 y=proportionalSize(200)\nx=4700 y=proportionalSize(150)\n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\n--fcc-editable-region--\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n\n];\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should include the rest of the values in the `platformPositions` array.\n\n```js\nconst platformPositionsClone = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nassert.deepEqual(platformPositions, platformPositionsClone);\n```"
    },
    {
      "title": "Step 75",
      "description": "The next step is to create a list of new platform instances using the `Platform` class. You will later reference this list to draw the platforms on the canvas.\n\nStart by creating a new `const` variable called `platforms` and assign it  `platformPositions.map()`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `const` variable called `platforms`.\n\n```js\nassert.match(code, /const\\s+platforms\\s*=\\s*/);\n```\n\nYou should assign `platformPositions.map()` to the `platforms` variable.\n\n```js\nassert.match(code, /const\\s+platforms\\s*=\\s*platformPositions\\.map\\s*\\(\\s*/);\n```"
    },
    {
      "title": "Step 76",
      "description": "In the map callback function, pass in `platform` for the parameter and implicitly return the creation of a new `Platform` instance with the `platform.x` and `platform.y` values passed in as arguments.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\n--fcc-editable-region--\n\nconst platforms = platformPositions.map(\n\n);\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "Your `map` callback should implicitly return the creation of a new `Platform` instance with the `platform.x` and `platform.y` values passed in as arguments.\n\n```js\nassert.match(code, /const\\s+platforms\\s*=\\s*platformPositions\\.map\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*new\\s+Platform\\s*\\(\\s*platform\\.x\\s*,\\s*platform\\.y\\s*\\)\\s*\\)\\s*;\\s*/);\n```"
    },
    {
      "title": "Step 77",
      "description": "Inside the `animate` function, you will need to draw each of the platforms onto the canvas.\n\nAdd a `forEach` loop that iterates through the `platforms` array. \n\nInside the callback function, add a `platform` parameter and for the body of the function call the `draw` method on each `platform`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `forEach` loop that iterates through the `platforms` array.\n\n```js\nassert.match(code, /platforms\\.forEach\\(\\s*(\\(.*\\)|[^\\s()]+)\\s*=>\\s*{?\\s*(.*?)\\s*}?\\s*\\)\\s*;?/);\n```\n\nYou should add a `platform` parameter to the callback function.\n\n```js\nassert.match(code, /platforms\\.forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{?\\s*(.*?)\\s*}?\\s*\\)\\s*;?/);\n```\n\nYou should call the `draw` method on each `platform`.\n\n```js\nassert.match(code, /platforms\\.forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{?\\s*platform\\.draw\\(\\s*\\)\\s*;?\\s*}?\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 78",
      "description": "If you try to start the game, you will notice that the platforms are rendered on the screen. But as the player moves to the right, the platform does not move with it.\n\nTo fix this issue, you will need to update the platform's `x` position as the player moves across the screen. \n\nInside the `animate` function, add a condition to check if the right key was pressed and if the `isCheckpointCollisionDetectionActive` is true.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have an `if` statement that checks if the right key was pressed and if the `isCheckpointCollisionDetectionActive` is true.\n\n```js\nassert.match(code, /if\\s*\\(((\\s*keys\\.rightKey\\.pressed\\s*&&\\s*isCheckpointCollisionDetectionActive\\s*)|(\\s*isCheckpointCollisionDetectionActive\\s*&&\\s*keys\\.rightKey\\.pressed\\s*))\\)\\s*{\\s*(.*?)\\s*}/);\n```"
    },
    {
      "title": "Step 79",
      "description": "Inside your condition, add a `forEach` loop to iterate through the `platforms` array. Inside the callback function use `platform` for the parameter.\n\nInside the loop, use the subtraction assignment operator to subtract 5 from the platform's `x` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    --fcc-editable-region--\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n\n    }\n\n    --fcc-editable-region--\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `forEach` loop that iterates through the `platforms` array.\n\n```js\nassert.match(code, /if\\s*\\(.*\\)\\s*{\\s+platforms\\.forEach\\(\\s*(\\(.*\\)|[^\\s()]+)\\s*=>\\s*{?\\s*(.*?)\\s*}?\\s*\\)\\s*;?/);\n```\n\nYou should use the subtraction assignment operator to subtract 5 from the platform's `x` position.\n\n```js\nassert.match(code, /platforms\\.forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{?\\s*platform\\.position\\.x\\s*-=\\s*5\\s*;?\\s*}?\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 80",
      "description": "Next, add an `else if` statement to check if the left key was pressed and if `isCheckpointCollisionDetectionActive` is true.\n\nInside that condition, add a `forEach` loop to iterate through the `platforms` array.\n\nInside the loop, use the addition assignment operator to add 5 to the platform's `x` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    --fcc-editable-region--\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    }\n\n    --fcc-editable-region--\n  }\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a condition that checks if the left key was pressed and if `isCheckpointCollisionDetectionActive` is true.\n\n```js\nassert.match(code, /if\\s*\\(((\\s*keys\\.rightKey\\.pressed\\s*&&\\s*isCheckpointCollisionDetectionActive\\s*)|(\\s*isCheckpointCollisionDetectionActive\\s*&&\\s*keys\\.rightKey\\.pressed\\s*))\\)\\s*{\\s*platforms\\.forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{\\s*platform\\.position\\.x\\s*-=\\s*5\\s*;\\s*}\\s*\\)\\s*;?\\s*}\\s*else\\s+if\\s*\\(((\\s*keys\\.leftKey\\.pressed\\s*&&\\s*isCheckpointCollisionDetectionActive\\s*)|(\\s*isCheckpointCollisionDetectionActive\\s*&&\\s*keys\\.leftKey\\.pressed\\s*))\\)\\s*{.*}\\s*\\)\\s*;?/s);\n\n```\n\nYou should add a `forEach` loop that iterates through the `platforms` array.\n\n```js\nassert.match(code, /else\\s+if\\s*\\(.*\\)\\s*{\\s*platforms\\.forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{?\\s*(.*?)\\s*}?\\s*\\)\\s*;?/);\n```\n\nYou should use the addition assignment operator to add 5 to the platform's `x` position.\n\n```js\nassert.match(code, /platforms\\.forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{?\\s*platform\\.position\\.x\\s*\\+=\\s*5\\s*;?\\s*}?\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 81",
      "description": "When you start the game, you will notice that the position of the platforms is animating alongside the player. But if you try to jump below one of the platforms, then you will jump right through it.\n\nTo fix this issue, you will need to add collision detection logic to the game.\n\nStart by calling the `forEach` method on the `platforms` array. For the callback function pass in `platform` as the parameter.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `forEach` loop that iterates through the `platforms` array.\n\n```js\nconst splitter = code.split(\"platform.position.x += 5;\")\nassert.match(splitter[1], /platforms\\.forEach\\(/);\n```\n\nYour callback function should have a `platform` parameter.\n\n```js\nconst splitter = code.split(\"platform.position.x += 5;\")\nassert.match(splitter[1], /platforms\\.forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*\\{\\s*\\}\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 82",
      "description": "Inside the callback function, create a new `const` variable called `collisionDetectionRules` and assign it an empty array. \n\nInside that array, add a boolean expression that checks whether the player's `y` position plus the player's height is less than or equal to the platform's `y` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  --fcc-editable-region--\n\n  platforms.forEach((platform) => {\n    \n  });\n\n  --fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `const` variable called `collisionDetectionRules` that is assigned an empty array.\n\n```js\nassert.match(code, /const\\s+collisionDetectionRules\\s*=\\s*\\[\\s*(?:[^\\]]*\\s*)*\\s*\\]\\s*;?/);\n```\n\nYou should have a boolean expression that checks whether the player's `y` position plus the player's height is less than or equal to the platform's `y` position.\n\n```js\nassert.match(code, /const\\s+collisionDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.y\\s*\\+\\s*player\\.height\\s*<=\\s*platform\\.position\\.y\\s*,?\\s*]\\s*;?/);\n```"
    },
    {
      "title": "Step 83",
      "description": "Add another boolean expression that checks if the sum of the player's `y` position, height, and `y` velocity is greater than or equal to the platform's `y` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n--fcc-editable-region--\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n  \n    ];\n  });\n\n--fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a boolean expression that checks if the sum of the player's `y` position, height, and `y` velocity is greater than or equal to the platform's `y` position.\n\n\n```js\nassert.match(code, /const\\s+collisionDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.y\\s*\\+\\s*player\\.height\\s*<=\\s*platform\\.position\\.y\\s*,\\s*player\\.position\\.y\\s*\\+\\s*player\\.height\\s*\\+\\s*player\\.velocity\\.y\\s*>=\\s*platform\\.position\\.y\\s*,?\\s*]\\s*;?/);\n```"
    },
    {
      "title": "Step 84",
      "description": "Below that boolean expression, add another boolean expression that checks if the player's `x` position is greater than or equal to the platform's `x` position minus half of the player's width. Use the division operator (`/`) to calculate half of the player's width.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n--fcc-editable-region--\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n\n    ];\n  });\n\n--fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a boolean expression that checks if the player's `x` position is greater than or equal to the platform's `x` position minus the player's width divided by `2`.\n\n```js\nassert.match(code, /const\\s+collisionDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.y\\s*\\+\\s*player\\.height\\s*<=\\s*platform\\.position\\.y\\s*,\\s*player\\.position\\.y\\s*\\+\\s*player\\.height\\s*\\+\\s*player\\.velocity\\.y\\s*>=\\s*platform\\.position\\.y\\s*,\\s*player\\.position\\.x\\s*>=\\s*platform\\.position\\.x\\s*-\\s*\\(?player\\.width\\s*\\/\\s*2\\)?\\s*,?\\s*]\\s*;?/);\n```"
    },
    {
      "title": "Step 85",
      "description": "Add one last boolean expression that checks if the player's `x` position is less than or equal to the sum of the platform's `x` position plus the platform's width minus one-third of the player's width. Use the division operator (`/`) to calculate a third of the player's width.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n--fcc-editable-region--\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n\n    ];\n  });\n\n--fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a boolean expression that checks if the player's `x` position is lesser than or equal to the platform's `x` position plus the platform's width minus the player's width divided by `3`.\n\n```js\nassert.match(code, /player\\.position\\.x\\s*<=\\s*platform\\.position\\.x\\s*\\+\\s*platform\\.width\\s*-\\s*player\\.width\\s*\\/\\s*3\\s*,?/)\n```"
    },
    {
      "title": "Step 86",
      "description": "Next, add an `if` statement that checks if every rule in the `collisionDetectionRules` array is truthy. Make sure to use the `every` method for this.\n\nInside the body of the `if` statement, assign the number 0 to the player's `y` velocity followed by a `return` statement.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n  });\n\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have an if statement that uses the `every` method to check if every rule in the `collisionDetectionRules` array is truthy.\n\n```js\nassert.match(code, /if\\s*\\(\\s*collisionDetectionRules\\.every\\(\\s*(?:\\(\\s*(.+)\\s*\\)\\s*=>\\s*\\1|([^\\s()]+)\\s*=>\\s*\\2)\\s*\\)\\s*\\)\\s*\\{\\s*/);\n```\n\nYou should assign the number `0` to the player's `y` velocity followed by a `return` statement inside the body of the `if` statement.\n\n```js\nassert.match(code, /if\\s*\\(\\s*collisionDetectionRules\\.every\\(\\s*(?:\\(\\s*(.+)\\s*\\)\\s*=>\\s*\\1|([^\\s()]+)\\s*=>\\s*\\2)\\s*\\)\\s*\\)\\s*\\{\\s*player\\.velocity\\.y\\s*=\\s*0\\s*;?\\s*return\\s*;?\\s*\\}\\s*;?/);\n```"
    },
    {
      "title": "Step 87",
      "description": "Create a new `const` variable called `platformDetectionRules` and assign it an empty array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n  });\n\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `const` variable called `platformDetectionRules` that is assigned an empty array.\n\n```js\nassert.match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*\\]/);\n```"
    },
    {
      "title": "Step 88",
      "description": "Inside that array, add a boolean expression that checks if the player's `x` position is greater than or equal to the platform's `x` position minus half of the player's width. Use the division operator (`/`) to calculate half of the player's width.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    --fcc-editable-region--\n\n    const platformDetectionRules = [\n\n    ];\n\n    --fcc-editable-region--\n  });\n\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a boolean expression that checks if the player's `x` position is greater than or equal to the platform's `x` position minus the player's width divided by `2`.\n\n```js\nassert.match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.x\\s*>=\\s*platform\\.position\\.x\\s*-\\s*player\\.width\\s*\\/\\s*2\\s*,?\\s*\\]\\s*;?/)\n```"
    },
    {
      "title": "Step 89",
      "description": "Below that boolean expression, add another boolean expression that checks if the player's `x` position is less than or equal to the sum of the platform's `x` position plus the platform's width minus one-third of the player's width. Use the division operator (`/`) to calculate a third of the player's width.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n--fcc-editable-region--\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n\n    ];\n\n--fcc-editable-region--\n  });\n\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a boolean expression that checks if the player's `x` position is less than or equal to the sum of the platform's `x` position and the platform's width minus the player's width divided by `3`.\n\n```js\nassert.match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.x\\s*>=\\s*platform\\.position\\.x\\s*-\\s*player\\.width\\s*\\/\\s*2\\s*,\\s*player\\.position\\.x\\s*<=\\s*platform\\.position\\.x\\s*\\+\\s*platform\\.width\\s*-\\s*player\\.width\\s*\\/\\s*3\\s*,?\\s*\\]\\s*;?/)\n```"
    },
    {
      "title": "Step 90",
      "description": "Add another boolean expression that checks if the player's `y` position plus the player's height is greater than or equal to the platform's `y` position.\n\nBelow that, add another boolean expression that checks if the player's `y` position is less than or equal to the sum of the platform's `y` position plus the platform's height.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n--fcc-editable-region--\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n\n    ];\n\n--fcc-editable-region--\n  });\n\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should not alter the existing `platformDetectionRules` array and its content.\n\n```js\nassert.match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.x\\s*>=\\s*platform\\.position\\.x\\s*-\\s*player\\.width\\s*\\/\\s*2\\s*,\\s*player\\.position\\.x\\s*<=\\s*platform\\.position\\.x\\s*\\+\\s*platform\\.width\\s*-\\s*player\\.width\\s*\\/\\s*3\\s*,\\s*.*\\s*.*\\s*\\]\\s*;?/)\n\n```\n\nYou should have a boolean expression that checks if the player's `y` position plus the player's height is greater than or equal to the platform's `y` position.\n\n```js\nassert.match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.x\\s*>=\\s*platform\\.position\\.x\\s*-\\s*player\\.width\\s*\\/\\s*2\\s*,\\s*player\\.position\\.x\\s*<=\\s*platform\\.position\\.x\\s*\\+\\s*platform\\.width\\s*-\\s*player\\.width\\s*\\/\\s*3\\s*,\\s*(?:player\\.position\\.y\\s*\\+\\s*player\\.height|player\\.height\\s*\\+\\s*player\\.position\\.y)\\s*>=\\s*platform\\.position\\.y\\s*,\\s*.*\\s*\\]\\s*;?/)\n\n```\n\nYou should have a boolean expression that checks if the player's `y` position is less than or equal to the sum of the platform's `y` position plus the platform's height.\n\n```js\nassert.match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.x\\s*>=\\s*platform\\.position\\.x\\s*-\\s*player\\.width\\s*\\/\\s*2\\s*,\\s*player\\.position\\.x\\s*<=\\s*platform\\.position\\.x\\s*\\+\\s*platform\\.width\\s*-\\s*player\\.width\\s*\\/\\s*3\\s*,\\s*(?:player\\.position\\.y\\s*\\+\\s*player\\.height|player\\.height\\s*\\+\\s*player\\.position\\.y)\\s*>=\\s*platform\\.position\\.y\\s*,\\s*(?:player\\.position\\.y\\s*<=\\s*platform\\.position\\.y\\s*\\+\\s*platform\\.height|player\\.position\\.y\\s*<=\\s*platform\\.height\\s*\\+\\s*platform\\.position\\.y)\\s*,?\\s*\\]\\s*;?/)\n\n```"
    },
    {
      "title": "Step 91",
      "description": "Add an `if` statement that checks if every platform detection rule is `true`. Make sure to use the `every` method for this.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n  });\n\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have an `if` statement that uses the `every` method to check if every platform detection rule is `true`. \n\n```js\nassert.match(code, /\\s*if\\s*\\(\\s*platformDetectionRules\\.every\\(\\s*(?:\\(\\s*(.+)\\s*\\)\\s*=>\\s*\\1|([^\\s()]+)\\s*=>\\s*\\2)\\s*\\)\\s*\\)\\s*{\\s*}\\s*;?/);\n```"
    },
    {
      "title": "Step 92",
      "description": "Inside the body of the `if` statement, assign `platform.position.y + player.height` to the player's `y` position. \n\nThen, assign `gravity` to the player's `y` velocity.\n\nNow, when you start the game, you will be able to jump underneath the platform and collide with it.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    --fcc-editable-region--\n\n    if (platformDetectionRules.every(rule => rule)) {\n\n    };\n\n    --fcc-editable-region--\n  });\n\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should assign the sum of the platform's `y` position and the player's height to the player's `y` position. \n\n```js\nassert.match(code, /\\s*player\\.position\\.y\\s*=\\s*platform\\.position\\.y\\s*\\+\\s*player\\.height\\s*;?/);\n```\n\nYou should assign gravity to the player's `y` velocity.\n\n```js\nassert.match(code, /\\s*player\\.velocity\\.y\\s*=\\s*gravity\\s*;?/);\n```"
    },
    {
      "title": "Step 93",
      "description": "The last portion of the project is to add the logic for the checkpoints. When a player collides with a checkpoint, the checkpoint screen should appear.\n\nStart by creating a new `class` called `CheckPoint`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `class` called `CheckPoint`.\n\n```js\nassert.match(code, /\\s*class\\s*CheckPoint\\s*{\\s*}\\s*;?/);\n```"
    },
    {
      "title": "Step 94",
      "description": "Inside that `CheckPoint` class, add a constructor with `x`, `y` and `z` parameters.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n--fcc-editable-region--\n\nclass CheckPoint {\n\n};\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `constructor` method inside the `CheckPoint` class.\n\n```js\nassert.match(code, /\\s*constructor\\s*\\(.*\\)\\s*{\\s*}/);\n```\n\nYour `constructor` should have `x`, `y` and `z` parameters in that order.\n\n```js\nassert.match(code, /\\s*constructor\\s*\\(\\s*x\\s*,\\s*y\\s*,\\s*z\\s*\\)\\s*{\\s*}\\s*;?/);\n```"
    },
    {
      "title": "Step 95",
      "description": "Inside the constructor, create an object with `x` and `y` parameters and assign it to the `position`. \n\nRemember to use the `this` keyword to access the properties.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n--fcc-editable-region--\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    \n  };\n};\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `this.position` property.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.position\\s*;?/);\n```\n\nThe `this.position` property should be an object with the `x` and `y` coordinates.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.position\\s*=\\s*\\{\\s*x\\s*,\\s*y\\s*,?\\s*\\}\\s*;?/);\n```"
    },
    {
      "title": "Step 96",
      "description": "The next step is to add the `width` and `height` to the `CheckPoint` class. \n\nThe `width` and `height` should be `proportionalSize(40)` and `proportionalSize(70)` respectively.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n--fcc-editable-region--\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n\n  };\n};\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `width` property inside the `CheckPoint` class.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.width\\s*;?/);\n```\n\nYou should have a `height` property inside the `CheckPoint` class.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.height\\s*;?/);\n```\n\nYou should assign the `width` property to `proportionalSize(40)`.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.width\\s*=\\s*proportionalSize\\(\\s*40\\s*\\)\\s*;?/);\n```\n\nYou should assign the `height` property to `proportionalSize(70)`.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.height\\s*=\\s*proportionalSize\\(\\s*70\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 98",
      "description": "Now you need to create a `draw` method for the `CheckPoint` class. \n\nInside the `draw` method, assign the `fillStyle` property on the `ctx` object the hex color `\"#f1be32\"`. \n\nBelow the `fillStyle` property, use the `fillRect` method on the `ctx` object and pass in the `x`, `y`, `width`, and `height` properties as arguments.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n--fcc-editable-region--\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n};\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "Your `CheckPoint` class should have a `draw` method.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height)\");\nassert.match(splitter[2], /draw\\s*\\(\\s*\\)\\s*\\{/);\n```\n\nYour `draw` method should assign a value to the `fillStyle` property on the `ctx` object.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height)\");\nassert.match(splitter[2], /draw\\s*\\(\\s*\\)\\s*\\{\\s*ctx\\.fillStyle\\s*=/);\n```\n\nYou should assign the hex color `\"#f1be32\"` to the `fillStyle` property on the `ctx` object.\n\n```js\nconst splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height)\");\nassert.match(splitter[2], /draw\\s*\\(\\s*\\)\\s*\\{\\s*ctx\\.fillStyle\\s*=\\s*('|\")#f1be32\\1\\s*;?/);\n```\n\nYour `draw` method should invoke the `fillRect` method on the `ctx` object.\n\n```js\nconst splitter = code.split('#f1be32');\nassert.match(splitter[1], /ctx\\.fillRect\\(/);\n```\n\nWhen invoking `ctx.fillRect` you should pass in the `position.x`, `position.y`, `width`, and `height` properties as arguments. Don't forget the `this` keyword.\n\n```js\nconst splitter = code.split('#f1be32');\nassert.match(splitter[1], /ctx\\.fillRect\\(\\s*this\\.position\\.x\\s*,\\s*this\\.position\\.y\\s*,\\s*this\\.width\\s*,\\s*this\\.height\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 99",
      "description": "The last method you will need to add to the `CheckPoint` class is the `claim` method.\n\nInside the `claim` method, assign `0` to the `width` and `height` properties of the `CheckPoint` instance.\n\nBelow those properties, assign `Infinity` to the `y` position.\n\nLastly, assign `true` to the `claimed` property.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n--fcc-editable-region--\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n};\n\n--fcc-editable-region--\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "Your `CheckPoint` class should have a `claim` method.\n\n```js\nassert.match(code, /\\s*claim\\s*\\(\\s*\\)\\s*{\\s*(.*\\S)?\\s*}\\s*;/s);\n```\n\nYour `claim` method should have a `width` property set to `0`.\n\n```js\nassert.match(code, /\\s*this\\.width\\s*=\\s*0\\s*;?/);\n```\n\nYour `claim` method should have a `height` property set to `0`.\n\n```js\nassert.match(code, /\\s*this\\.height\\s*=\\s*0\\s*;?/);\n```\n\nYou should assign `Infinity` to the `y` position.\n\n```js\nassert.match(code, /\\s*this\\.position\\.y\\s*=\\s*Infinity\\s*;?/);\n```\n\nYou should assign `true` to the `claimed` property.\n\n```js\nassert.match(code, /\\s*this\\.claimed\\s*=\\s*true\\s*;?/);\n```"
    },
    {
      "title": "Step 100",
      "description": "Use `const` to create a new array called `checkpointPositions`. \n\nInside that array, add an object for each of the following positions:\n\n```js\n x: 1170, y: proportionalSize(80), z: 1\n x: 2900, y: proportionalSize(330), z: 2 \n x: 4800, y: proportionalSize(80), z: 3 \n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `checkpointPositions` array.\n\n```js\nassert.isArray(checkpointPositions);\n```\n\nYou should have three objects inside the `checkpointPositions` array.\n\n```js\nassert.lengthOf(checkpointPositions, 3);\n```\n\nYou should have an object with an `x` property set to `1170`, `y` property set to `proportionalSize(80)`, and `z` property set to `1`.\n\n```js\nassert.deepStrictEqual(checkpointPositions[0], { x: 1170, y: proportionalSize(80), z: 1 });\n```\n\nYou should have an object with an `x` property set to `2900`, `y` property set to `proportionalSize(330)`, and  a `z` property set to `2`.\n\n```js\nassert.deepStrictEqual(checkpointPositions[1], { x: 2900, y: proportionalSize(330), z: 2 });\n```\n\nYou should have an object with an `x` property set to `4800`, `y` property set to `proportionalSize(80)`, and a `z` property set to `3`.\n\n```js\nassert.deepStrictEqual(checkpointPositions[2], { x: 4800, y: proportionalSize(80), z: 3 });\n```"
    },
    {
      "title": "Step 101",
      "description": "The next step is to create a list of new `checkpoint` instances using the `CheckPoint` class. \n\nStart by creating a new `const` variable called `checkpoints` and assign it `checkpointPositions.map()`.\n\nFor the `map` callback function, pass in `checkpoint` for the parameter and implicitly return the creation of a new `CheckPoint` instance with the `checkpoint.x`, `checkpoint.y` and `checkpoint.z` values passed in as arguments.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should assign `checkpointPositions.map()` to a `checkpoints` variable.\n\n```js\nassert.match(code, /\\s*const\\s+checkpoints\\s*=\\s*checkpointPositions\\.map\\s*\\([^)]*\\)\\s*;?/);\n\n```\n\nYour callback function should have a `checkpoint` parameter.\n\n```js\nassert.match(code, /\\s*const\\s+checkpoints\\s*=\\s*checkpointPositions\\.map\\s*\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*[^)]*\\s*\\)\\s*;?/);\n\n```\n\nYou should implicitly return a new `CheckPoint` instance with the `checkpoint.x`, `checkpoint.y` and `checkpoint.z` values passed in as arguments in that order.\n\n```js\nassert.match(code, /\\s*checkpointPositions\\.map\\s*\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*new\\s+CheckPoint\\s*\\(\\s*checkpoint\\.x\\s*,\\s*checkpoint\\.y\\s*,\\s*checkpoint\\.z\\s*\\)\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 102",
      "description": "Inside the animate function, you will need to draw each of the `checkpoints` onto the canvas.\n\nAdd a `forEach` loop that iterates through the `checkpoints` array.\n\nInside the callback function, add a `checkpoint` parameter and for the body of the function call the `draw` method on each `checkpoint`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `forEach` loop that iterates through the `checkpoints` array.\n\n```js\nassert.match(code, /\\bcheckpoints\\b\\s*\\.\\s*forEach\\s*\\(/s);\n```\n\nYou should have a `checkpoint` parameter inside the `forEach` callback function.\n\n```js\nassert.match(code, /\\s*checkpoints\\s*\\.\\s*forEach\\s*\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*{?/s);\n```\n\nYou should call the `draw` method on each `checkpoint` inside the `forEach` callback function.\n\n```js\nassert.match(code, /\\s*checkpoints\\.forEach\\s*\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*(\\{\\s*checkpoint\\.draw\\(\\s*\\)\\s*;?\\s*\\}|checkpoint\\.draw\\(\\s*\\))\\s*\\)\\s*;?/s);\n```"
    },
    {
      "title": "Step 103",
      "description": "Inside your condition, add a `forEach` loop to iterate through the `checkpoints` array. Use `checkpoint` as the parameter name for the callback function.\n\nInside the `forEach` callback, use the subtraction assignment operator to subtract 5 from the checkpoints's `x` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      --fcc-editable-region--\n\n      --fcc-editable-region--\n\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `forEach` loop that iterates through the `checkpoints` array.\n\n```js\nconst splitter = code.split(\"if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive)\")\nassert.match(splitter[1], /checkpoints\\.forEach\\(/);\n```\n\nYou should have a `checkpoint` parameter inside the `forEach` callback function.\n\n```js\nconst splitter = code.split(\"if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive)\")\nassert.match(splitter[1], /checkpoints\\.forEach\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*\\{?/);\n```\n\nYou should use the subtraction assignment operator to subtract 5 from the `checkpoint`'s `x` position.\n\n```js\nassert.match(code, /\\s*checkpoint\\.position\\.x\\s*-=\\s*5\\s*;?/s);\n```"
    },
    {
      "title": "Step 104",
      "description": "Inside your `else if` statement, add a `forEach` loop to iterate through the `checkpoints` array. Use `checkpoint` as the parameter name for the callback function.\n\nInside the `forEach` callback, use the addition assignment operator to add 5 to the checkpoints's `x` position.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\n\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      --fcc-editable-region--\n\n      --fcc-editable-region--\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `forEach` loop that iterates through the `checkpoints` array.\n\n```js\nconst splitter = code.split(\"else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\")\nassert.match(splitter[1], /checkpoints\\.forEach\\s*\\(/s);\n```\n\nYou should use the `checkpoint` parameter inside the `forEach` callback function.\n\n```js\nconst splitter = code.split(\"else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\")\nassert.match(splitter[1], /checkpoints\\.forEach\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*\\{?/);\n```\n\nYou should use the addition assignment operator to add 5 to the `checkpoint`'s `x` position.\n\n```js\nassert.match(code, /\\s*checkpoint\\.position\\.x\\s*\\+=\\s*5\\s*;?/s);\n```"
    },
    {
      "title": "Step 105",
      "description": "The next step is to create a function that will show the checkpoint message when the player reaches a checkpoint.\n\nCreate a new arrow function called `showCheckpointScreen` that takes in a `msg` parameter.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\n\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `showCheckpointScreen` function.\n\n```js\nassert.isFunction(showCheckpointScreen);\n```\n\nYour `showCheckpointScreen` function should have a `msg` parameter.\n\n```js\nassert.match(code, /\\s*const\\s+showCheckpointScreen\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*{/);\n```"
    },
    {
      "title": "Step 106",
      "description": "Inside the `showCheckpointScreen` function, set the `checkpointScreen` `style.display` property to `\"block\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\n--fcc-editable-region--\n\nconst showCheckpointScreen = (msg) => {\n\n};\n\n--fcc-editable-region--\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should set the `checkpointScreen` `style.display` property to `\"block\"`.\n\n```js\nassert.match(code, /\\s*checkpointScreen\\s*\\.\\s*style\\s*\\.\\s*display\\s*=\\s*('|\")block\\1\\s*;?/);\n```"
    },
    {
      "title": "Step 107",
      "description": "Set the `checkpointMessage`'s `textContent` property to the `msg` parameter.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\n--fcc-editable-region--\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n\n};\n\n--fcc-editable-region--\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should set the `textContent` property of the `checkpointMessage` to the `msg` parameter.\n\n```js\nassert.match(code, /\\s*checkpointMessage\\s*\\.\\s*textContent\\s*=\\s*msg\\s*;?/);\n```"
    },
    {
      "title": "Step 108",
      "description": "Create an `if` statement that checks if `isCheckpointCollisionDetectionActive` is true.\n\nInside the `if` statement, add a `setTimeout()` that takes in a callback function and a delay of 2000 milliseconds.\n\nFor the callback function, it should set the `checkpointScreen` `style.display` property to `\"none\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\n--fcc-editable-region--\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n\n};\n\n--fcc-editable-region--\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have an `if` statement that checks if `isCheckpointCollisionDetectionActive` is true.\n\n```js\nassert.match(code, /\\s*if\\s*\\(\\s*isCheckpointCollisionDetectionActive\\s*\\)\\s*{/s);\n```\n\nYou should have a `setTimeout()` function inside the `if` statement.\n\n```js\nassert.match(code, /\\s*if\\s*\\(\\s*isCheckpointCollisionDetectionActive\\s*\\)\\s*{\\s*setTimeout\\s*\\(/s);\n```\n\nYour `setTimeout()` function should have a callback function as the first argument.\n\n```js\nassert.match(code, /\\s*setTimeout\\s*\\(\\s*\\(\\s*\\)\\s*=>/s);\n```\n\nYour `setTimeout()` function should have a delay of 2000 milliseconds as the second argument.\n\n```js\nassert.match(code, /\\s*setTimeout\\s*\\(\\s*\\(\\s*\\)\\s*=>[^,]*,\\s*2000\\s*\\)/s);\n```\n\nYour callback function should set the `checkpointScreen` `style.display` property to `\"none\"`.\n\n```js\nassert.match(code, /\\s*if\\s*\\(\\s*isCheckpointCollisionDetectionActive\\s*\\)\\s*{\\s*setTimeout\\s*\\(\\s*\\(\\s*\\)\\s*=>\\s*(\\(\\s*checkpointScreen\\.style\\.display\\s*=\\s*(\"|')none\\2\\s*\\)|\\{\\s*checkpointScreen\\.style\\.display\\s*=\\s*(\"|')none\\3\\s*;?\\s*\\}|\\s*checkpointScreen\\.style\\.display\\s*=\\s*(\"|')none\\4\\s*)\\s*,\\s*2000\\s*\\)\\s*;?\\s*}/s);\n```"
    },
    {
      "title": "Step 109",
      "description": "The last few steps involve updating the `animate` function to display the checkpoint screen when the player reaches a checkpoint. \n\nStart by adding a `forEach` to the `checkpoints` array. For the callback function, use `checkpoint`, `index` and `checkpoints` for the parameters.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `forEach` loop that iterates through the `checkpoints` array.\n\n```js\nconst splitter = code.split(\"player.velocity.y = gravity;\")\nassert.match(splitter[1], /checkpoints\\.forEach\\(/);\n```\n\nYour callback function should have `checkpoint`, `index` and `checkpoints` parameters in that order.\n\n```js\nconst splitter = code.split(\"player.velocity.y = gravity;\")\nassert.match(splitter[1], /checkpoints\\.forEach\\(\\s*\\(\\s*checkpoint\\s*,\\s*index\\s*,\\s*checkpoints\\s*\\)\\s*=>\\s*\\{/);\n```"
    },
    {
      "title": "Step 110",
      "description": "Create a new `const` variable called `checkpointDetectionRules` and assign it an empty array. \n\nInside that array, add a boolean expression that checks if the player's `position.x` is greater than or equal to the checkpoint's `position.x`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n  --fcc-editable-region--\n\n  checkpoints.forEach((checkpoint, index, checkpoints) => {\n\n  });\n\n  --fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should use const to create an empty `checkpointDetectionRules` array.\n\n```js\nassert.match(code, /const\\s+checkpointDetectionRules\\s*=\\s*\\[\\s*/)\n```\n\nYou should have a boolean expression that checks if the player's `position.x` is greater than or equal to the checkpoint's `position.x` inside the `checkpointDetectionRules` array.\n\n```js\nassert.match(code, /const\\s+checkpointDetectionRules\\s*=\\s*\\[\\s*player\\.position\\.x\\s*>=\\s*checkpoint\\.position\\.x\\s*,?\\s*\\]/)\n```"
    },
    {
      "title": "Step 111",
      "description": "Add another boolean expression that checks if the player's `position.y` is greater than or equal to the checkpoint's `position.y`.\n\nBelow that statement, add another boolean expression that checks if the player's `position.y` plus the player's `height` is less than or equal to the checkpoint's `position.y` plus the checkpoint's `height`.\n\nBelow that statement, add the `isCheckpointCollisionDetectionActive` variable.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n--fcc-editable-region--\n\n  checkpoints.forEach((checkpoint, index, checkpoints) => {\n    const checkpointDetectionRules =[\n      player.position.x >= checkpoint.position.x,\n\n    ]\n  });\n\n--fcc-editable-region--\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a boolean expression that checks if the player's `position.y` is greater than or equal to the checkpoint's `position.y`\n\n```js\nassert.match(code, /player\\.position\\.y\\s*>=\\s*checkpoint\\.position\\.y\\s*,/)\n\n```\n\nYou should have a boolean expression that checks if the player's `position.y` plus the player's height is less than or equal to the checkpoint's `position.y` plus the checkpoint's height.\n\n```js\nassert.match(code, /player\\.position\\.y\\s*>=\\s*checkpoint\\.position\\.y\\s*,\\s*player\\.position\\.y\\s*\\+\\s*player\\.height\\s*<=\\s*checkpoint\\.position\\.y\\s*\\+\\s*checkpoint\\.height\\s*,/)\n\n```\n\nYou should add `isCheckpointCollisionDetectionActive` as the last item of the `checkpointDetectionRules` array.\n\n```js\nassert.match(code, /player\\.position\\.y\\s*>=\\s*checkpoint\\.position\\.y\\s*,\\s*player\\.position\\.y\\s*\\+\\s*player\\.height\\s*<=\\s*checkpoint\\.position\\.y\\s*\\+\\s*checkpoint\\.height\\s*,\\s*isCheckpointCollisionDetectionActive\\s*/)\n\n```"
    },
    {
      "title": "Step 113",
      "description": "Next, add an `if` statement that checks if every rule in the `checkpointDetectionRules` array is true. \n\nMake sure to use the `every` method for this.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n--fcc-editable-region--\n\n  checkpoints.forEach((checkpoint, index, checkpoints) => {\n    const checkpointDetectionRules = [\n      player.position.x >= checkpoint.position.x,\n      player.position.y >= checkpoint.position.y,\n      player.position.y + player.height <=\n        checkpoint.position.y + checkpoint.height,\n      isCheckpointCollisionDetectionActive,\n      player.position.x - player.width <=\n        checkpoint.position.x - checkpoint.width + player.width * 0.9,\n      index === 0 || checkpoints[index - 1].claimed === true,\n    ];\n\n  });\n\n--fcc-editable-region--\n}\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should create an empty `if` statement with the condition `checkpointDetectionRules.every((rule) => rule)`.\n\n```js\nassert.match(code, /if\\s*\\(\\s*checkpointDetectionRules\\.every\\(\\s*(?:\\(\\s*(.+)\\s*\\)\\s*=>\\s*\\1|([^\\s()]+)\\s*=>\\s*\\2\\s*)\\s*\\)\\s*\\)\\s*\\{\\s*\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 114",
      "description": "Inside the `if` statement, call the `claim` method on the `checkpoint` object.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n  checkpoints.forEach((checkpoint, index, checkpoints) => {\n    const checkpointDetectionRules = [\n      player.position.x >= checkpoint.position.x,\n      player.position.y >= checkpoint.position.y,\n      player.position.y + player.height <=\n        checkpoint.position.y + checkpoint.height,\n      isCheckpointCollisionDetectionActive,\n      player.position.x - player.width <=\n        checkpoint.position.x - checkpoint.width + player.width * 0.9,\n      index === 0 || checkpoints[index - 1].claimed === true,\n    ];\n\n--fcc-editable-region--\n\n    if (checkpointDetectionRules.every((rule) => rule)) {\n\n    };\n\n--fcc-editable-region--\n\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should call the `claim()` method on the `checkpoint` object.\n\n```js\nassert.match(code, /checkpoint\\.claim\\(\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 115",
      "description": "The next step is to write a condition that checks if the player has reached the last checkpoint. \n\nStart by adding an `if` statement that checks if the `index` is equal to the length of the `checkpoints` array minus one.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n  checkpoints.forEach((checkpoint, index, checkpoints) => {\n    const checkpointDetectionRules = [\n      player.position.x >= checkpoint.position.x,\n      player.position.y >= checkpoint.position.y,\n      player.position.y + player.height <=\n        checkpoint.position.y + checkpoint.height,\n      isCheckpointCollisionDetectionActive,\n      player.position.x - player.width <=\n        checkpoint.position.x - checkpoint.width + player.width * 0.9,\n      index === 0 || checkpoints[index - 1].claimed === true,\n    ];\n\n    if (checkpointDetectionRules.every((rule) => rule)) {\n      checkpoint.claim();\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have an empty `if` statement with the condition `index === checkpoints.length - 1`\n\n```js\nassert.match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\.length\\s*-\\s*1\\s*\\)\\s*\\{\\s*\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 116",
      "description": "Inside the condition, you want to first set the `isCheckpointCollisionDetectionActive` to false.\n\nThen you will need to call the `showCheckpointScreen` function and pass in the string `\"You reached the final checkpoint!\"` as an argument.\n\nLastly, you will need to call the `movePlayer` function and pass in the string `\"ArrowRight\"` as the first argument, the number `0` as the second argument, and the boolean `false` as the third argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n  checkpoints.forEach((checkpoint, index, checkpoints) => {\n    const checkpointDetectionRules = [\n      player.position.x >= checkpoint.position.x,\n      player.position.y >= checkpoint.position.y,\n      player.position.y + player.height <=\n        checkpoint.position.y + checkpoint.height,\n      isCheckpointCollisionDetectionActive,\n      player.position.x - player.width <=\n        checkpoint.position.x - checkpoint.width + player.width * 0.9,\n      index === 0 || checkpoints[index - 1].claimed === true,\n    ];\n\n    if (checkpointDetectionRules.every((rule) => rule)) {\n      checkpoint.claim();\n\n--fcc-editable-region--\n\n      if (index === checkpoints.length - 1) {\n        \n      };\n\n--fcc-editable-region--\n\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should set `isCheckpointCollisionDetectionActive` to false inside the `if` statement.\n\n```js\nassert.match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\.length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*;?\\s*/)\n```\n\nYou should call the `showCheckpointScreen` function and pass in \"You reached the final checkpoint!\" as an argument.\n\n```js\nassert.match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\.length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*;?\\s*showCheckpointScreen\\(\\s*(\"|'|`)You\\s+reached\\s+the\\s+final\\s+checkpoint!\\1\\s*\\)\\s*;?/)\n```\n\nYou should call the `movePlayer` function and pass in the provided arguments.\n\n```js\nassert.match(code, /movePlayer\\s*\\(\\s*('|\")ArrowRight\\1\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 117",
      "description": "The last thing you will need to do is add an `else if` statement.\n\nYour condition should check if the player's `x` position is greater than or equal to the checkpoint's `x` position and less than or equal to the checkpoint's `x` position plus `40`.\n\nInside the body of the `else if` statement, you will need to call the `showCheckpointScreen` function and pass in the string `\"You reached a checkpoint!\"` as an argument.\n\nCongratulations! You have completed the platformer game project!",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n  checkpoints.forEach((checkpoint, index, checkpoints) => {\n    const checkpointDetectionRules = [\n      player.position.x >= checkpoint.position.x,\n      player.position.y >= checkpoint.position.y,\n      player.position.y + player.height <=\n        checkpoint.position.y + checkpoint.height,\n      isCheckpointCollisionDetectionActive,\n      player.position.x - player.width <=\n        checkpoint.position.x - checkpoint.width + player.width * 0.9,\n      index === 0 || checkpoints[index - 1].claimed === true,\n    ];\n\n    if (checkpointDetectionRules.every((rule) => rule)) {\n      checkpoint.claim();\n\n--fcc-editable-region--\n\n      if (index === checkpoints.length - 1) {\n        isCheckpointCollisionDetectionActive = false;\n        showCheckpointScreen(\"You reached the final checkpoint!\");\n        movePlayer(\"ArrowRight\", 0, false);\n      }\n\n--fcc-editable-region--\n\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should add an `else if` clause to check if the player's `x` position is greater than or equal to the checkpoint's `x` position and less than or equal to the checkpoint's `x` position plus `40`.\n\n```js\nassert.match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\.length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*;?\\s*showCheckpointScreen\\(\\s*(\"|'|`)You reached the final checkpoint!\\1\\s*\\)\\s*;?\\s*movePlayer\\(\\s*(\"|'|`)ArrowRight\\2\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*;?\\s*\\}\\s*else\\s+if\\s*\\(\\s*player\\.position\\.x\\s*>=\\s*checkpoint\\.position\\.x\\s*&&\\s*player\\.position\\.x\\s*<=\\s*checkpoint\\.position\\.x\\s\\+\\s*40\\s*\\)\\s*\\{\\s*/)\n```\n\nYou should call the `showCheckpointScreen` function and pass in \"You reached a checkpoint!\" as an argument.\n\n```js\nassert.match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\.length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*;?\\s*showCheckpointScreen\\(\\s*(\"|'|`)You reached the final checkpoint!\\1\\s*\\)\\s*;?\\s*movePlayer\\(\\s*(\"|'|`)ArrowRight\\2\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*;?\\s*\\}\\s*else\\s+if\\s*\\(\\s*player\\.position\\.x\\s*>=\\s*checkpoint\\.position\\.x\\s*&&\\s*player\\.position\\.x\\s*<=\\s*checkpoint\\.position\\.x\\s\\+\\s*40\\s*\\)\\s*\\{\\s*showCheckpointScreen\\(\\s*(\"|'|`)You\\s+reached\\s+a\\s*checkpoint!\\3\\s*\\)\\s*;?\\s*\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 10",
      "description": "As you are designing the game, you will need to make sure that the size of the elements in the game are responsive and adapt to different screen sizes.\n\nStart by creating an arrow function called `proportionalSize` that takes in a `size` parameter.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "`proportionalSize` should be a function.\n\n```js\nassert.isFunction(proportionalSize);\n```\n\nYour `proportionalSize` function should use arrow syntax.\n\n```js\nassert.match(code, /const\\s+proportionalSize\\s*=\\s*\\(?\\s*.*\\s*\\)?\\s*=>/);\n```\n\nYour `proportionalSize` function should have a `size` parameter.\n\n```js\nassert.match(code, /const\\s+proportionalSize\\s*=\\s*\\(?\\s*size\\s*\\)?\\s*=>/);\n```"
    },
    {
      "title": "Step 11",
      "description": "The `width` and the `height` of the main player, platforms and checkpoints will be proportional sized relative to the `innerHeight` of the browser screen. The goal is to make the game responsive and visually consistent across different screen sizes.\n\nInside your `proportionalSize` function, you will need to return a ternary that checks if `innerHeight` is less than `500`. If so, return `Math.ceil((size / 500) * innerHeight)`, otherwise return `size`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\n--fcc-editable-region--\nconst proportionalSize = (size) => {\n  \n};\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `proportionalSize` function should have a `return` statement.\n\n```js\nassert.match(proportionalSize.toString(), /return/);\n```\n\nYour `proportionalSize` function should return a ternary operator that checks if `innerHeight` is less than `500` and returns `Math.ceil((size / 500) * innerHeight)`, otherwise returns `size`.\n\n```js\nassert.match(code, /const\\s+proportionalSize\\s*=\\s*(\\(\\s*size\\s*\\)|size)\\s*=>\\s*{\\s*return\\s+innerHeight\\s*<\\s*500\\s*\\?\\s*Math\\.ceil\\(\\s*\\(\\s*size\\s*\\/\\s*500\\s*\\)\\s*\\*\\s*innerHeight\\s*\\)\\s*:\\s*size\\s*;?\\s*}\\s*/);\n```"
    },
    {
      "title": "Step 33",
      "description": "For the last condition, you will need to check if the player's `x` position has exceeded the right edge of the canvas. If it has, you will need to set the player's `x` position to the maximum value so the player does not accidentally go off screen to the right.\n\nInside your `update` method, create an `if` statement that checks if `this.position.x >= canvas.width - this.width * 2`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n  }\n}"
        }
      ],
      "testCode": "You should have another `if` statement inside your `update` method.\n\n```js\nconst player = new Player();\nassert.lengthOf(player?.update?.toString().match(/if\\s*\\(\\s*.*\\s*\\)\\s*{/g), 4);\n```\n\nYour `if` statement should check if `this.position.x >= canvas.width - this.width * 2`.\n\n```js\nconst player = new Player();\nassert.match(player?.update?.toString(), /if\\s*\\(\\s*this\\.position\\.x\\s*>=\\s*canvas\\.width\\s*-\\s*this\\.width\\s*\\*\\s*2\\s*\\)\\s*{/gi);\n```"
    },
    {
      "title": "Step 34",
      "description": "Inside your `if` statement, assign `canvas.width - this.width * 2` to `this.position.x`.\n\nThis will ensure that the player's `x` position will never exceed the right edge of the canvas.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      --fcc-editable-region--\n      \n      --fcc-editable-region--\n    }\n  }\n}"
        }
      ],
      "testCode": "You should assign `canvas.width - this.width * 2` to `this.position.x` inside your `if` statement.\n\n```js\nassert.match(code, /this\\.position\\.x\\s*=\\s*canvas\\.width\\s*-\\s*this\\.width\\s*\\*\\s*2\\s*;?/g);\n```"
    },
    {
      "title": "Step 97",
      "description": "Below the checkpoint's `width` and `height` properties, use the `this` keyword to add a new `claimed` property and assign it the value of `false`. This property will be used to check if the player has reached the checkpoint.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n  };\n};\n\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a `this.claimed` property in the `CheckPoint` class.\n\n```js\nconst checkpoint = new CheckPoint(0, 0, 0);\nassert(checkpoint.hasOwnProperty(\"claimed\"));\n```\n\nYou should assign `false` to the `this.claimed` property.\n\n```js\nconst checkpoint = new CheckPoint(0, 0, 0);\nassert.strictEqual(checkpoint.claimed, false);\n```"
    },
    {
      "title": "Step 112",
      "description": "You will need to add two more checkpoint detection rules to the `checkpointDetectionRules` array. \n\nThe first rule should check if the player's `x` position minus the player's `width` is less than or equal to the checkpoint's `x` position minus the checkpoint's `width` plus the player's `width` multiplied by `0.9`. This will ensure that the player is close enough to the checkpoint to claim it.\n\nThe second rule should check if index is strictly equal to `0` or if the previous checkpoint(`checkpoints[index - 1].claimed`) is true. This will ensure that the player can only claim the first checkpoint or a checkpoint that has already been claimed.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - this.width * 2) {\n      this.position.x = canvas.width - this.width * 2;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(70);\n    this.claimed = false;\n  };\n\n  draw() {\n    ctx.fillStyle = \"#f1be32\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  claim() {\n    this.width = 0;\n    this.height = 0;\n    this.position.y = Infinity;\n    this.claimed = true;\n  }\n};\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst checkpointPositions = [\n  { x: 1170, y: proportionalSize(80), z: 1 },\n  { x: 2900, y: proportionalSize(330), z: 2 },\n  { x: 4800, y: proportionalSize(80), z: 3 },\n];\n\nconst checkpoints = checkpointPositions.map(\n  (checkpoint) => new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  checkpoints.forEach(checkpoint => {\n    checkpoint.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x -= 5;\n      });\n    \n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n\n      checkpoints.forEach((checkpoint) => {\n        checkpoint.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n\n\n  checkpoints.forEach((checkpoint, index, checkpoints) => {\n    const checkpointDetectionRules = [\n      player.position.x >= checkpoint.position.x,\n      player.position.y >= checkpoint.position.y,\n      player.position.y + player.height <=\n        checkpoint.position.y + checkpoint.height,\n      isCheckpointCollisionDetectionActive,\n      --fcc-editable-region--\n\n      --fcc-editable-region--\n    ];\n  });\n\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nconst showCheckpointScreen = (msg) => {\n  checkpointScreen.style.display = \"block\";\n  checkpointMessage.textContent = msg;\n  if (isCheckpointCollisionDetectionActive) {\n    setTimeout(() => (checkpointScreen.style.display = \"none\"), 2000);\n  }\n};\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});"
        }
      ],
      "testCode": "You should have a checkpoint detection rule that checks for the following: `player.position.x - player.width <= checkpoint.position.x - checkpoint.width + player.width * 0.9`.\n\n```js\nassert.match(code, /player\\.position\\.x\\s*-\\s*player\\.width\\s*<=\\s*checkpoint\\.position\\.x\\s*-\\s*checkpoint\\.width\\s*\\+\\s*player\\.width\\s*\\*\\s*0\\.9/i);\n```\n\nYou should have a checkpoint detection rule that checks for the following: `index === 0 || checkpoints[index - 1].claimed === true`.\n\n```js\nassert.match(code, /index\\s*===\\s*0\\s*\\|\\|\\s*checkpoints\\[index\\s*-\\s*1\\]\\.claimed\\s*===\\s*true/i);\n```"
    }
  ]
}