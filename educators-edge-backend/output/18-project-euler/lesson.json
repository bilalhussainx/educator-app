{
  "section": {
    "id": "18-project-euler",
    "name": "18-project-euler"
  },
  "challenges": [
    {
      "id": "5900f36e1000cf542c50fe80",
      "title": "Problem 1: Multiples of 3 or 5",
      "challengeType": 1,
      "dashedName": "problem-1-multiples-of-3-or-5",
      "description": "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below the provided parameter value `number`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function multiplesOf3Or5(number) {\n\n  return true;\n}\n\nmultiplesOf3Or5(1000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const multiplesOf3Or5 = (number) => {\n  var total = 0;\n\n  for(var i = 0; i < number; i++) {\n    if(i % 3 == 0 || i % 5 == 0) {\n      total += i;\n    }\n  }\n  return total;\n};"
        }
      ],
      "tests": [
        {
          "text": "`multiplesOf3Or5(10)` should return a number.",
          "testCode": "assert.isNumber(multiplesOf3Or5(10));"
        },
        {
          "text": "`multiplesOf3Or5(49)` should return 543.",
          "testCode": "assert.strictEqual(multiplesOf3Or5(49), 543);"
        },
        {
          "text": "`multiplesOf3Or5(1000)` should return 233168.",
          "testCode": "assert.strictEqual(multiplesOf3Or5(1000), 233168);"
        },
        {
          "text": "`multiplesOf3Or5(8456)` should return 16687353.",
          "testCode": "assert.strictEqual(multiplesOf3Or5(8456), 16687353);"
        },
        {
          "text": "`multiplesOf3Or5(19564)` should return 89301183.",
          "testCode": "assert.strictEqual(multiplesOf3Or5(19564), 89301183);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301722,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-1-multiples-of-3-or-5.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3761000cf542c50fe89",
      "title": "Problem 10: Summation of primes",
      "challengeType": 1,
      "dashedName": "problem-10-summation-of-primes",
      "description": "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below `n`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeSummation(n) {\n\n  return true;\n}\n\nprimeSummation(2000000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSquaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\n\nfunction primeSummation(num) {\n  const primeSeive = new PrimeSeive(num);\n\n  let sum = 2;\n  for (let i = 3; i < num; i += 2) {\n    if (primeSeive.isOddPrime(i)) sum += i;\n  }\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`primeSummation(17)` should return a number.",
          "testCode": "assert.isNumber(primeSummation(17));"
        },
        {
          "text": "`primeSummation(17)` should return 41.",
          "testCode": "assert.strictEqual(primeSummation(17), 41);"
        },
        {
          "text": "`primeSummation(2001)` should return 277050.",
          "testCode": "assert.strictEqual(primeSummation(2001), 277050);"
        },
        {
          "text": "`primeSummation(140759)` should return 873608362.",
          "testCode": "assert.strictEqual(primeSummation(140759), 873608362);"
        },
        {
          "text": "`primeSummation(2000000)` should return 142913828922.",
          "testCode": "assert.strictEqual(primeSummation(2000000), 142913828922);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301723,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-10-summation-of-primes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3d01000cf542c50fee3",
      "title": "Problem 100: Arranged probability",
      "challengeType": 1,
      "dashedName": "problem-100-arranged-probability",
      "description": "If a box contains twenty-one colored discs, composed of fifteen blue discs and six red discs, and two discs were taken at random, it can be seen that the probability of taking two blue discs.\n\n$${P(BB)} = \\frac{15}{21}×\\frac{14}{20} = \\frac{1}{2}$$\n\nThe next such arrangement, for which there is exactly a 50% chance of taking two blue discs at random, is a box containing eighty-five blue discs and thirty-five red discs.\n\nBy finding the first arrangement to contain over `limit` discs in total, determine the number of blue discs that the box would contain.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function arrangedProbability(limit) {\n\n  return true;\n}\n\narrangedProbability(20);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function arrangedProbability(limit) {\n  // Based on https://www.mathblog.dk/project-euler-100-blue-discs-two-blue/\n  let blue = 15;\n  let discs = 21;\n\n  while (discs < limit) {\n    const nextBlue = 3 * blue + 2 * discs - 2;\n    const nextDiscs = 4 * blue + 3 * discs - 3;\n\n    blue = nextBlue;\n    discs = nextDiscs;\n  }\n  return blue;\n}"
        }
      ],
      "tests": [
        {
          "text": "`arrangedProbability(20)` should return a number.",
          "testCode": "assert(typeof arrangedProbability(10) === 'number');"
        },
        {
          "text": "`arrangedProbability(20)` should return `15`.",
          "testCode": "assert.strictEqual(arrangedProbability(20), 15);"
        },
        {
          "text": "`arrangedProbability(100)` should return `85`.",
          "testCode": "assert.strictEqual(arrangedProbability(100), 85);"
        },
        {
          "text": "`arrangedProbability(100000)` should return `97513`.",
          "testCode": "assert.strictEqual(arrangedProbability(100000), 97513);"
        },
        {
          "text": "`arrangedProbability(1000000000)` should return `3822685023`.",
          "testCode": "assert.strictEqual(arrangedProbability(1000000000), 3822685023);"
        },
        {
          "text": "`arrangedProbability(1000000000000)` should return `756872327473`.",
          "testCode": "assert.strictEqual(arrangedProbability(1000000000000), 756872327473);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301724,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-100-arranged-probability.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3781000cf542c50fe8a",
      "title": "Problem 11: Largest product in a grid",
      "challengeType": 1,
      "dashedName": "problem-11-largest-product-in-a-grid",
      "description": "In the 20×20 grid below, four numbers along a diagonal line have been marked in red.\n\n<div style='text-align: center;'>\n  08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08<br>\n  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00<br>\n  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65<br>\n  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91<br>\n  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80<br>\n  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50<br>\n  32 98 81 28 64 23 67 10 <span style='color: red'><b>26</b></span> 38 40 67 59 54 70 66 18 38 64 70<br>\n  67 26 20 68 02 62 12 20 95 <span style='color: red'><b>63</b></span> 94 39 63 08 40 91 66 49 94 21<br>\n  24 55 58 05 66 73 99 26 97 17 <span style='color: red'><b>78</b></span> 78 96 83 14 88 34 89 63 72<br>\n  21 36 23 09 75 00 76 44 20 45 35 <span style='color: red'><b>14</b></span> 00 61 33 97 34 31 33 95<br>\n  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92<br>\n  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57<br>\n  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58<br>\n  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40<br>\n  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66<br>\n  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69<br>\n  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36<br>\n  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16<br>\n  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54<br>\n  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48<br>\n</div>\n\nThe product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in a given `arr` grid?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largestGridProduct(arr) {\n\n  return true;\n}\n\n// Only change code above this line\nconst grid = [\n  [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],\n  [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],\n  [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],\n  [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],\n  [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],\n  [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],\n  [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],\n  [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],\n  [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],\n  [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],\n  [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],\n  [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],\n  [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],\n  [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],\n  [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],\n  [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],\n  [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],\n  [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],\n  [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],\n  [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]\n];\n\nconst testGrid = [\n  [40, 17, 81, 18, 57],\n  [74, 4, 36, 16, 29],\n  [36, 42, 69, 73, 45],\n  [51, 54, 69, 16, 92],\n  [7, 97, 57, 32, 16]\n];\n\nlargestGridProduct(testGrid);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function largestGridProduct(arr) {\n  let maxProduct = 0;\n  let currProduct = 0;\n\n  function maxProductChecker(n) {\n    if (n > maxProduct) {\n      return maxProduct = n;\n    }\n  }\n\n  // loop rows\n  for (let r = 0; r < arr.length; r++) {\n    // loop columns\n    for (let c = 0; c < arr[r].length; c++) {\n      const limit = arr[r].length - 3;\n\n      // check horizontal\n      if (c < limit) {\n        currProduct = arr[r][c] * arr[r][c + 1] * arr[r][c + 2] * arr[r][c + 3];\n        maxProductChecker(currProduct);\n      }\n\n      // check vertical\n      if (r < limit) {\n        currProduct = arr[r][c] * arr[r + 1][c] * arr[r + 2][c] * arr[r + 3][c];\n        maxProductChecker(currProduct);\n      }\n\n      // check diagonal [\\]\n      if (c < limit && r < limit) {\n        currProduct = arr[r][c] * arr[r + 1][c + 1] * arr[r + 2][c + 2] * arr[r + 3][c + 3];\n        maxProductChecker(currProduct);\n      }\n\n      // check diagonal [/]\n      if (c > 3 && r < limit) {\n        currProduct = arr[r][c] * arr[r + 1][c - 1] * arr[r + 2][c - 2] * arr[r + 3][c - 3];\n        maxProductChecker(currProduct);\n      }\n    }\n  }\n\n  return maxProduct;\n}\n\n const grid = [  [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],\n  [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],\n  [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],\n  [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],\n  [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],\n  [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],\n  [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],\n  [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],\n  [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],\n  [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],\n  [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],\n  [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],\n  [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],\n  [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],\n  [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],\n  [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],\n  [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],\n  [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],\n  [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],\n  [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]\n];\n\nconst testGrid = [\n  [40, 17, 81, 18, 57],\n  [74, 4, 36, 16, 29],\n  [36, 42, 69, 73, 45],\n  [51, 54, 69, 16, 92],\n  [7, 97, 57, 32, 16]\n];"
        }
      ],
      "tests": [
        {
          "text": "`largestGridProduct(testGrid)` should return a number.",
          "testCode": "assert.isNumber(largestGridProduct(testGrid));"
        },
        {
          "text": "`largestGridProduct(testGrid)` should return 14169081.",
          "testCode": "assert.strictEqual(largestGridProduct(testGrid), 14169081);"
        },
        {
          "text": "`largestGridProduct(grid)` should return 70600674.",
          "testCode": "assert.strictEqual(largestGridProduct(grid), 70600674);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301734,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-11-largest-product-in-a-grid.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3781000cf542c50fe8b",
      "title": "Problem 12: Highly divisible triangular number",
      "challengeType": 1,
      "dashedName": "problem-12-highly-divisible-triangular-number",
      "description": "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n<div style='text-align: center;'>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</div>\n\nLet us list the factors of the first seven triangle numbers:\n\n<div style='padding-left: 4em;'><b>1:</b> 1</div>\n<div style='padding-left: 4em;'><b>3:</b> 1, 3</div>\n<div style='padding-left: 4em;'><b>6:</b> 1, 2, 3, 6</div>\n<div style='padding-left: 4em;'><b>10:</b> 1, 2, 5, 10</div>\n<div style='padding-left: 4em;'><b>15:</b> 1, 3, 5, 15</div>\n<div style='padding-left: 4em;'><b>21:</b> 1, 3, 7, 21</div>\n<div style='padding-left: 4em;'><b>28:</b> 1, 2, 4, 7, 14, 28</div>\n\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over `n` divisors?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function divisibleTriangleNumber(n) {\n\n  return true;\n}\n\ndivisibleTriangleNumber(500);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function divisibleTriangleNumber(n) {\n  if (n === 1) return 3;\n  let counter = 1;\n  let triangleNumber = counter++;\n\n\n while (noOfFactors(triangleNumber) < n) {\n   triangleNumber += counter++;\n }\nreturn triangleNumber;\n}\n\nfunction noOfFactors(num) {\n  const primeFactors = getPrimeFactors(num);\n  let prod = 1;\n  for(let p in primeFactors) {\n    prod *= (primeFactors[p] + 1)\n  }\n  return prod;\n}\n\nfunction getPrimeFactors(num) {\n  let n = num;\n  let primes = {};\n\n  let p = 2;\n  let sqrt = Math.sqrt(num);\n\n  function checkAndUpdate(inc) {\n    if (n % p === 0) {\n      const curr = primes[p];\n      if (curr) {\n        primes[p]++\n      } else {\n        primes[p] = 1;\n      }\n      n /= p;\n    } else {\n      p += inc;\n    }\n  }\n\n  while(p === 2 && p <= n) {\n    checkAndUpdate(1);\n  }\n\n  while (p <= n && p <= sqrt) {\n    checkAndUpdate(2);\n  }\n  if(Object.keys(primes).length === 0) {\n    primes[num] = 1;\n  } else if(n !== 1) {\n    primes[n] = 1;\n  }\n  return primes;\n}"
        }
      ],
      "tests": [
        {
          "text": "`divisibleTriangleNumber(5)` should return a number.",
          "testCode": "assert.isNumber(divisibleTriangleNumber(5));"
        },
        {
          "text": "`divisibleTriangleNumber(5)` should return 28.",
          "testCode": "assert.strictEqual(divisibleTriangleNumber(5), 28);"
        },
        {
          "text": "`divisibleTriangleNumber(23)` should return 630.",
          "testCode": "assert.strictEqual(divisibleTriangleNumber(23), 630);"
        },
        {
          "text": "`divisibleTriangleNumber(167)` should return 1385280.",
          "testCode": "assert.strictEqual(divisibleTriangleNumber(167), 1385280);"
        },
        {
          "text": "`divisibleTriangleNumber(374)` should return 17907120.",
          "testCode": "assert.strictEqual(divisibleTriangleNumber(374), 17907120);"
        },
        {
          "text": "`divisibleTriangleNumber(500)` should return 76576500.",
          "testCode": "assert.strictEqual(divisibleTriangleNumber(500), 76576500);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301746,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-12-highly-divisible-triangular-number.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f37a1000cf542c50fe8c",
      "title": "Problem 13: Large sum",
      "challengeType": 1,
      "dashedName": "problem-13-large-sum",
      "description": "Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n\n<div style='padding-left: 4em;'>\n  37107287533902102798797998220837590246510135740250<br>\n  46376937677490009712648124896970078050417018260538<br>\n  74324986199524741059474233309513058123726617309629<br>\n  91942213363574161572522430563301811072406154908250<br>\n  23067588207539346171171980310421047513778063246676<br>\n  89261670696623633820136378418383684178734361726757<br>\n  28112879812849979408065481931592621691275889832738<br>\n  44274228917432520321923589422876796487670272189318<br>\n  47451445736001306439091167216856844588711603153276<br>\n  70386486105843025439939619828917593665686757934951<br>\n  62176457141856560629502157223196586755079324193331<br>\n  64906352462741904929101432445813822663347944758178<br>\n  92575867718337217661963751590579239728245598838407<br>\n  58203565325359399008402633568948830189458628227828<br>\n  80181199384826282014278194139940567587151170094390<br>\n  35398664372827112653829987240784473053190104293586<br>\n  86515506006295864861532075273371959191420517255829<br>\n  71693888707715466499115593487603532921714970056938<br>\n  54370070576826684624621495650076471787294438377604<br>\n  53282654108756828443191190634694037855217779295145<br>\n  36123272525000296071075082563815656710885258350721<br>\n  45876576172410976447339110607218265236877223636045<br>\n  17423706905851860660448207621209813287860733969412<br>\n  81142660418086830619328460811191061556940512689692<br>\n  51934325451728388641918047049293215058642563049483<br>\n  62467221648435076201727918039944693004732956340691<br>\n  15732444386908125794514089057706229429197107928209<br>\n  55037687525678773091862540744969844508330393682126<br>\n  18336384825330154686196124348767681297534375946515<br>\n  80386287592878490201521685554828717201219257766954<br>\n  78182833757993103614740356856449095527097864797581<br>\n  16726320100436897842553539920931837441497806860984<br>\n  48403098129077791799088218795327364475675590848030<br>\n  87086987551392711854517078544161852424320693150332<br>\n  59959406895756536782107074926966537676326235447210<br>\n  69793950679652694742597709739166693763042633987085<br>\n  41052684708299085211399427365734116182760315001271<br>\n  65378607361501080857009149939512557028198746004375<br>\n  35829035317434717326932123578154982629742552737307<br>\n  94953759765105305946966067683156574377167401875275<br>\n  88902802571733229619176668713819931811048770190271<br>\n  25267680276078003013678680992525463401061632866526<br>\n  36270218540497705585629946580636237993140746255962<br>\n  24074486908231174977792365466257246923322810917141<br>\n  91430288197103288597806669760892938638285025333403<br>\n  34413065578016127815921815005561868836468420090470<br>\n  23053081172816430487623791969842487255036638784583<br>\n  11487696932154902810424020138335124462181441773470<br>\n  63783299490636259666498587618221225225512486764533<br>\n  67720186971698544312419572409913959008952310058822<br>\n  95548255300263520781532296796249481641953868218774<br>\n  76085327132285723110424803456124867697064507995236<br>\n  37774242535411291684276865538926205024910326572967<br>\n  23701913275725675285653248258265463092207058596522<br>\n  29798860272258331913126375147341994889534765745501<br>\n  18495701454879288984856827726077713721403798879715<br>\n  38298203783031473527721580348144513491373226651381<br>\n  34829543829199918180278916522431027392251122869539<br>\n  40957953066405232632538044100059654939159879593635<br>\n  29746152185502371307642255121183693803580388584903<br>\n  41698116222072977186158236678424689157993532961922<br>\n  62467957194401269043877107275048102390895523597457<br>\n  23189706772547915061505504953922979530901129967519<br>\n  86188088225875314529584099251203829009407770775672<br>\n  11306739708304724483816533873502340845647058077308<br>\n  82959174767140363198008187129011875491310547126581<br>\n  97623331044818386269515456334926366572897563400500<br>\n  42846280183517070527831839425882145521227251250327<br>\n  55121603546981200581762165212827652751691296897789<br>\n  32238195734329339946437501907836945765883352399886<br>\n  75506164965184775180738168837861091527357929701337<br>\n  62177842752192623401942399639168044983993173312731<br>\n  32924185707147349566916674687634660915035914677504<br>\n  99518671430235219628894890102423325116913619626622<br>\n  73267460800591547471830798392868535206946944540724<br>\n  76841822524674417161514036427982273348055556214818<br>\n  97142617910342598647204516893989422179826088076852<br>\n  87783646182799346313767754307809363333018982642090<br>\n  10848802521674670883215120185883543223812876952786<br>\n  71329612474782464538636993009049310363619763878039<br>\n  62184073572399794223406235393808339651327408011116<br>\n  66627891981488087797941876876144230030984490851411<br>\n  60661826293682836764744779239180335110989069790714<br>\n  85786944089552990653640447425576083659976645795096<br>\n  66024396409905389607120198219976047599490197230297<br>\n  64913982680032973156037120041377903785566085089252<br>\n  16730939319872750275468906903707539413042652315011<br>\n  94809377245048795150954100921645863754710598436791<br>\n  78639167021187492431995700641917969777599028300699<br>\n  15368713711936614952811305876380278410754449733078<br>\n  40789923115535562561142322423255033685442488917353<br>\n  44889911501440648020369068063960672322193204149535<br>\n  41503128880339536053299340368006977710650566631954<br>\n  81234880673210146739058568557934581403627822703280<br>\n  82616570773948327592232845941706525094512325230608<br>\n  22918802058777319719839450180888072429661980811197<br>\n  77158542502016545090413245809786882778948721859617<br>\n  72107838435069186155435662884062257473692284509516<br>\n  20849603980134001723930671666823555245252804609722<br>\n  53503534226472524250874054075591789781264330331690<br>\n</div>",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largeSum(arr) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst testNums = [\n  '37107287533902102798797998220837590246510135740250',\n  '46376937677490009712648124896970078050417018260538'\n];\n\nlargeSum(testNums);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function largeSum(arr) {\n\n  let sum = 0;\n\n  arr.forEach(function(num) {\n    sum += parseInt(num, 10);\n  });\n\n  sum = sum.toString(10);\n\n  sum = sum.substring(0, 1) + sum.substring(2);\n\n  let firstTen = sum.slice(0, 10);\n  return parseInt(firstTen, 10);\n}"
        }
      ],
      "tests": [
        {
          "text": "`largeSum(testNums)` should return a number.",
          "testCode": "assert.isNumber(largeSum(testNums));"
        },
        {
          "text": "`largeSum(testNums)` should return 8348422521.",
          "testCode": "assert.strictEqual(largeSum(testNums), 8348422521);"
        },
        {
          "text": "`largeSum(fiftyDigitNums)` should return 5537376230.",
          "testCode": "assert.strictEqual(largeSum(fiftyDigitNums), 5537376230);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301757,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-13-large-sum.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "const fiftyDigitNums = [\n  '37107287533902102798797998220837590246510135740250',\n  '46376937677490009712648124896970078050417018260538',\n  '74324986199524741059474233309513058123726617309629',\n  '91942213363574161572522430563301811072406154908250',\n  '23067588207539346171171980310421047513778063246676',\n  '89261670696623633820136378418383684178734361726757',\n  '28112879812849979408065481931592621691275889832738',\n  '44274228917432520321923589422876796487670272189318',\n  '47451445736001306439091167216856844588711603153276',\n  '70386486105843025439939619828917593665686757934951',\n  '62176457141856560629502157223196586755079324193331',\n  '64906352462741904929101432445813822663347944758178',\n  '92575867718337217661963751590579239728245598838407',\n  '58203565325359399008402633568948830189458628227828',\n  '80181199384826282014278194139940567587151170094390',\n  '35398664372827112653829987240784473053190104293586',\n  '86515506006295864861532075273371959191420517255829',\n  '71693888707715466499115593487603532921714970056938',\n  '54370070576826684624621495650076471787294438377604',\n  '53282654108756828443191190634694037855217779295145',\n  '36123272525000296071075082563815656710885258350721',\n  '45876576172410976447339110607218265236877223636045',\n  '17423706905851860660448207621209813287860733969412',\n  '81142660418086830619328460811191061556940512689692',\n  '51934325451728388641918047049293215058642563049483',\n  '62467221648435076201727918039944693004732956340691',\n  '15732444386908125794514089057706229429197107928209',\n  '55037687525678773091862540744969844508330393682126',\n  '18336384825330154686196124348767681297534375946515',\n  '80386287592878490201521685554828717201219257766954',\n  '78182833757993103614740356856449095527097864797581',\n  '16726320100436897842553539920931837441497806860984',\n  '48403098129077791799088218795327364475675590848030',\n  '87086987551392711854517078544161852424320693150332',\n  '59959406895756536782107074926966537676326235447210',\n  '69793950679652694742597709739166693763042633987085',\n  '41052684708299085211399427365734116182760315001271',\n  '65378607361501080857009149939512557028198746004375',\n  '35829035317434717326932123578154982629742552737307',\n  '94953759765105305946966067683156574377167401875275',\n  '88902802571733229619176668713819931811048770190271',\n  '25267680276078003013678680992525463401061632866526',\n  '36270218540497705585629946580636237993140746255962',\n  '24074486908231174977792365466257246923322810917141',\n  '91430288197103288597806669760892938638285025333403',\n  '34413065578016127815921815005561868836468420090470',\n  '23053081172816430487623791969842487255036638784583',\n  '11487696932154902810424020138335124462181441773470',\n  '63783299490636259666498587618221225225512486764533',\n  '67720186971698544312419572409913959008952310058822',\n  '95548255300263520781532296796249481641953868218774',\n  '76085327132285723110424803456124867697064507995236',\n  '37774242535411291684276865538926205024910326572967',\n  '23701913275725675285653248258265463092207058596522',\n  '29798860272258331913126375147341994889534765745501',\n  '18495701454879288984856827726077713721403798879715',\n  '38298203783031473527721580348144513491373226651381',\n  '34829543829199918180278916522431027392251122869539',\n  '40957953066405232632538044100059654939159879593635',\n  '29746152185502371307642255121183693803580388584903',\n  '41698116222072977186158236678424689157993532961922',\n  '62467957194401269043877107275048102390895523597457',\n  '23189706772547915061505504953922979530901129967519',\n  '86188088225875314529584099251203829009407770775672',\n  '11306739708304724483816533873502340845647058077308',\n  '82959174767140363198008187129011875491310547126581',\n  '97623331044818386269515456334926366572897563400500',\n  '42846280183517070527831839425882145521227251250327',\n  '55121603546981200581762165212827652751691296897789',\n  '32238195734329339946437501907836945765883352399886',\n  '75506164965184775180738168837861091527357929701337',\n  '62177842752192623401942399639168044983993173312731',\n  '32924185707147349566916674687634660915035914677504',\n  '99518671430235219628894890102423325116913619626622',\n  '73267460800591547471830798392868535206946944540724',\n  '76841822524674417161514036427982273348055556214818',\n  '97142617910342598647204516893989422179826088076852',\n  '87783646182799346313767754307809363333018982642090',\n  '10848802521674670883215120185883543223812876952786',\n  '71329612474782464538636993009049310363619763878039',\n  '62184073572399794223406235393808339651327408011116',\n  '66627891981488087797941876876144230030984490851411',\n  '60661826293682836764744779239180335110989069790714',\n  '85786944089552990653640447425576083659976645795096',\n  '66024396409905389607120198219976047599490197230297',\n  '64913982680032973156037120041377903785566085089252',\n  '16730939319872750275468906903707539413042652315011',\n  '94809377245048795150954100921645863754710598436791',\n  '78639167021187492431995700641917969777599028300699',\n  '15368713711936614952811305876380278410754449733078',\n  '40789923115535562561142322423255033685442488917353',\n  '44889911501440648020369068063960672322193204149535',\n  '41503128880339536053299340368006977710650566631954',\n  '81234880673210146739058568557934581403627822703280',\n  '82616570773948327592232845941706525094512325230608',\n  '22918802058777319719839450180888072429661980811197',\n  '77158542502016545090413245809786882778948721859617',\n  '72107838435069186155435662884062257473692284509516',\n  '20849603980134001723930671666823555245252804609722',\n  '53503534226472524250874054075591789781264330331690'\n];\n\nconst testNums = [\n  '37107287533902102798797998220837590246510135740250',\n  '46376937677490009712648124896970078050417018260538'\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f37a1000cf542c50fe8d",
      "title": "Problem 14: Longest Collatz sequence",
      "challengeType": 1,
      "dashedName": "problem-14-longest-collatz-sequence",
      "description": "The following iterative sequence is defined for the set of positive integers:\n\n<div style='padding-left: 4em;'><var>n</var> → <var>n</var>/2 (<var>n</var> is even)</div>\n\n<div style='padding-left: 4em;'><var>n</var> → 3<var>n</var> + 1 (<var>n</var> is odd)</div>\n\nUsing the rule above and starting with 13, we generate the following sequence:\n\n<div style='text-align: center;'>13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</div>\n\nIt can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.\n\nWhich starting number, under the given `limit`, produces the longest chain?\n\n**Note:** Once the chain starts the terms are allowed to go above `limit`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function longestCollatzSequence(limit) {\n\n  return true;\n}\n\nlongestCollatzSequence(14);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function longestCollatzSequence(limit) {\n  let longest = 1;\n  let maxLength = 1;\n  for (let i = Math.floor(limit / 2); i < limit; i++) {\n    let len = colLen(i);\n    if (len > maxLength) {\n      longest = i;\n      maxLength = len;\n    }\n  }\n  return longest;\n}\n\nconst knownSequence = { '1': 1 };\n\nfunction colLen(n) {\n  if (knownSequence[n]) {\n    return knownSequence[n];\n  } else {\n    const len = n % 2 === 0 ? colLen(n / 2) + 1 : colLen((3 * n + 1) / 2) + 2;\n    knownSequence[n] = len;\n    return len;\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`longestCollatzSequence(14)` should return a number.",
          "testCode": "assert.isNumber(longestCollatzSequence(14));"
        },
        {
          "text": "`longestCollatzSequence(14)` should return 9.",
          "testCode": "assert.strictEqual(longestCollatzSequence(14), 9);"
        },
        {
          "text": "`longestCollatzSequence(5847)` should return 3711.",
          "testCode": "assert.strictEqual(longestCollatzSequence(5847), 3711);"
        },
        {
          "text": "`longestCollatzSequence(46500)` should return 35655.",
          "testCode": "assert.strictEqual(longestCollatzSequence(46500), 35655);"
        },
        {
          "text": "`longestCollatzSequence(54512)` should return 52527.",
          "testCode": "assert.strictEqual(longestCollatzSequence(54512), 52527);"
        },
        {
          "text": "`longestCollatzSequence(100000)` should return 77031.",
          "testCode": "assert.strictEqual(longestCollatzSequence(100000), 77031);"
        },
        {
          "text": "`longestCollatzSequence(1000000)` should return 837799.",
          "testCode": "assert.strictEqual(longestCollatzSequence(1000000), 837799);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301768,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-14-longest-collatz-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f37b1000cf542c50fe8e",
      "title": "Problem 15: Lattice paths",
      "challengeType": 1,
      "dashedName": "problem-15-lattice-paths",
      "description": "Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.\n\n<img alt=\"a diagram of 6 2 by 2 grids showing all the routes to the bottom right corner\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/1Atixoj.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHow many such routes are there through a given `gridSize`?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function latticePaths(gridSize) {\n\n  return true;\n}\n\nlatticePaths(4);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function latticePaths(gridSize) {\n  let paths = 1;\n\n  for (let i = 0; i < gridSize; i++) {\n    paths *= (2 * gridSize) - i;\n    paths /= i + 1;\n  }\n  return paths;\n}"
        }
      ],
      "tests": [
        {
          "text": "`latticePaths(4)` should return a number.",
          "testCode": "assert.isNumber(latticePaths(4));"
        },
        {
          "text": "`latticePaths(4)` should return 70.",
          "testCode": "assert.strictEqual(latticePaths(4), 70);"
        },
        {
          "text": "`latticePaths(9)` should return 48620.",
          "testCode": "assert.strictEqual(latticePaths(9), 48620);"
        },
        {
          "text": "`latticePaths(20)` should return 137846528820.",
          "testCode": "assert.strictEqual(latticePaths(20), 137846528820);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301780,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-15-lattice-paths.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f37d1000cf542c50fe8f",
      "title": "Problem 16: Power digit sum",
      "challengeType": 1,
      "dashedName": "problem-16-power-digit-sum",
      "description": "2<sup>15</sup> = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.\n\nWhat is the sum of the digits of the number 2<sup><code>exponent</code></sup>?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function powerDigitSum(exponent) {\n\n  return true;\n}\n\npowerDigitSum(15);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function powerDigitSum(exponent) {\n  const bigNum = [1];\n  let sum = 0;\n\n  for (let i = 1; i <= exponent; i++) {\n    let count = bigNum.length + 1;\n    let overflow = 0;\n    for (let j = 0; j < count; j++) {\n      let digit = bigNum[j] || 0;\n      digit = 2 * digit + overflow;\n\n      if (digit > 9) {\n        digit -= 10;\n        overflow = 1;\n      } else {\n        overflow = 0;\n      }\n\n      bigNum[j] = digit;\n    }\n  }\n\n  bigNum.forEach(function(num) {\n    return sum += num;\n  });\n\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`powerDigitSum(15)` should return a number.",
          "testCode": "assert.isNumber(powerDigitSum(15));"
        },
        {
          "text": "`powerDigitSum(15)` should return 26.",
          "testCode": "assert.strictEqual(powerDigitSum(15), 26);"
        },
        {
          "text": "`powerDigitSum(128)` should return 166.",
          "testCode": "assert.strictEqual(powerDigitSum(128), 166);"
        },
        {
          "text": "`powerDigitSum(1000)` should return 1366.",
          "testCode": "assert.strictEqual(powerDigitSum(1000), 1366);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301791,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-16-power-digit-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f37d1000cf542c50fe90",
      "title": "Problem 17: Number letter counts",
      "challengeType": 1,
      "dashedName": "problem-17-number-letter-counts",
      "description": "If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n\nIf all the numbers from 1 to given `limit` inclusive were written out in words, how many letters would be used?\n\n**Note:** Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with British usage.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function numberLetterCounts(limit) {\n\n  return true;\n}\n\nnumberLetterCounts(5);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function numberLetterCounts(limit) {\n  const dictionary = {\n    0: '',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16: 'sixteen',\n    17: 'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n    20: 'twenty',\n    30: 'thirty',\n    40: 'forty',\n    50: 'fifty',\n    60: 'sixty',\n    70: 'seventy',\n    80: 'eighty',\n    90: 'ninety',\n    1000: 'onethousand'\n  };\n\n  let numString = '';\n\n  function convertToString(num) {\n    // check dictionary for number\n    if (dictionary[num]) {\n      return dictionary[num];\n    } else {\n      const hundreds = Math.floor(num / 100);\n      const tens =  Math.floor((num / 10) % 10) * 10;\n      const remainder = num % 10;\n\n      let tempStr = '';\n\n      if (hundreds === 0) {\n        tempStr += dictionary[tens] + dictionary[remainder];\n      } else {\n        tempStr += dictionary[hundreds] + 'hundred';\n\n        if (tens !== 0 || remainder !== 0) {\n          tempStr += 'and';\n        }\n\n        if (tens < 20) {\n          const lessThanTwenty = tens + remainder;\n          tempStr += dictionary[lessThanTwenty];\n        } else {\n          tempStr += dictionary[tens] + dictionary[remainder];\n        }\n      }\n      return tempStr;\n    }\n  }\n\n  for (let i = 1; i <= limit; i++) {\n    numString += convertToString(i);\n  }\n  return numString.length;\n}"
        }
      ],
      "tests": [
        {
          "text": "`numberLetterCounts(5)` should return a number.",
          "testCode": "assert.isNumber(numberLetterCounts(5));"
        },
        {
          "text": "`numberLetterCounts(5)` should return 19.",
          "testCode": "assert.strictEqual(numberLetterCounts(5), 19);"
        },
        {
          "text": "`numberLetterCounts(150)` should return 1903.",
          "testCode": "assert.strictEqual(numberLetterCounts(150), 1903);"
        },
        {
          "text": "`numberLetterCounts(1000)` should return 21124.",
          "testCode": "assert.strictEqual(numberLetterCounts(1000), 21124);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301804,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-17-number-letter-counts.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f37e1000cf542c50fe91",
      "title": "Problem 18: Maximum path sum I",
      "challengeType": 1,
      "dashedName": "problem-18-maximum-path-sum-i",
      "description": "By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.\n\n<span style='display: block; text-align: center;'>\n  <strong style='color: red;'>3</strong><br>\n  <strong style='color: red;'>7</strong> 4<br>\n  2 <strong style='color: red;'>4</strong> 6<br>\n  8 5 <strong style='color: red;'>9</strong> 3\n</span>\n\nThat is, 3 + 7 + 4 + 9 = 23.\n\nFind the maximum total from top to bottom of the triangle below:\n\n75  \n95 64  \n17 47 82  \n18 35 87 10  \n20 04 82 47 65  \n19 01 23 75 03 34  \n88 02 77 73 07 63 67  \n99 65 04 28 06 16 70 92  \n41 41 26 56 83 40 80 70 33  \n41 48 72 33 47 32 37 16 94 29  \n53 71 44 65 25 43 91 52 97 51 14  \n70 11 33 28 77 73 17 78 39 68 17 57  \n91 71 52 38 17 14 91 43 58 50 27 29 48  \n63 66 04 68 89 53 67 30 73 16 69 87 40 31  \n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\n\n**NOTE:** As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximumPathSumI(triangle) {\n\n  return true;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const testTriangle = [[3, 0, 0, 0],\n  [7, 4, 0, 0],\n  [2, 4, 6, 0],\n  [8, 5, 9, 3]];\n\nfunction maximumPathSumI(triangle) {\n  let maxSum = triangle.slice();\n\n  for (let i = triangle.length - 1; i > 0; i--) {\n    let currentRow = maxSum[i];\n    let previousRow = maxSum[i - 1];\n    const temp = [];\n    for (let j = 0; j < i; j++) {\n      temp.push(Math.max((currentRow[j] + previousRow[j]), (currentRow[j + 1] + previousRow[j])));\n    }\n    maxSum[i - 1] = temp;\n    maxSum.pop();\n  }\n  return maxSum[0][0];\n}"
        }
      ],
      "tests": [
        {
          "text": "`maximumPathSumI([[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]])` should return a number.",
          "testCode": "assert.isNumber(maximumPathSumI(_testTriangle));"
        },
        {
          "text": "`maximumPathSumI([[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]])` should return 23.",
          "testCode": "assert.strictEqual(maximumPathSumI(_testTriangle), 23);"
        },
        {
          "text": "`maximumPathSumI([[75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [95, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 47, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [18, 35, 87, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [20, 4, 82, 47, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [19, 1, 23, 75, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0], [88, 2, 77, 73, 7, 63, 67, 0, 0, 0, 0, 0, 0, 0, 0], [99, 65, 4, 28, 6, 16, 70, 92, 0, 0, 0, 0, 0, 0, 0], [41, 41, 26, 56, 83, 40, 80, 70, 33, 0, 0, 0, 0, 0, 0], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29, 0, 0, 0, 0, 0], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]])` should return 1074.",
          "testCode": "assert.strictEqual(maximumPathSumI(_numTriangle), 1074);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301815,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-18-maximum-path-sum-i.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "const _numTriangle = [[75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [95, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 47, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [18, 35, 87, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [20, 4, 82, 47, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [19, 1, 23, 75, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0], [88, 2, 77, 73, 7, 63, 67, 0, 0, 0, 0, 0, 0, 0, 0], [99, 65, 4, 28, 6, 16, 70, 92, 0, 0, 0, 0, 0, 0, 0], [41, 41, 26, 56, 83, 40, 80, 70, 33, 0, 0, 0, 0, 0, 0], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29, 0, 0, 0, 0, 0], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]];\n\nconst _testTriangle = [[3, 0, 0, 0], [7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f37f1000cf542c50fe92",
      "title": "Problem 19: Counting Sundays",
      "challengeType": 1,
      "dashedName": "problem-19-counting-sundays",
      "description": "You are given the following information, but you may prefer to do some research for yourself.\n\n<ul>\n  <li>1 Jan 1900 was a Monday.</li>\n  <li>Thirty days has September,<br>April, June and November.<br>All the rest have thirty-one,<br>Saving February alone,<br>Which has twenty-eight, rain or shine.<br>And on leap years, twenty-nine.</li>\n  <li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>\n</ul>\n\nHow many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countingSundays(firstYear, lastYear) {\n\n  return true;\n}\n\ncountingSundays(1943, 1946);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function countingSundays(firstYear, lastYear) {\n  let sundays = 0;\n\n  for (let year = firstYear; year <= lastYear; year++) {\n    for (let month = 0; month <= 11; month++) {\n      const thisDate = new Date(year, month, 1);\n      if (thisDate.getDay() === 0) {\n        sundays++;\n      }\n    }\n  }\n  return sundays;\n}"
        }
      ],
      "tests": [
        {
          "text": "`countingSundays(1943, 1946)` should return a number.",
          "testCode": "assert.isNumber(countingSundays(1943, 1946));"
        },
        {
          "text": "`countingSundays(1943, 1946)` should return 6.",
          "testCode": "assert.strictEqual(countingSundays(1943, 1946), 6);"
        },
        {
          "text": "`countingSundays(1995, 2000)` should return 10.",
          "testCode": "assert.strictEqual(countingSundays(1995, 2000), 10);"
        },
        {
          "text": "`countingSundays(1901, 2000)` should return 171.",
          "testCode": "assert.strictEqual(countingSundays(1901, 2000), 171);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301827,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-19-counting-sundays.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f36e1000cf542c50fe81",
      "title": "Problem 2: Even Fibonacci Numbers",
      "challengeType": 1,
      "dashedName": "problem-2-even-fibonacci-numbers",
      "description": "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n<div style='text-align: center;'>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</div>\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed `n`, find the sum of the even-valued terms.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function fiboEvenSum(n) {\n\n  return true;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const fiboEvenSum = (number) => {\n  if (number <= 1) {\n    return 0;\n  } else {\n    let evenSum = 0,\n      prevFibNum = 1,\n      fibNum = 2; // According to problem description our Fibonacci series starts with 1, 2\n    for (let i = 2; fibNum <= number; i++) {\n      if (fibNum % 2 == 0) {\n        evenSum += fibNum;\n      }\n      [prevFibNum, fibNum] = [fibNum, prevFibNum + fibNum];\n    }\n    return evenSum;\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`fiboEvenSum(10)` should return a number.",
          "testCode": "assert.isNumber(fiboEvenSum(10));"
        },
        {
          "text": "Your function should return an even value.",
          "testCode": "assert.equal(fiboEvenSum(10) % 2 === 0, true);"
        },
        {
          "text": "Your function should sum the even-valued Fibonacci numbers: `fiboEvenSum(8)` should return 10.",
          "testCode": "assert.strictEqual(fiboEvenSum(8), 10);"
        },
        {
          "text": "`fiboEvenSum(10)` should return 10.",
          "testCode": "assert.strictEqual(fiboEvenSum(10), 10);"
        },
        {
          "text": "`fiboEvenSum(34)` should return 44.",
          "testCode": "assert.strictEqual(fiboEvenSum(34), 44);"
        },
        {
          "text": "`fiboEvenSum(60)` should return 44.",
          "testCode": "assert.strictEqual(fiboEvenSum(60), 44);"
        },
        {
          "text": "`fiboEvenSum(1000)` should return 798.",
          "testCode": "assert.strictEqual(fiboEvenSum(1000), 798);"
        },
        {
          "text": "`fiboEvenSum(100000)` should return 60696.",
          "testCode": "assert.strictEqual(fiboEvenSum(100000), 60696);"
        },
        {
          "text": "`fiboEvenSum(4000000)` should return 4613732.",
          "testCode": "assert.strictEqual(fiboEvenSum(4000000), 4613732);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301838,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-2-even-fibonacci-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3801000cf542c50fe93",
      "title": "Problem 20: Factorial digit sum",
      "challengeType": 1,
      "dashedName": "problem-20-factorial-digit-sum",
      "description": "`n`! means `n` × (`n` − 1) × ... × 3 × 2 × 1\n\nFor example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,  \nand the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.\n\nFind the sum of the digits `n`!",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumFactorialDigits(n) {\n\n  return n;\n}\n\nsumFactorialDigits(100);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "let factorial = (n) => n <= 1 ? BigInt(n) : BigInt(n) * BigInt(factorial(--n));\n\nlet sumDigits = n => n.toString().split('').map(x => parseInt(x)).reduce((a,b) => a + b);\n\nfunction sumFactorialDigits(n) {\n  return sumDigits(factorial(n));\n}"
        }
      ],
      "tests": [
        {
          "text": "`sumFactorialDigits(10)` should return a number.",
          "testCode": "assert.isNumber(sumFactorialDigits(10));"
        },
        {
          "text": "`sumFactorialDigits(10)` should return 27.",
          "testCode": "assert.strictEqual(sumFactorialDigits(10), 27);"
        },
        {
          "text": "`sumFactorialDigits(25)` should return 72.",
          "testCode": "assert.strictEqual(sumFactorialDigits(25), 72);"
        },
        {
          "text": "`sumFactorialDigits(50)` should return 216.",
          "testCode": "assert.strictEqual(sumFactorialDigits(50), 216);"
        },
        {
          "text": "`sumFactorialDigits(75)` should return 432.",
          "testCode": "assert.strictEqual(sumFactorialDigits(75), 432);"
        },
        {
          "text": "`sumFactorialDigits(100)` should return 648.",
          "testCode": "assert.strictEqual(sumFactorialDigits(100), 648);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301839,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-20-factorial-digit-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3811000cf542c50fe94",
      "title": "Problem 21: Amicable numbers",
      "challengeType": 1,
      "dashedName": "problem-21-amicable-numbers",
      "description": "Let d(`n`) be defined as the sum of proper divisors of `n` (numbers less than `n` which divide evenly into `n`).\n\nIf d(`a`) = `b` and d(`b`) = `a`, where `a` ≠ `b`, then `a` and `b` are an amicable pair and each of `a` and `b` are called amicable numbers.\n\nFor example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.\n\nEvaluate the sum of all the amicable numbers under `n`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumAmicableNum(n) {\n\n  return n;\n}\n\nsumAmicableNum(10000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const sumAmicableNum = (n) => {\n  const fsum = (n) => {\n    let sum = 1;\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++)\n      if (Math.floor(n % i) === 0)\n        sum += i + Math.floor(n / i);\n    return sum;\n  };\n  let d = [];\n  let amicableSum = 0;\n  for (let i=2; i<n; i++) d[i] = fsum(i);\n  for (let i=2; i<n; i++) {\n    let dsum = d[i];\n    if (d[dsum]===i && i!==dsum) amicableSum += i+dsum;\n  }\n  return amicableSum/2;\n};"
        }
      ],
      "tests": [
        {
          "text": "`sumAmicableNum(1000)` should return a number.",
          "testCode": "assert.isNumber(sumAmicableNum(1000));"
        },
        {
          "text": "`sumAmicableNum(1000)` should return 504.",
          "testCode": "assert.strictEqual(sumAmicableNum(1000), 504);"
        },
        {
          "text": "`sumAmicableNum(2000)` should return 2898.",
          "testCode": "assert.strictEqual(sumAmicableNum(2000), 2898);"
        },
        {
          "text": "`sumAmicableNum(5000)` should return 8442.",
          "testCode": "assert.strictEqual(sumAmicableNum(5000), 8442);"
        },
        {
          "text": "`sumAmicableNum(10000)` should return 31626.",
          "testCode": "assert.strictEqual(sumAmicableNum(10000), 31626);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301851,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-21-amicable-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5a51eabcad78bf416f316e2a",
      "title": "Problem 22: Names scores",
      "challengeType": 1,
      "dashedName": "problem-22-names-scores",
      "description": "Using `names`, an array defined in the background containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.\n\nFor example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.\n\nWhat is the total of all the name scores in the array?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function namesScores(arr) {\n\n  return arr;\n}\n\n// Only change code above this line\nconst test1 = ['THIS', 'IS', 'ONLY', 'A', 'TEST'];\nconst test2 = ['I', 'REPEAT', 'THIS', 'IS', 'ONLY', 'A', 'TEST'];\n\nnamesScores(test1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function nameScoreCalc(word) {\n  let sum = 0;\n  let alphabets = [\"\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\n  for (let i = 0 ; i < word.length; i++)\n    sum += alphabets.indexOf(word[i].toLowerCase());\n  return sum;\n}\n\nfunction namesScores(arr) {\n  arr = [...arr].sort();\n  arr.unshift('');\n  let total = 0;\n\n  for (let i = 1 ; i < arr.length; i++)\n    total += nameScoreCalc(arr[i]) * i;\n  return total;\n}\n\nconst test1 = ['THIS', 'IS', 'ONLY', 'A', 'TEST'];\nconst test2 = ['I', 'REPEAT', 'THIS', 'IS', 'ONLY', 'A', 'TEST'];"
        }
      ],
      "tests": [
        {
          "text": "`namesScores(test1)` should return a number.",
          "testCode": "assert.isNumber(namesScores(test1));"
        },
        {
          "text": "`namesScores(test1)` should return 791.",
          "testCode": "assert.strictEqual(namesScores(test1), 791);"
        },
        {
          "text": "`namesScores(test2)` should return 1468.",
          "testCode": "assert.strictEqual(namesScores(test2), 1468);"
        },
        {
          "text": "`namesScores(names)` should return 871198282.",
          "testCode": "assert.strictEqual(namesScores(names), 871198282);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301862,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-22-names-scores.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "const names = ['MARY','PATRICIA','LINDA','BARBARA','ELIZABETH','JENNIFER','MARIA','SUSAN','MARGARET','DOROTHY','LISA','NANCY','KAREN','BETTY','HELEN','SANDRA','DONNA','CAROL','RUTH','SHARON','MICHELLE','LAURA','SARAH','KIMBERLY','DEBORAH','JESSICA','SHIRLEY','CYNTHIA','ANGELA','MELISSA','BRENDA','AMY','ANNA','REBECCA','VIRGINIA','KATHLEEN','PAMELA','MARTHA','DEBRA','AMANDA','STEPHANIE','CAROLYN','CHRISTINE','MARIE','JANET','CATHERINE','FRANCES','ANN','JOYCE','DIANE','ALICE','JULIE','HEATHER','TERESA','DORIS','GLORIA','EVELYN','JEAN','CHERYL','MILDRED','KATHERINE','JOAN','ASHLEY','JUDITH','ROSE','JANICE','KELLY','NICOLE','JUDY','CHRISTINA','KATHY','THERESA','BEVERLY','DENISE','TAMMY','IRENE','JANE','LORI','RACHEL','MARILYN','ANDREA','KATHRYN','LOUISE','SARA','ANNE','JACQUELINE','WANDA','BONNIE','JULIA','RUBY','LOIS','TINA','PHYLLIS','NORMA','PAULA','DIANA','ANNIE','LILLIAN','EMILY','ROBIN','PEGGY','CRYSTAL','GLADYS','RITA','DAWN','CONNIE','FLORENCE','TRACY','EDNA','TIFFANY','CARMEN','ROSA','CINDY','GRACE','WENDY','VICTORIA','EDITH','KIM','SHERRY','SYLVIA','JOSEPHINE','THELMA','SHANNON','SHEILA','ETHEL','ELLEN','ELAINE','MARJORIE','CARRIE','CHARLOTTE','MONICA','ESTHER','PAULINE','EMMA','JUANITA','ANITA','RHONDA','HAZEL','AMBER','EVA','DEBBIE','APRIL','LESLIE','CLARA','LUCILLE','JAMIE','JOANNE','ELEANOR','VALERIE','DANIELLE','MEGAN','ALICIA','SUZANNE','MICHELE','GAIL','BERTHA','DARLENE','VERONICA','JILL','ERIN','GERALDINE','LAUREN','CATHY','JOANN','LORRAINE','LYNN','SALLY','REGINA','ERICA','BEATRICE','DOLORES','BERNICE','AUDREY','YVONNE','ANNETTE','JUNE','SAMANTHA','MARION','DANA','STACY','ANA','RENEE','IDA','VIVIAN','ROBERTA','HOLLY','BRITTANY','MELANIE','LORETTA','YOLANDA','JEANETTE','LAURIE','KATIE','KRISTEN','VANESSA','ALMA','SUE','ELSIE','BETH','JEANNE','VICKI','CARLA','TARA','ROSEMARY','EILEEN','TERRI','GERTRUDE','LUCY','TONYA','ELLA','STACEY','WILMA','GINA','KRISTIN','JESSIE','NATALIE','AGNES','VERA','WILLIE','CHARLENE','BESSIE','DELORES','MELINDA','PEARL','ARLENE','MAUREEN','COLLEEN','ALLISON','TAMARA','JOY','GEORGIA','CONSTANCE','LILLIE','CLAUDIA','JACKIE','MARCIA','TANYA','NELLIE','MINNIE','MARLENE','HEIDI','GLENDA','LYDIA','VIOLA','COURTNEY','MARIAN','STELLA','CAROLINE','DORA','JO','VICKIE','MATTIE','TERRY','MAXINE','IRMA','MABEL','MARSHA','MYRTLE','LENA','CHRISTY','DEANNA','PATSY','HILDA','GWENDOLYN','JENNIE','NORA','MARGIE','NINA','CASSANDRA','LEAH','PENNY','KAY','PRISCILLA','NAOMI','CAROLE','BRANDY','OLGA','BILLIE','DIANNE','TRACEY','LEONA','JENNY','FELICIA','SONIA','MIRIAM','VELMA','BECKY','BOBBIE','VIOLET','KRISTINA','TONI','MISTY','MAE','SHELLY','DAISY','RAMONA','SHERRI','ERIKA','KATRINA','CLAIRE','LINDSEY','LINDSAY','GENEVA','GUADALUPE','BELINDA','MARGARITA','SHERYL','CORA','FAYE','ADA','NATASHA','SABRINA','ISABEL','MARGUERITE','HATTIE','HARRIET','MOLLY','CECILIA','KRISTI','BRANDI','BLANCHE','SANDY','ROSIE','JOANNA','IRIS','EUNICE','ANGIE','INEZ','LYNDA','MADELINE','AMELIA','ALBERTA','GENEVIEVE','MONIQUE','JODI','JANIE','MAGGIE','KAYLA','SONYA','JAN','LEE','KRISTINE','CANDACE','FANNIE','MARYANN','OPAL','ALISON','YVETTE','MELODY','LUZ','SUSIE','OLIVIA','FLORA','SHELLEY','KRISTY','MAMIE','LULA','LOLA','VERNA','BEULAH','ANTOINETTE','CANDICE','JUANA','JEANNETTE','PAM','KELLI','HANNAH','WHITNEY','BRIDGET','KARLA','CELIA','LATOYA','PATTY','SHELIA','GAYLE','DELLA','VICKY','LYNNE','SHERI','MARIANNE','KARA','JACQUELYN','ERMA','BLANCA','MYRA','LETICIA','PAT','KRISTA','ROXANNE','ANGELICA','JOHNNIE','ROBYN','FRANCIS','ADRIENNE','ROSALIE','ALEXANDRA','BROOKE','BETHANY','SADIE','BERNADETTE','TRACI','JODY','KENDRA','JASMINE','NICHOLE','RACHAEL','CHELSEA','MABLE','ERNESTINE','MURIEL','MARCELLA','ELENA','KRYSTAL','ANGELINA','NADINE','KARI','ESTELLE','DIANNA','PAULETTE','LORA','MONA','DOREEN','ROSEMARIE','ANGEL','DESIREE','ANTONIA','HOPE','GINGER','JANIS','BETSY','CHRISTIE','FREDA','MERCEDES','MEREDITH','LYNETTE','TERI','CRISTINA','EULA','LEIGH','MEGHAN','SOPHIA','ELOISE','ROCHELLE','GRETCHEN','CECELIA','RAQUEL','HENRIETTA','ALYSSA','JANA','KELLEY','GWEN','KERRY','JENNA','TRICIA','LAVERNE','OLIVE','ALEXIS','TASHA','SILVIA','ELVIRA','CASEY','DELIA','SOPHIE','KATE','PATTI','LORENA','KELLIE','SONJA','LILA','LANA','DARLA','MAY','MINDY','ESSIE','MANDY','LORENE','ELSA','JOSEFINA','JEANNIE','MIRANDA','DIXIE','LUCIA','MARTA','FAITH','LELA','JOHANNA','SHARI','CAMILLE','TAMI','SHAWNA','ELISA','EBONY','MELBA','ORA','NETTIE','TABITHA','OLLIE','JAIME','WINIFRED','KRISTIE','MARINA','ALISHA','AIMEE','RENA','MYRNA','MARLA','TAMMIE','LATASHA','BONITA','PATRICE','RONDA','SHERRIE','ADDIE','FRANCINE','DELORIS','STACIE','ADRIANA','CHERI','SHELBY','ABIGAIL','CELESTE','JEWEL','CARA','ADELE','REBEKAH','LUCINDA','DORTHY','CHRIS','EFFIE','TRINA','REBA','SHAWN','SALLIE','AURORA','LENORA','ETTA','LOTTIE','KERRI','TRISHA','NIKKI','ESTELLA','FRANCISCA','JOSIE','TRACIE','MARISSA','KARIN','BRITTNEY','JANELLE','LOURDES','LAUREL','HELENE','FERN','ELVA','CORINNE','KELSEY','INA','BETTIE','ELISABETH','AIDA','CAITLIN','INGRID','IVA','EUGENIA','CHRISTA','GOLDIE','CASSIE','MAUDE','JENIFER','THERESE','FRANKIE','DENA','LORNA','JANETTE','LATONYA','CANDY','MORGAN','CONSUELO','TAMIKA','ROSETTA','DEBORA','CHERIE','POLLY','DINA','JEWELL','FAY','JILLIAN','DOROTHEA','NELL','TRUDY','ESPERANZA','PATRICA','KIMBERLEY','SHANNA','HELENA','CAROLINA','CLEO','STEFANIE','ROSARIO','OLA','JANINE','MOLLIE','LUPE','ALISA','LOU','MARIBEL','SUSANNE','BETTE','SUSANA','ELISE','CECILE','ISABELLE','LESLEY','JOCELYN','PAIGE','JONI','RACHELLE','LEOLA','DAPHNE','ALTA','ESTER','PETRA','GRACIELA','IMOGENE','JOLENE','KEISHA','LACEY','GLENNA','GABRIELA','KERI','URSULA','LIZZIE','KIRSTEN','SHANA','ADELINE','MAYRA','JAYNE','JACLYN','GRACIE','SONDRA','CARMELA','MARISA','ROSALIND','CHARITY','TONIA','BEATRIZ','MARISOL','CLARICE','JEANINE','SHEENA','ANGELINE','FRIEDA','LILY','ROBBIE','SHAUNA','MILLIE','CLAUDETTE','CATHLEEN','ANGELIA','GABRIELLE','AUTUMN','KATHARINE','SUMMER','JODIE','STACI','LEA','CHRISTI','JIMMIE','JUSTINE','ELMA','LUELLA','MARGRET','DOMINIQUE','SOCORRO','RENE','MARTINA','MARGO','MAVIS','CALLIE','BOBBI','MARITZA','LUCILE','LEANNE','JEANNINE','DEANA','AILEEN','LORIE','LADONNA','WILLA','MANUELA','GALE','SELMA','DOLLY','SYBIL','ABBY','LARA','DALE','IVY','DEE','WINNIE','MARCY','LUISA','JERI','MAGDALENA','OFELIA','MEAGAN','AUDRA','MATILDA','LEILA','CORNELIA','BIANCA','SIMONE','BETTYE','RANDI','VIRGIE','LATISHA','BARBRA','GEORGINA','ELIZA','LEANN','BRIDGETTE','RHODA','HALEY','ADELA','NOLA','BERNADINE','FLOSSIE','ILA','GRETA','RUTHIE','NELDA','MINERVA','LILLY','TERRIE','LETHA','HILARY','ESTELA','VALARIE','BRIANNA','ROSALYN','EARLINE','CATALINA','AVA','MIA','CLARISSA','LIDIA','CORRINE','ALEXANDRIA','CONCEPCION','TIA','SHARRON','RAE','DONA','ERICKA','JAMI','ELNORA','CHANDRA','LENORE','NEVA','MARYLOU','MELISA','TABATHA','SERENA','AVIS','ALLIE','SOFIA','JEANIE','ODESSA','NANNIE','HARRIETT','LORAINE','PENELOPE','MILAGROS','EMILIA','BENITA','ALLYSON','ASHLEE','TANIA','TOMMIE','ESMERALDA','KARINA','EVE','PEARLIE','ZELMA','MALINDA','NOREEN','TAMEKA','SAUNDRA','HILLARY','AMIE','ALTHEA','ROSALINDA','JORDAN','LILIA','ALANA','GAY','CLARE','ALEJANDRA','ELINOR','MICHAEL','LORRIE','JERRI','DARCY','EARNESTINE','CARMELLA','TAYLOR','NOEMI','MARCIE','LIZA','ANNABELLE','LOUISA','EARLENE','MALLORY','CARLENE','NITA','SELENA','TANISHA','KATY','JULIANNE','JOHN','LAKISHA','EDWINA','MARICELA','MARGERY','KENYA','DOLLIE','ROXIE','ROSLYN','KATHRINE','NANETTE','CHARMAINE','LAVONNE','ILENE','KRIS','TAMMI','SUZETTE','CORINE','KAYE','JERRY','MERLE','CHRYSTAL','LINA','DEANNE','LILIAN','JULIANA','ALINE','LUANN','KASEY','MARYANNE','EVANGELINE','COLETTE','MELVA','LAWANDA','YESENIA','NADIA','MADGE','KATHIE','EDDIE','OPHELIA','VALERIA','NONA','MITZI','MARI','GEORGETTE','CLAUDINE','FRAN','ALISSA','ROSEANN','LAKEISHA','SUSANNA','REVA','DEIDRE','CHASITY','SHEREE','CARLY','JAMES','ELVIA','ALYCE','DEIRDRE','GENA','BRIANA','ARACELI','KATELYN','ROSANNE','WENDI','TESSA','BERTA','MARVA','IMELDA','MARIETTA','MARCI','LEONOR','ARLINE','SASHA','MADELYN','JANNA','JULIETTE','DEENA','AURELIA','JOSEFA','AUGUSTA','LILIANA','YOUNG','CHRISTIAN','LESSIE','AMALIA','SAVANNAH','ANASTASIA','VILMA','NATALIA','ROSELLA','LYNNETTE','CORINA','ALFREDA','LEANNA','CAREY','AMPARO','COLEEN','TAMRA','AISHA','WILDA','KARYN','CHERRY','QUEEN','MAURA','MAI','EVANGELINA','ROSANNA','HALLIE','ERNA','ENID','MARIANA','LACY','JULIET','JACKLYN','FREIDA','MADELEINE','MARA','HESTER','CATHRYN','LELIA','CASANDRA','BRIDGETT','ANGELITA','JANNIE','DIONNE','ANNMARIE','KATINA','BERYL','PHOEBE','MILLICENT','KATHERYN','DIANN','CARISSA','MARYELLEN','LIZ','LAURI','HELGA','GILDA','ADRIAN','RHEA','MARQUITA','HOLLIE','TISHA','TAMERA','ANGELIQUE','FRANCESCA','BRITNEY','KAITLIN','LOLITA','FLORINE','ROWENA','REYNA','TWILA','FANNY','JANELL','INES','CONCETTA','BERTIE','ALBA','BRIGITTE','ALYSON','VONDA','PANSY','ELBA','NOELLE','LETITIA','KITTY','DEANN','BRANDIE','LOUELLA','LETA','FELECIA','SHARLENE','LESA','BEVERLEY','ROBERT','ISABELLA','HERMINIA','TERRA','CELINA','TORI','OCTAVIA','JADE','DENICE','GERMAINE','SIERRA','MICHELL','CORTNEY','NELLY','DORETHA','SYDNEY','DEIDRA','MONIKA','LASHONDA','JUDI','CHELSEY','ANTIONETTE','MARGOT','BOBBY','ADELAIDE','NAN','LEEANN','ELISHA','DESSIE','LIBBY','KATHI','GAYLA','LATANYA','MINA','MELLISA','KIMBERLEE','JASMIN','RENAE','ZELDA','ELDA','MA','JUSTINA','GUSSIE','EMILIE','CAMILLA','ABBIE','ROCIO','KAITLYN','JESSE','EDYTHE','ASHLEIGH','SELINA','LAKESHA','GERI','ALLENE','PAMALA','MICHAELA','DAYNA','CARYN','ROSALIA','SUN','JACQULINE','REBECA','MARYBETH','KRYSTLE','IOLA','DOTTIE','BENNIE','BELLE','AUBREY','GRISELDA','ERNESTINA','ELIDA','ADRIANNE','DEMETRIA','DELMA','CHONG','JAQUELINE','DESTINY','ARLEEN','VIRGINA','RETHA','FATIMA','TILLIE','ELEANORE','CARI','TREVA','BIRDIE','WILHELMINA','ROSALEE','MAURINE','LATRICE','YONG','JENA','TARYN','ELIA','DEBBY','MAUDIE','JEANNA','DELILAH','CATRINA','SHONDA','HORTENCIA','THEODORA','TERESITA','ROBBIN','DANETTE','MARYJANE','FREDDIE','DELPHINE','BRIANNE','NILDA','DANNA','CINDI','BESS','IONA','HANNA','ARIEL','WINONA','VIDA','ROSITA','MARIANNA','WILLIAM','RACHEAL','GUILLERMINA','ELOISA','CELESTINE','CAREN','MALISSA','LONA','CHANTEL','SHELLIE','MARISELA','LEORA','AGATHA','SOLEDAD','MIGDALIA','IVETTE','CHRISTEN','ATHENA','JANEL','CHLOE','VEDA','PATTIE','TESSIE','TERA','MARILYNN','LUCRETIA','KARRIE','DINAH','DANIELA','ALECIA','ADELINA','VERNICE','SHIELA','PORTIA','MERRY','LASHAWN','DEVON','DARA','TAWANA','OMA','VERDA','CHRISTIN','ALENE','ZELLA','SANDI','RAFAELA','MAYA','KIRA','CANDIDA','ALVINA','SUZAN','SHAYLA','LYN','LETTIE','ALVA','SAMATHA','ORALIA','MATILDE','MADONNA','LARISSA','VESTA','RENITA','INDIA','DELOIS','SHANDA','PHILLIS','LORRI','ERLINDA','CRUZ','CATHRINE','BARB','ZOE','ISABELL','IONE','GISELA','CHARLIE','VALENCIA','ROXANNA','MAYME','KISHA','ELLIE','MELLISSA','DORRIS','DALIA','BELLA','ANNETTA','ZOILA','RETA','REINA','LAURETTA','KYLIE','CHRISTAL','PILAR','CHARLA','ELISSA','TIFFANI','TANA','PAULINA','LEOTA','BREANNA','JAYME','CARMEL','VERNELL','TOMASA','MANDI','DOMINGA','SANTA','MELODIE','LURA','ALEXA','TAMELA','RYAN','MIRNA','KERRIE','VENUS','NOEL','FELICITA','CRISTY','CARMELITA','BERNIECE','ANNEMARIE','TIARA','ROSEANNE','MISSY','CORI','ROXANA','PRICILLA','KRISTAL','JUNG','ELYSE','HAYDEE','ALETHA','BETTINA','MARGE','GILLIAN','FILOMENA','CHARLES','ZENAIDA','HARRIETTE','CARIDAD','VADA','UNA','ARETHA','PEARLINE','MARJORY','MARCELA','FLOR','EVETTE','ELOUISE','ALINA','TRINIDAD','DAVID','DAMARIS','CATHARINE','CARROLL','BELVA','NAKIA','MARLENA','LUANNE','LORINE','KARON','DORENE','DANITA','BRENNA','TATIANA','SAMMIE','LOUANN','LOREN','JULIANNA','ANDRIA','PHILOMENA','LUCILA','LEONORA','DOVIE','ROMONA','MIMI','JACQUELIN','GAYE','TONJA','MISTI','JOE','GENE','CHASTITY','STACIA','ROXANN','MICAELA','NIKITA','MEI','VELDA','MARLYS','JOHNNA','AURA','LAVERN','IVONNE','HAYLEY','NICKI','MAJORIE','HERLINDA','GEORGE','ALPHA','YADIRA','PERLA','GREGORIA','DANIEL','ANTONETTE','SHELLI','MOZELLE','MARIAH','JOELLE','CORDELIA','JOSETTE','CHIQUITA','TRISTA','LOUIS','LAQUITA','GEORGIANA','CANDI','SHANON','LONNIE','HILDEGARD','CECIL','VALENTINA','STEPHANY','MAGDA','KAROL','GERRY','GABRIELLA','TIANA','ROMA','RICHELLE','RAY','PRINCESS','OLETA','JACQUE','IDELLA','ALAINA','SUZANNA','JOVITA','BLAIR','TOSHA','RAVEN','NEREIDA','MARLYN','KYLA','JOSEPH','DELFINA','TENA','STEPHENIE','SABINA','NATHALIE','MARCELLE','GERTIE','DARLEEN','THEA','SHARONDA','SHANTEL','BELEN','VENESSA','ROSALINA','ONA','GENOVEVA','COREY','CLEMENTINE','ROSALBA','RENATE','RENATA','MI','IVORY','GEORGIANNA','FLOY','DORCAS','ARIANA','TYRA','THEDA','MARIAM','JULI','JESICA','DONNIE','VIKKI','VERLA','ROSELYN','MELVINA','JANNETTE','GINNY','DEBRAH','CORRIE','ASIA','VIOLETA','MYRTIS','LATRICIA','COLLETTE','CHARLEEN','ANISSA','VIVIANA','TWYLA','PRECIOUS','NEDRA','LATONIA','LAN','HELLEN','FABIOLA','ANNAMARIE','ADELL','SHARYN','CHANTAL','NIKI','MAUD','LIZETTE','LINDY','KIA','KESHA','JEANA','DANELLE','CHARLINE','CHANEL','CARROL','VALORIE','LIA','DORTHA','CRISTAL','SUNNY','LEONE','LEILANI','GERRI','DEBI','ANDRA','KESHIA','IMA','EULALIA','EASTER','DULCE','NATIVIDAD','LINNIE','KAMI','GEORGIE','CATINA','BROOK','ALDA','WINNIFRED','SHARLA','RUTHANN','MEAGHAN','MAGDALENE','LISSETTE','ADELAIDA','VENITA','TRENA','SHIRLENE','SHAMEKA','ELIZEBETH','DIAN','SHANTA','MICKEY','LATOSHA','CARLOTTA','WINDY','SOON','ROSINA','MARIANN','LEISA','JONNIE','DAWNA','CATHIE','BILLY','ASTRID','SIDNEY','LAUREEN','JANEEN','HOLLI','FAWN','VICKEY','TERESSA','SHANTE','RUBYE','MARCELINA','CHANDA','CARY','TERESE','SCARLETT','MARTY','MARNIE','LULU','LISETTE','JENIFFER','ELENOR','DORINDA','DONITA','CARMAN','BERNITA','ALTAGRACIA','ALETA','ADRIANNA','ZORAIDA','RONNIE','NICOLA','LYNDSEY','KENDALL','JANINA','CHRISSY','AMI','STARLA','PHYLIS','PHUONG','KYRA','CHARISSE','BLANCH','SANJUANITA','RONA','NANCI','MARILEE','MARANDA','CORY','BRIGETTE','SANJUANA','MARITA','KASSANDRA','JOYCELYN','IRA','FELIPA','CHELSIE','BONNY','MIREYA','LORENZA','KYONG','ILEANA','CANDELARIA','TONY','TOBY','SHERIE','OK','MARK','LUCIE','LEATRICE','LAKESHIA','GERDA','EDIE','BAMBI','MARYLIN','LAVON','HORTENSE','GARNET','EVIE','TRESSA','SHAYNA','LAVINA','KYUNG','JEANETTA','SHERRILL','SHARA','PHYLISS','MITTIE','ANABEL','ALESIA','THUY','TAWANDA','RICHARD','JOANIE','TIFFANIE','LASHANDA','KARISSA','ENRIQUETA','DARIA','DANIELLA','CORINNA','ALANNA','ABBEY','ROXANE','ROSEANNA','MAGNOLIA','LIDA','KYLE','JOELLEN','ERA','CORAL','CARLEEN','TRESA','PEGGIE','NOVELLA','NILA','MAYBELLE','JENELLE','CARINA','NOVA','MELINA','MARQUERITE','MARGARETTE','JOSEPHINA','EVONNE','DEVIN','CINTHIA','ALBINA','TOYA','TAWNYA','SHERITA','SANTOS','MYRIAM','LIZABETH','LISE','KEELY','JENNI','GISELLE','CHERYLE','ARDITH','ARDIS','ALESHA','ADRIANE','SHAINA','LINNEA','KAROLYN','HONG','FLORIDA','FELISHA','DORI','DARCI','ARTIE','ARMIDA','ZOLA','XIOMARA','VERGIE','SHAMIKA','NENA','NANNETTE','MAXIE','LOVIE','JEANE','JAIMIE','INGE','FARRAH','ELAINA','CAITLYN','STARR','FELICITAS','CHERLY','CARYL','YOLONDA','YASMIN','TEENA','PRUDENCE','PENNIE','NYDIA','MACKENZIE','ORPHA','MARVEL','LIZBETH','LAURETTE','JERRIE','HERMELINDA','CAROLEE','TIERRA','MIRIAN','META','MELONY','KORI','JENNETTE','JAMILA','ENA','ANH','YOSHIKO','SUSANNAH','SALINA','RHIANNON','JOLEEN','CRISTINE','ASHTON','ARACELY','TOMEKA','SHALONDA','MARTI','LACIE','KALA','JADA','ILSE','HAILEY','BRITTANI','ZONA','SYBLE','SHERRYL','RANDY','NIDIA','MARLO','KANDICE','KANDI','DEB','DEAN','AMERICA','ALYCIA','TOMMY','RONNA','NORENE','MERCY','JOSE','INGEBORG','GIOVANNA','GEMMA','CHRISTEL','AUDRY','ZORA','VITA','VAN','TRISH','STEPHAINE','SHIRLEE','SHANIKA','MELONIE','MAZIE','JAZMIN','INGA','HOA','HETTIE','GERALYN','FONDA','ESTRELLA','ADELLA','SU','SARITA','RINA','MILISSA','MARIBETH','GOLDA','EVON','ETHELYN','ENEDINA','CHERISE','CHANA','VELVA','TAWANNA','SADE','MIRTA','LI','KARIE','JACINTA','ELNA','DAVINA','CIERRA','ASHLIE','ALBERTHA','TANESHA','STEPHANI','NELLE','MINDI','LU','LORINDA','LARUE','FLORENE','DEMETRA','DEDRA','CIARA','CHANTELLE','ASHLY','SUZY','ROSALVA','NOELIA','LYDA','LEATHA','KRYSTYNA','KRISTAN','KARRI','DARLINE','DARCIE','CINDA','CHEYENNE','CHERRIE','AWILDA','ALMEDA','ROLANDA','LANETTE','JERILYN','GISELE','EVALYN','CYNDI','CLETA','CARIN','ZINA','ZENA','VELIA','TANIKA','PAUL','CHARISSA','THOMAS','TALIA','MARGARETE','LAVONDA','KAYLEE','KATHLENE','JONNA','IRENA','ILONA','IDALIA','CANDIS','CANDANCE','BRANDEE','ANITRA','ALIDA','SIGRID','NICOLETTE','MARYJO','LINETTE','HEDWIG','CHRISTIANA','CASSIDY','ALEXIA','TRESSIE','MODESTA','LUPITA','LITA','GLADIS','EVELIA','DAVIDA','CHERRI','CECILY','ASHELY','ANNABEL','AGUSTINA','WANITA','SHIRLY','ROSAURA','HULDA','EUN','BAILEY','YETTA','VERONA','THOMASINA','SIBYL','SHANNAN','MECHELLE','LUE','LEANDRA','LANI','KYLEE','KANDY','JOLYNN','FERNE','EBONI','CORENE','ALYSIA','ZULA','NADA','MOIRA','LYNDSAY','LORRETTA','JUAN','JAMMIE','HORTENSIA','GAYNELL','CAMERON','ADRIA','VINA','VICENTA','TANGELA','STEPHINE','NORINE','NELLA','LIANA','LESLEE','KIMBERELY','ILIANA','GLORY','FELICA','EMOGENE','ELFRIEDE','EDEN','EARTHA','CARMA','BEA','OCIE','MARRY','LENNIE','KIARA','JACALYN','CARLOTA','ARIELLE','YU','STAR','OTILIA','KIRSTIN','KACEY','JOHNETTA','JOEY','JOETTA','JERALDINE','JAUNITA','ELANA','DORTHEA','CAMI','AMADA','ADELIA','VERNITA','TAMAR','SIOBHAN','RENEA','RASHIDA','OUIDA','ODELL','NILSA','MERYL','KRISTYN','JULIETA','DANICA','BREANNE','AUREA','ANGLEA','SHERRON','ODETTE','MALIA','LORELEI','LIN','LEESA','KENNA','KATHLYN','FIONA','CHARLETTE','SUZIE','SHANTELL','SABRA','RACQUEL','MYONG','MIRA','MARTINE','LUCIENNE','LAVADA','JULIANN','JOHNIE','ELVERA','DELPHIA','CLAIR','CHRISTIANE','CHAROLETTE','CARRI','AUGUSTINE','ASHA','ANGELLA','PAOLA','NINFA','LEDA','LAI','EDA','SUNSHINE','STEFANI','SHANELL','PALMA','MACHELLE','LISSA','KECIA','KATHRYNE','KARLENE','JULISSA','JETTIE','JENNIFFER','HUI','CORRINA','CHRISTOPHER','CAROLANN','ALENA','TESS','ROSARIA','MYRTICE','MARYLEE','LIANE','KENYATTA','JUDIE','JANEY','IN','ELMIRA','ELDORA','DENNA','CRISTI','CATHI','ZAIDA','VONNIE','VIVA','VERNIE','ROSALINE','MARIELA','LUCIANA','LESLI','KARAN','FELICE','DENEEN','ADINA','WYNONA','TARSHA','SHERON','SHASTA','SHANITA','SHANI','SHANDRA','RANDA','PINKIE','PARIS','NELIDA','MARILOU','LYLA','LAURENE','LACI','JOI','JANENE','DOROTHA','DANIELE','DANI','CAROLYNN','CARLYN','BERENICE','AYESHA','ANNELIESE','ALETHEA','THERSA','TAMIKO','RUFINA','OLIVA','MOZELL','MARYLYN','MADISON','KRISTIAN','KATHYRN','KASANDRA','KANDACE','JANAE','GABRIEL','DOMENICA','DEBBRA','DANNIELLE','CHUN','BUFFY','BARBIE','ARCELIA','AJA','ZENOBIA','SHAREN','SHAREE','PATRICK','PAGE','MY','LAVINIA','KUM','KACIE','JACKELINE','HUONG','FELISA','EMELIA','ELEANORA','CYTHIA','CRISTIN','CLYDE','CLARIBEL','CARON','ANASTACIA','ZULMA','ZANDRA','YOKO','TENISHA','SUSANN','SHERILYN','SHAY','SHAWANDA','SABINE','ROMANA','MATHILDA','LINSEY','KEIKO','JOANA','ISELA','GRETTA','GEORGETTA','EUGENIE','DUSTY','DESIRAE','DELORA','CORAZON','ANTONINA','ANIKA','WILLENE','TRACEE','TAMATHA','REGAN','NICHELLE','MICKIE','MAEGAN','LUANA','LANITA','KELSIE','EDELMIRA','BREE','AFTON','TEODORA','TAMIE','SHENA','MEG','LINH','KELI','KACI','DANYELLE','BRITT','ARLETTE','ALBERTINE','ADELLE','TIFFINY','STORMY','SIMONA','NUMBERS','NICOLASA','NICHOL','NIA','NAKISHA','MEE','MAIRA','LOREEN','KIZZY','JOHNNY','JAY','FALLON','CHRISTENE','BOBBYE','ANTHONY','YING','VINCENZA','TANJA','RUBIE','RONI','QUEENIE','MARGARETT','KIMBERLI','IRMGARD','IDELL','HILMA','EVELINA','ESTA','EMILEE','DENNISE','DANIA','CARL','CARIE','ANTONIO','WAI','SANG','RISA','RIKKI','PARTICIA','MUI','MASAKO','MARIO','LUVENIA','LOREE','LONI','LIEN','KEVIN','GIGI','FLORENCIA','DORIAN','DENITA','DALLAS','CHI','BILLYE','ALEXANDER','TOMIKA','SHARITA','RANA','NIKOLE','NEOMA','MARGARITE','MADALYN','LUCINA','LAILA','KALI','JENETTE','GABRIELE','EVELYNE','ELENORA','CLEMENTINA','ALEJANDRINA','ZULEMA','VIOLETTE','VANNESSA','THRESA','RETTA','PIA','PATIENCE','NOELLA','NICKIE','JONELL','DELTA','CHUNG','CHAYA','CAMELIA','BETHEL','ANYA','ANDREW','THANH','SUZANN','SPRING','SHU','MILA','LILLA','LAVERNA','KEESHA','KATTIE','GIA','GEORGENE','EVELINE','ESTELL','ELIZBETH','VIVIENNE','VALLIE','TRUDIE','STEPHANE','MICHEL','MAGALY','MADIE','KENYETTA','KARREN','JANETTA','HERMINE','HARMONY','DRUCILLA','DEBBI','CELESTINA','CANDIE','BRITNI','BECKIE','AMINA','ZITA','YUN','YOLANDE','VIVIEN','VERNETTA','TRUDI','SOMMER','PEARLE','PATRINA','OSSIE','NICOLLE','LOYCE','LETTY','LARISA','KATHARINA','JOSELYN','JONELLE','JENELL','IESHA','HEIDE','FLORINDA','FLORENTINA','FLO','ELODIA','DORINE','BRUNILDA','BRIGID','ASHLI','ARDELLA','TWANA','THU','TARAH','SUNG','SHEA','SHAVON','SHANE','SERINA','RAYNA','RAMONITA','NGA','MARGURITE','LUCRECIA','KOURTNEY','KATI','JESUS','JESENIA','DIAMOND','CRISTA','AYANA','ALICA','ALIA','VINNIE','SUELLEN','ROMELIA','RACHELL','PIPER','OLYMPIA','MICHIKO','KATHALEEN','JOLIE','JESSI','JANESSA','HANA','HA','ELEASE','CARLETTA','BRITANY','SHONA','SALOME','ROSAMOND','REGENA','RAINA','NGOC','NELIA','LOUVENIA','LESIA','LATRINA','LATICIA','LARHONDA','JINA','JACKI','HOLLIS','HOLLEY','EMMY','DEEANN','CORETTA','ARNETTA','VELVET','THALIA','SHANICE','NETA','MIKKI','MICKI','LONNA','LEANA','LASHUNDA','KILEY','JOYE','JACQULYN','IGNACIA','HYUN','HIROKO','HENRY','HENRIETTE','ELAYNE','DELINDA','DARNELL','DAHLIA','COREEN','CONSUELA','CONCHITA','CELINE','BABETTE','AYANNA','ANETTE','ALBERTINA','SKYE','SHAWNEE','SHANEKA','QUIANA','PAMELIA','MIN','MERRI','MERLENE','MARGIT','KIESHA','KIERA','KAYLENE','JODEE','JENISE','ERLENE','EMMIE','ELSE','DARYL','DALILA','DAISEY','CODY','CASIE','BELIA','BABARA','VERSIE','VANESA','SHELBA','SHAWNDA','SAM','NORMAN','NIKIA','NAOMA','MARNA','MARGERET','MADALINE','LAWANA','KINDRA','JUTTA','JAZMINE','JANETT','HANNELORE','GLENDORA','GERTRUD','GARNETT','FREEDA','FREDERICA','FLORANCE','FLAVIA','DENNIS','CARLINE','BEVERLEE','ANJANETTE','VALDA','TRINITY','TAMALA','STEVIE','SHONNA','SHA','SARINA','ONEIDA','MICAH','MERILYN','MARLEEN','LURLINE','LENNA','KATHERIN','JIN','JENI','HAE','GRACIA','GLADY','FARAH','ERIC','ENOLA','EMA','DOMINQUE','DEVONA','DELANA','CECILA','CAPRICE','ALYSHA','ALI','ALETHIA','VENA','THERESIA','TAWNY','SONG','SHAKIRA','SAMARA','SACHIKO','RACHELE','PAMELLA','NICKY','MARNI','MARIEL','MAREN','MALISA','LIGIA','LERA','LATORIA','LARAE','KIMBER','KATHERN','KAREY','JENNEFER','JANETH','HALINA','FREDIA','DELISA','DEBROAH','CIERA','CHIN','ANGELIKA','ANDREE','ALTHA','YEN','VIVAN','TERRESA','TANNA','SUK','SUDIE','SOO','SIGNE','SALENA','RONNI','REBBECCA','MYRTIE','MCKENZIE','MALIKA','MAIDA','LOAN','LEONARDA','KAYLEIGH','FRANCE','ETHYL','ELLYN','DAYLE','CAMMIE','BRITTNI','BIRGIT','AVELINA','ASUNCION','ARIANNA','AKIKO','VENICE','TYESHA','TONIE','TIESHA','TAKISHA','STEFFANIE','SINDY','SANTANA','MEGHANN','MANDA','MACIE','LADY','KELLYE','KELLEE','JOSLYN','JASON','INGER','INDIRA','GLINDA','GLENNIS','FERNANDA','FAUSTINA','ENEIDA','ELICIA','DOT','DIGNA','DELL','ARLETTA','ANDRE','WILLIA','TAMMARA','TABETHA','SHERRELL','SARI','REFUGIO','REBBECA','PAULETTA','NIEVES','NATOSHA','NAKITA','MAMMIE','KENISHA','KAZUKO','KASSIE','GARY','EARLEAN','DAPHINE','CORLISS','CLOTILDE','CAROLYNE','BERNETTA','AUGUSTINA','AUDREA','ANNIS','ANNABELL','YAN','TENNILLE','TAMICA','SELENE','SEAN','ROSANA','REGENIA','QIANA','MARKITA','MACY','LEEANNE','LAURINE','KYM','JESSENIA','JANITA','GEORGINE','GENIE','EMIKO','ELVIE','DEANDRA','DAGMAR','CORIE','COLLEN','CHERISH','ROMAINE','PORSHA','PEARLENE','MICHELINE','MERNA','MARGORIE','MARGARETTA','LORE','KENNETH','JENINE','HERMINA','FREDERICKA','ELKE','DRUSILLA','DORATHY','DIONE','DESIRE','CELENA','BRIGIDA','ANGELES','ALLEGRA','THEO','TAMEKIA','SYNTHIA','STEPHEN','SOOK','SLYVIA','ROSANN','REATHA','RAYE','MARQUETTA','MARGART','LING','LAYLA','KYMBERLY','KIANA','KAYLEEN','KATLYN','KARMEN','JOELLA','IRINA','EMELDA','ELENI','DETRA','CLEMMIE','CHERYLL','CHANTELL','CATHEY','ARNITA','ARLA','ANGLE','ANGELIC','ALYSE','ZOFIA','THOMASINE','TENNIE','SON','SHERLY','SHERLEY','SHARYL','REMEDIOS','PETRINA','NICKOLE','MYUNG','MYRLE','MOZELLA','LOUANNE','LISHA','LATIA','LANE','KRYSTA','JULIENNE','JOEL','JEANENE','JACQUALINE','ISAURA','GWENDA','EARLEEN','DONALD','CLEOPATRA','CARLIE','AUDIE','ANTONIETTA','ALISE','ALEX','VERDELL','VAL','TYLER','TOMOKO','THAO','TALISHA','STEVEN','SO','SHEMIKA','SHAUN','SCARLET','SAVANNA','SANTINA','ROSIA','RAEANN','ODILIA','NANA','MINNA','MAGAN','LYNELLE','LE','KARMA','JOEANN','IVANA','INELL','ILANA','HYE','HONEY','HEE','GUDRUN','FRANK','DREAMA','CRISSY','CHANTE','CARMELINA','ARVILLA','ARTHUR','ANNAMAE','ALVERA','ALEIDA','AARON','YEE','YANIRA','VANDA','TIANNA','TAM','STEFANIA','SHIRA','PERRY','NICOL','NANCIE','MONSERRATE','MINH','MELYNDA','MELANY','MATTHEW','LOVELLA','LAURE','KIRBY','KACY','JACQUELYNN','HYON','GERTHA','FRANCISCO','ELIANA','CHRISTENA','CHRISTEEN','CHARISE','CATERINA','CARLEY','CANDYCE','ARLENA','AMMIE','YANG','WILLETTE','VANITA','TUYET','TINY','SYREETA','SILVA','SCOTT','RONALD','PENNEY','NYLA','MICHAL','MAURICE','MARYAM','MARYA','MAGEN','LUDIE','LOMA','LIVIA','LANELL','KIMBERLIE','JULEE','DONETTA','DIEDRA','DENISHA','DEANE','DAWNE','CLARINE','CHERRYL','BRONWYN','BRANDON','ALLA','VALERY','TONDA','SUEANN','SORAYA','SHOSHANA','SHELA','SHARLEEN','SHANELLE','NERISSA','MICHEAL','MERIDITH','MELLIE','MAYE','MAPLE','MAGARET','LUIS','LILI','LEONILA','LEONIE','LEEANNA','LAVONIA','LAVERA','KRISTEL','KATHEY','KATHE','JUSTIN','JULIAN','JIMMY','JANN','ILDA','HILDRED','HILDEGARDE','GENIA','FUMIKO','EVELIN','ERMELINDA','ELLY','DUNG','DOLORIS','DIONNA','DANAE','BERNEICE','ANNICE','ALIX','VERENA','VERDIE','TRISTAN','SHAWNNA','SHAWANA','SHAUNNA','ROZELLA','RANDEE','RANAE','MILAGRO','LYNELL','LUISE','LOUIE','LOIDA','LISBETH','KARLEEN','JUNITA','JONA','ISIS','HYACINTH','HEDY','GWENN','ETHELENE','ERLINE','EDWARD','DONYA','DOMONIQUE','DELICIA','DANNETTE','CICELY','BRANDA','BLYTHE','BETHANN','ASHLYN','ANNALEE','ALLINE','YUKO','VELLA','TRANG','TOWANDA','TESHA','SHERLYN','NARCISA','MIGUELINA','MERI','MAYBELL','MARLANA','MARGUERITA','MADLYN','LUNA','LORY','LORIANN','LIBERTY','LEONORE','LEIGHANN','LAURICE','LATESHA','LARONDA','KATRICE','KASIE','KARL','KALEY','JADWIGA','GLENNIE','GEARLDINE','FRANCINA','EPIFANIA','DYAN','DORIE','DIEDRE','DENESE','DEMETRICE','DELENA','DARBY','CRISTIE','CLEORA','CATARINA','CARISA','BERNIE','BARBERA','ALMETA','TRULA','TEREASA','SOLANGE','SHEILAH','SHAVONNE','SANORA','ROCHELL','MATHILDE','MARGARETA','MAIA','LYNSEY','LAWANNA','LAUNA','KENA','KEENA','KATIA','JAMEY','GLYNDA','GAYLENE','ELVINA','ELANOR','DANUTA','DANIKA','CRISTEN','CORDIE','COLETTA','CLARITA','CARMON','BRYNN','AZUCENA','AUNDREA','ANGELE','YI','WALTER','VERLIE','VERLENE','TAMESHA','SILVANA','SEBRINA','SAMIRA','REDA','RAYLENE','PENNI','PANDORA','NORAH','NOMA','MIREILLE','MELISSIA','MARYALICE','LARAINE','KIMBERY','KARYL','KARINE','KAM','JOLANDA','JOHANA','JESUSA','JALEESA','JAE','JACQUELYNE','IRISH','ILUMINADA','HILARIA','HANH','GENNIE','FRANCIE','FLORETTA','EXIE','EDDA','DREMA','DELPHA','BEV','BARBAR','ASSUNTA','ARDELL','ANNALISA','ALISIA','YUKIKO','YOLANDO','WONDA','WEI','WALTRAUD','VETA','TEQUILA','TEMEKA','TAMEIKA','SHIRLEEN','SHENITA','PIEDAD','OZELLA','MIRTHA','MARILU','KIMIKO','JULIANE','JENICE','JEN','JANAY','JACQUILINE','HILDE','FE','FAE','EVAN','EUGENE','ELOIS','ECHO','DEVORAH','CHAU','BRINDA','BETSEY','ARMINDA','ARACELIS','APRYL','ANNETT','ALISHIA','VEOLA','USHA','TOSHIKO','THEOLA','TASHIA','TALITHA','SHERY','RUDY','RENETTA','REIKO','RASHEEDA','OMEGA','OBDULIA','MIKA','MELAINE','MEGGAN','MARTIN','MARLEN','MARGET','MARCELINE','MANA','MAGDALEN','LIBRADA','LEZLIE','LEXIE','LATASHIA','LASANDRA','KELLE','ISIDRA','ISA','INOCENCIA','GWYN','FRANCOISE','ERMINIA','ERINN','DIMPLE','DEVORA','CRISELDA','ARMANDA','ARIE','ARIANE','ANGELO','ANGELENA','ALLEN','ALIZA','ADRIENE','ADALINE','XOCHITL','TWANNA','TRAN','TOMIKO','TAMISHA','TAISHA','SUSY','SIU','RUTHA','ROXY','RHONA','RAYMOND','OTHA','NORIKO','NATASHIA','MERRIE','MELVIN','MARINDA','MARIKO','MARGERT','LORIS','LIZZETTE','LEISHA','KAILA','KA','JOANNIE','JERRICA','JENE','JANNET','JANEE','JACINDA','HERTA','ELENORE','DORETTA','DELAINE','DANIELL','CLAUDIE','CHINA','BRITTA','APOLONIA','AMBERLY','ALEASE','YURI','YUK','WEN','WANETA','UTE','TOMI','SHARRI','SANDIE','ROSELLE','REYNALDA','RAGUEL','PHYLICIA','PATRIA','OLIMPIA','ODELIA','MITZIE','MITCHELL','MISS','MINDA','MIGNON','MICA','MENDY','MARIVEL','MAILE','LYNETTA','LAVETTE','LAURYN','LATRISHA','LAKIESHA','KIERSTEN','KARY','JOSPHINE','JOLYN','JETTA','JANISE','JACQUIE','IVELISSE','GLYNIS','GIANNA','GAYNELLE','EMERALD','DEMETRIUS','DANYELL','DANILLE','DACIA','CORALEE','CHER','CEOLA','BRETT','BELL','ARIANNE','ALESHIA','YUNG','WILLIEMAE','TROY','TRINH','THORA','TAI','SVETLANA','SHERIKA','SHEMEKA','SHAUNDA','ROSELINE','RICKI','MELDA','MALLIE','LAVONNA','LATINA','LARRY','LAQUANDA','LALA','LACHELLE','KLARA','KANDIS','JOHNA','JEANMARIE','JAYE','HANG','GRAYCE','GERTUDE','EMERITA','EBONIE','CLORINDA','CHING','CHERY','CAROLA','BREANN','BLOSSOM','BERNARDINE','BECKI','ARLETHA','ARGELIA','ARA','ALITA','YULANDA','YON','YESSENIA','TOBI','TASIA','SYLVIE','SHIRL','SHIRELY','SHERIDAN','SHELLA','SHANTELLE','SACHA','ROYCE','REBECKA','REAGAN','PROVIDENCIA','PAULENE','MISHA','MIKI','MARLINE','MARICA','LORITA','LATOYIA','LASONYA','KERSTIN','KENDA','KEITHA','KATHRIN','JAYMIE','JACK','GRICELDA','GINETTE','ERYN','ELINA','ELFRIEDA','DANYEL','CHEREE','CHANELLE','BARRIE','AVERY','AURORE','ANNAMARIA','ALLEEN','AILENE','AIDE','YASMINE','VASHTI','VALENTINE','TREASA','TORY','TIFFANEY','SHERYLL','SHARIE','SHANAE','SAU','RAISA','PA','NEDA','MITSUKO','MIRELLA','MILDA','MARYANNA','MARAGRET','MABELLE','LUETTA','LORINA','LETISHA','LATARSHA','LANELLE','LAJUANA','KRISSY','KARLY','KARENA','JON','JESSIKA','JERICA','JEANELLE','JANUARY','JALISA','JACELYN','IZOLA','IVEY','GREGORY','EUNA','ETHA','DREW','DOMITILA','DOMINICA','DAINA','CREOLA','CARLI','CAMIE','BUNNY','BRITTNY','ASHANTI','ANISHA','ALEEN','ADAH','YASUKO','WINTER','VIKI','VALRIE','TONA','TINISHA','THI','TERISA','TATUM','TANEKA','SIMONNE','SHALANDA','SERITA','RESSIE','REFUGIA','PAZ','OLENE','NA','MERRILL','MARGHERITA','MANDIE','MAN','MAIRE','LYNDIA','LUCI','LORRIANE','LORETA','LEONIA','LAVONA','LASHAWNDA','LAKIA','KYOKO','KRYSTINA','KRYSTEN','KENIA','KELSI','JUDE','JEANICE','ISOBEL','GEORGIANN','GENNY','FELICIDAD','EILENE','DEON','DELOISE','DEEDEE','DANNIE','CONCEPTION','CLORA','CHERILYN','CHANG','CALANDRA','BERRY','ARMANDINA','ANISA','ULA','TIMOTHY','TIERA','THERESSA','STEPHANIA','SIMA','SHYLA','SHONTA','SHERA','SHAQUITA','SHALA','SAMMY','ROSSANA','NOHEMI','NERY','MORIAH','MELITA','MELIDA','MELANI','MARYLYNN','MARISHA','MARIETTE','MALORIE','MADELENE','LUDIVINA','LORIA','LORETTE','LORALEE','LIANNE','LEON','LAVENIA','LAURINDA','LASHON','KIT','KIMI','KEILA','KATELYNN','KAI','JONE','JOANE','JI','JAYNA','JANELLA','JA','HUE','HERTHA','FRANCENE','ELINORE','DESPINA','DELSIE','DEEDRA','CLEMENCIA','CARRY','CAROLIN','CARLOS','BULAH','BRITTANIE','BOK','BLONDELL','BIBI','BEAULAH','BEATA','ANNITA','AGRIPINA','VIRGEN','VALENE','UN','TWANDA','TOMMYE','TOI','TARRA','TARI','TAMMERA','SHAKIA','SADYE','RUTHANNE','ROCHEL','RIVKA','PURA','NENITA','NATISHA','MING','MERRILEE','MELODEE','MARVIS','LUCILLA','LEENA','LAVETA','LARITA','LANIE','KEREN','ILEEN','GEORGEANN','GENNA','GENESIS','FRIDA','EWA','EUFEMIA','EMELY','ELA','EDYTH','DEONNA','DEADRA','DARLENA','CHANELL','CHAN','CATHERN','CASSONDRA','CASSAUNDRA','BERNARDA','BERNA','ARLINDA','ANAMARIA','ALBERT','WESLEY','VERTIE','VALERI','TORRI','TATYANA','STASIA','SHERISE','SHERILL','SEASON','SCOTTIE','SANDA','RUTHE','ROSY','ROBERTO','ROBBI','RANEE','QUYEN','PEARLY','PALMIRA','ONITA','NISHA','NIESHA','NIDA','NEVADA','NAM','MERLYN','MAYOLA','MARYLOUISE','MARYLAND','MARX','MARTH','MARGENE','MADELAINE','LONDA','LEONTINE','LEOMA','LEIA','LAWRENCE','LAURALEE','LANORA','LAKITA','KIYOKO','KETURAH','KATELIN','KAREEN','JONIE','JOHNETTE','JENEE','JEANETT','IZETTA','HIEDI','HEIKE','HASSIE','HAROLD','GIUSEPPINA','GEORGANN','FIDELA','FERNANDE','ELWANDA','ELLAMAE','ELIZ','DUSTI','DOTTY','CYNDY','CORALIE','CELESTA','ARGENTINA','ALVERTA','XENIA','WAVA','VANETTA','TORRIE','TASHINA','TANDY','TAMBRA','TAMA','STEPANIE','SHILA','SHAUNTA','SHARAN','SHANIQUA','SHAE','SETSUKO','SERAFINA','SANDEE','ROSAMARIA','PRISCILA','OLINDA','NADENE','MUOI','MICHELINA','MERCEDEZ','MARYROSE','MARIN','MARCENE','MAO','MAGALI','MAFALDA','LOGAN','LINN','LANNIE','KAYCE','KAROLINE','KAMILAH','KAMALA','JUSTA','JOLINE','JENNINE','JACQUETTA','IRAIDA','GERALD','GEORGEANNA','FRANCHESCA','FAIRY','EMELINE','ELANE','EHTEL','EARLIE','DULCIE','DALENE','CRIS','CLASSIE','CHERE','CHARIS','CAROYLN','CARMINA','CARITA','BRIAN','BETHANIE','AYAKO','ARICA','AN','ALYSA','ALESSANDRA','AKILAH','ADRIEN','ZETTA','YOULANDA','YELENA','YAHAIRA','XUAN','WENDOLYN','VICTOR','TIJUANA','TERRELL','TERINA','TERESIA','SUZI','SUNDAY','SHERELL','SHAVONDA','SHAUNTE','SHARDA','SHAKITA','SENA','RYANN','RUBI','RIVA','REGINIA','REA','RACHAL','PARTHENIA','PAMULA','MONNIE','MONET','MICHAELE','MELIA','MARINE','MALKA','MAISHA','LISANDRA','LEO','LEKISHA','LEAN','LAURENCE','LAKENDRA','KRYSTIN','KORTNEY','KIZZIE','KITTIE','KERA','KENDAL','KEMBERLY','KANISHA','JULENE','JULE','JOSHUA','JOHANNE','JEFFREY','JAMEE','HAN','HALLEY','GIDGET','GALINA','FREDRICKA','FLETA','FATIMAH','EUSEBIA','ELZA','ELEONORE','DORTHEY','DORIA','DONELLA','DINORAH','DELORSE','CLARETHA','CHRISTINIA','CHARLYN','BONG','BELKIS','AZZIE','ANDERA','AIKO','ADENA','YER','YAJAIRA','WAN','VANIA','ULRIKE','TOSHIA','TIFANY','STEFANY','SHIZUE','SHENIKA','SHAWANNA','SHAROLYN','SHARILYN','SHAQUANA','SHANTAY','SEE','ROZANNE','ROSELEE','RICKIE','REMONA','REANNA','RAELENE','QUINN','PHUNG','PETRONILA','NATACHA','NANCEY','MYRL','MIYOKO','MIESHA','MERIDETH','MARVELLA','MARQUITTA','MARHTA','MARCHELLE','LIZETH','LIBBIE','LAHOMA','LADAWN','KINA','KATHELEEN','KATHARYN','KARISA','KALEIGH','JUNIE','JULIEANN','JOHNSIE','JANEAN','JAIMEE','JACKQUELINE','HISAKO','HERMA','HELAINE','GWYNETH','GLENN','GITA','EUSTOLIA','EMELINA','ELIN','EDRIS','DONNETTE','DONNETTA','DIERDRE','DENAE','DARCEL','CLAUDE','CLARISA','CINDERELLA','CHIA','CHARLESETTA','CHARITA','CELSA','CASSY','CASSI','CARLEE','BRUNA','BRITTANEY','BRANDE','BILLI','BAO','ANTONETTA','ANGLA','ANGELYN','ANALISA','ALANE','WENONA','WENDIE','VERONIQUE','VANNESA','TOBIE','TEMPIE','SUMIKO','SULEMA','SPARKLE','SOMER','SHEBA','SHAYNE','SHARICE','SHANEL','SHALON','SAGE','ROY','ROSIO','ROSELIA','RENAY','REMA','REENA','PORSCHE','PING','PEG','OZIE','ORETHA','ORALEE','ODA','NU','NGAN','NAKESHA','MILLY','MARYBELLE','MARLIN','MARIS','MARGRETT','MARAGARET','MANIE','LURLENE','LILLIA','LIESELOTTE','LAVELLE','LASHAUNDA','LAKEESHA','KEITH','KAYCEE','KALYN','JOYA','JOETTE','JENAE','JANIECE','ILLA','GRISEL','GLAYDS','GENEVIE','GALA','FREDDA','FRED','ELMER','ELEONOR','DEBERA','DEANDREA','DAN','CORRINNE','CORDIA','CONTESSA','COLENE','CLEOTILDE','CHARLOTT','CHANTAY','CECILLE','BEATRIS','AZALEE','ARLEAN','ARDATH','ANJELICA','ANJA','ALFREDIA','ALEISHA','ADAM','ZADA','YUONNE','XIAO','WILLODEAN','WHITLEY','VENNIE','VANNA','TYISHA','TOVA','TORIE','TONISHA','TILDA','TIEN','TEMPLE','SIRENA','SHERRIL','SHANTI','SHAN','SENAIDA','SAMELLA','ROBBYN','RENDA','REITA','PHEBE','PAULITA','NOBUKO','NGUYET','NEOMI','MOON','MIKAELA','MELANIA','MAXIMINA','MARG','MAISIE','LYNNA','LILLI','LAYNE','LASHAUN','LAKENYA','LAEL','KIRSTIE','KATHLINE','KASHA','KARLYN','KARIMA','JOVAN','JOSEFINE','JENNELL','JACQUI','JACKELYN','HYO','HIEN','GRAZYNA','FLORRIE','FLORIA','ELEONORA','DWANA','DORLA','DONG','DELMY','DEJA','DEDE','DANN','CRYSTA','CLELIA','CLARIS','CLARENCE','CHIEKO','CHERLYN','CHERELLE','CHARMAIN','CHARA','CAMMY','BEE','ARNETTE','ARDELLE','ANNIKA','AMIEE','AMEE','ALLENA','YVONE','YUKI','YOSHIE','YEVETTE','YAEL','WILLETTA','VONCILE','VENETTA','TULA','TONETTE','TIMIKA','TEMIKA','TELMA','TEISHA','TAREN','TA','STACEE','SHIN','SHAWNTA','SATURNINA','RICARDA','POK','PASTY','ONIE','NUBIA','MORA','MIKE','MARIELLE','MARIELLA','MARIANELA','MARDELL','MANY','LUANNA','LOISE','LISABETH','LINDSY','LILLIANA','LILLIAM','LELAH','LEIGHA','LEANORA','LANG','KRISTEEN','KHALILAH','KEELEY','KANDRA','JUNKO','JOAQUINA','JERLENE','JANI','JAMIKA','JAME','HSIU','HERMILA','GOLDEN','GENEVIVE','EVIA','EUGENA','EMMALINE','ELFREDA','ELENE','DONETTE','DELCIE','DEEANNA','DARCEY','CUC','CLARINDA','CIRA','CHAE','CELINDA','CATHERYN','CATHERIN','CASIMIRA','CARMELIA','CAMELLIA','BREANA','BOBETTE','BERNARDINA','BEBE','BASILIA','ARLYNE','AMAL','ALAYNA','ZONIA','ZENIA','YURIKO','YAEKO','WYNELL','WILLOW','WILLENA','VERNIA','TU','TRAVIS','TORA','TERRILYN','TERICA','TENESHA','TAWNA','TAJUANA','TAINA','STEPHNIE','SONA','SOL','SINA','SHONDRA','SHIZUKO','SHERLENE','SHERICE','SHARIKA','ROSSIE','ROSENA','RORY','RIMA','RIA','RHEBA','RENNA','PETER','NATALYA','NANCEE','MELODI','MEDA','MAXIMA','MATHA','MARKETTA','MARICRUZ','MARCELENE','MALVINA','LUBA','LOUETTA','LEIDA','LECIA','LAURAN','LASHAWNA','LAINE','KHADIJAH','KATERINE','KASI','KALLIE','JULIETTA','JESUSITA','JESTINE','JESSIA','JEREMY','JEFFIE','JANYCE','ISADORA','GEORGIANNE','FIDELIA','EVITA','EURA','EULAH','ESTEFANA','ELSY','ELIZABET','ELADIA','DODIE','DION','DIA','DENISSE','DELORAS','DELILA','DAYSI','DAKOTA','CURTIS','CRYSTLE','CONCHA','COLBY','CLARETTA','CHU','CHRISTIA','CHARLSIE','CHARLENA','CARYLON','BETTYANN','ASLEY','ASHLEA','AMIRA','AI','AGUEDA','AGNUS','YUETTE','VINITA','VICTORINA','TYNISHA','TREENA','TOCCARA','TISH','THOMASENA','TEGAN','SOILA','SHILOH','SHENNA','SHARMAINE','SHANTAE','SHANDI','SEPTEMBER','SARAN','SARAI','SANA','SAMUEL','SALLEY','ROSETTE','ROLANDE','REGINE','OTELIA','OSCAR','OLEVIA','NICHOLLE','NECOLE','NAIDA','MYRTA','MYESHA','MITSUE','MINTA','MERTIE','MARGY','MAHALIA','MADALENE','LOVE','LOURA','LOREAN','LEWIS','LESHA','LEONIDA','LENITA','LAVONE','LASHELL','LASHANDRA','LAMONICA','KIMBRA','KATHERINA','KARRY','KANESHA','JULIO','JONG','JENEVA','JAQUELYN','HWA','GILMA','GHISLAINE','GERTRUDIS','FRANSISCA','FERMINA','ETTIE','ETSUKO','ELLIS','ELLAN','ELIDIA','EDRA','DORETHEA','DOREATHA','DENYSE','DENNY','DEETTA','DAINE','CYRSTAL','CORRIN','CAYLA','CARLITA','CAMILA','BURMA','BULA','BUENA','BLAKE','BARABARA','AVRIL','AUSTIN','ALAINE','ZANA','WILHEMINA','WANETTA','VIRGIL','VI','VERONIKA','VERNON','VERLINE','VASILIKI','TONITA','TISA','TEOFILA','TAYNA','TAUNYA','TANDRA','TAKAKO','SUNNI','SUANNE','SIXTA','SHARELL','SEEMA','RUSSELL','ROSENDA','ROBENA','RAYMONDE','PEI','PAMILA','OZELL','NEIDA','NEELY','MISTIE','MICHA','MERISSA','MAURITA','MARYLN','MARYETTA','MARSHALL','MARCELL','MALENA','MAKEDA','MADDIE','LOVETTA','LOURIE','LORRINE','LORILEE','LESTER','LAURENA','LASHAY','LARRAINE','LAREE','LACRESHA','KRISTLE','KRISHNA','KEVA','KEIRA','KAROLE','JOIE','JINNY','JEANNETTA','JAMA','HEIDY','GILBERTE','GEMA','FAVIOLA','EVELYNN','ENDA','ELLI','ELLENA','DIVINA','DAGNY','COLLENE','CODI','CINDIE','CHASSIDY','CHASIDY','CATRICE','CATHERINA','CASSEY','CAROLL','CARLENA','CANDRA','CALISTA','BRYANNA','BRITTENY','BEULA','BARI','AUDRIE','AUDRIA','ARDELIA','ANNELLE','ANGILA','ALONA','ALLYN','DOUGLAS','ROGER','JONATHAN','RALPH','NICHOLAS','BENJAMIN','BRUCE','HARRY','WAYNE','STEVE','HOWARD','ERNEST','PHILLIP','TODD','CRAIG','ALAN','PHILIP','EARL','DANNY','BRYAN','STANLEY','LEONARD','NATHAN','MANUEL','RODNEY','MARVIN','VINCENT','JEFFERY','JEFF','CHAD','JACOB','ALFRED','BRADLEY','HERBERT','FREDERICK','EDWIN','DON','RICKY','RANDALL','BARRY','BERNARD','LEROY','MARCUS','THEODORE','CLIFFORD','MIGUEL','JIM','TOM','CALVIN','BILL','LLOYD','DEREK','WARREN','DARRELL','JEROME','FLOYD','ALVIN','TIM','GORDON','GREG','JORGE','DUSTIN','PEDRO','DERRICK','ZACHARY','HERMAN','GLEN','HECTOR','RICARDO','RICK','BRENT','RAMON','GILBERT','MARC','REGINALD','RUBEN','NATHANIEL','RAFAEL','EDGAR','MILTON','RAUL','BEN','CHESTER','DUANE','FRANKLIN','BRAD','RON','ROLAND','ARNOLD','HARVEY','JARED','ERIK','DARRYL','NEIL','JAVIER','FERNANDO','CLINTON','TED','MATHEW','TYRONE','DARREN','LANCE','KURT','ALLAN','NELSON','GUY','CLAYTON','HUGH','MAX','DWAYNE','DWIGHT','ARMANDO','FELIX','EVERETT','IAN','WALLACE','KEN','BOB','ALFREDO','ALBERTO','DAVE','IVAN','BYRON','ISAAC','MORRIS','CLIFTON','WILLARD','ROSS','ANDY','SALVADOR','KIRK','SERGIO','SETH','KENT','TERRANCE','EDUARDO','TERRENCE','ENRIQUE','WADE','STUART','FREDRICK','ARTURO','ALEJANDRO','NICK','LUTHER','WENDELL','JEREMIAH','JULIUS','OTIS','TREVOR','OLIVER','LUKE','HOMER','GERARD','DOUG','KENNY','HUBERT','LYLE','MATT','ALFONSO','ORLANDO','REX','CARLTON','ERNESTO','NEAL','PABLO','LORENZO','OMAR','WILBUR','GRANT','HORACE','RODERICK','ABRAHAM','WILLIS','RICKEY','ANDRES','CESAR','JOHNATHAN','MALCOLM','RUDOLPH','DAMON','KELVIN','PRESTON','ALTON','ARCHIE','MARCO','WM','PETE','RANDOLPH','GARRY','GEOFFREY','JONATHON','FELIPE','GERARDO','ED','DOMINIC','DELBERT','COLIN','GUILLERMO','EARNEST','LUCAS','BENNY','SPENCER','RODOLFO','MYRON','EDMUND','GARRETT','SALVATORE','CEDRIC','LOWELL','GREGG','SHERMAN','WILSON','SYLVESTER','ROOSEVELT','ISRAEL','JERMAINE','FORREST','WILBERT','LELAND','SIMON','CLARK','IRVING','BRYANT','OWEN','RUFUS','WOODROW','KRISTOPHER','MACK','LEVI','MARCOS','GUSTAVO','JAKE','LIONEL','GILBERTO','CLINT','NICOLAS','ISMAEL','ORVILLE','ERVIN','DEWEY','AL','WILFRED','JOSH','HUGO','IGNACIO','CALEB','TOMAS','SHELDON','ERICK','STEWART','DOYLE','DARREL','ROGELIO','TERENCE','SANTIAGO','ALONZO','ELIAS','BERT','ELBERT','RAMIRO','CONRAD','NOAH','GRADY','PHIL','CORNELIUS','LAMAR','ROLANDO','CLAY','PERCY','DEXTER','BRADFORD','DARIN','AMOS','MOSES','IRVIN','SAUL','ROMAN','RANDAL','TIMMY','DARRIN','WINSTON','BRENDAN','ABEL','DOMINICK','BOYD','EMILIO','ELIJAH','DOMINGO','EMMETT','MARLON','EMANUEL','JERALD','EDMOND','EMIL','DEWAYNE','WILL','OTTO','TEDDY','REYNALDO','BRET','JESS','TRENT','HUMBERTO','EMMANUEL','STEPHAN','VICENTE','LAMONT','GARLAND','MILES','EFRAIN','HEATH','RODGER','HARLEY','ETHAN','ELDON','ROCKY','PIERRE','JUNIOR','FREDDY','ELI','BRYCE','ANTOINE','STERLING','CHASE','GROVER','ELTON','CLEVELAND','DYLAN','CHUCK','DAMIAN','REUBEN','STAN','AUGUST','LEONARDO','JASPER','RUSSEL','ERWIN','BENITO','HANS','MONTE','BLAINE','ERNIE','CURT','QUENTIN','AGUSTIN','MURRAY','JAMAL','ADOLFO','HARRISON','TYSON','BURTON','BRADY','ELLIOTT','WILFREDO','BART','JARROD','VANCE','DENIS','DAMIEN','JOAQUIN','HARLAN','DESMOND','ELLIOT','DARWIN','GREGORIO','BUDDY','XAVIER','KERMIT','ROSCOE','ESTEBAN','ANTON','SOLOMON','SCOTTY','NORBERT','ELVIN','WILLIAMS','NOLAN','ROD','QUINTON','HAL','BRAIN','ROB','ELWOOD','KENDRICK','DARIUS','MOISES','FIDEL','THADDEUS','CLIFF','MARCEL','JACKSON','RAPHAEL','BRYON','ARMAND','ALVARO','JEFFRY','DANE','JOESPH','THURMAN','NED','RUSTY','MONTY','FABIAN','REGGIE','MASON','GRAHAM','ISAIAH','VAUGHN','GUS','LOYD','DIEGO','ADOLPH','NORRIS','MILLARD','ROCCO','GONZALO','DERICK','RODRIGO','WILEY','RIGOBERTO','ALPHONSO','TY','NOE','VERN','REED','JEFFERSON','ELVIS','BERNARDO','MAURICIO','HIRAM','DONOVAN','BASIL','RILEY','NICKOLAS','MAYNARD','SCOT','VINCE','QUINCY','EDDY','SEBASTIAN','FEDERICO','ULYSSES','HERIBERTO','DONNELL','COLE','DAVIS','GAVIN','EMERY','WARD','ROMEO','JAYSON','DANTE','CLEMENT','COY','MAXWELL','JARVIS','BRUNO','ISSAC','DUDLEY','BROCK','SANFORD','CARMELO','BARNEY','NESTOR','STEFAN','DONNY','ART','LINWOOD','BEAU','WELDON','GALEN','ISIDRO','TRUMAN','DELMAR','JOHNATHON','SILAS','FREDERIC','DICK','IRWIN','MERLIN','CHARLEY','MARCELINO','HARRIS','CARLO','TRENTON','KURTIS','HUNTER','AURELIO','WINFRED','VITO','COLLIN','DENVER','CARTER','LEONEL','EMORY','PASQUALE','MOHAMMAD','MARIANO','DANIAL','LANDON','DIRK','BRANDEN','ADAN','BUFORD','GERMAN','WILMER','EMERSON','ZACHERY','FLETCHER','JACQUES','ERROL','DALTON','MONROE','JOSUE','EDWARDO','BOOKER','WILFORD','SONNY','SHELTON','CARSON','THERON','RAYMUNDO','DAREN','HOUSTON','ROBBY','LINCOLN','GENARO','BENNETT','OCTAVIO','CORNELL','HUNG','ARRON','ANTONY','HERSCHEL','GIOVANNI','GARTH','CYRUS','CYRIL','RONNY','LON','FREEMAN','DUNCAN','KENNITH','CARMINE','ERICH','CHADWICK','WILBURN','RUSS','REID','MYLES','ANDERSON','MORTON','JONAS','FOREST','MITCHEL','MERVIN','ZANE','RICH','JAMEL','LAZARO','ALPHONSE','RANDELL','MAJOR','JARRETT','BROOKS','ABDUL','LUCIANO','SEYMOUR','EUGENIO','MOHAMMED','VALENTIN','CHANCE','ARNULFO','LUCIEN','FERDINAND','THAD','EZRA','ALDO','RUBIN','ROYAL','MITCH','EARLE','ABE','WYATT','MARQUIS','LANNY','KAREEM','JAMAR','BORIS','ISIAH','EMILE','ELMO','ARON','LEOPOLDO','EVERETTE','JOSEF','ELOY','RODRICK','REINALDO','LUCIO','JERROD','WESTON','HERSHEL','BARTON','PARKER','LEMUEL','BURT','JULES','GIL','ELISEO','AHMAD','NIGEL','EFREN','ANTWAN','ALDEN','MARGARITO','COLEMAN','DINO','OSVALDO','LES','DEANDRE','NORMAND','KIETH','TREY','NORBERTO','NAPOLEON','JEROLD','FRITZ','ROSENDO','MILFORD','CHRISTOPER','ALFONZO','LYMAN','JOSIAH','BRANT','WILTON','RICO','JAMAAL','DEWITT','BRENTON','OLIN','FOSTER','FAUSTINO','CLAUDIO','JUDSON','GINO','EDGARDO','ALEC','TANNER','JARRED','DONN','TAD','PRINCE','PORFIRIO','ODIS','LENARD','CHAUNCEY','TOD','MEL','MARCELO','KORY','AUGUSTUS','KEVEN','HILARIO','BUD','SAL','ORVAL','MAURO','ZACHARIAH','OLEN','ANIBAL','MILO','JED','DILLON','AMADO','NEWTON','LENNY','RICHIE','HORACIO','BRICE','MOHAMED','DELMER','DARIO','REYES','MAC','JONAH','JERROLD','ROBT','HANK','RUPERT','ROLLAND','KENTON','DAMION','ANTONE','WALDO','FREDRIC','BRADLY','KIP','BURL','WALKER','TYREE','JEFFEREY','AHMED','WILLY','STANFORD','OREN','NOBLE','MOSHE','MIKEL','ENOCH','BRENDON','QUINTIN','JAMISON','FLORENCIO','DARRICK','TOBIAS','HASSAN','GIUSEPPE','DEMARCUS','CLETUS','TYRELL','LYNDON','KEENAN','WERNER','GERALDO','COLUMBUS','CHET','BERTRAM','MARKUS','HUEY','HILTON','DWAIN','DONTE','TYRON','OMER','ISAIAS','HIPOLITO','FERMIN','ADALBERTO','BO','BARRETT','TEODORO','MCKINLEY','MAXIMO','GARFIELD','RALEIGH','LAWERENCE','ABRAM','RASHAD','KING','EMMITT','DARON','SAMUAL','MIQUEL','EUSEBIO','DOMENIC','DARRON','BUSTER','WILBER','RENATO','JC','HOYT','HAYWOOD','EZEKIEL','CHAS','FLORENTINO','ELROY','CLEMENTE','ARDEN','NEVILLE','EDISON','DESHAWN','NATHANIAL','JORDON','DANILO','CLAUD','SHERWOOD','RAYMON','RAYFORD','CRISTOBAL','AMBROSE','TITUS','HYMAN','FELTON','EZEQUIEL','ERASMO','STANTON','LONNY','LEN','IKE','MILAN','LINO','JAROD','HERB','ANDREAS','WALTON','RHETT','PALMER','DOUGLASS','CORDELL','OSWALDO','ELLSWORTH','VIRGILIO','TONEY','NATHANAEL','DEL','BENEDICT','MOSE','JOHNSON','ISREAL','GARRET','FAUSTO','ASA','ARLEN','ZACK','WARNER','MODESTO','FRANCESCO','MANUAL','GAYLORD','GASTON','FILIBERTO','DEANGELO','MICHALE','GRANVILLE','WES','MALIK','ZACKARY','TUAN','ELDRIDGE','CRISTOPHER','CORTEZ','ANTIONE','MALCOM','LONG','KOREY','JOSPEH','COLTON','WAYLON','VON','HOSEA','SHAD','SANTO','RUDOLF','ROLF','REY','RENALDO','MARCELLUS','LUCIUS','KRISTOFER','BOYCE','BENTON','HAYDEN','HARLAND','ARNOLDO','RUEBEN','LEANDRO','KRAIG','JERRELL','JEROMY','HOBERT','CEDRICK','ARLIE','WINFORD','WALLY','LUIGI','KENETH','JACINTO','GRAIG','FRANKLYN','EDMUNDO','SID','PORTER','LEIF','JERAMY','BUCK','WILLIAN','VINCENZO','SHON','LYNWOOD','JERE','HAI','ELDEN','DORSEY','DARELL','BRODERICK','ALONSO'];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3831000cf542c50fe96",
      "title": "Problem 23: Non-abundant sums",
      "challengeType": 1,
      "dashedName": "problem-23-non-abundant-sums",
      "description": "A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.\n\nA number `n` is called deficient if the sum of its proper divisors is less than `n` and it is called abundant if this sum exceeds `n`.\n\nAs 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.\n\nFind the sum of all positive integers &lt;= `n` which cannot be written as the sum of two abundant numbers.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumOfNonAbundantNumbers(n) {\n\n  return n;\n}\n\nsumOfNonAbundantNumbers(28123);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function abundantCheck(number) {\n  let sum = 1;\n\n  for (let i = 2; i <= Math.sqrt(number); i += 1) {\n    if(number % i === 0) {\n      sum += i + +(i !== Math.sqrt(number) && number / i);\n    }\n  }\n  return sum > number;\n}\n\nfunction sumOfNonAbundantNumbers(n) {\n  let sum = 0;\n  const memo = {};\n  let abundantList = [];\n\n  // Function checkSum checks if num can be represented as a sum of numbers in the stack (array)\n  const checkSum = (num, stack, memo) => {\n    for (let i = 0; i < stack.length; i += 1) {\n      if ((num - stack[i]) in memo) return true;\n    }\n    return false;\n  };\n\n  for (let i = 1; i <= n; i += 1) {\n    if (abundantCheck(i)) {\n      abundantList.push(i);\n      memo[i] = 1;\n    }\n    if (checkSum(i, abundantList, memo)) continue;\n    sum += i;\n  }\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`sumOfNonAbundantNumbers(10000)` should return a number.",
          "testCode": "assert.isNumber(sumOfNonAbundantNumbers(10000));"
        },
        {
          "text": "`sumOfNonAbundantNumbers(10000)` should return 3731004.",
          "testCode": "assert.strictEqual(sumOfNonAbundantNumbers(10000), 3731004);"
        },
        {
          "text": "`sumOfNonAbundantNumbers(15000)` should return 4039939.",
          "testCode": "assert.strictEqual(sumOfNonAbundantNumbers(15000), 4039939);"
        },
        {
          "text": "`sumOfNonAbundantNumbers(20000)` should return 4159710.",
          "testCode": "assert.strictEqual(sumOfNonAbundantNumbers(20000), 4159710);"
        },
        {
          "text": "`sumOfNonAbundantNumbers(28123)` should return 4179871.",
          "testCode": "assert.strictEqual(sumOfNonAbundantNumbers(28123), 4179871);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301873,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-23-non-abundant-sums.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3841000cf542c50fe97",
      "title": "Problem 24: Lexicographic permutations",
      "challengeType": 1,
      "dashedName": "problem-24-lexicographic-permutations",
      "description": "A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:\n\n<div style='text-align: center;'>012   021   102   120   201   210</div>\n\nWhat is the `n`th lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function lexicographicPermutations(n) {\n\n  return n;\n}\n\nlexicographicPermutations(999999);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`lexicographicPermutations(699999)` should return a number.",
          "testCode": "assert.isNumber(lexicographicPermutations(699999));"
        },
        {
          "text": "`lexicographicPermutations(699999)` should return 1938246570.",
          "testCode": "assert.strictEqual(lexicographicPermutations(699999), 1938246570);"
        },
        {
          "text": "`lexicographicPermutations(899999)` should return 2536987410.",
          "testCode": "assert.strictEqual(lexicographicPermutations(899999), 2536987410);"
        },
        {
          "text": "`lexicographicPermutations(900000)` should return 2537014689.",
          "testCode": "assert.strictEqual(lexicographicPermutations(900000), 2537014689);"
        },
        {
          "text": "`lexicographicPermutations(999999)` should return 2783915460.",
          "testCode": "assert.strictEqual(lexicographicPermutations(999999), 2783915460);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301885,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-24-lexicographic-permutations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3851000cf542c50fe98",
      "title": "Problem 25: 1000-digit Fibonacci number",
      "challengeType": 1,
      "dashedName": "problem-25-1000-digit-fibonacci-number",
      "description": "The Fibonacci sequence is defined by the recurrence relation:\n\n<div style='padding-left: 4em;'>F<sub>n</sub> = F<sub>n−1</sub> + F<sub>n−2</sub>, where F<sub>1</sub> = 1 and F<sub>2</sub> = 1.</div>\n\nHence the first 12 terms will be:\n\n<div style='padding-left: 4em; display: inline-grid; grid-template-rows: auto; row-gap: 7px;'><div>F<sub>1</sub> = 1</div><div>F<sub>2</sub> = 1</div><div>F<sub>3</sub> = 2</div><div>F<sub>4</sub> = 3</div><div>F<sub>5</sub> = 5</div><div>F<sub>6</sub> = 8</div><div>F<sub>7</sub> = 13</div><div>F<sub>8</sub> = 21</div><div>F<sub>9</sub> = 34</div><div>F<sub>10</sub> = 55</div><div>F<sub>11</sub> = 89</div><div>F<sub>12</sub> = 144</div></div>\n\nThe 12th term, F<sub>12</sub>, is the first term to contain three digits.\n\nWhat is the index of the first term in the Fibonacci sequence to contain `n` digits?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function digitFibonacci(n) {\n\n  return n;\n}\n\ndigitFibonacci(20);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const digitFibonacci = (n) => {\n  const digits = (num) => {\n    return num.toString().length;\n  };\n  let f1 = 1;\n  let f2 = 1;\n  let index = 3;\n  while (true) {\n    let fn = f1 + f2;\n    if (digits(fn) === n) return index;\n    [f1, f2] = [f2, fn];\n    index++;\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`digitFibonacci(5)` should return a number.",
          "testCode": "assert.isNumber(digitFibonacci(5));"
        },
        {
          "text": "`digitFibonacci(5)` should return 21.",
          "testCode": "assert.strictEqual(digitFibonacci(5), 21);"
        },
        {
          "text": "`digitFibonacci(10)` should return 45.",
          "testCode": "assert.strictEqual(digitFibonacci(10), 45);"
        },
        {
          "text": "`digitFibonacci(15)` should return 69.",
          "testCode": "assert.strictEqual(digitFibonacci(15), 69);"
        },
        {
          "text": "`digitFibonacci(20)` should return 93.",
          "testCode": "assert.strictEqual(digitFibonacci(20), 93);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301897,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-25-1000-digit-fibonacci-number.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3861000cf542c50fe99",
      "title": "Problem 26: Reciprocal cycles",
      "challengeType": 1,
      "dashedName": "problem-26-reciprocal-cycles",
      "description": "A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:\n\n<div style='padding-left: 4em; display: inline-grid; grid-template-rows: auto; row-gap: 7px;'><div><sup>1</sup>/<sub>2</sub> = 0.5</div><div><sup>1</sup>/<sub>3</sub> = 0.(3)</div><div><sup>1</sup>/<sub>4</sub> = 0.25</div><div><sup>1</sup>/<sub>5</sub> = 0.2</div><div><sup>1</sup>/<sub>6</sub> = 0.1(6)</div><div><sup>1</sup>/<sub>7</sub> = 0.(142857)</div><div><sup>1</sup>/<sub>8</sub> = 0.125</div><div><sup>1</sup>/<sub>9</sub> = 0.(1)</div><div><sup>1</sup>/<sub>10</sub> = 0.1</div></div>\n\nWhere 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that <sup>1</sup>/<sub>7</sub> has a 6-digit recurring cycle.\n\nFind the value of `d` &lt; `n` for which <sup>1</sup>/<sub>d</sub> contains the longest recurring cycle in its decimal fraction part.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function reciprocalCycles(n) {\n\n  return n;\n}\n\nreciprocalCycles(1000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`reciprocalCycles(700)` should return a number.",
          "testCode": "assert(typeof reciprocalCycles(700) === 'number');"
        },
        {
          "text": "`reciprocalCycles(700)` should return 659.",
          "testCode": "assert(reciprocalCycles(700) == 659);"
        },
        {
          "text": "`reciprocalCycles(800)` should return 743.",
          "testCode": "assert(reciprocalCycles(800) == 743);"
        },
        {
          "text": "`reciprocalCycles(900)` should return 887.",
          "testCode": "assert(reciprocalCycles(900) == 887);"
        },
        {
          "text": "`reciprocalCycles(1000)` should return 983.",
          "testCode": "assert(reciprocalCycles(1000) == 983);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301908,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-26-reciprocal-cycles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3871000cf542c50fe9a",
      "title": "Problem 27: Quadratic primes",
      "challengeType": 1,
      "dashedName": "problem-27-quadratic-primes",
      "description": "Euler discovered the remarkable quadratic formula:\n\n<div style='margin-left: 4em;'>$n^2 + n + 41$</div>\n\nIt turns out that the formula will produce 40 primes for the consecutive integer values $0 \\\\le n \\\\le 39$. However, when $n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41$ is divisible by 41, and certainly when $n = 41, 41^2 + 41 + 41$ is clearly divisible by 41.\n\nThe incredible formula $n^2 - 79n + 1601$ was discovered, which produces 80 primes for the consecutive values $0 \\\\le n \\\\le 79$. The product of the coefficients, −79 and 1601, is −126479.\n\nConsidering quadratics of the form:\n\n<div style='margin-left: 4em;'>\n  $n^2 + an + b$, where $|a| < range$ and $|b| \\le range$<br>\n  where $|n|$ is the modulus/absolute value of $n$<br>\n  e.g. $|11| = 11$ and $|-4| = 4$<br>\n</div>\n\nFind the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n = 0$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function quadraticPrimes(range) {\n\n  return range;\n}\n\nquadraticPrimes(1000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`quadraticPrimes(200)` should return a number.",
          "testCode": "assert(typeof quadraticPrimes(200) === 'number');"
        },
        {
          "text": "`quadraticPrimes(200)` should return -4925.",
          "testCode": "assert(quadraticPrimes(200) == -4925);"
        },
        {
          "text": "`quadraticPrimes(500)` should return -18901.",
          "testCode": "assert(quadraticPrimes(500) == -18901);"
        },
        {
          "text": "`quadraticPrimes(800)` should return -43835.",
          "testCode": "assert(quadraticPrimes(800) == -43835);"
        },
        {
          "text": "`quadraticPrimes(1000)` should return -59231.",
          "testCode": "assert(quadraticPrimes(1000) == -59231);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301919,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-27-quadratic-primes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3881000cf542c50fe9b",
      "title": "Problem 28: Number spiral diagonals",
      "challengeType": 1,
      "dashedName": "problem-28-number-spiral-diagonals",
      "description": "Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:\n\n<div style='padding-left: 4em;'>\n  <div style='color: red; display: inline;'>21</div> 22 23 24 <div style='color: red; display: inline;'>25</div><br>\n  20  <div style='color: red; display: inline;'>7</div>  8  <div style='color: red; display: inline;'>9</div> 10<br>\n  19  6  <div style='color: red; display: inline;'>1</div>  2 11<br>\n  18  <div style='color: red; display: inline;'>5</div>  4  <div style='color: red; display: inline;'>3</div> 12<br>\n  <div style='color: red; display: inline;'>17</div> 16 15 14 <div style='color: red; display: inline;'>13</div><br>\n</div>\n\nIt can be verified that the sum of the numbers on the diagonals is 101.\n\nWhat is the sum of the numbers on the diagonals in an `n` by `n` spiral formed in the same way?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function spiralDiagonals(n) {\n\n  return n;\n}\n\nspiralDiagonals(1001);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const spiralDiagonals = (n) => {\n  const Sn2 = (n) => {\n    return n*(n+1)*(2*n+1)/6;\n  };\n  const Sn = (n) => {\n    return n*(n+1)/2;\n  };\n  let sum = (Sn2(n-1) + Sn(n-1) + n-1) + (Math.floor(n/2) + Sn2(n));\n  return sum;\n};"
        }
      ],
      "tests": [
        {
          "text": "`spiralDiagonals(101)` should return a number.",
          "testCode": "assert(typeof spiralDiagonals(101) === 'number');"
        },
        {
          "text": "`spiralDiagonals(101)` should return 692101.",
          "testCode": "assert(spiralDiagonals(101) == 692101);"
        },
        {
          "text": "`spiralDiagonals(303)` should return 18591725.",
          "testCode": "assert(spiralDiagonals(303) == 18591725);"
        },
        {
          "text": "`spiralDiagonals(505)` should return 85986601.",
          "testCode": "assert(spiralDiagonals(505) == 85986601);"
        },
        {
          "text": "`spiralDiagonals(1001)` should return 669171001.",
          "testCode": "assert(spiralDiagonals(1001) == 669171001);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301930,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-28-number-spiral-diagonals.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3891000cf542c50fe9c",
      "title": "Problem 29: Distinct powers",
      "challengeType": 1,
      "dashedName": "problem-29-distinct-powers",
      "description": "Consider all integer combinations of $a^b$ for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n\n<div style='padding-left: 4em;'>\n  2<sup>2</sup>=4, 2<sup>3</sup>=8, 2<sup>4</sup>=16, 2<sup>5</sup>=32 <br>\n  3<sup>2</sup>=9, 3<sup>3</sup>=27, 3<sup>4</sup>=81, 3<sup>5</sup>=243 <br>\n  4<sup>2</sup>=16, 4<sup>3</sup>=64, 4<sup>4</sup>=256, 4<sup>5</sup>=1024 <br>\n  5<sup>2</sup>=25, 5<sup>3</sup>=125, 5<sup>4</sup>=625, 5<sup>5</sup>=3125 <br>\n</div>\n\nIf they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:\n\n<div style='padding-left: 4em;'>\n  4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n</div>\n\nHow many distinct terms are in the sequence generated by $a^b$ for 2 ≤ `a` ≤ `n` and 2 ≤ `b` ≤ `n`?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function distinctPowers(n) {\n\n  return n;\n}\n\ndistinctPowers(30);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const distinctPowers = (n) => {\n  let list = [];\n  for (let a=2; a<=n; a++) {\n    for (let b=2; b<=n; b++) {\n      let term = Math.pow(a, b);\n      if (list.indexOf(term)===-1) list.push(term);\n    }\n  }\n  return list.length;\n};"
        }
      ],
      "tests": [
        {
          "text": "`distinctPowers(15)` should return a number.",
          "testCode": "assert(typeof distinctPowers(15) === 'number');"
        },
        {
          "text": "`distinctPowers(15)` should return 177.",
          "testCode": "assert.strictEqual(distinctPowers(15), 177);"
        },
        {
          "text": "`distinctPowers(20)` should return 324.",
          "testCode": "assert.strictEqual(distinctPowers(20), 324);"
        },
        {
          "text": "`distinctPowers(25)` should return 519.",
          "testCode": "assert.strictEqual(distinctPowers(25), 519);"
        },
        {
          "text": "`distinctPowers(30)` should return 755.",
          "testCode": "assert.strictEqual(distinctPowers(30), 755);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301941,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-29-distinct-powers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f36f1000cf542c50fe82",
      "title": "Problem 3: Largest prime factor",
      "challengeType": 1,
      "dashedName": "problem-3-largest-prime-factor",
      "description": "The prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the given `number`?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largestPrimeFactor(number) {\n\n  return true;\n}\n\nlargestPrimeFactor(13195);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const largestPrimeFactor = (number) => {\n  let largestFactor = number;\n\n  for (let i = 2; i <= Math.sqrt(largestFactor); i++) {\n    if (!(largestFactor % i)) {\n      let factor = largestFactor / i;\n      let candidate = largestPrimeFactor(factor);\n\n      return i > candidate ? i : candidate;\n    }\n  }\n\n  return largestFactor;\n}"
        }
      ],
      "tests": [
        {
          "text": "`largestPrimeFactor(2)` should return a number.",
          "testCode": "assert.isNumber(largestPrimeFactor(2));"
        },
        {
          "text": "`largestPrimeFactor(2)` should return 2.",
          "testCode": "assert.strictEqual(largestPrimeFactor(2), 2);"
        },
        {
          "text": "`largestPrimeFactor(3)` should return 3.",
          "testCode": "assert.strictEqual(largestPrimeFactor(3), 3);"
        },
        {
          "text": "`largestPrimeFactor(5)` should return 5.",
          "testCode": "assert.strictEqual(largestPrimeFactor(5), 5);"
        },
        {
          "text": "`largestPrimeFactor(7)` should return 7.",
          "testCode": "assert.strictEqual(largestPrimeFactor(7), 7);"
        },
        {
          "text": "`largestPrimeFactor(8)` should return 2.",
          "testCode": "assert.strictEqual(largestPrimeFactor(8), 2);"
        },
        {
          "text": "`largestPrimeFactor(13195)` should return 29.",
          "testCode": "assert.strictEqual(largestPrimeFactor(13195), 29);"
        },
        {
          "text": "`largestPrimeFactor(600851475143)` should return 6857.",
          "testCode": "assert.strictEqual(largestPrimeFactor(600851475143), 6857);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301952,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-3-largest-prime-factor.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f38a1000cf542c50fe9d",
      "title": "Problem 30: Digit n powers",
      "challengeType": 1,
      "dashedName": "problem-30-digit-n-powers",
      "description": "Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:\n\n<div style='margin-left: 4em;'>\n  1634 = 1<sup>4</sup> + 6<sup>4</sup> + 3<sup>4</sup> + 4<sup>4</sup><br>\n  8208 = 8<sup>4</sup> + 2<sup>4</sup> + 0<sup>4</sup> + 8<sup>4</sup><br>\n  9474 = 9<sup>4</sup> + 4<sup>4</sup> + 7<sup>4</sup> + 4<sup>4</sup><br>\n</div>\n\nAs 1 = 1<sup>4</sup> is not a sum it is not included.\n\nThe sum of these numbers is 1634 + 8208 + 9474 = 19316.\n\nFind the sum of all the numbers that can be written as the sum of `n` powers of their digits.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function digitnPowers(n) {\n\n  return n;\n}\n\ndigitnPowers(5);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`digitnPowers(2)` should return a number.",
          "testCode": "assert(typeof digitnPowers(2) === 'number');"
        },
        {
          "text": "`digitnPowers(2)` should return 0.",
          "testCode": "assert(digitnPowers(2) == 0);"
        },
        {
          "text": "`digitnPowers(3)` should return 1301.",
          "testCode": "assert(digitnPowers(3) == 1301);"
        },
        {
          "text": "`digitnPowers(4)` should return 19316.",
          "testCode": "assert(digitnPowers(4) == 19316);"
        },
        {
          "text": "`digitnPowers(5)` should return 443839.",
          "testCode": "assert(digitnPowers(5) == 443839);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301953,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-30-digit-n-powers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f38b1000cf542c50fe9e",
      "title": "Problem 31: Coin sums",
      "challengeType": 1,
      "dashedName": "problem-31-coin-sums",
      "description": "In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:\n\n<div style='margin-left: 4em;'>1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).</div>\n\nIt is possible to make £2 in the following way:\n\n<div style='margin-left: 4em;'>1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p</div>\n\nHow many different ways can `n` pence be made using any number of coins?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function coinSums(n) {\n\n  return n;\n}\n\ncoinSums(200);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const coinSums = (n) => {\n  const getWays = (n, m=8, c=[1, 2, 5, 10, 20, 50, 100, 200]) => {\n    if (n === 0) return 1;\n    if (m === 0 || n < 0) return 0;\n    return getWays(n - c[m - 1], m, c) + getWays(n, m - 1, c);\n  };\n  return getWays(n);\n};"
        }
      ],
      "tests": [
        {
          "text": "`coinSums(50)` should return a number.",
          "testCode": "assert(typeof coinSums(50) === 'number');"
        },
        {
          "text": "`coinSums(50)` should return 451.",
          "testCode": "assert(coinSums(50) == 451);"
        },
        {
          "text": "`coinSums(100)` should return 4563.",
          "testCode": "assert(coinSums(100) == 4563);"
        },
        {
          "text": "`coinSums(150)` should return 21873.",
          "testCode": "assert(coinSums(150) == 21873);"
        },
        {
          "text": "`coinSums(200)` should return 73682.",
          "testCode": "assert(coinSums(200) == 73682);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301965,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-31-coin-sums.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f38c1000cf542c50fe9f",
      "title": "Problem 32: Pandigital products",
      "challengeType": 1,
      "dashedName": "problem-32-pandigital-products",
      "description": "We shall say that an `n`-digit number is pandigital if it makes use of all the digits 1 to `n` exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.\n\nThe product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.\n\nFind the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through `n` pandigital.\n\n**Hint:** Some products can be obtained in more than one way so be sure to only include it once in your sum.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pandigitalProducts(n) {\n\n  return true;\n}\n\npandigitalProducts(4);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// Check for pandigital number\nfunction isPandigital(digitStr) {\n  return digitStr\n    .split('')\n    .sort()\n    .every((c, i) => c == i + 1);\n}\n\n// Concatenate 3 numbers\nfunction concatenate3Nums(a, b, c) {\n  return a.toString() + b.toString() + c.toString();\n}\n\n// Find sum of all pandigital products\nfunction pandigitalProducts(n) {\n  const products = [];\n  let sum = 0;\n  const max = Number(Array(n)\n    .fill(0)\n    .map((_, i) => (n - i).toString())\n    .join(''));\n  const outerLimit = Math.sqrt(max);\n\n  for (let factor1 = 2; factor1 < outerLimit; factor1++) {\n    const innerLimit = max / factor1;\n\n    for (let factor2 = factor1; factor2 < innerLimit; factor2++) {\n      const product = factor1 * factor2;\n      const concatenated = concatenate3Nums(factor1, factor2, product);\n\n      if (concatenated.length > n) {\n        break;\n      } else if (concatenated.length == n &&\n        isPandigital(concatenated) &&\n        !products.includes(product)\n      ) {\n        products.push(product);\n        sum += product;\n      }\n    }\n  }\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`pandigitalProducts(4)` should return a number.",
          "testCode": "assert(typeof pandigitalProducts(4) === 'number');"
        },
        {
          "text": "`pandigitalProducts(4)` should return `12`.",
          "testCode": "assert.strictEqual(pandigitalProducts(4), 12);"
        },
        {
          "text": "`pandigitalProducts(6)` should return `162`.",
          "testCode": "assert.strictEqual(pandigitalProducts(6), 162);"
        },
        {
          "text": "`pandigitalProducts(7)` should return `0`.",
          "testCode": "assert.strictEqual(pandigitalProducts(7), 0);"
        },
        {
          "text": "`pandigitalProducts(8)` should return `13458`.",
          "testCode": "assert.strictEqual(pandigitalProducts(8), 13458);"
        },
        {
          "text": "`pandigitalProducts(9)` should return `45228`.",
          "testCode": "assert.strictEqual(pandigitalProducts(9), 45228);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301976,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-32-pandigital-products.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f38d1000cf542c50fea0",
      "title": "Problem 33: Digit cancelling fractions",
      "challengeType": 1,
      "dashedName": "problem-33-digit-cancelling-fractions",
      "description": "The fraction <sup>49</sup>/<sub>98</sub> is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that <sup>49</sup>/<sub>98</sub> = <sup>4</sup>/<sub>8</sub>, which is correct, is obtained by cancelling the 9s.\n\nWe shall consider fractions like, <sup>30</sup>/<sub>50</sub> = <sup>3</sup>/<sub>5</sub>, to be trivial examples.\n\nThere are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.\n\nIf the product of these four fractions is given in its lowest common terms, find the value of the denominator.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function digitCancellingFractions() {\n\n  return true;\n}\n\ndigitCancellingFractions();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function digitCancellingFractions() {\n  function isCurious(numerator, denominator) {\n    const fraction = numerator / denominator;\n    const numString = numerator.toString();\n    const denString = denominator.toString();\n\n    if (numString[1] === '0' && denString[1] === '0') {\n      // trivial\n      return false;\n    }\n    for (let i = 0; i < 2; i++) {\n      for (let j = 0; j < 2; j++) {\n        if (numString[i] === denString[j]) {\n          const newNum = parseInt(numString[1 - i], 10);\n          const newDen = parseInt(denString[1 - j], 10);\n          if (newNum / newDen === fraction) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  function findLargestDivisor(a, b) {\n    let gcd = a > b ? b : a;\n    while (gcd > 1) {\n      if (a % gcd === 0 && b % gcd === 0) {\n        return gcd;\n      }\n      gcd--;\n    }\n    return gcd;\n  }\n\n  function simplifyFraction(numerator, denominator) {\n    const divisor = findLargestDivisor(numerator, denominator);\n    return [numerator / divisor, denominator / divisor];\n  }\n\n  let multipleNumerator = 1;\n  let multipleDenominator = 1;\n\n  for (let denominator = 11; denominator < 100; denominator++) {\n    for (let numerator = 10; numerator < denominator; numerator++) {\n      if (isCurious(numerator, denominator)) {\n        multipleNumerator *= numerator;\n        multipleDenominator *= denominator;\n      }\n    }\n  }\n\n  return simplifyFraction(multipleNumerator, multipleDenominator)[1];\n}"
        }
      ],
      "tests": [
        {
          "text": "`digitCancellingFractions()` should return a number.",
          "testCode": "assert(typeof digitCancellingFractions() === 'number');"
        },
        {
          "text": "`digitCancellingFractions()` should return 100.",
          "testCode": "assert.strictEqual(digitCancellingFractions(), 100);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301987,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-33-digit-cancelling-fractions.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f38e1000cf542c50fea1",
      "title": "Problem 34: Digit factorials",
      "challengeType": 1,
      "dashedName": "problem-34-digit-factorials",
      "description": "145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.\n\nFind the numbers and the sum of the numbers which are equal to the sum of the factorial of their digits.\n\n**Note:** as 1! = 1 and 2! = 2 are not sums they are not included.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function digitFactorial() {\n\n  var sum = 0;\n  var numbers = [];\n  return { sum, numbers };\n}\n\ndigitFactorial();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`digitFactorial()` should return an object.",
          "testCode": "assert.typeOf(digitFactorial(), 'object');"
        },
        {
          "text": "`digitFactorial()` should return { sum: 40730, numbers: [145, 40585] }.",
          "testCode": "assert.deepEqual(digitFactorial(), { sum: 40730, numbers: [145, 40585] });"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301998,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-34-digit-factorials.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f38f1000cf542c50fea2",
      "title": "Problem 35: Circular primes",
      "challengeType": 1,
      "dashedName": "problem-35-circular-primes",
      "description": "The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.\n\nThere are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.\n\nHow many circular primes are there below `n`, whereas 100 ≤ `n` ≤ 1000000?\n\n**Note:**  \n\nCircular primes individual rotation can exceed `n`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function circularPrimes(n) {\n\n  return n;\n}\n\ncircularPrimes(1000000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function rotate(n) {\n  if (n.length == 1) return n;\n  return n.slice(1) + n[0];\n}\n\nfunction circularPrimes(n) {\n  // Nearest n < 10^k\n  const bound = 10 ** Math.ceil(Math.log10(n));\n  const primes = [0, 0, 2];\n  let count = 0;\n\n  // Making primes array\n  for (let i = 4; i <= bound; i += 2) {\n    primes.push(i - 1);\n    primes.push(0);\n  }\n\n  // Getting upperbound\n  const upperBound = Math.ceil(Math.sqrt(bound));\n\n  // Setting other non-prime numbers to 0\n  for (let i = 3; i < upperBound; i += 2) {\n    if (primes[i]) {\n      for (let j = i * i; j < bound; j += i) {\n        primes[j] = 0;\n      }\n    }\n  }\n\n  // Iterating through the array\n  for (let i = 2; i < n; i++) {\n    if (primes[i]) {\n      let curr = String(primes[i]);\n      let tmp = 1; // tmp variable to hold the no of rotations\n      for (let x = rotate(curr); x != curr; x = rotate(x)) {\n        if (x > n && primes[x]) {\n          continue;\n        }\n        else if (!primes[x]) {\n          // If the rotated value is 0 then it isn't a circular prime, break the loop\n          tmp = 0;\n          break;\n        }\n        tmp++;\n        primes[x] = 0;\n      }\n      count += tmp;\n    }\n  }\n  return count;\n}"
        }
      ],
      "tests": [
        {
          "text": "`circularPrimes(100)` should return a number.",
          "testCode": "assert(typeof circularPrimes(100) === 'number');"
        },
        {
          "text": "`circularPrimes(100)` should return 13.",
          "testCode": "assert(circularPrimes(100) == 13);"
        },
        {
          "text": "`circularPrimes(100000)` should return 43.",
          "testCode": "assert(circularPrimes(100000) == 43);"
        },
        {
          "text": "`circularPrimes(250000)` should return 45.",
          "testCode": "assert(circularPrimes(250000) == 45);"
        },
        {
          "text": "`circularPrimes(500000)` should return 49.",
          "testCode": "assert(circularPrimes(500000) == 49);"
        },
        {
          "text": "`circularPrimes(750000)` should return 49.",
          "testCode": "assert(circularPrimes(750000) == 49);"
        },
        {
          "text": "`circularPrimes(1000000)` should return 55.",
          "testCode": "assert(circularPrimes(1000000) == 55);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302009,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-35-circular-primes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3901000cf542c50fea3",
      "title": "Problem 36: Double-base palindromes",
      "challengeType": 1,
      "dashedName": "problem-36-double-base-palindromes",
      "description": "The decimal number, 585 = 1001001001<sub>2</sub> (binary), is palindromic in both bases.\n\nFind the sum of all numbers, less than `n`, whereas 1000 ≤ `n` ≤ 1000000, which are palindromic in base 10 and base 2.\n\n(Please note that the palindromic number, in either base, may not include leading zeros.)",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function doubleBasePalindromes(n) {\n\n  return n;\n}\n\ndoubleBasePalindromes(1000000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function buildPalindromesBase10(len) {\n  // Base cases\n  const palindromes = [];\n  if (len > 0) {\n    palindromes.push([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n  }\n  if (len > 1) {\n    palindromes.push([11, 22, 33, 44, 55, 66, 77, 88, 99, 0]);\n  }\n\n  for (let i = 3; i <= len; i++) {\n    const lengthIPalindromes = [];\n\n    for (let j = 1; j < 10; j++) {\n      const firstDigit = j * (10 ** (i - 1));\n      const lastDigit = j;\n      // Build off of palindromes 2 digits shorter\n      {\n        const shorterPalindromes = palindromes[i - 3];\n\n        for (const palindrome of shorterPalindromes) {\n          lengthIPalindromes.push(firstDigit + palindrome * 10 + lastDigit);\n        }\n      }\n      // Build off of palindromes 4 digits shorter\n      if (i > 4) {\n        const shorterPalindromes = palindromes[i - 5];\n\n        for (const palindrome of shorterPalindromes) {\n          lengthIPalindromes.push(firstDigit + palindrome * 100 + lastDigit);\n        }\n      }\n    }\n    palindromes.push(lengthIPalindromes);\n  }\n  return palindromes.flat();\n}\n\nfunction isPalindrome(num) {\n  const numAsString = num.toString();\n  const numDigits = numAsString.length;\n  for (let i = 0; i < numDigits / 2; i++) {\n    if (numAsString[i] !== numAsString[numDigits - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isPalindromeBase2(num) {\n  return isPalindrome(num.toString(2));\n}\n\nfunction doubleBasePalindromes(n) {\n  let palindromeSum = 0;\n  const maxDigits = Math.ceil(Math.log10(n));\n  const palindromesBase10 = buildPalindromesBase10(maxDigits);\n\n  // Loop over all palindromes less than n\n  for (let i = 0; i < palindromesBase10.length && palindromesBase10[i] < n; i++) {\n    if (isPalindromeBase2(palindromesBase10[i])) {\n      palindromeSum += palindromesBase10[i];\n    }\n  }\n  return palindromeSum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`doubleBasePalindromes(1000)` should return a number.",
          "testCode": "assert(typeof doubleBasePalindromes(1000) === 'number');"
        },
        {
          "text": "`doubleBasePalindromes(1000)` should return 1772.",
          "testCode": "assert(doubleBasePalindromes(1000) == 1772);"
        },
        {
          "text": "`doubleBasePalindromes(50000)` should return 105795.",
          "testCode": "assert(doubleBasePalindromes(50000) == 105795);"
        },
        {
          "text": "`doubleBasePalindromes(500000)` should return 286602.",
          "testCode": "assert(doubleBasePalindromes(500000) == 286602);"
        },
        {
          "text": "`doubleBasePalindromes(1000000)` should return 872187.",
          "testCode": "assert(doubleBasePalindromes(1000000) == 872187);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302020,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-36-double-base-palindromes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3911000cf542c50fea4",
      "title": "Problem 37: Truncatable primes",
      "challengeType": 1,
      "dashedName": "problem-37-truncatable-primes",
      "description": "The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.\n\nFind the sum of the only `n` (8 ≤ `n` ≤ 11) primes that are both truncatable from left to right and right to left.\n\nNOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function truncatablePrimes(n) {\n\n  return n;\n}\n\ntruncatablePrimes(11);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`truncatablePrimes(8)` should return a number.",
          "testCode": "assert(typeof truncatablePrimes(8) === 'number');"
        },
        {
          "text": "`truncatablePrimes(8)` should return 1986.",
          "testCode": "assert(truncatablePrimes(8) == 1986);"
        },
        {
          "text": "`truncatablePrimes(9)` should return 5123.",
          "testCode": "assert(truncatablePrimes(9) == 5123);"
        },
        {
          "text": "`truncatablePrimes(10)` should return 8920.",
          "testCode": "assert(truncatablePrimes(10) == 8920);"
        },
        {
          "text": "`truncatablePrimes(11)` should return 748317.",
          "testCode": "assert(truncatablePrimes(11) == 748317);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302031,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-37-truncatable-primes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3931000cf542c50fea5",
      "title": "Problem 38: Pandigital multiples",
      "challengeType": 1,
      "dashedName": "problem-38-pandigital-multiples",
      "description": "Take the number 192 and multiply it by each of 1, 2, and 3:\n\n$$\\begin{align}\n  192 × 1 = 192\\\\\\\\\n  192 × 2 = 384\\\\\\\\\n  192 × 3 = 576\\\\\\\\\n\\end{align}$$\n\nBy concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1, 2, 3).\n\nThe same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1, 2, 3, 4, 5).\n\nWhat is the largest 1 to `k` pandigital `k`-digit number that can be formed as the concatenated product of an integer with (1, 2, ..., `n`) where `n` > 1?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pandigitalMultiples(k) {\n\n  return true;\n}\n\npandigitalMultiples(8);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function pandigitalMultiples(k) {\n  function getKDigitConcatenatedProduct(num, k) {\n    // returns false if concatenated product is not k digits\n    let concatenatedProduct = num.toString();\n    for (let i = 2; concatenatedProduct.length < k; i++) {\n      concatenatedProduct += num * i;\n    }\n    return concatenatedProduct.length === k ? concatenatedProduct : false;\n  }\n\n  function is1toKPandigital(num, k) {\n    const numStr = num.toString();\n\n    // check if length is not k\n    if (numStr.length !== k) {\n      return false;\n    }\n\n    // check if pandigital\n    for (let i = k; i > 0; i--) {\n      if (numStr.indexOf(i.toString()) === -1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let largestNum = 0;\n  for (let i = 10 ** Math.floor(k / 2) + 1; i >= 1; i--) {\n    const concatenatedProduct = getKDigitConcatenatedProduct(i, k);\n    if (is1toKPandigital(concatenatedProduct, k)) {\n      const number = parseInt(concatenatedProduct, 10);\n      if (number > largestNum) {\n        largestNum = number;\n      }\n    }\n  }\n  return largestNum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`pandigitalMultiples(8)` should return a number.",
          "testCode": "assert(typeof pandigitalMultiples(8) === 'number');"
        },
        {
          "text": "`pandigitalMultiples(8)` should return `78156234`.",
          "testCode": "assert.strictEqual(pandigitalMultiples(8), 78156234);"
        },
        {
          "text": "`pandigitalMultiples(9)` should return `932718654`.",
          "testCode": "assert.strictEqual(pandigitalMultiples(9), 932718654);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302042,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-38-pandigital-multiples.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3931000cf542c50fea6",
      "title": "Problem 39: Integer right triangles",
      "challengeType": 1,
      "dashedName": "problem-39-integer-right-triangles",
      "description": "If `p` is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.\n\n{20,48,52}, {24,45,51}, {30,40,50}\n\nFor which value of `p` ≤ `n`, is the number of solutions maximized?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function intRightTriangles(n) {\n\n  return n;\n}\n\nintRightTriangles(500);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// Original idea for this solution came from\n// https://www.xarg.org/puzzle/project-euler/problem-39/\n\nfunction intRightTriangles(n) {\n  // store the number of triangles with a given perimeter\n  let triangles = {};\n  // a is the shortest side\n  for (let a = 3; a < n / 3; a++)\n  // o is the opposite side and is at least as long as a\n    for (let o = a; o < n / 2; o++) {\n      let h = Math.sqrt(a * a + o * o); // hypotenuse\n      let p = a + o + h;  // perimeter\n      if ((h % 1) === 0 && p <= n) {\n        triangles[p] = (triangles[p] || 0) + 1;\n      }\n    }\n\n  let max = 0, maxp = null;\n  for (let p in triangles) {\n    if (max < triangles[p]) {\n      max = triangles[p];\n      maxp = parseInt(p);\n    }\n  }\n  return maxp;\n}"
        }
      ],
      "tests": [
        {
          "text": "`intRightTriangles(500)` should return a number.",
          "testCode": "assert(typeof intRightTriangles(500) === 'number');"
        },
        {
          "text": "`intRightTriangles(500)` should return 420.",
          "testCode": "assert(intRightTriangles(500) == 420);"
        },
        {
          "text": "`intRightTriangles(800)` should return 720.",
          "testCode": "assert(intRightTriangles(800) == 720);"
        },
        {
          "text": "`intRightTriangles(900)` should return 840.",
          "testCode": "assert(intRightTriangles(900) == 840);"
        },
        {
          "text": "`intRightTriangles(1000)` should return 840.",
          "testCode": "assert(intRightTriangles(1000) == 840);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302054,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-39-integer-right-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3701000cf542c50fe83",
      "title": "Problem 4: Largest palindrome product",
      "challengeType": 1,
      "dashedName": "problem-4-largest-palindrome-product",
      "description": "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n\nFind the largest palindrome made from the product of two `n`-digit numbers.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largestPalindromeProduct(n) {\n\n  return true;\n}\n\nlargestPalindromeProduct(3);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const largestPalindromeProduct = (digit)=>{\n  let start = 1;\n  let end = Number(`1e${digit}`) - 1;\n let palindrome = [];\n  for(let i=start;i<=end;i++){\n    for(let j=start;j<=end;j++){\n      let product = i*j;\n      let palindromeRegex = /\\b(\\d)(\\d?)(\\d?).?\\3\\2\\1\\b/gi;\n      palindromeRegex.test(product) && palindrome.push(product);\n    }\n }\n return Math.max(...palindrome);\n}"
        }
      ],
      "tests": [
        {
          "text": "`largestPalindromeProduct(2)` should return a number.",
          "testCode": "assert.isNumber(largestPalindromeProduct(2));"
        },
        {
          "text": "`largestPalindromeProduct(2)` should return 9009.",
          "testCode": "assert.strictEqual(largestPalindromeProduct(2), 9009);"
        },
        {
          "text": "`largestPalindromeProduct(3)` should return 906609.",
          "testCode": "assert.strictEqual(largestPalindromeProduct(3), 906609);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302065,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-4-largest-palindrome-product.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3941000cf542c50fea7",
      "title": "Problem 40: Champernowne''s constant",
      "challengeType": 1,
      "dashedName": "problem-40-champernownes-constant",
      "description": "An irrational decimal fraction is created by concatenating the positive integers:\n\n0.12345678910**1**112131415161718192021...\n\nIt can be seen that the 12<sup>th</sup> digit of the fractional part is 1.\n\nIf *d<sub>n</sub>* represents the *n*<sup>th</sup> digit of the fractional part, find the value of the following expression.\n\nd<sub>1</sub> × d<sub>10</sub> × d<sub>100</sub> × d<sub>1000</sub> × d<sub>10000</sub> × d<sub>100000</sub> × d<sub>1000000</sub>",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function champernownesConstant(n) {\n\n  return true;\n}\n\nchampernownesConstant(100);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function champernownesConstant(n) {\n  let fractionalPart = '';\n  for (let i = 0; fractionalPart.length <= n; i++) {\n    fractionalPart += i.toString();\n  }\n\n  let product = 1;\n  for (let i = 0; i < n.toString().length; i++) {\n    const index = 10 ** i;\n    product *= parseInt(fractionalPart[index], 10);\n  }\n\n  return product;\n}"
        }
      ],
      "tests": [
        {
          "text": "`champernownesConstant(100)` should return a number.",
          "testCode": "assert(typeof champernownesConstant(100) === 'number');"
        },
        {
          "text": "`champernownesConstant(100)` should return 5.",
          "testCode": "assert.strictEqual(champernownesConstant(100), 5);"
        },
        {
          "text": "`champernownesConstant(1000)` should return 15.",
          "testCode": "assert.strictEqual(champernownesConstant(1000), 15);"
        },
        {
          "text": "`champernownesConstant(1000000)` should return 210.",
          "testCode": "assert.strictEqual(champernownesConstant(1000000), 210);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302066,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-40-champernownes-constant.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3951000cf542c50fea8",
      "title": "Problem 41: Pandigital prime",
      "challengeType": 1,
      "dashedName": "problem-41-pandigital-prime",
      "description": "We shall say that an `n`-digit number is pandigital if it makes use of all the digits 1 to `n` exactly once. For example, 2143 is a 4-digit pandigital and is also prime.\n\nWhat is the largest `n`-length digit pandigital prime that exists?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pandigitalPrime(n) {\n\n  return n;\n}\n\npandigitalPrime(7);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function pandigitalPrime(n) {\n  function isPrime(num) {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return num !== 1;\n  }\n\n  function getPermutations(n) {\n    if (n === 1) {\n      permutations.push(digitsArr.join(''));\n    } else {\n      for (let i = 0; i < n - 1; i++) {\n        getPermutations(n - 1);\n        // swap(n % 2 === 0 ? i : 0, n - 1);\n        if (n % 2 === 0) {\n          swap(i, n - 1);\n        } else {\n          swap(0, n - 1);\n        }\n      }\n      getPermutations(n - 1);\n    }\n  }\n  function swap(x, y) {\n    let temp = digitsArr[x];\n    digitsArr[x] = digitsArr[y];\n    digitsArr[y] = temp;\n  }\n  let max = 0;\n  let permutations = [];\n  let digitsArr;\n  let pandigitalNum = '';\n\n  for (let max = n; max > 0; max--) {\n    pandigitalNum += max;\n  }\n\n  for (let i = 0; i < pandigitalNum.length; i++) {\n    if (max > 0) {\n      break;\n    } else {\n      permutations = [];\n      const currMax = pandigitalNum.slice(i);\n      digitsArr = currMax.split('');\n      getPermutations(digitsArr.length);\n\n      // sort permutations in descending order\n      permutations.sort(function(a, b) {\n        return b - a;\n      });\n\n      for (let perm of permutations) {\n        const thisPerm = parseInt(perm);\n        if (isPrime(thisPerm)) {\n          max = thisPerm;\n          break;\n        }\n      }\n    }\n  }\n\n  return max;\n}"
        }
      ],
      "tests": [
        {
          "text": "`pandigitalPrime(4)` should return a number.",
          "testCode": "assert(typeof pandigitalPrime(4) === 'number');"
        },
        {
          "text": "`pandigitalPrime(4)` should return 4231.",
          "testCode": "assert(pandigitalPrime(4) == 4231);"
        },
        {
          "text": "`pandigitalPrime(7)` should return 7652413.",
          "testCode": "assert(pandigitalPrime(7) == 7652413);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302078,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-41-pandigital-prime.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3961000cf542c50fea9",
      "title": "Problem 42: Coded triangle numbers",
      "challengeType": 1,
      "dashedName": "problem-42-coded-triangle-numbers",
      "description": "The `n`<sup>th</sup> term of the sequence of triangle numbers is given by, `tn` = ½`n`(`n`+1); so the first ten triangle numbers are:\n\n<div style='margin-left: 4em;'>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</div>\n\nBy converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = `t`<sub>10</sub>. If the word value is a triangle number then we shall call the word a triangle word.\n\nUsing words array of `n`-length, how many are triangle words?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function codedTriangleNumbers(n) {\n\n  return 1;\n}\n// Only change code above this line\n\nconst words = ['A','ABILITY','ABLE','ABOUT','ABOVE','ABSENCE','ABSOLUTELY','ACADEMIC','ACCEPT','ACCESS','ACCIDENT','ACCOMPANY','ACCORDING','ACCOUNT','ACHIEVE','ACHIEVEMENT','ACID','ACQUIRE','ACROSS','ACT','ACTION','ACTIVE','ACTIVITY','ACTUAL','ACTUALLY','ADD','ADDITION','ADDITIONAL','ADDRESS','ADMINISTRATION','ADMIT','ADOPT','ADULT','ADVANCE','ADVANTAGE','ADVICE','ADVISE','AFFAIR','AFFECT','AFFORD','AFRAID','AFTER','AFTERNOON','AFTERWARDS','AGAIN','AGAINST','AGE','AGENCY','AGENT','AGO','AGREE','AGREEMENT','AHEAD','AID','AIM','AIR','AIRCRAFT','ALL','ALLOW','ALMOST','ALONE','ALONG','ALREADY','ALRIGHT','ALSO','ALTERNATIVE','ALTHOUGH','ALWAYS','AMONG','AMONGST','AMOUNT','AN','ANALYSIS','ANCIENT','AND','ANIMAL','ANNOUNCE','ANNUAL','ANOTHER','ANSWER','ANY','ANYBODY','ANYONE','ANYTHING','ANYWAY','APART','APPARENT','APPARENTLY','APPEAL','APPEAR','APPEARANCE','APPLICATION','APPLY','APPOINT','APPOINTMENT','APPROACH','APPROPRIATE','APPROVE','AREA','ARGUE','ARGUMENT','ARISE','ARM','ARMY','AROUND','ARRANGE','ARRANGEMENT','ARRIVE','ART','ARTICLE','ARTIST','AS','ASK','ASPECT','ASSEMBLY','ASSESS','ASSESSMENT','ASSET','ASSOCIATE','ASSOCIATION','ASSUME','ASSUMPTION','AT','ATMOSPHERE','ATTACH','ATTACK','ATTEMPT','ATTEND','ATTENTION','ATTITUDE','ATTRACT','ATTRACTIVE','AUDIENCE','AUTHOR','AUTHORITY','AVAILABLE','AVERAGE','AVOID','AWARD','AWARE','AWAY','AYE','BABY','BACK','BACKGROUND','BAD','BAG','BALANCE','BALL','BAND','BANK','BAR','BASE','BASIC','BASIS','BATTLE','BE','BEAR','BEAT','BEAUTIFUL','BECAUSE','BECOME','BED','BEDROOM','BEFORE','BEGIN','BEGINNING','BEHAVIOUR','BEHIND','BELIEF','BELIEVE','BELONG','BELOW','BENEATH','BENEFIT','BESIDE','BEST','BETTER','BETWEEN','BEYOND','BIG','BILL','BIND','BIRD','BIRTH','BIT','BLACK','BLOCK','BLOOD','BLOODY','BLOW','BLUE','BOARD','BOAT','BODY','BONE','BOOK','BORDER','BOTH','BOTTLE','BOTTOM','BOX','BOY','BRAIN','BRANCH','BREAK','BREATH','BRIDGE','BRIEF','BRIGHT','BRING','BROAD','BROTHER','BUDGET','BUILD','BUILDING','BURN','BUS','BUSINESS','BUSY','BUT','BUY','BY','CABINET','CALL','CAMPAIGN','CAN','CANDIDATE','CAPABLE','CAPACITY','CAPITAL','CAR','CARD','CARE','CAREER','CAREFUL','CAREFULLY','CARRY','CASE','CASH','CAT','CATCH','CATEGORY','CAUSE','CELL','CENTRAL','CENTRE','CENTURY','CERTAIN','CERTAINLY','CHAIN','CHAIR','CHAIRMAN','CHALLENGE','CHANCE','CHANGE','CHANNEL','CHAPTER','CHARACTER','CHARACTERISTIC','CHARGE','CHEAP','CHECK','CHEMICAL','CHIEF','CHILD','CHOICE','CHOOSE','CHURCH','CIRCLE','CIRCUMSTANCE','CITIZEN','CITY','CIVIL','CLAIM','CLASS','CLEAN','CLEAR','CLEARLY','CLIENT','CLIMB','CLOSE','CLOSELY','CLOTHES','CLUB','COAL','CODE','COFFEE','COLD','COLLEAGUE','COLLECT','COLLECTION','COLLEGE','COLOUR','COMBINATION','COMBINE','COME','COMMENT','COMMERCIAL','COMMISSION','COMMIT','COMMITMENT','COMMITTEE','COMMON','COMMUNICATION','COMMUNITY','COMPANY','COMPARE','COMPARISON','COMPETITION','COMPLETE','COMPLETELY','COMPLEX','COMPONENT','COMPUTER','CONCENTRATE','CONCENTRATION','CONCEPT','CONCERN','CONCERNED','CONCLUDE','CONCLUSION','CONDITION','CONDUCT','CONFERENCE','CONFIDENCE','CONFIRM','CONFLICT','CONGRESS','CONNECT','CONNECTION','CONSEQUENCE','CONSERVATIVE','CONSIDER','CONSIDERABLE','CONSIDERATION','CONSIST','CONSTANT','CONSTRUCTION','CONSUMER','CONTACT','CONTAIN','CONTENT','CONTEXT','CONTINUE','CONTRACT','CONTRAST','CONTRIBUTE','CONTRIBUTION','CONTROL','CONVENTION','CONVERSATION','COPY','CORNER','CORPORATE','CORRECT','COS','COST','COULD','COUNCIL','COUNT','COUNTRY','COUNTY','COUPLE','COURSE','COURT','COVER','CREATE','CREATION','CREDIT','CRIME','CRIMINAL','CRISIS','CRITERION','CRITICAL','CRITICISM','CROSS','CROWD','CRY','CULTURAL','CULTURE','CUP','CURRENT','CURRENTLY','CURRICULUM','CUSTOMER','CUT','DAMAGE','DANGER','DANGEROUS','DARK','DATA','DATE','DAUGHTER','DAY','DEAD','DEAL','DEATH','DEBATE','DEBT','DECADE','DECIDE','DECISION','DECLARE','DEEP','DEFENCE','DEFENDANT','DEFINE','DEFINITION','DEGREE','DELIVER','DEMAND','DEMOCRATIC','DEMONSTRATE','DENY','DEPARTMENT','DEPEND','DEPUTY','DERIVE','DESCRIBE','DESCRIPTION','DESIGN','DESIRE','DESK','DESPITE','DESTROY','DETAIL','DETAILED','DETERMINE','DEVELOP','DEVELOPMENT','DEVICE','DIE','DIFFERENCE','DIFFERENT','DIFFICULT','DIFFICULTY','DINNER','DIRECT','DIRECTION','DIRECTLY','DIRECTOR','DISAPPEAR','DISCIPLINE','DISCOVER','DISCUSS','DISCUSSION','DISEASE','DISPLAY','DISTANCE','DISTINCTION','DISTRIBUTION','DISTRICT','DIVIDE','DIVISION','DO','DOCTOR','DOCUMENT','DOG','DOMESTIC','DOOR','DOUBLE','DOUBT','DOWN','DRAW','DRAWING','DREAM','DRESS','DRINK','DRIVE','DRIVER','DROP','DRUG','DRY','DUE','DURING','DUTY','EACH','EAR','EARLY','EARN','EARTH','EASILY','EAST','EASY','EAT','ECONOMIC','ECONOMY','EDGE','EDITOR','EDUCATION','EDUCATIONAL','EFFECT','EFFECTIVE','EFFECTIVELY','EFFORT','EGG','EITHER','ELDERLY','ELECTION','ELEMENT','ELSE','ELSEWHERE','EMERGE','EMPHASIS','EMPLOY','EMPLOYEE','EMPLOYER','EMPLOYMENT','EMPTY','ENABLE','ENCOURAGE','END','ENEMY','ENERGY','ENGINE','ENGINEERING','ENJOY','ENOUGH','ENSURE','ENTER','ENTERPRISE','ENTIRE','ENTIRELY','ENTITLE','ENTRY','ENVIRONMENT','ENVIRONMENTAL','EQUAL','EQUALLY','EQUIPMENT','ERROR','ESCAPE','ESPECIALLY','ESSENTIAL','ESTABLISH','ESTABLISHMENT','ESTATE','ESTIMATE','EVEN','EVENING','EVENT','EVENTUALLY','EVER','EVERY','EVERYBODY','EVERYONE','EVERYTHING','EVIDENCE','EXACTLY','EXAMINATION','EXAMINE','EXAMPLE','EXCELLENT','EXCEPT','EXCHANGE','EXECUTIVE','EXERCISE','EXHIBITION','EXIST','EXISTENCE','EXISTING','EXPECT','EXPECTATION','EXPENDITURE','EXPENSE','EXPENSIVE','EXPERIENCE','EXPERIMENT','EXPERT','EXPLAIN','EXPLANATION','EXPLORE','EXPRESS','EXPRESSION','EXTEND','EXTENT','EXTERNAL','EXTRA','EXTREMELY','EYE','FACE','FACILITY','FACT','FACTOR','FACTORY','FAIL','FAILURE','FAIR','FAIRLY','FAITH','FALL','FAMILIAR','FAMILY','FAMOUS','FAR','FARM','FARMER','FASHION','FAST','FATHER','FAVOUR','FEAR','FEATURE','FEE','FEEL','FEELING','FEMALE','FEW','FIELD','FIGHT','FIGURE','FILE','FILL','FILM','FINAL','FINALLY','FINANCE','FINANCIAL','FIND','FINDING','FINE','FINGER','FINISH','FIRE','FIRM','FIRST','FISH','FIT','FIX','FLAT','FLIGHT','FLOOR','FLOW','FLOWER','FLY','FOCUS','FOLLOW','FOLLOWING','FOOD','FOOT','FOOTBALL','FOR','FORCE','FOREIGN','FOREST','FORGET','FORM','FORMAL','FORMER','FORWARD','FOUNDATION','FREE','FREEDOM','FREQUENTLY','FRESH','FRIEND','FROM','FRONT','FRUIT','FUEL','FULL','FULLY','FUNCTION','FUND','FUNNY','FURTHER','FUTURE','GAIN','GAME','GARDEN','GAS','GATE','GATHER','GENERAL','GENERALLY','GENERATE','GENERATION','GENTLEMAN','GET','GIRL','GIVE','GLASS','GO','GOAL','GOD','GOLD','GOOD','GOVERNMENT','GRANT','GREAT','GREEN','GREY','GROUND','GROUP','GROW','GROWING','GROWTH','GUEST','GUIDE','GUN','HAIR','HALF','HALL','HAND','HANDLE','HANG','HAPPEN','HAPPY','HARD','HARDLY','HATE','HAVE','HE','HEAD','HEALTH','HEAR','HEART','HEAT','HEAVY','HELL','HELP','HENCE','HER','HERE','HERSELF','HIDE','HIGH','HIGHLY','HILL','HIM','HIMSELF','HIS','HISTORICAL','HISTORY','HIT','HOLD','HOLE','HOLIDAY','HOME','HOPE','HORSE','HOSPITAL','HOT','HOTEL','HOUR','HOUSE','HOUSEHOLD','HOUSING','HOW','HOWEVER','HUGE','HUMAN','HURT','HUSBAND','I','IDEA','IDENTIFY','IF','IGNORE','ILLUSTRATE','IMAGE','IMAGINE','IMMEDIATE','IMMEDIATELY','IMPACT','IMPLICATION','IMPLY','IMPORTANCE','IMPORTANT','IMPOSE','IMPOSSIBLE','IMPRESSION','IMPROVE','IMPROVEMENT','IN','INCIDENT','INCLUDE','INCLUDING','INCOME','INCREASE','INCREASED','INCREASINGLY','INDEED','INDEPENDENT','INDEX','INDICATE','INDIVIDUAL','INDUSTRIAL','INDUSTRY','INFLUENCE','INFORM','INFORMATION','INITIAL','INITIATIVE','INJURY','INSIDE','INSIST','INSTANCE','INSTEAD','INSTITUTE','INSTITUTION','INSTRUCTION','INSTRUMENT','INSURANCE','INTEND','INTENTION','INTEREST','INTERESTED','INTERESTING','INTERNAL','INTERNATIONAL','INTERPRETATION','INTERVIEW','INTO','INTRODUCE','INTRODUCTION','INVESTIGATE','INVESTIGATION','INVESTMENT','INVITE','INVOLVE','IRON','IS','ISLAND','ISSUE','IT','ITEM','ITS','ITSELF','JOB','JOIN','JOINT','JOURNEY','JUDGE','JUMP','JUST','JUSTICE','KEEP','KEY','KID','KILL','KIND','KING','KITCHEN','KNEE','KNOW','KNOWLEDGE','LABOUR','LACK','LADY','LAND','LANGUAGE','LARGE','LARGELY','LAST','LATE','LATER','LATTER','LAUGH','LAUNCH','LAW','LAWYER','LAY','LEAD','LEADER','LEADERSHIP','LEADING','LEAF','LEAGUE','LEAN','LEARN','LEAST','LEAVE','LEFT','LEG','LEGAL','LEGISLATION','LENGTH','LESS','LET','LETTER','LEVEL','LIABILITY','LIBERAL','LIBRARY','LIE','LIFE','LIFT','LIGHT','LIKE','LIKELY','LIMIT','LIMITED','LINE','LINK','LIP','LIST','LISTEN','LITERATURE','LITTLE','LIVE','LIVING','LOAN','LOCAL','LOCATION','LONG','LOOK','LORD','LOSE','LOSS','LOT','LOVE','LOVELY','LOW','LUNCH','MACHINE','MAGAZINE','MAIN','MAINLY','MAINTAIN','MAJOR','MAJORITY','MAKE','MALE','MAN','MANAGE','MANAGEMENT','MANAGER','MANNER','MANY','MAP','MARK','MARKET','MARRIAGE','MARRIED','MARRY','MASS','MASTER','MATCH','MATERIAL','MATTER','MAY','MAYBE','ME','MEAL','MEAN','MEANING','MEANS','MEANWHILE','MEASURE','MECHANISM','MEDIA','MEDICAL','MEET','MEETING','MEMBER','MEMBERSHIP','MEMORY','MENTAL','MENTION','MERELY','MESSAGE','METAL','METHOD','MIDDLE','MIGHT','MILE','MILITARY','MILK','MIND','MINE','MINISTER','MINISTRY','MINUTE','MISS','MISTAKE','MODEL','MODERN','MODULE','MOMENT','MONEY','MONTH','MORE','MORNING','MOST','MOTHER','MOTION','MOTOR','MOUNTAIN','MOUTH','MOVE','MOVEMENT','MUCH','MURDER','MUSEUM','MUSIC','MUST','MY','MYSELF','NAME','NARROW','NATION','NATIONAL','NATURAL','NATURE','NEAR','NEARLY','NECESSARILY','NECESSARY','NECK','NEED','NEGOTIATION','NEIGHBOUR','NEITHER','NETWORK','NEVER','NEVERTHELESS','NEW','NEWS','NEWSPAPER','NEXT','NICE','NIGHT','NO','NOBODY','NOD','NOISE','NONE','NOR','NORMAL','NORMALLY','NORTH','NORTHERN','NOSE','NOT','NOTE','NOTHING','NOTICE','NOTION','NOW','NUCLEAR','NUMBER','NURSE','OBJECT','OBJECTIVE','OBSERVATION','OBSERVE','OBTAIN','OBVIOUS','OBVIOUSLY','OCCASION','OCCUR','ODD','OF','OFF','OFFENCE','OFFER','OFFICE','OFFICER','OFFICIAL','OFTEN','OIL','OKAY','OLD','ON','ONCE','ONE','ONLY','ONTO','OPEN','OPERATE','OPERATION','OPINION','OPPORTUNITY','OPPOSITION','OPTION','OR','ORDER','ORDINARY','ORGANISATION','ORGANISE','ORGANIZATION','ORIGIN','ORIGINAL','OTHER','OTHERWISE','OUGHT','OUR','OURSELVES','OUT','OUTCOME','OUTPUT','OUTSIDE','OVER','OVERALL','OWN','OWNER','PACKAGE','PAGE','PAIN','PAINT','PAINTING','PAIR','PANEL','PAPER','PARENT','PARK','PARLIAMENT','PART','PARTICULAR','PARTICULARLY','PARTLY','PARTNER','PARTY','PASS','PASSAGE','PAST','PATH','PATIENT','PATTERN','PAY','PAYMENT','PEACE','PENSION','PEOPLE','PER','PERCENT','PERFECT','PERFORM','PERFORMANCE','PERHAPS','PERIOD','PERMANENT','PERSON','PERSONAL','PERSUADE','PHASE','PHONE','PHOTOGRAPH','PHYSICAL','PICK','PICTURE','PIECE','PLACE','PLAN','PLANNING','PLANT','PLASTIC','PLATE','PLAY','PLAYER','PLEASE','PLEASURE','PLENTY','PLUS','POCKET','POINT','POLICE','POLICY','POLITICAL','POLITICS','POOL','POOR','POPULAR','POPULATION','POSITION','POSITIVE','POSSIBILITY','POSSIBLE','POSSIBLY','POST','POTENTIAL','POUND','POWER','POWERFUL','PRACTICAL','PRACTICE','PREFER','PREPARE','PRESENCE','PRESENT','PRESIDENT','PRESS','PRESSURE','PRETTY','PREVENT','PREVIOUS','PREVIOUSLY','PRICE','PRIMARY','PRIME','PRINCIPLE','PRIORITY','PRISON','PRISONER','PRIVATE','PROBABLY','PROBLEM','PROCEDURE','PROCESS','PRODUCE','PRODUCT','PRODUCTION','PROFESSIONAL','PROFIT','PROGRAM','PROGRAMME','PROGRESS','PROJECT','PROMISE','PROMOTE','PROPER','PROPERLY','PROPERTY','PROPORTION','PROPOSE','PROPOSAL','PROSPECT','PROTECT','PROTECTION','PROVE','PROVIDE','PROVIDED','PROVISION','PUB','PUBLIC','PUBLICATION','PUBLISH','PULL','PUPIL','PURPOSE','PUSH','PUT','QUALITY','QUARTER','QUESTION','QUICK','QUICKLY','QUIET','QUITE','RACE','RADIO','RAILWAY','RAIN','RAISE','RANGE','RAPIDLY','RARE','RATE','RATHER','REACH','REACTION','READ','READER','READING','READY','REAL','REALISE','REALITY','REALIZE','REALLY','REASON','REASONABLE','RECALL','RECEIVE','RECENT','RECENTLY','RECOGNISE','RECOGNITION','RECOGNIZE','RECOMMEND','RECORD','RECOVER','RED','REDUCE','REDUCTION','REFER','REFERENCE','REFLECT','REFORM','REFUSE','REGARD','REGION','REGIONAL','REGULAR','REGULATION','REJECT','RELATE','RELATION','RELATIONSHIP','RELATIVE','RELATIVELY','RELEASE','RELEVANT','RELIEF','RELIGION','RELIGIOUS','RELY','REMAIN','REMEMBER','REMIND','REMOVE','REPEAT','REPLACE','REPLY','REPORT','REPRESENT','REPRESENTATION','REPRESENTATIVE','REQUEST','REQUIRE','REQUIREMENT','RESEARCH','RESOURCE','RESPECT','RESPOND','RESPONSE','RESPONSIBILITY','RESPONSIBLE','REST','RESTAURANT','RESULT','RETAIN','RETURN','REVEAL','REVENUE','REVIEW','REVOLUTION','RICH','RIDE','RIGHT','RING','RISE','RISK','RIVER','ROAD','ROCK','ROLE','ROLL','ROOF','ROOM','ROUND','ROUTE','ROW','ROYAL','RULE','RUN','RURAL','SAFE','SAFETY','SALE','SAME','SAMPLE','SATISFY','SAVE','SAY','SCALE','SCENE','SCHEME','SCHOOL','SCIENCE','SCIENTIFIC','SCIENTIST','SCORE','SCREEN','SEA','SEARCH','SEASON','SEAT','SECOND','SECONDARY','SECRETARY','SECTION','SECTOR','SECURE','SECURITY','SEE','SEEK','SEEM','SELECT','SELECTION','SELL','SEND','SENIOR','SENSE','SENTENCE','SEPARATE','SEQUENCE','SERIES','SERIOUS','SERIOUSLY','SERVANT','SERVE','SERVICE','SESSION','SET','SETTLE','SETTLEMENT','SEVERAL','SEVERE','SEX','SEXUAL','SHAKE','SHALL','SHAPE','SHARE','SHE','SHEET','SHIP','SHOE','SHOOT','SHOP','SHORT','SHOT','SHOULD','SHOULDER','SHOUT','SHOW','SHUT','SIDE','SIGHT','SIGN','SIGNAL','SIGNIFICANCE','SIGNIFICANT','SILENCE','SIMILAR','SIMPLE','SIMPLY','SINCE','SING','SINGLE','SIR','SISTER','SIT','SITE','SITUATION','SIZE','SKILL','SKIN','SKY','SLEEP','SLIGHTLY','SLIP','SLOW','SLOWLY','SMALL','SMILE','SO','SOCIAL','SOCIETY','SOFT','SOFTWARE','SOIL','SOLDIER','SOLICITOR','SOLUTION','SOME','SOMEBODY','SOMEONE','SOMETHING','SOMETIMES','SOMEWHAT','SOMEWHERE','SON','SONG','SOON','SORRY','SORT','SOUND','SOURCE','SOUTH','SOUTHERN','SPACE','SPEAK','SPEAKER','SPECIAL','SPECIES','SPECIFIC','SPEECH','SPEED','SPEND','SPIRIT','SPORT','SPOT','SPREAD','SPRING','STAFF','STAGE','STAND','STANDARD','STAR','START','STATE','STATEMENT','STATION','STATUS','STAY','STEAL','STEP','STICK','STILL','STOCK','STONE','STOP','STORE','STORY','STRAIGHT','STRANGE','STRATEGY','STREET','STRENGTH','STRIKE','STRONG','STRONGLY','STRUCTURE','STUDENT','STUDIO','STUDY','STUFF','STYLE','SUBJECT','SUBSTANTIAL','SUCCEED','SUCCESS','SUCCESSFUL','SUCH','SUDDENLY','SUFFER','SUFFICIENT','SUGGEST','SUGGESTION','SUITABLE','SUM','SUMMER','SUN','SUPPLY','SUPPORT','SUPPOSE','SURE','SURELY','SURFACE','SURPRISE','SURROUND','SURVEY','SURVIVE','SWITCH','SYSTEM','TABLE','TAKE','TALK','TALL','TAPE','TARGET','TASK','TAX','TEA','TEACH','TEACHER','TEACHING','TEAM','TEAR','TECHNICAL','TECHNIQUE','TECHNOLOGY','TELEPHONE','TELEVISION','TELL','TEMPERATURE','TEND','TERM','TERMS','TERRIBLE','TEST','TEXT','THAN','THANK','THANKS','THAT','THE','THEATRE','THEIR','THEM','THEME','THEMSELVES','THEN','THEORY','THERE','THEREFORE','THESE','THEY','THIN','THING','THINK','THIS','THOSE','THOUGH','THOUGHT','THREAT','THREATEN','THROUGH','THROUGHOUT','THROW','THUS','TICKET','TIME','TINY','TITLE','TO','TODAY','TOGETHER','TOMORROW','TONE','TONIGHT','TOO','TOOL','TOOTH','TOP','TOTAL','TOTALLY','TOUCH','TOUR','TOWARDS','TOWN','TRACK','TRADE','TRADITION','TRADITIONAL','TRAFFIC','TRAIN','TRAINING','TRANSFER','TRANSPORT','TRAVEL','TREAT','TREATMENT','TREATY','TREE','TREND','TRIAL','TRIP','TROOP','TROUBLE','TRUE','TRUST','TRUTH','TRY','TURN','TWICE','TYPE','TYPICAL','UNABLE','UNDER','UNDERSTAND','UNDERSTANDING','UNDERTAKE','UNEMPLOYMENT','UNFORTUNATELY','UNION','UNIT','UNITED','UNIVERSITY','UNLESS','UNLIKELY','UNTIL','UP','UPON','UPPER','URBAN','US','USE','USED','USEFUL','USER','USUAL','USUALLY','VALUE','VARIATION','VARIETY','VARIOUS','VARY','VAST','VEHICLE','VERSION','VERY','VIA','VICTIM','VICTORY','VIDEO','VIEW','VILLAGE','VIOLENCE','VISION','VISIT','VISITOR','VITAL','VOICE','VOLUME','VOTE','WAGE','WAIT','WALK','WALL','WANT','WAR','WARM','WARN','WASH','WATCH','WATER','WAVE','WAY','WE','WEAK','WEAPON','WEAR','WEATHER','WEEK','WEEKEND','WEIGHT','WELCOME','WELFARE','WELL','WEST','WESTERN','WHAT','WHATEVER','WHEN','WHERE','WHEREAS','WHETHER','WHICH','WHILE','WHILST','WHITE','WHO','WHOLE','WHOM','WHOSE','WHY','WIDE','WIDELY','WIFE','WILD','WILL','WIN','WIND','WINDOW','WINE','WING','WINNER','WINTER','WISH','WITH','WITHDRAW','WITHIN','WITHOUT','WOMAN','WONDER','WONDERFUL','WOOD','WORD','WORK','WORKER','WORKING','WORKS','WORLD','WORRY','WORTH','WOULD','WRITE','WRITER','WRITING','WRONG','YARD','YEAH','YEAR','YES','YESTERDAY','YET','YOU','YOUNG','YOUR','YOURSELF','YOUTH'];\n\ncodedTriangleNumbers(1786);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`codedTriangleNumbers(1400)` should return a number.",
          "testCode": "assert(typeof codedTriangleNumbers(1400) === 'number');"
        },
        {
          "text": "`codedTriangleNumbers(1400)` should return 129.",
          "testCode": "assert(codedTriangleNumbers(1400) == 129);"
        },
        {
          "text": "`codedTriangleNumbers(1500)` should return 137.",
          "testCode": "assert(codedTriangleNumbers(1500) == 137);"
        },
        {
          "text": "`codedTriangleNumbers(1600)` should return 141.",
          "testCode": "assert(codedTriangleNumbers(1600) == 141);"
        },
        {
          "text": "`codedTriangleNumbers(1786)` should return 162.",
          "testCode": "assert(codedTriangleNumbers(1786) == 162);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302089,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-42-coded-triangle-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3971000cf542c50feaa",
      "title": "Problem 43: Sub-string divisibility",
      "challengeType": 1,
      "dashedName": "problem-43-sub-string-divisibility",
      "description": "The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.\n\nLet $d_1$ be the $1^{st}$ digit, $d_2$ be the $2^{nd}$ digit, and so on. In this way, we note the following:\n\n- ${d_2}{d_3}{d_4} = 406$ is divisible by 2\n- ${d_3}{d_4}{d_5} = 063$ is divisible by 3\n- ${d_4}{d_5}{d_6} = 635$ is divisible by 5\n- ${d_5}{d_6}{d_7} = 357$ is divisible by 7\n- ${d_6}{d_7}{d_8} = 572$ is divisible by 11\n- ${d_7}{d_8}{d_9} = 728$ is divisible by 13\n- ${d_8}{d_9}{d_{10}} = 289$ is divisible by 17\n\nFind the sum of all 0 to `n` pandigital numbers with sub-strings fulfilling `n - 2` of these divisibility properties.\n\n**Note:** Pandigital numbers starting with `0` are to be considered in the result.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function substringDivisibility(n) {\n\n  return true;\n}\n\nsubstringDivisibility(5);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function substringDivisibility(n) {\n  function isSubDivisible(digits) {\n    const factors = [2, 3, 5, 7, 11, 13, 17];\n\n    for (let i = 1; i < digits.length - 2; i++) {\n      const subNumber = digits[i] * 100 + digits[i + 1] * 10 + digits[i + 2];\n      if (subNumber % factors[i - 1] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function heapsPermutations(k, digits, conditionCheck, results) {\n    if (k === 1) {\n      if (conditionCheck(digits)) {\n        const number = parseInt(digits.join(''), 10);\n        results.push(number);\n      }\n      return;\n    }\n\n    heapsPermutations(k - 1, digits, conditionCheck, results);\n\n    for (let i = 0; i < k - 1; i++) {\n      if (k % 2 === 0) {\n        [digits[i], digits[k - 1]] = [digits[k - 1], digits[i]];\n      } else {\n        [digits[0], digits[k - 1]] = [digits[k - 1], digits[0]];\n      }\n      heapsPermutations(k - 1, digits, conditionCheck, results);\n    }\n    return;\n  }\n\n  const allowedDigits = [...new Array(n + 1).keys()];\n  const divisiblePandigitals = [];\n  heapsPermutations(\n    allowedDigits.length,\n    allowedDigits,\n    isSubDivisible,\n    divisiblePandigitals\n  );\n\n  let sum = 0;\n  for (let i = 0; i < divisiblePandigitals.length; i++) {\n    sum += divisiblePandigitals[i];\n  }\n\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`substringDivisibility(5)` should return a number.",
          "testCode": "assert(typeof substringDivisibility(5) === 'number');"
        },
        {
          "text": "`substringDivisibility(5)` should return `12444480`.",
          "testCode": "assert.strictEqual(substringDivisibility(5), 12444480)"
        },
        {
          "text": "`substringDivisibility(7)` should return `1099210170`.",
          "testCode": "assert.strictEqual(substringDivisibility(7), 1099210170)"
        },
        {
          "text": "`substringDivisibility(8)` should return `1113342912`.",
          "testCode": "assert.strictEqual(substringDivisibility(8), 1113342912)"
        },
        {
          "text": "`substringDivisibility(9)` should return `16695334890`.",
          "testCode": "assert.strictEqual(substringDivisibility(9), 16695334890)"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302100,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-43-sub-string-divisibility.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3981000cf542c50feab",
      "title": "Problem 44: Pentagon numbers",
      "challengeType": 1,
      "dashedName": "problem-44-pentagon-numbers",
      "description": "Pentagonal numbers are generated by the formula, P<sub>n</sub>=`n`(3`n`−1)/2. The first ten pentagonal numbers are:\n\n1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...\n\nIt can be seen that P<sub>4</sub> + P<sub>7</sub> = 22 + 70 = 92 = P<sub>8</sub>. However, their difference, 70 − 22 = 48, is not pentagonal.\n\nFind the pair of pentagonal numbers, P<sub>j</sub> and P<sub>k</sub>, for which their sum and difference are pentagonal and D = |P<sub>k</sub> − P<sub>j</sub>| is minimized; what is the value of D?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pentagonNumbers() {\n\n  return true;\n}\n\npentagonNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function pentagonNumbers() {\n  function isPentagonal(num) {\n  // Formula found by solving pentagonal number\n  // equation for n.\n  const n = (Math.sqrt((24 * num) + 1) + 1) / 6;\n  return n % 1 === 0;\n  }\n\n  function pentagonal(num) {\n    return (num * ((3 * num) - 1)) / 2;\n  }\n  let result;\n  let i = 1;\n  while (!result) {\n  i++;\n  const num1 = (i * ((3 * i) - 1)) / 2; // Pentagonal num formula\n  const minDiff = num1 - (((i - 1) * ((3 * (i - 1)) - 1)) / 2);\n  let j = i - 1;\n  while (j > 0 && !result) {\n  const num2 = (j * ((3 * j) - 1)) / 2;\n  if (isPentagonal(num1 - num2) && isPentagonal(num1 + num2)) {\n        result = num1 - num2;\n      }\n      j--;\n    }\n  }\n  return result;\n  }"
        }
      ],
      "tests": [
        {
          "text": "`pentagonNumbers()` should return a number.",
          "testCode": "assert(typeof pentagonNumbers() === 'number');"
        },
        {
          "text": "`pentagonNumbers()` should return 5482660.",
          "testCode": "assert.strictEqual(pentagonNumbers(), 5482660);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302111,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-44-pentagon-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3991000cf542c50feac",
      "title": "Problem 45: Triangular, pentagonal, and hexagonal",
      "challengeType": 1,
      "dashedName": "problem-45-triangular-pentagonal-and-hexagonal",
      "description": "Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:\n\n<div style='display: inline-grid; text-align: center; grid-template-columns: 135px 135px 260px; grid-template-rows: auto;'><div>Triangle</div><div>T<sub>n</sub>=<var>n</var>(<var>n</var>+1)/2</div><div>1, 3, 6, 10, 15, ...</div></div>\n<div style='display: inline-grid; text-align: center; grid-template-columns: 135px 135px 260px; grid-template-rows: auto;'><div>Pentagonal</div><div>P<sub>n</sub>=<var>n</var>(3<var>n</var>−1)/2</div><div>1, 5, 12, 22, 35, ...</div></div>\n<div style='display: inline-grid; text-align: center; grid-template-columns: 135px 135px 260px; grid-template-rows: auto;'><div>Hexagonal</div><div>H<sub>n</sub>=<var>n</var>(2<var>n</var>−1)</div><div>1, 6, 15, 28, 45, ...</div></div>\n\nIt can be verified that T<sub>285</sub> = P<sub>165</sub> = H<sub>143</sub> = 40755.\n\nFind the next triangle number that is also pentagonal and hexagonal.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function triPentaHexa(n) {\n\n  return true;\n}\n\ntriPentaHexa(40756);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function triPentaHexa(n) {\n  function triangular(num) {\n  return (num * (num + 1)) / 2;\n}\n\nfunction isPentagonal(num) {\n  // Formula found by completing the square and\n  // solving for n.\n  const n = (Math.sqrt((24 * num) + 1) + 1) / 6;\n  return n % 1 === 0;\n}\n\n  function isHexagonal(num) {\n  // Formula found by completing the square and\n  // solving for n.\n  const n = Math.sqrt(0.5 * (num + (1 / 8))) + 0.25;\n return n % 1 === 0;\n}\n\nlet iTri = n;\nlet tri;\nlet found = false;\nwhile (!found) {\n  iTri++;\n  tri = triangular(iTri);\n  if (isPentagonal(tri) && isHexagonal(tri)) {\n    found = true;\n    }\n  }\n  return tri;\n}"
        }
      ],
      "tests": [
        {
          "text": "`triPentaHexa(40756)` should return a number.",
          "testCode": "assert(typeof triPentaHexa(40756) === 'number');"
        },
        {
          "text": "`triPentaHexa(40756)` should return 1533776805.",
          "testCode": "assert.strictEqual(triPentaHexa(40756), 1533776805);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302122,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-45-triangular-pentagonal-and-hexagonal.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f39a1000cf542c50fead",
      "title": "Problem 46: Goldbach''s other conjecture",
      "challengeType": 1,
      "dashedName": "problem-46-goldbachs-other-conjecture",
      "description": "It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.\n\n<div style='margin-left: 2em;'>\n  9 = 7 + 2×1<sup>2</sup><br>\n  15 = 7 + 2×2<sup>2</sup><br>\n  21 = 3 + 2×3<sup>2</sup><br>\n  25 = 7 + 2×3<sup>2</sup><br>\n  27 = 19 + 2×2<sup>2</sup><br>\n  33 = 31 + 2×1<sup>2</sup>\n</div>\n\nIt turns out that the conjecture was false.\n\nWhat is the smallest odd composite that cannot be written as the sum of a prime and twice a square?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function goldbachsOtherConjecture() {\n\n  return true;\n}\n\ngoldbachsOtherConjecture();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function goldbachsOtherConjecture() {  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquare(num) {\n    return Math.sqrt(num) % 1 === 0;\n  }\n\n  // construct a list of prime numbers\n  const primes = [];\n  for (let i = 2; primes.length < 1000; i++) {\n    if (isPrime(i)) primes.push(i);\n  }\n\n  let num = 3;\n  let answer;\n  while (!answer) {\n    num += 2;\n    if (!isPrime(num)) {\n      let found = false;\n      for (let primeI = 0; primeI < primes.length && !found; primeI++) {\n        const square = (num - primes[primeI]) / 2;\n        if (isSquare(square)) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) answer = num;\n    }\n  }\n  return answer;\n}"
        }
      ],
      "tests": [
        {
          "text": "`goldbachsOtherConjecture()` should return a number.",
          "testCode": "assert(typeof goldbachsOtherConjecture() === 'number');"
        },
        {
          "text": "`goldbachsOtherConjecture()` should return 5777.",
          "testCode": "assert.strictEqual(goldbachsOtherConjecture(), 5777);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302134,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-46-goldbachs-other-conjecture.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f39c1000cf542c50feae",
      "title": "Problem 47: Distinct primes factors",
      "challengeType": 1,
      "dashedName": "problem-47-distinct-primes-factors",
      "description": "The first two consecutive numbers to have two distinct prime factors are:\n\n<div style='padding-left: 4em;'>\n  14 = 2 × 7<br>\n  15 = 3 × 5\n</div>\n\nThe first three consecutive numbers to have three distinct prime factors are:\n\n<div style='padding-left: 4em;'>\n  644 = 2<sup>2</sup> × 7 × 23<br>\n  645 = 3 × 5 × 43<br>\n  646 = 2 × 17 × 19\n</div>\n\nFind the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function distinctPrimeFactors(targetNumPrimes, targetConsecutive) {\n\n  return true;\n}\n\ndistinctPrimeFactors(4, 4);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function distinctPrimeFactors(targetNumPrimes, targetConsecutive) {\n  const primeLimit = targetNumPrimes * targetConsecutive * 10000;\n  const numFactors = Array(primeLimit).fill(0);\n\n  let numConsecutive = 0;\n  for (let i = 2; i < primeLimit; i++) {\n    if (numFactors[i] === targetNumPrimes) {\n      // Current number is composite with target num factors\n      numConsecutive++;\n      if (numConsecutive === targetConsecutive) {\n        return i - numConsecutive + 1;\n      }\n    } else {\n      // Current number is not matching composite\n      numConsecutive = 0;\n      if (numFactors[i] === 0) {\n        // Current number is prime\n        for (let j = i; j < primeLimit; j += i) {\n          numFactors[j]++;\n        }\n      }\n    }\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`distinctPrimeFactors(2, 2)` should return a number.",
          "testCode": "assert(typeof distinctPrimeFactors(2, 2) === 'number');"
        },
        {
          "text": "`distinctPrimeFactors(2, 2)` should return 14.",
          "testCode": "assert.strictEqual(distinctPrimeFactors(2, 2), 14);"
        },
        {
          "text": "`distinctPrimeFactors(3, 3)` should return 644.",
          "testCode": "assert.strictEqual(distinctPrimeFactors(3, 3), 644);"
        },
        {
          "text": "`distinctPrimeFactors(4, 4)` should return 134043.",
          "testCode": "assert.strictEqual(distinctPrimeFactors(4, 4), 134043);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302145,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-47-distinct-primes-factors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f39c1000cf542c50feaf",
      "title": "Problem 48: Self powers",
      "challengeType": 1,
      "dashedName": "problem-48-self-powers",
      "description": "The series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 10<sup>10</sup> = 10405071317.\n\nFind the last ten digits of the series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 1000<sup>1000</sup>.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function selfPowers(power, lastDigits) {\n\n  return true;\n}\n\nselfPowers(1000, 10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function selfPowers(power, lastDigits) {\n  let sum = 0;\n  const modulo = Math.pow(10, lastDigits);\n\n  for (let i = 1; i <= power; i++) {\n    let temp = i;\n    for (let j = 1; j < i; j++) {\n      temp *= i;\n      temp %= modulo;\n    }\n\n    sum += temp;\n    sum %= modulo;\n  }\n\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`selfPowers(10, 3)` should return a number.",
          "testCode": "assert(typeof selfPowers(10, 3) === 'number');"
        },
        {
          "text": "`selfPowers(10, 3)` should return 317.",
          "testCode": "assert.strictEqual(selfPowers(10, 3), 317);"
        },
        {
          "text": "`selfPowers(150, 6)` should return 29045.",
          "testCode": "assert.strictEqual(selfPowers(150, 6), 29045);"
        },
        {
          "text": "`selfPowers(673, 7)` should return 2473989.",
          "testCode": "assert.strictEqual(selfPowers(673, 7), 2473989);"
        },
        {
          "text": "`selfPowers(1000, 10)` should return 9110846700.",
          "testCode": "assert.strictEqual(selfPowers(1000, 10), 9110846700);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302157,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-48-self-powers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f39d1000cf542c50feb0",
      "title": "Problem 49: Prime permutations",
      "challengeType": 1,
      "dashedName": "problem-49-prime-permutations",
      "description": "The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.\n\nThere are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.\n\nWhat 12-digit number do you form by concatenating the three terms in this sequence?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primePermutations() {\n\n  return true;\n}\n\nprimePermutations();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function primePermutations() {\n  function arePermutations(num1, num2) {\n    const numStr1 = num1.toString();\n    let numStr2 = num2.toString();\n    if (numStr1.length !== numStr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < numStr1.length; i++) {\n      const index = numStr2.indexOf(numStr1[i]);\n      if (index === -1) {\n        return false;\n      }\n      numStr2 = numStr2.slice(0, index) + numStr2.slice(index + 1);\n    }\n    return true;\n  }\n\n  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  for (let num1 = 1000; num1 <= 9999; num1++) {\n    const num2 = num1 + 3330;\n    const num3 = num2 + 3330;\n    if (isPrime(num1) && isPrime(num2) && isPrime(num3)) {\n      if (arePermutations(num1, num2) && arePermutations(num1, num3)\n        && num1 !== 1487) {\n        // concatenate and return numbers\n        return (num1 * 100000000) + (num2 * 10000) + num3;\n      }\n    }\n  }\n  return 0;\n}"
        }
      ],
      "tests": [
        {
          "text": "`primePermutations()` should return a number.",
          "testCode": "assert(typeof primePermutations() === 'number');"
        },
        {
          "text": "`primePermutations()` should return 296962999629.",
          "testCode": "assert.strictEqual(primePermutations(), 296962999629);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302159,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-49-prime-permutations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3711000cf542c50fe84",
      "title": "Problem 5: Smallest multiple",
      "challengeType": 1,
      "dashedName": "problem-5-smallest-multiple",
      "description": "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to `n`?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function smallestMult(n) {\n\n  return true;\n}\n\nsmallestMult(20);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function smallestMult(n){\n  function gcd(a, b) {\n    return b === 0 ? a : gcd(b, a%b); // Euclidean algorithm\n  }\n\n  function lcm(a, b) {\n    return a * b / gcd(a, b);\n  }\n  var result = 1;\n  for(var i = 2; i <= n; i++) {\n    result = lcm(result, i);\n  }\n  return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "`smallestMult(5)` should return a number.",
          "testCode": "assert.isNumber(smallestMult(5));"
        },
        {
          "text": "`smallestMult(5)` should return 60.",
          "testCode": "assert.strictEqual(smallestMult(5), 60);"
        },
        {
          "text": "`smallestMult(7)` should return 420.",
          "testCode": "assert.strictEqual(smallestMult(7), 420);"
        },
        {
          "text": "`smallestMult(10)` should return 2520.",
          "testCode": "assert.strictEqual(smallestMult(10), 2520);"
        },
        {
          "text": "`smallestMult(13)` should return 360360.",
          "testCode": "assert.strictEqual(smallestMult(13), 360360);"
        },
        {
          "text": "`smallestMult(20)` should return 232792560.",
          "testCode": "assert.strictEqual(smallestMult(20), 232792560);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302160,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-5-smallest-multiple.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f39e1000cf542c50feb1",
      "title": "Problem 50: Consecutive prime sum",
      "challengeType": 1,
      "dashedName": "problem-50-consecutive-prime-sum",
      "description": "The prime 41, can be written as the sum of six consecutive primes:\n\n<div style='text-align: center;'>41 = 2 + 3 + 5 + 7 + 11 + 13</div>\n\nThis is the longest sum of consecutive primes that adds to a prime below one-hundred.\n\nThe longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.\n\nWhich prime, below one-million, can be written as the sum of the most consecutive primes?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function consecutivePrimeSum(limit) {\n\n  return true;\n}\n\nconsecutivePrimeSum(1000000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const primes = [2];\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        primes.push(prime);\n        // Mark all multiples of this number as false (not prime)\n        const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSquaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n    for (let i = sqrtUpper + 1; i < upper; i++) {\n      if (seive[i]) {\n        primes.push(2 * i + 3);\n      }\n    }\n\n    this._seive = seive;\n    this._primes = primes;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n\n  get primes() {\n    return this._primes;\n  }\n};\n\nfunction consecutivePrimeSum(limit) {\n  // Initialize seive\n  const primeSeive = new PrimeSeive(limit);\n\n  // Initialize for longest sum < 100\n  let bestPrime = 41;\n  let bestI = 0;\n  let bestJ = 5;\n\n  // Find longest sum < limit\n  let sumOfCurrRange = 41;\n  let i = 0, j = 5;\n  // -- Loop while current some starting at i is < limit\n  while (sumOfCurrRange < limit) {\n    let currSum = sumOfCurrRange;\n    // -- Loop while pushing j towards end of PRIMES list\n    //      keeping sum under limit\n    while (currSum < limit) {\n      if (primeSeive.isPrime(currSum)) {\n        bestPrime = sumOfCurrRange = currSum;\n        bestI = i;\n        bestJ = j;\n      }\n      // -- Increment inner loop\n      j++;\n      currSum += primeSeive.primes[j];\n    }\n    // -- Increment outer loop\n    i++;\n    j = i + (bestJ - bestI);\n    sumOfCurrRange -= primeSeive.primes[i - 1];\n    sumOfCurrRange += primeSeive.primes[j];\n  }\n  // Return\n  return bestPrime;\n}"
        }
      ],
      "tests": [
        {
          "text": "`consecutivePrimeSum(1000)` should return a number.",
          "testCode": "assert(typeof consecutivePrimeSum(1000) === 'number');"
        },
        {
          "text": "`consecutivePrimeSum(1000)` should return 953.",
          "testCode": "assert.strictEqual(consecutivePrimeSum(1000), 953);"
        },
        {
          "text": "`consecutivePrimeSum(1000000)` should return 997651.",
          "testCode": "assert.strictEqual(consecutivePrimeSum(1000000), 997651);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302161,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-50-consecutive-prime-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f39f1000cf542c50feb2",
      "title": "Problem 51: Prime digit replacements",
      "challengeType": 1,
      "dashedName": "problem-51-prime-digit-replacements",
      "description": "By replacing the 1st digit of the 2-digit number \\*3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.\n\nBy replacing the 3rd and 4th digits of 56\\*\\*3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.\n\nFind the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an `n` prime value family.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeDigitReplacements(n) {\n\n  return true;\n}\n\nprimeDigitReplacements(6);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSquaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\n\nfunction primeDigitReplacements(n) {\n  const primeSeive = new PrimeSeive(n * n * n * 2000);\n\n  function isNFamily(number, n) {\n    const prime = number.toString();\n    const lastDigit = prime[prime.length - 1];\n    return doesReplacingMakeFamily(prime, '0', n) ||\n      doesReplacingMakeFamily(prime, '2', n) ||\n      (lastDigit !== '1' && doesReplacingMakeFamily(prime, '1', n));\n  }\n\n  function doesReplacingMakeFamily(prime, digitToReplace, family) {\n    let miss = 0;\n    const base = parseInt(\n      prime\n        .split('')\n        .map(digit => digit == digitToReplace ? '0' : digit)\n        .join('')\n    );\n    const replacements = parseInt(\n      prime\n        .split('')\n        .map(digit => digit === digitToReplace ? '1' : '0')\n        .join('')\n    );\n    const start = prime[0] === digitToReplace ? 1 : 0;\n    for (let i = start; i < 10; i++) {\n      const nextNumber = base + i * replacements;\n      if (!isPartOfFamily(nextNumber, prime)) miss++;\n      if (10 - start - miss < family) break;\n    }\n    return 10 - start - miss === family;\n  }\n\n  function isPartOfFamily(number, prime) {\n    return (\n      primeSeive.isPrime(number) && number.toString().length === prime.length\n    );\n  }\n\n  for (let number = 1; number < 125000; number++) {\n    if (primeSeive.isPrime(number) && isNFamily(number, n)) {\n      return number;\n    }\n  }\n  return -1;\n}"
        }
      ],
      "tests": [
        {
          "text": "`primeDigitReplacements(6)` should return a number.",
          "testCode": "assert(typeof primeDigitReplacements(6) === 'number');"
        },
        {
          "text": "`primeDigitReplacements(6)` should return `13`.",
          "testCode": "assert.strictEqual(primeDigitReplacements(6), 13);"
        },
        {
          "text": "`primeDigitReplacements(7)` should return `56003`.",
          "testCode": "assert.strictEqual(primeDigitReplacements(7), 56003);"
        },
        {
          "text": "`primeDigitReplacements(8)` should return `121313`.",
          "testCode": "assert.strictEqual(primeDigitReplacements(8), 121313);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302162,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-51-prime-digit-replacements.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a01000cf542c50feb3",
      "title": "Problem 52: Permuted multiples",
      "challengeType": 1,
      "dashedName": "problem-52-permuted-multiples",
      "description": "It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.\n\nFind the smallest positive integer, such that multiplied by integers $\\\\{2, 3, \\ldots, n\\\\}$, contain the same digits.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function permutedMultiples(n) {\n\n  return true;\n}\n\npermutedMultiples(2);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function permutedMultiples(n) {\n    const isPermutation = (a, b) =>\n        a.length !== b.length\n            ? false\n            : a.split('').sort().join() === b.split('').sort().join();\n\n\n    let start = 1;\n    let found = false;\n    let result = 0;\n\n    while (!found) {\n        start *= 10;\n        for (let i = start; i < start * 10 / n; i++) {\n            found = true;\n            for (let j = 2; j <= n; j++) {\n                if (!isPermutation(i + '', j * i + '')) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                result = i;\n                break;\n            }\n        }\n    }\n\n    return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "`permutedMultiples(2)` should return a number.",
          "testCode": "assert(typeof permutedMultiples(2) === 'number');"
        },
        {
          "text": "`permutedMultiples(2)` should return `125874`.",
          "testCode": "assert.strictEqual(permutedMultiples(2), 125874);"
        },
        {
          "text": "`permutedMultiples(6)` should return `142857`.",
          "testCode": "assert.strictEqual(permutedMultiples(6), 142857);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302163,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-52-permuted-multiples.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a11000cf542c50feb4",
      "title": "Problem 53: Combinatoric selections",
      "challengeType": 1,
      "dashedName": "problem-53-combinatoric-selections",
      "description": "There are exactly ten ways of selecting three from five, 12345:\n\n<div style='text-align: center;'>123, 124, 125, 134, 135, 145, 234, 235, 245, and 345</div>\n\nIn combinatorics, we use the notation, $\\\\displaystyle \\\\binom 5 3 = 10$\n\nIn general, $\\\\displaystyle \\\\binom n r = \\\\dfrac{n!}{r!(n-r)!}$, where $r \\\\le n$, $n! = n \\\\times (n-1) \\\\times ... \\\\times 3 \\\\times 2 \\\\times 1$, and $0! = 1$.\n\nIt is not until $n = 23$, that a value exceeds one-million: $\\\\displaystyle \\\\binom {23} {10} = 1144066$.\n\nHow many, not necessarily distinct, values of $\\\\displaystyle \\\\binom n r$ for $1 \\\\le n \\\\le 100$, are greater than one-million?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function combinatoricSelections(limit) {\n\n  return 1;\n}\n\ncombinatoricSelections(1000000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function combinatoricSelections(limit) {\n    const factorial = n =>\n        Array.apply(null, { length: n })\n            .map((_, i) => i + 1)\n            .reduce((p, c) => p * c, 1);\n\n    let result = 0;\n    const nMax = 100;\n\n    for (let n = 1; n <= nMax; n++) {\n        for (let r = 0; r <= n; r++) {\n            if (factorial(n) / (factorial(r) * factorial(n - r)) >= limit)\n                result++;\n        }\n    }\n\n    return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "`combinatoricSelections(1000)` should return a number.",
          "testCode": "assert(typeof combinatoricSelections(1000) === 'number');"
        },
        {
          "text": "`combinatoricSelections(1000)` should return 4626.",
          "testCode": "assert.strictEqual(combinatoricSelections(1000), 4626);"
        },
        {
          "text": "`combinatoricSelections(10000)` should return 4431.",
          "testCode": "assert.strictEqual(combinatoricSelections(10000), 4431);"
        },
        {
          "text": "`combinatoricSelections(100000)` should return 4255.",
          "testCode": "assert.strictEqual(combinatoricSelections(100000), 4255);"
        },
        {
          "text": "`combinatoricSelections(1000000)` should return 4075.",
          "testCode": "assert.strictEqual(combinatoricSelections(1000000), 4075);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302164,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-53-combinatoric-selections.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a21000cf542c50feb5",
      "title": "Problem 54: Poker hands",
      "challengeType": 1,
      "dashedName": "problem-54-poker-hands",
      "description": "In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:\n\n<ul>\n  <li>High Card: Highest value card.</li>\n  <li>One Pair: Two cards of the same value.</li>\n  <li>Two Pairs: Two different pairs.</li>\n  <li>Three of a Kind: Three cards of the same value.</li>\n  <li>Straight: All cards are consecutive values.</li>\n  <li>Flush: All cards of the same suit.</li>\n  <li>Full House: Three of a kind and a pair.</li>\n  <li>Four of a Kind: Four cards of the same value.</li>\n  <li>Straight Flush: All cards are consecutive values of same suit.</li>\n  <li>Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.</li>\n</ul>\n\nThe cards are valued in the order: 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.\n\nIf two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below). But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so on.\n\nConsider the following five hands dealt to two players:\n\n| Hand               | Player 1                                                  | Player 2                                                   | Winner   |\n| ------------------ | --------------------------------------------------------- | ---------------------------------------------------------- | -------- |\n| <strong>1</strong> | 5H 5C 6S 7S KD <br> Pair of Fives                         | 2C 3S 8S 8D TD <br> Pair of Eights                         | Player 2 |\n| <strong>2</strong> | 5D 8C 9S JS AC <br> Highest card Ace                      | 2C 5C 7D 8S QH <br> Highest card Queen                     | Player 1 |\n| <strong>3</strong> | 2D 9C AS AH AC <br> Three Aces                            | 3D 6D 7D TD QD <br> Flush with Diamonds                    | Player 2 |\n| <strong>4</strong> | 4D 6S 9H QH QC <br> Pair of Queens <br> Highest card Nine | 3D 6D 7H QD QS <br> Pair of Queens <br> Highest card Seven | Player 1 |\n| <strong>5</strong> | 2H 2D 4C 4D 4S <br> Full House <br> with Three Fours      | 3C 3D 3S 9S 9D <br> Full House <br> with Three Threes      | Player 1 |\n\nThe global array (`handsArr`) passed to the function, contains one-thousand random hands dealt to two players. Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards. You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner.\n\nHow many hands does Player 1 win?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pokerHands(arr) {\n\n  return true;\n}\n\nconst testArr = [\n  '8C TS KC 9H 4S 7D 2S 5D 3S AC',\n  '5C AD 5D AC 9C 7C 5H 8D TD KS',\n  '3H 7H 6S KC JS QH TD JC 2D 8S',\n  'TH 8H 5C QS TC 9H 4D JC KS JS',\n  '7C 5H KC QH JD AS KH 4C AD 4S'\n];\n\npokerHands(testArr);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pokerHands(testArr)` should return a number.",
          "testCode": "assert(typeof pokerHands(testArr) === 'number');"
        },
        {
          "text": "`pokerHands(testArr)` should return 2.",
          "testCode": "assert.strictEqual(pokerHands(testArr), 2);"
        },
        {
          "text": "`pokerHands(handsArr)` should return 376.",
          "testCode": "assert.strictEqual(pokerHands(handsArr), 376);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302165,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-54-poker-hands.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "const handsArr = [\n  '8C TS KC 9H 4S 7D 2S 5D 3S AC',\n  '5C AD 5D AC 9C 7C 5H 8D TD KS',\n  '3H 7H 6S KC JS QH TD JC 2D 8S',\n  'TH 8H 5C QS TC 9H 4D JC KS JS',\n  '7C 5H KC QH JD AS KH 4C AD 4S',\n  '5H KS 9C 7D 9H 8D 3S 5D 5C AH',\n  '6H 4H 5C 3H 2H 3S QH 5S 6S AS',\n  'TD 8C 4H 7C TC KC 4C 3H 7S KS',\n  '7C 9C 6D KD 3H 4C QS QC AC KH',\n  'JC 6S 5H 2H 2D KD 9D 7C AS JS',\n  'AD QH TH 9D 8H TS 6D 3S AS AC',\n  '2H 4S 5C 5S TC KC JD 6C TS 3C',\n  'QD AS 6H JS 2C 3D 9H KC 4H 8S',\n  'KD 8S 9S 7C 2S 3S 6D 6S 4H KC',\n  '3C 8C 2D 7D 4D 9S 4S QH 4H JD',\n  '8C KC 7S TC 2D TS 8H QD AC 5C',\n  '3D KH QD 6C 6S AD AS 8H 2H QS',\n  '6S 8D 4C 8S 6C QH TC 6D 7D 9D',\n  '2S 8D 8C 4C TS 9S 9D 9C AC 3D',\n  '3C QS 2S 4H JH 3D 2D TD 8S 9H',\n  '5H QS 8S 6D 3C 8C JD AS 7H 7D',\n  '6H TD 9D AS JH 6C QC 9S KD JC',\n  'AH 8S QS 4D TH AC TS 3C 3D 5C',\n  '5S 4D JS 3D 8H 6C TS 3S AD 8C',\n  '6D 7C 5D 5H 3S 5C JC 2H 5S 3D',\n  '5H 6H 2S KS 3D 5D JD 7H JS 8H',\n  'KH 4H AS JS QS QC TC 6D 7C KS',\n  '3D QS TS 2H JS 4D AS 9S JC KD',\n  'QD 5H 4D 5D KH 7H 3D JS KD 4H',\n  '2C 9H 6H 5C 9D 6C JC 2D TH 9S',\n  '7D 6D AS QD JH 4D JS 7C QS 5C',\n  '3H KH QD AD 8C 8H 3S TH 9D 5S',\n  'AH 9S 4D 9D 8S 4H JS 3C TC 8D',\n  '2C KS 5H QD 3S TS 9H AH AD 8S',\n  '5C 7H 5D KD 9H 4D 3D 2D KS AD',\n  'KS KC 9S 6D 2C QH 9D 9H TS TC',\n  '9C 6H 5D QH 4D AD 6D QC JS KH',\n  '9S 3H 9D JD 5C 4D 9H AS TC QH',\n  '2C 6D JC 9C 3C AD 9S KH 9D 7D',\n  'KC 9C 7C JC JS KD 3H AS 3C 7D',\n  'QD KH QS 2C 3S 8S 8H 9H 9C JC',\n  'QH 8D 3C KC 4C 4H 6D AD 9H 9D',\n  '3S KS QS 7H KH 7D 5H 5D JD AD',\n  '2H 2C 6H TH TC 7D 8D 4H 8C AS',\n  '4S 2H AC QC 3S 6D TH 4D 4C KH',\n  '4D TC KS AS 7C 3C 6D 2D 9H 6C',\n  '8C TD 5D QS 2C 7H 4C 9C 3H 9H',\n  '5H JH TS 7S TD 6H AD QD 8H 8S',\n  '5S AD 9C 8C 7C 8D 5H 9D 8S 2S',\n  '4H KH KS 9S 2S KC 5S AD 4S 7D',\n  'QS 9C QD 6H JS 5D AC 8D 2S AS',\n  'KH AC JC 3S 9D 9S 3C 9C 5S JS',\n  'AD 3C 3D KS 3S 5C 9C 8C TS 4S',\n  'JH 8D 5D 6H KD QS QD 3D 6C KC',\n  '8S JD 6C 3S 8C TC QC 3C QH JS',\n  'KC JC 8H 2S 9H 9C JH 8S 8C 9S',\n  '8S 2H QH 4D QC 9D KC AS TH 3C',\n  '8S 6H TH 7C 2H 6S 3C 3H AS 7S',\n  'QH 5S JS 4H 5H TS 8H AH AC JC',\n  '9D 8H 2S 4S TC JC 3C 7H 3H 5C',\n  '3D AD 3C 3S 4C QC AS 5D TH 8C',\n  '6S 9D 4C JS KH AH TS JD 8H AD',\n  '4C 6S 9D 7S AC 4D 3D 3S TC JD',\n  'AD 7H 6H 4H JH KC TD TS 7D 6S',\n  '8H JH TC 3S 8D 8C 9S 2C 5C 4D',\n  '2C 9D KC QH TH QS JC 9C 4H TS',\n  'QS 3C QD 8H KH 4H 8D TD 8S AC',\n  '7C 3C TH 5S 8H 8C 9C JD TC KD',\n  'QC TC JD TS 8C 3H 6H KD 7C TD',\n  'JH QS KS 9C 6D 6S AS 9H KH 6H',\n  '2H 4D AH 2D JH 6H TD 5D 4H JD',\n  'KD 8C 9S JH QD JS 2C QS 5C 7C',\n  '4S TC 7H 8D 2S 6H 7S 9C 7C KC',\n  '8C 5D 7H 4S TD QC 8S JS 4H KS',\n  'AD 8S JH 6D TD KD 7C 6C 2D 7D',\n  'JC 6H 6S JS 4H QH 9H AH 4C 3C',\n  '6H 5H AS 7C 7S 3D KH KC 5D 5C',\n  'JC 3D TD AS 4D 6D 6S QH JD KS',\n  '8C 7S 8S QH 2S JD 5C 7H AH QD',\n  '8S 3C 6H 6C 2C 8D TD 7D 4C 4D',\n  '5D QH KH 7C 2S 7H JS 6D QC QD',\n  'AD 6C 6S 7D TH 6H 2H 8H KH 4H',\n  'KS JS KD 5D 2D KH 7D 9C 8C 3D',\n  '9C 6D QD 3C KS 3S 7S AH JD 2D',\n  'AH QH AS JC 8S 8H 4C KC TH 7D',\n  'JC 5H TD 7C 5D KD 4C AD 8H JS',\n  'KC 2H AC AH 7D JH KH 5D 7S 6D',\n  '9S 5S 9C 6H 8S TD JD 9H 6C AC',\n  '7D 8S 6D TS KD 7H AC 5S 7C 5D',\n  'AH QC JC 4C TC 8C 2H TS 2C 7D',\n  'KD KC 6S 3D 7D 2S 8S 3H 5S 5C',\n  '8S 5D 8H 4C 6H KC 3H 7C 5S KD',\n  'JH 8C 3D 3C 6C KC TD 7H 7C 4C',\n  'JC KC 6H TS QS TD KS 8H 8C 9S',\n  '6C 5S 9C QH 7D AH KS KC 9S 2C',\n  '4D 4S 8H TD 9C 3S 7D 9D AS TH',\n  '6S 7D 3C 6H 5D KD 2C 5C 9D 9C',\n  '2H KC 3D AD 3H QD QS 8D JC 4S',\n  '8C 3H 9C 7C AD 5D JC 9D JS AS',\n  '5D 9H 5C 7H 6S 6C QC JC QD 9S',\n  'JC QS JH 2C 6S 9C QC 3D 4S TC',\n  '4H 5S 8D 3D 4D 2S KC 2H JS 2C',\n  'TD 3S TH KD 4D 7H JH JS KS AC',\n  '7S 8C 9S 2D 8S 7D 5C AD 9D AS',\n  '8C 7H 2S 6C TH 3H 4C 3S 8H AC',\n  'KD 5H JC 8H JD 2D 4H TD JH 5C',\n  '3D AS QH KS 7H JD 8S 5S 6D 5H',\n  '9S 6S TC QS JC 5C 5D 9C TH 8C',\n  '5H 3S JH 9H 2S 2C 6S 7S AS KS',\n  '8C QD JC QS TC QC 4H AC KH 6C',\n  'TC 5H 7D JH 4H 2H 8D JC KS 4D',\n  '5S 9C KH KD 9H 5C TS 3D 7D 2D',\n  '5H AS TC 4D 8C 2C TS 9D 3H 8D',\n  '6H 8D 2D 9H JD 6C 4S 5H 5S 6D',\n  'AD 9C JC 7D 6H 9S 6D JS 9H 3C',\n  'AD JH TC QS 4C 5D 9S 7C 9C AH',\n  'KD 6H 2H TH 8S QD KS 9D 9H AS',\n  '4H 8H 8D 5H 6C AH 5S AS AD 8S',\n  'QS 5D 4S 2H TD KS 5H AC 3H JC',\n  '9C 7D QD KD AC 6D 5H QH 6H 5S',\n  'KC AH QH 2H 7D QS 3H KS 7S JD',\n  '6C 8S 3H 6D KS QD 5D 5C 8H TC',\n  '9H 4D 4S 6S 9D KH QC 4H 6C JD',\n  'TD 2D QH 4S 6H JH KD 3C QD 8C',\n  '4S 6H 7C QD 9D AS AH 6S AD 3C',\n  '2C KC TH 6H 8D AH 5C 6D 8S 5D',\n  'TD TS 7C AD JC QD 9H 3C KC 7H',\n  '5D 4D 5S 8H 4H 7D 3H JD KD 2D',\n  'JH TD 6H QS 4S KD 5C 8S 7D 8H',\n  'AC 3D AS 8C TD 7H KH 5D 6C JD',\n  '9D KS 7C 6D QH TC JD KD AS KC',\n  'JH 8S 5S 7S 7D AS 2D 3D AD 2H',\n  '2H 5D AS 3C QD KC 6H 9H 9S 2C',\n  '9D 5D TH 4C JH 3H 8D TC 8H 9H',\n  '6H KD 2C TD 2H 6C 9D 2D JS 8C',\n  'KD 7S 3C 7C AS QH TS AD 8C 2S',\n  'QS 8H 6C JS 4C 9S QC AD TD TS',\n  '2H 7C TS TC 8C 3C 9H 2D 6D JC',\n  'TC 2H 8D JH KS 6D 3H TD TH 8H',\n  '9D TD 9H QC 5D 6C 8H 8C KC TS',\n  '2H 8C 3D AH 4D TH TC 7D 8H KC',\n  'TS 5C 2D 8C 6S KH AH 5H 6H KC',\n  '5S 5D AH TC 4C JD 8D 6H 8C 6C',\n  'KC QD 3D 8H 2D JC 9H 4H AD 2S',\n  'TD 6S 7D JS KD 4H QS 2S 3S 8C',\n  '4C 9H JH TS 3S 4H QC 5S 9S 9C',\n  '2C KD 9H JS 9S 3H JC TS 5D AC',\n  'AS 2H 5D AD 5H JC 7S TD JS 4C',\n  '2D 4S 8H 3D 7D 2C AD KD 9C TS',\n  '7H QD JH 5H JS AC 3D TH 4C 8H',\n  '6D KH KC QD 5C AD 7C 2D 4H AC',\n  '3D 9D TC 8S QD 2C JC 4H JD AH',\n  '6C TD 5S TC 8S AH 2C 5D AS AC',\n  'TH 7S 3D AS 6C 4C 7H 7D 4H AH',\n  '5C 2H KS 6H 7S 4H 5H 3D 3C 7H',\n  '3C 9S AC 7S QH 2H 3D 6S 3S 3H',\n  '2D 3H AS 2C 6H TC JS 6S 9C 6C',\n  'QH KD QD 6D AC 6H KH 2C TS 8C',\n  '8H 7D 3S 9H 5D 3H 4S QC 9S 5H',\n  '2D 9D 7H 6H 3C 8S 5H 4D 3S 4S',\n  'KD 9S 4S TC 7S QC 3S 8S 2H 7H',\n  'TC 3D 8C 3H 6C 2H 6H KS KD 4D',\n  'KC 3D 9S 3H JS 4S 8H 2D 6C 8S',\n  '6H QS 6C TC QD 9H 7D 7C 5H 4D',\n  'TD 9D 8D 6S 6C TC 5D TS JS 8H',\n  '4H KC JD 9H TC 2C 6S 5H 8H AS',\n  'JS 9C 5C 6S 9D JD 8H KC 4C 6D',\n  '4D 8D 8S 6C 7C 6H 7H 8H 5C KC',\n  'TC 3D JC 6D KS 9S 6H 7S 9C 2C',\n  '6C 3S KD 5H TS 7D 9H 9S 6H KH',\n  '3D QD 4C 6H TS AC 3S 5C 2H KD',\n  '4C AS JS 9S 7C TS 7H 9H JC KS',\n  '4H 8C JD 3H 6H AD 9S 4S 5S KS',\n  '4C 2C 7D 3D AS 9C 2S QS KC 6C',\n  '8S 5H 3D 2S AC 9D 6S 3S 4D TD',\n  'QD TH 7S TS 3D AC 7H 6C 5D QC',\n  'TC QD AD 9C QS 5C 8D KD 3D 3C',\n  '9D 8H AS 3S 7C 8S JD 2D 8D KC',\n  '4C TH AC QH JS 8D 7D 7S 9C KH',\n  '9D 8D 4C JH 2C 2S QD KD TS 4H',\n  '4D 6D 5D 2D JH 3S 8S 3H TC KH',\n  'AD 4D 2C QS 8C KD JH JD AH 5C',\n  '5C 6C 5H 2H JH 4H KS 7C TC 3H',\n  '3C 4C QC 5D JH 9C QD KH 8D TC',\n  '3H 9C JS 7H QH AS 7C 9H 5H JC',\n  '2D 5S QD 4S 3C KC 6S 6C 5C 4C',\n  '5D KH 2D TS 8S 9C AS 9S 7C 4C',\n  '7C AH 8C 8D 5S KD QH QS JH 2C',\n  '8C 9D AH 2H AC QC 5S 8H 7H 2C',\n  'QD 9H 5S QS QC 9C 5H JC TH 4H',\n  '6C 6S 3H 5H 3S 6H KS 8D AC 7S',\n  'AC QH 7H 8C 4S KC 6C 3D 3S TC',\n  '9D 3D JS TH AC 5H 3H 8S 3S TC',\n  'QD KH JS KS 9S QC 8D AH 3C AC',\n  '5H 6C KH 3S 9S JH 2D QD AS 8C',\n  '6C 4D 7S 7H 5S JC 6S 9H 4H JH',\n  'AH 5S 6H 9S AD 3S TH 2H 9D 8C',\n  '4C 8D 9H 7C QC AD 4S 9C KC 5S',\n  '9D 6H 4D TC 4C JH 2S 5D 3S AS',\n  '2H 6C 7C KH 5C AD QS TH JD 8S',\n  '3S 4S 7S AH AS KC JS 2S AD TH',\n  'JS KC 2S 7D 8C 5C 9C TS 5H 9D',\n  '7S 9S 4D TD JH JS KH 6H 5D 2C',\n  'JD JS JC TH 2D 3D QD 8C AC 5H',\n  '7S KH 5S 9D 5D TD 4S 6H 3C 2D',\n  '4S 5D AC 8D 4D 7C AD AS AH 9C',\n  '6S TH TS KS 2C QC AH AS 3C 4S',\n  '2H 8C 3S JC 5C 7C 3H 3C KH JH',\n  '7S 3H JC 5S 6H 4C 2S 4D KC 7H',\n  '4D 7C 4H 9S 8S 6S AD TC 6C JC',\n  'KH QS 3S TC 4C 8H 8S AC 3C TS',\n  'QD QS TH 3C TS 7H 7D AH TD JC',\n  'TD JD QC 4D 9S 7S TS AD 7D AC',\n  'AH 7H 4S 6D 7C 2H 9D KS JC TD',\n  '7C AH JD 4H 6D QS TS 2H 2C 5C',\n  'TC KC 8C 9S 4C JS 3C JC 6S AH',\n  'AS 7D QC 3D 5S JC JD 9D TD KH',\n  'TH 3C 2S 6H AH AC 5H 5C 7S 8H',\n  'QC 2D AC QD 2S 3S JD QS 6S 8H',\n  'KC 4H 3C 9D JS 6H 3S 8S AS 8C',\n  '7H KC 7D JD 2H JC QH 5S 3H QS',\n  '9H TD 3S 8H 7S AC 5C 6C AH 7C',\n  '8D 9H AH JD TD QS 7D 3S 9C 8S',\n  'AH QH 3C JD KC 4S 5S 5D TD KS',\n  '9H 7H 6S JH TH 4C 7C AD 5C 2D',\n  '7C KD 5S TC 9D 6S 6C 5D 2S TH',\n  'KC 9H 8D 5H 7H 4H QC 3D 7C AS',\n  '6S 8S QC TD 4S 5C TH QS QD 2S',\n  '8S 5H TH QC 9H 6S KC 7D 7C 5C',\n  '7H KD AH 4D KH 5C 4S 2D KC QH',\n  '6S 2C TD JC AS 4D 6C 8C 4H 5S',\n  'JC TC JD 5S 6S 8D AS 9D AD 3S',\n  '6D 6H 5D 5S TC 3D 7D QS 9D QD',\n  '4S 6C 8S 3S 7S AD KS 2D 7D 7C',\n  'KC QH JC AC QD 5D 8D QS 7H 7D',\n  'JS AH 8S 5H 3D TD 3H 4S 6C JH',\n  '4S QS 7D AS 9H JS KS 6D TC 5C',\n  '2D 5C 6H TC 4D QH 3D 9H 8S 6C',\n  '6D 7H TC TH 5S JD 5C 9C KS KD',\n  '8D TD QH 6S 4S 6C 8S KC 5C TC',\n  '5S 3D KS AC 4S 7D QD 4C TH 2S',\n  'TS 8H 9S 6S 7S QH 3C AH 7H 8C',\n  '4C 8C TS JS QC 3D 7D 5D 7S JH',\n  '8S 7S 9D QC AC 7C 6D 2H JH KC',\n  'JS KD 3C 6S 4S 7C AH QC KS 5H',\n  'KS 6S 4H JD QS TC 8H KC 6H AS',\n  'KH 7C TC 6S TD JC 5C 7D AH 3S',\n  '3H 4C 4H TC TH 6S 7H 6D 9C QH',\n  '7D 5H 4S 8C JS 4D 3D 8S QH KC',\n  '3H 6S AD 7H 3S QC 8S 4S 7S JS',\n  '3S JD KH TH 6H QS 9C 6C 2D QD',\n  '4S QH 4D 5H KC 7D 6D 8D TH 5S',\n  'TD AD 6S 7H KD KH 9H 5S KC JC',\n  '3H QC AS TS 4S QD KS 9C 7S KC',\n  'TS 6S QC 6C TH TC 9D 5C 5D KD',\n  'JS 3S 4H KD 4C QD 6D 9S JC 9D',\n  '8S JS 6D 4H JH 6H 6S 6C KS KH',\n  'AC 7D 5D TC 9S KH 6S QD 6H AS',\n  'AS 7H 6D QH 8D TH 2S KH 5C 5H',\n  '4C 7C 3D QC TC 4S KH 8C 2D JS',\n  '6H 5D 7S 5H 9C 9H JH 8S TH 7H',\n  'AS JS 2S QD KH 8H 4S AC 8D 8S',\n  '3H 4C TD KD 8C JC 5C QS 2D JD',\n  'TS 7D 5D 6C 2C QS 2H 3C AH KS',\n  '4S 7C 9C 7D JH 6C 5C 8H 9D QD',\n  '2S TD 7S 6D 9C 9S QS KH QH 5C',\n  'JC 6S 9C QH JH 8D 7S JS KH 2H',\n  '8D 5H TH KC 4D 4S 3S 6S 3D QS',\n  '2D JD 4C TD 7C 6D TH 7S JC AH',\n  'QS 7S 4C TH 9D TS AD 4D 3H 6H',\n  '2D 3H 7D JD 3D AS 2S 9C QC 8S',\n  '4H 9H 9C 2C 7S JH KD 5C 5D 6H',\n  'TC 9H 8H JC 3C 9S 8D KS AD KC',\n  'TS 5H JD QS QH QC 8D 5D KH AH',\n  '5D AS 8S 6S 4C AH QC QD TH 7H',\n  '3H 4H 7D 6S 4S 9H AS 8H JS 9D',\n  'JD 8C 2C 9D 7D 5H 5S 9S JC KD',\n  'KD 9C 4S QD AH 7C AD 9D AC TD',\n  '6S 4H 4S 9C 8D KS TC 9D JH 7C',\n  '5S JC 5H 4S QH AC 2C JS 2S 9S',\n  '8C 5H AS QD AD 5C 7D 8S QC TD',\n  'JC 4C 8D 5C KH QS 4D 6H 2H 2C',\n  'TH 4S 2D KC 3H QD AC 7H AD 9D',\n  'KH QD AS 8H TH KC 8D 7S QH 8C',\n  'JC 6C 7D 8C KH AD QS 2H 6S 2D',\n  'JC KH 2D 7D JS QC 5H 4C 5D AD',\n  'TS 3S AD 4S TD 2D TH 6S 9H JH',\n  '9H 2D QS 2C 4S 3D KH AS AC 9D',\n  'KH 6S 8H 4S KD 7D 9D TS QD QC',\n  'JH 5H AH KS AS AD JC QC 5S KH',\n  '5D 7D 6D KS KD 3D 7C 4D JD 3S',\n  'AC JS 8D 5H 9C 3H 4H 4D TS 2C',\n  '6H KS KH 9D 7C 2S 6S 8S 2H 3D',\n  '6H AC JS 7S 3S TD 8H 3H 4H TH',\n  '9H TC QC KC 5C KS 6H 4H AC 8S',\n  'TC 7D QH 4S JC TS 6D 6C AC KH',\n  'QH 7D 7C JH QS QD TH 3H 5D KS',\n  '3D 5S 8D JS 4C 2C KS 7H 9C 4H',\n  '5H 8S 4H TD 2C 3S QD QC 3H KC',\n  'QC JS KD 9C AD 5S 9D 7D 7H TS',\n  '8C JC KH 7C 7S 6C TS 2C QD TH',\n  '5S 9D TH 3C 7S QH 8S 9C 2H 5H',\n  '5D 9H 6H 2S JS KH 3H 7C 2H 5S',\n  'JD 5D 5S 2C TC 2S 6S 6C 3C 8S',\n  '4D KH 8H 4H 2D KS 3H 5C 2S 9H',\n  '3S 2D TD 7H 8S 6H JD KC 9C 8D',\n  '6S QD JH 7C 9H 5H 8S 8H TH TD',\n  'QS 7S TD 7D TS JC KD 7C 3C 2C',\n  '3C JD 8S 4H 2D 2S TD AS 4D AC',\n  'AH KS 6C 4C 4S 7D 8C 9H 6H AS',\n  '5S 3C 9S 2C QS KD 4D 4S AC 5D',\n  '2D TS 2C JS KH QH 5D 8C AS KC',\n  'KD 3H 6C TH 8S 7S KH 6H 9S AC',\n  '6H 7S 6C QS AH 2S 2H 4H 5D 5H',\n  '5H JC QD 2C 2S JD AS QC 6S 7D',\n  '6C TC AS KD 8H 9D 2C 7D JH 9S',\n  '2H 4C 6C AH 8S TD 3H TH 7C TS',\n  'KD 4S TS 6C QH 8D 9D 9C AH 7D',\n  '6D JS 5C QD QC 9C 5D 8C 2H KD',\n  '3C QH JH AD 6S AH KC 8S 6D 6H',\n  '3D 7C 4C 7S 5S 3S 6S 5H JC 3C',\n  'QH 7C 5H 3C 3S 8C TS 4C KD 9C',\n  'QD 3S 7S 5H 7H QH JC 7C 8C KD',\n  '3C KD KH 2S 4C TS AC 6S 2C 7C',\n  '2C KH 3C 4C 6H 4D 5H 5S 7S QD',\n  '4D 7C 8S QD TS 9D KS 6H KD 3C',\n  'QS 4D TS 7S 4C 3H QD 8D 9S TC',\n  'TS QH AC 6S 3C 9H 9D QS 8S 6H',\n  '3S 7S 5D 4S JS 2D 6C QH 6S TH',\n  '4C 4H AS JS 5D 3D TS 9C AC 8S',\n  '6S 9C 7C 3S 5C QS AD AS 6H 3C',\n  '9S 8C 7H 3H 6S 7C AS 9H JD KH',\n  '3D 3H 7S 4D 6C 7C AC 2H 9C TH',\n  '4H 5S 3H AC TC TH 9C 9H 9S 8D',\n  '8D 9H 5H 4D 6C 2H QD 6S 5D 3S',\n  '4C 5C JD QS 4D 3H TH AC QH 8C',\n  'QC 5S 3C 7H AD 4C KS 4H JD 6D',\n  'QS AH 3H KS 9H 2S JS JH 5H 2H',\n  '2H 5S TH 6S TS 3S KS 3C 5H JS',\n  '2D 9S 7H 3D KC JH 6D 7D JS TD',\n  'AC JS 8H 2C 8C JH JC 2D TH 7S',\n  '5D 9S 8H 2H 3D TC AH JC KD 9C',\n  '9D QD JC 2H 6D KH TS 9S QH TH',\n  '2C 8D 4S JD 5H 3H TH TC 9C KC',\n  'AS 3D 9H 7D 4D TH KH 2H 7S 3H',\n  '4H 7S KS 2S JS TS 8S 2H QD 8D',\n  '5S 6H JH KS 8H 2S QC AC 6S 3S',\n  'JC AS AD QS 8H 6C KH 4C 4D QD',\n  '2S 3D TS TD 9S KS 6S QS 5C 8D',\n  '3C 6D 4S QC KC JH QD TH KH AD',\n  '9H AH 4D KS 2S 8D JH JC 7C QS',\n  '2D 6C TH 3C 8H QD QH 2S 3S KS',\n  '6H 5D 9S 4C TS TD JS QD 9D JD',\n  '5H 8H KH 8S KS 7C TD AD 4S KD',\n  '2C 7C JC 5S AS 6C 7D 8S 5H 9C',\n  '6S QD 9S TS KH QS 5S QH 3C KC',\n  '7D 3H 3C KD 5C AS JH 7H 6H JD',\n  '9D 5C 9H KC 8H KS 4S AD 4D 2S',\n  '3S JD QD 8D 2S 7C 5S 6S 5H TS',\n  '6D 9S KC TD 3S 6H QD JD 5C 8D',\n  '5H 9D TS KD 8D 6H TD QC 4C 7D',\n  '6D 4S JD 9D AH 9S AS TD 9H QD',\n  '2D 5S 2H 9C 6H 9S TD QC 7D TC',\n  '3S 2H KS TS 2C 9C 8S JS 9D 7D',\n  '3C KC 6D 5D 6C 6H 8S AS 7S QS',\n  'JH 9S 2H 8D 4C 8H 9H AD TH KH',\n  'QC AS 2S JS 5C 6H KD 3H 7H 2C',\n  'QD 8H 2S 8D 3S 6D AH 2C TC 5C',\n  'JD JS TS 8S 3H 5D TD KC JC 6H',\n  '6S QS TC 3H 5D AH JC 7C 7D 4H',\n  '7C 5D 8H 9C 2H 9H JH KH 5S 2C',\n  '9C 7H 6S TH 3S QC QD 4C AC JD',\n  '2H 5D 9S 7D KC 3S QS 2D AS KH',\n  '2S 4S 2H 7D 5C TD TH QH 9S 4D',\n  '6D 3S TS 6H 4H KS 9D 8H 5S 2D',\n  '9H KS 4H 3S 5C 5D KH 6H 6S JS',\n  'KC AS 8C 4C JC KH QC TH QD AH',\n  '6S KH 9S 2C 5H TC 3C 7H JC 4D',\n  'JD 4S 6S 5S 8D 7H 7S 4D 4C 2H',\n  '7H 9H 5D KH 9C 7C TS TC 7S 5H',\n  '4C 8D QC TS 4S 9H 3D AD JS 7C',\n  '8C QS 5C 5D 3H JS AH KC 4S 9D',\n  'TS JD 8S QS TH JH KH 2D QD JS',\n  'JD QC 5D 6S 9H 3S 2C 8H 9S TS',\n  '2S 4C AD 7H JC 5C 2D 6D 4H 3D',\n  '7S JS 2C 4H 8C AD QD 9C 3S TD',\n  'JD TS 4C 6H 9H 7D QD 6D 3C AS',\n  'AS 7C 4C 6S 5D 5S 5C JS QC 4S',\n  'KD 6S 9S 7C 3C 5S 7D JH QD JS',\n  '4S 7S JH 2C 8S 5D 7H 3D QH AD',\n  'TD 6H 2H 8D 4H 2D 7C AD KH 5D',\n  'TS 3S 5H 2C QD AH 2S 5C KH TD',\n  'KC 4D 8C 5D AS 6C 2H 2S 9H 7C',\n  'KD JS QC TS QS KH JH 2C 5D AD',\n  '3S 5H KC 6C 9H 3H 2H AD 7D 7S',\n  '7S JS JH KD 8S 7D 2S 9H 7C 2H',\n  '9H 2D 8D QC 6S AD AS 8H 5H 6C',\n  '2S 7H 6C 6D 7D 8C 5D 9D JC 3C',\n  '7C 9C 7H JD 2H KD 3S KH AD 4S',\n  'QH AS 9H 4D JD KS KD TS KH 5H',\n  '4C 8H 5S 3S 3D 7D TD AD 7S KC',\n  'JS 8S 5S JC 8H TH 9C 4D 5D KC',\n  '7C 5S 9C QD 2C QH JS 5H 8D KH',\n  'TD 2S KS 3D AD KC 7S TC 3C 5D',\n  '4C 2S AD QS 6C 9S QD TH QH 5C',\n  '8C AD QS 2D 2S KC JD KS 6C JC',\n  '8D 4D JS 2H 5D QD 7S 7D QH TS',\n  '6S 7H 3S 8C 8S 9D QS 8H 6C 9S',\n  '4S TC 2S 5C QD 4D QS 6D TH 6S',\n  '3S 5C 9D 6H 8D 4C 7D TC 7C TD',\n  'AH 6S AS 7H 5S KD 3H 5H AC 4C',\n  '8D 8S AH KS QS 2C AD 6H 7D 5D',\n  '6H 9H 9S 2H QS 8S 9C 5D 2D KD',\n  'TS QC 5S JH 7D 7S TH 9S 9H AC',\n  '7H 3H 6S KC 4D 6D 5C 4S QD TS',\n  'TD 2S 7C QD 3H JH 9D 4H 7S 7H',\n  'KS 3D 4H 5H TC 2S AS 2D 6D 7D',\n  '8H 3C 7H TD 3H AD KC TH 9C KH',\n  'TC 4C 2C 9S 9D 9C 5C 2H JD 3C',\n  '3H AC TS 5D AD 8D 6H QC 6S 8C',\n  '2S TS 3S JD 7H 8S QH 4C 5S 8D',\n  'AC 4S 6C 3C KH 3D 7C 2D 8S 2H',\n  '4H 6C 8S TH 2H 4S 8H 9S 3H 7S',\n  '7C 4C 9C 2C 5C AS 5D KD 4D QH',\n  '9H 4H TS AS 7D 8D 5D 9S 8C 2H',\n  'QC KD AC AD 2H 7S AS 3S 2D 9S',\n  '2H QC 8H TC 6D QD QS 5D KH 3C',\n  'TH JD QS 4C 2S 5S AD 7H 3S AS',\n  '7H JS 3D 6C 3S 6D AS 9S AC QS',\n  '9C TS AS 8C TC 8S 6H 9D 8D 6C',\n  '4D JD 9C KC 7C 6D KS 3S 8C AS',\n  '3H 6S TC 8D TS 3S KC 9S 7C AS',\n  '8C QC 4H 4S 8S 6C 3S TC AH AC',\n  '4D 7D 5C AS 2H 6S TS QC AD TC',\n  'QD QC 8S 4S TH 3D AH TS JH 4H',\n  '5C 2D 9S 2C 3H 3C 9D QD QH 7D',\n  'KC 9H 6C KD 7S 3C 4D AS TC 2D',\n  '3D JS 4D 9D KS 7D TH QC 3H 3C',\n  '8D 5S 2H 9D 3H 8C 4C 4H 3C TH',\n  'JC TH 4S 6S JD 2D 4D 6C 3D 4C',\n  'TS 3S 2D 4H AC 2C 6S 2H JH 6H',\n  'TD 8S AD TC AH AC JH 9S 6S 7S',\n  '6C KC 4S JD 8D 9H 5S 7H QH AH',\n  'KD 8D TS JH 5C 5H 3H AD AS JS',\n  '2D 4H 3D 6C 8C 7S AD 5D 5C 8S',\n  'TD 5D 7S 9C 4S 5H 6C 8C 4C 8S',\n  'JS QH 9C AS 5C QS JC 3D QC 7C',\n  'JC 9C KH JH QS QC 2C TS 3D AD',\n  '5D JH AC 5C 9S TS 4C JD 8C KS',\n  'KC AS 2D KH 9H 2C 5S 4D 3D 6H',\n  'TH AH 2D 8S JC 3D 8C QH 7S 3S',\n  '8H QD 4H JC AS KH KS 3C 9S 6D',\n  '9S QH 7D 9C 4S AC 7H KH 4D KD',\n  'AH AD TH 6D 9C 9S KD KS QH 4H',\n  'QD 6H 9C 7C QS 6D 6S 9D 5S JH',\n  'AH 8D 5H QD 2H JC KS 4H KH 5S',\n  '5C 2S JS 8D 9C 8C 3D AS KC AH',\n  'JD 9S 2H QS 8H 5S 8C TH 5C 4C',\n  'QC QS 8C 2S 2C 3S 9C 4C KS KH',\n  '2D 5D 8S AH AD TD 2C JS KS 8C',\n  'TC 5S 5H 8H QC 9H 6H JD 4H 9S',\n  '3C JH 4H 9H AH 4S 2H 4C 8D AC',\n  '8S TH 4D 7D 6D QD QS 7S TC 7C',\n  'KH 6D 2D JD 5H JS QD JH 4H 4S',\n  '9C 7S JH 4S 3S TS QC 8C TC 4H',\n  'QH 9D 4D JH QS 3S 2C 7C 6C 2D',\n  '4H 9S JD 5C 5H AH 9D TS 2D 4C',\n  'KS JH TS 5D 2D AH JS 7H AS 8D',\n  'JS AH 8C AD KS 5S 8H 2C 6C TH',\n  '2H 5D AD AC KS 3D 8H TS 6H QC',\n  '6D 4H TS 9C 5H JS JH 6S JD 4C',\n  'JH QH 4H 2C 6D 3C 5D 4C QS KC',\n  '6H 4H 6C 7H 6S 2S 8S KH QC 8C',\n  '3H 3D 5D KS 4H TD AD 3S 4D TS',\n  '5S 7C 8S 7D 2C KS 7S 6C 8C JS',\n  '5D 2H 3S 7C 5C QD 5H 6D 9C 9H',\n  'JS 2S KD 9S 8D TD TS AC 8C 9D',\n  '5H QD 2S AC 8C 9H KS 7C 4S 3C',\n  'KH AS 3H 8S 9C JS QS 4S AD 4D',\n  'AS 2S TD AD 4D 9H JC 4C 5H QS',\n  '5D 7C 4H TC 2D 6C JS 4S KC 3S',\n  '4C 2C 5D AC 9H 3D JD 8S QS QH',\n  '2C 8S 6H 3C QH 6D TC KD AC AH',\n  'QC 6C 3S QS 4S AC 8D 5C AD KH',\n  '5S 4C AC KH AS QC 2C 5C 8D 9C',\n  '8H JD 3C KH 8D 5C 9C QD QH 9D',\n  '7H TS 2C 8C 4S TD JC 9C 5H QH',\n  'JS 4S 2C 7C TH 6C AS KS 7S JD',\n  'JH 7C 9H 7H TC 5H 3D 6D 5D 4D',\n  '2C QD JH 2H 9D 5S 3D TD AD KS',\n  'JD QH 3S 4D TH 7D 6S QS KS 4H',\n  'TC KS 5S 8D 8H AD 2S 2D 4C JH',\n  '5S JH TC 3S 2D QS 9D 4C KD 9S',\n  'AC KH 3H AS 9D KC 9H QD 6C 6S',\n  '9H 7S 3D 5C 7D KC TD 8H 4H 6S',\n  '3C 7H 8H TC QD 4D 7S 6S QH 6C',\n  '6D AD 4C QD 6C 5D 7D 9D KS TS',\n  'JH 2H JD 9S 7S TS KH 8D 5D 8H',\n  '2D 9S 4C 7D 9D 5H QD 6D AC 6S',\n  '7S 6D JC QD JH 4C 6S QS 2H 7D',\n  '8C TD JH KD 2H 5C QS 2C JS 7S',\n  'TC 5H 4H JH QD 3S 5S 5D 8S KH',\n  'KS KH 7C 2C 5D JH 6S 9C 6D JC',\n  '5H AH JD 9C JS KC 2H 6H 4D 5S',\n  'AS 3C TH QC 6H 9C 8S 8C TD 7C',\n  'KC 2C QD 9C KH 4D 7S 3C TS 9H',\n  '9C QC 2S TS 8C TD 9S QD 3S 3C',\n  '4D 9D TH JH AH 6S 2S JD QH JS',\n  'QD 9H 6C KD 7D 7H 5D 6S 8H AH',\n  '8H 3C 4S 2H 5H QS QH 7S 4H AC',\n  'QS 3C 7S 9S 4H 3S AH KS 9D 7C',\n  'AD 5S 6S 2H 2D 5H TC 4S 3C 8C',\n  'QH TS 6S 4D JS KS JH AS 8S 6D',\n  '2C 8S 2S TD 5H AS TC TS 6C KC',\n  'KC TS 8H 2H 3H 7C 4C 5S TH TD',\n  'KD AD KH 7H 7S 5D 5H 5S 2D 9C',\n  'AD 9S 3D 7S 8C QC 7C 9C KD KS',\n  '3C QC 9S 8C 4D 5C AS QD 6C 2C',\n  '2H KC 8S JD 7S AC 8D 5C 2S 4D',\n  '9D QH 3D 2S TC 3S KS 3C 9H TD',\n  'KD 6S AC 2C 7H 5H 3S 6C 6H 8C',\n  'QH TC 8S 6S KH TH 4H 5D TS 4D',\n  '8C JS 4H 6H 2C 2H 7D AC QD 3D',\n  'QS KC 6S 2D 5S 4H TD 3H JH 4C',\n  '7S 5H 7H 8H KH 6H QS TH KD 7D',\n  '5H AD KD 7C KH 5S TD 6D 3C 6C',\n  '8C 9C 5H JD 7C KC KH 7H 2H 3S',\n  '7S 4H AD 4D 8S QS TH 3D 7H 5S',\n  '8D TC KS KD 9S 6D AD JD 5C 2S',\n  '7H 8H 6C QD 2H 6H 9D TC 9S 7C',\n  '8D 6D 4C 7C 6C 3C TH KH JS JH',\n  '5S 3S 8S JS 9H AS AD 8H 7S KD',\n  'JH 7C 2C KC 5H AS AD 9C 9S JS',\n  'AD AC 2C 6S QD 7C 3H TH KS KD',\n  '9D JD 4H 8H 4C KH 7S TS 8C KC',\n  '3S 5S 2H 7S 6H 7D KS 5C 6D AD',\n  '5S 8C 9H QS 7H 7S 2H 6C 7D TD',\n  'QS 5S TD AC 9D KC 3D TC 2D 4D',\n  'TD 2H 7D JD QD 4C 7H 5D KC 3D',\n  '4C 3H 8S KD QH 5S QC 9H TC 5H',\n  '9C QD TH 5H TS 5C 9H AH QH 2C',\n  '4D 6S 3C AC 6C 3D 2C 2H TD TH',\n  'AC 9C 5D QC 4D AD 8D 6D 8C KC',\n  'AD 3C 4H AC 8D 8H 7S 9S TD JC',\n  '4H 9H QH JS 2D TH TD TC KD KS',\n  '5S 6S 9S 8D TH AS KH 5H 5C 8S',\n  'JD 2S 9S 6S 5S 8S 5D 7S 7H 9D',\n  '5D 8C 4C 9D AD TS 2C 7D KD TC',\n  '8S QS 4D KC 5C 8D 4S KH JD KD',\n  'AS 5C AD QH 7D 2H 9S 7H 7C TC',\n  '2S 8S JD KH 7S 6C 6D AD 5D QC',\n  '9H 6H 3S 8C 8H AH TC 4H JS TD',\n  '2C TS 4D 7H 2D QC 9C 5D TH 7C',\n  '6C 8H QC 5D TS JH 5C 5H 9H 4S',\n  '2D QC 7H AS JS 8S 2H 4C 4H 8D',\n  'JS 6S AC KD 3D 3C 4S 7H TH KC',\n  'QH KH 6S QS 5S 4H 3C QD 3S 3H',\n  '7H AS KH 8C 4H 9C 5S 3D 6S TS',\n  '9C 7C 3H 5S QD 2C 3D AD AC 5H',\n  'JH TD 2D 4C TS 3H KH AD 3S 7S',\n  'AS 4C 5H 4D 6S KD JC 3C 6H 2D',\n  '3H 6S 8C 2D TH 4S AH QH AD 5H',\n  '7C 2S 9H 7H KC 5C 6D 5S 3H JC',\n  '3C TC 9C 4H QD TD JH 6D 9H 5S',\n  '7C 6S 5C 5D 6C 4S 7H 9H 6H AH',\n  'AD 2H 7D KC 2C 4C 2S 9S 7H 3S',\n  'TH 4C 8S 6S 3S AD KS AS JH TD',\n  '5C TD 4S 4D AD 6S 5D TC 9C 7D',\n  '8H 3S 4D 4S 5S 6H 5C AC 3H 3D',\n  '9H 3C AC 4S QS 8S 9D QH 5H 4D',\n  'JC 6C 5H TS AC 9C JD 8C 7C QD',\n  '8S 8H 9C JD 2D QC QH 6H 3C 8D',\n  'KS JS 2H 6H 5H QH QS 3H 7C 6D',\n  'TC 3H 4S 7H QC 2H 3S 8C JS KH',\n  'AH 8H 5S 4C 9H JD 3H 7S JC AC',\n  '3C 2D 4C 5S 6C 4S QS 3S JD 3D',\n  '5H 2D TC AH KS 6D 7H AD 8C 6H',\n  '6C 7S 3C JD 7C 8H KS KH AH 6D',\n  'AH 7D 3H 8H 8S 7H QS 5H 9D 2D',\n  'JD AC 4H 7S 8S 9S KS AS 9D QH',\n  '7S 2C 8S 5S JH QS JC AH KD 4C',\n  'AH 2S 9H 4H 8D TS TD 6H QH JD',\n  '4H JC 3H QS 6D 7S 9C 8S 9D 8D',\n  '5H TD 4S 9S 4C 8C 8D 7H 3H 3D',\n  'QS KH 3S 2C 2S 3C 7S TD 4S QD',\n  '7C TD 4D 5S KH AC AS 7H 4C 6C',\n  '2S 5H 6D JD 9H QS 8S 2C 2H TD',\n  '2S TS 6H 9H 7S 4H JC 4C 5D 5S',\n  '2C 5H 7D 4H 3S QH JC JS 6D 8H',\n  '4C QH 7C QD 3S AD TH 8S 5S TS',\n  '9H TC 2S TD JC 7D 3S 3D TH QH',\n  '7D 4C 8S 5C JH 8H 6S 3S KC 3H',\n  'JC 3H KH TC QH TH 6H 2C AC 5H',\n  'QS 2H 9D 2C AS 6S 6C 2S 8C 8S',\n  '9H 7D QC TH 4H KD QS AC 7S 3C',\n  '4D JH 6S 5S 8H KS 9S QC 3S AS',\n  'JD 2D 6S 7S TC 9H KC 3H 7D KD',\n  '2H KH 7C 4D 4S 3H JS QD 7D KC',\n  '4C JC AS 9D 3C JS 6C 8H QD 4D',\n  'AH JS 3S 6C 4C 3D JH 6D 9C 9H',\n  '9H 2D 8C 7H 5S KS 6H 9C 2S TC',\n  '6C 8C AD 7H 6H 3D KH AS 5D TH',\n  'KS 8C 3S TS 8S 4D 5S 9S 6C 4H',\n  '9H 4S 4H 5C 7D KC 2D 2H 9D JH',\n  '5C JS TC 9D 9H 5H 7S KH JC 6S',\n  '7C 9H 8H 4D JC KH JD 2H TD TC',\n  '8H 6C 2H 2C KH 6H 9D QS QH 5H',\n  'AC 7D 2S 3D QD JC 2D 8D JD JH',\n  '2H JC 2D 7H 2C 3C 8D KD TD 4H',\n  '3S 4H 6D 8D TS 3H TD 3D 6H TH',\n  'JH JC 3S AC QH 9H 7H 8S QC 2C',\n  '7H TD QS 4S 8S 9C 2S 5D 4D 2H',\n  '3D TS 3H 2S QC 8H 6H KC JC KS',\n  '5D JD 7D TC 8C 6C 9S 3D 8D AC',\n  '8H 6H JH 6C 5D 8D 8S 4H AD 2C',\n  '9D 4H 2D 2C 3S TS AS TC 3C 5D',\n  '4D TH 5H KS QS 6C 4S 2H 3D AD',\n  '5C KC 6H 2C 5S 3C 4D 2D 9H 9S',\n  'JD 4C 3H TH QH 9H 5S AH 8S AC',\n  '7D 9S 6S 2H TD 9C 4H 8H QS 4C',\n  '3C 6H 5D 4H 8C 9C KC 6S QD QS',\n  '3S 9H KD TC 2D JS 8C 6S 4H 4S',\n  '2S 4C 8S QS 6H KH 3H TH 8C 5D',\n  '2C KH 5S 3S 7S 7H 6C 9D QD 8D',\n  '8H KS AC 2D KH TS 6C JS KC 7H',\n  '9C KS 5C TD QC AH 6C 5H 9S 7C',\n  '5D 4D 3H 4H 6S 7C 7S AH QD TD',\n  '2H 7D QC 6S TC TS AH 7S 9D 3H',\n  'TH 5H QD 9S KS 7S 7C 6H 8C TD',\n  'TH 2D 4D QC 5C 7D JD AH 9C 4H',\n  '4H 3H AH 8D 6H QC QH 9H 2H 2C',\n  '2D AD 4C TS 6H 7S TH 4H QS TD',\n  '3C KD 2H 3H QS JD TC QC 5D 8H',\n  'KS JC QD TH 9S KD 8D 8C 2D 9C',\n  '3C QD KD 6D 4D 8D AH AD QC 8S',\n  '8H 3S 9D 2S 3H KS 6H 4C 7C KC',\n  'TH 9S 5C 3D 7D 6H AC 7S 4D 2C',\n  '5C 3D JD 4D 2D 6D 5H 9H 4C KH',\n  'AS 7H TD 6C 2H 3D QD KS 4C 4S',\n  'JC 3C AC 7C JD JS 8H 9S QC 5D',\n  'JD 6S 5S 2H AS 8C 7D 5H JH 3D',\n  '8D TC 5S 9S 8S 3H JC 5H 7S AS',\n  '5C TD 3D 7D 4H 8D 7H 4D 5D JS',\n  'QS 9C KS TD 2S 8S 5C 2H 4H AS',\n  'TH 7S 4H 7D 3H JD KD 5D 2S KC',\n  'JD 7H 4S 8H 4C JS 6H QH 5S 4H',\n  '2C QS 8C 5S 3H QC 2S 6C QD AD',\n  '8C 3D JD TC 4H 2H AD 5S AC 2S',\n  '5D 2C JS 2D AD 9D 3D 4C 4S JH',\n  '8D 5H 5D 6H 7S 4D KS 9D TD JD',\n  '3D 6D 9C 2S AS 7D 5S 5C 8H JD',\n  '7C 8S 3S 6S 5H JD TC AD 7H 7S',\n  '2S 9D TS 4D AC 8D 6C QD JD 3H',\n  '9S KH 2C 3C AC 3D 5H 6H 8D 5D',\n  'KS 3D 2D 6S AS 4C 2S 7C 7H KH',\n  'AC 2H 3S JC 5C QH 4D 2D 5H 7S',\n  'TS AS JD 8C 6H JC 8S 5S 2C 5D',\n  '7S QH 7H 6C QC 8H 2D 7C JD 2S',\n  '2C QD 2S 2H JC 9C 5D 2D JD JH',\n  '7C 5C 9C 8S 7D 6D 8D 6C 9S JH',\n  '2C AD 6S 5H 3S KS 7S 9D KH 4C',\n  '7H 6C 2C 5C TH 9D 8D 3S QC AH',\n  '5S KC 6H TC 5H 8S TH 6D 3C AH',\n  '9C KD 4H AD TD 9S 4S 7D 6H 5D',\n  '7H 5C 5H 6D AS 4C KD KH 4H 9D',\n  '3C 2S 5C 6C JD QS 2H 9D 7D 3H',\n  'AC 2S 6S 7S JS QD 5C QS 6H AD',\n  '5H TH QC 7H TC 3S 7C 6D KC 3D',\n  '4H 3D QC 9S 8H 2C 3S JC KS 5C',\n  '4S 6S 2C 6H 8S 3S 3D 9H 3H JS',\n  '4S 8C 4D 2D 8H 9H 7D 9D AH TS',\n  '9S 2C 9H 4C 8D AS 7D 3D 6D 5S',\n  '6S 4C 7H 8C 3H 5H JC AH 9D 9C',\n  '2S 7C 5S JD 8C 3S 3D 4D 7D 6S',\n  '3C KC 4S 5D 7D 3D JD 7H 3H 4H',\n  '9C 9H 4H 4D TH 6D QD 8S 9S 7S',\n  '2H AC 8S 4S AD 8C 2C AH 7D TC',\n  'TS 9H 3C AD KS TC 3D 8C 8H JD',\n  'QC 8D 2C 3C 7D 7C JD 9H 9C 6C',\n  'AH 6S JS JH 5D AS QC 2C JD TD',\n  '9H KD 2H 5D 2D 3S 7D TC AH TS',\n  'TD 8H AS 5D AH QC AC 6S TC 5H',\n  'KS 4S 7H 4D 8D 9C TC 2H 6H 3H',\n  '3H KD 4S QD QH 3D 8H 8C TD 7S',\n  '8S JD TC AH JS QS 2D KH KS 4D',\n  '3C AD JC KD JS KH 4S TH 9H 2C',\n  'QC 5S JS 9S KS AS 7C QD 2S JD',\n  'KC 5S QS 3S 2D AC 5D 9H 8H KS',\n  '6H 9C TC AD 2C 6D 5S JD 6C 7C',\n  'QS KH TD QD 2C 3H 8S 2S QC AH',\n  '9D 9H JH TC QH 3C 2S JS 5C 7H',\n  '6C 3S 3D 2S 4S QD 2D TH 5D 2C',\n  '2D 6H 6D 2S JC QH AS 7H 4H KH',\n  '5H 6S KS AD TC TS 7C AC 4S 4H',\n  'AD 3C 4H QS 8C 9D KS 2H 2D 4D',\n  '4S 9D 6C 6D 9C AC 8D 3H 7H KD',\n  'JC AH 6C TS JD 6D AD 3S 5D QD',\n  'JC JH JD 3S 7S 8S JS QC 3H 4S',\n  'JD TH 5C 2C AD JS 7H 9S 2H 7S',\n  '8D 3S JH 4D QC AS JD 2C KC 6H',\n  '2C AC 5H KD 5S 7H QD JH AH 2D',\n  'JC QH 8D 8S TC 5H 5C AH 8C 6C',\n  '3H JS 8S QD JH 3C 4H 6D 5C 3S',\n  '6D 4S 4C AH 5H 5S 3H JD 7C 8D',\n  '8H AH 2H 3H JS 3C 7D QC 4H KD',\n  '6S 2H KD 5H 8H 2D 3C 8S 7S QD',\n  '2S 7S KC QC AH TC QS 6D 4C 8D',\n  '5S 9H 2C 3S QD 7S 6C 2H 7C 9D',\n  '3C 6C 5C 5S JD JC KS 3S 5D TS',\n  '7C KS 6S 5S 2S 2D TC 2H 5H QS',\n  'AS 7H 6S TS 5H 9S 9D 3C KD 2H',\n  '4S JS QS 3S 4H 7C 2S AC 6S 9D',\n  '8C JH 2H 5H 7C 5D QH QS KH QC',\n  '3S TD 3H 7C KC 8D 5H 8S KH 8C',\n  '4H KH JD TS 3C 7H AS QC JS 5S',\n  'AH 9D 2C 8D 4D 2D 6H 6C KC 6S',\n  '2S 6H 9D 3S 7H 4D KH 8H KD 3D',\n  '9C TC AC JH KH 4D JD 5H TD 3S',\n  '7S 4H 9D AS 4C 7D QS 9S 2S KH',\n  '3S 8D 8S KS 8C JC 5C KH 2H 5D',\n  '8S QH 2C 4D KC JS QC 9D AC 6H',\n  '8S 8C 7C JS JD 6S 4C 9C AC 4S',\n  'QH 5D 2C 7D JC 8S 2D JS JH 4C',\n  'JS 4C 7S TS JH KC KH 5H QD 4S',\n  'QD 8C 8D 2D 6S TD 9D AC QH 5S',\n  'QH QC JS 3D 3C 5C 4H KH 8S 7H',\n  '7C 2C 5S JC 8S 3H QC 5D 2H KC',\n  '5S 8D KD 6H 4H QD QH 6D AH 3D',\n  '7S KS 6C 2S 4D AC QS 5H TS JD',\n  '7C 2D TC 5D QS AC JS QC 6C KC',\n  '2C KS 4D 3H TS 8S AD 4H 7S 9S',\n  'QD 9H QH 5H 4H 4D KH 3S JC AD',\n  '4D AC KC 8D 6D 4C 2D KH 2C JD',\n  '2C 9H 2D AH 3H 6D 9C 7D TC KS',\n  '8C 3H KD 7C 5C 2S 4S 5H AS AH',\n  'TH JD 4H KD 3H TC 5C 3S AC KH',\n  '6D 7H AH 7S QC 6H 2D TD JD AS',\n  'JH 5D 7H TC 9S 7D JC AS 5S KH',\n  '2H 8C AD TH 6H QD KD 9H 6S 6C',\n  'QH KC 9D 4D 3S JS JH 4H 2C 9H',\n  'TC 7H KH 4H JC 7D 9S 3H QS 7S',\n  'AD 7D JH 6C 7H 4H 3S 3H 4D QH',\n  'JD 2H 5C AS 6C QC 4D 3C TC JH',\n  'AC JD 3H 6H 4C JC AD 7D 7H 9H',\n  '4H TC TS 2C 8C 6S KS 2H JD 9S',\n  '4C 3H QS QC 9S 9H 6D KC 9D 9C',\n  '5C AD 8C 2C QH TH QD JC 8D 8H',\n  'QC 2C 2S QD 9C 4D 3S 8D JH QS',\n  '9D 3S 2C 7S 7C JC TD 3C TC 9H',\n  '3C TS 8H 5C 4C 2C 6S 8D 7C 4H',\n  'KS 7H 2H TC 4H 2C 3S AS AH QS',\n  '8C 2D 2H 2C 4S 4C 6S 7D 5S 3S',\n  'TH QC 5D TD 3C QS KD KC KS AS',\n  '4D AH KD 9H KS 5C 4C 6H JC 7S',\n  'KC 4H 5C QS TC 2H JC 9S AH QH',\n  '4S 9H 3H 5H 3C QD 2H QC JH 8H',\n  '5D AS 7H 2C 3D JH 6H 4C 6S 7D',\n  '9C JD 9H AH JS 8S QH 3H KS 8H',\n  '3S AC QC TS 4D AD 3D AH 8S 9H',\n  '7H 3H QS 9C 9S 5H JH JS AH AC',\n  '8D 3C JD 2H AC 9C 7H 5S 4D 8H',\n  '7C JH 9H 6C JS 9S 7H 8C 9D 4H',\n  '2D AS 9S 6H 4D JS JH 9H AD QD',\n  '6H 7S JH KH AH 7H TD 5S 6S 2C',\n  '8H JH 6S 5H 5S 9D TC 4C QC 9S',\n  '7D 2C KD 3H 5H AS QD 7H JS 4D',\n  'TS QH 6C 8H TH 5H 3C 3H 9C 9D',\n  'AD KH JS 5D 3H AS AC 9S 5C KC',\n  '2C KH 8C JC QS 6D AH 2D KC TC',\n  '9D 3H 2S 7C 4D 6D KH KS 8D 7D',\n  '9H 2S TC JH AC QC 3H 5S 3S 8H',\n  '3S AS KD 8H 4C 3H 7C JH QH TS',\n  '7S 6D 7H 9D JH 4C 3D 3S 6C AS',\n  '4S 2H 2C 4C 8S 5H KC 8C QC QD',\n  '3H 3S 6C QS QC 2D 6S 5D 2C 9D',\n  '2H 8D JH 2S 3H 2D 6C 5C 7S AD',\n  '9H JS 5D QH 8S TS 2H 7S 6S AD',\n  '6D QC 9S 7H 5H 5C 7D KC JD 4H',\n  'QC 5S 9H 9C 4D 6S KS 2S 4C 7C',\n  '9H 7C 4H 8D 3S 6H 5C 8H JS 7S',\n  '2D 6H JS TD 4H 4D JC TH 5H KC',\n  'AC 7C 8D TH 3H 9S 2D 4C KC 4D',\n  'KD QS 9C 7S 3D KS AD TS 4C 4H',\n  'QH 9C 8H 2S 7D KS 7H 5D KD 4C',\n  '9C 2S 2H JC 6S 6C TC QC JH 5C',\n  '7S AC 8H KC 8S 6H QS JC 3D 6S',\n  'JS 2D JH 8C 4S 6H 8H 6D 5D AD',\n  '6H 7D 2S 4H 9H 7C AS AC 8H 5S',\n  '3C JS 4S 6D 5H 2S QH 6S 9C 2C',\n  '3D 5S 6S 9S 4C QS 8D QD 8S TC',\n  '9C 3D AH 9H 5S 2C 7D AD JC 3S',\n  '7H TC AS 3C 6S 6D 7S KH KC 9H',\n  '3S TC 8H 6S 5H JH 8C 7D AC 2S',\n  'QD 9D 9C 3S JC 8C KS 8H 5D 4D',\n  'JS AH JD 6D 9D 8C 9H 9S 8H 3H',\n  '2D 6S 4C 4D 8S AD 4S TC AH 9H',\n  'TS AC QC TH KC 6D 4H 7S 8C 2H',\n  '3C QD JS 9D 5S JC AH 2H TS 9H',\n  '3H 4D QH 5D 9C 5H 7D 4S JC 3S',\n  '8S TH 3H 7C 2H JD JS TS AC 8D',\n  '9C 2H TD KC JD 2S 8C 5S AD 2C',\n  '3D KD 7C 5H 4D QH QD TC 6H 7D',\n  '7H 2C KC 5S KD 6H AH QC 7S QH',\n  '6H 5C AC 5H 2C 9C 2D 7C TD 2S',\n  '4D 9D AH 3D 7C JD 4H 8C 4C KS',\n  'TH 3C JS QH 8H 4C AS 3D QS QC',\n  '4D 7S 5H JH 6D 7D 6H JS KH 3C',\n  'QD 8S 7D 2H 2C 7C JC 2S 5H 8C',\n  'QH 8S 9D TC 2H AD 7C 8D QD 6S',\n  '3S 7C AD 9H 2H 9S JD TS 4C 2D',\n  '3S AS 4H QC 2C 8H 8S 7S TD TC',\n  'JH TH TD 3S 4D 4H 5S 5D QS 2C',\n  '8C QD QH TC 6D 4S 9S 9D 4H QC',\n  '8C JS 9D 6H JD 3H AD 6S TD QC',\n  'KC 8S 3D 7C TD 7D 8D 9H 4S 3S',\n  '6C 4S 3D 9D KD TC KC KS AC 5S',\n  '7C 6S QH 3D JS KD 6H 6D 2D 8C',\n  'JD 2S 5S 4H 8S AC 2D 6S TS 5C',\n  '5H 8C 5S 3C 4S 3D 7C 8D AS 3H',\n  'AS TS 7C 3H AD 7D JC QS 6C 6H',\n  '3S 9S 4C AC QH 5H 5D 9H TS 4H',\n  '6C 5C 7H 7S TD AD JD 5S 2H 2S',\n  '7D 6C KC 3S JD 8D 8S TS QS KH',\n  '8S QS 8D 6C TH AC AH 2C 8H 9S',\n  '7H TD KH QH 8S 3D 4D AH JD AS',\n  'TS 3D 2H JC 2S JH KH 6C QC JS',\n  'KC TH 2D 6H 7S 2S TC 8C 9D QS',\n  '3C 9D 6S KH 8H 6D 5D TH 2C 2H',\n  '6H TC 7D AD 4D 8S TS 9H TD 7S',\n  'JS 6D JD JC 2H AC 6C 3D KH 8D',\n  'KH JD 9S 5D 4H 4C 3H 7S QS 5C',\n  '4H JD 5D 3S 3C 4D KH QH QS 7S',\n  'JD TS 8S QD AH 4C 6H 3S 5S 2C',\n  'QS 3D JD AS 8D TH 7C 6S QC KS',\n  '7S 2H 8C QC 7H AC 6D 2D TH KH',\n  '5S 6C 7H KH 7D AH 8C 5C 7S 3D',\n  '3C KD AD 7D 6C 4D KS 2D 8C 4S',\n  '7C 8D 5S 2D 2S AH AD 2C 9D TD',\n  '3C AD 4S KS JH 7C 5C 8C 9C TH',\n  'AS TD 4D 7C JD 8C QH 3C 5H 9S',\n  '3H 9C 8S 9S 6S QD KS AH 5H JH',\n  'QC 9C 5S 4H 2H TD 7D AS 8C 9D',\n  '8C 2C 9D KD TC 7S 3D KH QC 3C',\n  '4D AS 4C QS 5S 9D 6S JD QH KS',\n  '6D AH 6C 4C 5H TS 9H 7D 3D 5S',\n  'QS JD 7C 8D 9C AC 3S 6S 6C KH',\n  '8H JH 5D 9S 6D AS 6S 3S QC 7H',\n  'QD AD 5C JH 2H AH 4H AS KC 2C',\n  'JH 9C 2C 6H 2D JS 5D 9H KC 6D',\n  '7D 9D KD TH 3H AS 6S QC 6H AD',\n  'JD 4H 7D KC 3H JS 3C TH 3D QS',\n  '4C 3H 8C QD 5H 6H AS 8H AD JD',\n  'TH 8S KD 5D QC 7D JS 5S 5H TS',\n  '7D KC 9D QS 3H 3C 6D TS 7S AH',\n  '7C 4H 7H AH QC AC 4D 5D 6D TH',\n  '3C 4H 2S KD 8H 5H JH TC 6C JD',\n  '4S 8C 3D 4H JS TD 7S JH QS KD',\n  '7C QC KD 4D 7H 6S AD TD TC KH',\n  '5H 9H KC 3H 4D 3D AD 6S QD 6H',\n  'TH 7C 6H TS QH 5S 2C KC TD 6S',\n  '7C 4D 5S JD JH 7D AC KD KH 4H',\n  '7D 6C 8D 8H 5C JH 8S QD TH JD',\n  '8D 7D 6C 7C 9D KD AS 5C QH JH',\n  '9S 2C 8C 3C 4C KS JH 2D 8D 4H',\n  '7S 6C JH KH 8H 3H 9D 2D AH 6D',\n  '4D TC 9C 8D 7H TD KS TH KD 3C',\n  'JD 9H 8D QD AS KD 9D 2C 2S 9C',\n  '8D 3H 5C 7H KS 5H QH 2D 8C 9H',\n  '2D TH 6D QD 6C KC 3H 3S AD 4C',\n  '4H 3H JS 9D 3C TC 5H QH QC JC',\n  '3D 5C 6H 3S 3C JC 5S 7S 2S QH',\n  'AC 5C 8C 4D 5D 4H 2S QD 3C 3H',\n  '2C TD AH 9C KD JS 6S QD 4C QC',\n  'QS 8C 3S 4H TC JS 3H 7C JC AD',\n  '5H 4D 9C KS JC TD 9S TS 8S 9H',\n  'QD TS 7D AS AC 2C TD 6H 8H AH',\n  '6S AD 8C 4S 9H 8D 9D KH 8S 3C',\n  'QS 4D 2D 7S KH JS JC AD 4C 3C',\n  'QS 9S 7H KC TD TH 5H JS AC JH',\n  '6D AC 2S QS 7C AS KS 6S KH 5S',\n  '6D 8H KH 3C QS 2H 5C 9C 9D 6C',\n  'JS 2C 4C 6H 7D JC AC QD TD 3H',\n  '4H QC 8H JD 4C KD KS 5C KC 7S',\n  '6D 2D 3H 2S QD 5S 7H AS TH 6S',\n  'AS 6D 8D 2C 8S TD 8H QD JC AH',\n  '9C 9H 2D TD QH 2H 5C TC 3D 8H',\n  'KC 8S 3D KH 2S TS TC 6S 4D JH',\n  '9H 9D QS AC KC 6H 5D 4D 8D AH',\n  '9S 5C QS 4H 7C 7D 2H 8S AD JS',\n  '3D AC 9S AS 2C 2D 2H 3H JC KH',\n  '7H QH KH JD TC KS 5S 8H 4C 8D',\n  '2H 7H 3S 2S 5H QS 3C AS 9H KD',\n  'AD 3D JD 6H 5S 9C 6D AC 9S 3S',\n  '3D 5D 9C 2D AC 4S 2S AD 6C 6S',\n  'QC 4C 2D 3H 6S KC QH QD 2H JH',\n  'QC 3C 8S 4D 9S 2H 5C 8H QS QD',\n  '6D KD 6S 7H 3S KH 2H 5C JC 6C',\n  '3S 9S TC 6S 8H 2D AD 7S 8S TS',\n  '3C 6H 9C 3H 5C JC 8H QH TD QD',\n  '3C JS QD 5D TD 2C KH 9H TH AS',\n  '9S TC JD 3D 5C 5H AD QH 9H KC',\n  'TC 7H 4H 8H 3H TD 6S AC 7C 2S',\n  'QS 9D 5D 3C JC KS 4D 6C JH 2S',\n  '9S 6S 3C 7H TS 4C KD 6D 3D 9C',\n  '2D 9H AH AC 7H 2S JH 3S 7C QC',\n  'QD 9H 3C 2H AC AS 8S KD 8C KH',\n  '2D 7S TD TH 6D JD 8D 4D 2H 5S',\n  '8S QH KD JD QS JH 4D KC 5H 3S',\n  '3C KH QC 6D 8H 3S AH 7D TD 2D',\n  '5S 9H QH 4S 6S 6C 6D TS TH 7S',\n  '6C 4C 6D QS JS 9C TS 3H 8D 8S',\n  'JS 5C 7S AS 2C AH 2H AD 5S TC',\n  'KD 6C 9C 9D TS 2S JC 4H 2C QD',\n  'QS 9H TC 3H KC KS 4H 3C AD TH',\n  'KH 9C 2H KD 9D TC 7S KC JH 2D',\n  '7C 3S KC AS 8C 5D 9C 9S QH 3H',\n  '2D 8C TD 4C 2H QC 5D TC 2C 7D',\n  'KS 4D 6C QH TD KH 5D 7C AD 8D',\n  '2S 9S 8S 4C 8C 3D 6H QD 7C 7H',\n  '6C 8S QH 5H TS 5C 3C 4S 2S 2H',\n  '8S 6S 2H JC 3S 3H 9D 8C 2S 7H',\n  'QC 2C 8H 9C AC JD 4C 4H 6S 3S',\n  '3H 3S 7D 4C 9S 5H 8H JC 3D TC',\n  'QH 2S 2D 9S KD QD 9H AD 6D 9C',\n  '8D 2D KS 9S JC 4C JD KC 4S TH',\n  'KH TS 6D 4D 5C KD 5H AS 9H AD',\n  'QD JS 7C 6D 5D 5C TH 5H QH QS',\n  '9D QH KH 5H JH 4C 4D TC TH 6C',\n  'KH AS TS 9D KD 9C 7S 4D 8H 5S',\n  'KH AS 2S 7D 9D 4C TS TH AH 7C',\n  'KS 4D AC 8S 9S 8D TH QH 9D 5C',\n  '5D 5C 8C QS TC 4C 3D 3S 2C 8D',\n  '9D KS 2D 3C KC 4S 8C KH 6C JC',\n  '8H AH 6H 7D 7S QD 3C 4C 6C KC',\n  '3H 2C QH 8H AS 7D 4C 8C 4H KC',\n  'QD 5S 4H 2C TD AH JH QH 4C 8S',\n  '3H QS 5S JS 8H 2S 9H 9C 3S 2C',\n  '6H TS 7S JC QD AC TD KC 5S 3H',\n  'QH AS QS 7D JC KC 2C 4C 5C 5S',\n  'QH 3D AS JS 4H 8D 7H JC 2S 9C',\n  '5D 4D 2S 4S 9D 9C 2D QS 8H 7H',\n  '6D 7H 3H JS TS AC 2D JH 7C 8S',\n  'JH 5H KC 3C TC 5S 9H 4C 8H 9D',\n  '8S KC 5H 9H AD KS 9D KH 8D AH',\n  'JC 2H 9H KS 6S 3H QC 5H AH 9C',\n  '5C KH 5S AD 6C JC 9H QC 9C TD',\n  '5S 5D JC QH 2D KS 8H QS 2H TS',\n  'JH 5H 5S AH 7H 3C 8S AS TD KH',\n  '6H 3D JD 2C 4C KC 7S AH 6C JH',\n  '4C KS 9D AD 7S KC 7D 8H 3S 9C',\n  '7H 5C 5H 3C 8H QC 3D KH 6D JC',\n  '2D 4H 5D 7D QC AD AH 9H QH 8H',\n  'KD 8C JS 9D 3S 3C 2H 5D 6D 2S',\n  '8S 6S TS 3C 6H 8D 5S 3H TD 6C',\n  'KS 3D JH 9C 7C 9S QS 5S 4H 6H',\n  '7S 6S TH 4S KC KD 3S JC JH KS',\n  '7C 3C 2S 6D QH 2C 7S 5H 8H AH',\n  'KC 8D QD 6D KH 5C 7H 9D 3D 9C',\n  '6H 2D 8S JS 9S 2S 6D KC 7C TC',\n  'KD 9C JH 7H KC 8S 2S 7S 3D 6H',\n  '4H 9H 2D 4C 8H 7H 5S 8S 2H 8D',\n  'AD 7C 3C 7S 5S 4D 9H 3D JC KH',\n  '5D AS 7D 6D 9C JC 4C QH QS KH',\n  'KD JD 7D 3D QS QC 8S 6D JS QD',\n  '6S 8C 5S QH TH 9H AS AC 2C JD',\n  'QC KS QH 7S 3C 4C 5C KC 5D AH',\n  '6C 4H 9D AH 2C 3H KD 3D TS 5C',\n  'TD 8S QS AS JS 3H KD AC 4H KS',\n  '7D 5D TS 9H 4H 4C 9C 2H 8C QC',\n  '2C 7D 9H 4D KS 4C QH AD KD JS',\n  'QD AD AH KH 9D JS 9H JC KD JD',\n  '8S 3C 4S TS 7S 4D 5C 2S 6H 7C',\n  'JS 7S 5C KD 6D QH 8S TD 2H 6S',\n  'QH 6C TC 6H TD 4C 9D 2H QC 8H',\n  '3D TS 4D 2H 6H 6S 2C 7H 8S 6C',\n  '9H 9D JD JH 3S AH 2C 6S 3H 8S',\n  '2C QS 8C 5S 3H 2S 7D 3C AD 4S',\n  '5C QC QH AS TS 4S 6S 4C 5H JS',\n  'JH 5C TD 4C 6H JS KD KH QS 4H',\n  'TC KH JC 4D 9H 9D 8D KC 3C 8H',\n  '2H TC 8S AD 9S 4H TS 7H 2C 5C',\n  '4H 2S 6C 5S KS AH 9C 7C 8H KD',\n  'TS QH TD QS 3C JH AH 2C 8D 7D',\n  '5D KC 3H 5S AC 4S 7H QS 4C 2H',\n  '3D 7D QC KH JH 6D 6C TD TH KD',\n  '5S 8D TH 6C 9D 7D KH 8C 9S 6D',\n  'JD QS 7S QC 2S QH JC 4S KS 8D',\n  '7S 5S 9S JD KD 9C JC AD 2D 7C',\n  '4S 5H AH JH 9C 5D TD 7C 2D 6S',\n  'KC 6C 7H 6S 9C QD 5S 4H KS TD',\n  '6S 8D KS 2D TH TD 9H JD TS 3S',\n  'KH JS 4H 5D 9D TC TD QC JD TS',\n  'QS QD AC AD 4C 6S 2D AS 3H KC',\n  '4C 7C 3C TD QS 9C KC AS 8D AD',\n  'KC 7H QC 6D 8H 6S 5S AH 7S 8C',\n  '3S AD 9H JC 6D JD AS KH 6S JH',\n  'AD 3D TS KS 7H JH 2D JS QD AC',\n  '9C JD 7C 6D TC 6H 6C JC 3D 3S',\n  'QC KC 3S JC KD 2C 8D AH QS TS',\n  'AS KD 3D JD 8H 7C 8C 5C QD 6C'\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a31000cf542c50feb6",
      "title": "Problem 55: Lychrel numbers",
      "challengeType": 1,
      "dashedName": "problem-55-lychrel-numbers",
      "description": "If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\n\nNot all numbers produce palindromes so quickly. For example,\n\n<div style=\"margin-left: 4em;\">\n  349 + 943 = 1292,<br>\n  1292 + 2921 = 4213<br>\n  4213 + 3124 = 7337<br>\n</div>\n\nThat is, 349 took three iterations to arrive at a palindrome.\n\nAlthough no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).\n\nSurprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.\n\nHow many Lychrel numbers are there below `num`?\n\n**Note:** Wording was modified slightly on 24 April 2007 to emphasize the theoretical nature of Lychrel numbers.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countLychrelNumbers(num) {\n\n  return true;\n}\n\ncountLychrelNumbers(10000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const countLychrelNumbers = (size) => {\n  const numReverse = (num) => {\n    return Number(num.toString().split('').reverse().join(''));\n  };\n  const isPalin = (num) => {\n    if (numReverse(num) === num) {\n      return true;\n    }\n    return false;\n  };\n  let total = 0;\n  for (let i = 1; i < size; i++) {\n    let loopCount = 1;\n    let sum = i;\n    while (loopCount < 50) {\n      sum = sum + numReverse(sum);\n      if (isPalin(sum)) {\n        break;\n      } else {\n        loopCount++;\n      }\n    }\n    if (loopCount === 50) {\n      total++;\n    }\n  }\n  return total;\n}"
        }
      ],
      "tests": [
        {
          "text": "`countLychrelNumbers(1000)` should return a number.",
          "testCode": "assert(typeof countLychrelNumbers(1000) === 'number');"
        },
        {
          "text": "`countLychrelNumbers(1000)` should return 13.",
          "testCode": "assert.strictEqual(countLychrelNumbers(1000), 13);"
        },
        {
          "text": "`countLychrelNumbers(3243)` should return 39.",
          "testCode": "assert.strictEqual(countLychrelNumbers(3243), 39);"
        },
        {
          "text": "`countLychrelNumbers(5000)` should return 76.",
          "testCode": "assert.strictEqual(countLychrelNumbers(5000), 76);"
        },
        {
          "text": "`countLychrelNumbers(7654)` should return 140.",
          "testCode": "assert.strictEqual(countLychrelNumbers(7654), 140);"
        },
        {
          "text": "`countLychrelNumbers(10000)` should return 249.",
          "testCode": "assert.strictEqual(countLychrelNumbers(10000), 249);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302166,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-55-lychrel-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a41000cf542c50feb7",
      "title": "Problem 56: Powerful digit sum",
      "challengeType": 1,
      "dashedName": "problem-56-powerful-digit-sum",
      "description": "A googol ($10^{100}$) is a massive number: one followed by one-hundred zeros; $100^{100}$ is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.\n\nConsidering natural numbers of the form, $a^b$, where `a`, `b` &lt; `n`, what is the maximum digital sum?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function powerfulDigitSum(n) {\n\n  return true;\n}\n\npowerfulDigitSum(3);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function powerfulDigitSum(n) {\n  function sumDigitsOfPower(numA, numB) {\n    let digitsSum = 0;\n    let number = power(numA, numB);\n    while (number > 0n) {\n      const digit = number % 10n;\n      digitsSum += parseInt(digit, 10);\n      number = number / 10n;\n    }\n    return digitsSum;\n  }\n\n  function power(numA, numB) {\n    let sum = 1n;\n    for (let b = 0; b < numB; b++) {\n      sum = sum * BigInt(numA);\n    }\n    return sum;\n  }\n\n  const limit = n - 1;\n  let maxDigitsSum = 0;\n  for (let a = limit; a > 0; a--) {\n    for (let b = limit; b > 0; b--) {\n      const curDigitSum = sumDigitsOfPower(a, b);\n      if (curDigitSum > maxDigitsSum) {\n        maxDigitsSum = curDigitSum;\n      }\n    }\n  }\n  return maxDigitsSum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`powerfulDigitSum(3)` should return a number.",
          "testCode": "assert(typeof powerfulDigitSum(3) === 'number');"
        },
        {
          "text": "`powerfulDigitSum(3)` should return `4`.",
          "testCode": "assert.strictEqual(powerfulDigitSum(3), 4);"
        },
        {
          "text": "`powerfulDigitSum(10)` should return `45`.",
          "testCode": "assert.strictEqual(powerfulDigitSum(10), 45);"
        },
        {
          "text": "`powerfulDigitSum(50)` should return `406`.",
          "testCode": "assert.strictEqual(powerfulDigitSum(50), 406);"
        },
        {
          "text": "`powerfulDigitSum(75)` should return `684`.",
          "testCode": "assert.strictEqual(powerfulDigitSum(75), 684);"
        },
        {
          "text": "`powerfulDigitSum(100)` should return `972`.",
          "testCode": "assert.strictEqual(powerfulDigitSum(100), 972);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302167,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-56-powerful-digit-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a51000cf542c50feb8",
      "title": "Problem 57: Square root convergents",
      "challengeType": 1,
      "dashedName": "problem-57-square-root-convergents",
      "description": "It is possible to show that the square root of two can be expressed as an infinite continued fraction.\n\n<div style='text-align: center;'>$\\sqrt 2 =1+ \\frac 1 {2+ \\frac 1 {2 +\\frac 1 {2+ \\dots}}}$</div>\n\nBy expanding this for the first four iterations, we get:\n\n$1 + \\\\frac 1 2 = \\\\frac 32 = 1.5$\n\n$1 + \\\\frac 1 {2 + \\\\frac 1 2} = \\\\frac 7 5 = 1.4$\n\n$1 + \\\\frac 1 {2 + \\\\frac 1 {2+\\\\frac 1 2}} = \\\\frac {17}{12} = 1.41666 \\\\dots$\n\n$1 + \\\\frac 1 {2 + \\\\frac 1 {2+\\\\frac 1 {2+\\\\frac 1 2}}} = \\\\frac {41}{29} = 1.41379 \\\\dots$\n\nThe next three expansions are $\\\\frac {99}{70}$, $\\\\frac {239}{169}$, and $\\\\frac {577}{408}$, but the eighth expansion, $\\\\frac {1393}{985}$, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.\n\nIn the first `n` expansions, how many fractions contain a numerator with more digits than denominator?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squareRootConvergents(n) {\n\n  return true;\n}\n\nsquareRootConvergents(1000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function squareRootConvergents(n) {\n  function countDigits(number) {\n    let counter = 0;\n    while (number > 0) {\n      counter++;\n      number = number / 10n;\n    }\n    return counter;\n  }\n\n  // Use BigInt as integer won't handle all cases\n  let numerator = 3n;\n  let denominator = 2n;\n  let moreDigitsInNumerator = 0;\n\n  for (let i = 2; i <= n; i++) {\n    [numerator, denominator] = [\n      numerator + 2n * denominator,\n      denominator + numerator\n    ];\n\n    if (countDigits(numerator) > countDigits(denominator)) {\n      moreDigitsInNumerator++;\n    }\n  }\n  return moreDigitsInNumerator;\n}"
        }
      ],
      "tests": [
        {
          "text": "`squareRootConvergents(10)` should return a number.",
          "testCode": "assert(typeof squareRootConvergents(10) === 'number');"
        },
        {
          "text": "`squareRootConvergents(10)` should return 1.",
          "testCode": "assert.strictEqual(squareRootConvergents(10), 1);"
        },
        {
          "text": "`squareRootConvergents(100)` should return 15.",
          "testCode": "assert.strictEqual(squareRootConvergents(100), 15);"
        },
        {
          "text": "`squareRootConvergents(1000)` should return 153.",
          "testCode": "assert.strictEqual(squareRootConvergents(1000), 153);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302168,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-57-square-root-convergents.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a61000cf542c50feb9",
      "title": "Problem 58: Spiral primes",
      "challengeType": 1,
      "dashedName": "problem-58-spiral-primes",
      "description": "Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.\n\n<div style='text-align: center;'>\n  <strong><span style='color: red;'>37</span></strong> 36 35 34 33 32 <strong><span style='color: red;'>31</span></strong><br>\n  38 <strong><span style='color: red;'>17</span></strong> 16 15 14 <strong><span style='color: red;'>13</span></strong> 30<br>\n  39 18  <strong><span style='color: red;'>5</span></strong>  4  <strong><span style='color: red;'>3</span></strong> 12 29<br>\n  40 19  6  1  2 11 28<br>\n  41 20  <strong><span style='color: red;'>7</span></strong>  8  9 10 27<br>\n  42 21 22 23 24 25 26<br>\n  <strong><span style='color: red;'>43</span></strong> 44 45 46 47 48 49<br>\n</div>\n\nIt is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.\n\nIf one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the percent of primes along both diagonals first falls below `percent`?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function spiralPrimes(percent) {\n\n  return true;\n}\n\nspiralPrimes(50);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function spiralPrimes(percent) {\n  function isPrime(n) {\n    if (n <= 3) {\n      return n > 1;\n    } else if (n % 2 === 0 || n % 3 === 0) {\n      return false;\n    }\n\n    for (let i = 5; i * i <= n; i += 6) {\n      if (n % i === 0 || n % (i + 2) === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let totalCount = 1;\n  let primesCount = 0;\n  let curNumber = 1;\n  let curSideLength = 1;\n  let ratio = 1;\n  const wantedRatio = percent / 100;\n\n  while (ratio >= wantedRatio) {\n    curSideLength += 2;\n    for (let i = 0; i < 4; i++) {\n      curNumber += curSideLength - 1;\n      totalCount++;\n      if (i !== 3 && isPrime(curNumber)) {\n        primesCount++;\n      }\n    }\n    ratio = primesCount / totalCount;\n  }\n  return curSideLength;\n}"
        }
      ],
      "tests": [
        {
          "text": "`spiralPrimes(50)` should return a number.",
          "testCode": "assert(typeof spiralPrimes(50) === 'number');"
        },
        {
          "text": "`spiralPrimes(50)` should return `11`.",
          "testCode": "assert.strictEqual(spiralPrimes(50), 11);"
        },
        {
          "text": "`spiralPrimes(15)` should return `981`.",
          "testCode": "assert.strictEqual(spiralPrimes(15), 981);"
        },
        {
          "text": "`spiralPrimes(10)` should return `26241`.",
          "testCode": "assert.strictEqual(spiralPrimes(10), 26241);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302169,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-58-spiral-primes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a81000cf542c50feba",
      "title": "Problem 59: XOR decryption",
      "challengeType": 1,
      "dashedName": "problem-59-xor-decryption",
      "description": "Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example, uppercase A = 65, asterisk (\\*) = 42, and lowercase k = 107.\n\nA modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.\n\nFor unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both \"halves\", it is impossible to decrypt the message.\n\nUnfortunately, this method is impractical for most users, so the modified method is to use a password as a key. If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.\n\nYour task has been made easy, as the encryption key consists of three lower case characters. Using `cipher`, an array containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function XORDecryption(arr) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst cipher = [\n  36,22,80,0,0,4,23,25,19,17,88,4,4,19,21,11,88,22,23,23,29,69,12,24,0,88,25,11,12,2,10,28,5,6,12,25,10,22,80,10,30,80,10,22,21,69,23,22,69,61,5,9,29,2,66,11,80,8,23,3,17,88,19,0,20,21,7,10,17,17,29,20,69,8,17,21,29,2,22,84,80,71,60,21,69,11,5,8,21,25,22,88,3,0,10,25,0,10,5,8,88,2,0,27,25,21,10,31,6,25,2,16,21,82,69,35,63,11,88,4,13,29,80,22,13,29,22,88,31,3,88,3,0,10,25,0,11,80,10,30,80,23,29,19,12,8,2,10,27,17,9,11,45,95,88,57,69,16,17,19,29,80,23,29,19,0,22,4,9,1,80,3,23,5,11,28,92,69,9,5,12,12,21,69,13,30,0,0,0,0,27,4,0,28,28,28,84,80,4,22,80,0,20,21,2,25,30,17,88,21,29,8,2,0,11,3,12,23,30,69,30,31,23,88,4,13,29,80,0,22,4,12,10,21,69,11,5,8,88,31,3,88,4,13,17,3,69,11,21,23,17,21,22,88,65,69,83,80,84,87,68,69,83,80,84,87,73,69,83,80,84,87,65,83,88,91,69,29,4,6,86,92,69,15,24,12,27,24,69,28,21,21,29,30,1,11,80,10,22,80,17,16,21,69,9,5,4,28,2,4,12,5,23,29,80,10,30,80,17,16,21,69,27,25,23,27,28,0,84,80,22,23,80,17,16,17,17,88,25,3,88,4,13,29,80,17,10,5,0,88,3,16,21,80,10,30,80,17,16,25,22,88,3,0,10,25,0,11,80,12,11,80,10,26,4,4,17,30,0,28,92,69,30,2,10,21,80,12,12,80,4,12,80,10,22,19,0,88,4,13,29,80,20,13,17,1,10,17,17,13,2,0,88,31,3,88,4,13,29,80,6,17,2,6,20,21,69,30,31,9,20,31,18,11,94,69,54,17,8,29,28,28,84,80,44,88,24,4,14,21,69,30,31,16,22,20,69,12,24,4,12,80,17,16,21,69,11,5,8,88,31,3,88,4,13,17,3,69,11,21,23,17,21,22,88,25,22,88,17,69,11,25,29,12,24,69,8,17,23,12,80,10,30,80,17,16,21,69,11,1,16,25,2,0,88,31,3,88,4,13,29,80,21,29,2,12,21,21,17,29,2,69,23,22,69,12,24,0,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,67,80,10,10,80,7,1,80,21,13,4,17,17,30,2,88,4,13,29,80,22,13,29,69,23,22,69,12,24,12,11,80,22,29,2,12,29,3,69,29,1,16,25,28,69,12,31,69,11,92,69,17,4,69,16,17,22,88,4,13,29,80,23,25,4,12,23,80,22,9,2,17,80,70,76,88,29,16,20,4,12,8,28,12,29,20,69,26,9,69,11,80,17,23,80,84,88,31,3,88,4,13,29,80,21,29,2,12,21,21,17,29,2,69,12,31,69,12,24,0,88,20,12,25,29,0,12,21,23,86,80,44,88,7,12,20,28,69,11,31,10,22,80,22,16,31,18,88,4,13,25,4,69,12,24,0,88,3,16,21,80,10,30,80,17,16,25,22,88,3,0,10,25,0,11,80,17,23,80,7,29,80,4,8,0,23,23,8,12,21,17,17,29,28,28,88,65,75,78,68,81,65,67,81,72,70,83,64,68,87,74,70,81,75,70,81,67,80,4,22,20,69,30,2,10,21,80,8,13,28,17,17,0,9,1,25,11,31,80,17,16,25,22,88,30,16,21,18,0,10,80,7,1,80,22,17,8,73,88,17,11,28,80,17,16,21,11,88,4,4,19,25,11,31,80,17,16,21,69,11,1,16,25,2,0,88,2,10,23,4,73,88,4,13,29,80,11,13,29,7,29,2,69,75,94,84,76,65,80,65,66,83,77,67,80,64,73,82,65,67,87,75,72,69,17,3,69,17,30,1,29,21,1,88,0,23,23,20,16,27,21,1,84,80,18,16,25,6,16,80,0,0,0,23,29,3,22,29,3,69,12,24,0,88,0,0,10,25,8,29,4,0,10,80,10,30,80,4,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,86,80,35,23,28,9,23,7,12,22,23,69,25,23,4,17,30,69,12,24,0,88,3,4,21,21,69,11,4,0,8,3,69,26,9,69,15,24,12,27,24,69,49,80,13,25,20,69,25,2,23,17,6,0,28,80,4,12,80,17,16,25,22,88,3,16,21,92,69,49,80,13,25,6,0,88,20,12,11,19,10,14,21,23,29,20,69,12,24,4,12,80,17,16,21,69,11,5,8,88,31,3,88,4,13,29,80,22,29,2,12,29,3,69,73,80,78,88,65,74,73,70,69,83,80,84,87,72,84,88,91,69,73,95,87,77,70,69,83,80,84,87,70,87,77,80,78,88,21,17,27,94,69,25,28,22,23,80,1,29,0,0,22,20,22,88,31,11,88,4,13,29,80,20,13,17,1,10,17,17,13,2,0,88,31,3,88,4,13,29,80,6,17,2,6,20,21,75,88,62,4,21,21,9,1,92,69,12,24,0,88,3,16,21,80,10,30,80,17,16,25,22,88,29,16,20,4,12,8,28,12,29,20,69,26,9,69,65,64,69,31,25,19,29,3,69,12,24,0,88,18,12,9,5,4,28,2,4,12,21,69,80,22,10,13,2,17,16,80,21,23,7,0,10,89,69,23,22,69,12,24,0,88,19,12,10,19,16,21,22,0,10,21,11,27,21,69,23,22,69,12,24,0,88,0,0,10,25,8,29,4,0,10,80,10,30,80,4,88,19,12,10,19,9,29,80,18,16,31,22,29,80,1,17,17,8,29,4,0,10,80,12,11,80,84,86,80,36,22,20,69,26,9,69,11,25,8,17,28,4,10,80,23,29,17,22,23,30,12,22,23,69,49,80,13,25,6,0,88,28,12,19,21,18,17,3,0,88,18,0,29,30,69,25,18,9,29,80,17,23,80,1,29,4,0,10,29,12,22,21,69,12,24,0,88,3,16,21,3,69,23,22,69,12,24,0,88,3,16,26,3,0,9,5,0,22,4,69,11,21,23,17,21,22,88,25,11,88,7,13,17,19,13,88,4,13,29,80,0,0,0,10,22,21,11,12,3,69,25,2,0,88,21,19,29,30,69,22,5,8,26,21,23,11,94\n];\n\nXORDecryption(cipher);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`XORDecryption(cipher)` should return a number.",
          "testCode": "assert(typeof XORDecryption(cipher) === 'number');"
        },
        {
          "text": "`XORDecryption(cipher)` should return 129448.",
          "testCode": "assert.strictEqual(XORDecryption(cipher), 129448);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302170,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-59-xor-decryption.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3721000cf542c50fe85",
      "title": "Problem 6: Sum square difference",
      "challengeType": 1,
      "dashedName": "problem-6-sum-square-difference",
      "description": "The sum of the squares of the first ten natural numbers is,\n\n<div style='text-align: center;'>1<sup>2</sup> + 2<sup>2</sup> + ... + 10<sup>2</sup> = 385</div>\n\nThe square of the sum of the first ten natural numbers is,\n\n<div style='text-align: center;'>(1 + 2 + ... + 10)<sup>2</sup> = 55<sup>2</sup> = 3025</div>\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\n\nFind the difference between the sum of the squares of the first `n` natural numbers and the square of the sum.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumSquareDifference(n) {\n\n  return true;\n}\n\nsumSquareDifference(100);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const sumSquareDifference = (number)=>{\n  let squareOfSum = Math.pow(sumOfArithmeticSeries(1,1,number),2);\n  let sumOfSquare = sumOfSquareOfNumbers(number);\n return squareOfSum - sumOfSquare;\n}\n\nfunction sumOfArithmeticSeries(a,d,n){\n  return (n/2)*(2*a+(n-1)*d);\n}\n\nfunction sumOfSquareOfNumbers(n){\n return (n*(n+1)*(2*n+1))/6;\n}"
        }
      ],
      "tests": [
        {
          "text": "`sumSquareDifference(10)` should return a number.",
          "testCode": "assert.isNumber(sumSquareDifference(10));"
        },
        {
          "text": "`sumSquareDifference(10)` should return 2640.",
          "testCode": "assert.strictEqual(sumSquareDifference(10), 2640);"
        },
        {
          "text": "`sumSquareDifference(20)` should return 41230.",
          "testCode": "assert.strictEqual(sumSquareDifference(20), 41230);"
        },
        {
          "text": "`sumSquareDifference(100)` should return 25164150.",
          "testCode": "assert.strictEqual(sumSquareDifference(100), 25164150);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302171,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-6-sum-square-difference.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a81000cf542c50febb",
      "title": "Problem 60: Prime pair sets",
      "challengeType": 1,
      "dashedName": "problem-60-prime-pair-sets",
      "description": "The primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime. For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.\n\nFind the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primePairSets() {\n\n  return true;\n}\n\nprimePairSets();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primePairSets()` should return a number.",
          "testCode": "assert(typeof primePairSets() === 'number');"
        },
        {
          "text": "`primePairSets()` should return 26033.",
          "testCode": "assert.strictEqual(primePairSets(), 26033);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302172,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-60-prime-pair-sets.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3a91000cf542c50febc",
      "title": "Problem 61: Cyclical figurate numbers",
      "challengeType": 1,
      "dashedName": "problem-61-cyclical-figurate-numbers",
      "description": "Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:\n\n| Type of Number | Formula                      | Sequence              |\n| -------------- | ---------------------------- | --------------------- |\n| Triangle       | $P_3(n) = \\frac{n(n+1)}{2}$  | 1, 3, 6, 10, 15, ...  |\n| Square         | $P_4(n) = n^2$               | 1, 4, 9, 16, 25, ...  |\n| Pentagonal     | $P_5(n) = \\frac{n(3n−1)}2$   | 1, 5, 12, 22, 35, ... |\n| Hexagonal      | $P_6(n) = n(2n−1)$           | 1, 6, 15, 28, 45, ... |\n| Heptagonal     | $P_7(n) = \\frac{n(5n−3)}{2}$ | 1, 7, 18, 34, 55, ... |\n| Octagonal      | $P_8(n) = n(3n−2)$           | 1, 8, 21, 40, 65, ... |\n\nThe ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.\n\n1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).\n2. Each polygonal type: triangle ($P_3(127) = 8128$), square ($P_4(91) = 8281$), and pentagonal ($P_5(44) = 2882$), is represented by a different number in the set.\n3. This is the only set of 4-digit numbers with this property.\n\nFind the sum of all numbers in ordered sets of `n` cyclic 4-digit numbers for which each of the $P_3$ to $P_{n + 2}$ polygonal types, is represented by a different number in the set.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cyclicalFigurateNums(n) {\n\n  return true;\n}\n\ncyclicalFigurateNums(3);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function cyclicalFigurateNums(n) {\n  function getChains(chain, n, numberTypes, numsExcludingLastNeededType) {\n    if (chain.length === n) {\n      return [chain];\n    }\n\n    const nextNumbers = getNextNumbersInChain(\n      chain[chain.length - 1],\n      numsExcludingLastNeededType\n    );\n\n    const chains = [];\n    for (let j = 0; j < nextNumbers.length; j++) {\n      const nextNumber = nextNumbers[j];\n      if (chain.indexOf(nextNumber) === -1) {\n        const nextChain = [...chain, nextNumber];\n        chains.push(\n          ...getChains(nextChain, n, numberTypes, numsExcludingLastNeededType)\n        );\n      }\n    }\n    return chains;\n  }\n\n  function getNextNumbersInChain(num, numsExcludingLastNeededType) {\n    const results = [];\n    const beginning = num % 100;\n    numsExcludingLastNeededType.forEach(number => {\n      if (Math.floor(number / 100) === beginning) {\n        results.push(number);\n      }\n    });\n    return results;\n  }\n\n  function fillNumberTypes(n, numberTypes, numsExcludingLastNeededType) {\n    const [, lastTypeCheck, lastTypeArr] = numberTypes[n - 1];\n\n    for (let i = 1000; i <= 9999; i++) {\n      for (let j = 0; j < n - 1; j++) {\n        const [, typeCheck, typeArr] = numberTypes[j];\n        if (typeCheck(i)) {\n          typeArr.push(i);\n          numsExcludingLastNeededType.add(i);\n        }\n      }\n\n      if (lastTypeCheck(i)) {\n        lastTypeArr.push(i);\n      }\n    }\n  }\n\n  function isCyclicalChain(chain, n, numberTypes) {\n    const numberTypesInChain = getNumberTypesInChain(chain, numberTypes);\n\n    if (!isChainAllowed(numberTypesInChain, n)) {\n      return false;\n    }\n\n    const isChainCyclic =\n      Math.floor(chain[0] / 100) === chain[chain.length - 1] % 100;\n    return isChainCyclic;\n  }\n\n  function getNumberTypesInChain(chain, numberTypes) {\n    const numbersInChain = {};\n    for (let i = 0; i < numberTypes.length; i++) {\n      const numberTypeName = numberTypes[i][0];\n      numbersInChain[numberTypeName] = [];\n    }\n\n    for (let i = 0; i < chain.length; i++) {\n      for (let j = 0; j < n; j++) {\n        const [typeName, , typeNumbers] = numberTypes[j];\n        const typeNumbersInChain = numbersInChain[typeName];\n        if (typeNumbers.indexOf(chain[i]) !== -1) {\n          typeNumbersInChain.push(chain[i]);\n        }\n      }\n    }\n    return numbersInChain;\n  }\n\n  function isChainAllowed(numberTypesInChain, n) {\n    for (let i = 0; i < n; i++) {\n      const typeName = numberTypes[i][0];\n      const isNumberWithTypeInChain = numberTypesInChain[typeName].length > 0;\n      if (!isNumberWithTypeInChain) {\n        return false;\n      }\n\n      for (let j = i + 1; j < n; j++) {\n        const otherTypeName = numberTypes[j][0];\n        if (\n          isNumberRepeatedAsOnlyNumberInTwoTypes(\n            numberTypesInChain[typeName],\n            numberTypesInChain[otherTypeName]\n          )\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function isNumberRepeatedAsOnlyNumberInTwoTypes(\n    typeNumbers,\n    otherTypeNumbers\n  ) {\n    return (\n      typeNumbers.length === 1 &&\n      otherTypeNumbers.length === 1 &&\n      typeNumbers[0] === otherTypeNumbers[0]\n    );\n  }\n\n  function isTriangle(num) {\n    return ((8 * num + 1) ** 0.5 - 1) % 2 === 0;\n  }\n\n  function isSquare(num) {\n    return num ** 0.5 === parseInt(num ** 0.5, 10);\n  }\n\n  function isPentagonal(num) {\n    return ((24 * num + 1) ** 0.5 + 1) % 6 === 0;\n  }\n\n  function isHexagonal(num) {\n    return ((8 * num + 1) ** 0.5 + 1) % 4 === 0;\n  }\n\n  function isHeptagonal(num) {\n    return ((40 * num + 9) ** 0.5 + 3) % 10 === 0;\n  }\n\n  function isOctagonal(num) {\n    return ((3 * num + 1) ** 0.5 + 1) % 3 === 0;\n  }\n\n  const numberTypes = [\n    ['triangle', isTriangle, []],\n    ['square', isSquare, []],\n    ['pentagonal', isPentagonal, []],\n    ['hexagonal', isHexagonal, []],\n    ['heptagonal', isHeptagonal, []],\n    ['octagonal', isOctagonal, []]\n  ];\n  const numsExcludingLastNeededType = new Set();\n  fillNumberTypes(n, numberTypes, numsExcludingLastNeededType);\n\n  const nNumberChains = [];\n  const [, , lastType] = numberTypes[n - 1];\n  for (let i = 0; i < lastType.length; i++) {\n    const startOfChain = lastType[i];\n    nNumberChains.push(\n      ...getChains([startOfChain], n, numberTypes, numsExcludingLastNeededType)\n    );\n  }\n\n  const cyclicalChains = nNumberChains.filter(chain =>\n    isCyclicalChain(chain, n, numberTypes)\n  );\n\n  let sum = 0;\n  for (let i = 0; i < cyclicalChains.length; i++) {\n    for (let j = 0; j < cyclicalChains[0].length; j++) {\n      sum += cyclicalChains[i][j];\n    }\n  }\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`cyclicalFigurateNums(3)` should return a number.",
          "testCode": "assert(typeof cyclicalFigurateNums(3) === 'number');"
        },
        {
          "text": "`cyclicalFigurateNums(3)` should return `19291`.",
          "testCode": "assert.strictEqual(cyclicalFigurateNums(3), 19291);"
        },
        {
          "text": "`cyclicalFigurateNums(4)` should return `28684`.",
          "testCode": "assert.strictEqual(cyclicalFigurateNums(4), 28684);"
        },
        {
          "text": "`cyclicalFigurateNums(5)` should return `76255`.",
          "testCode": "assert.strictEqual(cyclicalFigurateNums(5), 76255);"
        },
        {
          "text": "`cyclicalFigurateNums(6)` should return `28684`.",
          "testCode": "assert.strictEqual(cyclicalFigurateNums(6), 28684);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302173,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-61-cyclical-figurate-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3aa1000cf542c50febd",
      "title": "Problem 62: Cubic permutations",
      "challengeType": 1,
      "dashedName": "problem-62-cubic-permutations",
      "description": "The cube, 41063625 ($345^3$), can be permuted to produce two other cubes: 56623104 ($384^3$) and 66430125 ($405^3$). In fact, 41063625 is the smallest cube which has exactly three permutations of its digits which are also cube.\n\nFind the smallest cube for which exactly `n` permutations of its digits are cube.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cubicPermutations(n) {\n\n  return true;\n}\n\ncubicPermutations(2);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function cubicPermutations(n) {\n  function getDigits(num) {\n    const digits = [];\n    while (num > 0) {\n      digits.push(num % 10);\n      num = Math.floor(num / 10);\n    }\n    return digits;\n  }\n\n  function getCube(num) {\n    return num ** 3;\n  }\n\n  const digitsToCubeCounts = {};\n  let curNum = 1;\n  let digits;\n\n  while (!digitsToCubeCounts[digits] || digitsToCubeCounts[digits].count < n) {\n    const cube = getCube(curNum);\n    digits = getDigits(cube).sort().join();\n    if (!digitsToCubeCounts[digits]) {\n      digitsToCubeCounts[digits] = {\n        count: 1,\n        smallestCube: cube\n      };\n    } else {\n      digitsToCubeCounts[digits].count += 1;\n    }\n\n    curNum++;\n  }\n  return digitsToCubeCounts[digits].smallestCube;\n}"
        }
      ],
      "tests": [
        {
          "text": "`cubicPermutations(2)` should return a number.",
          "testCode": "assert(typeof cubicPermutations(2) === 'number');"
        },
        {
          "text": "`cubicPermutations(2)` should return `125`.",
          "testCode": "assert.strictEqual(cubicPermutations(2), 125);"
        },
        {
          "text": "`cubicPermutations(3)` should return `41063625`.",
          "testCode": "assert.strictEqual(cubicPermutations(3), 41063625);"
        },
        {
          "text": "`cubicPermutations(4)` should return `1006012008`.",
          "testCode": "assert.strictEqual(cubicPermutations(4), 1006012008);"
        },
        {
          "text": "`cubicPermutations(5)` should return `127035954683`.",
          "testCode": "assert.strictEqual(cubicPermutations(5), 127035954683);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302174,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-62-cubic-permutations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3ab1000cf542c50febe",
      "title": "Problem 63: Powerful digit counts",
      "challengeType": 1,
      "dashedName": "problem-63-powerful-digit-counts",
      "description": "The 5-digit number, 16807 = 7<sup>5</sup>, is also a fifth power. Similarly, the 9-digit number, 134217728 = 8<sup>9</sup>, is a ninth power.\n\nComplete the function so that it returns how many positive integers are of length `n` and an `n`th power.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function powerfulDigitCounts(n) {\n\n  return true;\n}\n\npowerfulDigitCounts(1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function powerfulDigitCounts(n) {\n  function countDigits(num) {\n    let counter = 0;\n    while (num > 0) {\n      num = Math.floor(num / 10);\n      counter++;\n    }\n    return counter;\n  }\n\n  let numbersCount = 0;\n\n  let curNum = 1;\n  while (curNum < 10) {\n    let power = n;\n    if (power === countDigits(curNum ** power)) {\n      numbersCount++;\n    }\n    curNum++;\n  }\n\n  return numbersCount;\n}"
        }
      ],
      "tests": [
        {
          "text": "`powerfulDigitCounts(1)` should return a number.",
          "testCode": "assert(typeof powerfulDigitCounts(1) === 'number');"
        },
        {
          "text": "`powerfulDigitCounts(1)` should return `9`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(1), 9);"
        },
        {
          "text": "`powerfulDigitCounts(2)` should return `6`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(2), 6);"
        },
        {
          "text": "`powerfulDigitCounts(3)` should return `5`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(3), 5);"
        },
        {
          "text": "`powerfulDigitCounts(4)` should return `4`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(4), 4);"
        },
        {
          "text": "`powerfulDigitCounts(5)` should return `3`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(5), 3);"
        },
        {
          "text": "`powerfulDigitCounts(6)` should return `3`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(6), 3);"
        },
        {
          "text": "`powerfulDigitCounts(7)` should return `2`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(7), 2);"
        },
        {
          "text": "`powerfulDigitCounts(8)` should return `2`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(8), 2);"
        },
        {
          "text": "`powerfulDigitCounts(10)` should return `2`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(10), 2);"
        },
        {
          "text": "`powerfulDigitCounts(21)` should return `1`.",
          "testCode": "assert.strictEqual(powerfulDigitCounts(21), 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302175,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-63-powerful-digit-counts.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3ac1000cf542c50febf",
      "title": "Problem 64: Odd period square roots",
      "challengeType": 1,
      "dashedName": "problem-64-odd-period-square-roots",
      "description": "All square roots are periodic when written as continued fractions and can be written in the form:\n\n$\\\\displaystyle \\\\quad \\\\quad \\\\sqrt{N}=a_0+\\\\frac 1 {a_1+\\\\frac 1 {a_2+ \\\\frac 1 {a3+ \\\\dots}}}$\n\nFor example, let us consider $\\\\sqrt{23}$:\n\n$\\\\quad \\\\quad \\\\sqrt{23}=4+\\\\sqrt{23}-4=4+\\\\frac 1 {\\\\frac 1 {\\\\sqrt{23}-4}}=4+\\\\frac 1 {1+\\\\frac{\\\\sqrt{23}-3}7}$\n\nIf we continue we would get the following expansion:\n\n$\\\\displaystyle \\\\quad \\\\quad \\\\sqrt{23}=4+\\\\frac 1 {1+\\\\frac 1 {3+ \\\\frac 1 {1+\\\\frac 1 {8+ \\\\dots}}}}$\n\nThe process can be summarized as follows:\n\n$\\\\quad \\\\quad a_0=4, \\\\frac 1 {\\\\sqrt{23}-4}=\\\\frac {\\\\sqrt{23}+4} 7=1+\\\\frac {\\\\sqrt{23}-3} 7$\n\n$\\\\quad \\\\quad a_1=1, \\\\frac 7 {\\\\sqrt{23}-3}=\\\\frac {7(\\\\sqrt{23}+3)} {14}=3+\\\\frac {\\\\sqrt{23}-3} 2$\n\n$\\\\quad \\\\quad a_2=3, \\\\frac 2 {\\\\sqrt{23}-3}=\\\\frac {2(\\\\sqrt{23}+3)} {14}=1+\\\\frac {\\\\sqrt{23}-4} 7$\n\n$\\\\quad \\\\quad a_3=1, \\\\frac 7 {\\\\sqrt{23}-4}=\\\\frac {7(\\\\sqrt{23}+4)} 7=8+\\\\sqrt{23}-4$\n\n$\\\\quad \\\\quad a_4=8, \\\\frac 1 {\\\\sqrt{23}-4}=\\\\frac {\\\\sqrt{23}+4} 7=1+\\\\frac {\\\\sqrt{23}-3} 7$\n\n$\\\\quad \\\\quad a_5=1, \\\\frac 7 {\\\\sqrt{23}-3}=\\\\frac {7 (\\\\sqrt{23}+3)} {14}=3+\\\\frac {\\\\sqrt{23}-3} 2$\n\n$\\\\quad \\\\quad a_6=3, \\\\frac 2 {\\\\sqrt{23}-3}=\\\\frac {2(\\\\sqrt{23}+3)} {14}=1+\\\\frac {\\\\sqrt{23}-4} 7$\n\n$\\\\quad \\\\quad a_7=1, \\\\frac 7 {\\\\sqrt{23}-4}=\\\\frac {7(\\\\sqrt{23}+4)} {7}=8+\\\\sqrt{23}-4$\n\nIt can be seen that the sequence is repeating. For conciseness, we use the notation $\\\\sqrt{23}=\\[4;(1,3,1,8)]$, to indicate that the block (1,3,1,8) repeats indefinitely.\n\nThe first ten continued fraction representations of (irrational) square roots are:\n\n$\\\\quad \\\\quad \\\\sqrt{2}=\\[1;(2)]$, period = 1\n\n$\\\\quad \\\\quad \\\\sqrt{3}=\\[1;(1,2)]$, period = 2\n\n$\\\\quad \\\\quad \\\\sqrt{5}=\\[2;(4)]$, period = 1\n\n$\\\\quad \\\\quad \\\\sqrt{6}=\\[2;(2,4)]$, period = 2\n\n$\\\\quad \\\\quad \\\\sqrt{7}=\\[2;(1,1,1,4)]$, period = 4\n\n$\\\\quad \\\\quad \\\\sqrt{8}=\\[2;(1,4)]$, period = 2\n\n$\\\\quad \\\\quad \\\\sqrt{10}=\\[3;(6)]$, period = 1\n\n$\\\\quad \\\\quad \\\\sqrt{11}=\\[3;(3,6)]$, period = 2\n\n$\\\\quad \\\\quad \\\\sqrt{12}=\\[3;(2,6)]$, period = 2\n\n$\\\\quad \\\\quad \\\\sqrt{13}=\\[3;(1,1,1,1,6)]$, period = 5\n\nExactly four continued fractions, for $N \\\\le 13$, have an odd period.\n\nHow many continued fractions for $N \\\\le n$ have an odd period?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function oddPeriodSqrts(n) {\n\n  return true;\n}\n\noddPeriodSqrts(13);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function oddPeriodSqrts(n) {\n  // Based on https://www.mathblog.dk/project-euler-continued-fractions-odd-period/\n  function getPeriod(num) {\n    let period = 0;\n    let m = 0;\n    let d = 1;\n    let a = Math.floor(Math.sqrt(num));\n    const a0 = a;\n    while (2 * a0 !== a) {\n      m = d * a - m;\n      d = Math.floor((num - m ** 2) / d);\n      a = Math.floor((Math.sqrt(num) + m) / d);\n      period++;\n    }\n    return period;\n  }\n\n  function isPerfectSquare(num) {\n    return Number.isInteger(Math.sqrt(num));\n  }\n\n  let counter = 0;\n  for (let i = 2; i <= n; i++) {\n    if (!isPerfectSquare(i)) {\n      if (getPeriod(i) % 2 !== 0) {\n        counter++;\n      }\n    }\n  }\n  return counter;\n}"
        }
      ],
      "tests": [
        {
          "text": "`oddPeriodSqrts(13)` should return a number.",
          "testCode": "assert(typeof oddPeriodSqrts(13) === 'number');"
        },
        {
          "text": "`oddPeriodSqrts(500)` should return `83`.",
          "testCode": "assert.strictEqual(oddPeriodSqrts(500), 83);"
        },
        {
          "text": "`oddPeriodSqrts(1000)` should return `152`.",
          "testCode": "assert.strictEqual(oddPeriodSqrts(1000), 152);"
        },
        {
          "text": "`oddPeriodSqrts(5000)` should return `690`.",
          "testCode": "assert.strictEqual(oddPeriodSqrts(5000), 690);"
        },
        {
          "text": "`oddPeriodSqrts(10000)` should return `1322`.",
          "testCode": "assert.strictEqual(oddPeriodSqrts(10000), 1322);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302176,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-64-odd-period-square-roots.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3ad1000cf542c50fec0",
      "title": "Problem 65: Convergents of e",
      "challengeType": 1,
      "dashedName": "problem-65-convergents-of-e",
      "description": "The square root of 2 can be written as an infinite continued fraction.\n\n$\\\\sqrt{2} = 1 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2 + ...}}}}$\n\nThe infinite continued fraction can be written, $\\\\sqrt{2} = \\[1; (2)]$ indicates that 2 repeats *ad infinitum*. In a similar way, $\\\\sqrt{23} = \\[4; (1, 3, 1, 8)]$. It turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations. Let us consider the convergents for $\\\\sqrt{2}$.\n\n$1 + \\\\dfrac{1}{2} = \\\\dfrac{3}{2}\\\\\\\\ 1 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2}} = \\\\dfrac{7}{5}\\\\\\\\ 1 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2}}} = \\\\dfrac{17}{12}\\\\\\\\ 1 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2 + \\\\dfrac{1}{2}}}} = \\\\dfrac{41}{29}$\n\nHence the sequence of the first ten convergents for $\\\\sqrt{2}$ are:\n\n$1, \\\\dfrac{3}{2}, \\\\dfrac{7}{5}, \\\\dfrac{17}{12}, \\\\dfrac{41}{29}, \\\\dfrac{99}{70}, \\\\dfrac{239}{169}, \\\\dfrac{577}{408}, \\\\dfrac{1393}{985}, \\\\dfrac{3363}{2378}, ...$\n\nWhat is most surprising is that the important mathematical constant, $e = \\[2; 1, 2, 1, 1, 4, 1, 1, 6, 1, ... , 1, 2k, 1, ...]$. The first ten terms in the sequence of convergents for `e` are:\n\n$2, 3, \\\\dfrac{8}{3}, \\\\dfrac{11}{4}, \\\\dfrac{19}{7}, \\\\dfrac{87}{32}, \\\\dfrac{106}{39}, \\\\dfrac{193}{71}, \\\\dfrac{1264}{465}, \\\\dfrac{1457}{536}, ...$\n\nThe sum of digits in the numerator of the 10<sup>th</sup> convergent is $1 + 4 + 5 + 7 = 17$.\n\nFind the sum of digits in the numerator of the `n`<sup>th</sup> convergent of the continued fraction for `e`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function convergentsOfE(n) {\n\n  return true;\n}\n\nconvergentsOfE(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function convergentsOfE(n) {\n  function sumDigits(num) {\n    let sum = 0n;\n    while (num > 0) {\n      sum += num % 10n;\n      num = num / 10n;\n    }\n    return parseInt(sum);\n  }\n\n  // BigInt is needed for high convergents\n  let convergents = [\n    [2n, 1n],\n    [3n, 1n]\n  ];\n  const multipliers = [1n, 1n, 2n];\n  for (let i = 2; i < n; i++) {\n    const [secondLastConvergent, lastConvergent] = convergents;\n    const [secondLastNumerator, secondLastDenominator] = secondLastConvergent;\n    const [lastNumerator, lastDenominator] = lastConvergent;\n    const curMultiplier = multipliers[i % 3];\n\n    const numerator = secondLastNumerator + curMultiplier * lastNumerator;\n    const denominator = secondLastDenominator + curMultiplier * lastDenominator;\n\n    convergents = [lastConvergent, [numerator, denominator]]\n    if (i % 3 === 2) {\n      multipliers[2] += 2n;\n    }\n  }\n  return sumDigits(convergents[1][0]);\n}"
        }
      ],
      "tests": [
        {
          "text": "`convergentsOfE(10)` should return a number.",
          "testCode": "assert(typeof convergentsOfE(10) === 'number');"
        },
        {
          "text": "`convergentsOfE(10)` should return `17`.",
          "testCode": "assert.strictEqual(convergentsOfE(10), 17);"
        },
        {
          "text": "`convergentsOfE(30)` should return `53`.",
          "testCode": "assert.strictEqual(convergentsOfE(30), 53);"
        },
        {
          "text": "`convergentsOfE(50)` should return `91`.",
          "testCode": "assert.strictEqual(convergentsOfE(50), 91);"
        },
        {
          "text": "`convergentsOfE(70)` should return `169`.",
          "testCode": "assert.strictEqual(convergentsOfE(70), 169);"
        },
        {
          "text": "`convergentsOfE(100)` should return `272`.",
          "testCode": "assert.strictEqual(convergentsOfE(100), 272);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302177,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-65-convergents-of-e.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3ae1000cf542c50fec1",
      "title": "Problem 66: Diophantine equation",
      "challengeType": 1,
      "dashedName": "problem-66-diophantine-equation",
      "description": "Consider quadratic Diophantine equations of the form:\n\n<div style='text-align: center;'>x<sup>2</sup> – Dy<sup>2</sup> = 1</div>\n\nFor example, when D=13, the minimal solution in x is 649<sup>2</sup> – 13×180<sup>2</sup> = 1.\n\nIt can be assumed that there are no solutions in positive integers when D is square.\n\nBy finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:\n\n<div style='margin-left: 2em;'>\n  3<sup>2</sup> – 2×2<sup>2</sup> = 1<br>\n  2<sup>2</sup> – 3×1<sup>2</sup> = 1<br>\n  <strong><span style='color: red;'>9</span></strong><sup>2</sup> – 5×4<sup>2</sup> = 1<br>\n  5<sup>2</sup> – 6×2<sup>2</sup> = 1<br>\n  8<sup>2</sup> – 7×3<sup>2</sup> = 1<br>\n</div>\n\nHence, by considering minimal solutions in `x` for D ≤ 7, the largest `x` is obtained when D=5.\n\nFind the value of D ≤ `n` in minimal solutions of `x` for which the largest value of `x` is obtained.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function diophantineEquation(n) {\n\n  return true;\n}\n\ndiophantineEquation(7);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function diophantineEquation(n) {\n  // Based on https://www.mathblog.dk/project-euler-66-diophantine-equation/\n  function isSolution(D, numerator, denominator) {\n    return numerator * numerator - BigInt(D) * denominator * denominator === 1n;\n  }\n\n  let result = 0;\n  let biggestX = 0;\n\n  for (let D = 2; D <= n; D++) {\n    let boundary = Math.floor(Math.sqrt(D));\n    if (boundary ** 2 === D) {\n      continue;\n    }\n\n    let m = 0n;\n    let d = 1n;\n    let a = BigInt(boundary);\n\n    let [numerator, prevNumerator] = [a, 1n];\n\n    let [denominator, prevDenominator] = [1n, 0n];\n\n    while (!isSolution(D, numerator, denominator)) {\n      m = d * a - m;\n      d = (BigInt(D) - m * m) / d;\n      a = (BigInt(boundary) + m) / d;\n\n      [numerator, prevNumerator] = [a * numerator + prevNumerator, numerator];\n      [denominator, prevDenominator] = [\n        a * denominator + prevDenominator,\n        denominator\n      ];\n    }\n\n    if (numerator > biggestX) {\n      biggestX = numerator;\n      result = D;\n    }\n  }\n  return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "`diophantineEquation(7)` should return a number.",
          "testCode": "assert(typeof diophantineEquation(7) === 'number');"
        },
        {
          "text": "`diophantineEquation(7)` should return `5`.",
          "testCode": "assert.strictEqual(diophantineEquation(7), 5);"
        },
        {
          "text": "`diophantineEquation(100)` should return `61`.",
          "testCode": "assert.strictEqual(diophantineEquation(100), 61);"
        },
        {
          "text": "`diophantineEquation(409)` should return `409`.",
          "testCode": "assert.strictEqual(diophantineEquation(409), 409);"
        },
        {
          "text": "`diophantineEquation(500)` should return `421`.",
          "testCode": "assert.strictEqual(diophantineEquation(500), 421);"
        },
        {
          "text": "`diophantineEquation(1000)` should return `661`.",
          "testCode": "assert.strictEqual(diophantineEquation(1000), 661);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302178,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-66-diophantine-equation.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b01000cf542c50fec2",
      "title": "Problem 67: Maximum path sum II",
      "challengeType": 1,
      "dashedName": "problem-67-maximum-path-sum-ii",
      "description": "By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.\n\n<div style='text-align: center;'>\n  <strong style='color: red;'>3</strong><br>\n  <strong style='color: red;'>7</strong> 4<br>\n  2 <strong style='color: red;'>4</strong> 6<br>\n  8 5 <strong style='color: red;'>9</strong> 3\n</div>\n\nThat is, 3 + 7 + 4 + 9 = 23.\n\nFind the maximum total from top to bottom in `numTriangle`, a 2D array defined in the background containing a triangle with one-hundred rows.\n\n**Note:** This is a much more difficult version of Problem 18. It is not possible to try every route to solve this problem, as there are 2<sup>99</sup> altogether! If you could check one trillion (10<sup>12</sup>) routes every second it would take over twenty billion years to check them all. There is an efficient algorithm to solve it. ;o)",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximumPathSumII(triangle) {\n\n  return true;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function maximumPathSumII(triangle) {\n  const newTriangle = [];\n  for (let i = 0; i < triangle.length; i++) {\n    newTriangle.push(triangle[i].slice());\n  }\n\n  for (let i = newTriangle.length - 2; i >= 0; i--) {\n    for (let j = i; j >= 0; j--) {\n      let higherOption = 0;\n      if (newTriangle[i + 1][j + 1] > newTriangle[i + 1][j]) {\n        higherOption = newTriangle[i + 1][j + 1];\n      } else {\n        higherOption = newTriangle[i + 1][j];\n      }\n      newTriangle[i][j] += higherOption;\n    }\n  }\n  return newTriangle[0][0];\n}"
        }
      ],
      "tests": [
        {
          "text": "`maximumPathSumII([[3, 0, 0, 0],[7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]])` should return a number.",
          "testCode": "assert(typeof maximumPathSumII(_testTriangle) === 'number');"
        },
        {
          "text": "`maximumPathSumII([[3, 0, 0, 0],[7, 4, 0, 0],[2, 4, 6, 0],[8, 5, 9, 3]])` should return 23.",
          "testCode": "assert.strictEqual(maximumPathSumII(_testTriangle), 23);"
        },
        {
          "text": "`maximumPathSumII(numTriangle)` should return 7273.",
          "testCode": "assert.strictEqual(maximumPathSumII(_numTriangle), 7273);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302179,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-67-maximum-path-sum-ii.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "const _testTriangle = [[3, 0, 0, 0],\n                      [7, 4, 0, 0],\n                      [2, 4, 6, 0],\n                      [8, 5, 9, 3]];\nconst _numTriangle = [[59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,40,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[26,53,6,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[10,51,87,86,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,95,66,57,25,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,81,80,38,92,67,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[30,28,51,76,81,18,75,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[84,14,95,87,62,81,17,78,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[21,46,71,58,2,79,62,39,31,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,34,35,53,78,31,81,18,90,93,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,53,4,21,84,93,32,13,97,11,37,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[45,3,81,79,5,18,78,86,13,30,63,99,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[39,87,96,28,3,38,42,17,82,87,58,7,22,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,17,51,17,7,93,9,7,75,97,95,78,87,8,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,66,59,60,88,99,94,65,55,77,55,34,27,53,78,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,40,41,4,87,16,9,42,75,69,23,97,30,60,10,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[12,10,44,26,21,36,32,84,98,60,13,12,36,16,63,31,91,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[70,39,6,5,55,27,38,48,28,22,34,35,62,62,15,14,94,89,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,56,68,84,96,21,34,34,34,81,62,40,65,54,62,5,98,3,2,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[38,89,46,37,99,54,34,53,36,14,70,26,2,90,45,13,31,61,83,73,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[36,10,63,96,60,49,41,5,37,42,14,58,84,93,96,17,9,43,5,43,6,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,57,87,57,61,28,37,51,84,73,79,15,39,95,88,87,43,39,11,86,77,74,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,5,79,30,49,99,73,46,37,50,2,45,9,54,52,27,95,27,65,19,45,26,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,39,17,78,76,29,52,90,18,99,78,19,35,62,71,19,23,65,93,85,49,33,75,9,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[33,24,47,61,60,55,32,88,57,55,91,54,46,57,7,77,98,52,80,99,24,25,46,78,79,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,9,13,55,10,67,26,78,76,82,63,49,51,31,24,68,5,57,7,54,69,21,67,43,17,63,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[24,59,6,8,98,74,66,26,61,60,13,3,9,9,24,30,71,8,88,70,72,70,29,90,11,82,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[66,82,67,4,36,60,92,77,91,85,62,49,59,61,30,90,29,94,26,41,89,4,53,22,83,41,9,74,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[48,28,26,37,28,52,77,26,51,32,18,98,79,36,62,13,17,8,19,54,89,29,73,68,42,14,8,16,70,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,60,69,70,72,71,9,59,13,60,38,13,57,36,9,30,43,89,30,39,15,2,44,73,5,73,26,63,56,86,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[55,55,85,50,62,99,84,77,28,85,3,21,27,22,19,26,82,69,54,4,13,7,85,14,1,15,70,59,89,95,10,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,9,31,92,91,38,92,86,98,75,21,5,64,42,62,84,36,20,73,42,21,23,22,51,51,79,25,45,85,53,3,43,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[75,63,2,49,14,12,89,14,60,78,92,16,44,82,38,30,72,11,46,52,90,27,8,65,78,3,85,41,57,79,39,52,33,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[78,27,56,56,39,13,19,43,86,72,58,95,39,7,4,34,21,98,39,15,39,84,89,69,84,46,37,57,59,35,59,50,26,15,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[42,89,36,27,78,91,24,11,17,41,5,94,7,69,51,96,3,96,47,90,90,45,91,20,50,56,10,32,36,49,4,53,85,92,25,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,9,61,30,61,97,66,21,96,92,98,90,6,34,96,60,32,69,68,33,75,84,18,31,71,50,84,63,3,3,19,11,28,42,75,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[61,31,61,68,96,34,49,39,5,71,76,59,62,67,6,47,96,99,34,21,32,47,52,7,71,60,42,72,94,56,82,83,84,40,94,87,82,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,20,60,14,17,38,26,78,66,81,45,95,18,51,98,81,48,16,53,88,37,52,69,95,72,93,22,34,98,20,54,27,73,61,56,63,60,34,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[93,42,94,83,47,61,27,51,79,79,45,1,44,73,31,70,83,42,88,25,53,51,30,15,65,94,80,44,61,84,12,77,2,62,2,65,94,42,14,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,73,9,67,68,29,74,98,10,19,85,48,38,31,85,67,53,93,93,77,47,67,39,72,94,53,18,43,77,40,78,32,29,59,24,6,2,83,50,60,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,1,44,30,16,51,15,81,98,15,10,62,86,79,50,62,45,60,70,38,31,85,65,61,64,6,69,84,14,22,56,43,9,48,66,69,83,91,60,40,36,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,48,22,99,15,95,64,43,1,16,94,2,99,19,17,69,11,58,97,56,89,31,77,45,67,96,12,73,8,20,36,47,81,44,50,64,68,85,40,81,85,52,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,35,92,45,32,84,62,15,19,64,21,66,6,1,52,80,62,59,12,25,88,28,91,50,40,16,22,99,92,79,87,51,21,77,74,77,7,42,38,42,74,83,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[46,19,77,66,24,18,5,32,2,84,31,99,92,58,96,72,91,36,62,99,55,29,53,42,12,37,26,58,89,50,66,19,82,75,12,48,24,87,91,85,2,7,3,76,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[99,98,84,93,7,17,33,61,92,20,66,60,24,66,40,30,67,5,37,29,24,96,3,27,70,62,13,4,45,47,59,88,43,20,66,15,46,92,30,4,71,66,78,70,53,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[67,60,38,6,88,4,17,72,10,99,71,7,42,25,54,5,26,64,91,50,45,71,6,30,67,48,69,82,8,56,80,67,18,46,66,63,1,20,8,80,47,7,91,16,3,79,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,54,78,49,80,48,77,40,68,23,60,88,58,80,33,57,11,69,55,53,64,2,94,49,60,92,16,35,81,21,82,96,25,24,96,18,2,5,49,3,50,77,6,32,84,27,18,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[68,1,50,4,3,21,42,94,53,24,89,5,92,26,52,36,68,11,85,1,4,42,2,45,15,6,50,4,53,73,25,74,81,88,98,21,67,84,79,97,99,20,95,4,40,46,2,58,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[94,10,2,78,88,52,21,3,88,60,6,53,49,71,20,91,12,65,7,49,21,22,11,41,58,99,36,16,9,48,17,24,52,36,23,15,72,16,84,56,2,99,43,76,81,71,29,39,49,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[64,39,59,84,86,16,17,66,3,9,43,6,64,18,63,29,68,6,23,7,87,14,26,35,17,12,98,41,53,64,78,18,98,27,28,84,80,67,75,62,10,11,76,90,54,10,5,54,41,39,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[43,83,18,37,32,31,52,29,95,47,8,76,35,11,4,53,35,43,34,10,52,57,12,36,20,39,40,55,78,44,7,31,38,26,8,15,56,88,86,1,52,62,10,24,32,5,60,65,53,28,57,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,50,3,52,7,73,49,92,66,80,1,46,8,67,25,36,73,93,7,42,25,53,13,96,76,83,87,90,54,89,78,22,78,91,73,51,69,9,79,94,83,53,9,40,69,62,10,79,49,47,3,81,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71,54,73,33,51,76,59,54,79,37,56,45,84,17,62,21,98,69,41,95,65,24,39,37,62,3,24,48,54,64,46,82,71,78,33,67,9,16,96,68,52,74,79,68,32,21,13,78,96,60,9,69,20,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[73,26,21,44,46,38,17,83,65,98,7,23,52,46,61,97,33,13,60,31,70,15,36,77,31,58,56,93,75,68,21,36,69,53,90,75,25,82,39,50,65,94,29,30,11,33,11,13,96,2,56,47,7,49,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[76,46,73,30,10,20,60,70,14,56,34,26,37,39,48,24,55,76,84,91,39,86,95,61,50,14,53,93,64,67,37,31,10,84,42,70,48,20,10,72,60,61,84,79,69,65,99,73,89,25,85,48,92,56,97,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,14,80,27,22,30,44,27,67,75,79,32,51,54,81,29,65,14,19,4,13,82,4,91,43,40,12,52,29,99,7,76,60,25,1,7,61,71,37,92,40,47,99,66,57,1,43,44,22,40,53,53,9,69,26,81,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[49,80,56,90,93,87,47,13,75,28,87,23,72,79,32,18,27,20,28,10,37,59,21,18,70,4,79,96,3,31,45,71,81,6,14,18,17,5,31,50,92,79,23,47,9,39,47,91,43,54,69,47,42,95,62,46,32,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,18,62,85,87,28,64,5,77,51,47,26,30,65,5,70,65,75,59,80,42,52,25,20,44,10,92,17,71,95,52,14,77,13,24,55,11,65,26,91,1,30,63,15,49,48,41,17,67,47,3,68,20,90,98,32,4,40,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,51,58,60,6,55,23,68,5,19,76,94,82,36,96,43,38,90,87,28,33,83,5,17,70,83,96,93,6,4,78,47,80,6,23,84,75,23,87,72,99,14,50,98,92,38,90,64,61,58,76,94,36,66,87,80,51,35,61,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[57,95,64,6,53,36,82,51,40,33,47,14,7,98,78,65,39,58,53,6,50,53,4,69,40,68,36,69,75,78,75,60,3,32,39,24,74,47,26,90,13,40,44,71,90,76,51,24,36,50,25,45,70,80,61,80,61,43,90,64,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,29,86,56,68,42,79,10,42,44,30,12,96,18,23,18,52,59,2,99,67,46,60,86,43,38,55,17,44,93,42,21,55,14,47,34,55,16,49,24,23,29,96,51,55,10,46,53,27,92,27,46,63,57,30,65,43,27,21,20,24,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[81,72,93,19,69,52,48,1,13,83,92,69,20,48,69,59,20,62,5,42,28,89,90,99,32,72,84,17,8,87,36,3,60,31,36,36,81,26,97,36,48,54,56,56,27,16,91,8,23,11,87,99,33,47,2,14,44,73,70,99,43,35,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[90,56,61,86,56,12,70,59,63,32,1,15,81,47,71,76,95,32,65,80,54,70,34,51,40,45,33,4,64,55,78,68,88,47,31,47,68,87,3,84,23,44,89,72,35,8,31,76,63,26,90,85,96,67,65,91,19,14,17,86,4,71,32,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,13,4,22,64,37,37,28,56,62,86,33,7,37,10,44,52,82,52,6,19,52,57,75,90,26,91,24,6,21,14,67,76,30,46,14,35,89,89,41,3,64,56,97,87,63,22,34,3,79,17,45,11,53,25,56,96,61,23,18,63,31,37,37,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[77,23,26,70,72,76,77,4,28,64,71,69,14,85,96,54,95,48,6,62,99,83,86,77,97,75,71,66,30,19,57,90,33,1,60,61,14,12,90,99,32,77,56,41,18,14,87,49,10,14,90,64,18,50,21,74,14,16,88,5,45,73,82,47,74,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[22,97,41,13,34,31,54,61,56,94,3,24,59,27,98,77,4,9,37,40,12,26,87,9,71,70,7,18,64,57,80,21,12,71,83,94,60,39,73,79,73,19,97,32,64,29,41,7,48,84,85,67,12,74,95,20,24,52,41,67,56,61,29,93,35,72,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[72,23,63,66,1,11,7,30,52,56,95,16,65,26,83,90,50,74,60,18,16,48,43,77,37,11,99,98,30,94,91,26,62,73,45,12,87,73,47,27,1,88,66,99,21,41,95,80,2,53,23,32,61,48,32,43,43,83,14,66,95,91,19,81,80,67,25,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,62,32,18,92,14,83,71,37,96,11,83,39,99,5,16,23,27,10,67,2,25,44,11,55,31,46,64,41,56,44,74,26,81,51,31,45,85,87,9,81,95,22,28,76,69,46,48,64,87,67,76,27,89,31,11,74,16,62,3,60,94,42,47,9,34,94,93,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[56,18,90,18,42,17,42,32,14,86,6,53,33,95,99,35,29,15,44,20,49,59,25,54,34,59,84,21,23,54,35,90,78,16,93,13,37,88,54,19,86,67,68,55,66,84,65,42,98,37,87,56,33,28,58,38,28,38,66,27,52,21,81,15,8,22,97,32,85,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91,53,40,28,13,34,91,25,1,63,50,37,22,49,71,58,32,28,30,18,68,94,23,83,63,62,94,76,80,41,90,22,82,52,29,12,18,56,10,8,35,14,37,57,23,65,67,40,72,39,93,39,70,89,40,34,7,46,94,22,20,5,53,64,56,30,5,56,61,88,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[23,95,11,12,37,69,68,24,66,10,87,70,43,50,75,7,62,41,83,58,95,93,89,79,45,39,2,22,5,22,95,43,62,11,68,29,17,40,26,44,25,71,87,16,70,85,19,25,59,94,90,41,41,80,61,70,55,60,84,33,95,76,42,63,15,9,3,40,38,12,3,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[9,84,56,80,61,55,85,97,16,94,82,94,98,57,84,30,84,48,93,90,71,5,95,90,73,17,30,98,40,64,65,89,7,79,9,19,56,36,42,30,23,69,73,72,7,5,27,61,24,31,43,48,71,84,21,28,26,65,65,59,65,74,77,20,10,81,61,84,95,8,52,23,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[47,81,28,9,98,51,67,64,35,51,59,36,92,82,77,65,80,24,72,53,22,7,27,10,21,28,30,22,48,82,80,48,56,20,14,43,18,25,50,95,90,31,77,8,9,48,44,80,90,22,93,45,82,17,13,96,25,26,8,73,34,99,6,49,24,6,83,51,40,14,15,10,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,25,10,81,30,64,24,74,75,80,36,75,82,60,22,69,72,91,45,67,3,62,79,54,89,74,44,83,64,96,66,73,44,30,74,50,37,5,9,97,70,1,60,46,37,91,39,75,75,18,58,52,72,78,51,81,86,52,8,97,1,46,43,66,98,62,81,18,70,93,73,8,32,46,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[96,80,82,7,59,71,92,53,19,20,88,66,3,26,26,10,24,27,50,82,94,73,63,8,51,33,22,45,19,13,58,33,90,15,22,50,36,13,55,6,35,47,82,52,33,61,36,27,28,46,98,14,73,20,73,32,16,26,80,53,47,66,76,38,94,45,2,1,22,52,47,96,64,58,52,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[88,46,23,39,74,63,81,64,20,90,33,33,76,55,58,26,10,46,42,26,74,74,12,83,32,43,9,2,73,55,86,54,85,34,28,23,29,79,91,62,47,41,82,87,99,22,48,90,20,5,96,75,95,4,43,28,81,39,81,1,28,42,78,25,39,77,90,57,58,98,17,36,73,22,63,74,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[29,39,74,94,95,78,64,24,38,86,63,87,93,6,70,92,22,16,80,64,29,52,20,27,23,50,14,13,87,15,72,96,81,22,8,49,72,30,70,24,79,31,16,64,59,21,89,34,96,91,48,76,43,53,88,1,57,80,23,81,90,79,58,1,80,87,17,99,86,90,72,63,32,69,14,28,88,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[37,17,71,95,56,93,71,35,43,45,4,98,92,94,84,96,11,30,31,27,31,60,92,3,48,5,98,91,86,94,35,90,90,8,48,19,33,28,68,37,59,26,65,96,50,68,22,7,9,49,34,31,77,49,43,6,75,17,81,87,61,79,52,26,27,72,29,50,7,98,86,1,17,10,46,64,24,18,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[51,30,25,94,88,85,79,91,40,33,63,84,49,67,98,92,15,26,75,19,82,5,18,78,65,93,61,48,91,43,59,41,70,51,22,15,92,81,67,91,46,98,11,11,65,31,66,10,98,65,83,21,5,56,5,98,73,67,46,74,69,34,8,30,5,52,7,98,32,95,30,94,65,50,24,63,28,81,99,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[19,23,61,36,9,89,71,98,65,17,30,29,89,26,79,74,94,11,44,48,97,54,81,55,39,66,69,45,28,47,13,86,15,76,74,70,84,32,36,33,79,20,78,14,41,47,89,28,81,5,99,66,81,86,38,26,6,25,13,60,54,55,23,53,27,5,89,25,23,11,13,54,59,54,56,34,16,24,53,44,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[13,40,57,72,21,15,60,8,4,19,11,98,34,45,9,97,86,71,3,15,56,19,15,44,97,31,90,4,87,87,76,8,12,30,24,62,84,28,12,85,82,53,99,52,13,94,6,65,97,86,9,50,94,68,69,74,30,67,87,94,63,7,78,27,80,36,69,41,6,92,32,78,37,82,30,5,18,87,99,72,19,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[44,20,55,77,69,91,27,31,28,81,80,27,2,7,97,23,95,98,12,25,75,29,47,71,7,47,78,39,41,59,27,76,13,15,66,61,68,35,69,86,16,53,67,63,99,85,41,56,8,28,33,40,94,76,90,85,31,70,24,65,84,65,99,82,19,25,54,37,21,46,33,2,52,99,51,33,26,4,87,2,8,18,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,42,61,45,91,6,64,79,80,82,32,16,83,63,42,49,19,78,65,97,40,42,14,61,49,34,4,18,25,98,59,30,82,72,26,88,54,36,21,75,3,88,99,53,46,51,55,78,22,94,34,40,68,87,84,25,30,76,25,8,92,84,42,61,40,38,9,99,40,23,29,39,46,55,10,90,35,84,56,70,63,23,91,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[52,92,3,71,89,7,9,37,68,66,58,20,44,92,51,56,13,71,79,99,26,37,2,6,16,67,36,52,58,16,79,73,56,60,59,27,44,77,94,82,20,50,98,33,9,87,94,37,40,83,64,83,58,85,17,76,53,2,83,52,22,27,39,20,48,92,45,21,9,42,24,23,12,37,52,28,50,78,79,20,86,62,73,20,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[54,96,80,15,91,90,99,70,10,9,58,90,93,50,81,99,54,38,36,10,30,11,35,84,16,45,82,18,11,97,36,43,96,79,97,65,40,48,23,19,17,31,64,52,65,65,37,32,65,76,99,79,34,65,79,27,55,33,3,1,33,27,61,28,66,8,4,70,49,46,48,83,1,45,19,96,13,81,14,21,31,79,93,85,50,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[92,92,48,84,59,98,31,53,23,27,15,22,79,95,24,76,5,79,16,93,97,89,38,89,42,83,2,88,94,95,82,21,1,97,48,39,31,78,9,65,50,56,97,61,1,7,65,27,21,23,14,15,80,97,44,78,49,35,33,45,81,74,34,5,31,57,9,38,94,7,69,54,69,32,65,68,46,68,78,90,24,28,49,51,45,86,35,0,0,0,0,0,0,0,0,0,0,0,0,0],[41,63,89,76,87,31,86,9,46,14,87,82,22,29,47,16,13,10,70,72,82,95,48,64,58,43,13,75,42,69,21,12,67,13,64,85,58,23,98,9,37,76,5,22,31,12,66,50,29,99,86,72,45,25,10,28,19,6,90,43,29,31,67,79,46,25,74,14,97,35,76,37,65,46,23,82,6,22,30,76,93,66,94,17,96,13,20,72,0,0,0,0,0,0,0,0,0,0,0,0],[63,40,78,8,52,9,90,41,70,28,36,14,46,44,85,96,24,52,58,15,87,37,5,98,99,39,13,61,76,38,44,99,83,74,90,22,53,80,56,98,30,51,63,39,44,30,91,91,4,22,27,73,17,35,53,18,35,45,54,56,27,78,48,13,69,36,44,38,71,25,30,56,15,22,73,43,32,69,59,25,93,83,45,11,34,94,44,39,92,0,0,0,0,0,0,0,0,0,0,0],[12,36,56,88,13,96,16,12,55,54,11,47,19,78,17,17,68,81,77,51,42,55,99,85,66,27,81,79,93,42,65,61,69,74,14,1,18,56,12,1,58,37,91,22,42,66,83,25,19,4,96,41,25,45,18,69,96,88,36,93,10,12,98,32,44,83,83,4,72,91,4,27,73,7,34,37,71,60,59,31,1,54,54,44,96,93,83,36,4,45,0,0,0,0,0,0,0,0,0,0],[30,18,22,20,42,96,65,79,17,41,55,69,94,81,29,80,91,31,85,25,47,26,43,49,2,99,34,67,99,76,16,14,15,93,8,32,99,44,61,77,67,50,43,55,87,55,53,72,17,46,62,25,50,99,73,5,93,48,17,31,70,80,59,9,44,59,45,13,74,66,58,94,87,73,16,14,85,38,74,99,64,23,79,28,71,42,20,37,82,31,23,0,0,0,0,0,0,0,0,0],[51,96,39,65,46,71,56,13,29,68,53,86,45,33,51,49,12,91,21,21,76,85,2,17,98,15,46,12,60,21,88,30,92,83,44,59,42,50,27,88,46,86,94,73,45,54,23,24,14,10,94,21,20,34,23,51,4,83,99,75,90,63,60,16,22,33,83,70,11,32,10,50,29,30,83,46,11,5,31,17,86,42,49,1,44,63,28,60,7,78,95,40,0,0,0,0,0,0,0,0],[44,61,89,59,4,49,51,27,69,71,46,76,44,4,9,34,56,39,15,6,94,91,75,90,65,27,56,23,74,6,23,33,36,69,14,39,5,34,35,57,33,22,76,46,56,10,61,65,98,9,16,69,4,62,65,18,99,76,49,18,72,66,73,83,82,40,76,31,89,91,27,88,17,35,41,35,32,51,32,67,52,68,74,85,80,57,7,11,62,66,47,22,67,0,0,0,0,0,0,0],[65,37,19,97,26,17,16,24,24,17,50,37,64,82,24,36,32,11,68,34,69,31,32,89,79,93,96,68,49,90,14,23,4,4,67,99,81,74,70,74,36,96,68,9,64,39,88,35,54,89,96,58,66,27,88,97,32,14,6,35,78,20,71,6,85,66,57,2,58,91,72,5,29,56,73,48,86,52,9,93,22,57,79,42,12,1,31,68,17,59,63,76,7,77,0,0,0,0,0,0],[73,81,14,13,17,20,11,9,1,83,8,85,91,70,84,63,62,77,37,7,47,1,59,95,39,69,39,21,99,9,87,2,97,16,92,36,74,71,90,66,33,73,73,75,52,91,11,12,26,53,5,26,26,48,61,50,90,65,1,87,42,47,74,35,22,73,24,26,56,70,52,5,48,41,31,18,83,27,21,39,80,85,26,8,44,2,71,7,63,22,5,52,19,8,20,0,0,0,0,0],[17,25,21,11,72,93,33,49,64,23,53,82,3,13,91,65,85,2,40,5,42,31,77,42,5,36,6,54,4,58,7,76,87,83,25,57,66,12,74,33,85,37,74,32,20,69,3,97,91,68,82,44,19,14,89,28,85,85,80,53,34,87,58,98,88,78,48,65,98,40,11,57,10,67,70,81,60,79,74,72,97,59,79,47,30,20,54,80,89,91,14,5,33,36,79,39,0,0,0,0],[60,85,59,39,60,7,57,76,77,92,6,35,15,72,23,41,45,52,95,18,64,79,86,53,56,31,69,11,91,31,84,50,44,82,22,81,41,40,30,42,30,91,48,94,74,76,64,58,74,25,96,57,14,19,3,99,28,83,15,75,99,1,89,85,79,50,3,95,32,67,44,8,7,41,62,64,29,20,14,76,26,55,48,71,69,66,19,72,44,25,14,1,48,74,12,98,7,0,0,0],[64,66,84,24,18,16,27,48,20,14,47,69,30,86,48,40,23,16,61,21,51,50,26,47,35,33,91,28,78,64,43,68,4,79,51,8,19,60,52,95,6,68,46,86,35,97,27,58,4,65,30,58,99,12,12,75,91,39,50,31,42,64,70,4,46,7,98,73,98,93,37,89,77,91,64,71,64,65,66,21,78,62,81,74,42,20,83,70,73,95,78,45,92,27,34,53,71,15,0,0],[30,11,85,31,34,71,13,48,5,14,44,3,19,67,23,73,19,57,6,90,94,72,57,69,81,62,59,68,88,57,55,69,49,13,7,87,97,80,89,5,71,5,5,26,38,40,16,62,45,99,18,38,98,24,21,26,62,74,69,4,85,57,77,35,58,67,91,79,79,57,86,28,66,34,72,51,76,78,36,95,63,90,8,78,47,63,45,31,22,70,52,48,79,94,15,77,61,67,68,0],[23,33,44,81,80,92,93,75,94,88,23,61,39,76,22,3,28,94,32,6,49,65,41,34,18,23,8,47,62,60,3,63,33,13,80,52,31,54,73,43,70,26,16,69,57,87,83,31,3,93,70,81,47,95,77,44,29,68,39,51,56,59,63,7,25,70,7,77,43,53,64,3,94,42,95,39,18,1,66,21,16,97,20,50,90,16,70,10,95,69,29,6,25,61,41,26,15,59,63,35]];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b01000cf542c50fec3",
      "title": "Problem 68: Magic 5-gon ring",
      "challengeType": 1,
      "dashedName": "problem-68-magic-5-gon-ring",
      "description": "Consider the following \"magic\" 3-gon ring, filled with the numbers 1 to 6, and each line adding to nine.\n\n<img alt=\"a completed example of a 3-gon ring\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/3-gon-ring.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWorking **clockwise**, and starting from the group of three with the numerically lowest external node (4,3,2 in this example), each solution can be described uniquely. For example, the above solution can be described by the set: 4,3,2; 6,2,1; 5,1,3.\n\nIt is possible to complete the ring with four different totals: 9, 10, 11, and 12. There are eight solutions in total.\n\n<div style='text-align: center;'>\n\n| <div style='width: 100px;'>Total</div> | <div style='width: 250px;'>Solution Set</div> |\n| -------------------------------------- | --------------------------------------------- |\n| 9                                      | 4,2,3; 5,3,1; 6,1,2                           |\n| 9                                      | 4,3,2; 6,2,1; 5,1,3                           |\n| 10                                     | 2,3,5; 4,5,1; 6,1,3                           |\n| 10                                     | 2,5,3; 6,3,1; 4,1,5                           |\n| 11                                     | 1,4,6; 3,6,2; 5,2,4                           |\n| 11                                     | 1,6,4; 5,4,2; 3,2,6                           |\n| 12                                     | 1,5,6; 2,6,4; 3,4,5                           |\n| 12                                     | 1,6,5; 3,5,4; 2,4,6                           |\n\n</div>\n\nBy concatenating each group it is possible to form 9-digit strings; the maximum string for a 3-gon ring is 432621513.\n\nUsing the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings. What is the maximum **16-digit** string for a \"magic\" 5-gon ring?\n\n<img alt=\"a blank diagram of a 5-gon ring\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/5-gon-ring.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function magic5GonRing() {\n\n  return true;\n}\n\nmagic5GonRing();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`magic5GonRing()` should return a number.",
          "testCode": "assert(typeof magic5GonRing() === 'number');"
        },
        {
          "text": "`magic5GonRing()` should return 6531031914842725.",
          "testCode": "assert.strictEqual(magic5GonRing(), 6531031914842725);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302180,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-68-magic-5-gon-ring.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b11000cf542c50fec4",
      "title": "Problem 69: Totient maximum",
      "challengeType": 1,
      "dashedName": "problem-69-totient-maximum",
      "description": "Euler's Totient function, ${\\phi}(n)$ (sometimes called the phi function), is used to determine the number of numbers less than `n` which are relatively prime to `n`. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, ${\\phi}(9) = 6$.\n\n<div style='margin-left: 4em;'>\n\n| $n$ | $\\text{Relatively Prime}$ | $\\displaystyle{\\phi}(n)$ | $\\displaystyle\\frac{n}{{\\phi}(n)}$ |\n| --- | ------------------------- | ------------------------ | ---------------------------------- |\n| 2   | 1                         | 1                        | 2                                  |\n| 3   | 1,2                       | 2                        | 1.5                                |\n| 4   | 1,3                       | 2                        | 2                                  |\n| 5   | 1,2,3,4                   | 4                        | 1.25                               |\n| 6   | 1,5                       | 2                        | 3                                  |\n| 7   | 1,2,3,4,5,6               | 6                        | 1.1666...                          |\n| 8   | 1,3,5,7                   | 4                        | 2                                  |\n| 9   | 1,2,4,5,7,8               | 6                        | 1.5                                |\n| 10  | 1,3,7,9                   | 4                        | 2.5                                |\n\n</div>\n\nIt can be seen that `n` = 6 produces a maximum $\\displaystyle\\frac{n}{{\\phi}(n)}$ for `n` ≤ 10.\n\nFind the value of `n` ≤ `limit` for which $\\displaystyle\\frac{n}{{\\phi(n)}}$ is a maximum.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function totientMaximum(limit) {\n\n  return true;\n}\n\ntotientMaximum(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function totientMaximum(limit) {\n  function getSievePrimes(max) {\n    const primesMap = new Array(max).fill(true);\n    primesMap[0] = false;\n    primesMap[1] = false;\n    const primes = [];\n    for (let i = 2; i < max; i = i + 2) {\n      if (primesMap[i]) {\n        primes.push(i);\n        for (let j = i * i; j < max; j = j + i) {\n          primesMap[j] = false;\n        }\n      }\n      if (i === 2) {\n        i = 1;\n      }\n    }\n    return primes;\n  }\n\n  const MAX_PRIME = 50;\n  const primes = getSievePrimes(MAX_PRIME);\n  let result = 1;\n\n  for (let i = 0; result * primes[i] < limit; i++) {\n    result *= primes[i];\n  }\n  return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "`totientMaximum(10)` should return a number.",
          "testCode": "assert(typeof totientMaximum(10) === 'number');"
        },
        {
          "text": "`totientMaximum(10)` should return `6`.",
          "testCode": "assert.strictEqual(totientMaximum(10), 6);"
        },
        {
          "text": "`totientMaximum(10000)` should return `2310`.",
          "testCode": "assert.strictEqual(totientMaximum(10000), 2310);"
        },
        {
          "text": "`totientMaximum(500000)` should return `30030`.",
          "testCode": "assert.strictEqual(totientMaximum(500000), 30030);"
        },
        {
          "text": "`totientMaximum(1000000)` should return `510510`.",
          "testCode": "assert.strictEqual(totientMaximum(1000000), 510510);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302181,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-69-totient-maximum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3731000cf542c50fe86",
      "title": "Problem 7: 10001st prime",
      "challengeType": 1,
      "dashedName": "problem-7-10001st-prime",
      "description": "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the `n`th prime number?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nthPrime(n) {\n\n  return true;\n}\n\nnthPrime(10001);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const nthPrime = n => {\n  let pN = 2;\n  let step = 0;\n  while (step < n) {\n    let isPrime = true;\n    let rootN = Math.sqrt(pN);\n    for (let i = 2; i <= rootN; i++) {\n      if (!(pN % i)) {\n        isPrime = false;\n        break;\n      }\n    }\n    isPrime ? step++ : '';\n    pN++;\n  }\n  return pN - 1;\n}"
        }
      ],
      "tests": [
        {
          "text": "`nthPrime(6)` should return a number.",
          "testCode": "assert.isNumber(nthPrime(6));"
        },
        {
          "text": "`nthPrime(6)` should return 13.",
          "testCode": "assert.strictEqual(nthPrime(6), 13);"
        },
        {
          "text": "`nthPrime(10)` should return 29.",
          "testCode": "assert.strictEqual(nthPrime(10), 29);"
        },
        {
          "text": "`nthPrime(100)` should return 541.",
          "testCode": "assert.strictEqual(nthPrime(100), 541);"
        },
        {
          "text": "`nthPrime(1000)` should return 7919.",
          "testCode": "assert.strictEqual(nthPrime(1000), 7919);"
        },
        {
          "text": "`nthPrime(10001)` should return 104743.",
          "testCode": "assert.strictEqual(nthPrime(10001), 104743);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302182,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-7-10001st-prime.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b21000cf542c50fec5",
      "title": "Problem 70: Totient permutation",
      "challengeType": 1,
      "dashedName": "problem-70-totient-permutation",
      "description": "Euler's Totient function, ${\\phi}(n)$ (sometimes called the phi function), is used to determine the number of positive numbers less than or equal to `n` which are relatively prime to `n`. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, ${\\phi}(9) = 6$. The number 1 is considered to be relatively prime to every positive number, so ${\\phi}(1) = 1$.\n\nInterestingly, ${\\phi}(87109) = 79180$, and it can be seen that 87109 is a permutation of 79180.\n\nFind the value of `n`, 1 &lt; `n` &lt; `limit`, for which ${\\phi}(n)$ is a permutation of `n` and the ratio $\\displaystyle\\frac{n}{{\\phi}(n)}$ produces a minimum.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function totientPermutation(limit) {\n\n  return true;\n}\n\ntotientPermutation(10000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function totientPermutation(limit) {\n  function getSievePrimes(max) {\n    const primes = [];\n    const primesMap = new Array(max).fill(true);\n    primesMap[0] = false;\n    primesMap[1] = false;\n\n    for (let i = 2; i < max; i += 2) {\n      if (primesMap[i]) {\n        primes.push(i);\n        for (let j = i * i; j < max; j += i) {\n          primesMap[j] = false;\n        }\n      }\n      if (i === 2) {\n        i = 1;\n      }\n    }\n    return primes;\n  }\n\n  function sortDigits(number) {\n    return number.toString().split('').sort().join('');\n  }\n\n  function isPermutation(numberA, numberB) {\n    return sortDigits(numberA) === sortDigits(numberB);\n  }\n\n  const MAX_PRIME = 4000;\n  const primes = getSievePrimes(MAX_PRIME);\n\n  let nValue = 1;\n  let minRatio = Infinity;\n\n  for (let i = 1; i < primes.length; i++) {\n    for (let j = i + 1; j < primes.length; j++) {\n      const num = primes[i] * primes[j];\n      if (num > limit) {\n        break;\n      }\n\n      const phi = (primes[i] - 1) * (primes[j] - 1);\n      const ratio = num / phi;\n\n      if (minRatio > ratio && isPermutation(num, phi)) {\n        nValue = num;\n        minRatio = ratio;\n      }\n    }\n  }\n  return nValue;\n}"
        }
      ],
      "tests": [
        {
          "text": "`totientPermutation(10000)` should return a number.",
          "testCode": "assert(typeof totientPermutation(10000) === 'number');"
        },
        {
          "text": "`totientPermutation(10000)` should return `4435`.",
          "testCode": "assert.strictEqual(totientPermutation(10000), 4435);"
        },
        {
          "text": "`totientPermutation(100000)` should return `75841`.",
          "testCode": "assert.strictEqual(totientPermutation(100000), 75841);"
        },
        {
          "text": "`totientPermutation(500000)` should return `474883`.",
          "testCode": "assert.strictEqual(totientPermutation(500000), 474883);"
        },
        {
          "text": "`totientPermutation(10000000)` should return `8319823`.",
          "testCode": "assert.strictEqual(totientPermutation(10000000), 8319823);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302183,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-70-totient-permutation.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b31000cf542c50fec6",
      "title": "Problem 71: Ordered fractions",
      "challengeType": 1,
      "dashedName": "problem-71-ordered-fractions",
      "description": "Consider the fraction, $\\frac{n}{d}$, where `n` and `d` are positive integers. If `n` &lt; `d` and highest common factor, ${{HCF}(n, d)} = 1$, it is called a reduced proper fraction.\n\nIf we list the set of reduced proper fractions for `d` ≤ 8 in ascending order of size, we get:\n\n$$\\frac{1}{8}, \\frac{1}{7}, \\frac{1}{6}, \\frac{1}{5}, \\frac{1}{4}, \\frac{2}{7}, \\frac{1}{3}, \\frac{3}{8}, \\frac{\\textbf2}{\\textbf5}, \\frac{3}{7}, \\frac{1}{2}, \\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$\n\nIt can be seen that $\\frac{2}{5}$ is the fraction immediately to the left of $\\frac{3}{7}$.\n\nBy listing the set of reduced proper fractions for `d` ≤ `limit` in ascending order of size, find the numerator of the fraction immediately to the left of $\\frac{3}{7}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function orderedFractions(limit) {\n\n  return true;\n}\n\norderedFractions(8);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function orderedFractions(limit) {\n  const fractions = [];\n  const fractionValues = {};\n  const highBoundary = 3 / 7;\n  let lowBoundary = 2 / 7;\n\n  for (let denominator = limit; denominator > 2; denominator--) {\n    let numerator = Math.floor((3 * denominator - 1) / 7);\n    let value = numerator / denominator;\n    if (value > highBoundary || value < lowBoundary) {\n      continue;\n    }\n    fractionValues[value] = [numerator, denominator];\n    fractions.push(value);\n    lowBoundary = value;\n  }\n\n  fractions.sort();\n  return fractionValues[fractions[fractions.length - 1]][0];\n}"
        }
      ],
      "tests": [
        {
          "text": "`orderedFractions(8)` should return a number.",
          "testCode": "assert(typeof orderedFractions(8) === 'number');"
        },
        {
          "text": "`orderedFractions(8)` should return `2`.",
          "testCode": "assert.strictEqual(orderedFractions(8), 2);"
        },
        {
          "text": "`orderedFractions(10)` should return `2`.",
          "testCode": "assert.strictEqual(orderedFractions(10), 2);"
        },
        {
          "text": "`orderedFractions(9994)` should return `4283`.",
          "testCode": "assert.strictEqual(orderedFractions(9994), 4283);"
        },
        {
          "text": "`orderedFractions(500000)` should return `214283`.",
          "testCode": "assert.strictEqual(orderedFractions(500000), 214283);"
        },
        {
          "text": "`orderedFractions(1000000)` should return `428570`.",
          "testCode": "assert.strictEqual(orderedFractions(1000000), 428570);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302184,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-71-ordered-fractions.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b41000cf542c50fec7",
      "title": "Problem 72: Counting fractions",
      "challengeType": 1,
      "dashedName": "problem-72-counting-fractions",
      "description": "Consider the fraction, $\\frac{n}{d}$, where `n` and `d` are positive integers. If `n` &lt; `d` and highest common factor, ${HCF}(n, d) = 1$, it is called a reduced proper fraction.\n\nIf we list the set of reduced proper fractions for `d` ≤ 8 in ascending order of size, we get:\n\n$$\\frac{1}{8}, \\frac{1}{7}, \\frac{1}{6}, \\frac{1}{5}, \\frac{1}{4}, \\frac{2}{7}, \\frac{1}{3}, \\frac{3}{8}, \\frac{2}{5}, \\frac{3}{7}, \\frac{1}{2}, \\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$\n\nIt can be seen that there are `21` elements in this set.\n\nHow many elements would be contained in the set of reduced proper fractions for `d` ≤ `limit`?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countingFractions(limit) {\n\n  return true;\n}\n\ncountingFractions(8);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function countingFractions(limit) {\n  const phi = {};\n  let count = 0;\n\n  for (let i = 2; i <= limit; i++) {\n    if (!phi[i]) {\n      phi[i] = i;\n    }\n    if (phi[i] === i) {\n      for (let j = i; j <= limit; j += i) {\n        if (!phi[j]) {\n          phi[j] = j;\n        }\n        phi[j] = (phi[j] / i) * (i - 1);\n      }\n    }\n    count += phi[i];\n  }\n\n  return count;\n}"
        }
      ],
      "tests": [
        {
          "text": "`countingFractions(8)` should return a number.",
          "testCode": "assert(typeof countingFractions(8) === 'number');"
        },
        {
          "text": "`countingFractions(8)` should return `21`.",
          "testCode": "assert.strictEqual(countingFractions(8), 21);"
        },
        {
          "text": "`countingFractions(20000)` should return `121590395`.",
          "testCode": "assert.strictEqual(countingFractions(20000), 121590395);"
        },
        {
          "text": "`countingFractions(500000)` should return `75991039675`.",
          "testCode": "assert.strictEqual(countingFractions(500000), 75991039675);"
        },
        {
          "text": "`countingFractions(1000000)` should return `303963552391`.",
          "testCode": "assert.strictEqual(countingFractions(1000000), 303963552391);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302185,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-72-counting-fractions.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b61000cf542c50fec8",
      "title": "Problem 73: Counting fractions in a range",
      "challengeType": 1,
      "dashedName": "problem-73-counting-fractions-in-a-range",
      "description": "Consider the fraction, $\\frac{n}{d}$, where `n` and `d` are positive integers. If `n` &lt; `d` and highest common factor, ${HCF}(n, d) = 1$, it is called a reduced proper fraction.\n\nIf we list the set of reduced proper fractions for `d` ≤ 8 in ascending order of size, we get:\n\n$$\\frac{1}{8}, \\frac{1}{7}, \\frac{1}{6}, \\frac{1}{5}, \\frac{1}{4}, \\frac{2}{7}, \\frac{1}{3}, \\mathbf{\\frac{3}{8}, \\frac{2}{5}, \\frac{3}{7}}, \\frac{1}{2}, \\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$\n\nIt can be seen that there are `3` fractions between $\\frac{1}{3}$ and $\\frac{1}{2}$.\n\nHow many fractions lie between $\\frac{1}{3}$ and $\\frac{1}{2}$ in the sorted set of reduced proper fractions for `d` ≤ `limit`?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countingFractionsInARange(limit) {\n\n  return true;\n}\n\ncountingFractionsInARange(8);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSquaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\nconst primeSeive = new PrimeSeive(12001);\n\nfunction countingFractionsInARange(num) {\n  const moebius = Array(num + 1).fill(1)\n\n  // Generate Moebis function terms\n  for (let i = 2; i <= num; i++) {\n    if (!primeSeive.isPrime(i)) continue;\n    for (let j = i; j <= num; j += i) moebius[j] *= -1;\n    for (let j = i * i; j <= num; j += i * i) moebius[j] = 0;\n  }\n  // Evaluate totient sum\n  let sum = 0;\n  for (let i = 1; i <= num; i++) {\n    const coeff = Math.floor(num / i - 2);\n    sum += moebius[i] * Math.floor(coeff * coeff / 12 + 0.5);\n  }\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`countingFractionsInARange(8)` should return a number.",
          "testCode": "assert(typeof countingFractionsInARange(8) === 'number');"
        },
        {
          "text": "`countingFractionsInARange(8)` should return `3`.",
          "testCode": "assert.strictEqual(countingFractionsInARange(8), 3);"
        },
        {
          "text": "`countingFractionsInARange(1000)` should return `50695`.",
          "testCode": "assert.strictEqual(countingFractionsInARange(1000), 50695);"
        },
        {
          "text": "`countingFractionsInARange(6000)` should return `1823861`.",
          "testCode": "assert.strictEqual(countingFractionsInARange(6000), 1823861);"
        },
        {
          "text": "`countingFractionsInARange(12000)` should return `7295372`.",
          "testCode": "assert.strictEqual(countingFractionsInARange(12000), 7295372);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302186,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-73-counting-fractions-in-a-range.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b61000cf542c50fec9",
      "title": "Problem 74: Digit factorial chains",
      "challengeType": 1,
      "dashedName": "problem-74-digit-factorial-chains",
      "description": "The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:\n\n$$1! + 4! + 5! = 1 + 24 + 120 = 145$$\n\nPerhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:\n\n$$\\begin{align}\n&169 → 363601 → 1454 → 169\\\\\\\\\n&871 → 45361 → 871\\\\\\\\\n&872 → 45362 → 872\\\\\\\\\n\\end{align}$$\n\nIt is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,\n\n$$\\begin{align}\n&69 → 363600 → 1454 → 169 → 363601\\\\ (→ 1454)\\\\\\\\\n&78 → 45360 → 871 → 45361\\\\ (→ 871)\\\\\\\\\n&540 → 145\\\\ (→ 145)\\\\\\\\\n\\end{align}$$\n\nStarting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.\n\nHow many chains, with a starting number below `n`, contain exactly sixty non-repeating terms?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function digitFactorialChains(n) {\n\n  return true;\n}\n\ndigitFactorialChains(2000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function digitFactorialChains(n) {\n  function sumDigitsFactorials(number) {\n    let sum = 0;\n    while (number > 0) {\n      sum += factorials[number % 10];\n      number = Math.floor(number / 10);\n    }\n    return sum;\n  }\n\n  const factorials = [1];\n  for (let i = 1; i < 10; i++) {\n    factorials.push(factorials[factorials.length - 1] * i);\n  }\n\n  const sequences = {\n    169: 3,\n    871: 2,\n    872: 2,\n    1454: 3,\n    45362: 2,\n    45461: 2,\n    3693601: 3\n  };\n  let result = 0;\n\n  for (let i = 2; i < n; i++) {\n    let curNum = i;\n    let chainLength = 0;\n    const curSequence = [];\n    while (curSequence.indexOf(curNum) === -1) {\n      curSequence.push(curNum);\n      curNum = sumDigitsFactorials(curNum);\n      chainLength++;\n      if (sequences.hasOwnProperty(curNum) > 0) {\n        chainLength += sequences[curNum];\n        break;\n      }\n    }\n    if (chainLength === 60) {\n      result++;\n    }\n    for (let j = 1; j < curSequence.length; j++) {\n      sequences[curSequence[j]] = chainLength - j;\n    }\n  }\n  return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "`digitFactorialChains(2000)` should return a number.",
          "testCode": "assert(typeof digitFactorialChains(2000) === 'number');"
        },
        {
          "text": "`digitFactorialChains(2000)` should return `6`.",
          "testCode": "assert.strictEqual(digitFactorialChains(2000), 6);"
        },
        {
          "text": "`digitFactorialChains(100000)` should return `42`.",
          "testCode": "assert.strictEqual(digitFactorialChains(100000), 42);"
        },
        {
          "text": "`digitFactorialChains(500000)` should return `282`.",
          "testCode": "assert.strictEqual(digitFactorialChains(500000), 282);"
        },
        {
          "text": "`digitFactorialChains(1000000)` should return `402`.",
          "testCode": "assert.strictEqual(digitFactorialChains(1000000), 402);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302187,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-74-digit-factorial-chains.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b71000cf542c50feca",
      "title": "Problem 75: Singular integer right triangles",
      "challengeType": 1,
      "dashedName": "problem-75-singular-integer-right-triangles",
      "description": "It turns out that 12 cm is the smallest length of wire that can be bent to form an integer sided right angle triangle in exactly one way, but there are many more examples.\n\n<div style='margin-left: 4em;'>\n  <strong>12 cm:</strong> (3,4,5)<br>\n  <strong>24 cm:</strong> (6,8,10)<br>\n  <strong>30 cm:</strong> (5,12,13)<br>\n  <strong>36 cm:</strong> (9,12,15)<br>\n  <strong>40 cm:</strong> (8,15,17)<br>\n  <strong>48 cm:</strong> (12,16,20)<br><br>\n</div>\n\nIn contrast, some lengths of wire, like 20 cm, cannot be bent to form an integer sided right angle triangle, and other lengths allow more than one solution to be found; for example, using 120 cm it is possible to form exactly three different integer sided right angle triangles.\n\n<div style='margin-left: 4em;'>\n  <strong>120 cm:</strong> (30,40,50), (20,48,52), (24,45,51)<br><br>\n</div>\n\nGiven that L is the length of the wire, for how many values of L ≤ `n` can exactly one, integer sided right angle, triangle be formed?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function singularIntRightTriangles(n) {\n\n  return true;\n}\n\nsingularIntRightTriangles(48);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function singularIntRightTriangles(limit) {\n  function euclidFormula(m, n) {\n    return [m ** 2 - n ** 2, 2 * m * n, m ** 2 + n ** 2];\n  }\n\n  function gcd(numberA, numberB) {\n    if (numberB === 0) {\n      return numberA;\n    }\n    return gcd(numberB, numberA % numberB);\n  }\n\n  function notBothOdd(numberA, numberB) {\n    return (numberA + numberB) % 2 === 1;\n  }\n\n  function areCoprime(numberA, numberB) {\n    return gcd(numberA, numberB) === 1;\n  }\n\n  const trianglesWithPerimeter = new Array(limit + 1).fill(0);\n  const mLimit = Math.sqrt(limit / 2);\n\n  for (let m = 2; m < mLimit; m++) {\n    for (let n = 1; n < m; n++) {\n      if (notBothOdd(m, n) && areCoprime(m, n)) {\n        const [sideA, sideB, sideC] = euclidFormula(m, n);\n        const perimeter = sideA + sideB + sideC;\n        let curPerimeter = perimeter;\n        while (curPerimeter <= limit) {\n          trianglesWithPerimeter[curPerimeter]++;\n          curPerimeter += perimeter;\n        }\n      }\n    }\n  }\n  return trianglesWithPerimeter.filter(trianglesCount => trianglesCount === 1)\n    .length;\n}"
        }
      ],
      "tests": [
        {
          "text": "`singularIntRightTriangles(48)` should return a number.",
          "testCode": "assert(typeof singularIntRightTriangles(48) === 'number');"
        },
        {
          "text": "`singularIntRightTriangles(48)` should return `6`.",
          "testCode": "assert.strictEqual(singularIntRightTriangles(48), 6);"
        },
        {
          "text": "`singularIntRightTriangles(700000)` should return `75783`.",
          "testCode": "assert.strictEqual(singularIntRightTriangles(700000), 75783);"
        },
        {
          "text": "`singularIntRightTriangles(1000000)` should return `107876`.",
          "testCode": "assert.strictEqual(singularIntRightTriangles(1000000), 107876);"
        },
        {
          "text": "`singularIntRightTriangles(1500000)` should return `161667`.",
          "testCode": "assert.strictEqual(singularIntRightTriangles(1500000), 161667);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302188,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-75-singular-integer-right-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b81000cf542c50fecb",
      "title": "Problem 76: Counting summations",
      "challengeType": 1,
      "dashedName": "problem-76-counting-summations",
      "description": "It is possible to write five as a sum in exactly six different ways:\n\n<div style='margin-left: 4em;'>\n  4 + 1<br>\n  3 + 2<br>\n  3 + 1 + 1<br>\n  2 + 2 + 1<br>\n  2 + 1 + 1 + 1<br>\n  1 + 1 + 1 + 1 + 1<br><br>\n</div>\n\nHow many different ways can `n` be written as a sum of at least two positive integers?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countingSummations(n) {\n\n  return true;\n}\n\ncountingSummations(5);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function countingSummations(n) {\n  const combinations = new Array(n + 1).fill(0);\n  combinations[0] = 1;\n\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n + 1; j++) {\n      combinations[j] += combinations[j - i];\n    }\n  }\n  return combinations[n];\n}"
        }
      ],
      "tests": [
        {
          "text": "`countingSummations(5)` should return a number.",
          "testCode": "assert(typeof countingSummations(5) === 'number');"
        },
        {
          "text": "`countingSummations(5)` should return `6`.",
          "testCode": "assert.strictEqual(countingSummations(5), 6);"
        },
        {
          "text": "`countingSummations(20)` should return `626`.",
          "testCode": "assert.strictEqual(countingSummations(20), 626);"
        },
        {
          "text": "`countingSummations(50)` should return `204225`.",
          "testCode": "assert.strictEqual(countingSummations(50), 204225);"
        },
        {
          "text": "`countingSummations(100)` should return `190569291`.",
          "testCode": "assert.strictEqual(countingSummations(100), 190569291);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302189,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-76-counting-summations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3b91000cf542c50fecc",
      "title": "Problem 77: Prime summations",
      "challengeType": 1,
      "dashedName": "problem-77-prime-summations",
      "description": "It is possible to write ten as the sum of primes in exactly five different ways:\n\n<div style='margin-left: 4em;'>\n  7 + 3<br>\n  5 + 5<br>\n  5 + 3 + 2<br>\n  3 + 3 + 2 + 2<br>\n  2 + 2 + 2 + 2 + 2<br><br>\n</div>\n\nWhat is the first value which can be written as the sum of primes in over `n` ways?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeSummations(n) {\n\n  return true;\n}\n\nprimeSummations(5);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function primeSummations(n) {\n  function getSievePrimes(max) {\n    const primesMap = new Array(max).fill(true);\n    primesMap[0] = false;\n    primesMap[1] = false;\n    const primes = [];\n\n    for (let i = 2; i < max; i += 2) {\n      if (primesMap[i]) {\n        primes.push(i);\n        for (let j = i * i; j < max; j += i) {\n          primesMap[j] = false;\n        }\n      }\n      if (i === 2) {\n        i = 1;\n      }\n    }\n    return primes;\n  }\n\n  const MAX_NUMBER = 100;\n  const primes = getSievePrimes(MAX_NUMBER);\n\n  for (let curNumber = 2; curNumber < MAX_NUMBER; curNumber++) {\n    const combinations = new Array(curNumber + 1).fill(0);\n    combinations[0] = 1;\n    for (let i = 0; i < primes.length; i++) {\n      for (let j = primes[i]; j <= curNumber; j++) {\n        combinations[j] += combinations[j - primes[i]];\n      }\n    }\n    if (combinations[curNumber] > n) {\n      return curNumber;\n    }\n  }\n\n  return false;\n}"
        }
      ],
      "tests": [
        {
          "text": "`primeSummations(5)` should return a number.",
          "testCode": "assert(typeof primeSummations(5) === 'number');"
        },
        {
          "text": "`primeSummations(5)` should return `11`.",
          "testCode": "assert.strictEqual(primeSummations(5), 11);"
        },
        {
          "text": "`primeSummations(100)` should return `31`.",
          "testCode": "assert.strictEqual(primeSummations(100), 31);"
        },
        {
          "text": "`primeSummations(1000)` should return `53`.",
          "testCode": "assert.strictEqual(primeSummations(1000), 53);"
        },
        {
          "text": "`primeSummations(5000)` should return `71`.",
          "testCode": "assert.strictEqual(primeSummations(5000), 71);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302190,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-77-prime-summations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3ba1000cf542c50fecd",
      "title": "Problem 78: Coin partitions",
      "challengeType": 1,
      "dashedName": "problem-78-coin-partitions",
      "description": "Let ${p}(n)$ represent the number of different ways in which `n` coins can be separated into piles. For example, five coins can be separated into piles in exactly seven different ways, so ${p}(5) = 7$.\n\n<div style='text-align: center;'>\n\n| Coin piles        |\n| ----------------- |\n| OOOOO             |\n| OOOO   O          |\n| OOO   OO          |\n| OOO   O   O       |\n| OO   OO   O       |\n| OO   O   O   O    |\n| O   O   O   O   O |\n\n</div><br>\n\nFind the least value of `n` for which ${p}(n)$ is divisible by `divisor`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function coinPartitions(divisor) {\n\n  return true;\n}\n\ncoinPartitions(7);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// compute pentagonal numbers per generating function\nconst pentagonalNumbers = Array(251)\n  .fill(0)\n  .flatMap((_, i) => i ? [i * (3 * i - 1) / 2, i * (3 * i - 1) / 2 + i] : []);\n\nfunction coinPartitions(divisor) {\n  // helper data\n  const signs = [1, 1, -1, -1];\n\n  // compute partition counts until we find a multiple of divisor\n  const partitions = Array(divisor + 1).fill(0);\n  partitions[0] = 1;\n  for (let i = 1; partitions[i - 1] > 0; i++) {\n    // compute next partition count\n    for (let j = 0; pentagonalNumbers[j] <= i; j++) {\n      partitions[i] += partitions[i - pentagonalNumbers[j]] * signs[j % 4];\n    }\n    \n    partitions[i] = partitions[i] % divisor;\n    if (partitions[i] < 0) partitions[i] += divisor; // positive mod\n    // return when found\n    if (partitions[i] === 0) return i;\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`coinPartitions(7)` should return a number.",
          "testCode": "assert(typeof coinPartitions(7) === 'number');"
        },
        {
          "text": "`coinPartitions(7)` should return `5`.",
          "testCode": "assert.strictEqual(coinPartitions(7), 5);"
        },
        {
          "text": "`coinPartitions(10000)` should return `599`.",
          "testCode": "assert.strictEqual(coinPartitions(10000), 599);"
        },
        {
          "text": "`coinPartitions(100000)` should return `11224`.",
          "testCode": "assert.strictEqual(coinPartitions(100000), 11224);"
        },
        {
          "text": "`coinPartitions(1000000)` should return `55374`.",
          "testCode": "assert.strictEqual(coinPartitions(1000000), 55374);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302191,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-78-coin-partitions.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3bb1000cf542c50fece",
      "title": "Problem 79: Passcode derivation",
      "challengeType": 1,
      "dashedName": "problem-79-passcode-derivation",
      "description": "A common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was `531278`, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: `317`.\n\nThe arrays, `keylog1`, `keylog2`, and `keylog3`, contains fifty successful login attempts.\n\nGiven that the three characters are always asked for in order, analyze the array so as to determine the shortest possible secret passcode of unknown length.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function passcodeDerivation(arr) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst keylog1 = [\n  319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716,\n];\n\npasscodeDerivation(keylog1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function passcodeDerivation(arr) {\n  const numbersInPasscode = [];\n  const relativePositions = new Array(10)\n    .fill()\n    .map(() => new Array(10).fill(0));\n\n  for (let i = 0; i < arr.length; i++) {\n    const curAttempt = arr[i]\n      .toString()\n      .split('')\n      .map(key => parseInt(key, 10));\n    for (let j = 0; j < curAttempt.length; j++) {\n      if (numbersInPasscode.indexOf(curAttempt[j]) === -1) {\n        numbersInPasscode.push(curAttempt[j]);\n      }\n      for (let k = j + 1; k < curAttempt.length; k++) {\n        relativePositions[curAttempt[j]][curAttempt[k]] += 1;\n      }\n    }\n  }\n\n  const ranks = {};\n  for (let i = 0; i < numbersInPasscode.length; i++) {\n    const curNumber = numbersInPasscode[i];\n    ranks[curNumber] = relativePositions[curNumber].filter(\n      count => count > 0\n    ).length;\n  }\n\n  const passcode = numbersInPasscode\n    .sort((i, j) => ranks[i] - ranks[j])\n    .reverse()\n    .join('');\n\n  return parseInt(passcode, 10);\n}"
        }
      ],
      "tests": [
        {
          "text": "`passcodeDerivation(keylog1)` should return a number.",
          "testCode": "const _keylog1 = [\n  127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517\n];\nassert.isNumber(passcodeDerivation(_keylog1));"
        },
        {
          "text": "`passcodeDerivation(keylog1)` should return `531278`.",
          "testCode": "const _keylog1 = [\n  127,327,178,528,537,538,532,328,127,178,537,127,317,328,512,278,328,327,178,327,578,317,527,178,128,328,517,312,531,128,128,317,527,312,328,532,512,518,317,127,537,528,537,527,327,278,532,128,318,517\n];\nassert.strictEqual(passcodeDerivation(_keylog1), 531278);"
        },
        {
          "text": "`passcodeDerivation(keylog2)` should return `1230567`.",
          "testCode": "const _keylog2 = [\n  305,367,256,123,357,120,125,307,236,256,356,267,357,256,356,136,257,107,126,567,567,105,120,237,367,120,367,135,207,167,367,367,307,125,120,130,367,230,106,356,126,106,130,123,307,127,306,167,136,126\n];\nassert.strictEqual(passcodeDerivation(_keylog2), 1230567);"
        },
        {
          "text": "`passcodeDerivation(keylog3)` should return `73162890`.",
          "testCode": "const _keylog3 = [\n  319,680,180,690,129,620,762,689,762,318,368,710,720,710,629,168,160,689,716,731,736,729,316,729,729,710,769,290,719,680,318,389,162,289,162,718,729,319,790,680,890,362,319,760,316,729,380,319,728,716,\n];\nassert.strictEqual(passcodeDerivation(_keylog3), 73162890);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302192,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-79-passcode-derivation.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3741000cf542c50fe87",
      "title": "Problem 8: Largest product in a series",
      "challengeType": 1,
      "dashedName": "problem-8-largest-product-in-a-series",
      "description": "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n\n<div style='text-align: center;'>73167176531330624919225119674426574742355349194934</div>\n<div style='text-align: center;'>96983520312774506326239578318016984801869478851843</div>\n<div style='text-align: center;'>85861560789112949495459501737958331952853208805511</div>\n<div style='text-align: center;'>12540698747158523863050715693290963295227443043557</div>\n<div style='text-align: center;'>66896648950445244523161731856403098711121722383113</div>\n<div style='text-align: center;'>62229893423380308135336276614282806444486645238749</div>\n<div style='text-align: center;'>30358907296290491560440772390713810515859307960866</div>\n<div style='text-align: center;'>70172427121883998797908792274921901699720888093776</div>\n<div style='text-align: center;'>65727333001053367881220235421809751254540594752243</div>\n<div style='text-align: center;'>52584907711670556013604839586446706324415722155397</div>\n<div style='text-align: center;'>53697817977846174064955149290862569321978468622482</div>\n<div style='text-align: center;'>83972241375657056057490261407972968652414535100474</div>\n<div style='text-align: center;'>82166370484403199890008895243450658541227588666881</div>\n<div style='text-align: center;'>16427171479924442928230863465674813919123162824586</div>\n<div style='text-align: center;'>17866458359124566529476545682848912883142607690042</div>\n<div style='text-align: center;'>24219022671055626321111109370544217506941658960408</div>\n<div style='text-align: center;'>07198403850962455444362981230987879927244284909188</div>\n<div style='text-align: center;'>84580156166097919133875499200524063689912560717606</div>\n<div style='text-align: center;'>05886116467109405077541002256983155200055935729725</div>\n<div style='text-align: center;'>71636269561882670428252483600823257530420752963450</div>\n\nFind the `n` adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largestProductinaSeries(n) {\n\n  let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0];\n  return true;\n}\n\nlargestProductinaSeries(13);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const largestProductinaSeries = (number)=>{\n  let thousandDigits = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0];\n let numberOfDigits = thousandDigits.length;\n let currentIndex = 0;\n let productOfAdjDigits = [];\n\n  while(currentIndex<=(numberOfDigits-number)){\n   let currentAdj = thousandDigits.slice(currentIndex,currentIndex+number);\n    let isAdjDigits = false;\n\n    productOfAdjDigits.push(currentAdj.reduce((prev,cur)=>{\n     return prev*cur;\n    }));\n\n    currentIndex++;\n }\n\n return Math.max(...productOfAdjDigits);\n}"
        }
      ],
      "tests": [
        {
          "text": "`largestProductinaSeries(4)` should return a number.",
          "testCode": "assert.isNumber(largestProductinaSeries(4));"
        },
        {
          "text": "`largestProductinaSeries(4)` should return 5832.",
          "testCode": "assert.strictEqual(largestProductinaSeries(4), 5832);"
        },
        {
          "text": "`largestProductinaSeries(13)` should return 23514624000.",
          "testCode": "assert.strictEqual(largestProductinaSeries(13), 23514624000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302193,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-8-largest-product-in-a-series.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3bc1000cf542c50fecf",
      "title": "Problem 80: Square root digital expansion",
      "challengeType": 1,
      "dashedName": "problem-80-square-root-digital-expansion",
      "description": "It is well known that if the square root of a natural number is not an integer, then it is irrational. The decimal expansion of such square roots is infinite without any repeating pattern at all.\n\nThe square root of two is `1.41421356237309504880...`, and the digital sum of the first one hundred decimal digits is `475`.\n\nFor the first `n` natural numbers, find the total of the digital sums of the first one hundred decimal digits for all the irrational square roots.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sqrtDigitalExpansion(n) {\n\n  return true;\n}\n\nsqrtDigitalExpansion(2);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function sqrtDigitalExpansion(n) {\n  function sumDigits(number) {\n    let sum = 0;\n    while (number > 0n) {\n      let digit = number % 10n;\n      sum += parseInt(digit, 10);\n      number = number / 10n;\n    }\n    return sum;\n  }\n\n  function power(numberA, numberB) {\n    let result = 1n;\n    for (let b = 0; b < numberB; b++) {\n      result = result * BigInt(numberA);\n    }\n    return result;\n  }\n\n  // Based on http://www.afjarvis.staff.shef.ac.uk/maths/jarvisspec02.pdf\n  function expandSquareRoot(number, numDigits) {\n    let a = 5n * BigInt(number);\n    let b = 5n;\n    const boundaryWithNeededDigits = power(10, numDigits + 1);\n\n    while (b < boundaryWithNeededDigits) {\n      if (a >= b) {\n        a = a - b;\n        b = b + 10n;\n      } else {\n        a = a * 100n;\n        b = (b / 10n) * 100n + 5n;\n      }\n    }\n    return b / 100n;\n  }\n\n  let result = 0;\n  let nextPerfectRoot = 1;\n  const requiredDigits = 100;\n  for (let i = 1; i <= n; i++) {\n    if (nextPerfectRoot ** 2 === i) {\n      nextPerfectRoot++;\n      continue;\n    }\n    result += sumDigits(expandSquareRoot(i, requiredDigits));\n  }\n\n  return result;\n}"
        }
      ],
      "tests": [
        {
          "text": "`sqrtDigitalExpansion(2)` should return a number.",
          "testCode": "assert(typeof sqrtDigitalExpansion(2) === 'number');"
        },
        {
          "text": "`sqrtDigitalExpansion(2)` should return `475`.",
          "testCode": "assert.strictEqual(sqrtDigitalExpansion(2), 475);"
        },
        {
          "text": "`sqrtDigitalExpansion(50)` should return `19543`.",
          "testCode": "assert.strictEqual(sqrtDigitalExpansion(50), 19543);"
        },
        {
          "text": "`sqrtDigitalExpansion(100)` should return `40886`.",
          "testCode": "assert.strictEqual(sqrtDigitalExpansion(100), 40886);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302194,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-80-square-root-digital-expansion.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3bd1000cf542c50fed0",
      "title": "Problem 81: Path sum: two ways",
      "challengeType": 1,
      "dashedName": "problem-81-path-sum-two-ways",
      "description": "In the 5 by 5 matrix below, the minimal path sum from the top left to the bottom right, by **only moving to the right and down**, is indicated in bold red and is equal to `2427`.\n\n  $$\\begin{pmatrix}\n  \\color{red}{131} & 673 & 234 & 103 & 18\\\\\\\\\n  \\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & 150\\\\\\\\\n  630 & 803 & \\color{red}{746} & \\color{red}{422} & 111\\\\\\\\\n  537 & 699 & 497 & \\color{red}{121} & 956\\\\\\\\\n  805 & 732 & 524 & \\color{red}{37} & \\color{red}{331}\n  \\end{pmatrix}$$\n\nFind the minimal path sum from the top left to the bottom right by only moving right and down in `matrix`, a 2D array representing a matrix. The maximum matrix size used in the tests will be 80 by 80.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pathSumTwoWays(matrix) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst testMatrix1 = [\n  [131, 673, 234, 103, 18],\n  [201, 96, 342, 965, 150],\n  [630, 803, 746, 422, 111],\n  [537, 699, 497, 121, 956],\n  [805, 732, 524, 37, 331]\n];\n\npathSumTwoWays(testMatrix1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function pathSumTwoWays(matrix) {\n  function makeMinimalMove(row, column) {\n    if (resultMatrix[row][column + 1] < resultMatrix[row + 1][column]) {\n      return resultMatrix[row][column + 1];\n    }\n    return resultMatrix[row + 1][column];\n  }\n\n  const size = matrix.length;\n  const resultMatrix = [];\n  for (let i = 0; i < size; i++) {\n    resultMatrix.push([...matrix[i]])\n  }\n\n  for (let i = size - 2; i >= 0; i--) {\n    resultMatrix[size - 1][i] += resultMatrix[size - 1][i + 1];\n    resultMatrix[i][size - 1] += resultMatrix[i + 1][size - 1];\n  }\n\n  for (let row = size - 2; row >= 0; row--) {\n    for (let column = size - 2; column >= 0; column--) {\n      resultMatrix[row][column] += makeMinimalMove(row, column);\n    }\n  }\n  return resultMatrix[0][0];\n}"
        }
      ],
      "tests": [
        {
          "text": "`pathSumTwoWays(testMatrix1)` should return a number.",
          "testCode": "assert(typeof pathSumTwoWays(_testMatrix1) === 'number');"
        },
        {
          "text": "`pathSumTwoWays(testMatrix1)` should return `2427`.",
          "testCode": "assert.strictEqual(pathSumTwoWays(_testMatrix1), 2427);"
        },
        {
          "text": "`pathSumTwoWays(testMatrix2)` should return `427337`.",
          "testCode": "assert.strictEqual(pathSumTwoWays(_testMatrix2), 427337);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302195,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-81-path-sum-two-ways.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testMatrix1 = [\n  [131, 673, 234, 103, 18],\n  [201, 96, 342, 965, 150],\n  [630, 803, 746, 422, 111],\n  [537, 699, 497, 121, 956],\n  [805, 732, 524, 37, 331]\n];\nconst _testMatrix2 = [\n  [4445,2697,5115,718,2209,2212,654,4348,3079,6821,7668,3276,8874,4190,3785,2752,9473,7817,9137,496,7338,3434,7152,4355,4552,7917,7827,2460,2350,691,3514,5880,3145,7633,7199,3783,5066,7487,3285,1084,8985,760,872,8609,8051,1134,9536,5750,9716,9371,7619,5617,275,9721,2997,2698,1887,8825,6372,3014,2113,7122,7050,6775,5948,2758,1219,3539,348,7989,2735,9862,1263,8089,6401,9462,3168,2758,3748,5870],\n  [1096,20,1318,7586,5167,2642,1443,5741,7621,7030,5526,4244,2348,4641,9827,2448,6918,5883,3737,300,7116,6531,567,5997,3971,6623,820,6148,3287,1874,7981,8424,7672,7575,6797,6717,1078,5008,4051,8795,5820,346,1851,6463,2117,6058,3407,8211,117,4822,1317,4377,4434,5925,8341,4800,1175,4173,690,8978,7470,1295,3799,8724,3509,9849,618,3320,7068,9633,2384,7175,544,6583,1908,9983,481,4187,9353,9377],\n  [9607,7385,521,6084,1364,8983,7623,1585,6935,8551,2574,8267,4781,3834,2764,2084,2669,4656,9343,7709,2203,9328,8004,6192,5856,3555,2260,5118,6504,1839,9227,1259,9451,1388,7909,5733,6968,8519,9973,1663,5315,7571,3035,4325,4283,2304,6438,3815,9213,9806,9536,196,5542,6907,2475,1159,5820,9075,9470,2179,9248,1828,4592,9167,3713,4640,47,3637,309,7344,6955,346,378,9044,8635,7466,5036,9515,6385,9230],\n  [7206,3114,7760,1094,6150,5182,7358,7387,4497,955,101,1478,7777,6966,7010,8417,6453,4955,3496,107,449,8271,131,2948,6185,784,5937,8001,6104,8282,4165,3642,710,2390,575,715,3089,6964,4217,192,5949,7006,715,3328,1152,66,8044,4319,1735,146,4818,5456,6451,4113,1063,4781,6799,602,1504,6245,6550,1417,1343,2363,3785,5448,4545,9371,5420,5068,4613,4882,4241,5043,7873,8042,8434,3939,9256,2187],\n  [3620,8024,577,9997,7377,7682,1314,1158,6282,6310,1896,2509,5436,1732,9480,706,496,101,6232,7375,2207,2306,110,6772,3433,2878,8140,5933,8688,1399,2210,7332,6172,6403,7333,4044,2291,1790,2446,7390,8698,5723,3678,7104,1825,2040,140,3982,4905,4160,2200,5041,2512,1488,2268,1175,7588,8321,8078,7312,977,5257,8465,5068,3453,3096,1651,7906,253,9250,6021,8791,8109,6651,3412,345,4778,5152,4883,7505],\n  [1074,5438,9008,2679,5397,5429,2652,3403,770,9188,4248,2493,4361,8327,9587,707,9525,5913,93,1899,328,2876,3604,673,8576,6908,7659,2544,3359,3883,5273,6587,3065,1749,3223,604,9925,6941,2823,8767,7039,3290,3214,1787,7904,3421,7137,9560,8451,2669,9219,6332,1576,5477,6755,8348,4164,4307,2984,4012,6629,1044,2874,6541,4942,903,1404,9125,5160,8836,4345,2581,460,8438,1538,5507,668,3352,2678,6942],\n  [4295,1176,5596,1521,3061,9868,7037,7129,8933,6659,5947,5063,3653,9447,9245,2679,767,714,116,8558,163,3927,8779,158,5093,2447,5782,3967,1716,931,7772,8164,1117,9244,5783,7776,3846,8862,6014,2330,6947,1777,3112,6008,3491,1906,5952,314,4602,8994,5919,9214,3995,5026,7688,6809,5003,3128,2509,7477,110,8971,3982,8539,2980,4689,6343,5411,2992,5270,5247,9260,2269,7474,1042,7162,5206,1232,4556,4757],\n  [510,3556,5377,1406,5721,4946,2635,7847,4251,8293,8281,6351,4912,287,2870,3380,3948,5322,3840,4738,9563,1906,6298,3234,8959,1562,6297,8835,7861,239,6618,1322,2553,2213,5053,5446,4402,6500,5182,8585,6900,5756,9661,903,5186,7687,5998,7997,8081,8955,4835,6069,2621,1581,732,9564,1082,1853,5442,1342,520,1737,3703,5321,4793,2776,1508,1647,9101,2499,6891,4336,7012,3329,3212,1442,9993,3988,4930,7706],\n  [9444,3401,5891,9716,1228,7107,109,3563,2700,6161,5039,4992,2242,8541,7372,2067,1294,3058,1306,320,8881,5756,9326,411,8650,8824,5495,8282,8397,2000,1228,7817,2099,6473,3571,5994,4447,1299,5991,543,7874,2297,1651,101,2093,3463,9189,6872,6118,872,1008,1779,2805,9084,4048,2123,5877,55,3075,1737,9459,4535,6453,3644,108,5982,4437,5213,1340,6967,9943,5815,669,8074,1838,6979,9132,9315,715,5048],\n  [3327,4030,7177,6336,9933,5296,2621,4785,2755,4832,2512,2118,2244,4407,2170,499,7532,9742,5051,7687,970,6924,3527,4694,5145,1306,2165,5940,2425,8910,3513,1909,6983,346,6377,4304,9330,7203,6605,3709,3346,970,369,9737,5811,4427,9939,3693,8436,5566,1977,3728,2399,3985,8303,2492,5366,9802,9193,7296,1033,5060,9144,2766,1151,7629,5169,5995,58,7619,7565,4208,1713,6279,3209,4908,9224,7409,1325,8540],\n  [6882,1265,1775,3648,4690,959,5837,4520,5394,1378,9485,1360,4018,578,9174,2932,9890,3696,116,1723,1178,9355,7063,1594,1918,8574,7594,7942,1547,6166,7888,354,6932,4651,1010,7759,6905,661,7689,6092,9292,3845,9605,8443,443,8275,5163,7720,7265,6356,7779,1798,1754,5225,6661,1180,8024,5666,88,9153,1840,3508,1193,4445,2648,3538,6243,6375,8107,5902,5423,2520,1122,5015,6113,8859,9370,966,8673,2442],\n  [7338,3423,4723,6533,848,8041,7921,8277,4094,5368,7252,8852,9166,2250,2801,6125,8093,5738,4038,9808,7359,9494,601,9116,4946,2702,5573,2921,9862,1462,1269,2410,4171,2709,7508,6241,7522,615,2407,8200,4189,5492,5649,7353,2590,5203,4274,710,7329,9063,956,8371,3722,4253,4785,1194,4828,4717,4548,940,983,2575,4511,2938,1827,2027,2700,1236,841,5760,1680,6260,2373,3851,1841,4968,1172,5179,7175,3509],\n  [4420,1327,3560,2376,6260,2988,9537,4064,4829,8872,9598,3228,1792,7118,9962,9336,4368,9189,6857,1829,9863,6287,7303,7769,2707,8257,2391,2009,3975,4993,3068,9835,3427,341,8412,2134,4034,8511,6421,3041,9012,2983,7289,100,1355,7904,9186,6920,5856,2008,6545,8331,3655,5011,839,8041,9255,6524,3862,8788,62,7455,3513,5003,8413,3918,2076,7960,6108,3638,6999,3436,1441,4858,4181,1866,8731,7745,3744,1000],\n  [356,8296,8325,1058,1277,4743,3850,2388,6079,6462,2815,5620,8495,5378,75,4324,3441,9870,1113,165,1544,1179,2834,562,6176,2313,6836,8839,2986,9454,5199,6888,1927,5866,8760,320,1792,8296,7898,6121,7241,5886,5814,2815,8336,1576,4314,3109,2572,6011,2086,9061,9403,3947,5487,9731,7281,3159,1819,1334,3181,5844,5114,9898,4634,2531,4412,6430,4262,8482,4546,4555,6804,2607,9421,686,8649,8860,7794,6672],\n  [9870,152,1558,4963,8750,4754,6521,6256,8818,5208,5691,9659,8377,9725,5050,5343,2539,6101,1844,9700,7750,8114,5357,3001,8830,4438,199,9545,8496,43,2078,327,9397,106,6090,8181,8646,6414,7499,5450,4850,6273,5014,4131,7639,3913,6571,8534,9703,4391,7618,445,1320,5,1894,6771,7383,9191,4708,9706,6939,7937,8726,9382,5216,3685,2247,9029,8154,1738,9984,2626,9438,4167,6351,5060,29,1218,1239,4785],\n  [192,5213,8297,8974,4032,6966,5717,1179,6523,4679,9513,1481,3041,5355,9303,9154,1389,8702,6589,7818,6336,3539,5538,3094,6646,6702,6266,2759,4608,4452,617,9406,8064,6379,444,5602,4950,1810,8391,1536,316,8714,1178,5182,5863,5110,5372,4954,1978,2971,5680,4863,2255,4630,5723,2168,538,1692,1319,7540,440,6430,6266,7712,7385,5702,620,641,3136,7350,1478,3155,2820,9109,6261,1122,4470,14,8493,2095],\n  [1046,4301,6082,474,4974,7822,2102,5161,5172,6946,8074,9716,6586,9962,9749,5015,2217,995,5388,4402,7652,6399,6539,1349,8101,3677,1328,9612,7922,2879,231,5887,2655,508,4357,4964,3554,5930,6236,7384,4614,280,3093,9600,2110,7863,2631,6626,6620,68,1311,7198,7561,1768,5139,1431,221,230,2940,968,5283,6517,2146,1646,869,9402,7068,8645,7058,1765,9690,4152,2926,9504,2939,7504,6074,2944,6470,7859],\n  [4659,736,4951,9344,1927,6271,8837,8711,3241,6579,7660,5499,5616,3743,5801,4682,9748,8796,779,1833,4549,8138,4026,775,4170,2432,4174,3741,7540,8017,2833,4027,396,811,2871,1150,9809,2719,9199,8504,1224,540,2051,3519,7982,7367,2761,308,3358,6505,2050,4836,5090,7864,805,2566,2409,6876,3361,8622,5572,5895,3280,441,7893,8105,1634,2929,274,3926,7786,6123,8233,9921,2674,5340,1445,203,4585,3837],\n  [5759,338,7444,7968,7742,3755,1591,4839,1705,650,7061,2461,9230,9391,9373,2413,1213,431,7801,4994,2380,2703,6161,6878,8331,2538,6093,1275,5065,5062,2839,582,1014,8109,3525,1544,1569,8622,7944,2905,6120,1564,1839,5570,7579,1318,2677,5257,4418,5601,7935,7656,5192,1864,5886,6083,5580,6202,8869,1636,7907,4759,9082,5854,3185,7631,6854,5872,5632,5280,1431,2077,9717,7431,4256,8261,9680,4487,4752,4286],\n  [1571,1428,8599,1230,7772,4221,8523,9049,4042,8726,7567,6736,9033,2104,4879,4967,6334,6716,3994,1269,8995,6539,3610,7667,6560,6065,874,848,4597,1711,7161,4811,6734,5723,6356,6026,9183,2586,5636,1092,7779,7923,8747,6887,7505,9909,1792,3233,4526,3176,1508,8043,720,5212,6046,4988,709,5277,8256,3642,1391,5803,1468,2145,3970,6301,7767,2359,8487,9771,8785,7520,856,1605,8972,2402,2386,991,1383,5963],\n  [1822,4824,5957,6511,9868,4113,301,9353,6228,2881,2966,6956,9124,9574,9233,1601,7340,973,9396,540,4747,8590,9535,3650,7333,7583,4806,3593,2738,8157,5215,8472,2284,9473,3906,6982,5505,6053,7936,6074,7179,6688,1564,1103,6860,5839,2022,8490,910,7551,7805,881,7024,1855,9448,4790,1274,3672,2810,774,7623,4223,4850,6071,9975,4935,1915,9771,6690,3846,517,463,7624,4511,614,6394,3661,7409,1395,8127],\n  [8738,3850,9555,3695,4383,2378,87,6256,6740,7682,9546,4255,6105,2000,1851,4073,8957,9022,6547,5189,2487,303,9602,7833,1628,4163,6678,3144,8589,7096,8913,5823,4890,7679,1212,9294,5884,2972,3012,3359,7794,7428,1579,4350,7246,4301,7779,7790,3294,9547,4367,3549,1958,8237,6758,3497,3250,3456,6318,1663,708,7714,6143,6890,3428,6853,9334,7992,591,6449,9786,1412,8500,722,5468,1371,108,3939,4199,2535],\n  [7047,4323,1934,5163,4166,461,3544,2767,6554,203,6098,2265,9078,2075,4644,6641,8412,9183,487,101,7566,5622,1975,5726,2920,5374,7779,5631,3753,3725,2672,3621,4280,1162,5812,345,8173,9785,1525,955,5603,2215,2580,5261,2765,2990,5979,389,3907,2484,1232,5933,5871,3304,1138,1616,5114,9199,5072,7442,7245,6472,4760,6359,9053,7876,2564,9404,3043,9026,2261,3374,4460,7306,2326,966,828,3274,1712,3446],\n  [3975,4565,8131,5800,4570,2306,8838,4392,9147,11,3911,7118,9645,4994,2028,6062,5431,2279,8752,2658,7836,994,7316,5336,7185,3289,1898,9689,2331,5737,3403,1124,2679,3241,7748,16,2724,5441,6640,9368,9081,5618,858,4969,17,2103,6035,8043,7475,2181,939,415,1617,8500,8253,2155,7843,7974,7859,1746,6336,3193,2617,8736,4079,6324,6645,8891,9396,5522,6103,1857,8979,3835,2475,1310,7422,610,8345,7615],\n  [9248,5397,5686,2988,3446,4359,6634,9141,497,9176,6773,7448,1907,8454,916,1596,2241,1626,1384,2741,3649,5362,8791,7170,2903,2475,5325,6451,924,3328,522,90,4813,9737,9557,691,2388,1383,4021,1609,9206,4707,5200,7107,8104,4333,9860,5013,1224,6959,8527,1877,4545,7772,6268,621,4915,9349,5970,706,9583,3071,4127,780,8231,3017,9114,3836,7503,2383,1977,4870,8035,2379,9704,1037,3992,3642,1016,4303],\n  [5093,138,4639,6609,1146,5565,95,7521,9077,2272,974,4388,2465,2650,722,4998,3567,3047,921,2736,7855,173,2065,4238,1048,5,6847,9548,8632,9194,5942,4777,7910,8971,6279,7253,2516,1555,1833,3184,9453,9053,6897,7808,8629,4877,1871,8055,4881,7639,1537,7701,2508,7564,5845,5023,2304,5396,3193,2955,1088,3801,6203,1748,3737,1276,13,4120,7715,8552,3047,2921,106,7508,304,1280,7140,2567,9135,5266],\n  [6237,4607,7527,9047,522,7371,4883,2540,5867,6366,5301,1570,421,276,3361,527,6637,4861,2401,7522,5808,9371,5298,2045,5096,5447,7755,5115,7060,8529,4078,1943,1697,1764,5453,7085,960,2405,739,2100,5800,728,9737,5704,5693,1431,8979,6428,673,7540,6,7773,5857,6823,150,5869,8486,684,5816,9626,7451,5579,8260,3397,5322,6920,1879,2127,2884,5478,4977,9016,6165,6292,3062,5671,5968,78,4619,4763],\n  [9905,7127,9390,5185,6923,3721,9164,9705,4341,1031,1046,5127,7376,6528,3248,4941,1178,7889,3364,4486,5358,9402,9158,8600,1025,874,1839,1783,309,9030,1843,845,8398,1433,7118,70,8071,2877,3904,8866,6722,4299,10,1929,5897,4188,600,1889,3325,2485,6473,4474,7444,6992,4846,6166,4441,2283,2629,4352,7775,1101,2214,9985,215,8270,9750,2740,8361,7103,5930,8664,9690,8302,9267,344,2077,1372,1880,9550],\n  [5825,8517,7769,2405,8204,1060,3603,7025,478,8334,1997,3692,7433,9101,7294,7498,9415,5452,3850,3508,6857,9213,6807,4412,7310,854,5384,686,4978,892,8651,3241,2743,3801,3813,8588,6701,4416,6990,6490,3197,6838,6503,114,8343,5844,8646,8694,65,791,5979,2687,2621,2019,8097,1423,3644,9764,4921,3266,3662,5561,2476,8271,8138,6147,1168,3340,1998,9874,6572,9873,6659,5609,2711,3931,9567,4143,7833,8887],\n  [6223,2099,2700,589,4716,8333,1362,5007,2753,2848,4441,8397,7192,8191,4916,9955,6076,3370,6396,6971,3156,248,3911,2488,4930,2458,7183,5455,170,6809,6417,3390,1956,7188,577,7526,2203,968,8164,479,8699,7915,507,6393,4632,1597,7534,3604,618,3280,6061,9793,9238,8347,568,9645,2070,5198,6482,5000,9212,6655,5961,7513,1323,3872,6170,3812,4146,2736,67,3151,5548,2781,9679,7564,5043,8587,1893,4531],\n  [5826,3690,6724,2121,9308,6986,8106,6659,2142,1642,7170,2877,5757,6494,8026,6571,8387,9961,6043,9758,9607,6450,8631,8334,7359,5256,8523,2225,7487,1977,9555,8048,5763,2414,4948,4265,2427,8978,8088,8841,9208,9601,5810,9398,8866,9138,4176,5875,7212,3272,6759,5678,7649,4922,5422,1343,8197,3154,3600,687,1028,4579,2084,9467,4492,7262,7296,6538,7657,7134,2077,1505,7332,6890,8964,4879,7603,7400,5973,739],\n  [1861,1613,4879,1884,7334,966,2000,7489,2123,4287,1472,3263,4726,9203,1040,4103,6075,6049,330,9253,4062,4268,1635,9960,577,1320,3195,9628,1030,4092,4979,6474,6393,2799,6967,8687,7724,7392,9927,2085,3200,6466,8702,265,7646,8665,7986,7266,4574,6587,612,2724,704,3191,8323,9523,3002,704,5064,3960,8209,2027,2758,8393,4875,4641,9584,6401,7883,7014,768,443,5490,7506,1852,2005,8850,5776,4487,4269],\n  [4052,6687,4705,7260,6645,6715,3706,5504,8672,2853,1136,8187,8203,4016,871,1809,1366,4952,9294,5339,6872,2645,6083,7874,3056,5218,7485,8796,7401,3348,2103,426,8572,4163,9171,3176,948,7654,9344,3217,1650,5580,7971,2622,76,2874,880,2034,9929,1546,2659,5811,3754,7096,7436,9694,9960,7415,2164,953,2360,4194,2397,1047,2196,6827,575,784,2675,8821,6802,7972,5996,6699,2134,7577,2887,1412,4349,4380],\n  [4629,2234,6240,8132,7592,3181,6389,1214,266,1910,2451,8784,2790,1127,6932,1447,8986,2492,5476,397,889,3027,7641,5083,5776,4022,185,3364,5701,2442,2840,4160,9525,4828,6602,2614,7447,3711,4505,7745,8034,6514,4907,2605,7753,6958,7270,6936,3006,8968,439,2326,4652,3085,3425,9863,5049,5361,8688,297,7580,8777,7916,6687,8683,7141,306,9569,2384,1500,3346,4601,7329,9040,6097,2727,6314,4501,4974,2829],\n  [8316,4072,2025,6884,3027,1808,5714,7624,7880,8528,4205,8686,7587,3230,1139,7273,6163,6986,3914,9309,1464,9359,4474,7095,2212,7302,2583,9462,7532,6567,1606,4436,8981,5612,6796,4385,5076,2007,6072,3678,8331,1338,3299,8845,4783,8613,4071,1232,6028,2176,3990,2148,3748,103,9453,538,6745,9110,926,3125,473,5970,8728,7072,9062,1404,1317,5139,9862,6496,6062,3338,464,1600,2532,1088,8232,7739,8274,3873],\n  [2341,523,7096,8397,8301,6541,9844,244,4993,2280,7689,4025,4196,5522,7904,6048,2623,9258,2149,9461,6448,8087,7245,1917,8340,7127,8466,5725,6996,3421,5313,512,9164,9837,9794,8369,4185,1488,7210,1524,1016,4620,9435,2478,7765,8035,697,6677,3724,6988,5853,7662,3895,9593,1185,4727,6025,5734,7665,3070,138,8469,6748,6459,561,7935,8646,2378,462,7755,3115,9690,8877,3946,2728,8793,244,6323,8666,4271],\n  [6430,2406,8994,56,1267,3826,9443,7079,7579,5232,6691,3435,6718,5698,4144,7028,592,2627,217,734,6194,8156,9118,58,2640,8069,4127,3285,694,3197,3377,4143,4802,3324,8134,6953,7625,3598,3584,4289,7065,3434,2106,7132,5802,7920,9060,7531,3321,1725,1067,3751,444,5503,6785,7937,6365,4803,198,6266,8177,1470,6390,1606,2904,7555,9834,8667,2033,1723,5167,1666,8546,8152,473,4475,6451,7947,3062,3281],\n  [2810,3042,7759,1741,2275,2609,7676,8640,4117,1958,7500,8048,1757,3954,9270,1971,4796,2912,660,5511,3553,1012,5757,4525,6084,7198,8352,5775,7726,8591,7710,9589,3122,4392,6856,5016,749,2285,3356,7482,9956,7348,2599,8944,495,3462,3578,551,4543,7207,7169,7796,1247,4278,6916,8176,3742,8385,2310,1345,8692,2667,4568,1770,8319,3585,4920,3890,4928,7343,5385,9772,7947,8786,2056,9266,3454,2807,877,2660],\n  [6206,8252,5928,5837,4177,4333,207,7934,5581,9526,8906,1498,8411,2984,5198,5134,2464,8435,8514,8674,3876,599,5327,826,2152,4084,2433,9327,9697,4800,2728,3608,3849,3861,3498,9943,1407,3991,7191,9110,5666,8434,4704,6545,5944,2357,1163,4995,9619,6754,4200,9682,6654,4862,4744,5953,6632,1054,293,9439,8286,2255,696,8709,1533,1844,6441,430,1999,6063,9431,7018,8057,2920,6266,6799,356,3597,4024,6665],\n  [3847,6356,8541,7225,2325,2946,5199,469,5450,7508,2197,9915,8284,7983,6341,3276,3321,16,1321,7608,5015,3362,8491,6968,6818,797,156,2575,706,9516,5344,5457,9210,5051,8099,1617,9951,7663,8253,9683,2670,1261,4710,1068,8753,4799,1228,2621,3275,6188,4699,1791,9518,8701,5932,4275,6011,9877,2933,4182,6059,2930,6687,6682,9771,654,9437,3169,8596,1827,5471,8909,2352,123,4394,3208,8756,5513,6917,2056],\n  [5458,8173,3138,3290,4570,4892,3317,4251,9699,7973,1163,1935,5477,6648,9614,5655,9592,975,9118,2194,7322,8248,8413,3462,8560,1907,7810,6650,7355,2939,4973,6894,3933,3784,3200,2419,9234,4747,2208,2207,1945,2899,1407,6145,8023,3484,5688,7686,2737,3828,3704,9004,5190,9740,8643,8650,5358,4426,1522,1707,3613,9887,6956,2447,2762,833,1449,9489,2573,1080,4167,3456,6809,2466,227,7125,2759,6250,6472,8089],\n  [3266,7025,9756,3914,1265,9116,7723,9788,6805,5493,2092,8688,6592,9173,4431,4028,6007,7131,4446,4815,3648,6701,759,3312,8355,4485,4187,5188,8746,7759,3528,2177,5243,8379,3838,7233,4607,9187,7216,2190,6967,2920,6082,7910,5354,3609,8958,6949,7731,494,8753,8707,1523,4426,3543,7085,647,6771,9847,646,5049,824,8417,5260,2730,5702,2513,9275,4279,2767,8684,1165,9903,4518,55,9682,8963,6005,2102,6523],\n  [1998,8731,936,1479,5259,7064,4085,91,7745,7136,3773,3810,730,8255,2705,2653,9790,6807,2342,355,9344,2668,3690,2028,9679,8102,574,4318,6481,9175,5423,8062,2867,9657,7553,3442,3920,7430,3945,7639,3714,3392,2525,4995,4850,2867,7951,9667,486,9506,9888,781,8866,1702,3795,90,356,1483,4200,2131,6969,5931,486,6880,4404,1084,5169,4910,6567,8335,4686,5043,2614,3352,2667,4513,6472,7471,5720,1616],\n  [8878,1613,1716,868,1906,2681,564,665,5995,2474,7496,3432,9491,9087,8850,8287,669,823,347,6194,2264,2592,7871,7616,8508,4827,760,2676,4660,4881,7572,3811,9032,939,4384,929,7525,8419,5556,9063,662,8887,7026,8534,3111,1454,2082,7598,5726,6687,9647,7608,73,3014,5063,670,5461,5631,3367,9796,8475,7908,5073,1565,5008,5295,4457,1274,4788,1728,338,600,8415,8535,9351,7750,6887,5845,1741,125],\n  [3637,6489,9634,9464,9055,2413,7824,9517,7532,3577,7050,6186,6980,9365,9782,191,870,2497,8498,2218,2757,5420,6468,586,3320,9230,1034,1393,9886,5072,9391,1178,8464,8042,6869,2075,8275,3601,7715,9470,8786,6475,8373,2159,9237,2066,3264,5000,679,355,3069,4073,494,2308,5512,4334,9438,8786,8637,9774,1169,1949,6594,6072,4270,9158,7916,5752,6794,9391,6301,5842,3285,2141,3898,8027,4310,8821,7079,1307],\n  [8497,6681,4732,7151,7060,5204,9030,7157,833,5014,8723,3207,9796,9286,4913,119,5118,7650,9335,809,3675,2597,5144,3945,5090,8384,187,4102,1260,2445,2792,4422,8389,9290,50,1765,1521,6921,8586,4368,1565,5727,7855,2003,4834,9897,5911,8630,5070,1330,7692,7557,7980,6028,5805,9090,8265,3019,3802,698,9149,5748,1965,9658,4417,5994,5584,8226,2937,272,5743,1278,5698,8736,2595,6475,5342,6596,1149,6920],\n  [8188,8009,9546,6310,8772,2500,9846,6592,6872,3857,1307,8125,7042,1544,6159,2330,643,4604,7899,6848,371,8067,2062,3200,7295,1857,9505,6936,384,2193,2190,301,8535,5503,1462,7380,5114,4824,8833,1763,4974,8711,9262,6698,3999,2645,6937,7747,1128,2933,3556,7943,2885,3122,9105,5447,418,2899,5148,3699,9021,9501,597,4084,175,1621,1,1079,6067,5812,4326,9914,6633,5394,4233,6728,9084,1864,5863,1225],\n  [9935,8793,9117,1825,9542,8246,8437,3331,9128,9675,6086,7075,319,1334,7932,3583,7167,4178,1726,7720,695,8277,7887,6359,5912,1719,2780,8529,1359,2013,4498,8072,1129,9998,1147,8804,9405,6255,1619,2165,7491,1,8882,7378,3337,503,5758,4109,3577,985,3200,7615,8058,5032,1080,6410,6873,5496,1466,2412,9885,5904,4406,3605,8770,4361,6205,9193,1537,9959,214,7260,9566,1685,100,4920,7138,9819,5637,976],\n  [3466,9854,985,1078,7222,8888,5466,5379,3578,4540,6853,8690,3728,6351,7147,3134,6921,9692,857,3307,4998,2172,5783,3931,9417,2541,6299,13,787,2099,9131,9494,896,8600,1643,8419,7248,2660,2609,8579,91,6663,5506,7675,1947,6165,4286,1972,9645,3805,1663,1456,8853,5705,9889,7489,1107,383,4044,2969,3343,152,7805,4980,9929,5033,1737,9953,7197,9158,4071,1324,473,9676,3984,9680,3606,8160,7384,5432],\n  [1005,4512,5186,3953,2164,3372,4097,3247,8697,3022,9896,4101,3871,6791,3219,2742,4630,6967,7829,5991,6134,1197,1414,8923,8787,1394,8852,5019,7768,5147,8004,8825,5062,9625,7988,1110,3992,7984,9966,6516,6251,8270,421,3723,1432,4830,6935,8095,9059,2214,6483,6846,3120,1587,6201,6691,9096,9627,6671,4002,3495,9939,7708,7465,5879,6959,6634,3241,3401,2355,9061,2611,7830,3941,2177,2146,5089,7079,519,6351],\n  [7280,8586,4261,2831,7217,3141,9994,9940,5462,2189,4005,6942,9848,5350,8060,6665,7519,4324,7684,657,9453,9296,2944,6843,7499,7847,1728,9681,3906,6353,5529,2822,3355,3897,7724,4257,7489,8672,4356,3983,1948,6892,7415,4153,5893,4190,621,1736,4045,9532,7701,3671,1211,1622,3176,4524,9317,7800,5638,6644,6943,5463,3531,2821,1347,5958,3436,1438,2999,994,850,4131,2616,1549,3465,5946,690,9273,6954,7991],\n  [9517,399,3249,2596,7736,2142,1322,968,7350,1614,468,3346,3265,7222,6086,1661,5317,2582,7959,4685,2807,2917,1037,5698,1529,3972,8716,2634,3301,3412,8621,743,8001,4734,888,7744,8092,3671,8941,1487,5658,7099,2781,99,1932,4443,4756,4652,9328,1581,7855,4312,5976,7255,6480,3996,2748,1973,9731,4530,2790,9417,7186,5303,3557,351,7182,9428,1342,9020,7599,1392,8304,2070,9138,7215,2008,9937,1106,7110],\n  [7444,769,9688,632,1571,6820,8743,4338,337,3366,3073,1946,8219,104,4210,6986,249,5061,8693,7960,6546,1004,8857,5997,9352,4338,6105,5008,2556,6518,6694,4345,3727,7956,20,3954,8652,4424,9387,2035,8358,5962,5304,5194,8650,8282,1256,1103,2138,6679,1985,3653,2770,2433,4278,615,2863,1715,242,3790,2636,6998,3088,1671,2239,957,5411,4595,6282,2881,9974,2401,875,7574,2987,4587,3147,6766,9885,2965],\n  [3287,3016,3619,6818,9073,6120,5423,557,2900,2015,8111,3873,1314,4189,1846,4399,7041,7583,2427,2864,3525,5002,2069,748,1948,6015,2684,438,770,8367,1663,7887,7759,1885,157,7770,4520,4878,3857,1137,3525,3050,6276,5569,7649,904,4533,7843,2199,5648,7628,9075,9441,3600,7231,2388,5640,9096,958,3058,584,5899,8150,1181,9616,1098,8162,6819,8171,1519,1140,7665,8801,2632,1299,9192,707,9955,2710,7314],\n  [1772,2963,7578,3541,3095,1488,7026,2634,6015,4633,4370,2762,1650,2174,909,8158,2922,8467,4198,4280,9092,8856,8835,5457,2790,8574,9742,5054,9547,4156,7940,8126,9824,7340,8840,6574,3547,1477,3014,6798,7134,435,9484,9859,3031,4,1502,4133,1738,1807,4825,463,6343,9701,8506,9822,9555,8688,8168,3467,3234,6318,1787,5591,419,6593,7974,8486,9861,6381,6758,194,3061,4315,2863,4665,3789,2201,1492,4416],\n  [126,8927,6608,5682,8986,6867,1715,6076,3159,788,3140,4744,830,9253,5812,5021,7616,8534,1546,9590,1101,9012,9821,8132,7857,4086,1069,7491,2988,1579,2442,4321,2149,7642,6108,250,6086,3167,24,9528,7663,2685,1220,9196,1397,5776,1577,1730,5481,977,6115,199,6326,2183,3767,5928,5586,7561,663,8649,9688,949,5913,9160,1870,5764,9887,4477,6703,1413,4995,5494,7131,2192,8969,7138,3997,8697,646,1028],\n  [8074,1731,8245,624,4601,8706,155,8891,309,2552,8208,8452,2954,3124,3469,4246,3352,1105,4509,8677,9901,4416,8191,9283,5625,7120,2952,8881,7693,830,4580,8228,9459,8611,4499,1179,4988,1394,550,2336,6089,6872,269,7213,1848,917,6672,4890,656,1478,6536,3165,4743,4990,1176,6211,7207,5284,9730,4738,1549,4986,4942,8645,3698,9429,1439,2175,6549,3058,6513,1574,6988,8333,3406,5245,5431,7140,7085,6407],\n  [7845,4694,2530,8249,290,5948,5509,1588,5940,4495,5866,5021,4626,3979,3296,7589,4854,1998,5627,3926,8346,6512,9608,1918,7070,4747,4182,2858,2766,4606,6269,4107,8982,8568,9053,4244,5604,102,2756,727,5887,2566,7922,44,5986,621,1202,374,6988,4130,3627,6744,9443,4568,1398,8679,397,3928,9159,367,2917,6127,5788,3304,8129,911,2669,1463,9749,264,4478,8940,1109,7309,2462,117,4692,7724,225,2312],\n  [4164,3637,2000,941,8903,39,3443,7172,1031,3687,4901,8082,4945,4515,7204,9310,9349,9535,9940,218,1788,9245,2237,1541,5670,6538,6047,5553,9807,8101,1925,8714,445,8332,7309,6830,5786,5736,7306,2710,3034,1838,7969,6318,7912,2584,2080,7437,6705,2254,7428,820,782,9861,7596,3842,3631,8063,5240,6666,394,4565,7865,4895,9890,6028,6117,4724,9156,4473,4552,602,470,6191,4927,5387,884,3146,1978,3000],\n  [4258,6880,1696,3582,5793,4923,2119,1155,9056,9698,6603,3768,5514,9927,9609,6166,6566,4536,4985,4934,8076,9062,6741,6163,7399,4562,2337,5600,2919,9012,8459,1308,6072,1225,9306,8818,5886,7243,7365,8792,6007,9256,6699,7171,4230,7002,8720,7839,4533,1671,478,7774,1607,2317,5437,4705,7886,4760,6760,7271,3081,2997,3088,7675,6208,3101,6821,6840,122,9633,4900,2067,8546,4549,2091,7188,5605,8599,6758,5229],\n  [7854,5243,9155,3556,8812,7047,2202,1541,5993,4600,4760,713,434,7911,7426,7414,8729,322,803,7960,7563,4908,6285,6291,736,3389,9339,4132,8701,7534,5287,3646,592,3065,7582,2592,8755,6068,8597,1982,5782,1894,2900,6236,4039,6569,3037,5837,7698,700,7815,2491,7272,5878,3083,6778,6639,3589,5010,8313,2581,6617,5869,8402,6808,2951,2321,5195,497,2190,6187,1342,1316,4453,7740,4154,2959,1781,1482,8256],\n  [7178,2046,4419,744,8312,5356,6855,8839,319,2962,5662,47,6307,8662,68,4813,567,2712,9931,1678,3101,8227,6533,4933,6656,92,5846,4780,6256,6361,4323,9985,1231,2175,7178,3034,9744,6155,9165,7787,5836,9318,7860,9644,8941,6480,9443,8188,5928,161,6979,2352,5628,6991,1198,8067,5867,6620,3778,8426,2994,3122,3124,6335,3918,8897,2655,9670,634,1088,1576,8935,7255,474,8166,7417,9547,2886,5560,3842],\n  [6957,3111,26,7530,7143,1295,1744,6057,3009,1854,8098,5405,2234,4874,9447,2620,9303,27,7410,969,40,2966,5648,7596,8637,4238,3143,3679,7187,690,9980,7085,7714,9373,5632,7526,6707,3951,9734,4216,2146,3602,5371,6029,3039,4433,4855,4151,1449,3376,8009,7240,7027,4602,2947,9081,4045,8424,9352,8742,923,2705,4266,3232,2264,6761,363,2651,3383,7770,6730,7856,7340,9679,2158,610,4471,4608,910,6241],\n  [4417,6756,1013,8797,658,8809,5032,8703,7541,846,3357,2920,9817,1745,9980,7593,4667,3087,779,3218,6233,5568,4296,2289,2654,7898,5021,9461,5593,8214,9173,4203,2271,7980,2983,5952,9992,8399,3468,1776,3188,9314,1720,6523,2933,621,8685,5483,8986,6163,3444,9539,4320,155,3992,2828,2150,6071,524,2895,5468,8063,1210,3348,9071,4862,483,9017,4097,6186,9815,3610,5048,1644,1003,9865,9332,2145,1944,2213],\n  [9284,3803,4920,1927,6706,4344,7383,4786,9890,2010,5228,1224,3158,6967,8580,8990,8883,5213,76,8306,2031,4980,5639,9519,7184,5645,7769,3259,8077,9130,1317,3096,9624,3818,1770,695,2454,947,6029,3474,9938,3527,5696,4760,7724,7738,2848,6442,5767,6845,8323,4131,2859,7595,2500,4815,3660,9130,8580,7016,8231,4391,8369,3444,4069,4021,556,6154,627,2778,1496,4206,6356,8434,8491,3816,8231,3190,5575,1015],\n  [3787,7572,1788,6803,5641,6844,1961,4811,8535,9914,9999,1450,8857,738,4662,8569,6679,2225,7839,8618,286,2648,5342,2294,3205,4546,176,8705,3741,6134,8324,8021,7004,5205,7032,6637,9442,5539,5584,4819,5874,5807,8589,6871,9016,983,1758,3786,1519,6241,185,8398,495,3370,9133,3051,4549,9674,7311,9738,3316,9383,2658,2776,9481,7558,619,3943,3324,6491,4933,153,9738,4623,912,3595,7771,7939,1219,4405],\n  [2650,3883,4154,5809,315,7756,4430,1788,4451,1631,6461,7230,6017,5751,138,588,5282,2442,9110,9035,6349,2515,1570,6122,4192,4174,3530,1933,4186,4420,4609,5739,4135,2963,6308,1161,8809,8619,2796,3819,6971,8228,4188,1492,909,8048,2328,6772,8467,7671,9068,2226,7579,6422,7056,8042,3296,2272,3006,2196,7320,3238,3490,3102,37,1293,3212,4767,5041,8773,5794,4456,6174,7279,7054,2835,7053,9088,790,6640],\n  [3101,1057,7057,3826,6077,1025,2955,1224,1114,6729,5902,4698,6239,7203,9423,1804,4417,6686,1426,6941,8071,1029,4985,9010,6122,6597,1622,1574,3513,1684,7086,5505,3244,411,9638,4150,907,9135,829,981,1707,5359,8781,9751,5,9131,3973,7159,1340,6955,7514,7993,6964,8198,1933,2797,877,3993,4453,8020,9349,8646,2779,8679,2961,3547,3374,3510,1129,3568,2241,2625,9138,5974,8206,7669,7678,1833,8700,4480],\n  [4865,9912,8038,8238,782,3095,8199,1127,4501,7280,2112,2487,3626,2790,9432,1475,6312,8277,4827,2218,5806,7132,8752,1468,7471,6386,739,8762,8323,8120,5169,9078,9058,3370,9560,7987,8585,8531,5347,9312,1058,4271,1159,5286,5404,6925,8606,9204,7361,2415,560,586,4002,2644,1927,2824,768,4409,2942,3345,1002,808,4941,6267,7979,5140,8643,7553,9438,7320,4938,2666,4609,2778,8158,6730,3748,3867,1866,7181],\n  [171,3771,7134,8927,4778,2913,3326,2004,3089,7853,1378,1729,4777,2706,9578,1360,5693,3036,1851,7248,2403,2273,8536,6501,9216,613,9671,7131,7719,6425,773,717,8803,160,1114,7554,7197,753,4513,4322,8499,4533,2609,4226,8710,6627,644,9666,6260,4870,5744,7385,6542,6203,7703,6130,8944,5589,2262,6803,6381,7414,6888,5123,7320,9392,9061,6780,322,8975,7050,5089,1061,2260,3199,1150,1865,5386,9699,6501],\n  [3744,8454,6885,8277,919,1923,4001,6864,7854,5519,2491,6057,8794,9645,1776,5714,9786,9281,7538,6916,3215,395,2501,9618,4835,8846,9708,2813,3303,1794,8309,7176,2206,1602,1838,236,4593,2245,8993,4017,10,8215,6921,5206,4023,5932,6997,7801,262,7640,3107,8275,4938,7822,2425,3223,3886,2105,8700,9526,2088,8662,8034,7004,5710,2124,7164,3574,6630,9980,4242,2901,9471,1491,2117,4562,1130,9086,4117,6698],\n  [2810,2280,2331,1170,4554,4071,8387,1215,2274,9848,6738,1604,7281,8805,439,1298,8318,7834,9426,8603,6092,7944,1309,8828,303,3157,4638,4439,9175,1921,4695,7716,1494,1015,1772,5913,1127,1952,1950,8905,4064,9890,385,9357,7945,5035,7082,5369,4093,6546,5187,5637,2041,8946,1758,7111,6566,1027,1049,5148,7224,7248,296,6169,375,1656,7993,2816,3717,4279,4675,1609,3317,42,6201,3100,3144,163,9530,4531],\n  [7096,6070,1009,4988,3538,5801,7149,3063,2324,2912,7911,7002,4338,7880,2481,7368,3516,2016,7556,2193,1388,3865,8125,4637,4096,8114,750,3144,1938,7002,9343,4095,1392,4220,3455,6969,9647,1321,9048,1996,1640,6626,1788,314,9578,6630,2813,6626,4981,9908,7024,4355,3201,3521,3864,3303,464,1923,595,9801,3391,8366,8084,9374,1041,8807,9085,1892,9431,8317,9016,9221,8574,9981,9240,5395,2009,6310,2854,9255],\n  [8830,3145,2960,9615,8220,6061,3452,2918,6481,9278,2297,3385,6565,7066,7316,5682,107,7646,4466,68,1952,9603,8615,54,7191,791,6833,2560,693,9733,4168,570,9127,9537,1925,8287,5508,4297,8452,8795,6213,7994,2420,4208,524,5915,8602,8330,2651,8547,6156,1812,6271,7991,9407,9804,1553,6866,1128,2119,4691,9711,8315,5879,9935,6900,482,682,4126,1041,428,6247,3720,5882,7526,2582,4327,7725,3503,2631],\n  [2738,9323,721,7434,1453,6294,2957,3786,5722,6019,8685,4386,3066,9057,6860,499,5315,3045,5194,7111,3137,9104,941,586,3066,755,4177,8819,7040,5309,3583,3897,4428,7788,4721,7249,6559,7324,825,7311,3760,6064,6070,9672,4882,584,1365,9739,9331,5783,2624,7889,1604,1303,1555,7125,8312,425,8936,3233,7724,1480,403,7440,1784,1754,4721,1569,652,3893,4574,5692,9730,4813,9844,8291,9199,7101,3391,8914],\n  [6044,2928,9332,3328,8588,447,3830,1176,3523,2705,8365,6136,5442,9049,5526,8575,8869,9031,7280,706,2794,8814,5767,4241,7696,78,6570,556,5083,1426,4502,3336,9518,2292,1885,3740,3153,9348,9331,8051,2759,5407,9028,7840,9255,831,515,2612,9747,7435,8964,4971,2048,4900,5967,8271,1719,9670,2810,6777,1594,6367,6259,8316,3815,1689,6840,9437,4361,822,9619,3065,83,6344,7486,8657,8228,9635,6932,4864],\n  [8478,4777,6334,4678,7476,4963,6735,3096,5860,1405,5127,7269,7793,4738,227,9168,2996,8928,765,733,1276,7677,6258,1528,9558,3329,302,8901,1422,8277,6340,645,9125,8869,5952,141,8141,1816,9635,4025,4184,3093,83,2344,2747,9352,7966,1206,1126,1826,218,7939,2957,2729,810,8752,5247,4174,4038,8884,7899,9567,301,5265,5752,7524,4381,1669,3106,8270,6228,6373,754,2547,4240,2313,5514,3022,1040,9738],\n  [2265,8192,1763,1369,8469,8789,4836,52,1212,6690,5257,8918,6723,6319,378,4039,2421,8555,8184,9577,1432,7139,8078,5452,9628,7579,4161,7490,5159,8559,1011,81,478,5840,1964,1334,6875,8670,9900,739,1514,8692,522,9316,6955,1345,8132,2277,3193,9773,3923,4177,2183,1236,6747,6575,4874,6003,6409,8187,745,8776,9440,7543,9825,2582,7381,8147,7236,5185,7564,6125,218,7991,6394,391,7659,7456,5128,5294],\n  [2132,8992,8160,5782,4420,3371,3798,5054,552,5631,7546,4716,1332,6486,7892,7441,4370,6231,4579,2121,8615,1145,9391,1524,1385,2400,9437,2454,7896,7467,2928,8400,3299,4025,7458,4703,7206,6358,792,6200,725,4275,4136,7390,5984,4502,7929,5085,8176,4600,119,3568,76,9363,6943,2248,9077,9731,6213,5817,6729,4190,3092,6910,759,2682,8380,1254,9604,3011,9291,5329,9453,9746,2739,6522,3765,5634,1113,5789],\n  [5304,5499,564,2801,679,2653,1783,3608,7359,7797,3284,796,3222,437,7185,6135,8571,2778,7488,5746,678,6140,861,7750,803,9859,9918,2425,3734,2698,9005,4864,9818,6743,2475,132,9486,3825,5472,919,292,4411,7213,7699,6435,9019,6769,1388,802,2124,1345,8493,9487,8558,7061,8777,8833,2427,2238,5409,4957,8503,3171,7622,5779,6145,2417,5873,5563,5693,9574,9491,1937,7384,4563,6842,5432,2751,3406,7981]\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3be1000cf542c50fed1",
      "title": "Problem 82: Path sum: three ways",
      "challengeType": 1,
      "dashedName": "problem-82-path-sum-three-ways",
      "description": "**Note:** This problem is a more challenging version of Problem 81.\n\nThe minimal path sum in the 5 by 5 matrix below, by starting in any cell in the left column and finishing in any cell in the right column, and only moving up, down, and right, is indicated in red and bold; the sum is equal to `994`.\n\n  $$\\begin{pmatrix}\n  131 & 673 & \\color{red}{234} & \\color{red}{103} & \\color{red}{18}\\\\\\\\\n  \\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & 150\\\\\\\\\n  630 & 803 & 746 & 422 & 111\\\\\\\\\n  537 & 699 & 497 & 121 & 956\\\\\\\\\n  805 & 732 & 524 & 37 & 331\n  \\end{pmatrix}$$\n\nFind the minimal path sum from the left column to the right column in `matrix`, a 2D array representing a matrix. The maximum matrix size used in tests will be 80 by 80.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pathSumThreeWays(matrix) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst testMatrix1 = [\n  [131, 673, 234, 103, 18],\n  [201, 96, 342, 965, 150],\n  [630, 803, 746, 422, 111],\n  [537, 699, 497, 121, 956],\n  [805, 732, 524, 37, 331]\n];\n\npathSumThreeWays(testMatrix1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function pathSumThreeWays(matrix) {\n  function makeMinimumMoveFromUpOrRight(row, column) {\n    const curValue = matrix[row][column];\n    if (values[row - 1] > values[row]) {\n      return values[row] + curValue;\n    }\n    return values[row - 1] + curValue;\n  }\n  function isGoingFromDownBetter(row, column) {\n    return values[row] > values[row + 1] + matrix[row][column];\n  }\n\n  const size = matrix.length;\n  const values = [];\n  for (let row = 0; row < size; row++) {\n    values.push(matrix[row][size - 1]);\n  }\n\n  for (let column = size - 2; column >= 0; column--) {\n    values[0] += matrix[0][column];\n\n    for (let row = 1; row < size; row++) {\n      values[row] = makeMinimumMoveFromUpOrRight(row, column);\n    }\n\n    for (let row = size - 2; row >= 0; row--) {\n      if (isGoingFromDownBetter(row, column)) {\n        values[row] = values[row + 1] + matrix[row][column];\n      }\n    }\n  }\n\n  return Math.min(...values);\n}"
        }
      ],
      "tests": [
        {
          "text": "`pathSumThreeWays(testMatrix1)` should return a number.",
          "testCode": "assert(typeof pathSumThreeWays(_testMatrix1) === 'number');"
        },
        {
          "text": "`pathSumThreeWays(testMatrix1)` should return `994`.",
          "testCode": "assert.strictEqual(pathSumThreeWays(_testMatrix1), 994);"
        },
        {
          "text": "`pathSumThreeWays(testMatrix2)` should return `260324`.",
          "testCode": "assert.strictEqual(pathSumThreeWays(_testMatrix2), 260324);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302196,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-82-path-sum-three-ways.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testMatrix1 = [\n  [131, 673, 234, 103, 18],\n  [201, 96, 342, 965, 150],\n  [630, 803, 746, 422, 111],\n  [537, 699, 497, 121, 956],\n  [805, 732, 524, 37, 331]\n];\nconst _testMatrix2 = [\n  [4445,2697,5115,718,2209,2212,654,4348,3079,6821,7668,3276,8874,4190,3785,2752,9473,7817,9137,496,7338,3434,7152,4355,4552,7917,7827,2460,2350,691,3514,5880,3145,7633,7199,3783,5066,7487,3285,1084,8985,760,872,8609,8051,1134,9536,5750,9716,9371,7619,5617,275,9721,2997,2698,1887,8825,6372,3014,2113,7122,7050,6775,5948,2758,1219,3539,348,7989,2735,9862,1263,8089,6401,9462,3168,2758,3748,5870],\n  [1096,20,1318,7586,5167,2642,1443,5741,7621,7030,5526,4244,2348,4641,9827,2448,6918,5883,3737,300,7116,6531,567,5997,3971,6623,820,6148,3287,1874,7981,8424,7672,7575,6797,6717,1078,5008,4051,8795,5820,346,1851,6463,2117,6058,3407,8211,117,4822,1317,4377,4434,5925,8341,4800,1175,4173,690,8978,7470,1295,3799,8724,3509,9849,618,3320,7068,9633,2384,7175,544,6583,1908,9983,481,4187,9353,9377],\n  [9607,7385,521,6084,1364,8983,7623,1585,6935,8551,2574,8267,4781,3834,2764,2084,2669,4656,9343,7709,2203,9328,8004,6192,5856,3555,2260,5118,6504,1839,9227,1259,9451,1388,7909,5733,6968,8519,9973,1663,5315,7571,3035,4325,4283,2304,6438,3815,9213,9806,9536,196,5542,6907,2475,1159,5820,9075,9470,2179,9248,1828,4592,9167,3713,4640,47,3637,309,7344,6955,346,378,9044,8635,7466,5036,9515,6385,9230],\n  [7206,3114,7760,1094,6150,5182,7358,7387,4497,955,101,1478,7777,6966,7010,8417,6453,4955,3496,107,449,8271,131,2948,6185,784,5937,8001,6104,8282,4165,3642,710,2390,575,715,3089,6964,4217,192,5949,7006,715,3328,1152,66,8044,4319,1735,146,4818,5456,6451,4113,1063,4781,6799,602,1504,6245,6550,1417,1343,2363,3785,5448,4545,9371,5420,5068,4613,4882,4241,5043,7873,8042,8434,3939,9256,2187],\n  [3620,8024,577,9997,7377,7682,1314,1158,6282,6310,1896,2509,5436,1732,9480,706,496,101,6232,7375,2207,2306,110,6772,3433,2878,8140,5933,8688,1399,2210,7332,6172,6403,7333,4044,2291,1790,2446,7390,8698,5723,3678,7104,1825,2040,140,3982,4905,4160,2200,5041,2512,1488,2268,1175,7588,8321,8078,7312,977,5257,8465,5068,3453,3096,1651,7906,253,9250,6021,8791,8109,6651,3412,345,4778,5152,4883,7505],\n  [1074,5438,9008,2679,5397,5429,2652,3403,770,9188,4248,2493,4361,8327,9587,707,9525,5913,93,1899,328,2876,3604,673,8576,6908,7659,2544,3359,3883,5273,6587,3065,1749,3223,604,9925,6941,2823,8767,7039,3290,3214,1787,7904,3421,7137,9560,8451,2669,9219,6332,1576,5477,6755,8348,4164,4307,2984,4012,6629,1044,2874,6541,4942,903,1404,9125,5160,8836,4345,2581,460,8438,1538,5507,668,3352,2678,6942],\n  [4295,1176,5596,1521,3061,9868,7037,7129,8933,6659,5947,5063,3653,9447,9245,2679,767,714,116,8558,163,3927,8779,158,5093,2447,5782,3967,1716,931,7772,8164,1117,9244,5783,7776,3846,8862,6014,2330,6947,1777,3112,6008,3491,1906,5952,314,4602,8994,5919,9214,3995,5026,7688,6809,5003,3128,2509,7477,110,8971,3982,8539,2980,4689,6343,5411,2992,5270,5247,9260,2269,7474,1042,7162,5206,1232,4556,4757],\n  [510,3556,5377,1406,5721,4946,2635,7847,4251,8293,8281,6351,4912,287,2870,3380,3948,5322,3840,4738,9563,1906,6298,3234,8959,1562,6297,8835,7861,239,6618,1322,2553,2213,5053,5446,4402,6500,5182,8585,6900,5756,9661,903,5186,7687,5998,7997,8081,8955,4835,6069,2621,1581,732,9564,1082,1853,5442,1342,520,1737,3703,5321,4793,2776,1508,1647,9101,2499,6891,4336,7012,3329,3212,1442,9993,3988,4930,7706],\n  [9444,3401,5891,9716,1228,7107,109,3563,2700,6161,5039,4992,2242,8541,7372,2067,1294,3058,1306,320,8881,5756,9326,411,8650,8824,5495,8282,8397,2000,1228,7817,2099,6473,3571,5994,4447,1299,5991,543,7874,2297,1651,101,2093,3463,9189,6872,6118,872,1008,1779,2805,9084,4048,2123,5877,55,3075,1737,9459,4535,6453,3644,108,5982,4437,5213,1340,6967,9943,5815,669,8074,1838,6979,9132,9315,715,5048],\n  [3327,4030,7177,6336,9933,5296,2621,4785,2755,4832,2512,2118,2244,4407,2170,499,7532,9742,5051,7687,970,6924,3527,4694,5145,1306,2165,5940,2425,8910,3513,1909,6983,346,6377,4304,9330,7203,6605,3709,3346,970,369,9737,5811,4427,9939,3693,8436,5566,1977,3728,2399,3985,8303,2492,5366,9802,9193,7296,1033,5060,9144,2766,1151,7629,5169,5995,58,7619,7565,4208,1713,6279,3209,4908,9224,7409,1325,8540],\n  [6882,1265,1775,3648,4690,959,5837,4520,5394,1378,9485,1360,4018,578,9174,2932,9890,3696,116,1723,1178,9355,7063,1594,1918,8574,7594,7942,1547,6166,7888,354,6932,4651,1010,7759,6905,661,7689,6092,9292,3845,9605,8443,443,8275,5163,7720,7265,6356,7779,1798,1754,5225,6661,1180,8024,5666,88,9153,1840,3508,1193,4445,2648,3538,6243,6375,8107,5902,5423,2520,1122,5015,6113,8859,9370,966,8673,2442],\n  [7338,3423,4723,6533,848,8041,7921,8277,4094,5368,7252,8852,9166,2250,2801,6125,8093,5738,4038,9808,7359,9494,601,9116,4946,2702,5573,2921,9862,1462,1269,2410,4171,2709,7508,6241,7522,615,2407,8200,4189,5492,5649,7353,2590,5203,4274,710,7329,9063,956,8371,3722,4253,4785,1194,4828,4717,4548,940,983,2575,4511,2938,1827,2027,2700,1236,841,5760,1680,6260,2373,3851,1841,4968,1172,5179,7175,3509],\n  [4420,1327,3560,2376,6260,2988,9537,4064,4829,8872,9598,3228,1792,7118,9962,9336,4368,9189,6857,1829,9863,6287,7303,7769,2707,8257,2391,2009,3975,4993,3068,9835,3427,341,8412,2134,4034,8511,6421,3041,9012,2983,7289,100,1355,7904,9186,6920,5856,2008,6545,8331,3655,5011,839,8041,9255,6524,3862,8788,62,7455,3513,5003,8413,3918,2076,7960,6108,3638,6999,3436,1441,4858,4181,1866,8731,7745,3744,1000],\n  [356,8296,8325,1058,1277,4743,3850,2388,6079,6462,2815,5620,8495,5378,75,4324,3441,9870,1113,165,1544,1179,2834,562,6176,2313,6836,8839,2986,9454,5199,6888,1927,5866,8760,320,1792,8296,7898,6121,7241,5886,5814,2815,8336,1576,4314,3109,2572,6011,2086,9061,9403,3947,5487,9731,7281,3159,1819,1334,3181,5844,5114,9898,4634,2531,4412,6430,4262,8482,4546,4555,6804,2607,9421,686,8649,8860,7794,6672],\n  [9870,152,1558,4963,8750,4754,6521,6256,8818,5208,5691,9659,8377,9725,5050,5343,2539,6101,1844,9700,7750,8114,5357,3001,8830,4438,199,9545,8496,43,2078,327,9397,106,6090,8181,8646,6414,7499,5450,4850,6273,5014,4131,7639,3913,6571,8534,9703,4391,7618,445,1320,5,1894,6771,7383,9191,4708,9706,6939,7937,8726,9382,5216,3685,2247,9029,8154,1738,9984,2626,9438,4167,6351,5060,29,1218,1239,4785],\n  [192,5213,8297,8974,4032,6966,5717,1179,6523,4679,9513,1481,3041,5355,9303,9154,1389,8702,6589,7818,6336,3539,5538,3094,6646,6702,6266,2759,4608,4452,617,9406,8064,6379,444,5602,4950,1810,8391,1536,316,8714,1178,5182,5863,5110,5372,4954,1978,2971,5680,4863,2255,4630,5723,2168,538,1692,1319,7540,440,6430,6266,7712,7385,5702,620,641,3136,7350,1478,3155,2820,9109,6261,1122,4470,14,8493,2095],\n  [1046,4301,6082,474,4974,7822,2102,5161,5172,6946,8074,9716,6586,9962,9749,5015,2217,995,5388,4402,7652,6399,6539,1349,8101,3677,1328,9612,7922,2879,231,5887,2655,508,4357,4964,3554,5930,6236,7384,4614,280,3093,9600,2110,7863,2631,6626,6620,68,1311,7198,7561,1768,5139,1431,221,230,2940,968,5283,6517,2146,1646,869,9402,7068,8645,7058,1765,9690,4152,2926,9504,2939,7504,6074,2944,6470,7859],\n  [4659,736,4951,9344,1927,6271,8837,8711,3241,6579,7660,5499,5616,3743,5801,4682,9748,8796,779,1833,4549,8138,4026,775,4170,2432,4174,3741,7540,8017,2833,4027,396,811,2871,1150,9809,2719,9199,8504,1224,540,2051,3519,7982,7367,2761,308,3358,6505,2050,4836,5090,7864,805,2566,2409,6876,3361,8622,5572,5895,3280,441,7893,8105,1634,2929,274,3926,7786,6123,8233,9921,2674,5340,1445,203,4585,3837],\n  [5759,338,7444,7968,7742,3755,1591,4839,1705,650,7061,2461,9230,9391,9373,2413,1213,431,7801,4994,2380,2703,6161,6878,8331,2538,6093,1275,5065,5062,2839,582,1014,8109,3525,1544,1569,8622,7944,2905,6120,1564,1839,5570,7579,1318,2677,5257,4418,5601,7935,7656,5192,1864,5886,6083,5580,6202,8869,1636,7907,4759,9082,5854,3185,7631,6854,5872,5632,5280,1431,2077,9717,7431,4256,8261,9680,4487,4752,4286],\n  [1571,1428,8599,1230,7772,4221,8523,9049,4042,8726,7567,6736,9033,2104,4879,4967,6334,6716,3994,1269,8995,6539,3610,7667,6560,6065,874,848,4597,1711,7161,4811,6734,5723,6356,6026,9183,2586,5636,1092,7779,7923,8747,6887,7505,9909,1792,3233,4526,3176,1508,8043,720,5212,6046,4988,709,5277,8256,3642,1391,5803,1468,2145,3970,6301,7767,2359,8487,9771,8785,7520,856,1605,8972,2402,2386,991,1383,5963],\n  [1822,4824,5957,6511,9868,4113,301,9353,6228,2881,2966,6956,9124,9574,9233,1601,7340,973,9396,540,4747,8590,9535,3650,7333,7583,4806,3593,2738,8157,5215,8472,2284,9473,3906,6982,5505,6053,7936,6074,7179,6688,1564,1103,6860,5839,2022,8490,910,7551,7805,881,7024,1855,9448,4790,1274,3672,2810,774,7623,4223,4850,6071,9975,4935,1915,9771,6690,3846,517,463,7624,4511,614,6394,3661,7409,1395,8127],\n  [8738,3850,9555,3695,4383,2378,87,6256,6740,7682,9546,4255,6105,2000,1851,4073,8957,9022,6547,5189,2487,303,9602,7833,1628,4163,6678,3144,8589,7096,8913,5823,4890,7679,1212,9294,5884,2972,3012,3359,7794,7428,1579,4350,7246,4301,7779,7790,3294,9547,4367,3549,1958,8237,6758,3497,3250,3456,6318,1663,708,7714,6143,6890,3428,6853,9334,7992,591,6449,9786,1412,8500,722,5468,1371,108,3939,4199,2535],\n  [7047,4323,1934,5163,4166,461,3544,2767,6554,203,6098,2265,9078,2075,4644,6641,8412,9183,487,101,7566,5622,1975,5726,2920,5374,7779,5631,3753,3725,2672,3621,4280,1162,5812,345,8173,9785,1525,955,5603,2215,2580,5261,2765,2990,5979,389,3907,2484,1232,5933,5871,3304,1138,1616,5114,9199,5072,7442,7245,6472,4760,6359,9053,7876,2564,9404,3043,9026,2261,3374,4460,7306,2326,966,828,3274,1712,3446],\n  [3975,4565,8131,5800,4570,2306,8838,4392,9147,11,3911,7118,9645,4994,2028,6062,5431,2279,8752,2658,7836,994,7316,5336,7185,3289,1898,9689,2331,5737,3403,1124,2679,3241,7748,16,2724,5441,6640,9368,9081,5618,858,4969,17,2103,6035,8043,7475,2181,939,415,1617,8500,8253,2155,7843,7974,7859,1746,6336,3193,2617,8736,4079,6324,6645,8891,9396,5522,6103,1857,8979,3835,2475,1310,7422,610,8345,7615],\n  [9248,5397,5686,2988,3446,4359,6634,9141,497,9176,6773,7448,1907,8454,916,1596,2241,1626,1384,2741,3649,5362,8791,7170,2903,2475,5325,6451,924,3328,522,90,4813,9737,9557,691,2388,1383,4021,1609,9206,4707,5200,7107,8104,4333,9860,5013,1224,6959,8527,1877,4545,7772,6268,621,4915,9349,5970,706,9583,3071,4127,780,8231,3017,9114,3836,7503,2383,1977,4870,8035,2379,9704,1037,3992,3642,1016,4303],\n  [5093,138,4639,6609,1146,5565,95,7521,9077,2272,974,4388,2465,2650,722,4998,3567,3047,921,2736,7855,173,2065,4238,1048,5,6847,9548,8632,9194,5942,4777,7910,8971,6279,7253,2516,1555,1833,3184,9453,9053,6897,7808,8629,4877,1871,8055,4881,7639,1537,7701,2508,7564,5845,5023,2304,5396,3193,2955,1088,3801,6203,1748,3737,1276,13,4120,7715,8552,3047,2921,106,7508,304,1280,7140,2567,9135,5266],\n  [6237,4607,7527,9047,522,7371,4883,2540,5867,6366,5301,1570,421,276,3361,527,6637,4861,2401,7522,5808,9371,5298,2045,5096,5447,7755,5115,7060,8529,4078,1943,1697,1764,5453,7085,960,2405,739,2100,5800,728,9737,5704,5693,1431,8979,6428,673,7540,6,7773,5857,6823,150,5869,8486,684,5816,9626,7451,5579,8260,3397,5322,6920,1879,2127,2884,5478,4977,9016,6165,6292,3062,5671,5968,78,4619,4763],\n  [9905,7127,9390,5185,6923,3721,9164,9705,4341,1031,1046,5127,7376,6528,3248,4941,1178,7889,3364,4486,5358,9402,9158,8600,1025,874,1839,1783,309,9030,1843,845,8398,1433,7118,70,8071,2877,3904,8866,6722,4299,10,1929,5897,4188,600,1889,3325,2485,6473,4474,7444,6992,4846,6166,4441,2283,2629,4352,7775,1101,2214,9985,215,8270,9750,2740,8361,7103,5930,8664,9690,8302,9267,344,2077,1372,1880,9550],\n  [5825,8517,7769,2405,8204,1060,3603,7025,478,8334,1997,3692,7433,9101,7294,7498,9415,5452,3850,3508,6857,9213,6807,4412,7310,854,5384,686,4978,892,8651,3241,2743,3801,3813,8588,6701,4416,6990,6490,3197,6838,6503,114,8343,5844,8646,8694,65,791,5979,2687,2621,2019,8097,1423,3644,9764,4921,3266,3662,5561,2476,8271,8138,6147,1168,3340,1998,9874,6572,9873,6659,5609,2711,3931,9567,4143,7833,8887],\n  [6223,2099,2700,589,4716,8333,1362,5007,2753,2848,4441,8397,7192,8191,4916,9955,6076,3370,6396,6971,3156,248,3911,2488,4930,2458,7183,5455,170,6809,6417,3390,1956,7188,577,7526,2203,968,8164,479,8699,7915,507,6393,4632,1597,7534,3604,618,3280,6061,9793,9238,8347,568,9645,2070,5198,6482,5000,9212,6655,5961,7513,1323,3872,6170,3812,4146,2736,67,3151,5548,2781,9679,7564,5043,8587,1893,4531],\n  [5826,3690,6724,2121,9308,6986,8106,6659,2142,1642,7170,2877,5757,6494,8026,6571,8387,9961,6043,9758,9607,6450,8631,8334,7359,5256,8523,2225,7487,1977,9555,8048,5763,2414,4948,4265,2427,8978,8088,8841,9208,9601,5810,9398,8866,9138,4176,5875,7212,3272,6759,5678,7649,4922,5422,1343,8197,3154,3600,687,1028,4579,2084,9467,4492,7262,7296,6538,7657,7134,2077,1505,7332,6890,8964,4879,7603,7400,5973,739],\n  [1861,1613,4879,1884,7334,966,2000,7489,2123,4287,1472,3263,4726,9203,1040,4103,6075,6049,330,9253,4062,4268,1635,9960,577,1320,3195,9628,1030,4092,4979,6474,6393,2799,6967,8687,7724,7392,9927,2085,3200,6466,8702,265,7646,8665,7986,7266,4574,6587,612,2724,704,3191,8323,9523,3002,704,5064,3960,8209,2027,2758,8393,4875,4641,9584,6401,7883,7014,768,443,5490,7506,1852,2005,8850,5776,4487,4269],\n  [4052,6687,4705,7260,6645,6715,3706,5504,8672,2853,1136,8187,8203,4016,871,1809,1366,4952,9294,5339,6872,2645,6083,7874,3056,5218,7485,8796,7401,3348,2103,426,8572,4163,9171,3176,948,7654,9344,3217,1650,5580,7971,2622,76,2874,880,2034,9929,1546,2659,5811,3754,7096,7436,9694,9960,7415,2164,953,2360,4194,2397,1047,2196,6827,575,784,2675,8821,6802,7972,5996,6699,2134,7577,2887,1412,4349,4380],\n  [4629,2234,6240,8132,7592,3181,6389,1214,266,1910,2451,8784,2790,1127,6932,1447,8986,2492,5476,397,889,3027,7641,5083,5776,4022,185,3364,5701,2442,2840,4160,9525,4828,6602,2614,7447,3711,4505,7745,8034,6514,4907,2605,7753,6958,7270,6936,3006,8968,439,2326,4652,3085,3425,9863,5049,5361,8688,297,7580,8777,7916,6687,8683,7141,306,9569,2384,1500,3346,4601,7329,9040,6097,2727,6314,4501,4974,2829],\n  [8316,4072,2025,6884,3027,1808,5714,7624,7880,8528,4205,8686,7587,3230,1139,7273,6163,6986,3914,9309,1464,9359,4474,7095,2212,7302,2583,9462,7532,6567,1606,4436,8981,5612,6796,4385,5076,2007,6072,3678,8331,1338,3299,8845,4783,8613,4071,1232,6028,2176,3990,2148,3748,103,9453,538,6745,9110,926,3125,473,5970,8728,7072,9062,1404,1317,5139,9862,6496,6062,3338,464,1600,2532,1088,8232,7739,8274,3873],\n  [2341,523,7096,8397,8301,6541,9844,244,4993,2280,7689,4025,4196,5522,7904,6048,2623,9258,2149,9461,6448,8087,7245,1917,8340,7127,8466,5725,6996,3421,5313,512,9164,9837,9794,8369,4185,1488,7210,1524,1016,4620,9435,2478,7765,8035,697,6677,3724,6988,5853,7662,3895,9593,1185,4727,6025,5734,7665,3070,138,8469,6748,6459,561,7935,8646,2378,462,7755,3115,9690,8877,3946,2728,8793,244,6323,8666,4271],\n  [6430,2406,8994,56,1267,3826,9443,7079,7579,5232,6691,3435,6718,5698,4144,7028,592,2627,217,734,6194,8156,9118,58,2640,8069,4127,3285,694,3197,3377,4143,4802,3324,8134,6953,7625,3598,3584,4289,7065,3434,2106,7132,5802,7920,9060,7531,3321,1725,1067,3751,444,5503,6785,7937,6365,4803,198,6266,8177,1470,6390,1606,2904,7555,9834,8667,2033,1723,5167,1666,8546,8152,473,4475,6451,7947,3062,3281],\n  [2810,3042,7759,1741,2275,2609,7676,8640,4117,1958,7500,8048,1757,3954,9270,1971,4796,2912,660,5511,3553,1012,5757,4525,6084,7198,8352,5775,7726,8591,7710,9589,3122,4392,6856,5016,749,2285,3356,7482,9956,7348,2599,8944,495,3462,3578,551,4543,7207,7169,7796,1247,4278,6916,8176,3742,8385,2310,1345,8692,2667,4568,1770,8319,3585,4920,3890,4928,7343,5385,9772,7947,8786,2056,9266,3454,2807,877,2660],\n  [6206,8252,5928,5837,4177,4333,207,7934,5581,9526,8906,1498,8411,2984,5198,5134,2464,8435,8514,8674,3876,599,5327,826,2152,4084,2433,9327,9697,4800,2728,3608,3849,3861,3498,9943,1407,3991,7191,9110,5666,8434,4704,6545,5944,2357,1163,4995,9619,6754,4200,9682,6654,4862,4744,5953,6632,1054,293,9439,8286,2255,696,8709,1533,1844,6441,430,1999,6063,9431,7018,8057,2920,6266,6799,356,3597,4024,6665],\n  [3847,6356,8541,7225,2325,2946,5199,469,5450,7508,2197,9915,8284,7983,6341,3276,3321,16,1321,7608,5015,3362,8491,6968,6818,797,156,2575,706,9516,5344,5457,9210,5051,8099,1617,9951,7663,8253,9683,2670,1261,4710,1068,8753,4799,1228,2621,3275,6188,4699,1791,9518,8701,5932,4275,6011,9877,2933,4182,6059,2930,6687,6682,9771,654,9437,3169,8596,1827,5471,8909,2352,123,4394,3208,8756,5513,6917,2056],\n  [5458,8173,3138,3290,4570,4892,3317,4251,9699,7973,1163,1935,5477,6648,9614,5655,9592,975,9118,2194,7322,8248,8413,3462,8560,1907,7810,6650,7355,2939,4973,6894,3933,3784,3200,2419,9234,4747,2208,2207,1945,2899,1407,6145,8023,3484,5688,7686,2737,3828,3704,9004,5190,9740,8643,8650,5358,4426,1522,1707,3613,9887,6956,2447,2762,833,1449,9489,2573,1080,4167,3456,6809,2466,227,7125,2759,6250,6472,8089],\n  [3266,7025,9756,3914,1265,9116,7723,9788,6805,5493,2092,8688,6592,9173,4431,4028,6007,7131,4446,4815,3648,6701,759,3312,8355,4485,4187,5188,8746,7759,3528,2177,5243,8379,3838,7233,4607,9187,7216,2190,6967,2920,6082,7910,5354,3609,8958,6949,7731,494,8753,8707,1523,4426,3543,7085,647,6771,9847,646,5049,824,8417,5260,2730,5702,2513,9275,4279,2767,8684,1165,9903,4518,55,9682,8963,6005,2102,6523],\n  [1998,8731,936,1479,5259,7064,4085,91,7745,7136,3773,3810,730,8255,2705,2653,9790,6807,2342,355,9344,2668,3690,2028,9679,8102,574,4318,6481,9175,5423,8062,2867,9657,7553,3442,3920,7430,3945,7639,3714,3392,2525,4995,4850,2867,7951,9667,486,9506,9888,781,8866,1702,3795,90,356,1483,4200,2131,6969,5931,486,6880,4404,1084,5169,4910,6567,8335,4686,5043,2614,3352,2667,4513,6472,7471,5720,1616],\n  [8878,1613,1716,868,1906,2681,564,665,5995,2474,7496,3432,9491,9087,8850,8287,669,823,347,6194,2264,2592,7871,7616,8508,4827,760,2676,4660,4881,7572,3811,9032,939,4384,929,7525,8419,5556,9063,662,8887,7026,8534,3111,1454,2082,7598,5726,6687,9647,7608,73,3014,5063,670,5461,5631,3367,9796,8475,7908,5073,1565,5008,5295,4457,1274,4788,1728,338,600,8415,8535,9351,7750,6887,5845,1741,125],\n  [3637,6489,9634,9464,9055,2413,7824,9517,7532,3577,7050,6186,6980,9365,9782,191,870,2497,8498,2218,2757,5420,6468,586,3320,9230,1034,1393,9886,5072,9391,1178,8464,8042,6869,2075,8275,3601,7715,9470,8786,6475,8373,2159,9237,2066,3264,5000,679,355,3069,4073,494,2308,5512,4334,9438,8786,8637,9774,1169,1949,6594,6072,4270,9158,7916,5752,6794,9391,6301,5842,3285,2141,3898,8027,4310,8821,7079,1307],\n  [8497,6681,4732,7151,7060,5204,9030,7157,833,5014,8723,3207,9796,9286,4913,119,5118,7650,9335,809,3675,2597,5144,3945,5090,8384,187,4102,1260,2445,2792,4422,8389,9290,50,1765,1521,6921,8586,4368,1565,5727,7855,2003,4834,9897,5911,8630,5070,1330,7692,7557,7980,6028,5805,9090,8265,3019,3802,698,9149,5748,1965,9658,4417,5994,5584,8226,2937,272,5743,1278,5698,8736,2595,6475,5342,6596,1149,6920],\n  [8188,8009,9546,6310,8772,2500,9846,6592,6872,3857,1307,8125,7042,1544,6159,2330,643,4604,7899,6848,371,8067,2062,3200,7295,1857,9505,6936,384,2193,2190,301,8535,5503,1462,7380,5114,4824,8833,1763,4974,8711,9262,6698,3999,2645,6937,7747,1128,2933,3556,7943,2885,3122,9105,5447,418,2899,5148,3699,9021,9501,597,4084,175,1621,1,1079,6067,5812,4326,9914,6633,5394,4233,6728,9084,1864,5863,1225],\n  [9935,8793,9117,1825,9542,8246,8437,3331,9128,9675,6086,7075,319,1334,7932,3583,7167,4178,1726,7720,695,8277,7887,6359,5912,1719,2780,8529,1359,2013,4498,8072,1129,9998,1147,8804,9405,6255,1619,2165,7491,1,8882,7378,3337,503,5758,4109,3577,985,3200,7615,8058,5032,1080,6410,6873,5496,1466,2412,9885,5904,4406,3605,8770,4361,6205,9193,1537,9959,214,7260,9566,1685,100,4920,7138,9819,5637,976],\n  [3466,9854,985,1078,7222,8888,5466,5379,3578,4540,6853,8690,3728,6351,7147,3134,6921,9692,857,3307,4998,2172,5783,3931,9417,2541,6299,13,787,2099,9131,9494,896,8600,1643,8419,7248,2660,2609,8579,91,6663,5506,7675,1947,6165,4286,1972,9645,3805,1663,1456,8853,5705,9889,7489,1107,383,4044,2969,3343,152,7805,4980,9929,5033,1737,9953,7197,9158,4071,1324,473,9676,3984,9680,3606,8160,7384,5432],\n  [1005,4512,5186,3953,2164,3372,4097,3247,8697,3022,9896,4101,3871,6791,3219,2742,4630,6967,7829,5991,6134,1197,1414,8923,8787,1394,8852,5019,7768,5147,8004,8825,5062,9625,7988,1110,3992,7984,9966,6516,6251,8270,421,3723,1432,4830,6935,8095,9059,2214,6483,6846,3120,1587,6201,6691,9096,9627,6671,4002,3495,9939,7708,7465,5879,6959,6634,3241,3401,2355,9061,2611,7830,3941,2177,2146,5089,7079,519,6351],\n  [7280,8586,4261,2831,7217,3141,9994,9940,5462,2189,4005,6942,9848,5350,8060,6665,7519,4324,7684,657,9453,9296,2944,6843,7499,7847,1728,9681,3906,6353,5529,2822,3355,3897,7724,4257,7489,8672,4356,3983,1948,6892,7415,4153,5893,4190,621,1736,4045,9532,7701,3671,1211,1622,3176,4524,9317,7800,5638,6644,6943,5463,3531,2821,1347,5958,3436,1438,2999,994,850,4131,2616,1549,3465,5946,690,9273,6954,7991],\n  [9517,399,3249,2596,7736,2142,1322,968,7350,1614,468,3346,3265,7222,6086,1661,5317,2582,7959,4685,2807,2917,1037,5698,1529,3972,8716,2634,3301,3412,8621,743,8001,4734,888,7744,8092,3671,8941,1487,5658,7099,2781,99,1932,4443,4756,4652,9328,1581,7855,4312,5976,7255,6480,3996,2748,1973,9731,4530,2790,9417,7186,5303,3557,351,7182,9428,1342,9020,7599,1392,8304,2070,9138,7215,2008,9937,1106,7110],\n  [7444,769,9688,632,1571,6820,8743,4338,337,3366,3073,1946,8219,104,4210,6986,249,5061,8693,7960,6546,1004,8857,5997,9352,4338,6105,5008,2556,6518,6694,4345,3727,7956,20,3954,8652,4424,9387,2035,8358,5962,5304,5194,8650,8282,1256,1103,2138,6679,1985,3653,2770,2433,4278,615,2863,1715,242,3790,2636,6998,3088,1671,2239,957,5411,4595,6282,2881,9974,2401,875,7574,2987,4587,3147,6766,9885,2965],\n  [3287,3016,3619,6818,9073,6120,5423,557,2900,2015,8111,3873,1314,4189,1846,4399,7041,7583,2427,2864,3525,5002,2069,748,1948,6015,2684,438,770,8367,1663,7887,7759,1885,157,7770,4520,4878,3857,1137,3525,3050,6276,5569,7649,904,4533,7843,2199,5648,7628,9075,9441,3600,7231,2388,5640,9096,958,3058,584,5899,8150,1181,9616,1098,8162,6819,8171,1519,1140,7665,8801,2632,1299,9192,707,9955,2710,7314],\n  [1772,2963,7578,3541,3095,1488,7026,2634,6015,4633,4370,2762,1650,2174,909,8158,2922,8467,4198,4280,9092,8856,8835,5457,2790,8574,9742,5054,9547,4156,7940,8126,9824,7340,8840,6574,3547,1477,3014,6798,7134,435,9484,9859,3031,4,1502,4133,1738,1807,4825,463,6343,9701,8506,9822,9555,8688,8168,3467,3234,6318,1787,5591,419,6593,7974,8486,9861,6381,6758,194,3061,4315,2863,4665,3789,2201,1492,4416],\n  [126,8927,6608,5682,8986,6867,1715,6076,3159,788,3140,4744,830,9253,5812,5021,7616,8534,1546,9590,1101,9012,9821,8132,7857,4086,1069,7491,2988,1579,2442,4321,2149,7642,6108,250,6086,3167,24,9528,7663,2685,1220,9196,1397,5776,1577,1730,5481,977,6115,199,6326,2183,3767,5928,5586,7561,663,8649,9688,949,5913,9160,1870,5764,9887,4477,6703,1413,4995,5494,7131,2192,8969,7138,3997,8697,646,1028],\n  [8074,1731,8245,624,4601,8706,155,8891,309,2552,8208,8452,2954,3124,3469,4246,3352,1105,4509,8677,9901,4416,8191,9283,5625,7120,2952,8881,7693,830,4580,8228,9459,8611,4499,1179,4988,1394,550,2336,6089,6872,269,7213,1848,917,6672,4890,656,1478,6536,3165,4743,4990,1176,6211,7207,5284,9730,4738,1549,4986,4942,8645,3698,9429,1439,2175,6549,3058,6513,1574,6988,8333,3406,5245,5431,7140,7085,6407],\n  [7845,4694,2530,8249,290,5948,5509,1588,5940,4495,5866,5021,4626,3979,3296,7589,4854,1998,5627,3926,8346,6512,9608,1918,7070,4747,4182,2858,2766,4606,6269,4107,8982,8568,9053,4244,5604,102,2756,727,5887,2566,7922,44,5986,621,1202,374,6988,4130,3627,6744,9443,4568,1398,8679,397,3928,9159,367,2917,6127,5788,3304,8129,911,2669,1463,9749,264,4478,8940,1109,7309,2462,117,4692,7724,225,2312],\n  [4164,3637,2000,941,8903,39,3443,7172,1031,3687,4901,8082,4945,4515,7204,9310,9349,9535,9940,218,1788,9245,2237,1541,5670,6538,6047,5553,9807,8101,1925,8714,445,8332,7309,6830,5786,5736,7306,2710,3034,1838,7969,6318,7912,2584,2080,7437,6705,2254,7428,820,782,9861,7596,3842,3631,8063,5240,6666,394,4565,7865,4895,9890,6028,6117,4724,9156,4473,4552,602,470,6191,4927,5387,884,3146,1978,3000],\n  [4258,6880,1696,3582,5793,4923,2119,1155,9056,9698,6603,3768,5514,9927,9609,6166,6566,4536,4985,4934,8076,9062,6741,6163,7399,4562,2337,5600,2919,9012,8459,1308,6072,1225,9306,8818,5886,7243,7365,8792,6007,9256,6699,7171,4230,7002,8720,7839,4533,1671,478,7774,1607,2317,5437,4705,7886,4760,6760,7271,3081,2997,3088,7675,6208,3101,6821,6840,122,9633,4900,2067,8546,4549,2091,7188,5605,8599,6758,5229],\n  [7854,5243,9155,3556,8812,7047,2202,1541,5993,4600,4760,713,434,7911,7426,7414,8729,322,803,7960,7563,4908,6285,6291,736,3389,9339,4132,8701,7534,5287,3646,592,3065,7582,2592,8755,6068,8597,1982,5782,1894,2900,6236,4039,6569,3037,5837,7698,700,7815,2491,7272,5878,3083,6778,6639,3589,5010,8313,2581,6617,5869,8402,6808,2951,2321,5195,497,2190,6187,1342,1316,4453,7740,4154,2959,1781,1482,8256],\n  [7178,2046,4419,744,8312,5356,6855,8839,319,2962,5662,47,6307,8662,68,4813,567,2712,9931,1678,3101,8227,6533,4933,6656,92,5846,4780,6256,6361,4323,9985,1231,2175,7178,3034,9744,6155,9165,7787,5836,9318,7860,9644,8941,6480,9443,8188,5928,161,6979,2352,5628,6991,1198,8067,5867,6620,3778,8426,2994,3122,3124,6335,3918,8897,2655,9670,634,1088,1576,8935,7255,474,8166,7417,9547,2886,5560,3842],\n  [6957,3111,26,7530,7143,1295,1744,6057,3009,1854,8098,5405,2234,4874,9447,2620,9303,27,7410,969,40,2966,5648,7596,8637,4238,3143,3679,7187,690,9980,7085,7714,9373,5632,7526,6707,3951,9734,4216,2146,3602,5371,6029,3039,4433,4855,4151,1449,3376,8009,7240,7027,4602,2947,9081,4045,8424,9352,8742,923,2705,4266,3232,2264,6761,363,2651,3383,7770,6730,7856,7340,9679,2158,610,4471,4608,910,6241],\n  [4417,6756,1013,8797,658,8809,5032,8703,7541,846,3357,2920,9817,1745,9980,7593,4667,3087,779,3218,6233,5568,4296,2289,2654,7898,5021,9461,5593,8214,9173,4203,2271,7980,2983,5952,9992,8399,3468,1776,3188,9314,1720,6523,2933,621,8685,5483,8986,6163,3444,9539,4320,155,3992,2828,2150,6071,524,2895,5468,8063,1210,3348,9071,4862,483,9017,4097,6186,9815,3610,5048,1644,1003,9865,9332,2145,1944,2213],\n  [9284,3803,4920,1927,6706,4344,7383,4786,9890,2010,5228,1224,3158,6967,8580,8990,8883,5213,76,8306,2031,4980,5639,9519,7184,5645,7769,3259,8077,9130,1317,3096,9624,3818,1770,695,2454,947,6029,3474,9938,3527,5696,4760,7724,7738,2848,6442,5767,6845,8323,4131,2859,7595,2500,4815,3660,9130,8580,7016,8231,4391,8369,3444,4069,4021,556,6154,627,2778,1496,4206,6356,8434,8491,3816,8231,3190,5575,1015],\n  [3787,7572,1788,6803,5641,6844,1961,4811,8535,9914,9999,1450,8857,738,4662,8569,6679,2225,7839,8618,286,2648,5342,2294,3205,4546,176,8705,3741,6134,8324,8021,7004,5205,7032,6637,9442,5539,5584,4819,5874,5807,8589,6871,9016,983,1758,3786,1519,6241,185,8398,495,3370,9133,3051,4549,9674,7311,9738,3316,9383,2658,2776,9481,7558,619,3943,3324,6491,4933,153,9738,4623,912,3595,7771,7939,1219,4405],\n  [2650,3883,4154,5809,315,7756,4430,1788,4451,1631,6461,7230,6017,5751,138,588,5282,2442,9110,9035,6349,2515,1570,6122,4192,4174,3530,1933,4186,4420,4609,5739,4135,2963,6308,1161,8809,8619,2796,3819,6971,8228,4188,1492,909,8048,2328,6772,8467,7671,9068,2226,7579,6422,7056,8042,3296,2272,3006,2196,7320,3238,3490,3102,37,1293,3212,4767,5041,8773,5794,4456,6174,7279,7054,2835,7053,9088,790,6640],\n  [3101,1057,7057,3826,6077,1025,2955,1224,1114,6729,5902,4698,6239,7203,9423,1804,4417,6686,1426,6941,8071,1029,4985,9010,6122,6597,1622,1574,3513,1684,7086,5505,3244,411,9638,4150,907,9135,829,981,1707,5359,8781,9751,5,9131,3973,7159,1340,6955,7514,7993,6964,8198,1933,2797,877,3993,4453,8020,9349,8646,2779,8679,2961,3547,3374,3510,1129,3568,2241,2625,9138,5974,8206,7669,7678,1833,8700,4480],\n  [4865,9912,8038,8238,782,3095,8199,1127,4501,7280,2112,2487,3626,2790,9432,1475,6312,8277,4827,2218,5806,7132,8752,1468,7471,6386,739,8762,8323,8120,5169,9078,9058,3370,9560,7987,8585,8531,5347,9312,1058,4271,1159,5286,5404,6925,8606,9204,7361,2415,560,586,4002,2644,1927,2824,768,4409,2942,3345,1002,808,4941,6267,7979,5140,8643,7553,9438,7320,4938,2666,4609,2778,8158,6730,3748,3867,1866,7181],\n  [171,3771,7134,8927,4778,2913,3326,2004,3089,7853,1378,1729,4777,2706,9578,1360,5693,3036,1851,7248,2403,2273,8536,6501,9216,613,9671,7131,7719,6425,773,717,8803,160,1114,7554,7197,753,4513,4322,8499,4533,2609,4226,8710,6627,644,9666,6260,4870,5744,7385,6542,6203,7703,6130,8944,5589,2262,6803,6381,7414,6888,5123,7320,9392,9061,6780,322,8975,7050,5089,1061,2260,3199,1150,1865,5386,9699,6501],\n  [3744,8454,6885,8277,919,1923,4001,6864,7854,5519,2491,6057,8794,9645,1776,5714,9786,9281,7538,6916,3215,395,2501,9618,4835,8846,9708,2813,3303,1794,8309,7176,2206,1602,1838,236,4593,2245,8993,4017,10,8215,6921,5206,4023,5932,6997,7801,262,7640,3107,8275,4938,7822,2425,3223,3886,2105,8700,9526,2088,8662,8034,7004,5710,2124,7164,3574,6630,9980,4242,2901,9471,1491,2117,4562,1130,9086,4117,6698],\n  [2810,2280,2331,1170,4554,4071,8387,1215,2274,9848,6738,1604,7281,8805,439,1298,8318,7834,9426,8603,6092,7944,1309,8828,303,3157,4638,4439,9175,1921,4695,7716,1494,1015,1772,5913,1127,1952,1950,8905,4064,9890,385,9357,7945,5035,7082,5369,4093,6546,5187,5637,2041,8946,1758,7111,6566,1027,1049,5148,7224,7248,296,6169,375,1656,7993,2816,3717,4279,4675,1609,3317,42,6201,3100,3144,163,9530,4531],\n  [7096,6070,1009,4988,3538,5801,7149,3063,2324,2912,7911,7002,4338,7880,2481,7368,3516,2016,7556,2193,1388,3865,8125,4637,4096,8114,750,3144,1938,7002,9343,4095,1392,4220,3455,6969,9647,1321,9048,1996,1640,6626,1788,314,9578,6630,2813,6626,4981,9908,7024,4355,3201,3521,3864,3303,464,1923,595,9801,3391,8366,8084,9374,1041,8807,9085,1892,9431,8317,9016,9221,8574,9981,9240,5395,2009,6310,2854,9255],\n  [8830,3145,2960,9615,8220,6061,3452,2918,6481,9278,2297,3385,6565,7066,7316,5682,107,7646,4466,68,1952,9603,8615,54,7191,791,6833,2560,693,9733,4168,570,9127,9537,1925,8287,5508,4297,8452,8795,6213,7994,2420,4208,524,5915,8602,8330,2651,8547,6156,1812,6271,7991,9407,9804,1553,6866,1128,2119,4691,9711,8315,5879,9935,6900,482,682,4126,1041,428,6247,3720,5882,7526,2582,4327,7725,3503,2631],\n  [2738,9323,721,7434,1453,6294,2957,3786,5722,6019,8685,4386,3066,9057,6860,499,5315,3045,5194,7111,3137,9104,941,586,3066,755,4177,8819,7040,5309,3583,3897,4428,7788,4721,7249,6559,7324,825,7311,3760,6064,6070,9672,4882,584,1365,9739,9331,5783,2624,7889,1604,1303,1555,7125,8312,425,8936,3233,7724,1480,403,7440,1784,1754,4721,1569,652,3893,4574,5692,9730,4813,9844,8291,9199,7101,3391,8914],\n  [6044,2928,9332,3328,8588,447,3830,1176,3523,2705,8365,6136,5442,9049,5526,8575,8869,9031,7280,706,2794,8814,5767,4241,7696,78,6570,556,5083,1426,4502,3336,9518,2292,1885,3740,3153,9348,9331,8051,2759,5407,9028,7840,9255,831,515,2612,9747,7435,8964,4971,2048,4900,5967,8271,1719,9670,2810,6777,1594,6367,6259,8316,3815,1689,6840,9437,4361,822,9619,3065,83,6344,7486,8657,8228,9635,6932,4864],\n  [8478,4777,6334,4678,7476,4963,6735,3096,5860,1405,5127,7269,7793,4738,227,9168,2996,8928,765,733,1276,7677,6258,1528,9558,3329,302,8901,1422,8277,6340,645,9125,8869,5952,141,8141,1816,9635,4025,4184,3093,83,2344,2747,9352,7966,1206,1126,1826,218,7939,2957,2729,810,8752,5247,4174,4038,8884,7899,9567,301,5265,5752,7524,4381,1669,3106,8270,6228,6373,754,2547,4240,2313,5514,3022,1040,9738],\n  [2265,8192,1763,1369,8469,8789,4836,52,1212,6690,5257,8918,6723,6319,378,4039,2421,8555,8184,9577,1432,7139,8078,5452,9628,7579,4161,7490,5159,8559,1011,81,478,5840,1964,1334,6875,8670,9900,739,1514,8692,522,9316,6955,1345,8132,2277,3193,9773,3923,4177,2183,1236,6747,6575,4874,6003,6409,8187,745,8776,9440,7543,9825,2582,7381,8147,7236,5185,7564,6125,218,7991,6394,391,7659,7456,5128,5294],\n  [2132,8992,8160,5782,4420,3371,3798,5054,552,5631,7546,4716,1332,6486,7892,7441,4370,6231,4579,2121,8615,1145,9391,1524,1385,2400,9437,2454,7896,7467,2928,8400,3299,4025,7458,4703,7206,6358,792,6200,725,4275,4136,7390,5984,4502,7929,5085,8176,4600,119,3568,76,9363,6943,2248,9077,9731,6213,5817,6729,4190,3092,6910,759,2682,8380,1254,9604,3011,9291,5329,9453,9746,2739,6522,3765,5634,1113,5789],\n  [5304,5499,564,2801,679,2653,1783,3608,7359,7797,3284,796,3222,437,7185,6135,8571,2778,7488,5746,678,6140,861,7750,803,9859,9918,2425,3734,2698,9005,4864,9818,6743,2475,132,9486,3825,5472,919,292,4411,7213,7699,6435,9019,6769,1388,802,2124,1345,8493,9487,8558,7061,8777,8833,2427,2238,5409,4957,8503,3171,7622,5779,6145,2417,5873,5563,5693,9574,9491,1937,7384,4563,6842,5432,2751,3406,7981]\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3bf1000cf542c50fed2",
      "title": "Problem 83: Path sum: four ways",
      "challengeType": 1,
      "dashedName": "problem-83-path-sum-four-ways",
      "description": "**Note:** This problem is a significantly more challenging version of Problem 81.\n\nIn the 5 by 5 matrix below, the minimal path sum from the top left to the bottom right, by moving left, right, up, and down, is indicated in bold red and is equal to `2297`.\n\n  $$\\begin{pmatrix}\n  \\color{red}{131} & 673 & \\color{red}{234} & \\color{red}{103} & \\color{red}{18}\\\\\\\\\n  \\color{red}{201} & \\color{red}{96} & \\color{red}{342} & 965 & \\color{red}{150}\\\\\\\\\n  630 & 803 & 746 & \\color{red}{422} & \\color{red}{111}\\\\\\\\\n  537 & 699 & 497 & \\color{red}{121} & 956\\\\\\\\\n  805 & 732 & 524 & \\color{red}{37} & \\color{red}{331}\n  \\end{pmatrix}$$\n\nFind the minimal path sum from the top left to the bottom right by moving left, right, up, and down in `matrix`, a 2D array representing a matrix. The maximum matrix size used in tests will be 80 by 80.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pathSumFourWays(matrix) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst testMatrix1 = [\n  [131, 673, 234, 103, 18],\n  [201, 96, 342, 965, 150],\n  [630, 803, 746, 422, 111],\n  [537, 699, 497, 121, 956],\n  [805, 732, 524, 37, 331]\n];\n\npathSumFourWays(testMatrix1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function pathSumFourWays(matrix) {\n  const MOVES = [\n    [-1, 0],\n    [1, 0],\n    [0, -1],\n    [0, 1]\n  ];\n\n  function getAllowedMoves(row, col) {\n    const moves = [];\n    for (let i = 0; i < MOVES.length; i++) {\n      const [rowChange, colChange] = MOVES[i];\n      const nextRow = row + rowChange;\n      const nextCol = col + colChange;\n      if (isMoveAllowed(nextRow, nextCol)) {\n        moves.push([nextRow, nextCol]);\n      }\n    }\n    return moves;\n  }\n\n  function isMoveAllowed(nextRow, nextCol) {\n    if (nextRow < 0 || nextRow >= size || nextCol < 0 || nextCol >= size) {\n      return false;\n    }\n    return true;\n  }\n\n  const size = matrix.length;\n  const resultMatrix = new Array(size)\n    .fill()\n    .map(() => new Array(size).fill(Infinity));\n\n  const [startRow, startCol] = new Array(2).fill(size - 1);\n  const queue = [[startRow, startCol]];\n  resultMatrix[startRow][startCol] = matrix[startRow][startCol];\n\n  while (queue.length > 0) {\n    const [curRow, curCol] = queue.shift();\n\n    const allowedMoves = getAllowedMoves(curRow, curCol);\n\n    for (let i = 0; i < allowedMoves.length; i++) {\n      const [nextRow, nextCol] = allowedMoves[i];\n      const bestPath = resultMatrix[nextRow][nextCol];\n      const newPath = resultMatrix[curRow][curCol] + matrix[nextRow][nextCol];\n      if (newPath < bestPath) {\n        resultMatrix[nextRow][nextCol] = newPath;\n        queue.push(allowedMoves[i]);\n      }\n    }\n  }\n  return resultMatrix[0][0];\n}"
        }
      ],
      "tests": [
        {
          "text": "`pathSumFourWays(testMatrix1)` should return a number.",
          "testCode": "assert(typeof pathSumFourWays(_testMatrix1) === 'number');"
        },
        {
          "text": "`pathSumFourWays(testMatrix1)` should return `2297`.",
          "testCode": "assert.strictEqual(pathSumFourWays(_testMatrix1), 2297);"
        },
        {
          "text": "`pathSumFourWays(testMatrix2)` should return `425185`.",
          "testCode": "assert.strictEqual(pathSumFourWays(_testMatrix2), 425185);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302197,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-83-path-sum-four-ways.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testMatrix1 = [\n  [131, 673, 234, 103, 18],\n  [201, 96, 342, 965, 150],\n  [630, 803, 746, 422, 111],\n  [537, 699, 497, 121, 956],\n  [805, 732, 524, 37, 331]\n];\nconst _testMatrix2 = [\n  [4445,2697,5115,718,2209,2212,654,4348,3079,6821,7668,3276,8874,4190,3785,2752,9473,7817,9137,496,7338,3434,7152,4355,4552,7917,7827,2460,2350,691,3514,5880,3145,7633,7199,3783,5066,7487,3285,1084,8985,760,872,8609,8051,1134,9536,5750,9716,9371,7619,5617,275,9721,2997,2698,1887,8825,6372,3014,2113,7122,7050,6775,5948,2758,1219,3539,348,7989,2735,9862,1263,8089,6401,9462,3168,2758,3748,5870],\n  [1096,20,1318,7586,5167,2642,1443,5741,7621,7030,5526,4244,2348,4641,9827,2448,6918,5883,3737,300,7116,6531,567,5997,3971,6623,820,6148,3287,1874,7981,8424,7672,7575,6797,6717,1078,5008,4051,8795,5820,346,1851,6463,2117,6058,3407,8211,117,4822,1317,4377,4434,5925,8341,4800,1175,4173,690,8978,7470,1295,3799,8724,3509,9849,618,3320,7068,9633,2384,7175,544,6583,1908,9983,481,4187,9353,9377],\n  [9607,7385,521,6084,1364,8983,7623,1585,6935,8551,2574,8267,4781,3834,2764,2084,2669,4656,9343,7709,2203,9328,8004,6192,5856,3555,2260,5118,6504,1839,9227,1259,9451,1388,7909,5733,6968,8519,9973,1663,5315,7571,3035,4325,4283,2304,6438,3815,9213,9806,9536,196,5542,6907,2475,1159,5820,9075,9470,2179,9248,1828,4592,9167,3713,4640,47,3637,309,7344,6955,346,378,9044,8635,7466,5036,9515,6385,9230],\n  [7206,3114,7760,1094,6150,5182,7358,7387,4497,955,101,1478,7777,6966,7010,8417,6453,4955,3496,107,449,8271,131,2948,6185,784,5937,8001,6104,8282,4165,3642,710,2390,575,715,3089,6964,4217,192,5949,7006,715,3328,1152,66,8044,4319,1735,146,4818,5456,6451,4113,1063,4781,6799,602,1504,6245,6550,1417,1343,2363,3785,5448,4545,9371,5420,5068,4613,4882,4241,5043,7873,8042,8434,3939,9256,2187],\n  [3620,8024,577,9997,7377,7682,1314,1158,6282,6310,1896,2509,5436,1732,9480,706,496,101,6232,7375,2207,2306,110,6772,3433,2878,8140,5933,8688,1399,2210,7332,6172,6403,7333,4044,2291,1790,2446,7390,8698,5723,3678,7104,1825,2040,140,3982,4905,4160,2200,5041,2512,1488,2268,1175,7588,8321,8078,7312,977,5257,8465,5068,3453,3096,1651,7906,253,9250,6021,8791,8109,6651,3412,345,4778,5152,4883,7505],\n  [1074,5438,9008,2679,5397,5429,2652,3403,770,9188,4248,2493,4361,8327,9587,707,9525,5913,93,1899,328,2876,3604,673,8576,6908,7659,2544,3359,3883,5273,6587,3065,1749,3223,604,9925,6941,2823,8767,7039,3290,3214,1787,7904,3421,7137,9560,8451,2669,9219,6332,1576,5477,6755,8348,4164,4307,2984,4012,6629,1044,2874,6541,4942,903,1404,9125,5160,8836,4345,2581,460,8438,1538,5507,668,3352,2678,6942],\n  [4295,1176,5596,1521,3061,9868,7037,7129,8933,6659,5947,5063,3653,9447,9245,2679,767,714,116,8558,163,3927,8779,158,5093,2447,5782,3967,1716,931,7772,8164,1117,9244,5783,7776,3846,8862,6014,2330,6947,1777,3112,6008,3491,1906,5952,314,4602,8994,5919,9214,3995,5026,7688,6809,5003,3128,2509,7477,110,8971,3982,8539,2980,4689,6343,5411,2992,5270,5247,9260,2269,7474,1042,7162,5206,1232,4556,4757],\n  [510,3556,5377,1406,5721,4946,2635,7847,4251,8293,8281,6351,4912,287,2870,3380,3948,5322,3840,4738,9563,1906,6298,3234,8959,1562,6297,8835,7861,239,6618,1322,2553,2213,5053,5446,4402,6500,5182,8585,6900,5756,9661,903,5186,7687,5998,7997,8081,8955,4835,6069,2621,1581,732,9564,1082,1853,5442,1342,520,1737,3703,5321,4793,2776,1508,1647,9101,2499,6891,4336,7012,3329,3212,1442,9993,3988,4930,7706],\n  [9444,3401,5891,9716,1228,7107,109,3563,2700,6161,5039,4992,2242,8541,7372,2067,1294,3058,1306,320,8881,5756,9326,411,8650,8824,5495,8282,8397,2000,1228,7817,2099,6473,3571,5994,4447,1299,5991,543,7874,2297,1651,101,2093,3463,9189,6872,6118,872,1008,1779,2805,9084,4048,2123,5877,55,3075,1737,9459,4535,6453,3644,108,5982,4437,5213,1340,6967,9943,5815,669,8074,1838,6979,9132,9315,715,5048],\n  [3327,4030,7177,6336,9933,5296,2621,4785,2755,4832,2512,2118,2244,4407,2170,499,7532,9742,5051,7687,970,6924,3527,4694,5145,1306,2165,5940,2425,8910,3513,1909,6983,346,6377,4304,9330,7203,6605,3709,3346,970,369,9737,5811,4427,9939,3693,8436,5566,1977,3728,2399,3985,8303,2492,5366,9802,9193,7296,1033,5060,9144,2766,1151,7629,5169,5995,58,7619,7565,4208,1713,6279,3209,4908,9224,7409,1325,8540],\n  [6882,1265,1775,3648,4690,959,5837,4520,5394,1378,9485,1360,4018,578,9174,2932,9890,3696,116,1723,1178,9355,7063,1594,1918,8574,7594,7942,1547,6166,7888,354,6932,4651,1010,7759,6905,661,7689,6092,9292,3845,9605,8443,443,8275,5163,7720,7265,6356,7779,1798,1754,5225,6661,1180,8024,5666,88,9153,1840,3508,1193,4445,2648,3538,6243,6375,8107,5902,5423,2520,1122,5015,6113,8859,9370,966,8673,2442],\n  [7338,3423,4723,6533,848,8041,7921,8277,4094,5368,7252,8852,9166,2250,2801,6125,8093,5738,4038,9808,7359,9494,601,9116,4946,2702,5573,2921,9862,1462,1269,2410,4171,2709,7508,6241,7522,615,2407,8200,4189,5492,5649,7353,2590,5203,4274,710,7329,9063,956,8371,3722,4253,4785,1194,4828,4717,4548,940,983,2575,4511,2938,1827,2027,2700,1236,841,5760,1680,6260,2373,3851,1841,4968,1172,5179,7175,3509],\n  [4420,1327,3560,2376,6260,2988,9537,4064,4829,8872,9598,3228,1792,7118,9962,9336,4368,9189,6857,1829,9863,6287,7303,7769,2707,8257,2391,2009,3975,4993,3068,9835,3427,341,8412,2134,4034,8511,6421,3041,9012,2983,7289,100,1355,7904,9186,6920,5856,2008,6545,8331,3655,5011,839,8041,9255,6524,3862,8788,62,7455,3513,5003,8413,3918,2076,7960,6108,3638,6999,3436,1441,4858,4181,1866,8731,7745,3744,1000],\n  [356,8296,8325,1058,1277,4743,3850,2388,6079,6462,2815,5620,8495,5378,75,4324,3441,9870,1113,165,1544,1179,2834,562,6176,2313,6836,8839,2986,9454,5199,6888,1927,5866,8760,320,1792,8296,7898,6121,7241,5886,5814,2815,8336,1576,4314,3109,2572,6011,2086,9061,9403,3947,5487,9731,7281,3159,1819,1334,3181,5844,5114,9898,4634,2531,4412,6430,4262,8482,4546,4555,6804,2607,9421,686,8649,8860,7794,6672],\n  [9870,152,1558,4963,8750,4754,6521,6256,8818,5208,5691,9659,8377,9725,5050,5343,2539,6101,1844,9700,7750,8114,5357,3001,8830,4438,199,9545,8496,43,2078,327,9397,106,6090,8181,8646,6414,7499,5450,4850,6273,5014,4131,7639,3913,6571,8534,9703,4391,7618,445,1320,5,1894,6771,7383,9191,4708,9706,6939,7937,8726,9382,5216,3685,2247,9029,8154,1738,9984,2626,9438,4167,6351,5060,29,1218,1239,4785],\n  [192,5213,8297,8974,4032,6966,5717,1179,6523,4679,9513,1481,3041,5355,9303,9154,1389,8702,6589,7818,6336,3539,5538,3094,6646,6702,6266,2759,4608,4452,617,9406,8064,6379,444,5602,4950,1810,8391,1536,316,8714,1178,5182,5863,5110,5372,4954,1978,2971,5680,4863,2255,4630,5723,2168,538,1692,1319,7540,440,6430,6266,7712,7385,5702,620,641,3136,7350,1478,3155,2820,9109,6261,1122,4470,14,8493,2095],\n  [1046,4301,6082,474,4974,7822,2102,5161,5172,6946,8074,9716,6586,9962,9749,5015,2217,995,5388,4402,7652,6399,6539,1349,8101,3677,1328,9612,7922,2879,231,5887,2655,508,4357,4964,3554,5930,6236,7384,4614,280,3093,9600,2110,7863,2631,6626,6620,68,1311,7198,7561,1768,5139,1431,221,230,2940,968,5283,6517,2146,1646,869,9402,7068,8645,7058,1765,9690,4152,2926,9504,2939,7504,6074,2944,6470,7859],\n  [4659,736,4951,9344,1927,6271,8837,8711,3241,6579,7660,5499,5616,3743,5801,4682,9748,8796,779,1833,4549,8138,4026,775,4170,2432,4174,3741,7540,8017,2833,4027,396,811,2871,1150,9809,2719,9199,8504,1224,540,2051,3519,7982,7367,2761,308,3358,6505,2050,4836,5090,7864,805,2566,2409,6876,3361,8622,5572,5895,3280,441,7893,8105,1634,2929,274,3926,7786,6123,8233,9921,2674,5340,1445,203,4585,3837],\n  [5759,338,7444,7968,7742,3755,1591,4839,1705,650,7061,2461,9230,9391,9373,2413,1213,431,7801,4994,2380,2703,6161,6878,8331,2538,6093,1275,5065,5062,2839,582,1014,8109,3525,1544,1569,8622,7944,2905,6120,1564,1839,5570,7579,1318,2677,5257,4418,5601,7935,7656,5192,1864,5886,6083,5580,6202,8869,1636,7907,4759,9082,5854,3185,7631,6854,5872,5632,5280,1431,2077,9717,7431,4256,8261,9680,4487,4752,4286],\n  [1571,1428,8599,1230,7772,4221,8523,9049,4042,8726,7567,6736,9033,2104,4879,4967,6334,6716,3994,1269,8995,6539,3610,7667,6560,6065,874,848,4597,1711,7161,4811,6734,5723,6356,6026,9183,2586,5636,1092,7779,7923,8747,6887,7505,9909,1792,3233,4526,3176,1508,8043,720,5212,6046,4988,709,5277,8256,3642,1391,5803,1468,2145,3970,6301,7767,2359,8487,9771,8785,7520,856,1605,8972,2402,2386,991,1383,5963],\n  [1822,4824,5957,6511,9868,4113,301,9353,6228,2881,2966,6956,9124,9574,9233,1601,7340,973,9396,540,4747,8590,9535,3650,7333,7583,4806,3593,2738,8157,5215,8472,2284,9473,3906,6982,5505,6053,7936,6074,7179,6688,1564,1103,6860,5839,2022,8490,910,7551,7805,881,7024,1855,9448,4790,1274,3672,2810,774,7623,4223,4850,6071,9975,4935,1915,9771,6690,3846,517,463,7624,4511,614,6394,3661,7409,1395,8127],\n  [8738,3850,9555,3695,4383,2378,87,6256,6740,7682,9546,4255,6105,2000,1851,4073,8957,9022,6547,5189,2487,303,9602,7833,1628,4163,6678,3144,8589,7096,8913,5823,4890,7679,1212,9294,5884,2972,3012,3359,7794,7428,1579,4350,7246,4301,7779,7790,3294,9547,4367,3549,1958,8237,6758,3497,3250,3456,6318,1663,708,7714,6143,6890,3428,6853,9334,7992,591,6449,9786,1412,8500,722,5468,1371,108,3939,4199,2535],\n  [7047,4323,1934,5163,4166,461,3544,2767,6554,203,6098,2265,9078,2075,4644,6641,8412,9183,487,101,7566,5622,1975,5726,2920,5374,7779,5631,3753,3725,2672,3621,4280,1162,5812,345,8173,9785,1525,955,5603,2215,2580,5261,2765,2990,5979,389,3907,2484,1232,5933,5871,3304,1138,1616,5114,9199,5072,7442,7245,6472,4760,6359,9053,7876,2564,9404,3043,9026,2261,3374,4460,7306,2326,966,828,3274,1712,3446],\n  [3975,4565,8131,5800,4570,2306,8838,4392,9147,11,3911,7118,9645,4994,2028,6062,5431,2279,8752,2658,7836,994,7316,5336,7185,3289,1898,9689,2331,5737,3403,1124,2679,3241,7748,16,2724,5441,6640,9368,9081,5618,858,4969,17,2103,6035,8043,7475,2181,939,415,1617,8500,8253,2155,7843,7974,7859,1746,6336,3193,2617,8736,4079,6324,6645,8891,9396,5522,6103,1857,8979,3835,2475,1310,7422,610,8345,7615],\n  [9248,5397,5686,2988,3446,4359,6634,9141,497,9176,6773,7448,1907,8454,916,1596,2241,1626,1384,2741,3649,5362,8791,7170,2903,2475,5325,6451,924,3328,522,90,4813,9737,9557,691,2388,1383,4021,1609,9206,4707,5200,7107,8104,4333,9860,5013,1224,6959,8527,1877,4545,7772,6268,621,4915,9349,5970,706,9583,3071,4127,780,8231,3017,9114,3836,7503,2383,1977,4870,8035,2379,9704,1037,3992,3642,1016,4303],\n  [5093,138,4639,6609,1146,5565,95,7521,9077,2272,974,4388,2465,2650,722,4998,3567,3047,921,2736,7855,173,2065,4238,1048,5,6847,9548,8632,9194,5942,4777,7910,8971,6279,7253,2516,1555,1833,3184,9453,9053,6897,7808,8629,4877,1871,8055,4881,7639,1537,7701,2508,7564,5845,5023,2304,5396,3193,2955,1088,3801,6203,1748,3737,1276,13,4120,7715,8552,3047,2921,106,7508,304,1280,7140,2567,9135,5266],\n  [6237,4607,7527,9047,522,7371,4883,2540,5867,6366,5301,1570,421,276,3361,527,6637,4861,2401,7522,5808,9371,5298,2045,5096,5447,7755,5115,7060,8529,4078,1943,1697,1764,5453,7085,960,2405,739,2100,5800,728,9737,5704,5693,1431,8979,6428,673,7540,6,7773,5857,6823,150,5869,8486,684,5816,9626,7451,5579,8260,3397,5322,6920,1879,2127,2884,5478,4977,9016,6165,6292,3062,5671,5968,78,4619,4763],\n  [9905,7127,9390,5185,6923,3721,9164,9705,4341,1031,1046,5127,7376,6528,3248,4941,1178,7889,3364,4486,5358,9402,9158,8600,1025,874,1839,1783,309,9030,1843,845,8398,1433,7118,70,8071,2877,3904,8866,6722,4299,10,1929,5897,4188,600,1889,3325,2485,6473,4474,7444,6992,4846,6166,4441,2283,2629,4352,7775,1101,2214,9985,215,8270,9750,2740,8361,7103,5930,8664,9690,8302,9267,344,2077,1372,1880,9550],\n  [5825,8517,7769,2405,8204,1060,3603,7025,478,8334,1997,3692,7433,9101,7294,7498,9415,5452,3850,3508,6857,9213,6807,4412,7310,854,5384,686,4978,892,8651,3241,2743,3801,3813,8588,6701,4416,6990,6490,3197,6838,6503,114,8343,5844,8646,8694,65,791,5979,2687,2621,2019,8097,1423,3644,9764,4921,3266,3662,5561,2476,8271,8138,6147,1168,3340,1998,9874,6572,9873,6659,5609,2711,3931,9567,4143,7833,8887],\n  [6223,2099,2700,589,4716,8333,1362,5007,2753,2848,4441,8397,7192,8191,4916,9955,6076,3370,6396,6971,3156,248,3911,2488,4930,2458,7183,5455,170,6809,6417,3390,1956,7188,577,7526,2203,968,8164,479,8699,7915,507,6393,4632,1597,7534,3604,618,3280,6061,9793,9238,8347,568,9645,2070,5198,6482,5000,9212,6655,5961,7513,1323,3872,6170,3812,4146,2736,67,3151,5548,2781,9679,7564,5043,8587,1893,4531],\n  [5826,3690,6724,2121,9308,6986,8106,6659,2142,1642,7170,2877,5757,6494,8026,6571,8387,9961,6043,9758,9607,6450,8631,8334,7359,5256,8523,2225,7487,1977,9555,8048,5763,2414,4948,4265,2427,8978,8088,8841,9208,9601,5810,9398,8866,9138,4176,5875,7212,3272,6759,5678,7649,4922,5422,1343,8197,3154,3600,687,1028,4579,2084,9467,4492,7262,7296,6538,7657,7134,2077,1505,7332,6890,8964,4879,7603,7400,5973,739],\n  [1861,1613,4879,1884,7334,966,2000,7489,2123,4287,1472,3263,4726,9203,1040,4103,6075,6049,330,9253,4062,4268,1635,9960,577,1320,3195,9628,1030,4092,4979,6474,6393,2799,6967,8687,7724,7392,9927,2085,3200,6466,8702,265,7646,8665,7986,7266,4574,6587,612,2724,704,3191,8323,9523,3002,704,5064,3960,8209,2027,2758,8393,4875,4641,9584,6401,7883,7014,768,443,5490,7506,1852,2005,8850,5776,4487,4269],\n  [4052,6687,4705,7260,6645,6715,3706,5504,8672,2853,1136,8187,8203,4016,871,1809,1366,4952,9294,5339,6872,2645,6083,7874,3056,5218,7485,8796,7401,3348,2103,426,8572,4163,9171,3176,948,7654,9344,3217,1650,5580,7971,2622,76,2874,880,2034,9929,1546,2659,5811,3754,7096,7436,9694,9960,7415,2164,953,2360,4194,2397,1047,2196,6827,575,784,2675,8821,6802,7972,5996,6699,2134,7577,2887,1412,4349,4380],\n  [4629,2234,6240,8132,7592,3181,6389,1214,266,1910,2451,8784,2790,1127,6932,1447,8986,2492,5476,397,889,3027,7641,5083,5776,4022,185,3364,5701,2442,2840,4160,9525,4828,6602,2614,7447,3711,4505,7745,8034,6514,4907,2605,7753,6958,7270,6936,3006,8968,439,2326,4652,3085,3425,9863,5049,5361,8688,297,7580,8777,7916,6687,8683,7141,306,9569,2384,1500,3346,4601,7329,9040,6097,2727,6314,4501,4974,2829],\n  [8316,4072,2025,6884,3027,1808,5714,7624,7880,8528,4205,8686,7587,3230,1139,7273,6163,6986,3914,9309,1464,9359,4474,7095,2212,7302,2583,9462,7532,6567,1606,4436,8981,5612,6796,4385,5076,2007,6072,3678,8331,1338,3299,8845,4783,8613,4071,1232,6028,2176,3990,2148,3748,103,9453,538,6745,9110,926,3125,473,5970,8728,7072,9062,1404,1317,5139,9862,6496,6062,3338,464,1600,2532,1088,8232,7739,8274,3873],\n  [2341,523,7096,8397,8301,6541,9844,244,4993,2280,7689,4025,4196,5522,7904,6048,2623,9258,2149,9461,6448,8087,7245,1917,8340,7127,8466,5725,6996,3421,5313,512,9164,9837,9794,8369,4185,1488,7210,1524,1016,4620,9435,2478,7765,8035,697,6677,3724,6988,5853,7662,3895,9593,1185,4727,6025,5734,7665,3070,138,8469,6748,6459,561,7935,8646,2378,462,7755,3115,9690,8877,3946,2728,8793,244,6323,8666,4271],\n  [6430,2406,8994,56,1267,3826,9443,7079,7579,5232,6691,3435,6718,5698,4144,7028,592,2627,217,734,6194,8156,9118,58,2640,8069,4127,3285,694,3197,3377,4143,4802,3324,8134,6953,7625,3598,3584,4289,7065,3434,2106,7132,5802,7920,9060,7531,3321,1725,1067,3751,444,5503,6785,7937,6365,4803,198,6266,8177,1470,6390,1606,2904,7555,9834,8667,2033,1723,5167,1666,8546,8152,473,4475,6451,7947,3062,3281],\n  [2810,3042,7759,1741,2275,2609,7676,8640,4117,1958,7500,8048,1757,3954,9270,1971,4796,2912,660,5511,3553,1012,5757,4525,6084,7198,8352,5775,7726,8591,7710,9589,3122,4392,6856,5016,749,2285,3356,7482,9956,7348,2599,8944,495,3462,3578,551,4543,7207,7169,7796,1247,4278,6916,8176,3742,8385,2310,1345,8692,2667,4568,1770,8319,3585,4920,3890,4928,7343,5385,9772,7947,8786,2056,9266,3454,2807,877,2660],\n  [6206,8252,5928,5837,4177,4333,207,7934,5581,9526,8906,1498,8411,2984,5198,5134,2464,8435,8514,8674,3876,599,5327,826,2152,4084,2433,9327,9697,4800,2728,3608,3849,3861,3498,9943,1407,3991,7191,9110,5666,8434,4704,6545,5944,2357,1163,4995,9619,6754,4200,9682,6654,4862,4744,5953,6632,1054,293,9439,8286,2255,696,8709,1533,1844,6441,430,1999,6063,9431,7018,8057,2920,6266,6799,356,3597,4024,6665],\n  [3847,6356,8541,7225,2325,2946,5199,469,5450,7508,2197,9915,8284,7983,6341,3276,3321,16,1321,7608,5015,3362,8491,6968,6818,797,156,2575,706,9516,5344,5457,9210,5051,8099,1617,9951,7663,8253,9683,2670,1261,4710,1068,8753,4799,1228,2621,3275,6188,4699,1791,9518,8701,5932,4275,6011,9877,2933,4182,6059,2930,6687,6682,9771,654,9437,3169,8596,1827,5471,8909,2352,123,4394,3208,8756,5513,6917,2056],\n  [5458,8173,3138,3290,4570,4892,3317,4251,9699,7973,1163,1935,5477,6648,9614,5655,9592,975,9118,2194,7322,8248,8413,3462,8560,1907,7810,6650,7355,2939,4973,6894,3933,3784,3200,2419,9234,4747,2208,2207,1945,2899,1407,6145,8023,3484,5688,7686,2737,3828,3704,9004,5190,9740,8643,8650,5358,4426,1522,1707,3613,9887,6956,2447,2762,833,1449,9489,2573,1080,4167,3456,6809,2466,227,7125,2759,6250,6472,8089],\n  [3266,7025,9756,3914,1265,9116,7723,9788,6805,5493,2092,8688,6592,9173,4431,4028,6007,7131,4446,4815,3648,6701,759,3312,8355,4485,4187,5188,8746,7759,3528,2177,5243,8379,3838,7233,4607,9187,7216,2190,6967,2920,6082,7910,5354,3609,8958,6949,7731,494,8753,8707,1523,4426,3543,7085,647,6771,9847,646,5049,824,8417,5260,2730,5702,2513,9275,4279,2767,8684,1165,9903,4518,55,9682,8963,6005,2102,6523],\n  [1998,8731,936,1479,5259,7064,4085,91,7745,7136,3773,3810,730,8255,2705,2653,9790,6807,2342,355,9344,2668,3690,2028,9679,8102,574,4318,6481,9175,5423,8062,2867,9657,7553,3442,3920,7430,3945,7639,3714,3392,2525,4995,4850,2867,7951,9667,486,9506,9888,781,8866,1702,3795,90,356,1483,4200,2131,6969,5931,486,6880,4404,1084,5169,4910,6567,8335,4686,5043,2614,3352,2667,4513,6472,7471,5720,1616],\n  [8878,1613,1716,868,1906,2681,564,665,5995,2474,7496,3432,9491,9087,8850,8287,669,823,347,6194,2264,2592,7871,7616,8508,4827,760,2676,4660,4881,7572,3811,9032,939,4384,929,7525,8419,5556,9063,662,8887,7026,8534,3111,1454,2082,7598,5726,6687,9647,7608,73,3014,5063,670,5461,5631,3367,9796,8475,7908,5073,1565,5008,5295,4457,1274,4788,1728,338,600,8415,8535,9351,7750,6887,5845,1741,125],\n  [3637,6489,9634,9464,9055,2413,7824,9517,7532,3577,7050,6186,6980,9365,9782,191,870,2497,8498,2218,2757,5420,6468,586,3320,9230,1034,1393,9886,5072,9391,1178,8464,8042,6869,2075,8275,3601,7715,9470,8786,6475,8373,2159,9237,2066,3264,5000,679,355,3069,4073,494,2308,5512,4334,9438,8786,8637,9774,1169,1949,6594,6072,4270,9158,7916,5752,6794,9391,6301,5842,3285,2141,3898,8027,4310,8821,7079,1307],\n  [8497,6681,4732,7151,7060,5204,9030,7157,833,5014,8723,3207,9796,9286,4913,119,5118,7650,9335,809,3675,2597,5144,3945,5090,8384,187,4102,1260,2445,2792,4422,8389,9290,50,1765,1521,6921,8586,4368,1565,5727,7855,2003,4834,9897,5911,8630,5070,1330,7692,7557,7980,6028,5805,9090,8265,3019,3802,698,9149,5748,1965,9658,4417,5994,5584,8226,2937,272,5743,1278,5698,8736,2595,6475,5342,6596,1149,6920],\n  [8188,8009,9546,6310,8772,2500,9846,6592,6872,3857,1307,8125,7042,1544,6159,2330,643,4604,7899,6848,371,8067,2062,3200,7295,1857,9505,6936,384,2193,2190,301,8535,5503,1462,7380,5114,4824,8833,1763,4974,8711,9262,6698,3999,2645,6937,7747,1128,2933,3556,7943,2885,3122,9105,5447,418,2899,5148,3699,9021,9501,597,4084,175,1621,1,1079,6067,5812,4326,9914,6633,5394,4233,6728,9084,1864,5863,1225],\n  [9935,8793,9117,1825,9542,8246,8437,3331,9128,9675,6086,7075,319,1334,7932,3583,7167,4178,1726,7720,695,8277,7887,6359,5912,1719,2780,8529,1359,2013,4498,8072,1129,9998,1147,8804,9405,6255,1619,2165,7491,1,8882,7378,3337,503,5758,4109,3577,985,3200,7615,8058,5032,1080,6410,6873,5496,1466,2412,9885,5904,4406,3605,8770,4361,6205,9193,1537,9959,214,7260,9566,1685,100,4920,7138,9819,5637,976],\n  [3466,9854,985,1078,7222,8888,5466,5379,3578,4540,6853,8690,3728,6351,7147,3134,6921,9692,857,3307,4998,2172,5783,3931,9417,2541,6299,13,787,2099,9131,9494,896,8600,1643,8419,7248,2660,2609,8579,91,6663,5506,7675,1947,6165,4286,1972,9645,3805,1663,1456,8853,5705,9889,7489,1107,383,4044,2969,3343,152,7805,4980,9929,5033,1737,9953,7197,9158,4071,1324,473,9676,3984,9680,3606,8160,7384,5432],\n  [1005,4512,5186,3953,2164,3372,4097,3247,8697,3022,9896,4101,3871,6791,3219,2742,4630,6967,7829,5991,6134,1197,1414,8923,8787,1394,8852,5019,7768,5147,8004,8825,5062,9625,7988,1110,3992,7984,9966,6516,6251,8270,421,3723,1432,4830,6935,8095,9059,2214,6483,6846,3120,1587,6201,6691,9096,9627,6671,4002,3495,9939,7708,7465,5879,6959,6634,3241,3401,2355,9061,2611,7830,3941,2177,2146,5089,7079,519,6351],\n  [7280,8586,4261,2831,7217,3141,9994,9940,5462,2189,4005,6942,9848,5350,8060,6665,7519,4324,7684,657,9453,9296,2944,6843,7499,7847,1728,9681,3906,6353,5529,2822,3355,3897,7724,4257,7489,8672,4356,3983,1948,6892,7415,4153,5893,4190,621,1736,4045,9532,7701,3671,1211,1622,3176,4524,9317,7800,5638,6644,6943,5463,3531,2821,1347,5958,3436,1438,2999,994,850,4131,2616,1549,3465,5946,690,9273,6954,7991],\n  [9517,399,3249,2596,7736,2142,1322,968,7350,1614,468,3346,3265,7222,6086,1661,5317,2582,7959,4685,2807,2917,1037,5698,1529,3972,8716,2634,3301,3412,8621,743,8001,4734,888,7744,8092,3671,8941,1487,5658,7099,2781,99,1932,4443,4756,4652,9328,1581,7855,4312,5976,7255,6480,3996,2748,1973,9731,4530,2790,9417,7186,5303,3557,351,7182,9428,1342,9020,7599,1392,8304,2070,9138,7215,2008,9937,1106,7110],\n  [7444,769,9688,632,1571,6820,8743,4338,337,3366,3073,1946,8219,104,4210,6986,249,5061,8693,7960,6546,1004,8857,5997,9352,4338,6105,5008,2556,6518,6694,4345,3727,7956,20,3954,8652,4424,9387,2035,8358,5962,5304,5194,8650,8282,1256,1103,2138,6679,1985,3653,2770,2433,4278,615,2863,1715,242,3790,2636,6998,3088,1671,2239,957,5411,4595,6282,2881,9974,2401,875,7574,2987,4587,3147,6766,9885,2965],\n  [3287,3016,3619,6818,9073,6120,5423,557,2900,2015,8111,3873,1314,4189,1846,4399,7041,7583,2427,2864,3525,5002,2069,748,1948,6015,2684,438,770,8367,1663,7887,7759,1885,157,7770,4520,4878,3857,1137,3525,3050,6276,5569,7649,904,4533,7843,2199,5648,7628,9075,9441,3600,7231,2388,5640,9096,958,3058,584,5899,8150,1181,9616,1098,8162,6819,8171,1519,1140,7665,8801,2632,1299,9192,707,9955,2710,7314],\n  [1772,2963,7578,3541,3095,1488,7026,2634,6015,4633,4370,2762,1650,2174,909,8158,2922,8467,4198,4280,9092,8856,8835,5457,2790,8574,9742,5054,9547,4156,7940,8126,9824,7340,8840,6574,3547,1477,3014,6798,7134,435,9484,9859,3031,4,1502,4133,1738,1807,4825,463,6343,9701,8506,9822,9555,8688,8168,3467,3234,6318,1787,5591,419,6593,7974,8486,9861,6381,6758,194,3061,4315,2863,4665,3789,2201,1492,4416],\n  [126,8927,6608,5682,8986,6867,1715,6076,3159,788,3140,4744,830,9253,5812,5021,7616,8534,1546,9590,1101,9012,9821,8132,7857,4086,1069,7491,2988,1579,2442,4321,2149,7642,6108,250,6086,3167,24,9528,7663,2685,1220,9196,1397,5776,1577,1730,5481,977,6115,199,6326,2183,3767,5928,5586,7561,663,8649,9688,949,5913,9160,1870,5764,9887,4477,6703,1413,4995,5494,7131,2192,8969,7138,3997,8697,646,1028],\n  [8074,1731,8245,624,4601,8706,155,8891,309,2552,8208,8452,2954,3124,3469,4246,3352,1105,4509,8677,9901,4416,8191,9283,5625,7120,2952,8881,7693,830,4580,8228,9459,8611,4499,1179,4988,1394,550,2336,6089,6872,269,7213,1848,917,6672,4890,656,1478,6536,3165,4743,4990,1176,6211,7207,5284,9730,4738,1549,4986,4942,8645,3698,9429,1439,2175,6549,3058,6513,1574,6988,8333,3406,5245,5431,7140,7085,6407],\n  [7845,4694,2530,8249,290,5948,5509,1588,5940,4495,5866,5021,4626,3979,3296,7589,4854,1998,5627,3926,8346,6512,9608,1918,7070,4747,4182,2858,2766,4606,6269,4107,8982,8568,9053,4244,5604,102,2756,727,5887,2566,7922,44,5986,621,1202,374,6988,4130,3627,6744,9443,4568,1398,8679,397,3928,9159,367,2917,6127,5788,3304,8129,911,2669,1463,9749,264,4478,8940,1109,7309,2462,117,4692,7724,225,2312],\n  [4164,3637,2000,941,8903,39,3443,7172,1031,3687,4901,8082,4945,4515,7204,9310,9349,9535,9940,218,1788,9245,2237,1541,5670,6538,6047,5553,9807,8101,1925,8714,445,8332,7309,6830,5786,5736,7306,2710,3034,1838,7969,6318,7912,2584,2080,7437,6705,2254,7428,820,782,9861,7596,3842,3631,8063,5240,6666,394,4565,7865,4895,9890,6028,6117,4724,9156,4473,4552,602,470,6191,4927,5387,884,3146,1978,3000],\n  [4258,6880,1696,3582,5793,4923,2119,1155,9056,9698,6603,3768,5514,9927,9609,6166,6566,4536,4985,4934,8076,9062,6741,6163,7399,4562,2337,5600,2919,9012,8459,1308,6072,1225,9306,8818,5886,7243,7365,8792,6007,9256,6699,7171,4230,7002,8720,7839,4533,1671,478,7774,1607,2317,5437,4705,7886,4760,6760,7271,3081,2997,3088,7675,6208,3101,6821,6840,122,9633,4900,2067,8546,4549,2091,7188,5605,8599,6758,5229],\n  [7854,5243,9155,3556,8812,7047,2202,1541,5993,4600,4760,713,434,7911,7426,7414,8729,322,803,7960,7563,4908,6285,6291,736,3389,9339,4132,8701,7534,5287,3646,592,3065,7582,2592,8755,6068,8597,1982,5782,1894,2900,6236,4039,6569,3037,5837,7698,700,7815,2491,7272,5878,3083,6778,6639,3589,5010,8313,2581,6617,5869,8402,6808,2951,2321,5195,497,2190,6187,1342,1316,4453,7740,4154,2959,1781,1482,8256],\n  [7178,2046,4419,744,8312,5356,6855,8839,319,2962,5662,47,6307,8662,68,4813,567,2712,9931,1678,3101,8227,6533,4933,6656,92,5846,4780,6256,6361,4323,9985,1231,2175,7178,3034,9744,6155,9165,7787,5836,9318,7860,9644,8941,6480,9443,8188,5928,161,6979,2352,5628,6991,1198,8067,5867,6620,3778,8426,2994,3122,3124,6335,3918,8897,2655,9670,634,1088,1576,8935,7255,474,8166,7417,9547,2886,5560,3842],\n  [6957,3111,26,7530,7143,1295,1744,6057,3009,1854,8098,5405,2234,4874,9447,2620,9303,27,7410,969,40,2966,5648,7596,8637,4238,3143,3679,7187,690,9980,7085,7714,9373,5632,7526,6707,3951,9734,4216,2146,3602,5371,6029,3039,4433,4855,4151,1449,3376,8009,7240,7027,4602,2947,9081,4045,8424,9352,8742,923,2705,4266,3232,2264,6761,363,2651,3383,7770,6730,7856,7340,9679,2158,610,4471,4608,910,6241],\n  [4417,6756,1013,8797,658,8809,5032,8703,7541,846,3357,2920,9817,1745,9980,7593,4667,3087,779,3218,6233,5568,4296,2289,2654,7898,5021,9461,5593,8214,9173,4203,2271,7980,2983,5952,9992,8399,3468,1776,3188,9314,1720,6523,2933,621,8685,5483,8986,6163,3444,9539,4320,155,3992,2828,2150,6071,524,2895,5468,8063,1210,3348,9071,4862,483,9017,4097,6186,9815,3610,5048,1644,1003,9865,9332,2145,1944,2213],\n  [9284,3803,4920,1927,6706,4344,7383,4786,9890,2010,5228,1224,3158,6967,8580,8990,8883,5213,76,8306,2031,4980,5639,9519,7184,5645,7769,3259,8077,9130,1317,3096,9624,3818,1770,695,2454,947,6029,3474,9938,3527,5696,4760,7724,7738,2848,6442,5767,6845,8323,4131,2859,7595,2500,4815,3660,9130,8580,7016,8231,4391,8369,3444,4069,4021,556,6154,627,2778,1496,4206,6356,8434,8491,3816,8231,3190,5575,1015],\n  [3787,7572,1788,6803,5641,6844,1961,4811,8535,9914,9999,1450,8857,738,4662,8569,6679,2225,7839,8618,286,2648,5342,2294,3205,4546,176,8705,3741,6134,8324,8021,7004,5205,7032,6637,9442,5539,5584,4819,5874,5807,8589,6871,9016,983,1758,3786,1519,6241,185,8398,495,3370,9133,3051,4549,9674,7311,9738,3316,9383,2658,2776,9481,7558,619,3943,3324,6491,4933,153,9738,4623,912,3595,7771,7939,1219,4405],\n  [2650,3883,4154,5809,315,7756,4430,1788,4451,1631,6461,7230,6017,5751,138,588,5282,2442,9110,9035,6349,2515,1570,6122,4192,4174,3530,1933,4186,4420,4609,5739,4135,2963,6308,1161,8809,8619,2796,3819,6971,8228,4188,1492,909,8048,2328,6772,8467,7671,9068,2226,7579,6422,7056,8042,3296,2272,3006,2196,7320,3238,3490,3102,37,1293,3212,4767,5041,8773,5794,4456,6174,7279,7054,2835,7053,9088,790,6640],\n  [3101,1057,7057,3826,6077,1025,2955,1224,1114,6729,5902,4698,6239,7203,9423,1804,4417,6686,1426,6941,8071,1029,4985,9010,6122,6597,1622,1574,3513,1684,7086,5505,3244,411,9638,4150,907,9135,829,981,1707,5359,8781,9751,5,9131,3973,7159,1340,6955,7514,7993,6964,8198,1933,2797,877,3993,4453,8020,9349,8646,2779,8679,2961,3547,3374,3510,1129,3568,2241,2625,9138,5974,8206,7669,7678,1833,8700,4480],\n  [4865,9912,8038,8238,782,3095,8199,1127,4501,7280,2112,2487,3626,2790,9432,1475,6312,8277,4827,2218,5806,7132,8752,1468,7471,6386,739,8762,8323,8120,5169,9078,9058,3370,9560,7987,8585,8531,5347,9312,1058,4271,1159,5286,5404,6925,8606,9204,7361,2415,560,586,4002,2644,1927,2824,768,4409,2942,3345,1002,808,4941,6267,7979,5140,8643,7553,9438,7320,4938,2666,4609,2778,8158,6730,3748,3867,1866,7181],\n  [171,3771,7134,8927,4778,2913,3326,2004,3089,7853,1378,1729,4777,2706,9578,1360,5693,3036,1851,7248,2403,2273,8536,6501,9216,613,9671,7131,7719,6425,773,717,8803,160,1114,7554,7197,753,4513,4322,8499,4533,2609,4226,8710,6627,644,9666,6260,4870,5744,7385,6542,6203,7703,6130,8944,5589,2262,6803,6381,7414,6888,5123,7320,9392,9061,6780,322,8975,7050,5089,1061,2260,3199,1150,1865,5386,9699,6501],\n  [3744,8454,6885,8277,919,1923,4001,6864,7854,5519,2491,6057,8794,9645,1776,5714,9786,9281,7538,6916,3215,395,2501,9618,4835,8846,9708,2813,3303,1794,8309,7176,2206,1602,1838,236,4593,2245,8993,4017,10,8215,6921,5206,4023,5932,6997,7801,262,7640,3107,8275,4938,7822,2425,3223,3886,2105,8700,9526,2088,8662,8034,7004,5710,2124,7164,3574,6630,9980,4242,2901,9471,1491,2117,4562,1130,9086,4117,6698],\n  [2810,2280,2331,1170,4554,4071,8387,1215,2274,9848,6738,1604,7281,8805,439,1298,8318,7834,9426,8603,6092,7944,1309,8828,303,3157,4638,4439,9175,1921,4695,7716,1494,1015,1772,5913,1127,1952,1950,8905,4064,9890,385,9357,7945,5035,7082,5369,4093,6546,5187,5637,2041,8946,1758,7111,6566,1027,1049,5148,7224,7248,296,6169,375,1656,7993,2816,3717,4279,4675,1609,3317,42,6201,3100,3144,163,9530,4531],\n  [7096,6070,1009,4988,3538,5801,7149,3063,2324,2912,7911,7002,4338,7880,2481,7368,3516,2016,7556,2193,1388,3865,8125,4637,4096,8114,750,3144,1938,7002,9343,4095,1392,4220,3455,6969,9647,1321,9048,1996,1640,6626,1788,314,9578,6630,2813,6626,4981,9908,7024,4355,3201,3521,3864,3303,464,1923,595,9801,3391,8366,8084,9374,1041,8807,9085,1892,9431,8317,9016,9221,8574,9981,9240,5395,2009,6310,2854,9255],\n  [8830,3145,2960,9615,8220,6061,3452,2918,6481,9278,2297,3385,6565,7066,7316,5682,107,7646,4466,68,1952,9603,8615,54,7191,791,6833,2560,693,9733,4168,570,9127,9537,1925,8287,5508,4297,8452,8795,6213,7994,2420,4208,524,5915,8602,8330,2651,8547,6156,1812,6271,7991,9407,9804,1553,6866,1128,2119,4691,9711,8315,5879,9935,6900,482,682,4126,1041,428,6247,3720,5882,7526,2582,4327,7725,3503,2631],\n  [2738,9323,721,7434,1453,6294,2957,3786,5722,6019,8685,4386,3066,9057,6860,499,5315,3045,5194,7111,3137,9104,941,586,3066,755,4177,8819,7040,5309,3583,3897,4428,7788,4721,7249,6559,7324,825,7311,3760,6064,6070,9672,4882,584,1365,9739,9331,5783,2624,7889,1604,1303,1555,7125,8312,425,8936,3233,7724,1480,403,7440,1784,1754,4721,1569,652,3893,4574,5692,9730,4813,9844,8291,9199,7101,3391,8914],\n  [6044,2928,9332,3328,8588,447,3830,1176,3523,2705,8365,6136,5442,9049,5526,8575,8869,9031,7280,706,2794,8814,5767,4241,7696,78,6570,556,5083,1426,4502,3336,9518,2292,1885,3740,3153,9348,9331,8051,2759,5407,9028,7840,9255,831,515,2612,9747,7435,8964,4971,2048,4900,5967,8271,1719,9670,2810,6777,1594,6367,6259,8316,3815,1689,6840,9437,4361,822,9619,3065,83,6344,7486,8657,8228,9635,6932,4864],\n  [8478,4777,6334,4678,7476,4963,6735,3096,5860,1405,5127,7269,7793,4738,227,9168,2996,8928,765,733,1276,7677,6258,1528,9558,3329,302,8901,1422,8277,6340,645,9125,8869,5952,141,8141,1816,9635,4025,4184,3093,83,2344,2747,9352,7966,1206,1126,1826,218,7939,2957,2729,810,8752,5247,4174,4038,8884,7899,9567,301,5265,5752,7524,4381,1669,3106,8270,6228,6373,754,2547,4240,2313,5514,3022,1040,9738],\n  [2265,8192,1763,1369,8469,8789,4836,52,1212,6690,5257,8918,6723,6319,378,4039,2421,8555,8184,9577,1432,7139,8078,5452,9628,7579,4161,7490,5159,8559,1011,81,478,5840,1964,1334,6875,8670,9900,739,1514,8692,522,9316,6955,1345,8132,2277,3193,9773,3923,4177,2183,1236,6747,6575,4874,6003,6409,8187,745,8776,9440,7543,9825,2582,7381,8147,7236,5185,7564,6125,218,7991,6394,391,7659,7456,5128,5294],\n  [2132,8992,8160,5782,4420,3371,3798,5054,552,5631,7546,4716,1332,6486,7892,7441,4370,6231,4579,2121,8615,1145,9391,1524,1385,2400,9437,2454,7896,7467,2928,8400,3299,4025,7458,4703,7206,6358,792,6200,725,4275,4136,7390,5984,4502,7929,5085,8176,4600,119,3568,76,9363,6943,2248,9077,9731,6213,5817,6729,4190,3092,6910,759,2682,8380,1254,9604,3011,9291,5329,9453,9746,2739,6522,3765,5634,1113,5789],\n  [5304,5499,564,2801,679,2653,1783,3608,7359,7797,3284,796,3222,437,7185,6135,8571,2778,7488,5746,678,6140,861,7750,803,9859,9918,2425,3734,2698,9005,4864,9818,6743,2475,132,9486,3825,5472,919,292,4411,7213,7699,6435,9019,6769,1388,802,2124,1345,8493,9487,8558,7061,8777,8833,2427,2238,5409,4957,8503,3171,7622,5779,6145,2417,5873,5563,5693,9574,9491,1937,7384,4563,6842,5432,2751,3406,7981]\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c11000cf542c50fed3",
      "title": "Problem 84: Monopoly odds",
      "challengeType": 1,
      "dashedName": "problem-84-monopoly-odds",
      "description": "In the game, *Monopoly*, the standard board is set up in the following way:\n\n<div style=\"text-align: center;\">\n  <table cellspacing=\"1\" cellpadding=\"5\" border=\"0\" style=\"background-color: black; color: black;\" align=\"center\">\n    <tbody>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">GO</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">A1</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">CC1</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">A2</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">T1</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">R1</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">B1</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">CH1</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">B2</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">B3</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">JAIL</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">H2</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">C1</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">T2</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">U1</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">H1</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">C2</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">CH3</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">C3</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">R4</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">R2</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">G3</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">D1</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">CC3</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">CC2</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">G2</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">D2</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">G1</td>\n        <td colspan=\"9\">&nbsp;</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">D3</td>\n      </tr>\n      <tr>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">G2J</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">F3</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">U2</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">F2</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">F1</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">R3</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">E3</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">E2</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">CH2</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">E1</td>\n        <td style=\"background-color: #ffffff; color: black; padding: 5px; border: 1px solid black;\">FP</td>\n      </tr>\n    </tbody>\n  </table>\n</div><br>\n\nA player starts on the GO square and adds the scores on two 6-sided dice to determine the number of squares they advance in a clockwise direction. Without any further rules we would expect to visit each square with equal probability: 2.5%. However, landing on G2J (Go To Jail), CC (community chest), and CH (chance) changes this distribution.\n\nIn addition to G2J, and one card from each of CC and CH, that orders the player to go directly to jail, if a player rolls three consecutive doubles, they do not advance the result of their 3rd roll. Instead they proceed directly to jail.\n\nAt the beginning of the game, the CC and CH cards are shuffled. When a player lands on CC or CH they take a card from the top of the respective pile and, after following the instructions, it is returned to the bottom of the pile. There are sixteen cards in each pile, but for the purpose of this problem we are only concerned with cards that order a movement; any instruction not concerned with movement will be ignored and the player will remain on the CC/CH square.\n\n<ul>\n  <li>Community Chest (2/16 cards):</li>\n  <ol>\n    <li>Advance to GO</li>\n    <li>Go to JAIL</li>\n  </ol>\n\n  <li>Chance (10/16 cards):</li>\n  <ol>\n    <li>Advance to GO</li>\n    <li>Go to JAIL</li>\n    <li>Go to C1</li>\n    <li>Go to E3</li>\n    <li>Go to H2</li>\n    <li>Go to R1</li>\n    <li>Go to next R (railway company)</li>\n    <li>Go to next R</li>\n    <li>Go to next U (utility company)</li>\n    <li>Go back 3 squares.</li>\n  </ol>\n</ul>\n\nThe heart of this problem concerns the likelihood of visiting a particular square. That is, the probability of finishing at that square after a roll. For this reason it should be clear that, with the exception of G2J for which the probability of finishing on it is zero, the CH squares will have the lowest probabilities, as 5/8 request a movement to another square, and it is the final square that the player finishes at on each roll that we are interested in. We shall make no distinction between \"Just Visiting\" and being sent to JAIL, and we shall also ignore the rule about requiring a double to \"get out of jail\", assuming that they pay to get out on their next turn.\n\nBy starting at GO and numbering the squares sequentially from 00 to 39 we can concatenate these two-digit numbers to produce strings that correspond with sets of squares.\n\nStatistically it can be shown that the three most popular squares, in order, are JAIL (6.24%) = Square 10, E3 (3.18%) = Square 24, and GO (3.09%) = Square 00. So these three most popular squares can be listed with the six-digit modal string `102400`.\n\nIf, instead of using two 6-sided dice, two `n`-sided dice are used, find the six-digit modal string.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function monopolyOdds(n) {\n\n  return true;\n}\n\nmonopolyOdds(8);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const GO = 0;\nconst JAIL = 10;\nconst GO_TO_JAIL = 30;\n\nconst C1 = 11;\nconst E3 = 24;\nconst H2 = 39;\n\nconst R1 = 5;\nconst R2 = 15;\nconst R3 = 25;\n\nconst U1 = 12;\nconst U2 = 28;\n\nconst SPECIAL_CARDS = 16;\nconst GAME_SQUARES = 40;\n\nconst CC1 = 2;\nconst CC2 = 17;\nconst CC3 = 33;\nconst CHESTS = [CC1, CC2, CC3];\nconst chestCardsMoves = [GO, JAIL];\n\nconst CH1 = 7;\nconst CH2 = 22;\nconst CH3 = 36;\nconst CHANCES = [CH1, CH2, CH3];\nconst chanceCardsMoves = [GO, JAIL, C1, E3, H2, R1];\nconst chanceToRailroad = { [CH1]: R2, [CH2]: R3, [CH3]: R1 };\nconst chanceToUtility = { [CH1]: U1, [CH2]: U2, [CH3]: U1 };\n\nfunction multiplyMatrix(matrix1, matrix2) {\n  const multiplied = [];\n\n  for (let row = 0; row < matrix1.length; row++) {\n    const newRow = [];\n    for (let col = 0; col < matrix1[row].length; col++) {\n      let newCell = 0;\n      for (let i = 0; i < matrix1[row].length; i++) {\n        const value1 = matrix1[row][i];\n        const value2 = matrix2[i][col];\n        newCell += value1 * value2;\n      }\n      newRow.push(newCell);\n    }\n    multiplied.push(newRow);\n  }\n  return multiplied;\n}\n\nfunction normalizeRow(row) {\n  const sum = row.reduce((total, value) => total + value, 0);\n  if (sum > 0) {\n    for (let j = 0; j < row.length; j++) {\n      const value = row[j];\n      row[j] = value / sum;\n    }\n  }\n}\n\nfunction sortByProbability(board) {\n  return board\n    .map((probability, squareNo) => [squareNo, probability])\n    .sort((a, b) => a[1] - b[1])\n}\n\nfunction getTopThree(board) {\n  return sortByProbability(board)\n    .slice(-3)\n    .reverse()\n    .map(([squareNo, _]) => squareNo.toString().padStart(2, '0')\n    )\n    .join('');\n}\n\nfunction didConverge(matrix1, matrix2, precision) {\n  return matrix1.every((row, rowNo) => row.every((value1, colNo) => Math.abs(value1 - matrix2[rowNo][colNo]) <= precision))\n}\n\nfunction monopolyOdds(diceSides) {\n  // Based on https://github.com/ByteThisCoding/project-euler/blob/master/problems/0084/0084.ts\n\n  const timesRolled = new Array(diceSides * 2 + 1).fill(0);\n  for (let dice1 = 1; dice1 <= diceSides; dice1++) {\n    for (let dice2 = 1; dice2 <= diceSides; dice2++) {\n      timesRolled[dice1 + dice2]++;\n    }\n  }\n\n  // Transitions matrix contain probabilities of reaching each square (row values)\n  // from each starting square (row no.).\n  let transitions = [];\n  for (let startSquare = 0; startSquare < GAME_SQUARES; startSquare++) {\n    const row = new Array(GAME_SQUARES).fill(0);\n    for (let rollResult = 2; rollResult <= diceSides * 2; rollResult++) {\n      const rollChance = timesRolled[rollResult]\n      const position = (startSquare + rollResult) % GAME_SQUARES;\n\n      if (CHANCES.includes(position)) {\n        // Chance cards ordering movement.\n        for (let i = 0; i < chanceCardsMoves.length; i++) {\n          const nextSquare = chanceCardsMoves[i];\n          row[nextSquare] += rollChance / SPECIAL_CARDS;\n        }\n        row[chanceToRailroad[position]] += 2 * rollChance / SPECIAL_CARDS;\n        row[chanceToUtility[position]] += rollChance / SPECIAL_CARDS;\n        row[position - 3] += rollChance / SPECIAL_CARDS;\n\n        // Rest non-moving Chance cards.\n        row[position] += (SPECIAL_CARDS - chanceCardsMoves.length) * rollChance / SPECIAL_CARDS;\n      } else if (CHESTS.includes(position)) {\n        // Community Chest cards ordering movement.\n        for (let i = 0; i < chestCardsMoves.length; i++) {\n          const nextSquare = chestCardsMoves[i];\n          row[nextSquare] += rollChance / SPECIAL_CARDS;\n        }\n        // Rest non-moving Community Chest cards.\n        row[position] += (SPECIAL_CARDS - chestCardsMoves.length) * rollChance / SPECIAL_CARDS\n      } else if (position === GO_TO_JAIL) {\n        row[JAIL] += rollChance;\n      } else {\n        row[position] += rollChance;\n      }\n    }\n    normalizeRow(row)\n    transitions.push(row);\n  }\n\n  const precision = 0.000001;\n  for (let i = 0; i < GAME_SQUARES; i++) {\n    const next = multiplyMatrix(transitions, transitions);\n    if (didConverge(transitions, next, precision)) {\n      break;\n    }\n    transitions = next;\n  }\n\n  // All rows converge to the same values.\n  return getTopThree(transitions[0]);\n}"
        }
      ],
      "tests": [
        {
          "text": "`monopolyOdds(8)` should return a string.",
          "testCode": "assert(typeof monopolyOdds(8) === 'string');"
        },
        {
          "text": "`monopolyOdds(8)` should return string `102400`.",
          "testCode": "assert.strictEqual(monopolyOdds(8), '102400');"
        },
        {
          "text": "`monopolyOdds(10)` should return string `100024`.",
          "testCode": "assert.strictEqual(monopolyOdds(10), '100024');"
        },
        {
          "text": "`monopolyOdds(20)` should return string `100005`.",
          "testCode": "assert.strictEqual(monopolyOdds(20), '100005');"
        },
        {
          "text": "`monopolyOdds(4)` should return string `101524`.",
          "testCode": "assert.strictEqual(monopolyOdds(4), '101524');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302198,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-84-monopoly-odds.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c11000cf542c50fed4",
      "title": "Problem 85: Counting rectangles",
      "challengeType": 1,
      "dashedName": "problem-85-counting-rectangles",
      "description": "By counting carefully it can be seen that a rectangular grid measuring 3 by 2 contains eighteen rectangles:\n\n<img alt=\"a diagram of the different rectangles found within a 3 by 2 rectangular grid\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/counting-rectangles.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nAlthough there may not exists a rectangular grid that contains exactly `n` rectangles, find the area of the grid with the nearest solution.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countingRectangles(n) {\n\n  return true;\n}\n\ncountingRectangles(18);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function countingRectangles(n) {\n  function numberOfRectangles(h, w) {\n    return (h * (h + 1) * w * (w + 1)) / 4;\n  }\n\n  function rectangleArea(h, w) {\n    return h * w;\n  }\n\n  let rectanglesCount = 1;\n  let maxSide = 1;\n  while (rectanglesCount < n) {\n    maxSide++;\n    rectanglesCount = numberOfRectangles(maxSide, 1);\n  }\n\n  let bestDiff = Math.abs(rectanglesCount - n);\n  let bestSize = [maxSide, 1];\n\n  let curHeight = maxSide - 1;\n  let curWidth = 1;\n\n  for (curWidth; curWidth < curHeight; curWidth++) {\n    for (curHeight; curHeight > curWidth; curHeight--) {\n      rectanglesCount = numberOfRectangles(curHeight, curWidth);\n      const curDiff = Math.abs(rectanglesCount - n);\n      if (curDiff < bestDiff) {\n        bestDiff = curDiff;\n        bestSize = [curHeight, curWidth];\n      }\n\n      if (rectanglesCount < n) {\n        break;\n      }\n    }\n  }\n  return rectangleArea(...bestSize);\n}"
        }
      ],
      "tests": [
        {
          "text": "`countingRectangles(18)` should return a number.",
          "testCode": "assert(typeof countingRectangles(18) === 'number');"
        },
        {
          "text": "`countingRectangles(18)` should return `6`.",
          "testCode": "assert.strictEqual(countingRectangles(18), 6);"
        },
        {
          "text": "`countingRectangles(250)` should return `22`.",
          "testCode": "assert.strictEqual(countingRectangles(250), 22);"
        },
        {
          "text": "`countingRectangles(50000)` should return `364`.",
          "testCode": "assert.strictEqual(countingRectangles(50000), 364);"
        },
        {
          "text": "`countingRectangles(1000000)` should return `1632`.",
          "testCode": "assert.strictEqual(countingRectangles(1000000), 1632);"
        },
        {
          "text": "`countingRectangles(2000000)` should return `2772`.",
          "testCode": "assert.strictEqual(countingRectangles(2000000), 2772);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302199,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-85-counting-rectangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c31000cf542c50fed5",
      "title": "Problem 86: Cuboid route",
      "challengeType": 1,
      "dashedName": "problem-86-cuboid-route",
      "description": "A spider, S, sits in one corner of a cuboid room, measuring 6 by 5 by 3, and a fly, F, sits in the opposite corner. By travelling on the surfaces of the room the shortest \"straight line\" distance from S to F is 10 and the path is shown on the diagram.\n\n<img alt=\"a diagram of a spider and fly's path from one corner of a cuboid room to the opposite corner\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/cuboid-route.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHowever, there are up to three \"shortest\" path candidates for any given cuboid and the shortest route doesn't always have integer length.\n\nIt can be shown that there are exactly `2060` distinct cuboids, ignoring rotations, with integer dimensions, up to a maximum size of M by M by M, for which the shortest route has integer length when M = 100. This is the least value of M for which the number of solutions first exceeds two thousand; the number of solutions when M = 99 is `1975`.\n\nFind the least value of M such that the number of solutions first exceeds `n`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cuboidRoute(n) {\n\n  return true;\n}\n\ncuboidRoute(2000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function cuboidRoute(n) {\n  // Based on https://www.mathblog.dk/project-euler-86-shortest-path-cuboid/\n  function getLength(a, b) {\n    return Math.sqrt(a ** 2 + b ** 2);\n  }\n\n  let M = 2;\n  let counter = 0;\n\n  while (counter < n) {\n    M++;\n    for (let baseHeightWidth = 3; baseHeightWidth <= 2 * M; baseHeightWidth++) {\n      const pathLength = getLength(M, baseHeightWidth);\n      if (Number.isInteger(pathLength)) {\n        if (baseHeightWidth <= M) {\n          counter += Math.floor(baseHeightWidth / 2);\n        } else {\n          counter += 1 + M - Math.floor((baseHeightWidth + 1) / 2);\n        }\n      }\n    }\n  }\n\n  return M;\n}"
        }
      ],
      "tests": [
        {
          "text": "`cuboidRoute(2000)` should return a number.",
          "testCode": "assert(typeof cuboidRoute(2000) === 'number');"
        },
        {
          "text": "`cuboidRoute(2000)` should return `100`.",
          "testCode": "assert.strictEqual(cuboidRoute(2000), 100);"
        },
        {
          "text": "`cuboidRoute(25000)` should return `320`.",
          "testCode": "assert.strictEqual(cuboidRoute(25000), 320);"
        },
        {
          "text": "`cuboidRoute(500000)` should return `1309`.",
          "testCode": "assert.strictEqual(cuboidRoute(500000), 1309);"
        },
        {
          "text": "`cuboidRoute(1000000)` should return `1818`.",
          "testCode": "assert.strictEqual(cuboidRoute(1000000), 1818);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302200,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-86-cuboid-route.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c51000cf542c50fed8",
      "title": "Problem 87: Prime power triples",
      "challengeType": 1,
      "dashedName": "problem-87-prime-power-triples",
      "description": "The smallest number expressible as the sum of a prime square, prime cube, and prime fourth power is `28`. In fact, there are exactly four numbers below fifty that can be expressed in such a way:\n\n<div style='margin-left: 4em;'>\n  28 = 2<sup>2</sup> + 2<sup>3</sup> + 2<sup>4</sup><br>\n  33 = 3<sup>2</sup> + 2<sup>3</sup> + 2<sup>4</sup><br>\n  49 = 5<sup>2</sup> + 2<sup>3</sup> + 2<sup>4</sup><br>\n  47 = 2<sup>2</sup> + 3<sup>3</sup> + 2<sup>4</sup>\n</div><br>\n\nHow many numbers below `n` can be expressed as the sum of a prime square, prime cube, and prime fourth power?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primePowerTriples(n) {\n\n  return true;\n}\n\nprimePowerTriples(50);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function primePowerTriples(n) {\n  function getSievePrimes(max) {\n    const primes = [];\n    const primesMap = new Array(max).fill(true);\n    primesMap[0] = false;\n    primesMap[1] = false;\n\n    for (let i = 2; i <= max; i += 2) {\n      if (primesMap[i]) {\n        primes.push(i);\n        for (let j = i * i; j <= max; j = j + i) {\n          primesMap[j] = false;\n        }\n      }\n      if (i === 2) {\n        i = 1;\n      }\n    }\n    return primes;\n  }\n\n  function getPowersSummed(numbers, powers, limit, curSum) {\n    if (curSum >= limit) {\n      return [];\n    } else if (powers.length === 0) {\n      return [curSum];\n    }\n\n    const powersSummed = [];\n\n    const curPower = powers[0];\n    const powersLeft = powers.slice(1);\n    for (let i = 0; i < numbers.length; i++) {\n      const curNumber = numbers[i];\n      const nextSum = curSum + curNumber ** curPower;\n      if (nextSum >= limit) {\n        return powersSummed;\n      }\n      const result = getPowersSummed(\n        numbers,\n        powersLeft,\n        limit,\n        curSum + curNumber ** curPower\n      );\n      powersSummed.push(...result);\n    }\n    return powersSummed;\n  }\n\n  const maximumBaseNumber = Math.floor(Math.sqrt(n - 2 ** 3 - 2 ** 4)) + 1;\n  const primes = getSievePrimes(maximumBaseNumber);\n  const uniqueSums = new Set(getPowersSummed(primes, [2, 3, 4], n, 0));\n\n  return uniqueSums.size;\n}"
        }
      ],
      "tests": [
        {
          "text": "`primePowerTriples(50)` should return a number.",
          "testCode": "assert(typeof primePowerTriples(50) === 'number');"
        },
        {
          "text": "`primePowerTriples(50)` should return `4`.",
          "testCode": "assert.strictEqual(primePowerTriples(50), 4);"
        },
        {
          "text": "`primePowerTriples(10035)` should return `684`.",
          "testCode": "assert.strictEqual(primePowerTriples(10035), 684);"
        },
        {
          "text": "`primePowerTriples(500000)` should return `18899`.",
          "testCode": "assert.strictEqual(primePowerTriples(500000), 18899);"
        },
        {
          "text": "`primePowerTriples(5000000)` should return `138932`.",
          "testCode": "assert.strictEqual(primePowerTriples(5000000), 138932);"
        },
        {
          "text": "`primePowerTriples(50000000)` should return `1097343`.",
          "testCode": "assert.strictEqual(primePowerTriples(50000000), 1097343);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302201,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-87-prime-power-triples.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c51000cf542c50fed6",
      "title": "Problem 88: Product-sum numbers",
      "challengeType": 1,
      "dashedName": "problem-88-product-sum-numbers",
      "description": "A natural number, `N`, that can be written as the sum and product of a given set of at least two natural numbers, $\\\\{a_1, a_2, \\ldots , a_k\\\\}$ is called a product-sum number: $N = a_1 + a_2 + \\cdots + a_k = a_1 × a_2 × \\cdots × a_k$.\n\nFor example, 6 = 1 + 2 + 3 = 1 × 2 × 3.\n\nFor a given set of size, `k`, we shall call the smallest N with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, `k` = 2, 3, 4, 5, and 6 are as follows.\n\n<div style='margin-left: 4em;'>\n  <var>k</var>=2: 4 = 2 × 2 = 2 + 2<br>\n  <var>k</var>=3: 6 = 1 × 2 × 3 = 1 + 2 + 3<br>\n  <var>k</var>=4: 8 = 1 × 1 × 2 × 4 = 1 + 1 + 2 + 4<br>\n  <var>k</var>=5: 8 = 1 × 1 × 2 × 2 × 2  = 1 + 1 + 2 + 2 + 2<br>\n  <var>k</var>=6: 12 = 1 × 1 × 1 × 1 × 2 × 6 = 1 + 1 + 1 + 1 + 2 + 6\n</div><br>\n\nHence for 2 ≤ `k` ≤ 6, the sum of all the minimal product-sum numbers is 4 + 6 + 8 + 12 = 30; note that `8` is only counted once in the sum.\n\nIn fact, as the complete set of minimal product-sum numbers for 2 ≤ `k` ≤ 12 is $\\\\{4, 6, 8, 12, 15, 16\\\\}$, the sum is `61`.\n\nWhat is the sum of all the minimal product-sum numbers for 2 ≤ `k` ≤ `limit`?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function productSumNumbers(limit) {\n\n  return true;\n}\n\nproductSumNumbers(6);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function productSumNumbers(limit) {\n  function getProductSums(curProduct, curSum, factorsCount, start) {\n    const k = curProduct - curSum + factorsCount;\n    if (k <= limit) {\n      if (curProduct < minimalProductSums[k]) {\n        minimalProductSums[k] = curProduct;\n      }\n      for (let i = start; i < Math.floor((limit / curProduct) * 2) + 1; i++) {\n        getProductSums(curProduct * i, curSum + i, factorsCount + 1, i);\n      }\n    }\n  }\n\n  const minimalProductSums = new Array(limit + 1).fill(2 * limit);\n  getProductSums(1, 1, 1, 2);\n\n  const uniqueProductSums = [...new Set(minimalProductSums.slice(2))];\n\n  let sum = 0;\n  for (let i = 0; i < uniqueProductSums.length; i++) {\n    sum += uniqueProductSums[i];\n  }\n\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`productSumNumbers(6)` should return a number.",
          "testCode": "assert(typeof productSumNumbers(6) === 'number');"
        },
        {
          "text": "`productSumNumbers(6)` should return `30`.",
          "testCode": "assert.strictEqual(productSumNumbers(6), 30);"
        },
        {
          "text": "`productSumNumbers(12)` should return `61`.",
          "testCode": "assert.strictEqual(productSumNumbers(12), 61);"
        },
        {
          "text": "`productSumNumbers(300)` should return `12686`.",
          "testCode": "assert.strictEqual(productSumNumbers(300), 12686);"
        },
        {
          "text": "`productSumNumbers(6000)` should return `2125990`.",
          "testCode": "assert.strictEqual(productSumNumbers(6000), 2125990);"
        },
        {
          "text": "`productSumNumbers(12000)` should return `7587457`.",
          "testCode": "assert.strictEqual(productSumNumbers(12000), 7587457);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302203,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-88-product-sum-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c51000cf542c50fed7",
      "title": "Problem 89: Roman numerals",
      "challengeType": 1,
      "dashedName": "problem-89-roman-numerals",
      "description": "For a number written in Roman numerals to be considered valid there are basic rules which must be followed. Even though the rules allow some numbers to be expressed in more than one way there is always a *best* way of writing a particular number.\n\n- Numerals must be arranged in descending order of size.\n- M, C, and X cannot be equaled or exceeded by smaller denominations.\n- D, L, and V can each only appear once.\n\nIn addition to the three rules given above, if subtractive combinations are used then the following four rules must be followed.\n\n- Only one I, X, and C can be used as the leading numeral in part of a subtractive pair.\n- I can only be placed before V and X.\n- X can only be placed before L and C.\n- C can only be placed before D and M.\n\nFor example, it would appear that there are at least six ways of writing the number sixteen:\n\n<div style=\"margin-left: 4em; font-family: 'courier new', monospace;\">\n  IIIIIIIIIIIIIIII<br>\n  VIIIIIIIIIII<br>\n  VVIIIIII<br>\n  XIIIIII<br>\n  VVVI<br>\n  XVI<br><br>\n</div>\n\nHowever, according to the rules only XIIIIII and XVI are valid, and the last example is considered to be the most efficient, as it uses the least number of numerals.\n\nThe array, `roman`, will contain numbers written with valid, but not necessarily minimal, Roman numerals.\n\nFind the number of characters saved by writing each of these in their minimal form.\n\n**Note:** You can assume that all the Roman numerals in the array contain no more than four consecutive identical units.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function romanNumerals(roman) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst testNumerals1 = [\n  'XIIIIII', 'XVI', 'MMMCCLXVIIII', 'XXXXVI', 'MMMMXX', 'CCLI', 'CCCCXX', 'MMMMDCXXXXI', 'DCCCCIIII', 'MXVIIII'\n];\n\nromanNumerals(testNumerals1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function romanNumerals(roman) {\n  const numerals = [...roman];\n  const replaces = [\n    ['VIIII', 'IX'],\n    ['IIII', 'IV'],\n    ['LXXXX', 'XC'],\n    ['XXXX', 'XL'],\n    ['DCCCC', 'CM'],\n    ['CCCC', 'CD']\n  ];\n  let savedChars = 0;\n  for (let i = 0; i < numerals.length; i++) {\n    const charsBefore = numerals[i].length;\n    for (let j = 0; j < replaces.length; j++) {\n      numerals[i] = numerals[i].replace(...replaces[j]);\n    }\n    const charsAfter = numerals[i].length;\n    savedChars += charsBefore - charsAfter;\n  }\n  return savedChars;\n}"
        }
      ],
      "tests": [
        {
          "text": "`romanNumerals(testNumerals1)` should return a number.",
          "testCode": "assert(typeof romanNumerals(_testNumerals1) === 'number');"
        },
        {
          "text": "`romanNumerals(testNumerals1)` should return `19`.",
          "testCode": "assert.strictEqual(romanNumerals(_testNumerals1), 19);"
        },
        {
          "text": "`romanNumerals(testNumerals2)` should return `743`.",
          "testCode": "assert.strictEqual(romanNumerals(_testNumerals2), 743);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302204,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-89-roman-numerals.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testNumerals1 = [\n  'XIIIIII', 'XVI', 'MMMCCLXVIIII', 'XXXXVI', 'MMMMXX', 'CCLI', 'CCCCXX', 'MMMMDCXXXXI', 'DCCCCIIII', 'MXVIIII'\n];\nconst _testNumerals2 = [\n  'MMMMDCLXXII','MMDCCCLXXXIII','MMMDLXVIIII','MMMMDXCV','DCCCLXXII','MMCCCVI','MMMCDLXXXVII','MMMMCCXXI','MMMCCXX','MMMMDCCCLXXIII','MMMCCXXXVII','MMCCCLXXXXIX','MDCCCXXIIII','MMCXCVI','CCXCVIII','MMMCCCXXXII','MDCCXXX','MMMDCCCL','MMMMCCLXXXVI','MMDCCCXCVI','MMMDCII','MMMCCXII','MMMMDCCCCI','MMDCCCXCII','MDCXX','CMLXXXVII','MMMXXI','MMMMCCCXIV','MLXXII','MCCLXXVIIII','MMMMCCXXXXI','MMDCCCLXXII','MMMMXXXI','MMMDCCLXXX','MMDCCCLXXIX','MMMMLXXXV','MCXXI','MDCCCXXXVII','MMCCCLXVII','MCDXXXV','CCXXXIII','CMXX','MMMCLXIV','MCCCLXXXVI','DCCCXCVIII','MMMDCCCCXXXIV','CDXVIIII','MMCCXXXV','MDCCCXXXII','MMMMD','MMDCCLXIX','MMMMCCCLXXXXVI','MMDCCXLII','MMMDCCCVIIII','DCCLXXXIIII','MDCCCCXXXII','MMCXXVII','DCCCXXX','CCLXIX','MMMXI','MMMMCMLXXXXVIII','MMMMDLXXXVII','MMMMDCCCLX','MMCCLIV','CMIX','MMDCCCLXXXIIII','CLXXXII','MMCCCCXXXXV','MMMMDLXXXVIIII','MMMDCCCXXI','MMDCCCCLXXVI','MCCCCLXX','MMCDLVIIII','MMMDCCCLIX','MMMMCCCCXIX','MMMDCCCLXXV','XXXI','CDLXXXIII','MMMCXV','MMDCCLXIII','MMDXXX','MMMMCCCLVII','MMMDCI','MMMMCDLXXXIIII','MMMMCCCXVI','CCCLXXXVIII','MMMMCML','MMMMXXIV','MMMCCCCXXX','DCCX','MMMCCLX','MMDXXXIII','CCCLXIII','MMDCCXIII','MMMCCCXLIV','CLXXXXI','CXVI','MMMMCXXXIII','CLXX','DCCCXVIII','MLXVII','DLXXXX','MMDXXI','MMMMDLXXXXVIII','MXXII','LXI','DCCCCXLIII','MMMMDV','MMMMXXXIV','MDCCCLVIII','MMMCCLXXII','MMMMDCCXXXVI','MMMMLXXXIX','MDCCCLXXXI','MMMMDCCCXV','MMMMCCCCXI','MMMMCCCLIII','MDCCCLXXI','MMCCCCXI','MLXV','MMCDLXII','MMMMDXXXXII','MMMMDCCCXL','MMMMCMLVI','CCLXXXIV','MMMDCCLXXXVI','MMCLII','MMMCCCCXV','MMLXXXIII','MMMV','MMMV','DCCLXII','MMDCCCCXVI','MMDCXLVIII','CCLIIII','CCCXXV','MMDCCLXXXVIIII','MMMMDCLXXVIII','MMMMDCCCXCI','MMMMCCCXX','MMCCXLV','MMMDCCCLXIX','MMCCLXIIII','MMMDCCCXLIX','MMMMCCCLXIX','CMLXXXXI','MCMLXXXIX','MMCDLXI','MMDCLXXVIII','MMMMDCCLXI','MCDXXV','DL','CCCLXXII','MXVIIII','MCCCCLXVIII','CIII','MMMDCCLXXIIII','MMMDVIII','MMMMCCCLXXXXVII','MMDXXVII','MMDCCLXXXXV','MMMMCXLVI','MMMDCCLXXXII','MMMDXXXVI','MCXXII','CLI','DCLXXXIX','MMMCLI','MDCLXIII','MMMMDCCXCVII','MMCCCLXXXV','MMMDCXXVIII','MMMCDLX','MMMCMLII','MMMIV','MMMMDCCCLVIII','MMMDLXXXVIII','MCXXIV','MMMMLXXVI','CLXXIX','MMMCCCCXXVIIII','DCCLXXXV','MMMDCCCVI','LI','CLXXXVI','MMMMCCCLXXVI','MCCCLXVI','CCXXXIX','MMDXXXXI','MMDCCCXLI','DCCCLXXXVIII','MMMMDCCCIV','MDCCCCXV','MMCMVI','MMMMCMLXXXXV','MMDCCLVI','MMMMCCXLVIII','DCCCCIIII','MMCCCCIII','MMMDCCLXXXVIIII','MDCCCLXXXXV','DVII','MMMV','DCXXV','MMDCCCXCV','DCVIII','MMCDLXVI','MCXXVIII','MDCCXCVIII','MMDCLX','MMMDCCLXIV','MMCDLXXVII','MMDLXXXIIII','MMMMCCCXXII','MMMDCCCXLIIII','DCCCCLXVII','MMMCLXXXXIII','MCCXV','MMMMDCXI','MMMMDCLXXXXV','MMMCCCLII','MMCMIX','MMDCCXXV','MMDLXXXVI','MMMMDCXXVIIII','DCCCCXXXVIIII','MMCCXXXIIII','MMDCCLXXVIII','MDCCLXVIIII','MMCCLXXXV','MMMMDCCCLXXXVIII','MMCMXCI','MDXLII','MMMMDCCXIV','MMMMLI','DXXXXIII','MMDCCXI','MMMMCCLXXXIII','MMMDCCCLXXIII','MDCLVII','MMCD','MCCCXXVII','MMMMDCCIIII','MMMDCCXLVI','MMMCLXXXVII','MMMCCVIIII','MCCCCLXXIX','DL','DCCCLXXVI','MMDXCI','MMMMDCCCCXXXVI','MMCII','MMMDCCCXXXXV','MMMCDXLV','MMDCXXXXIV','MMD','MDCCCLXXXX','MMDCXLIII','MMCCXXXII','MMDCXXXXVIIII','DCCCLXXI','MDXCVIIII','MMMMCCLXXVIII','MDCLVIIII','MMMCCCLXXXIX','MDCLXXXV','MDLVIII','MMMMCCVII','MMMMDCXIV','MMMCCCLXIIII','MMIIII','MMMMCCCLXXIII','CCIII','MMMCCLV','MMMDXIII','MMMCCCXC','MMMDCCCXXI','MMMMCCCCXXXII','CCCLVI','MMMCCCLXXXVI','MXVIIII','MMMCCCCXIIII','CLXVII','MMMCCLXX','CCCCLXIV','MMXXXXII','MMMMCCLXXXX','MXL','CCXVI','CCCCLVIIII','MMCCCII','MCCCLVIII','MMMMCCCX','MCDLXXXXIV','MDCCCXIII','MMDCCCXL','MMMMCCCXXIII','DXXXIV','CVI','MMMMDCLXXX','DCCCVII','MMCMLXIIII','MMMDCCCXXXIII','DCCC','MDIII','MMCCCLXVI','MMMCCCCLXXI','MMDCCCCXVIII','CCXXXVII','CCCXXV','MDCCCXII','MMMCMV','MMMMCMXV','MMMMDCXCI','DXXI','MMCCXLVIIII','MMMMCMLII','MDLXXX','MMDCLXVI','CXXI','MMMDCCCLIIII','MMMCXXI','MCCIII','MMDCXXXXI','CCXCII','MMMMDXXXV','MMMCCCLXV','MMMMDLXV','MMMCCCCXXXII','MMMCCCVIII','DCCCCLXXXXII','MMCLXIV','MMMMCXI','MLXXXXVII','MMMCDXXXVIII','MDXXII','MLV','MMMMDLXVI','MMMCXII','XXXIII','MMMMDCCCXXVI','MMMLXVIIII','MMMLX','MMMCDLXVII','MDCCCLVII','MMCXXXVII','MDCCCCXXX','MMDCCCLXIII','MMMMDCXLIX','MMMMCMXLVIII','DCCCLXXVIIII','MDCCCLIII','MMMCMLXI','MMMMCCLXI','MMDCCCLIII','MMMDCCCVI','MMDXXXXIX','MMCLXXXXV','MMDXXX','MMMXIII','DCLXXIX','DCCLXII','MMMMDCCLXVIII','MDCCXXXXIII','CCXXXII','MMMMDCXXV','MMMCCCXXVIII','MDCVIII','MMMCLXXXXIIII','CLXXXI','MDCCCCXXXIII','MMMMDCXXX','MMMDCXXIV','MMMCCXXXVII','MCCCXXXXIIII','CXVIII','MMDCCCCIV','MMMMCDLXXV','MMMDLXIV','MDXCIII','MCCLXXXI','MMMDCCCXXIV','MCXLIII','MMMDCCCI','MCCLXXX','CCXV','MMDCCLXXI','MMDLXXXIII','MMMMDCXVII','MMMCMLXV','MCLXVIII','MMMMCCLXXVI','MMMDCCLXVIIII','MMMMDCCCIX','DLXXXXIX','DCCCXXII','MMMMIII','MMMMCCCLXXVI','DCCCXCIII','DXXXI','MXXXIIII','CCXII','MMMDCCLXXXIIII','MMMCXX','MMMCMXXVII','DCCCXXXX','MMCDXXXVIIII','MMMMDCCXVIII','LV','MMMDCCCCVI','MCCCII','MMCMLXVIIII','MDCCXI','MMMMDLXVII','MMCCCCLXI','MMDCCV','MMMCCCXXXIIII','MMMMDI','MMMDCCCXCV','MMDCCLXXXXI','MMMDXXVI','MMMDCCCLVI','MMDCXXX','MCCCVII','MMMMCCCLXII','MMMMXXV','MMCMXXV','MMLVI','MMDXXX','MMMMCVII','MDC','MCCIII','MMMMDCC','MMCCLXXV','MMDCCCXXXXVI','MMMMCCCLXV','CDXIIII','MLXIIII','CCV','MMMCMXXXI','CCCCLXVI','MDXXXII','MMMMCCCLVIII','MMV','MMMCLII','MCMLI','MMDCCXX','MMMMCCCCXXXVI','MCCLXXXI','MMMCMVI','DCCXXX','MMMMCCCLXV','DCCCXI','MMMMDCCCXIV','CCCXXI','MMDLXXV','CCCCLXXXX','MCCCLXXXXII','MMDCIX','DCCXLIIII','DXIV','MMMMCLII','CDLXI','MMMCXXVII','MMMMDCCCCLXIII','MMMDCLIIII','MCCCCXXXXII','MMCCCLX','CCCCLIII','MDCCLXXVI','MCMXXIII','MMMMDLXXVIII','MMDCCCCLX','MMMCCCLXXXX','MMMCDXXVI','MMMDLVIII','CCCLXI','MMMMDCXXII','MMDCCCXXI','MMDCCXIII','MMMMCLXXXVI','MDCCCCXXVI','MDV','MMDCCCCLXXVI','MMMMCCXXXVII','MMMDCCLXXVIIII','MMMCCCCLXVII','DCCXLI','MMCLXXXVIII','MCCXXXVI','MMDCXLVIII','MMMMCXXXII','MMMMDCCLXVI','MMMMCMLI','MMMMCLXV','MMMMDCCCXCIV','MCCLXXVII','LXXVIIII','DCCLII','MMMCCCXCVI','MMMCLV','MMDCCCXXXXVIII','DCCCXV','MXC','MMDCCLXXXXVII','MMMMCML','MMDCCCLXXVIII','DXXI','MCCCXLI','DCLXXXXI','MMCCCLXXXXVIII','MDCCCCLXXVIII','MMMMDXXV','MMMDCXXXVI','MMMCMXCVII','MMXVIIII','MMMDCCLXXIV','MMMCXXV','DXXXVIII','MMMMCLXVI','MDXII','MMCCCLXX','CCLXXI','DXIV','MMMCLIII','DLII','MMMCCCXLIX','MMCCCCXXVI','MMDCXLIII','MXXXXII','CCCLXXXV','MDCLXXVI','MDCXII','MMMCCCLXXXIII','MMDCCCCLXXXII','MMMMCCCLXXXV','MMDCXXI','DCCCXXX','MMMDCCCCLII','MMMDCCXXII','MMMMCDXCVIII','MMMCCLXVIIII','MMXXV','MMMMCDXIX','MMMMCCCX','MMMCCCCLXVI','MMMMDCLXXVIIII','MMMMDCXXXXIV','MMMCMXII','MMMMXXXIII','MMMMDLXXXII','DCCCLIV','MDXVIIII','MMMCLXXXXV','CCCCXX','MMDIX','MMCMLXXXVIII','DCCXLIII','DCCLX','D','MCCCVII','MMMMCCCLXXXIII','MDCCCLXXIIII','MMMDCCCCLXXXVII','MMMMCCCVII','MMMDCCLXXXXVI','CDXXXIV','MCCLXVIII','MMMMDLX','MMMMDXII','MMMMCCCCLIIII','MCMLXXXXIII','MMMMDCCCIII','MMDCLXXXIII','MDCCCXXXXIV','XXXXVII','MMMDCCCXXXII','MMMDCCCXLII','MCXXXV','MDCXXVIIII','MMMCXXXXIIII','MMMMCDXVII','MMMDXXIII','MMMMCCCCLXI','DCLXXXXVIIII','LXXXXI','CXXXIII','MCDX','MCCLVII','MDCXXXXII','MMMCXXIV','MMMMLXXXX','MMDCCCCXLV','MLXXX','MMDCCCCLX','MCDLIII','MMMCCCLXVII','MMMMCCCLXXIV','MMMDCVIII','DCCCCXXIII','MMXCI','MMDCCIV','MMMMDCCCXXXIV','CCCLXXI','MCCLXXXII','MCMIII','CCXXXI','DCCXXXVIII','MMMMDCCXLVIIII','MMMMCMXXXV','DCCCLXXV','DCCXCI','MMMMDVII','MMMMDCCCLXVIIII','CCCXCV','MMMMDCCXX','MCCCCII','MMMCCCXC','MMMCCCII','MMDCCLXXVII','MMDCLIIII','CCXLIII','MMMDCXVIII','MMMCCCIX','MCXV','MMCCXXV','MLXXIIII','MDCCXXVI','MMMCCCXX','MMDLXX','MMCCCCVI','MMDCCXX','MMMMDCCCCXCV','MDCCCXXXII','MMMMDCCCCXXXX','XCIV','MMCCCCLX','MMXVII','MLXXI','MMMDXXVIII','MDCCCCII','MMMCMLVII','MMCLXXXXVIII','MDCCCCLV','MCCCCLXXIIII','MCCCLII','MCDXLVI','MMMMDXVIII','DCCLXXXIX','MMMDCCLXIV','MDCCCCXLIII','CLXXXXV','MMMMCCXXXVI','MMMDCCCXXI','MMMMCDLXXVII','MCDLIII','MMCCXLVI','DCCCLV','MCDLXX','DCLXXVIII','MMDCXXXIX','MMMMDCLX','MMDCCLI','MMCXXXV','MMMCCXII','MMMMCMLXII','MMMMCCV','MCCCCLXIX','MMMMCCIII','CLXVII','MCCCLXXXXIIII','MMMMDCVIII','MMDCCCLXI','MMLXXIX','CMLXIX','MMDCCCXLVIIII','DCLXII','MMMCCCXLVII','MDCCCXXXV','MMMMDCCXCVI','DCXXX','XXVI','MMLXIX','MMCXI','DCXXXVII','MMMMCCCXXXXVIII','MMMMDCLXI','MMMMDCLXXIIII','MMMMVIII','MMMMDCCCLXII','MDCXCI','MMCCCXXIIII','CCCCXXXXV','MMDCCCXXI','MCVI','MMDCCLXVIII','MMMMCXL','MLXVIII','CMXXVII','CCCLV','MDCCLXXXIX','MMMCCCCLXV','MMDCCLXII','MDLXVI','MMMCCCXVIII','MMMMCCLXXXI','MMCXXVII','MMDCCCLXVIII','MMMCXCII','MMMMDCLVIII','MMMMDCCCXXXXII','MMDCCCCLXXXXVI','MDCCXL','MDCCLVII','MMMMDCCCLXXXVI','DCCXXXIII','MMMMDCCCCLXXXV','MMCCXXXXVIII','MMMCCLXXVIII','MMMDCLXXVIII','DCCCI','MMMMLXXXXVIIII','MMMCCCCLXXII','MMCLXXXVII','CCLXVI','MCDXLIII','MMCXXVIII','MDXIV','CCCXCVIII','CLXXVIII','MMCXXXXVIIII','MMMDCLXXXIV','CMLVIII','MCDLIX','MMMMDCCCXXXII','MMMMDCXXXIIII','MDCXXI','MMMDCXLV','MCLXXVIII','MCDXXII','IV','MCDLXXXXIII','MMMMDCCLXV','CCLI','MMMMDCCCXXXVIII','DCLXII','MCCCLXVII','MMMMDCCCXXXVI','MMDCCXLI','MLXI','MMMCDLXVIII','MCCCCXCIII','XXXIII','MMMDCLXIII','MMMMDCL','DCCCXXXXIIII','MMDLVII','DXXXVII','MCCCCXXIIII','MCVII','MMMMDCCXL','MMMMCXXXXIIII','MCCCCXXIV','MMCLXVIII','MMXCIII','MDCCLXXX','MCCCLIIII','MMDCLXXI','MXI','MCMLIV','MMMCCIIII','DCCLXXXVIIII','MDCLIV','MMMDCXIX','CMLXXXI','DCCLXXXVII','XXV','MMMXXXVI','MDVIIII','CLXIII','MMMCDLVIIII','MMCCCCVII','MMMLXX','MXXXXII','MMMMCCCLXVIII','MMDCCCXXVIII','MMMMDCXXXXI','MMMMDCCCXXXXV','MMMXV','MMMMCCXVIIII','MMDCCXIIII','MMMXXVII','MDCCLVIIII','MMCXXIIII','MCCCLXXIV','DCLVIII','MMMLVII','MMMCXLV','MMXCVII','MMMCCCLXXXVII','MMMMCCXXII','DXII','MMMDLV','MCCCLXXVIII','MMMCLIIII','MMMMCLXXXX','MMMCLXXXIIII','MDCXXIII','MMMMCCXVI','MMMMDLXXXIII','MMMDXXXXIII','MMMMCCCCLV','MMMDLXXXI','MMMCCLXXVI','MMMMXX','MMMMDLVI','MCCCCLXXX','MMMXXII','MMXXII','MMDCCCCXXXI','MMMDXXV','MMMDCLXXXVIIII','MMMDLXXXXVII','MDLXIIII','CMXC','MMMXXXVIII','MDLXXXVIII','MCCCLXXVI','MMCDLIX','MMDCCCXVIII','MDCCCXXXXVI','MMMMCMIV','MMMMDCIIII','MMCCXXXV','XXXXVI','MMMMCCXVII','MMCCXXIV','MCMLVIIII','MLXXXIX','MMMMLXXXIX','CLXXXXIX','MMMDCCCCLVIII','MMMMCCLXXIII','MCCCC','DCCCLIX','MMMCCCLXXXII','MMMCCLXVIIII','MCLXXXV','CDLXXXVII','DCVI','MMX','MMCCXIII','MMMMDCXX','MMMMXXVIII','DCCCLXII','MMMMCCCXLIII','MMMMCLXV','DXCI','MMMMCLXXX','MMMDCCXXXXI','MMMMXXXXVI','DCLX','MMMCCCXI','MCCLXXX','MMCDLXXII','DCCLXXI','MMMCCCXXXVI','MCCCCLXXXVIIII','CDLVIII','DCCLVI','MMMMDCXXXVIII','MMCCCLXXXIII','MMMMDCCLXXV','MMMXXXVI','CCCLXXXXIX','CV','CCCCXIII','CCCCXVI','MDCCCLXXXIIII','MMDCCLXXXII','MMMMCCCCLXXXI','MXXV','MMCCCLXXVIIII','MMMCCXII','MMMMCCXXXIII','MMCCCLXXXVI','MMMDCCCLVIIII','MCCXXXVII','MDCLXXV','XXXV','MMDLI','MMMCCXXX','MMMMCXXXXV','CCCCLIX','MMMMDCCCLXXIII','MMCCCXVII','DCCCXVI','MMMCCCXXXXV','MDCCCCXCV','CLXXXI','MMMMDCCLXX','MMMDCCCIII','MMCLXXVII','MMMDCCXXIX','MMDCCCXCIIII','MMMCDXXIIII','MMMMXXVIII','MMMMDCCCCLXVIII','MDCCCXX','MMMMCDXXI','MMMMDLXXXIX','CCXVI','MDVIII','MMCCLXXI','MMMDCCCLXXI','MMMCCCLXXVI','MMCCLXI','MMMMDCCCXXXIV','DLXXXVI','MMMMDXXXII','MMMXXIIII','MMMMCDIV','MMMMCCCXLVIII','MMMMCXXXVIII','MMMCCCLXVI','MDCCXVIII','MMCXX','CCCLIX','MMMMDCCLXXII','MDCCCLXXV','MMMMDCCCXXIV','DCCCXXXXVIII','MMMDCCCCXXXVIIII','MMMMCCXXXV','MDCLXXXIII','MMCCLXXXIV','MCLXXXXIIII','DXXXXIII','MCCCXXXXVIII','MMCLXXIX','MMMMCCLXIV','MXXII','MMMCXIX','MDCXXXVII','MMDCCVI','MCLXXXXVIII','MMMCXVI','MCCCLX','MMMCDX','CCLXVIIII','MMMCCLX','MCXXVIII','LXXXII','MCCCCLXXXI','MMMI','MMMCCCLXIV','MMMCCCXXVIIII','CXXXVIII','MMCCCXX','MMMCCXXVIIII','MCCLXVI','MMMCCCCXXXXVI','MMDCCXCIX','MCMLXXI','MMCCLXVIII','CDLXXXXIII','MMMMDCCXXII','MMMMDCCLXXXVII','MMMDCCLIV','MMCCLXIII','MDXXXVII','DCCXXXIIII','MCII','MMMDCCCLXXI','MMMLXXIII','MDCCCLIII','MMXXXVIII','MDCCXVIIII','MDCCCCXXXVII','MMCCCXVI','MCMXXII','MMMCCCLVIII','MMMMDCCCXX','MCXXIII','MMMDLXI','MMMMDXXII','MDCCCX','MMDXCVIIII','MMMDCCCCVIII','MMMMDCCCCXXXXVI','MMDCCCXXXV','MMCXCIV','MCMLXXXXIII','MMMCCCLXXVI','MMMMDCLXXXV','CMLXIX','DCXCII','MMXXVIII','MMMMCCCXXX','XXXXVIIII'\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3761000cf542c50fe88",
      "title": "Problem 9: Special Pythagorean triplet",
      "challengeType": 1,
      "dashedName": "problem-9-special-pythagorean-triplet",
      "description": "A Pythagorean triplet is a set of three natural numbers, `a` &lt; `b` &lt; `c`, for which,\n\n<div style='text-align: center;'><var>a</var><sup>2</sup> + <var>b</var><sup>2</sup> = <var>c</var><sup>2</sup></div>\n\nFor example, 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>.\n\nThere exists exactly one Pythagorean triplet for which `a` + `b` + `c` = 1000. Find the product `abc` such that `a` + `b` + `c` = `n`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function specialPythagoreanTriplet(n) {\n let sumOfabc = n;\n\n return true;\n}\n\nspecialPythagoreanTriplet(1000);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function specialPythagoreanTriplet(n) {\n  for (let a = 1; a <= n / 2; a++) {\n    for (let b = a + 1; b <= n / 2; b++) {\n      const c = Math.sqrt(a * a + b * b);\n\n      if ((a + b + c) % n == 0) {\n        const factor = n / (a + b + c);\n\n        return (a * b * c) * (factor ** 3);\n      }\n    }\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`specialPythagoreanTriplet(24)` should return a number.",
          "testCode": "assert.isNumber(specialPythagoreanTriplet(24));"
        },
        {
          "text": "`specialPythagoreanTriplet(24)` should return 480.",
          "testCode": "assert.strictEqual(specialPythagoreanTriplet(24), 480);"
        },
        {
          "text": "`specialPythagoreanTriplet(120)` should return 49920, 55080 or 60000.",
          "testCode": "assert.oneOf(specialPythagoreanTriplet(120), [49920, 55080, 60000]);"
        },
        {
          "text": "`specialPythagoreanTriplet(1000)` should return 31875000.",
          "testCode": "assert.strictEqual(specialPythagoreanTriplet(1000), 31875000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302205,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-9-special-pythagorean-triplet.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c61000cf542c50fed9",
      "title": "Problem 90: Cube digit pairs",
      "challengeType": 1,
      "dashedName": "problem-90-cube-digit-pairs",
      "description": "Each of the six faces on a cube has a different digit (0 to 9) written on it; the same is done to a second cube. By placing the two cubes side-by-side in different positions we can form a variety of 2-digit numbers.\n\nFor example, the square number 64 could be formed:\n\n<img alt=\"two cubes, one with the number 6 and the other with number 4\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/cube-digit-pairs.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIn fact, by carefully choosing the digits on both cubes it is possible to display all of the square numbers below one-hundred: 01, 04, 09, 16, 25, 36, 49, 64, and 81.\n\nFor example, one way this can be achieved is by placing {0, 5, 6, 7, 8, 9} on one cube and {1, 2, 3, 4, 8, 9} on the other cube.\n\nHowever, for this problem we shall allow the 6 or 9 to be turned upside-down so that an arrangement like {0, 5, 6, 7, 8, 9} and {1, 2, 3, 4, 6, 7} allows for all nine square numbers to be displayed; otherwise it would be impossible to obtain 09.\n\nIn determining a distinct arrangement we are interested in the digits on each cube, not the order.\n\n<div style=\"margin-left: 4em;\">\n  {1, 2, 3, 4, 5, 6} is equivalent to {3, 6, 4, 1, 2, 5}<br>\n  {1, 2, 3, 4, 5, 6} is distinct from {1, 2, 3, 4, 5, 9}\n</div>\n\nBut because we are allowing 6 and 9 to be reversed, the two distinct sets in the last example both represent the extended set {1, 2, 3, 4, 5, 6, 9} for the purpose of forming 2-digit numbers.\n\nHow many distinct arrangements of the two cubes allow for all of the square numbers to be displayed?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cubeDigitPairs() {\n\n  return true;\n}\n\ncubeDigitPairs();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`cubeDigitPairs()` should return a number.",
          "testCode": "assert(typeof cubeDigitPairs() === 'number');"
        },
        {
          "text": "`cubeDigitPairs()` should return 1217.",
          "testCode": "assert.strictEqual(cubeDigitPairs(), 1217);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302207,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-90-cube-digit-pairs.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c71000cf542c50feda",
      "title": "Problem 91: Right triangles with integer coordinates",
      "challengeType": 1,
      "dashedName": "problem-91-right-triangles-with-integer-coordinates",
      "description": "The points ${P}(x_1, y_1)$ and ${Q}(x_2, y_2)$ are plotted at integer coordinates and are joined to the origin, ${O}(0, 0)$, to form ${\\Delta}OPQ$.\n\n<img alt=\"a graph plotting points P (x_1, y_1) and Q(x_2, y_2) at integer coordinates that are joined to the origin O (0, 0)\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/right-triangles-integer-coordinates-1.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThere are exactly fourteen triangles containing a right angle that can be formed when each coordinate lies between 0 and 2 inclusive; that is, $0 ≤ x_1, y_1, x_2, y_2 ≤ 2$.\n\n<img alt=\"a diagram showing the 14 triangles containing a right angle that can be formed when each coordinate is between 0 and 2\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/right-triangles-integer-coordinates-2.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nGiven that $0 ≤ x_1, y_1, x_2, y_2 ≤ limit$, how many right triangles can be formed?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rightTrianglesIntCoords(limit) {\n\n  return true;\n}\n\nrightTrianglesIntCoords(2);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function rightTrianglesIntCoords(limit) {\n  function isRightTriangle(points) {\n    for (let i = 0; i < points.length; i++) {\n      const pointA = points[i];\n      const pointB = points[(i + 1) % 3];\n      const pointC = points[(i + 2) % 3];\n      const vectorAB = [pointB[0] - pointA[0], pointB[1] - pointA[1]];\n      const vectorAC = [pointC[0] - pointA[0], pointC[1] - pointA[1]];\n\n      if (isRightAngleBetween(vectorAB, vectorAC)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function isRightAngleBetween(vector1, vector2) {\n    return vector1[0] * vector2[0] + vector1[1] * vector2[1] === 0;\n  }\n\n  function getSetKey(points) {\n    return (\n      '0.0,' +\n      points\n        .sort((a, b) => a[0] - b[0])\n        .map(point => point.join('.'))\n        .join(',')\n    );\n  }\n\n  const pointO = [0, 0];\n  const rightTriangles = new Set();\n  for (let x1 = 1; x1 <= limit; x1++) {\n    for (let y1 = 0; y1 <= limit; y1++) {\n      const pointP = [x1, y1];\n      for (let x2 = 0; x2 <= limit; x2++) {\n        for (let y2 = 1; y2 <= limit; y2++) {\n          const pointQ = [x2, y2];\n          if (pointP[0] === pointQ[0] && pointP[1] === pointQ[1]) {\n            continue;\n          }\n          if (isRightTriangle([pointO, pointP, pointQ])) {\n            rightTriangles.add(getSetKey([pointP, pointQ]));\n          }\n        }\n      }\n    }\n  }\n  return rightTriangles.size;\n}"
        }
      ],
      "tests": [
        {
          "text": "`rightTrianglesIntCoords(2)` should return a number.",
          "testCode": "assert(typeof rightTrianglesIntCoords(2) === 'number');"
        },
        {
          "text": "`rightTrianglesIntCoords(2)` should return `14`.",
          "testCode": "assert.strictEqual(rightTrianglesIntCoords(2), 14);"
        },
        {
          "text": "`rightTrianglesIntCoords(10)` should return `448`.",
          "testCode": "assert.strictEqual(rightTrianglesIntCoords(10), 448);"
        },
        {
          "text": "`rightTrianglesIntCoords(25)` should return `3207`.",
          "testCode": "assert.strictEqual(rightTrianglesIntCoords(25), 3207);"
        },
        {
          "text": "`rightTrianglesIntCoords(50)` should return `14234`.",
          "testCode": "assert.strictEqual(rightTrianglesIntCoords(50), 14234);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302208,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-91-right-triangles-with-integer-coordinates.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3c81000cf542c50fedb",
      "title": "Problem 92: Square digit chains",
      "challengeType": 1,
      "dashedName": "problem-92-square-digit-chains",
      "description": "A number chain is created by continuously adding the square of the digits in a number to form a new number until it has been seen before.\n\nFor example,\n\n$$\\begin{align}\n  & 44 → 32 → 13 → 10 → \\boldsymbol{1} → \\boldsymbol{1}\\\\\\\\\n  & 85 → \\boldsymbol{89} → 145 → 42 → 20 → 4 → 16 → 37 → 58 → \\boldsymbol{89}\\\\\\\\\n\\end{align}$$\n\nTherefore any chain that arrives at 1 or 89 will become stuck in an endless loop. What is most amazing is that EVERY starting number will eventually arrive at 1 or 89.\n\nHow many starting numbers below `limit` will arrive at 89?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squareDigitChains(limit) {\n\n  return true;\n}\n\nsquareDigitChains(100);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function squareDigitChains(limit) {\n  // Based on https://www.xarg.org/puzzle/project-euler/problem-92/\n  function getCombinations(neededDigits, curDigits) {\n    if (neededDigits === curDigits.length) {\n      return [curDigits];\n    }\n    const combinations = [];\n    const lastDigit = curDigits.length !== 0 ? curDigits[0] : 9;\n    for (let i = 0; i <= lastDigit; i++) {\n      const results = getCombinations(neededDigits, [i].concat(curDigits));\n      combinations.push(...results);\n    }\n    return combinations;\n  }\n\n  function getPossibleSums(limit) {\n    const digitsCount = getDigits(limit).length - 1;\n    const possibleSquaredSums = [false];\n    for (let i = 1; i <= 81 * digitsCount; i++) {\n      let curVal = i;\n      while (curVal !== 1 && curVal !== 89) {\n        curVal = addSquaredDigits(curVal);\n      }\n      possibleSquaredSums[i] = curVal === 89;\n    }\n    return possibleSquaredSums;\n  }\n\n  function addSquaredDigits(num) {\n    const digits = getDigits(num);\n    let result = 0;\n    for (let i = 0; i < digits.length; i++) {\n      result += digits[i] ** 2;\n    }\n    return result;\n  }\n\n  function getDigits(number) {\n    const digits = [];\n    while (number > 0) {\n      digits.push(number % 10);\n      number = Math.floor(number / 10);\n    }\n    return digits;\n  }\n\n  function getFactorials(number) {\n    const factorials = [1];\n    for (let i = 1; i < number; i++) {\n      factorials[i] = factorials[i - 1] * i;\n    }\n    return factorials;\n  }\n\n  const neededDigits = getDigits(limit).length - 1;\n  const combinations = getCombinations(neededDigits, []);\n  const possibleSquaredDigitsSums = getPossibleSums(limit);\n  const factorials = getFactorials(neededDigits + 1);\n\n  let endingWith89 = 0;\n\n  for (let i = 0; i < combinations.length; i++) {\n    let counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let digits = combinations[i];\n    let curSum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      const curDigit = digits[j];\n      curSum += curDigit ** 2;\n      counts[curDigit]++;\n    }\n\n    if (possibleSquaredDigitsSums[curSum]) {\n      let denominator = 1;\n      for (let j = 0; j < counts.length; j++) {\n        denominator = denominator * factorials[counts[j]];\n      }\n      endingWith89 += Math.floor(\n        factorials[factorials.length - 1] / denominator\n      );\n    }\n  }\n  return endingWith89;\n}"
        }
      ],
      "tests": [
        {
          "text": "`squareDigitChains(100)` should return a number.",
          "testCode": "assert(typeof squareDigitChains(100) === 'number');"
        },
        {
          "text": "`squareDigitChains(100)` should return `80`.",
          "testCode": "assert.strictEqual(squareDigitChains(100), 80);"
        },
        {
          "text": "`squareDigitChains(1000)` should return `857`.",
          "testCode": "assert.strictEqual(squareDigitChains(1000), 857);"
        },
        {
          "text": "`squareDigitChains(100000)` should return `85623`.",
          "testCode": "assert.strictEqual(squareDigitChains(100000), 85623);"
        },
        {
          "text": "`squareDigitChains(10000000)` should return `8581146`.",
          "testCode": "assert.strictEqual(squareDigitChains(10000000), 8581146);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302209,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-92-square-digit-chains.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3ca1000cf542c50fedc",
      "title": "Problem 93: Arithmetic expressions",
      "challengeType": 1,
      "dashedName": "problem-93-arithmetic-expressions",
      "description": "By using each of the digits from the set, {1, 2, 3, 4}, exactly once, and making use of the four arithmetic operations (+, −, \\*, /) and brackets/parentheses, it is possible to form different positive integer targets.\n\nFor example,\n\n<div style='margin-left: 4em;'>\n  8 = (4 * (1 + 3)) / 2<br>\n  14 = 4 * (3 + 1 / 2)<br>\n  19 = 4 * (2 + 3) − 1<br>\n  36 = 3 * 4 * (2 + 1)\n</div>\n\nNote that concatenations of the digits, like 12 + 34, are not allowed.\n\nUsing the set, {1, 2, 3, 4}, it is possible to obtain thirty-one different target numbers of which 36 is the maximum, and each of the numbers 1 to 28 can be obtained before encountering the first non-expressible number.\n\nFind the set of four distinct digits, `a` &lt; `b` &lt; `c` &lt; `d`, for which the longest set of consecutive positive integers, 1 to `n`, can be obtained, giving your answer as a string: `abcd`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function arithmeticExpressions() {\n\n  return true;\n}\n\narithmeticExpressions();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`arithmeticExpressions()` should return a number.",
          "testCode": "assert(typeof arithmeticExpressions() === 'number');"
        },
        {
          "text": "`arithmeticExpressions()` should return 1258.",
          "testCode": "assert.strictEqual(arithmeticExpressions(), 1258);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302210,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-93-arithmetic-expressions.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3ca1000cf542c50fedd",
      "title": "Problem 94: Almost equilateral triangles",
      "challengeType": 1,
      "dashedName": "problem-94-almost-equilateral-triangles",
      "description": "It is easily proved that no equilateral triangle exists with integral length sides and integral area. However, the almost equilateral triangle 5-5-6 has an area of 12 square units.\n\nWe shall define an <dfn>almost equilateral triangle</dfn> to be a triangle for which two sides are equal and the third differs by no more than one unit.\n\nFind the sum of the perimeters of all almost equilateral triangles with integral side lengths and area and whose perimeters do not exceed `limit`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function almostEquilateralTriangles(limit) {\n\n  return true;\n}\n\nalmostEquilateralTriangles(50);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function almostEquilateralTriangles(limit) {\n  // Based on https://blog.dreamshire.com/project-euler-94-solution/\n  let perimetersSum = 0;\n\n  let sidesAB = 1;\n  let sideC = 1;\n  let perimeter = 0;\n  let perimeterOffset = 1;\n\n  while (perimeter <= limit) {\n    [sidesAB, sideC] = [4 * sidesAB - sideC + 2 * perimeterOffset, sidesAB];\n    perimeterOffset = -perimeterOffset;\n\n    perimetersSum += perimeter;\n    perimeter = 3 * sidesAB - perimeterOffset;\n  }\n\n  return perimetersSum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`almostEquilateralTriangles(50)` should return a number.",
          "testCode": "assert(typeof almostEquilateralTriangles(50) === 'number');"
        },
        {
          "text": "`almostEquilateralTriangles(50)` should return `66`.",
          "testCode": "assert.strictEqual(almostEquilateralTriangles(50), 66);"
        },
        {
          "text": "`almostEquilateralTriangles(10000)` should return `3688`.",
          "testCode": "assert.strictEqual(almostEquilateralTriangles(10000), 3688);"
        },
        {
          "text": "`almostEquilateralTriangles(10000000)` should return `9973078`.",
          "testCode": "assert.strictEqual(almostEquilateralTriangles(10000000), 9973078);"
        },
        {
          "text": "`almostEquilateralTriangles(1000000000)` should return `518408346`.",
          "testCode": "assert.strictEqual(almostEquilateralTriangles(1000000000), 518408346);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302211,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-94-almost-equilateral-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3cc1000cf542c50fede",
      "title": "Problem 95: Amicable chains",
      "challengeType": 1,
      "dashedName": "problem-95-amicable-chains",
      "description": "The proper divisors of a number are all the divisors excluding the number itself. For example, the proper divisors of 28 are 1, 2, 4, 7, and 14. As the sum of these divisors is equal to 28, we call it a perfect number.\n\nInterestingly the sum of the proper divisors of 220 is 284 and the sum of the proper divisors of 284 is 220, forming a chain of two numbers. For this reason, 220 and 284 are called an amicable pair.\n\nPerhaps less well known are longer chains. For example, starting with 12496, we form a chain of five numbers:\n\n$$\n  12496 → 14288 → 15472 → 14536 → 14264 \\\\,(→ 12496 → \\cdots)\n$$\n\nSince this chain returns to its starting point, it is called an amicable chain.\n\nFind the smallest member of the longest amicable chain with no element exceeding `limit`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function amicableChains(limit) {\n\n  return true;\n}\n\namicableChains(300);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function amicableChains(limit) {\n  function getSmallestMember(chain) {\n    let smallest = chain[0];\n    for (let i = 1; i < chain.length; i++) {\n      if (smallest > chain[i]) {\n        smallest = chain[i];\n      }\n    }\n    return smallest;\n  }\n\n  function getFactorsSums(limit) {\n    const factorsSums = new Array(limit + 1).fill(1);\n    for (let i = 2; i <= limit / 2; i++) {\n      for (let j = 2 * i; j <= limit; j += i) {\n        factorsSums[j] += i;\n      }\n    }\n    return factorsSums;\n  }\n\n  const factorsSums = getFactorsSums(limit);\n  const checkedNumbers = new Set();\n\n  let longestChain = 0;\n  let smallestMember = 0;\n  for (let i = 0; i <= limit; i++) {\n    const curChain = [];\n    let curNumber = i;\n    while (!checkedNumbers.has(curNumber) && factorsSums[curNumber] <= limit) {\n      curNumber = factorsSums[curNumber];\n\n      const chainStart = curChain.indexOf(curNumber);\n      if (chainStart === -1) {\n        curChain.push(curNumber);\n        continue;\n      }\n\n      const chainLength = curChain.length - chainStart;\n      if (chainLength > longestChain) {\n        longestChain = chainLength;\n        smallestMember = getSmallestMember(curChain.slice(chainStart));\n      }\n      break;\n    }\n\n    for (let j = 0; j < curChain.length; j++) {\n      checkedNumbers.add(curChain[j]);\n    }\n  }\n\n  return smallestMember;\n}"
        }
      ],
      "tests": [
        {
          "text": "`amicableChains(300)` should return a number.",
          "testCode": "assert(typeof amicableChains(300) === 'number');"
        },
        {
          "text": "`amicableChains(300)` should return `220`.",
          "testCode": "assert.strictEqual(amicableChains(300), 220);"
        },
        {
          "text": "`amicableChains(15000)` should return `220`.",
          "testCode": "assert.strictEqual(amicableChains(15000), 220);"
        },
        {
          "text": "`amicableChains(100000)` should return `12496`.",
          "testCode": "assert.strictEqual(amicableChains(100000), 12496);"
        },
        {
          "text": "`amicableChains(1000000)` should return `14316`.",
          "testCode": "assert.strictEqual(amicableChains(1000000), 14316);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302212,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-95-amicable-chains.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3cc1000cf542c50fedf",
      "title": "Problem 96: Su Doku",
      "challengeType": 1,
      "dashedName": "problem-96-su-doku",
      "description": "Su Doku (Japanese meaning *number place*) is the name given to a popular puzzle concept. Its origin is unclear, but credit must be attributed to Leonhard Euler who invented a similar, and much more difficult, puzzle idea called Latin Squares. The objective of Su Doku puzzles, however, is to replace the blanks (or zeros) in a 9 by 9 grid in such that each row, column, and 3 by 3 box contains each of the digits 1 to 9. Below is an example of a typical starting puzzle grid and its solution grid.\n\n<div style=\"margin: auto; background-color: white; padding: 10px; width: 80%; text-align: center;\">\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">\n    <tbody>\n      <tr>\n        <td>\n          <table cellpadding=\"5\" cellspacing=\"0\" border=\"1\">\n            <tbody>\n              <tr>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  0 0 3<br />9 0 0<br />0 0 1\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  0 2 0<br />3 0 5<br />8 0 6\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  6 0 0<br />0 0 1<br />4 0 0\n                </td>\n              </tr>\n              <tr>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  0 0 8<br />7 0 0<br />0 0 6\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  1 0 2<br />0 0 0<br />7 0 8\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  9 0 0<br />0 0 8<br />2 0 0\n                </td>\n              </tr>\n              <tr>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  0 0 2<br />8 0 0<br />0 0 5\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  6 0 9<br />2 0 3<br />0 1 0\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  5 0 0<br />0 0 9<br />3 0 0\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </td>\n        <td width=\"50\">\n          <img src=\"images/spacer.gif\" width=\"50\" height=\"1\" alt=\"\" /><br />\n        </td>\n        <td>\n          <table cellpadding=\"5\" cellspacing=\"0\" border=\"1\">\n            <tbody>\n              <tr>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  4 8 3<br />9 6 7<br />2 5 1\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  9 2 1<br />3 4 5<br />8 7 6\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  6 5 7<br />8 2 1<br />4 9 3\n                </td>\n              </tr>\n              <tr>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  5 4 8<br />7 2 9<br />1 3 6\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  1 3 2<br />5 6 4<br />7 9 8\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  9 7 6<br />1 3 8<br />2 4 5\n                </td>\n              </tr>\n              <tr>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  3 7 2<br />8 1 4<br />6 9 5\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  6 8 9<br />2 5 3<br />4 1 7\n                </td>\n                <td style=\"font-family:'courier new';font-size:14pt; color: black; padding: 5px; border: 2px solid black;\">\n                  5 1 4<br />7 6 9<br />3 8 2\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\nA well constructed Su Doku puzzle has a unique solution and can be solved by logic, although it may be necessary to employ \"guess and test\" methods in order to eliminate options (there is much contested opinion over this). The complexity of the search determines the difficulty of the puzzle; the example above is considered easy because it can be solved by straight forward direct deduction.\n\nThe `puzzlesArr` array contains different Su Doku puzzle strings ranging in difficulty, but all with unique solutions.\n\nBy solving all puzzles in `puzzlesArr`, find the sum of the 3-digit numbers found in the top left corner of each solution grid; for example, 483 is the 3-digit number found in the top left corner of the solution grid above.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function suDoku(puzzlesArr) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst testPuzzles1 = [\n  '003020600900305001001806400008102900700000008006708200002609500800203009005010300',\n  '200080300060070084030500209000105408000000000402706000301007040720040060004010003',\n  '000000907000420180000705026100904000050000040000507009920108000034059000507000000'\n];\n\nsuDoku(testPuzzles1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function suDoku(puzzlesArr) {\n  function solve(puzzle) {\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (puzzle[row][col] > 0) {\n          continue;\n        }\n\n        const allowedNumbers = getAllowedNumbers(puzzle, row, col);\n\n        for (let number = 1; number <= 9; number++) {\n          if (allowedNumbers[number]) {\n            puzzle[row][col] = number;\n            if (solve(puzzle)) {\n              return true;\n            }\n          }\n        }\n\n        puzzle[row][col] = 0;\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function getAllowedNumbers(puzzle, row, col) {\n    const allowed = new Array(10).fill(true);\n    allowed[0] = false;\n\n    for (let i = 0; i < 9; i++) {\n      const numberInSameRow = puzzle[row][i];\n      if (numberInSameRow > 0) {\n        allowed[numberInSameRow] = false;\n      }\n\n      const numberInSameCol = puzzle[i][col];\n      if (numberInSameCol > 0) {\n        allowed[numberInSameCol] = false;\n      }\n    }\n\n    const rowOfSubGrid = Math.floor(row / 3) * 3;\n    const colOfSubGrid = Math.floor(col / 3) * 3;\n    for (let rowInSubGrid = 0; rowInSubGrid < 3; rowInSubGrid++) {\n      for (let colInSubGrid = 0; colInSubGrid < 3; colInSubGrid++) {\n        const numberInSameSubGrid =\n          puzzle[rowOfSubGrid + rowInSubGrid][colOfSubGrid + colInSubGrid];\n        if (numberInSameSubGrid > 0) {\n          allowed[numberInSameSubGrid] = false;\n        }\n      }\n    }\n\n    return allowed;\n  }\n\n  function parsePuzzle(string) {\n    const puzzle = [];\n    for (let row = 0; row < 9; row++) {\n      puzzle.push(\n        string\n          .slice(row * 9, 9 + row * 9)\n          .split('')\n          .map(x => parseInt(x, 10))\n      );\n    }\n    return puzzle;\n  }\n\n  let sum = 0;\n  for (let i = 0; i < puzzlesArr.length; i++) {\n    const puzzle = parsePuzzle(puzzlesArr[i]);\n    if (solve(puzzle)) {\n      sum += 100 * puzzle[0][0] + 10 * puzzle[0][1] + puzzle[0][2];\n    }\n  }\n\n  return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`suDoku(testPuzzles1)` should return a number.",
          "testCode": "assert(typeof suDoku(_testPuzzles1) === 'number');"
        },
        {
          "text": "`suDoku(testPuzzles1)` should return `1190`.",
          "testCode": "assert.strictEqual(suDoku(_testPuzzles1), 1190);"
        },
        {
          "text": "`suDoku(testPuzzles2)` should return `24702`.",
          "testCode": "assert.strictEqual(suDoku(_testPuzzles2), 24702);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302213,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-96-su-doku.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testPuzzles1 = [\n  '003020600900305001001806400008102900700000008006708200002609500800203009005010300',\n  '200080300060070084030500209000105408000000000402706000301007040720040060004010003',\n  '000000907000420180000705026100904000050000040000507009920108000034059000507000000'\n];\n\nconst _testPuzzles2 = [\n  '003020600900305001001806400008102900700000008006708200002609500800203009005010300',\n  '200080300060070084030500209000105408000000000402706000301007040720040060004010003',\n  '000000907000420180000705026100904000050000040000507009920108000034059000507000000',\n  '030050040008010500460000012070502080000603000040109030250000098001020600080060020',\n  '020810740700003100090002805009040087400208003160030200302700060005600008076051090',\n  '100920000524010000000000070050008102000000000402700090060000000000030945000071006',\n  '043080250600000000000001094900004070000608000010200003820500000000000005034090710',\n  '480006902002008001900370060840010200003704100001060049020085007700900600609200018',\n  '000900002050123400030000160908000000070000090000000205091000050007439020400007000',\n  '001900003900700160030005007050000009004302600200000070600100030042007006500006800',\n  '000125400008400000420800000030000095060902010510000060000003049000007200001298000',\n  '062340750100005600570000040000094800400000006005830000030000091006400007059083260',\n  '300000000005009000200504000020000700160000058704310600000890100000067080000005437',\n  '630000000000500008005674000000020000003401020000000345000007004080300902947100080',\n  '000020040008035000000070602031046970200000000000501203049000730000000010800004000',\n  '361025900080960010400000057008000471000603000259000800740000005020018060005470329',\n  '050807020600010090702540006070020301504000908103080070900076205060090003080103040',\n  '080005000000003457000070809060400903007010500408007020901020000842300000000100080',\n  '003502900000040000106000305900251008070408030800763001308000104000020000005104800',\n  '000000000009805100051907420290401065000000000140508093026709580005103600000000000',\n  '020030090000907000900208005004806500607000208003102900800605007000309000030020050',\n  '005000006070009020000500107804150000000803000000092805907006000030400010200000600',\n  '040000050001943600009000300600050002103000506800020007005000200002436700030000040',\n  '004000000000030002390700080400009001209801307600200008010008053900040000000000800',\n  '360020089000361000000000000803000602400603007607000108000000000000418000970030014',\n  '500400060009000800640020000000001008208000501700500000000090084003000600060003002',\n  '007256400400000005010030060000508000008060200000107000030070090200000004006312700',\n  '000000000079050180800000007007306800450708096003502700700000005016030420000000000',\n  '030000080009000500007509200700105008020090030900402001004207100002000800070000090',\n  '200170603050000100000006079000040700000801000009050000310400000005000060906037002',\n  '000000080800701040040020030374000900000030000005000321010060050050802006080000000',\n  '000000085000210009960080100500800016000000000890006007009070052300054000480000000',\n  '608070502050608070002000300500090006040302050800050003005000200010704090409060701',\n  '050010040107000602000905000208030501040070020901080406000401000304000709020060010',\n  '053000790009753400100000002090080010000907000080030070500000003007641200061000940',\n  '006080300049070250000405000600317004007000800100826009000702000075040190003090600',\n  '005080700700204005320000084060105040008000500070803010450000091600508007003010600',\n  '000900800128006400070800060800430007500000009600079008090004010003600284001007000',\n  '000080000270000054095000810009806400020403060006905100017000620460000038000090000',\n  '000602000400050001085010620038206710000000000019407350026040530900020007000809000',\n  '000900002050123400030000160908000000070000090000000205091000050007439020400007000',\n  '380000000000400785009020300060090000800302009000040070001070500495006000000000092',\n  '000158000002060800030000040027030510000000000046080790050000080004070100000325000',\n  '010500200900001000002008030500030007008000500600080004040100700000700006003004050',\n  '080000040000469000400000007005904600070608030008502100900000005000781000060000010',\n  '904200007010000000000706500000800090020904060040002000001607000000000030300005702',\n  '000700800006000031040002000024070000010030080000060290000800070860000500002006000',\n  '001007090590080001030000080000005800050060020004100000080000030100020079020700400',\n  '000003017015009008060000000100007000009000200000500004000000020500600340340200000',\n  '300200000000107000706030500070009080900020004010800050009040301000702000000008006'\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3ce1000cf542c50fee0",
      "title": "Problem 97: Large non-Mersenne prime",
      "challengeType": 1,
      "dashedName": "problem-97-large-non-mersenne-prime",
      "description": "The first known prime found to exceed one million digits was discovered in 1999, and is a Mersenne prime of the form $2^{6972593} − 1$; it contains exactly 2,098,960 digits. Subsequently other Mersenne primes, of the form $2^p − 1$, have been found which contain more digits.\n\nHowever, in 2004 there was found a massive non-Mersenne prime which contains 2,357,207 digits: $28433 × 2^{7830457} + 1$.\n\nFind the last ten digits of that non-Mersenne prime in the form $multiplier × 2^{power} + 1$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largeNonMersennePrime(multiplier, power) {\n\n  return true;\n}\n\nlargeNonMersennePrime(19, 6833086);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function largeNonMersennePrime(multiplier, power) {\n  function modStepsResults(number, other, mod, startValue, step) {\n    let result = startValue;\n    for (let i = 0; i < other; i++) {\n      result = step(number, result) % mod;\n    }\n    return result;\n  }\n\n  const numOfDigits = 10;\n  const mod = 10 ** numOfDigits;\n  const digitsAfterPower = modStepsResults(2, power, mod, 1, (a, b) => a * b);\n  const digitsAfterMultiply = modStepsResults(\n    digitsAfterPower,\n    multiplier,\n    mod,\n    0,\n    (a, b) => a + b\n  );\n  const lastDigits = (digitsAfterMultiply + 1) % mod;\n\n  return lastDigits.toString().padStart(10, '0');\n}"
        }
      ],
      "tests": [
        {
          "text": "`largeNonMersennePrime(19, 6833086)` should return a string.",
          "testCode": "assert(typeof largeNonMersennePrime(19, 6833086) === 'string');"
        },
        {
          "text": "`largeNonMersennePrime(19, 6833086)` should return the string `3637590017`.",
          "testCode": "assert.strictEqual(largeNonMersennePrime(19, 6833086), '3637590017');"
        },
        {
          "text": "`largeNonMersennePrime(27, 7046834)` should return the string `0130771969`.",
          "testCode": "assert.strictEqual(largeNonMersennePrime(27, 7046834), '0130771969');"
        },
        {
          "text": "`largeNonMersennePrime(6679881, 6679881)` should return the string `4455386113`.",
          "testCode": "assert.strictEqual(largeNonMersennePrime(6679881, 6679881), '4455386113');"
        },
        {
          "text": "`largeNonMersennePrime(28433, 7830457)` should return the string `8739992577`.",
          "testCode": "assert.strictEqual(largeNonMersennePrime(28433, 7830457), '8739992577');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302214,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-97-large-non-mersenne-prime.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3cf1000cf542c50fee1",
      "title": "Problem 98: Anagramic squares",
      "challengeType": 1,
      "dashedName": "problem-98-anagramic-squares",
      "description": "By replacing each of the letters in the word CARE with 1, 2, 9, and 6 respectively, we form a square number: $1296 = 36^2$. What is remarkable is that, by using the same digital substitutions, the anagram, RACE, also forms a square number: $9216 = 96^2$. We shall call CARE (and RACE) a square anagram word pair and specify further that leading zeroes are not permitted, neither may a different letter have the same digital value as another letter.\n\nUsing the `words` array, find all the square anagram word pairs (a palindromic word is NOT considered to be an anagram of itself).\n\nWhat is the largest square number formed by any member of such a pair?\n\n**Note:** All anagrams formed must be contained in the given `words` array.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function anagramicSquares(words) {\n\n  return true;\n}\n\n// Only change code above this line\nconst testWords1 = [\n\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\"\n];\n\nanagramicSquares(testWords1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function anagramicSquares(words) {\n  // Based on https://www.mathblog.dk/project-euler-98-anagrams-square-numbers/\n  function findMaximumSquare(squares, word1, word2) {\n    let maximumSquare = 0;\n\n    for (let i = 0; i < squares.length; i++) {\n      const length = squares[i].toString().length;\n\n      if (length < word1.length) {\n        continue;\n      }\n      if (length > word1.length) {\n        break;\n      }\n\n      const word1Square = squares[i];\n      const letterToDigit = mapLettersToDigits(word1, word1Square);\n\n      const noProperMappingExist = Object.keys(letterToDigit).length === 0;\n      if (noProperMappingExist) {\n        continue;\n      }\n\n      const word2Square = getNumberFromMapping(word2, letterToDigit);\n      if (word2Square === 0) {\n        continue;\n      }\n\n      const doesWord2SquareExist = squares.indexOf(word2Square) !== -1;\n      if (doesWord2SquareExist) {\n        const pairMaximum = Math.max(word1Square, word2Square);\n        maximumSquare = Math.max(maximumSquare, pairMaximum);\n      }\n    }\n    return maximumSquare;\n  }\n\n  function getNumberFromMapping(word, letterToDigit) {\n    const wouldNumberHaveLeadingZero = letterToDigit[word[0]] === 0;\n    if (wouldNumberHaveLeadingZero) {\n      return 0;\n    }\n\n    let number = 0;\n    for (let i = 0; i < word.length; i++) {\n      number = number * 10 + letterToDigit[word[i]];\n    }\n    return number;\n  }\n\n  function mapLettersToDigits(word, square) {\n    const letterToDigit = {};\n    for (let j = word.length - 1; j >= 0; j--) {\n      const curDigit = square % 10;\n      square = Math.floor(square / 10);\n\n      const curLetter = word[j];\n\n      const isLetterRepeated = letterToDigit.hasOwnProperty(curLetter);\n      if (isLetterRepeated) {\n        const isLetterUsedForTheSameDigit =\n          letterToDigit[curLetter] === curDigit;\n        if (isLetterUsedForTheSameDigit) {\n          continue;\n        }\n\n        return {};\n      }\n\n      const isDigitUsed = Object.values(letterToDigit).indexOf(curDigit) !== -1;\n      if (isDigitUsed) {\n        return {};\n      }\n\n      letterToDigit[curLetter] = curDigit;\n    }\n    return letterToDigit;\n  }\n\n  function groupWordsWithSameLetters(words) {\n    const lettersToWords = {};\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      const sortedLetters = word.split('').sort().join('');\n      if (!lettersToWords.hasOwnProperty(sortedLetters)) {\n        lettersToWords[sortedLetters] = [];\n      }\n      lettersToWords[sortedLetters].push(word);\n    }\n    return lettersToWords;\n  }\n\n  const lettersToWords = groupWordsWithSameLetters(words);\n\n  const anagrams = Object.keys(lettersToWords).filter(\n    letters => lettersToWords[letters].length > 1\n  );\n  const lengthOfLongestAnagram = anagrams\n    .map(anagram => anagram.length)\n    .sort((a, b) => b - a)[0];\n\n  const squares = [];\n  const numberLimit = (10 ** lengthOfLongestAnagram) ** 0.5;\n  for (let number = 2; number < numberLimit; number++) {\n    const square = number ** 2;\n    squares.push(square);\n  }\n\n  let largestSquare = 0;\n  for (let i = 0; i < anagrams.length; i++) {\n    const curWords = lettersToWords[anagrams[i]];\n\n    for (let j = 0; j < curWords.length; j++) {\n      for (let k = j + 1; k < curWords.length; k++) {\n        const squareValue = findMaximumSquare(\n          squares,\n          curWords[j],\n          curWords[k]\n        );\n        if (squareValue > largestSquare) {\n          largestSquare = squareValue;\n        }\n      }\n    }\n  }\n\n  return largestSquare;\n}"
        }
      ],
      "tests": [
        {
          "text": "`anagramicSquares(['CARE', 'RACE'])` should return a number.",
          "testCode": "assert(typeof anagramicSquares(['CARE', 'RACE']) === 'number');"
        },
        {
          "text": "`anagramicSquares(['CARE', 'RACE'])` should return `9216`.",
          "testCode": "assert.strictEqual(anagramicSquares(['CARE', 'RACE']), 9216);"
        },
        {
          "text": "`anagramicSquares(testWords1)` should return `4761`.",
          "testCode": "assert.strictEqual(anagramicSquares(_testWords1), 4761);"
        },
        {
          "text": "`anagramicSquares(testWords2)` should return `18769`.",
          "testCode": "assert.strictEqual(anagramicSquares(_testWords2), 18769);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302215,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-98-anagramic-squares.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testWords1 = [\n  \"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\"\n];\nconst _testWords2 = [\n  \"A\",\"ABILITY\",\"ABLE\",\"ABOUT\",\"ABOVE\",\"ABSENCE\",\"ABSOLUTELY\",\"ACADEMIC\",\"ACCEPT\",\"ACCESS\",\"ACCIDENT\",\"ACCOMPANY\",\"ACCORDING\",\"ACCOUNT\",\"ACHIEVE\",\"ACHIEVEMENT\",\"ACID\",\"ACQUIRE\",\"ACROSS\",\"ACT\",\"ACTION\",\"ACTIVE\",\"ACTIVITY\",\"ACTUAL\",\"ACTUALLY\",\"ADD\",\"ADDITION\",\"ADDITIONAL\",\"ADDRESS\",\"ADMINISTRATION\",\"ADMIT\",\"ADOPT\",\"ADULT\",\"ADVANCE\",\"ADVANTAGE\",\"ADVICE\",\"ADVISE\",\"AFFAIR\",\"AFFECT\",\"AFFORD\",\"AFRAID\",\"AFTER\",\"AFTERNOON\",\"AFTERWARDS\",\"AGAIN\",\"AGAINST\",\"AGE\",\"AGENCY\",\"AGENT\",\"AGO\",\"AGREE\",\"AGREEMENT\",\"AHEAD\",\"AID\",\"AIM\",\"AIR\",\"AIRCRAFT\",\"ALL\",\"ALLOW\",\"ALMOST\",\"ALONE\",\"ALONG\",\"ALREADY\",\"ALRIGHT\",\"ALSO\",\"ALTERNATIVE\",\"ALTHOUGH\",\"ALWAYS\",\"AMONG\",\"AMONGST\",\"AMOUNT\",\"AN\",\"ANALYSIS\",\"ANCIENT\",\"AND\",\"ANIMAL\",\"ANNOUNCE\",\"ANNUAL\",\"ANOTHER\",\"ANSWER\",\"ANY\",\"ANYBODY\",\"ANYONE\",\"ANYTHING\",\"ANYWAY\",\"APART\",\"APPARENT\",\"APPARENTLY\",\"APPEAL\",\"APPEAR\",\"APPEARANCE\",\"APPLICATION\",\"APPLY\",\"APPOINT\",\"APPOINTMENT\",\"APPROACH\",\"APPROPRIATE\",\"APPROVE\",\"AREA\",\"ARGUE\",\"ARGUMENT\",\"ARISE\",\"ARM\",\"ARMY\",\"AROUND\",\"ARRANGE\",\"ARRANGEMENT\",\"ARRIVE\",\"ART\",\"ARTICLE\",\"ARTIST\",\"AS\",\"ASK\",\"ASPECT\",\"ASSEMBLY\",\"ASSESS\",\"ASSESSMENT\",\"ASSET\",\"ASSOCIATE\",\"ASSOCIATION\",\"ASSUME\",\"ASSUMPTION\",\"AT\",\"ATMOSPHERE\",\"ATTACH\",\"ATTACK\",\"ATTEMPT\",\"ATTEND\",\"ATTENTION\",\"ATTITUDE\",\"ATTRACT\",\"ATTRACTIVE\",\"AUDIENCE\",\"AUTHOR\",\"AUTHORITY\",\"AVAILABLE\",\"AVERAGE\",\"AVOID\",\"AWARD\",\"AWARE\",\"AWAY\",\"AYE\",\"BABY\",\"BACK\",\"BACKGROUND\",\"BAD\",\"BAG\",\"BALANCE\",\"BALL\",\"BAND\",\"BANK\",\"BAR\",\"BASE\",\"BASIC\",\"BASIS\",\"BATTLE\",\"BE\",\"BEAR\",\"BEAT\",\"BEAUTIFUL\",\"BECAUSE\",\"BECOME\",\"BED\",\"BEDROOM\",\"BEFORE\",\"BEGIN\",\"BEGINNING\",\"BEHAVIOUR\",\"BEHIND\",\"BELIEF\",\"BELIEVE\",\"BELONG\",\"BELOW\",\"BENEATH\",\"BENEFIT\",\"BESIDE\",\"BEST\",\"BETTER\",\"BETWEEN\",\"BEYOND\",\"BIG\",\"BILL\",\"BIND\",\"BIRD\",\"BIRTH\",\"BIT\",\"BLACK\",\"BLOCK\",\"BLOOD\",\"BLOODY\",\"BLOW\",\"BLUE\",\"BOARD\",\"BOAT\",\"BODY\",\"BONE\",\"BOOK\",\"BORDER\",\"BOTH\",\"BOTTLE\",\"BOTTOM\",\"BOX\",\"BOY\",\"BRAIN\",\"BRANCH\",\"BREAK\",\"BREATH\",\"BRIDGE\",\"BRIEF\",\"BRIGHT\",\"BRING\",\"BROAD\",\"BROTHER\",\"BUDGET\",\"BUILD\",\"BUILDING\",\"BURN\",\"BUS\",\"BUSINESS\",\"BUSY\",\"BUT\",\"BUY\",\"BY\",\"CABINET\",\"CALL\",\"CAMPAIGN\",\"CAN\",\"CANDIDATE\",\"CAPABLE\",\"CAPACITY\",\"CAPITAL\",\"CAR\",\"CARD\",\"CARE\",\"CAREER\",\"CAREFUL\",\"CAREFULLY\",\"CARRY\",\"CASE\",\"CASH\",\"CAT\",\"CATCH\",\"CATEGORY\",\"CAUSE\",\"CELL\",\"CENTRAL\",\"CENTRE\",\"CENTURY\",\"CERTAIN\",\"CERTAINLY\",\"CHAIN\",\"CHAIR\",\"CHAIRMAN\",\"CHALLENGE\",\"CHANCE\",\"CHANGE\",\"CHANNEL\",\"CHAPTER\",\"CHARACTER\",\"CHARACTERISTIC\",\"CHARGE\",\"CHEAP\",\"CHECK\",\"CHEMICAL\",\"CHIEF\",\"CHILD\",\"CHOICE\",\"CHOOSE\",\"CHURCH\",\"CIRCLE\",\"CIRCUMSTANCE\",\"CITIZEN\",\"CITY\",\"CIVIL\",\"CLAIM\",\"CLASS\",\"CLEAN\",\"CLEAR\",\"CLEARLY\",\"CLIENT\",\"CLIMB\",\"CLOSE\",\"CLOSELY\",\"CLOTHES\",\"CLUB\",\"COAL\",\"CODE\",\"COFFEE\",\"COLD\",\"COLLEAGUE\",\"COLLECT\",\"COLLECTION\",\"COLLEGE\",\"COLOUR\",\"COMBINATION\",\"COMBINE\",\"COME\",\"COMMENT\",\"COMMERCIAL\",\"COMMISSION\",\"COMMIT\",\"COMMITMENT\",\"COMMITTEE\",\"COMMON\",\"COMMUNICATION\",\"COMMUNITY\",\"COMPANY\",\"COMPARE\",\"COMPARISON\",\"COMPETITION\",\"COMPLETE\",\"COMPLETELY\",\"COMPLEX\",\"COMPONENT\",\"COMPUTER\",\"CONCENTRATE\",\"CONCENTRATION\",\"CONCEPT\",\"CONCERN\",\"CONCERNED\",\"CONCLUDE\",\"CONCLUSION\",\"CONDITION\",\"CONDUCT\",\"CONFERENCE\",\"CONFIDENCE\",\"CONFIRM\",\"CONFLICT\",\"CONGRESS\",\"CONNECT\",\"CONNECTION\",\"CONSEQUENCE\",\"CONSERVATIVE\",\"CONSIDER\",\"CONSIDERABLE\",\"CONSIDERATION\",\"CONSIST\",\"CONSTANT\",\"CONSTRUCTION\",\"CONSUMER\",\"CONTACT\",\"CONTAIN\",\"CONTENT\",\"CONTEXT\",\"CONTINUE\",\"CONTRACT\",\"CONTRAST\",\"CONTRIBUTE\",\"CONTRIBUTION\",\"CONTROL\",\"CONVENTION\",\"CONVERSATION\",\"COPY\",\"CORNER\",\"CORPORATE\",\"CORRECT\",\"COS\",\"COST\",\"COULD\",\"COUNCIL\",\"COUNT\",\"COUNTRY\",\"COUNTY\",\"COUPLE\",\"COURSE\",\"COURT\",\"COVER\",\"CREATE\",\"CREATION\",\"CREDIT\",\"CRIME\",\"CRIMINAL\",\"CRISIS\",\"CRITERION\",\"CRITICAL\",\"CRITICISM\",\"CROSS\",\"CROWD\",\"CRY\",\"CULTURAL\",\"CULTURE\",\"CUP\",\"CURRENT\",\"CURRENTLY\",\"CURRICULUM\",\"CUSTOMER\",\"CUT\",\"DAMAGE\",\"DANGER\",\"DANGEROUS\",\"DARK\",\"DATA\",\"DATE\",\"DAUGHTER\",\"DAY\",\"DEAD\",\"DEAL\",\"DEATH\",\"DEBATE\",\"DEBT\",\"DECADE\",\"DECIDE\",\"DECISION\",\"DECLARE\",\"DEEP\",\"DEFENCE\",\"DEFENDANT\",\"DEFINE\",\"DEFINITION\",\"DEGREE\",\"DELIVER\",\"DEMAND\",\"DEMOCRATIC\",\"DEMONSTRATE\",\"DENY\",\"DEPARTMENT\",\"DEPEND\",\"DEPUTY\",\"DERIVE\",\"DESCRIBE\",\"DESCRIPTION\",\"DESIGN\",\"DESIRE\",\"DESK\",\"DESPITE\",\"DESTROY\",\"DETAIL\",\"DETAILED\",\"DETERMINE\",\"DEVELOP\",\"DEVELOPMENT\",\"DEVICE\",\"DIE\",\"DIFFERENCE\",\"DIFFERENT\",\"DIFFICULT\",\"DIFFICULTY\",\"DINNER\",\"DIRECT\",\"DIRECTION\",\"DIRECTLY\",\"DIRECTOR\",\"DISAPPEAR\",\"DISCIPLINE\",\"DISCOVER\",\"DISCUSS\",\"DISCUSSION\",\"DISEASE\",\"DISPLAY\",\"DISTANCE\",\"DISTINCTION\",\"DISTRIBUTION\",\"DISTRICT\",\"DIVIDE\",\"DIVISION\",\"DO\",\"DOCTOR\",\"DOCUMENT\",\"DOG\",\"DOMESTIC\",\"DOOR\",\"DOUBLE\",\"DOUBT\",\"DOWN\",\"DRAW\",\"DRAWING\",\"DREAM\",\"DRESS\",\"DRINK\",\"DRIVE\",\"DRIVER\",\"DROP\",\"DRUG\",\"DRY\",\"DUE\",\"DURING\",\"DUTY\",\"EACH\",\"EAR\",\"EARLY\",\"EARN\",\"EARTH\",\"EASILY\",\"EAST\",\"EASY\",\"EAT\",\"ECONOMIC\",\"ECONOMY\",\"EDGE\",\"EDITOR\",\"EDUCATION\",\"EDUCATIONAL\",\"EFFECT\",\"EFFECTIVE\",\"EFFECTIVELY\",\"EFFORT\",\"EGG\",\"EITHER\",\"ELDERLY\",\"ELECTION\",\"ELEMENT\",\"ELSE\",\"ELSEWHERE\",\"EMERGE\",\"EMPHASIS\",\"EMPLOY\",\"EMPLOYEE\",\"EMPLOYER\",\"EMPLOYMENT\",\"EMPTY\",\"ENABLE\",\"ENCOURAGE\",\"END\",\"ENEMY\",\"ENERGY\",\"ENGINE\",\"ENGINEERING\",\"ENJOY\",\"ENOUGH\",\"ENSURE\",\"ENTER\",\"ENTERPRISE\",\"ENTIRE\",\"ENTIRELY\",\"ENTITLE\",\"ENTRY\",\"ENVIRONMENT\",\"ENVIRONMENTAL\",\"EQUAL\",\"EQUALLY\",\"EQUIPMENT\",\"ERROR\",\"ESCAPE\",\"ESPECIALLY\",\"ESSENTIAL\",\"ESTABLISH\",\"ESTABLISHMENT\",\"ESTATE\",\"ESTIMATE\",\"EVEN\",\"EVENING\",\"EVENT\",\"EVENTUALLY\",\"EVER\",\"EVERY\",\"EVERYBODY\",\"EVERYONE\",\"EVERYTHING\",\"EVIDENCE\",\"EXACTLY\",\"EXAMINATION\",\"EXAMINE\",\"EXAMPLE\",\"EXCELLENT\",\"EXCEPT\",\"EXCHANGE\",\"EXECUTIVE\",\"EXERCISE\",\"EXHIBITION\",\"EXIST\",\"EXISTENCE\",\"EXISTING\",\"EXPECT\",\"EXPECTATION\",\"EXPENDITURE\",\"EXPENSE\",\"EXPENSIVE\",\"EXPERIENCE\",\"EXPERIMENT\",\"EXPERT\",\"EXPLAIN\",\"EXPLANATION\",\"EXPLORE\",\"EXPRESS\",\"EXPRESSION\",\"EXTEND\",\"EXTENT\",\"EXTERNAL\",\"EXTRA\",\"EXTREMELY\",\"EYE\",\"FACE\",\"FACILITY\",\"FACT\",\"FACTOR\",\"FACTORY\",\"FAIL\",\"FAILURE\",\"FAIR\",\"FAIRLY\",\"FAITH\",\"FALL\",\"FAMILIAR\",\"FAMILY\",\"FAMOUS\",\"FAR\",\"FARM\",\"FARMER\",\"FASHION\",\"FAST\",\"FATHER\",\"FAVOUR\",\"FEAR\",\"FEATURE\",\"FEE\",\"FEEL\",\"FEELING\",\"FEMALE\",\"FEW\",\"FIELD\",\"FIGHT\",\"FIGURE\",\"FILE\",\"FILL\",\"FILM\",\"FINAL\",\"FINALLY\",\"FINANCE\",\"FINANCIAL\",\"FIND\",\"FINDING\",\"FINE\",\"FINGER\",\"FINISH\",\"FIRE\",\"FIRM\",\"FIRST\",\"FISH\",\"FIT\",\"FIX\",\"FLAT\",\"FLIGHT\",\"FLOOR\",\"FLOW\",\"FLOWER\",\"FLY\",\"FOCUS\",\"FOLLOW\",\"FOLLOWING\",\"FOOD\",\"FOOT\",\"FOOTBALL\",\"FOR\",\"FORCE\",\"FOREIGN\",\"FOREST\",\"FORGET\",\"FORM\",\"FORMAL\",\"FORMER\",\"FORWARD\",\"FOUNDATION\",\"FREE\",\"FREEDOM\",\"FREQUENTLY\",\"FRESH\",\"FRIEND\",\"FROM\",\"FRONT\",\"FRUIT\",\"FUEL\",\"FULL\",\"FULLY\",\"FUNCTION\",\"FUND\",\"FUNNY\",\"FURTHER\",\"FUTURE\",\"GAIN\",\"GAME\",\"GARDEN\",\"GAS\",\"GATE\",\"GATHER\",\"GENERAL\",\"GENERALLY\",\"GENERATE\",\"GENERATION\",\"GENTLEMAN\",\"GET\",\"GIRL\",\"GIVE\",\"GLASS\",\"GO\",\"GOAL\",\"GOD\",\"GOLD\",\"GOOD\",\"GOVERNMENT\",\"GRANT\",\"GREAT\",\"GREEN\",\"GREY\",\"GROUND\",\"GROUP\",\"GROW\",\"GROWING\",\"GROWTH\",\"GUEST\",\"GUIDE\",\"GUN\",\"HAIR\",\"HALF\",\"HALL\",\"HAND\",\"HANDLE\",\"HANG\",\"HAPPEN\",\"HAPPY\",\"HARD\",\"HARDLY\",\"HATE\",\"HAVE\",\"HE\",\"HEAD\",\"HEALTH\",\"HEAR\",\"HEART\",\"HEAT\",\"HEAVY\",\"HELL\",\"HELP\",\"HENCE\",\"HER\",\"HERE\",\"HERSELF\",\"HIDE\",\"HIGH\",\"HIGHLY\",\"HILL\",\"HIM\",\"HIMSELF\",\"HIS\",\"HISTORICAL\",\"HISTORY\",\"HIT\",\"HOLD\",\"HOLE\",\"HOLIDAY\",\"HOME\",\"HOPE\",\"HORSE\",\"HOSPITAL\",\"HOT\",\"HOTEL\",\"HOUR\",\"HOUSE\",\"HOUSEHOLD\",\"HOUSING\",\"HOW\",\"HOWEVER\",\"HUGE\",\"HUMAN\",\"HURT\",\"HUSBAND\",\"I\",\"IDEA\",\"IDENTIFY\",\"IF\",\"IGNORE\",\"ILLUSTRATE\",\"IMAGE\",\"IMAGINE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPACT\",\"IMPLICATION\",\"IMPLY\",\"IMPORTANCE\",\"IMPORTANT\",\"IMPOSE\",\"IMPOSSIBLE\",\"IMPRESSION\",\"IMPROVE\",\"IMPROVEMENT\",\"IN\",\"INCIDENT\",\"INCLUDE\",\"INCLUDING\",\"INCOME\",\"INCREASE\",\"INCREASED\",\"INCREASINGLY\",\"INDEED\",\"INDEPENDENT\",\"INDEX\",\"INDICATE\",\"INDIVIDUAL\",\"INDUSTRIAL\",\"INDUSTRY\",\"INFLUENCE\",\"INFORM\",\"INFORMATION\",\"INITIAL\",\"INITIATIVE\",\"INJURY\",\"INSIDE\",\"INSIST\",\"INSTANCE\",\"INSTEAD\",\"INSTITUTE\",\"INSTITUTION\",\"INSTRUCTION\",\"INSTRUMENT\",\"INSURANCE\",\"INTEND\",\"INTENTION\",\"INTEREST\",\"INTERESTED\",\"INTERESTING\",\"INTERNAL\",\"INTERNATIONAL\",\"INTERPRETATION\",\"INTERVIEW\",\"INTO\",\"INTRODUCE\",\"INTRODUCTION\",\"INVESTIGATE\",\"INVESTIGATION\",\"INVESTMENT\",\"INVITE\",\"INVOLVE\",\"IRON\",\"IS\",\"ISLAND\",\"ISSUE\",\"IT\",\"ITEM\",\"ITS\",\"ITSELF\",\"JOB\",\"JOIN\",\"JOINT\",\"JOURNEY\",\"JUDGE\",\"JUMP\",\"JUST\",\"JUSTICE\",\"KEEP\",\"KEY\",\"KID\",\"KILL\",\"KIND\",\"KING\",\"KITCHEN\",\"KNEE\",\"KNOW\",\"KNOWLEDGE\",\"LABOUR\",\"LACK\",\"LADY\",\"LAND\",\"LANGUAGE\",\"LARGE\",\"LARGELY\",\"LAST\",\"LATE\",\"LATER\",\"LATTER\",\"LAUGH\",\"LAUNCH\",\"LAW\",\"LAWYER\",\"LAY\",\"LEAD\",\"LEADER\",\"LEADERSHIP\",\"LEADING\",\"LEAF\",\"LEAGUE\",\"LEAN\",\"LEARN\",\"LEAST\",\"LEAVE\",\"LEFT\",\"LEG\",\"LEGAL\",\"LEGISLATION\",\"LENGTH\",\"LESS\",\"LET\",\"LETTER\",\"LEVEL\",\"LIABILITY\",\"LIBERAL\",\"LIBRARY\",\"LIE\",\"LIFE\",\"LIFT\",\"LIGHT\",\"LIKE\",\"LIKELY\",\"LIMIT\",\"LIMITED\",\"LINE\",\"LINK\",\"LIP\",\"LIST\",\"LISTEN\",\"LITERATURE\",\"LITTLE\",\"LIVE\",\"LIVING\",\"LOAN\",\"LOCAL\",\"LOCATION\",\"LONG\",\"LOOK\",\"LORD\",\"LOSE\",\"LOSS\",\"LOT\",\"LOVE\",\"LOVELY\",\"LOW\",\"LUNCH\",\"MACHINE\",\"MAGAZINE\",\"MAIN\",\"MAINLY\",\"MAINTAIN\",\"MAJOR\",\"MAJORITY\",\"MAKE\",\"MALE\",\"MAN\",\"MANAGE\",\"MANAGEMENT\",\"MANAGER\",\"MANNER\",\"MANY\",\"MAP\",\"MARK\",\"MARKET\",\"MARRIAGE\",\"MARRIED\",\"MARRY\",\"MASS\",\"MASTER\",\"MATCH\",\"MATERIAL\",\"MATTER\",\"MAY\",\"MAYBE\",\"ME\",\"MEAL\",\"MEAN\",\"MEANING\",\"MEANS\",\"MEANWHILE\",\"MEASURE\",\"MECHANISM\",\"MEDIA\",\"MEDICAL\",\"MEET\",\"MEETING\",\"MEMBER\",\"MEMBERSHIP\",\"MEMORY\",\"MENTAL\",\"MENTION\",\"MERELY\",\"MESSAGE\",\"METAL\",\"METHOD\",\"MIDDLE\",\"MIGHT\",\"MILE\",\"MILITARY\",\"MILK\",\"MIND\",\"MINE\",\"MINISTER\",\"MINISTRY\",\"MINUTE\",\"MISS\",\"MISTAKE\",\"MODEL\",\"MODERN\",\"MODULE\",\"MOMENT\",\"MONEY\",\"MONTH\",\"MORE\",\"MORNING\",\"MOST\",\"MOTHER\",\"MOTION\",\"MOTOR\",\"MOUNTAIN\",\"MOUTH\",\"MOVE\",\"MOVEMENT\",\"MUCH\",\"MURDER\",\"MUSEUM\",\"MUSIC\",\"MUST\",\"MY\",\"MYSELF\",\"NAME\",\"NARROW\",\"NATION\",\"NATIONAL\",\"NATURAL\",\"NATURE\",\"NEAR\",\"NEARLY\",\"NECESSARILY\",\"NECESSARY\",\"NECK\",\"NEED\",\"NEGOTIATION\",\"NEIGHBOUR\",\"NEITHER\",\"NETWORK\",\"NEVER\",\"NEVERTHELESS\",\"NEW\",\"NEWS\",\"NEWSPAPER\",\"NEXT\",\"NICE\",\"NIGHT\",\"NO\",\"NOBODY\",\"NOD\",\"NOISE\",\"NONE\",\"NOR\",\"NORMAL\",\"NORMALLY\",\"NORTH\",\"NORTHERN\",\"NOSE\",\"NOT\",\"NOTE\",\"NOTHING\",\"NOTICE\",\"NOTION\",\"NOW\",\"NUCLEAR\",\"NUMBER\",\"NURSE\",\"OBJECT\",\"OBJECTIVE\",\"OBSERVATION\",\"OBSERVE\",\"OBTAIN\",\"OBVIOUS\",\"OBVIOUSLY\",\"OCCASION\",\"OCCUR\",\"ODD\",\"OF\",\"OFF\",\"OFFENCE\",\"OFFER\",\"OFFICE\",\"OFFICER\",\"OFFICIAL\",\"OFTEN\",\"OIL\",\"OKAY\",\"OLD\",\"ON\",\"ONCE\",\"ONE\",\"ONLY\",\"ONTO\",\"OPEN\",\"OPERATE\",\"OPERATION\",\"OPINION\",\"OPPORTUNITY\",\"OPPOSITION\",\"OPTION\",\"OR\",\"ORDER\",\"ORDINARY\",\"ORGANISATION\",\"ORGANISE\",\"ORGANIZATION\",\"ORIGIN\",\"ORIGINAL\",\"OTHER\",\"OTHERWISE\",\"OUGHT\",\"OUR\",\"OURSELVES\",\"OUT\",\"OUTCOME\",\"OUTPUT\",\"OUTSIDE\",\"OVER\",\"OVERALL\",\"OWN\",\"OWNER\",\"PACKAGE\",\"PAGE\",\"PAIN\",\"PAINT\",\"PAINTING\",\"PAIR\",\"PANEL\",\"PAPER\",\"PARENT\",\"PARK\",\"PARLIAMENT\",\"PART\",\"PARTICULAR\",\"PARTICULARLY\",\"PARTLY\",\"PARTNER\",\"PARTY\",\"PASS\",\"PASSAGE\",\"PAST\",\"PATH\",\"PATIENT\",\"PATTERN\",\"PAY\",\"PAYMENT\",\"PEACE\",\"PENSION\",\"PEOPLE\",\"PER\",\"PERCENT\",\"PERFECT\",\"PERFORM\",\"PERFORMANCE\",\"PERHAPS\",\"PERIOD\",\"PERMANENT\",\"PERSON\",\"PERSONAL\",\"PERSUADE\",\"PHASE\",\"PHONE\",\"PHOTOGRAPH\",\"PHYSICAL\",\"PICK\",\"PICTURE\",\"PIECE\",\"PLACE\",\"PLAN\",\"PLANNING\",\"PLANT\",\"PLASTIC\",\"PLATE\",\"PLAY\",\"PLAYER\",\"PLEASE\",\"PLEASURE\",\"PLENTY\",\"PLUS\",\"POCKET\",\"POINT\",\"POLICE\",\"POLICY\",\"POLITICAL\",\"POLITICS\",\"POOL\",\"POOR\",\"POPULAR\",\"POPULATION\",\"POSITION\",\"POSITIVE\",\"POSSIBILITY\",\"POSSIBLE\",\"POSSIBLY\",\"POST\",\"POTENTIAL\",\"POUND\",\"POWER\",\"POWERFUL\",\"PRACTICAL\",\"PRACTICE\",\"PREFER\",\"PREPARE\",\"PRESENCE\",\"PRESENT\",\"PRESIDENT\",\"PRESS\",\"PRESSURE\",\"PRETTY\",\"PREVENT\",\"PREVIOUS\",\"PREVIOUSLY\",\"PRICE\",\"PRIMARY\",\"PRIME\",\"PRINCIPLE\",\"PRIORITY\",\"PRISON\",\"PRISONER\",\"PRIVATE\",\"PROBABLY\",\"PROBLEM\",\"PROCEDURE\",\"PROCESS\",\"PRODUCE\",\"PRODUCT\",\"PRODUCTION\",\"PROFESSIONAL\",\"PROFIT\",\"PROGRAM\",\"PROGRAMME\",\"PROGRESS\",\"PROJECT\",\"PROMISE\",\"PROMOTE\",\"PROPER\",\"PROPERLY\",\"PROPERTY\",\"PROPORTION\",\"PROPOSE\",\"PROPOSAL\",\"PROSPECT\",\"PROTECT\",\"PROTECTION\",\"PROVE\",\"PROVIDE\",\"PROVIDED\",\"PROVISION\",\"PUB\",\"PUBLIC\",\"PUBLICATION\",\"PUBLISH\",\"PULL\",\"PUPIL\",\"PURPOSE\",\"PUSH\",\"PUT\",\"QUALITY\",\"QUARTER\",\"QUESTION\",\"QUICK\",\"QUICKLY\",\"QUIET\",\"QUITE\",\"RACE\",\"RADIO\",\"RAILWAY\",\"RAIN\",\"RAISE\",\"RANGE\",\"RAPIDLY\",\"RARE\",\"RATE\",\"RATHER\",\"REACH\",\"REACTION\",\"READ\",\"READER\",\"READING\",\"READY\",\"REAL\",\"REALISE\",\"REALITY\",\"REALIZE\",\"REALLY\",\"REASON\",\"REASONABLE\",\"RECALL\",\"RECEIVE\",\"RECENT\",\"RECENTLY\",\"RECOGNISE\",\"RECOGNITION\",\"RECOGNIZE\",\"RECOMMEND\",\"RECORD\",\"RECOVER\",\"RED\",\"REDUCE\",\"REDUCTION\",\"REFER\",\"REFERENCE\",\"REFLECT\",\"REFORM\",\"REFUSE\",\"REGARD\",\"REGION\",\"REGIONAL\",\"REGULAR\",\"REGULATION\",\"REJECT\",\"RELATE\",\"RELATION\",\"RELATIONSHIP\",\"RELATIVE\",\"RELATIVELY\",\"RELEASE\",\"RELEVANT\",\"RELIEF\",\"RELIGION\",\"RELIGIOUS\",\"RELY\",\"REMAIN\",\"REMEMBER\",\"REMIND\",\"REMOVE\",\"REPEAT\",\"REPLACE\",\"REPLY\",\"REPORT\",\"REPRESENT\",\"REPRESENTATION\",\"REPRESENTATIVE\",\"REQUEST\",\"REQUIRE\",\"REQUIREMENT\",\"RESEARCH\",\"RESOURCE\",\"RESPECT\",\"RESPOND\",\"RESPONSE\",\"RESPONSIBILITY\",\"RESPONSIBLE\",\"REST\",\"RESTAURANT\",\"RESULT\",\"RETAIN\",\"RETURN\",\"REVEAL\",\"REVENUE\",\"REVIEW\",\"REVOLUTION\",\"RICH\",\"RIDE\",\"RIGHT\",\"RING\",\"RISE\",\"RISK\",\"RIVER\",\"ROAD\",\"ROCK\",\"ROLE\",\"ROLL\",\"ROOF\",\"ROOM\",\"ROUND\",\"ROUTE\",\"ROW\",\"ROYAL\",\"RULE\",\"RUN\",\"RURAL\",\"SAFE\",\"SAFETY\",\"SALE\",\"SAME\",\"SAMPLE\",\"SATISFY\",\"SAVE\",\"SAY\",\"SCALE\",\"SCENE\",\"SCHEME\",\"SCHOOL\",\"SCIENCE\",\"SCIENTIFIC\",\"SCIENTIST\",\"SCORE\",\"SCREEN\",\"SEA\",\"SEARCH\",\"SEASON\",\"SEAT\",\"SECOND\",\"SECONDARY\",\"SECRETARY\",\"SECTION\",\"SECTOR\",\"SECURE\",\"SECURITY\",\"SEE\",\"SEEK\",\"SEEM\",\"SELECT\",\"SELECTION\",\"SELL\",\"SEND\",\"SENIOR\",\"SENSE\",\"SENTENCE\",\"SEPARATE\",\"SEQUENCE\",\"SERIES\",\"SERIOUS\",\"SERIOUSLY\",\"SERVANT\",\"SERVE\",\"SERVICE\",\"SESSION\",\"SET\",\"SETTLE\",\"SETTLEMENT\",\"SEVERAL\",\"SEVERE\",\"SEX\",\"SEXUAL\",\"SHAKE\",\"SHALL\",\"SHAPE\",\"SHARE\",\"SHE\",\"SHEET\",\"SHIP\",\"SHOE\",\"SHOOT\",\"SHOP\",\"SHORT\",\"SHOT\",\"SHOULD\",\"SHOULDER\",\"SHOUT\",\"SHOW\",\"SHUT\",\"SIDE\",\"SIGHT\",\"SIGN\",\"SIGNAL\",\"SIGNIFICANCE\",\"SIGNIFICANT\",\"SILENCE\",\"SIMILAR\",\"SIMPLE\",\"SIMPLY\",\"SINCE\",\"SING\",\"SINGLE\",\"SIR\",\"SISTER\",\"SIT\",\"SITE\",\"SITUATION\",\"SIZE\",\"SKILL\",\"SKIN\",\"SKY\",\"SLEEP\",\"SLIGHTLY\",\"SLIP\",\"SLOW\",\"SLOWLY\",\"SMALL\",\"SMILE\",\"SO\",\"SOCIAL\",\"SOCIETY\",\"SOFT\",\"SOFTWARE\",\"SOIL\",\"SOLDIER\",\"SOLICITOR\",\"SOLUTION\",\"SOME\",\"SOMEBODY\",\"SOMEONE\",\"SOMETHING\",\"SOMETIMES\",\"SOMEWHAT\",\"SOMEWHERE\",\"SON\",\"SONG\",\"SOON\",\"SORRY\",\"SORT\",\"SOUND\",\"SOURCE\",\"SOUTH\",\"SOUTHERN\",\"SPACE\",\"SPEAK\",\"SPEAKER\",\"SPECIAL\",\"SPECIES\",\"SPECIFIC\",\"SPEECH\",\"SPEED\",\"SPEND\",\"SPIRIT\",\"SPORT\",\"SPOT\",\"SPREAD\",\"SPRING\",\"STAFF\",\"STAGE\",\"STAND\",\"STANDARD\",\"STAR\",\"START\",\"STATE\",\"STATEMENT\",\"STATION\",\"STATUS\",\"STAY\",\"STEAL\",\"STEP\",\"STICK\",\"STILL\",\"STOCK\",\"STONE\",\"STOP\",\"STORE\",\"STORY\",\"STRAIGHT\",\"STRANGE\",\"STRATEGY\",\"STREET\",\"STRENGTH\",\"STRIKE\",\"STRONG\",\"STRONGLY\",\"STRUCTURE\",\"STUDENT\",\"STUDIO\",\"STUDY\",\"STUFF\",\"STYLE\",\"SUBJECT\",\"SUBSTANTIAL\",\"SUCCEED\",\"SUCCESS\",\"SUCCESSFUL\",\"SUCH\",\"SUDDENLY\",\"SUFFER\",\"SUFFICIENT\",\"SUGGEST\",\"SUGGESTION\",\"SUITABLE\",\"SUM\",\"SUMMER\",\"SUN\",\"SUPPLY\",\"SUPPORT\",\"SUPPOSE\",\"SURE\",\"SURELY\",\"SURFACE\",\"SURPRISE\",\"SURROUND\",\"SURVEY\",\"SURVIVE\",\"SWITCH\",\"SYSTEM\",\"TABLE\",\"TAKE\",\"TALK\",\"TALL\",\"TAPE\",\"TARGET\",\"TASK\",\"TAX\",\"TEA\",\"TEACH\",\"TEACHER\",\"TEACHING\",\"TEAM\",\"TEAR\",\"TECHNICAL\",\"TECHNIQUE\",\"TECHNOLOGY\",\"TELEPHONE\",\"TELEVISION\",\"TELL\",\"TEMPERATURE\",\"TEND\",\"TERM\",\"TERMS\",\"TERRIBLE\",\"TEST\",\"TEXT\",\"THAN\",\"THANK\",\"THANKS\",\"THAT\",\"THE\",\"THEATRE\",\"THEIR\",\"THEM\",\"THEME\",\"THEMSELVES\",\"THEN\",\"THEORY\",\"THERE\",\"THEREFORE\",\"THESE\",\"THEY\",\"THIN\",\"THING\",\"THINK\",\"THIS\",\"THOSE\",\"THOUGH\",\"THOUGHT\",\"THREAT\",\"THREATEN\",\"THROUGH\",\"THROUGHOUT\",\"THROW\",\"THUS\",\"TICKET\",\"TIME\",\"TINY\",\"TITLE\",\"TO\",\"TODAY\",\"TOGETHER\",\"TOMORROW\",\"TONE\",\"TONIGHT\",\"TOO\",\"TOOL\",\"TOOTH\",\"TOP\",\"TOTAL\",\"TOTALLY\",\"TOUCH\",\"TOUR\",\"TOWARDS\",\"TOWN\",\"TRACK\",\"TRADE\",\"TRADITION\",\"TRADITIONAL\",\"TRAFFIC\",\"TRAIN\",\"TRAINING\",\"TRANSFER\",\"TRANSPORT\",\"TRAVEL\",\"TREAT\",\"TREATMENT\",\"TREATY\",\"TREE\",\"TREND\",\"TRIAL\",\"TRIP\",\"TROOP\",\"TROUBLE\",\"TRUE\",\"TRUST\",\"TRUTH\",\"TRY\",\"TURN\",\"TWICE\",\"TYPE\",\"TYPICAL\",\"UNABLE\",\"UNDER\",\"UNDERSTAND\",\"UNDERSTANDING\",\"UNDERTAKE\",\"UNEMPLOYMENT\",\"UNFORTUNATELY\",\"UNION\",\"UNIT\",\"UNITED\",\"UNIVERSITY\",\"UNLESS\",\"UNLIKELY\",\"UNTIL\",\"UP\",\"UPON\",\"UPPER\",\"URBAN\",\"US\",\"USE\",\"USED\",\"USEFUL\",\"USER\",\"USUAL\",\"USUALLY\",\"VALUE\",\"VARIATION\",\"VARIETY\",\"VARIOUS\",\"VARY\",\"VAST\",\"VEHICLE\",\"VERSION\",\"VERY\",\"VIA\",\"VICTIM\",\"VICTORY\",\"VIDEO\",\"VIEW\",\"VILLAGE\",\"VIOLENCE\",\"VISION\",\"VISIT\",\"VISITOR\",\"VITAL\",\"VOICE\",\"VOLUME\",\"VOTE\",\"WAGE\",\"WAIT\",\"WALK\",\"WALL\",\"WANT\",\"WAR\",\"WARM\",\"WARN\",\"WASH\",\"WATCH\",\"WATER\",\"WAVE\",\"WAY\",\"WE\",\"WEAK\",\"WEAPON\",\"WEAR\",\"WEATHER\",\"WEEK\",\"WEEKEND\",\"WEIGHT\",\"WELCOME\",\"WELFARE\",\"WELL\",\"WEST\",\"WESTERN\",\"WHAT\",\"WHATEVER\",\"WHEN\",\"WHERE\",\"WHEREAS\",\"WHETHER\",\"WHICH\",\"WHILE\",\"WHILST\",\"WHITE\",\"WHO\",\"WHOLE\",\"WHOM\",\"WHOSE\",\"WHY\",\"WIDE\",\"WIDELY\",\"WIFE\",\"WILD\",\"WILL\",\"WIN\",\"WIND\",\"WINDOW\",\"WINE\",\"WING\",\"WINNER\",\"WINTER\",\"WISH\",\"WITH\",\"WITHDRAW\",\"WITHIN\",\"WITHOUT\",\"WOMAN\",\"WONDER\",\"WONDERFUL\",\"WOOD\",\"WORD\",\"WORK\",\"WORKER\",\"WORKING\",\"WORKS\",\"WORLD\",\"WORRY\",\"WORTH\",\"WOULD\",\"WRITE\",\"WRITER\",\"WRITING\",\"WRONG\",\"YARD\",\"YEAH\",\"YEAR\",\"YES\",\"YESTERDAY\",\"YET\",\"YOU\",\"YOUNG\",\"YOUR\",\"YOURSELF\",\"YOUTH\"\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3d01000cf542c50fee2",
      "title": "Problem 99: Largest exponential",
      "challengeType": 1,
      "dashedName": "problem-99-largest-exponential",
      "description": "Comparing two numbers written in index form like $2^{11}$ and $3^7$ is not difficult, as any calculator would confirm that $2^{11} = 2048 &lt; 3^7 = 2187$.\n\nHowever, confirming that $632382^{518061} &lt; 519432^{525806}$ would be much more difficult, as both numbers contain over three million digits.\n\nUsing the 2D `baseExp` array of base/exponent pairs, determine pair with the greatest numerical value and return it.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largestExponential(baseExp) {\n\n  return true;\n}\n\n// Only change code above this line\n\nconst testArray1 = [\n  [492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123]\n];\n\nlargestExponential(testArray1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function largestExponential(baseExp) {\n  let maximum = 0;\n  let indexOfMaximum = 0;\n  for (let i = 1; i < baseExp.length; i++) {\n    const curValue = Math.log(baseExp[i][0]) * baseExp[i][1];\n    if (curValue > maximum) {\n      maximum = curValue;\n      indexOfMaximum = i;\n    }\n  }\n\n  return baseExp[indexOfMaximum];\n}"
        }
      ],
      "tests": [
        {
          "text": "`largestExponential(testArray1)` should return an array.",
          "testCode": "assert(Array.isArray(largestExponential(_testArray1)));"
        },
        {
          "text": "`largestExponential(testArray1)` should return `[840237, 507276]`.",
          "testCode": "assert.deepEqual(largestExponential(_testArray1), [840237, 507276]);"
        },
        {
          "text": "`largestExponential(testArray2)` should return `[895447, 504922]`.",
          "testCode": "assert.deepEqual(largestExponential(_testArray2), [895447, 504922]);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302216,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-1-to-100\\problem-99-largest-exponential.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testArray1 = [\n  [492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123]\n];\nconst _testArray2 = [\n  [519432,525806],[632382,518061],[78864,613712],[466580,530130],[780495,510032],[525895,525320],[15991,714883],[960290,502358],[760018,511029],[166800,575487],[210884,564478],[555151,523163],[681146,515199],[563395,522587],[738250,512126],[923525,503780],[595148,520429],[177108,572629],[750923,511482],[440902,532446],[881418,505504],[422489,534197],[979858,501616],[685893,514935],[747477,511661],[167214,575367],[234140,559696],[940238,503122],[728969,512609],[232083,560102],[900971,504694],[688801,514772],[189664,569402],[891022,505104],[445689,531996],[119570,591871],[821453,508118],[371084,539600],[911745,504251],[623655,518600],[144361,582486],[352442,541775],[420726,534367],[295298,549387],[6530,787777],[468397,529976],[672336,515696],[431861,533289],[84228,610150],[805376,508857],[444409,532117],[33833,663511],[381850,538396],[402931,536157],[92901,604930],[304825,548004],[731917,512452],[753734,511344],[51894,637373],[151578,580103],[295075,549421],[303590,548183],[333594,544123],[683952,515042],[60090,628880],[951420,502692],[28335,674991],[714940,513349],[343858,542826],[549279,523586],[804571,508887],[260653,554881],[291399,549966],[402342,536213],[408889,535550],[40328,652524],[375856,539061],[768907,510590],[165993,575715],[976327,501755],[898500,504795],[360404,540830],[478714,529095],[694144,514472],[488726,528258],[841380,507226],[328012,544839],[22389,690868],[604053,519852],[329514,544641],[772965,510390],[492798,527927],[30125,670983],[895603,504906],[450785,531539],[840237,507276],[380711,538522],[63577,625673],[76801,615157],[502694,527123],[597706,520257],[310484,547206],[944468,502959],[121283,591152],[451131,531507],[566499,522367],[425373,533918],[40240,652665],[39130,654392],[714926,513355],[469219,529903],[806929,508783],[287970,550487],[92189,605332],[103841,599094],[671839,515725],[452048,531421],[987837,501323],[935192,503321],[88585,607450],[613883,519216],[144551,582413],[647359,517155],[213902,563816],[184120,570789],[258126,555322],[502546,527130],[407655,535678],[401528,536306],[477490,529193],[841085,507237],[732831,512408],[833000,507595],[904694,504542],[581435,521348],[455545,531110],[873558,505829],[94916,603796],[720176,513068],[545034,523891],[246348,557409],[556452,523079],[832015,507634],[173663,573564],[502634,527125],[250732,556611],[569786,522139],[216919,563178],[521815,525623],[92304,605270],[164446,576167],[753413,511364],[11410,740712],[448845,531712],[925072,503725],[564888,522477],[7062,780812],[641155,517535],[738878,512100],[636204,517828],[372540,539436],[443162,532237],[571192,522042],[655350,516680],[299741,548735],[581914,521307],[965471,502156],[513441,526277],[808682,508700],[237589,559034],[543300,524025],[804712,508889],[247511,557192],[543486,524008],[504383,526992],[326529,545039],[792493,509458],[86033,609017],[126554,589005],[579379,521481],[948026,502823],[404777,535969],[265767,554022],[266876,553840],[46631,643714],[492397,527958],[856106,506581],[795757,509305],[748946,511584],[294694,549480],[409781,535463],[775887,510253],[543747,523991],[210592,564536],[517119,525990],[520253,525751],[247926,557124],[592141,520626],[346580,542492],[544969,523902],[506501,526817],[244520,557738],[144745,582349],[69274,620858],[292620,549784],[926027,503687],[736320,512225],[515528,526113],[407549,535688],[848089,506927],[24141,685711],[9224,757964],[980684,501586],[175259,573121],[489160,528216],[878970,505604],[969546,502002],[525207,525365],[690461,514675],[156510,578551],[659778,516426],[468739,529945],[765252,510770],[76703,615230],[165151,575959],[29779,671736],[928865,503569],[577538,521605],[927555,503618],[185377,570477],[974756,501809],[800130,509093],[217016,563153],[365709,540216],[774508,510320],[588716,520851],[631673,518104],[954076,502590],[777828,510161],[990659,501222],[597799,520254],[786905,509727],[512547,526348],[756449,511212],[869787,505988],[653747,516779],[84623,609900],[839698,507295],[30159,670909],[797275,509234],[678136,515373],[897144,504851],[989554,501263],[413292,535106],[55297,633667],[788650,509637],[486748,528417],[150724,580377],[56434,632490],[77207,614869],[588631,520859],[611619,519367],[100006,601055],[528924,525093],[190225,569257],[851155,506789],[682593,515114],[613043,519275],[514673,526183],[877634,505655],[878905,505602],[1926,914951],[613245,519259],[152481,579816],[841774,507203],[71060,619442],[865335,506175],[90244,606469],[302156,548388],[399059,536557],[478465,529113],[558601,522925],[69132,620966],[267663,553700],[988276,501310],[378354,538787],[529909,525014],[161733,576968],[758541,511109],[823425,508024],[149821,580667],[269258,553438],[481152,528891],[120871,591322],[972322,501901],[981350,501567],[676129,515483],[950860,502717],[119000,592114],[392252,537272],[191618,568919],[946699,502874],[289555,550247],[799322,509139],[703886,513942],[194812,568143],[261823,554685],[203052,566221],[217330,563093],[734748,512313],[391759,537328],[807052,508777],[564467,522510],[59186,629748],[113447,594545],[518063,525916],[905944,504492],[613922,519213],[439093,532607],[445946,531981],[230530,560399],[297887,549007],[459029,530797],[403692,536075],[855118,506616],[963127,502245],[841711,507208],[407411,535699],[924729,503735],[914823,504132],[333725,544101],[176345,572832],[912507,504225],[411273,535308],[259774,555036],[632853,518038],[119723,591801],[163902,576321],[22691,689944],[402427,536212],[175769,572988],[837260,507402],[603432,519893],[313679,546767],[538165,524394],[549026,523608],[61083,627945],[898345,504798],[992556,501153],[369999,539727],[32847,665404],[891292,505088],[152715,579732],[824104,507997],[234057,559711],[730507,512532],[960529,502340],[388395,537687],[958170,502437],[57105,631806],[186025,570311],[993043,501133],[576770,521664],[215319,563513],[927342,503628],[521353,525666],[39563,653705],[752516,511408],[110755,595770],[309749,547305],[374379,539224],[919184,503952],[990652,501226],[647780,517135],[187177,570017],[168938,574877],[649558,517023],[278126,552016],[162039,576868],[658512,516499],[498115,527486],[896583,504868],[561170,522740],[747772,511647],[775093,510294],[652081,516882],[724905,512824],[499707,527365],[47388,642755],[646668,517204],[571700,522007],[180430,571747],[710015,513617],[435522,532941],[98137,602041],[759176,511070],[486124,528467],[526942,525236],[878921,505604],[408313,535602],[926980,503640],[882353,505459],[566887,522345],[3326,853312],[911981,504248],[416309,534800],[392991,537199],[622829,518651],[148647,581055],[496483,527624],[666314,516044],[48562,641293],[672618,515684],[443676,532187],[274065,552661],[265386,554079],[347668,542358],[31816,667448],[181575,571446],[961289,502320],[365689,540214],[987950,501317],[932299,503440],[27388,677243],[746701,511701],[492258,527969],[147823,581323],[57918,630985],[838849,507333],[678038,515375],[27852,676130],[850241,506828],[818403,508253],[131717,587014],[850216,506834],[904848,504529],[189758,569380],[392845,537217],[470876,529761],[925353,503711],[285431,550877],[454098,531234],[823910,508003],[318493,546112],[766067,510730],[261277,554775],[421530,534289],[694130,514478],[120439,591498],[213308,563949],[854063,506662],[365255,540263],[165437,575872],[662240,516281],[289970,550181],[847977,506933],[546083,523816],[413252,535113],[975829,501767],[361540,540701],[235522,559435],[224643,561577],[736350,512229],[328303,544808],[35022,661330],[307838,547578],[474366,529458],[873755,505819],[73978,617220],[827387,507845],[670830,515791],[326511,545034],[309909,547285],[400970,536363],[884827,505352],[718307,513175],[28462,674699],[599384,520150],[253565,556111],[284009,551093],[343403,542876],[446557,531921],[992372,501160],[961601,502308],[696629,514342],[919537,503945],[894709,504944],[892201,505051],[358160,541097],[448503,531745],[832156,507636],[920045,503924],[926137,503675],[416754,534757],[254422,555966],[92498,605151],[826833,507873],[660716,516371],[689335,514746],[160045,577467],[814642,508425],[969939,501993],[242856,558047],[76302,615517],[472083,529653],[587101,520964],[99066,601543],[498005,527503],[709800,513624],[708000,513716],[20171,698134],[285020,550936],[266564,553891],[981563,501557],[846502,506991],[334,1190800],[209268,564829],[9844,752610],[996519,501007],[410059,535426],[432931,533188],[848012,506929],[966803,502110],[983434,501486],[160700,577267],[504374,526989],[832061,507640],[392825,537214],[443842,532165],[440352,532492],[745125,511776],[13718,726392],[661753,516312],[70500,619875],[436952,532814],[424724,533973],[21954,692224],[262490,554567],[716622,513264],[907584,504425],[60086,628882],[837123,507412],[971345,501940],[947162,502855],[139920,584021],[68330,621624],[666452,516038],[731446,512481],[953350,502619],[183157,571042],[845400,507045],[651548,516910],[20399,697344],[861779,506331],[629771,518229],[801706,509026],[189207,569512],[737501,512168],[719272,513115],[479285,529045],[136046,585401],[896746,504860],[891735,505067],[684771,514999],[865309,506184],[379066,538702],[503117,527090],[621780,518717],[209518,564775],[677135,515423],[987500,501340],[197049,567613],[329315,544673],[236756,559196],[357092,541226],[520440,525733],[213471,563911],[956852,502490],[702223,514032],[404943,535955],[178880,572152],[689477,514734],[691351,514630],[866669,506128],[370561,539656],[739805,512051],[71060,619441],[624861,518534],[261660,554714],[366137,540160],[166054,575698],[601878,519990],[153445,579501],[279899,551729],[379166,538691],[423209,534125],[675310,515526],[145641,582050],[691353,514627],[917468,504026],[284778,550976],[81040,612235],[161699,576978],[616394,519057],[767490,510661],[156896,578431],[427408,533714],[254849,555884],[737217,512182],[897133,504851],[203815,566051],[270822,553189],[135854,585475],[778805,510111],[784373,509847],[305426,547921],[733418,512375],[732087,512448],[540668,524215],[702898,513996],[628057,518328],[640280,517587],[422405,534204],[10604,746569],[746038,511733],[839808,507293],[457417,530938],[479030,529064],[341758,543090],[620223,518824],[251661,556451],[561790,522696],[497733,527521],[724201,512863],[489217,528217],[415623,534867],[624610,518548],[847541,506953],[432295,533249],[400391,536421],[961158,502319],[139173,584284],[421225,534315],[579083,521501],[74274,617000],[701142,514087],[374465,539219],[217814,562985],[358972,540995],[88629,607424],[288597,550389],[285819,550812],[538400,524385],[809930,508645],[738326,512126],[955461,502535],[163829,576343],[826475,507891],[376488,538987],[102234,599905],[114650,594002],[52815,636341],[434037,533082],[804744,508880],[98385,601905],[856620,506559],[220057,562517],[844734,507078],[150677,580387],[558697,522917],[621751,518719],[207067,565321],[135297,585677],[932968,503404],[604456,519822],[579728,521462],[244138,557813],[706487,513800],[711627,513523],[853833,506674],[497220,527562],[59428,629511],[564845,522486],[623621,518603],[242689,558077],[125091,589591],[363819,540432],[686453,514901],[656813,516594],[489901,528155],[386380,537905],[542819,524052],[243987,557841],[693412,514514],[488484,528271],[896331,504881],[336730,543721],[728298,512647],[604215,519840],[153729,579413],[595687,520398],[540360,524240],[245779,557511],[924873,503730],[509628,526577],[528523,525122],[3509,847707],[522756,525555],[895447,504922],[44840,646067],[45860,644715],[463487,530404],[398164,536654],[894483,504959],[619415,518874],[966306,502129],[990922,501212],[835756,507474],[548881,523618],[453578,531282],[474993,529410],[80085,612879],[737091,512193],[50789,638638],[979768,501620],[792018,509483],[665001,516122],[86552,608694],[462772,530469],[589233,520821],[891694,505072],[592605,520594],[209645,564741],[42531,649269],[554376,523226],[803814,508929],[334157,544042],[175836,572970],[868379,506051],[658166,516520],[278203,551995],[966198,502126],[627162,518387],[296774,549165],[311803,547027],[843797,507118],[702304,514032],[563875,522553],[33103,664910],[191932,568841],[543514,524006],[506835,526794],[868368,506052],[847025,506971],[678623,515342],[876139,505726],[571997,521984],[598632,520198],[213590,563892],[625404,518497],[726508,512738],[689426,514738],[332495,544264],[411366,535302],[242546,558110],[315209,546555],[797544,509219],[93889,604371],[858879,506454],[124906,589666],[449072,531693],[235960,559345],[642403,517454],[720567,513047],[705534,513858],[603692,519870],[488137,528302],[157370,578285],[63515,625730],[666326,516041],[619226,518883],[443613,532186],[597717,520257],[96225,603069],[86940,608450],[40725,651929],[460976,530625],[268875,553508],[270671,553214],[363254,540500],[384248,538137],[762889,510892],[377941,538833],[278878,551890],[176615,572755],[860008,506412],[944392,502967],[608395,519571],[225283,561450],[45095,645728],[333798,544090],[625733,518476],[995584,501037],[506135,526853],[238050,558952],[557943,522972],[530978,524938],[634244,517949],[177168,572616],[85200,609541],[953043,502630],[523661,525484],[999295,500902],[840803,507246],[961490,502312],[471747,529685],[380705,538523],[911180,504275],[334149,544046],[478992,529065],[325789,545133],[335884,543826],[426976,533760],[749007,511582],[667067,516000],[607586,519623],[674054,515599],[188534,569675],[565185,522464],[172090,573988],[87592,608052],[907432,504424],[8912,760841],[928318,503590],[757917,511138],[718693,513153],[315141,546566],[728326,512645],[353492,541647],[638429,517695],[628892,518280],[877286,505672],[620895,518778],[385878,537959],[423311,534113],[633501,517997],[884833,505360],[883402,505416],[999665,500894],[708395,513697],[548142,523667],[756491,511205],[987352,501340],[766520,510705],[591775,520647],[833758,507563],[843890,507108],[925551,503698],[74816,616598],[646942,517187],[354923,541481],[256291,555638],[634470,517942],[930904,503494],[134221,586071],[282663,551304],[986070,501394],[123636,590176],[123678,590164],[481717,528841],[423076,534137],[866246,506145],[93313,604697],[783632,509880],[317066,546304],[502977,527103],[141272,583545],[71708,618938],[617748,518975],[581190,521362],[193824,568382],[682368,515131],[352956,541712],[351375,541905],[505362,526909],[905165,504518],[128645,588188],[267143,553787],[158409,577965],[482776,528754],[628896,518282],[485233,528547],[563606,522574],[111001,595655],[115920,593445],[365510,540237],[959724,502374],[938763,503184],[930044,503520],[970959,501956],[913658,504176],[68117,621790],[989729,501253],[567697,522288],[820427,508163],[54236,634794],[291557,549938],[124961,589646],[403177,536130],[405421,535899],[410233,535417],[815111,508403],[213176,563974],[83099,610879],[998588,500934],[513640,526263],[129817,587733],[1820,921851],[287584,550539],[299160,548820],[860621,506386],[529258,525059],[586297,521017],[953406,502616],[441234,532410],[986217,501386],[781938,509957],[461247,530595],[735424,512277],[146623,581722],[839838,507288],[510667,526494],[935085,503327],[737523,512167],[303455,548204],[992779,501145],[60240,628739],[939095,503174],[794368,509370],[501825,527189],[459028,530798],[884641,505363],[512287,526364],[835165,507499],[307723,547590],[160587,577304],[735043,512300],[493289,527887],[110717,595785],[306480,547772],[318593,546089],[179810,571911],[200531,566799],[314999,546580],[197020,567622],[301465,548487],[237808,559000],[131944,586923],[882527,505449],[468117,530003],[711319,513541],[156240,578628],[965452,502162],[992756,501148],[437959,532715],[739938,512046],[614249,519196],[391496,537356],[62746,626418],[688215,514806],[75501,616091],[883573,505412],[558824,522910],[759371,511061],[173913,573489],[891351,505089],[727464,512693],[164833,576051],[812317,508529],[540320,524243],[698061,514257],[69149,620952],[471673,529694],[159092,577753],[428134,533653],[89997,606608],[711061,513557],[779403,510081],[203327,566155],[798176,509187],[667688,515963],[636120,517833],[137410,584913],[217615,563034],[556887,523038],[667229,515991],[672276,515708],[325361,545187],[172115,573985],[13846,725685]\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-1-to-100",
        "name": "Project Euler Problems 1 To 100"
      }
    },
    {
      "id": "5900f3d21000cf542c50fee4",
      "title": "Problem 101: Optimum polynomial",
      "challengeType": 1,
      "dashedName": "problem-101-optimum-polynomial",
      "description": "If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence.\n\nAs an example, let us consider the sequence of cube numbers. This is defined by the generating function, $u_n = n^3: 1, 8, 27, 64, 125, 216, \\ldots$\n\nSuppose we were only given the first two terms of this sequence. Working on the principle that \"simple is best\" we should assume a linear relationship and predict the next term to be 15 (common difference 7). Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed.\n\nWe shall define $OP(k, n)$ to be the $n^{th}$ term of the optimum polynomial generating function for the first k terms of a sequence. It should be clear that $OP(k, n)$ will accurately generate the terms of the sequence for $n ≤ k$, and potentially the first incorrect term (FIT) will be $OP(k, k+1)$; in which case we shall call it a bad OP (BOP).\n\nAs a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for $n ≥ 2, OP(1, n) = u_1$.\n\nHence we obtain the following OPs for the cubic sequence:\n\n$$\\begin{array}{ll}\n  OP(1, n) = 1          & 1, {\\color{red}1}, 1, 1, \\ldots     \\\\\\\\\n  OP(2, n) = 7n−6       & 1, 8, {\\color{red}{15}}, \\ldots     \\\\\\\\\n  OP(3, n) = 6n^2−11n+6 & 1, 8, 27, {\\color{red}{58}}, \\ldots \\\\\\\\\n  OP(4, n) = n^3        & 1, 8, 27, 64, 125, \\ldots\n\\end{array}$$\n\nClearly no BOPs exist for k ≥ 4. By considering the sum of FITs generated by the BOPs (indicated in $\\color{red}{red}$ above), we obtain 1 + 15 + 58 = 74. Consider the following tenth degree polynomial generating function:\n\n$$u_n = 1 − n + n^2 − n^3 + n^4 − n^5 + n^6 − n^7 + n^8 − n^9 + n^{10}$$\n\nFind the sum of FITs for the BOPs.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function optimumPolynomial() {\n\n  return true;\n}\n\noptimumPolynomial();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`optimumPolynomial()` should return `37076114526`.",
          "testCode": "assert.strictEqual(optimumPolynomial(), 37076114526);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301725,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-101-optimum-polynomial.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3d21000cf542c50fee5",
      "title": "Problem 102: Triangle containment",
      "challengeType": 1,
      "dashedName": "problem-102-triangle-containment",
      "description": "Three distinct points are plotted at random on a Cartesian plane, for which -1000 ≤ x, y ≤ 1000, such that a triangle is formed.\n\nConsider the following two triangles:\n\n```js\nconst exampleTriangles = [\n  [[-340, 495], [-153, -910], [835, -947]],\n  [[-175, 41], [-421, -714], [574, -645]]\n];\n```\n\nIt can be verified that first triangle contains the origin, whereas second triangle does not.\n\nUsing the `triangles` array containing coordinates of triangles, find the number of triangles for which the interior contains the origin.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function triangleContainment(triangles) {\n\n  return true;\n}\n\nconst testTriangles1 = [\n  [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]]\n];\n\ntriangleContainment(testTriangles1);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function triangleContainment(triangles) {\n  function isInTriangle(triangle, point) {\n    // Based on https://stackoverflow.com/a/14382692\n    const area = triangleArea(triangle);\n    const s = getS(area, point, triangle);\n    const t = getT(area, point, triangle);\n\n    if (s > 0 && t > 0 && 1 - s - t > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  function getS(area, point, triangle) {\n    return (\n      (1 / (2 * area)) *\n      (triangle.A.y * triangle.C.x -\n        triangle.A.x * triangle.C.y +\n        point.x * (triangle.C.y - triangle.A.y) +\n        point.y * (triangle.A.x - triangle.C.x))\n    );\n  }\n\n  function getT(area, point, triangle) {\n    return (\n      (1 / (2 * area)) *\n      (triangle.A.x * triangle.B.y -\n        triangle.A.y * triangle.B.x +\n        point.x * (triangle.A.y - triangle.B.y) +\n        point.y * (triangle.B.x - triangle.A.x))\n    );\n  }\n\n  function triangleArea(triangle) {\n    return (\n      0.5 *\n      (-triangle.B.y * triangle.C.x +\n        triangle.A.y * (-triangle.B.x + triangle.C.x) +\n        triangle.A.x * (triangle.B.y - triangle.C.y) +\n        triangle.B.x * triangle.C.y)\n    );\n  }\n\n  function parseTriangle(triangle) {\n    const points = [];\n    for (let i = 0; i < triangle.length; i++) {\n      const [coordinateX, coordinateY] = triangle[i];\n      points.push({ x: coordinateX, y: coordinateY });\n    }\n    const [pointA, pointB, pointC] = points;\n    return {\n      A: pointA,\n      B: pointB,\n      C: pointC\n    };\n  }\n\n  const origin = { x: 0, y: 0 };\n\n  let trianglesInside = 0;\n  for (let i = 0; i < triangles.length; i++) {\n    const triangle = parseTriangle(triangles[i]);\n\n    if (isInTriangle(triangle, origin)) {\n      trianglesInside++;\n    }\n  }\n  return trianglesInside;\n}"
        }
      ],
      "tests": [
        {
          "text": "`triangleContainment(exampleTriangles)` should return a number.",
          "testCode": "assert.isNumber(triangleContainment(_exampleTriangles));"
        },
        {
          "text": "`triangleContainment(exampleTriangles)` should return `1`.",
          "testCode": "assert.strictEqual(triangleContainment(_exampleTriangles), 1);"
        },
        {
          "text": "`triangleContainment(testTriangles1)` should return `19`.",
          "testCode": "assert.strictEqual(triangleContainment(_testTriangles1), 19);"
        },
        {
          "text": "`triangleContainment(testTriangles2)` should return `228`.",
          "testCode": "assert.strictEqual(triangleContainment(_testTriangles2), 228);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301726,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-102-triangle-containment.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _exampleTriangles = [\n  [[-340, 495], [-153, -910], [835, -947]],\n  [[-175, 41], [-421, -714], [574, -645]]\n];\nconst _testTriangles1 = [\n  [[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]]\n];\nconst _testTriangles2 = [\n  [[-340,495],[-153,-910],[835,-947]],[[-175,41],[-421,-714],[574,-645]],[[-547,712],[-352,579],[951,-786]],[[419,-864],[-83,650],[-399,171]],[[-429,-89],[-357,-930],[296,-29]],[[-734,-702],[823,-745],[-684,-62]],[[-971,762],[925,-776],[-663,-157]],[[162,570],[628,485],[-807,-896]],[[641,91],[-65,700],[887,759]],[[215,-496],[46,-931],[422,-30]],[[-119,359],[668,-609],[-358,-494]],[[440,929],[968,214],[760,-857]],[[-700,785],[838,29],[-216,411]],[[-770,-458],[-325,-53],[-505,633]],[[-752,-805],[349,776],[-799,687]],[[323,5],[561,-36],[919,-560]],[[-907,358],[264,320],[204,274]],[[-728,-466],[350,969],[292,-345]],[[940,836],[272,-533],[748,185]],[[411,998],[813,520],[316,-949]],[[-152,326],[658,-762],[148,-651]],[[330,507],[-9,-628],[101,174]],[[551,-496],[772,-541],[-702,-45]],[[-164,-489],[-90,322],[631,-59]],[[673,366],[-4,-143],[-606,-704]],[[428,-609],[801,-449],[740,-269]],[[453,-924],[-785,-346],[-853,111]],[[-738,555],[-181,467],[-426,-20]],[[958,-692],[784,-343],[505,-569]],[[620,27],[263,54],[-439,-726]],[[804,87],[998,859],[871,-78]],[[-119,-453],[-709,-292],[-115,-56]],[[-626,138],[-940,-476],[-177,-274]],[[-11,160],[142,588],[446,158]],[[538,727],[550,787],[330,810]],[[420,-689],[854,-546],[337,516]],[[872,-998],[-607,748],[473,-192]],[[653,440],[-516,-985],[808,-857]],[[374,-158],[331,-940],[-338,-641]],[[137,-925],[-179,771],[734,-715]],[[-314,198],[-115,29],[-641,-39]],[[759,-574],[-385,355],[590,-603]],[[-189,-63],[-168,204],[289,305]],[[-182,-524],[-715,-621],[911,-255]],[[331,-816],[-833,471],[168,126]],[[-514,581],[-855,-220],[-731,-507]],[[129,169],[576,651],[-87,-458]],[[783,-444],[-881,658],[-266,298]],[[603,-430],[-598,585],[368,899]],[[43,-724],[962,-376],[851,409]],[[-610,-646],[-883,-261],[-482,-881]],[[-117,-237],[978,641],[101,-747]],[[579,125],[-715,-712],[208,534]],[[672,-214],[-762,372],[874,533]],[[-564,965],[38,715],[367,242]],[[500,951],[-700,-981],[-61,-178]],[[-382,-224],[-959,903],[-282,-60]],[[-355,295],[426,-331],[-591,655]],[[892,128],[958,-271],[-993,274]],[[-454,-619],[302,138],[-790,-874]],[[-642,601],[-574,159],[-290,-318]],[[266,-109],[257,-686],[54,975]],[[162,628],[-478,840],[264,-266]],[[466,-280],[982,1],[904,-810]],[[721,839],[730,-807],[777,981]],[[-129,-430],[748,263],[943,96]],[[434,-94],[410,-990],[249,-704]],[[237,42],[122,-732],[44,-51]],[[909,-116],[-229,545],[292,717]],[[824,-768],[-807,-370],[-262,30]],[[675,58],[332,-890],[-651,791]],[[363,825],[-717,254],[684,240]],[[405,-715],[900,166],[-589,422]],[[-476,686],[-830,-319],[634,-807]],[[633,837],[-971,917],[-764,207]],[[-116,-44],[-193,-70],[908,809]],[[-26,-252],[998,408],[70,-713]],[[-601,645],[-462,842],[-644,-591]],[[-160,653],[274,113],[-138,687]],[[369,-273],[-181,925],[-167,-693]],[[-338,135],[480,-967],[-13,-840]],[[-90,-270],[-564,695],[161,907]],[[607,-430],[869,-713],[461,-469]],[[919,-165],[-776,522],[606,-708]],[[-203,465],[288,207],[-339,-458]],[[-453,-534],[-715,975],[838,-677]],[[-973,310],[-350,934],[546,-805]],[[-835,385],[708,-337],[-594,-772]],[[-14,914],[900,-495],[-627,594]],[[833,-713],[-213,578],[-296,699]],[[-27,-748],[484,455],[915,291]],[[270,889],[739,-57],[442,-516]],[[119,811],[-679,905],[184,130]],[[-678,-469],[925,553],[612,482]],[[101,-571],[-732,-842],[644,588]],[[-71,-737],[566,616],[957,-663]],[[-634,-356],[90,-207],[936,622]],[[598,443],[964,-895],[-58,529]],[[847,-467],[929,-742],[91,10]],[[-633,829],[-780,-408],[222,-30]],[[-818,57],[275,-38],[-746,198]],[[-722,-825],[-549,597],[-391,99]],[[-570,908],[430,873],[-103,-360]],[[342,-681],[512,434],[542,-528]],[[297,850],[479,609],[543,-357]],[[9,784],[212,548],[56,859]],[[-152,560],[-240,-969],[-18,713]],[[140,-133],[34,-635],[250,-163]],[[-272,-22],[-169,-662],[989,-604]],[[471,-765],[355,633],[-742,-118]],[[-118,146],[942,663],[547,-376]],[[583,16],[162,264],[715,-33]],[[-230,-446],[997,-838],[561,555]],[[372,397],[-729,-318],[-276,649]],[[92,982],[-970,-390],[-922,922]],[[-981,713],[-951,-337],[-669,670]],[[-999,846],[-831,-504],[7,-128]],[[455,-954],[-370,682],[-510,45]],[[822,-960],[-892,-385],[-662,314]],[[-668,-686],[-367,-246],[530,-341]],[[-723,-720],[-926,-836],[-142,757]],[[-509,-134],[384,-221],[-873,-639]],[[-803,-52],[-706,-669],[373,-339]],[[933,578],[631,-616],[770,555]],[[741,-564],[-33,-605],[-576,275]],[[-715,445],[-233,-730],[734,-704]],[[120,-10],[-266,-685],[-490,-17]],[[-232,-326],[-457,-946],[-457,-116]],[[811,52],[639,826],[-200,147]],[[-329,279],[293,612],[943,955]],[[-721,-894],[-393,-969],[-642,453]],[[-688,-826],[-352,-75],[371,79]],[[-809,-979],[407,497],[858,-248]],[[-485,-232],[-242,-582],[-81,849]],[[141,-106],[123,-152],[806,-596]],[[-428,57],[-992,811],[-192,478]],[[864,393],[122,858],[255,-876]],[[-284,-780],[240,457],[354,-107]],[[956,605],[-477,44],[26,-678]],[[86,710],[-533,-815],[439,327]],[[-906,-626],[-834,763],[426,-48]],[[201,-150],[-904,652],[475,412]],[[-247,149],[81,-199],[-531,-148]],[[923,-76],[-353,175],[-121,-223]],[[427,-674],[453,472],[-410,585]],[[931,776],[-33,85],[-962,-865]],[[-655,-908],[-902,208],[869,792]],[[-316,-102],[-45,-436],[-222,885]],[[-309,768],[-574,653],[745,-975]],[[896,27],[-226,993],[332,198]],[[323,655],[-89,260],[240,-902]],[[501,-763],[-424,793],[813,616]],[[993,375],[-938,-621],[672,-70]],[[-880,-466],[-283,770],[-824,143]],[[63,-283],[886,-142],[879,-116]],[[-964,-50],[-521,-42],[-306,-161]],[[724,-22],[866,-871],[933,-383]],[[-344,135],[282,966],[-80,917]],[[-281,-189],[420,810],[362,-582]],[[-515,455],[-588,814],[162,332]],[[555,-436],[-123,-210],[869,-943]],[[589,577],[232,286],[-554,876]],[[-773,127],[-58,-171],[-452,125]],[[-428,575],[906,-232],[-10,-224]],[[437,276],[-335,-348],[605,878]],[[-964,511],[-386,-407],[168,-220]],[[307,513],[912,-463],[-423,-416]],[[-445,539],[273,886],[-18,760]],[[-396,-585],[-670,414],[47,364]],[[143,-506],[754,906],[-971,-203]],[[-544,472],[-180,-541],[869,-465]],[[-779,-15],[-396,890],[972,-220]],[[-430,-564],[503,182],[-119,456]],[[89,-10],[-739,399],[506,499]],[[954,162],[-810,-973],[127,870]],[[890,952],[-225,158],[828,237]],[[-868,952],[349,465],[574,750]],[[-915,369],[-975,-596],[-395,-134]],[[-135,-601],[575,582],[-667,640]],[[413,890],[-560,-276],[-555,-562]],[[-633,-269],[561,-820],[-624,499]],[[371,-92],[-784,-593],[864,-717]],[[-971,655],[-439,367],[754,-951]],[[172,-347],[36,279],[-247,-402]],[[633,-301],[364,-349],[-683,-387]],[[-780,-211],[-713,-948],[-648,543]],[[72,58],[762,-465],[-66,462]],[[78,502],[781,-832],[713,836]],[[-431,-64],[-484,-392],[208,-343]],[[-64,101],[-29,-860],[-329,844]],[[398,391],[828,-858],[700,395]],[[578,-896],[-326,-604],[314,180]],[[97,-321],[-695,185],[-357,852]],[[854,839],[283,-375],[951,-209]],[[194,96],[-564,-847],[162,524]],[[-354,532],[494,621],[580,560]],[[419,-678],[-450,926],[-5,-924]],[[-661,905],[519,621],[-143,394]],[[-573,268],[296,-562],[-291,-319]],[[-211,266],[-196,158],[564,-183]],[[18,-585],[-398,777],[-581,864]],[[790,-894],[-745,-604],[-418,70]],[[848,-339],[150,773],[11,851]],[[-954,-809],[-53,-20],[-648,-304]],[[658,-336],[-658,-905],[853,407]],[[-365,-844],[350,-625],[852,-358]],[[986,-315],[-230,-159],[21,180]],[[-15,599],[45,-286],[-941,847]],[[-613,-68],[184,639],[-987,550]],[[334,675],[-56,-861],[923,340]],[[-848,-596],[960,231],[-28,-34]],[[707,-811],[-994,-356],[-167,-171]],[[-470,-764],[72,576],[-600,-204]],[[379,189],[-542,-576],[585,800]],[[440,540],[-445,-563],[379,-334]],[[-155,64],[514,-288],[853,106]],[[-304,751],[481,-520],[-708,-694]],[[-709,132],[594,126],[-844,63]],[[723,471],[421,-138],[-962,892]],[[-440,-263],[39,513],[-672,-954]],[[775,809],[-581,330],[752,-107]],[[-376,-158],[335,-708],[-514,578]],[[-343,-769],[456,-187],[25,413]],[[548,-877],[-172,300],[-500,928]],[[938,-102],[423,-488],[-378,-969]],[[-36,564],[-55,131],[958,-800]],[[-322,511],[-413,503],[700,-847]],[[-966,547],[-88,-17],[-359,-67]],[[637,-341],[-437,-181],[527,-153]],[[-74,449],[-28,3],[485,189]],[[-997,658],[-224,-948],[702,-807]],[[-224,736],[-896,127],[-945,-850]],[[-395,-106],[439,-553],[-128,124]],[[-841,-445],[-758,-572],[-489,212]],[[633,-327],[13,-512],[952,771]],[[-940,-171],[-6,-46],[-923,-425]],[[-142,-442],[-817,-998],[843,-695]],[[340,847],[-137,-920],[-988,-658]],[[-653,217],[-679,-257],[651,-719]],[[-294,365],[-41,342],[74,-892]],[[690,-236],[-541,494],[408,-516]],[[180,-807],[225,790],[494,59]],[[707,605],[-246,656],[284,271]],[[65,294],[152,824],[442,-442]],[[-321,781],[-540,341],[316,415]],[[420,371],[-2,545],[995,248]],[[56,-191],[-604,971],[615,449]],[[-981,-31],[510,592],[-390,-362]],[[-317,-968],[913,365],[97,508]],[[832,63],[-864,-510],[86,202]],[[-483,456],[-636,340],[-310,676]],[[981,-847],[751,-508],[-962,-31]],[[-157,99],[73,797],[63,-172]],[[220,858],[872,924],[866,-381]],[[996,-169],[805,321],[-164,971]],[[896,11],[-625,-973],[-782,76]],[[578,-280],[730,-729],[307,-905]],[[-580,-749],[719,-698],[967,603]],[[-821,874],[-103,-623],[662,-491]],[[-763,117],[661,-644],[672,-607]],[[592,787],[-798,-169],[-298,690]],[[296,644],[-526,-762],[-447,665]],[[534,-818],[852,-120],[57,-379]],[[-986,-549],[-329,294],[954,258]],[[-133,352],[-660,-77],[904,-356]],[[748,343],[215,500],[317,-277]],[[311,7],[910,-896],[-809,795]],[[763,-602],[-753,313],[-352,917]],[[668,619],[-474,-597],[-650,650]],[[-297,563],[-701,-987],[486,-902]],[[-461,-740],[-657,233],[-482,-328]],[[-446,-250],[-986,-458],[-629,520]],[[542,-49],[-327,-469],[257,-947]],[[121,-575],[-634,-143],[-184,521]],[[30,504],[455,-645],[-229,-945]],[[-12,-295],[377,764],[771,125]],[[-686,-133],[225,-25],[-376,-143]],[[-6,-46],[338,270],[-405,-872]],[[-623,-37],[582,467],[963,898]],[[-804,869],[-477,420],[-475,-303]],[[94,41],[-842,-193],[-768,720]],[[-656,-918],[415,645],[-357,460]],[[-47,-486],[-911,468],[-608,-686]],[[-158,251],[419,-394],[-655,-895]],[[272,-695],[979,508],[-358,959]],[[-776,650],[-918,-467],[-690,-534]],[[-85,-309],[-626,167],[-366,-429]],[[-880,-732],[-186,-924],[970,-875]],[[517,645],[-274,962],[-804,544]],[[721,402],[104,640],[478,-499]],[[198,684],[-134,-723],[-452,-905]],[[-245,745],[239,238],[-826,441]],[[-217,206],[-32,462],[-981,-895]],[[-51,989],[526,-173],[560,-676]],[[-480,-659],[-976,-580],[-727,466]],[[-996,-90],[-995,158],[-239,642]],[[302,288],[-194,-294],[17,924]],[[-943,969],[-326,114],[-500,103]],[[-619,163],[339,-880],[230,421]],[[-344,-601],[-795,557],[565,-779]],[[590,345],[-129,-202],[-125,-58]],[[-777,-195],[159,674],[775,411]],[[-939,312],[-665,810],[121,855]],[[-971,254],[712,815],[452,581]],[[442,-9],[327,-750],[61,757]],[[-342,869],[869,-160],[390,-772]],[[620,601],[565,-169],[-69,-183]],[[-25,924],[-817,964],[321,-970]],[[-64,-6],[-133,978],[825,-379]],[[601,436],[-24,98],[-115,940]],[[-97,502],[614,-574],[922,513]],[[-125,262],[-946,695],[99,-220]],[[429,-721],[719,-694],[197,-558]],[[326,689],[-70,-908],[-673,338]],[[-468,-856],[-902,-254],[-358,305]],[[-358,530],[542,355],[-253,-47]],[[-438,-74],[-362,963],[988,788]],[[137,717],[467,622],[319,-380]],[[-86,310],[-336,851],[918,-288]],[[721,395],[646,-53],[255,-425]],[[255,175],[912,84],[-209,878]],[[-632,-485],[-400,-357],[991,-608]],[[235,-559],[992,-297],[857,-591]],[[87,-71],[148,130],[647,578]],[[-290,-584],[-639,-788],[-21,592]],[[386,984],[625,-731],[-993,-336]],[[-538,634],[-209,-828],[-150,-774]],[[-754,-387],[607,-781],[976,-199]],[[412,-798],[-664,295],[709,-537]],[[-412,932],[-880,-232],[561,852]],[[-656,-358],[-198,-964],[-433,-848]],[[-762,-668],[-632,186],[-673,-11]],[[-876,237],[-282,-312],[-83,682]],[[403,73],[-57,-436],[-622,781]],[[-587,873],[798,976],[-39,329]],[[-369,-622],[553,-341],[817,794]],[[-108,-616],[920,-849],[-679,96]],[[290,-974],[234,239],[-284,-321]],[[-22,394],[-417,-419],[264,58]],[[-473,-551],[69,923],[591,-228]],[[-956,662],[-113,851],[-581,-794]],[[-258,-681],[413,-471],[-637,-817]],[[-866,926],[992,-653],[-7,794]],[[556,-350],[602,917],[831,-610]],[[188,245],[-906,361],[492,174]],[[-720,384],[-818,329],[638,-666]],[[-246,846],[890,-325],[-59,-850]],[[-118,-509],[620,-762],[-256,15]],[[-787,-536],[-452,-338],[-399,813]],[[458,560],[525,-311],[-608,-419]],[[494,-811],[-825,-127],[-812,894]],[[-801,890],[-629,-860],[574,925]],[[-709,-193],[-213,138],[-410,-403]],[[861,91],[708,-187],[5,-222]],[[789,646],[777,154],[90,-49]],[[-267,-830],[-114,531],[591,-698]],[[-126,-82],[881,-418],[82,652]],[[-894,130],[-726,-935],[393,-815]],[[-142,563],[654,638],[-712,-597]],[[-759,60],[-23,977],[100,-765]],[[-305,595],[-570,-809],[482,762]],[[-161,-267],[53,963],[998,-529]],[[-300,-57],[798,353],[703,486]],[[-990,696],[-764,699],[-565,719]],[[-232,-205],[566,571],[977,369]],[[740,865],[151,-817],[-204,-293]],[[94,445],[-768,229],[537,-406]],[[861,620],[37,-424],[-36,656]],[[390,-369],[952,733],[-464,569]],[[-482,-604],[959,554],[-705,-626]],[[-396,-615],[-991,108],[272,-723]],[[143,780],[535,142],[-917,-147]],[[138,-629],[-217,-908],[905,115]],[[915,103],[-852,64],[-468,-642]],[[570,734],[-785,-268],[-326,-759]],[[738,531],[-332,586],[-779,24]],[[870,440],[-217,473],[-383,415]],[[-296,-333],[-330,-142],[-924,950]],[[118,120],[-35,-245],[-211,-652]],[[61,634],[153,-243],[838,789]],[[726,-582],[210,105],[983,537]],[[-313,-323],[758,234],[29,848]],[[-847,-172],[-593,733],[-56,617]],[[54,255],[-512,156],[-575,675]],[[-873,-956],[-148,623],[95,200]],[[700,-370],[926,649],[-978,157]],[[-639,-202],[719,130],[747,222]],[[194,-33],[955,943],[505,114]],[[-226,-790],[28,-930],[827,783]],[[-392,-74],[-28,714],[218,-612]],[[209,626],[-888,-683],[-912,495]],[[487,751],[614,933],[631,445]],[[-348,-34],[-411,-106],[835,321]],[[-689,872],[-29,-800],[312,-542]],[[-52,566],[827,570],[-862,-77]],[[471,992],[309,-402],[389,912]],[[24,520],[-83,-51],[555,503]],[[-265,-317],[283,-970],[-472,690]],[[606,526],[137,71],[-651,150]],[[217,-518],[663,66],[-605,-331]],[[-562,232],[-76,-503],[205,-323]],[[842,-521],[546,285],[625,-186]],[[997,-927],[344,909],[-546,974]],[[-677,419],[81,121],[-705,771]],[[719,-379],[-944,-797],[784,-155]],[[-378,286],[-317,-797],[-111,964]],[[-288,-573],[784,80],[-532,-646]],[[-77,407],[-248,-797],[769,-816]],[[-24,-637],[287,-858],[-927,-333]],[[-902,37],[894,-823],[141,684]],[[125,467],[-177,-516],[686,399]],[[-321,-542],[641,-590],[527,-224]],[[-400,-712],[-876,-208],[632,-543]],[[-676,-429],[664,-242],[-269,922]],[[-608,-273],[-141,930],[687,380]],[[786,-12],[498,494],[310,326]],[[-739,-617],[606,-960],[804,188]],[[384,-368],[-243,-350],[-459,31]],[[-550,397],[320,-868],[328,-279]],[[969,-179],[853,864],[-110,514]],[[910,793],[302,-822],[-285,488]],[[-605,-128],[218,-283],[-17,-227]],[[16,324],[667,708],[750,3]],[[485,-813],[19,585],[71,930]],[[-218,816],[-687,-97],[-732,-360]],[[-497,-151],[376,-23],[3,315]],[[-412,-989],[-610,-813],[372,964]],[[-878,-280],[87,381],[-311,69]],[[-609,-90],[-731,-679],[150,585]],[[889,27],[-162,605],[75,-770]],[[448,617],[-988,0],[-103,-504]],[[-800,-537],[-69,627],[608,-668]],[[534,686],[-664,942],[830,920]],[[-238,775],[495,932],[-793,497]],[[-343,958],[-914,-514],[-691,651]],[[568,-136],[208,359],[728,28]],[[286,912],[-794,683],[556,-102]],[[-638,-629],[-484,445],[-64,-497]],[[58,505],[-801,-110],[872,632]],[[-390,777],[353,267],[976,369]],[[-993,515],[105,-133],[358,-572]],[[964,996],[355,-212],[-667,38]],[[-725,-614],[-35,365],[132,-196]],[[237,-536],[-416,-302],[312,477]],[[-664,574],[-210,224],[48,-925]],[[869,-261],[-256,-240],[-3,-698]],[[712,385],[32,-34],[916,-315]],[[895,-409],[-100,-346],[728,-624]],[[-806,327],[-450,889],[-781,-939]],[[-586,-403],[698,318],[-939,899]],[[557,-57],[-920,659],[333,-51]],[[-441,232],[-918,-205],[246,1]],[[783,167],[-797,-595],[245,-736]],[[-36,-531],[-486,-426],[-813,-160]],[[777,-843],[817,313],[-228,-572]],[[735,866],[-309,-564],[-81,190]],[[-413,645],[101,719],[-719,218]],[[-83,164],[767,796],[-430,-459]],[[122,779],[-15,-295],[-96,-892]],[[462,379],[70,548],[834,-312]],[[-630,-534],[124,187],[-737,114]],[[-299,-604],[318,-591],[936,826]],[[-879,218],[-642,-483],[-318,-866]],[[-691,62],[-658,761],[-895,-854]],[[-822,493],[687,569],[910,-202]],[[-223,784],[304,-5],[541,925]],[[-914,541],[737,-662],[-662,-195]],[[-622,615],[414,358],[881,-878]],[[339,745],[-268,-968],[-280,-227]],[[-364,855],[148,-709],[-827,472]],[[-890,-532],[-41,664],[-612,577]],[[-702,-859],[971,-722],[-660,-920]],[[-539,-605],[737,149],[973,-802]],[[800,42],[-448,-811],[152,511]],[[-933,377],[-110,-105],[-374,-937]],[[-766,152],[482,120],[-308,390]],[[-568,775],[-292,899],[732,890]],[[-177,-317],[-502,-259],[328,-511]],[[612,-696],[-574,-660],[132,31]],[[-119,563],[-805,-864],[179,-672]],[[425,-627],[183,-331],[839,318]],[[-711,-976],[-749,152],[-916,261]],[[181,-63],[497,211],[262,406]],[[-537,700],[-859,-765],[-928,77]],[[892,832],[231,-749],[-82,613]],[[816,216],[-642,-216],[-669,-912]],[[-6,624],[-937,-370],[-344,268]],[[737,-710],[-869,983],[-324,-274]],[[565,952],[-547,-158],[374,-444]],[[51,-683],[645,-845],[515,636]],[[-953,-631],[114,-377],[-764,-144]],[[-8,470],[-242,-399],[-675,-730]],[[-540,689],[-20,47],[-607,590]],[[-329,-710],[-779,942],[-388,979]],[[123,829],[674,122],[203,563]],[[46,782],[396,-33],[386,610]],[[872,-846],[-523,-122],[-55,-190]],[[388,-994],[-525,974],[127,596]],[[781,-680],[796,-34],[-959,-62]],[[-749,173],[200,-384],[-745,-446]],[[379,618],[136,-250],[-224,970]],[[-58,240],[-921,-760],[-901,-626]],[[366,-185],[565,-100],[515,688]],[[489,999],[-893,-263],[-637,816]],[[838,-496],[-316,-513],[419,479]],[[107,676],[-15,882],[98,-397]],[[-999,941],[-903,-424],[670,-325]],[[171,-979],[835,178],[169,-984]],[[-609,-607],[378,-681],[184,402]],[[-316,903],[-575,-800],[224,983]],[[591,-18],[-460,551],[-167,918]],[[-756,405],[-117,441],[163,-320]],[[456,24],[6,881],[-836,-539]],[[-489,-585],[915,651],[-892,-382]],[[-177,-122],[73,-711],[-386,591]],[[181,724],[530,686],[-131,241]],[[737,288],[886,216],[233,33]],[[-548,-386],[-749,-153],[-85,-982]],[[-835,227],[904,160],[-99,25]],[[-9,-42],[-162,728],[840,-963]],[[217,-763],[870,771],[47,-846]],[[-595,808],[-491,556],[337,-900]],[[-134,281],[-724,441],[-134,708]],[[-789,-508],[651,-962],[661,315]],[[-839,-923],[339,402],[41,-487]],[[300,-790],[48,703],[-398,-811]],[[955,-51],[462,-685],[960,-717]],[[910,-880],[592,-255],[-51,-776]],[[-885,169],[-793,368],[-565,458]],[[-905,940],[-492,-630],[-535,-988]],[[245,797],[763,869],[-82,550]],[[-310,38],[-933,-367],[-650,824]],[[-95,32],[-83,337],[226,990]],[[-218,-975],[-191,-208],[-785,-293]],[[-672,-953],[517,-901],[-247,465]],[[681,-148],[261,-857],[544,-923]],[[640,341],[446,-618],[195,769]],[[384,398],[-846,365],[671,815]],[[578,576],[-911,907],[762,-859]],[[548,-428],[144,-630],[-759,-146]],[[710,-73],[-700,983],[-97,-889]],[[-46,898],[-973,-362],[-817,-717]],[[151,-81],[-125,-900],[-478,-154]],[[483,615],[-537,-932],[181,-68]],[[786,-223],[518,25],[-306,-12]],[[-422,268],[-809,-683],[635,468]],[[983,-734],[-694,-608],[-110,4]],[[-786,-196],[749,-354],[137,-8]],[[-181,36],[668,-200],[691,-973]],[[-629,-838],[692,-736],[437,-871]],[[-208,-536],[-159,-596],[8,197]],[[-3,370],[-686,170],[913,-376]],[[44,-998],[-149,-993],[-200,512]],[[-519,136],[859,497],[536,434]],[[77,-985],[972,-340],[-705,-837]],[[-381,947],[250,360],[344,322]],[[-26,131],[699,750],[707,384]],[[-914,655],[299,193],[406,955]],[[-883,-921],[220,595],[-546,794]],[[-599,577],[-569,-404],[-704,489]],[[-594,-963],[-624,-460],[880,-760]],[[-603,88],[-99,681],[55,-328]],[[976,472],[139,-453],[-531,-860]],[[192,-290],[513,-89],[666,432]],[[417,487],[575,293],[567,-668]],[[655,711],[-162,449],[-980,972]],[[-505,664],[-685,-239],[603,-592]],[[-625,-802],[-67,996],[384,-636]],[[365,-593],[522,-666],[-200,-431]],[[-868,708],[560,-860],[-630,-355]],[[-702,785],[-637,-611],[-597,960]],[[-137,-696],[-93,-803],[408,406]],[[891,-123],[-26,-609],[-610,518]],[[133,-832],[-198,555],[708,-110]],[[791,617],[-69,487],[696,315]],[[-900,694],[-565,517],[-269,-416]],[[914,135],[-781,600],[-71,-600]],[[991,-915],[-422,-351],[-837,313]],[[-840,-398],[-302,21],[590,146]],[[62,-558],[-702,-384],[-625,831]],[[-363,-426],[-924,-496],[792,-908]],[[73,361],[-817,-466],[400,922]],[[-626,-164],[-626,860],[-524,286]],[[255,26],[-944,809],[-606,986]],[[-457,-256],[-103,50],[-867,-871]],[[-223,803],[196,480],[612,136]],[[-820,-928],[700,780],[-977,721]],[[717,332],[53,-933],[-128,793]],[[-602,-648],[562,593],[890,702]],[[-469,-875],[-527,911],[-475,-222]],[[110,-281],[-552,-536],[-816,596]],[[-981,654],[413,-981],[-75,-95]],[[-754,-742],[-515,894],[-220,-344]],[[795,-52],[156,408],[-603,76]],[[474,-157],[423,-499],[-807,-791]],[[260,688],[40,-52],[702,-122]],[[-584,-517],[-390,-881],[302,-504]],[[61,797],[665,708],[14,668]],[[366,166],[458,-614],[564,-983]],[[72,539],[-378,796],[381,-824]],[[-485,201],[-588,842],[736,379]],[[-149,-894],[-298,705],[-303,-406]],[[660,-935],[-580,521],[93,633]],[[-382,-282],[-375,-841],[-828,171]],[[-567,743],[-100,43],[144,122]],[[-281,-786],[-749,-551],[296,304]],[[11,-426],[-792,212],[857,-175]],[[594,143],[-699,289],[315,137]],[[341,596],[-390,107],[-631,-804]],[[-751,-636],[-424,-854],[193,651]],[[-145,384],[749,675],[-786,517]],[[224,-865],[-323,96],[-916,258]],[[-309,403],[-388,826],[35,-270]],[[-942,709],[222,158],[-699,-103]],[[-589,842],[-997,29],[-195,-210]],[[264,426],[566,145],[-217,623]],[[217,965],[507,-601],[-453,507]],[[-206,307],[-982,4],[64,-292]],[[676,-49],[-38,-701],[550,883]],[[5,-850],[-438,659],[745,-773]],[[933,238],[-574,-570],[91,-33]],[[-866,121],[-928,358],[459,-843]],[[-568,-631],[-352,-580],[-349,189]],[[-737,849],[-963,-486],[-662,970]],[[135,334],[-967,-71],[-365,-792]],[[789,21],[-227,51],[990,-275]],[[240,412],[-886,230],[591,256]],[[-609,472],[-853,-754],[959,661]],[[401,521],[521,314],[929,982]],[[-499,784],[-208,71],[-302,296]],[[-557,-948],[-553,-526],[-864,793]],[[270,-626],[828,44],[37,14]],[[-412,224],[617,-593],[502,699]],[[41,-908],[81,562],[-849,163]],[[165,917],[761,-197],[331,-341]],[[-687,314],[799,755],[-969,648]],[[-164,25],[578,439],[-334,-576]],[[213,535],[874,-177],[-551,24]],[[-689,291],[-795,-225],[-496,-125]],[[465,461],[558,-118],[-568,-909]],[[567,660],[-810,46],[-485,878]],[[-147,606],[685,-690],[-774,984]],[[568,-886],[-43,854],[-738,616]],[[-800,386],[-614,585],[764,-226]],[[-518,23],[-225,-732],[-79,440]],[[-173,-291],[-689,636],[642,-447]],[[-598,-16],[227,410],[496,211]],[[-474,-930],[-656,-321],[-420,36]],[[-435,165],[-819,555],[540,144]],[[-969,149],[828,568],[394,648]],[[65,-848],[257,720],[-625,-851]],[[981,899],[275,635],[465,-877]],[[80,290],[792,760],[-191,-321]],[[-605,-858],[594,33],[706,593]],[[585,-472],[318,-35],[354,-927]],[[-365,664],[803,581],[-965,-814]],[[-427,-238],[-480,146],[-55,-606]],[[879,-193],[250,-890],[336,117]],[[-226,-322],[-286,-765],[-836,-218]],[[-913,564],[-667,-698],[937,283]],[[872,-901],[810,-623],[-52,-709]],[[473,171],[717,38],[-429,-644]],[[225,824],[-219,-475],[-180,234]],[[-530,-797],[-948,238],[851,-623]],[[85,975],[-363,529],[598,28]],[[-799,166],[-804,210],[-769,851]],[[-687,-158],[885,736],[-381,-461]],[[447,592],[928,-514],[-515,-661]],[[-399,-777],[-493,80],[-544,-78]],[[-884,631],[171,-825],[-333,551]],[[191,268],[-577,676],[137,-33]],[[212,-853],[709,798],[583,-56]],[[-908,-172],[-540,-84],[-135,-56]],[[303,311],[406,-360],[-240,811]],[[798,-708],[824,59],[234,-57]],[[491,693],[-74,585],[-85,877]],[[509,-65],[-936,329],[-51,722]],[[-122,858],[-52,467],[-77,-609]],[[850,760],[547,-495],[-953,-952]],[[-460,-541],[890,910],[286,724]],[[-914,843],[-579,-983],[-387,-460]],[[989,-171],[-877,-326],[-899,458]],[[846,175],[-915,540],[-1000,-982]],[[-852,-920],[-306,496],[530,-18]],[[338,-991],[160,85],[-455,-661]],[[-186,-311],[-460,-563],[-231,-414]],[[-932,-302],[959,597],[793,748]],[[-366,-402],[-788,-279],[514,53]],[[-940,-956],[447,-956],[211,-285]],[[564,806],[-911,-914],[934,754]],[[575,-858],[-277,15],[409,-714]],[[848,462],[100,-381],[135,242]],[[330,718],[-24,-190],[860,-78]],[[479,458],[941,108],[-866,-653]],[[212,980],[962,-962],[115,841]],[[-827,-474],[-206,881],[323,765]],[[506,-45],[-30,-293],[524,-133]],[[832,-173],[547,-852],[-561,-842]],[[-397,-661],[-708,819],[-545,-228]],[[521,51],[-489,852],[36,-258]],[[227,-164],[189,465],[-987,-882]],[[-73,-997],[641,-995],[449,-615]],[[151,-995],[-638,415],[257,-400]],[[-663,-297],[-748,537],[-734,198]],[[-585,-401],[-81,-782],[-80,-105]],[[99,-21],[238,-365],[-704,-368]],[[45,416],[849,-211],[-371,-1]],[[-404,-443],[795,-406],[36,-933]],[[272,-363],[981,-491],[-380,77]],[[713,-342],[-366,-849],[643,911]],[[-748,671],[-537,813],[961,-200]],[[-194,-909],[703,-662],[-601,188]],[[281,500],[724,286],[267,197]],[[-832,847],[-595,820],[-316,637]],[[520,521],[-54,261],[923,-10]],[[4,-808],[-682,-258],[441,-695]],[[-793,-107],[-969,905],[798,446]],[[-108,-739],[-590,69],[-855,-365]],[[380,-623],[-930,817],[468,713]],[[759,-849],[-236,433],[-723,-931]],[[95,-320],[-686,124],[-69,-329]],[[-655,518],[-210,-523],[284,-866]],[[144,303],[639,70],[-171,269]],[[173,-333],[947,-304],[55,40]],[[274,878],[-482,-888],[-835,375]],[[-982,-854],[-36,-218],[-114,-230]],[[905,-979],[488,-485],[-479,114]],[[877,-157],[553,-530],[-47,-321]],[[350,664],[-881,442],[-220,-284]],[[434,-423],[-365,878],[-726,584]],[[535,909],[-517,-447],[-660,-141]],[[-966,191],[50,353],[182,-642]],[[-785,-634],[123,-907],[-162,511]],[[146,-850],[-214,814],[-704,25]],[[692,1],[521,492],[-637,274]],[[-662,-372],[-313,597],[983,-647]],[[-962,-526],[68,-549],[-819,231]],[[740,-890],[-318,797],[-666,948]],[[-190,-12],[-468,-455],[948,284]],[[16,478],[-506,-888],[628,-154]],[[272,630],[-976,308],[433,3]],[[-169,-391],[-132,189],[302,-388]],[[109,-784],[474,-167],[-265,-31]],[[-177,-532],[283,464],[421,-73]],[[650,635],[592,-138],[1,-387]],[[-932,703],[-827,-492],[-355,686]],[[586,-311],[340,-618],[645,-434]],[[-951,736],[647,-127],[-303,590]],[[188,444],[903,718],[-931,500]],[[-872,-642],[-296,-571],[337,241]],[[23,65],[152,125],[880,470]],[[512,823],[-42,217],[823,-263]],[[180,-831],[-380,886],[607,762]],[[722,443],[-149,-216],[-115,759]],[[-19,660],[-36,901],[923,231]],[[562,-322],[-626,-968],[194,-825]],[[204,-920],[938,784],[362,150]],[[-410,-266],[-715,559],[-672,124]],[[-198,446],[-140,454],[-461,-447]],[[83,-346],[830,-493],[-759,-382]],[[-881,601],[581,234],[-134,-925]],[[-494,914],[-42,899],[235,629]],[[-390,50],[956,437],[774,-700]],[[-514,514],[44,-512],[-576,-313]],[[63,-688],[808,-534],[-570,-399]],[[-726,572],[-896,102],[-294,-28]],[[-688,757],[401,406],[955,-511]],[[-283,423],[-485,480],[-767,908]],[[-541,952],[-594,116],[-854,451]],[[-273,-796],[236,625],[-626,257]],[[-407,-493],[373,826],[-309,297]],[[-750,955],[-476,641],[-809,713]],[[8,415],[695,226],[-111,2]],[[733,209],[152,-920],[401,995]],[[921,-103],[-919,66],[871,-947]],[[-907,89],[-869,-214],[851,-559]],[[-307,748],[524,-755],[314,-711]],[[188,897],[-72,-763],[482,103]],[[545,-821],[-232,-596],[-334,-754]],[[-217,-788],[-820,388],[-200,-662]],[[779,160],[-723,-975],[-142,-998]],[[-978,-519],[-78,-981],[842,904]],[[-504,-736],[-295,21],[-472,-482]],[[391,115],[-705,574],[652,-446]],[[813,-988],[865,830],[-263,487]],[[194,80],[774,-493],[-761,-872]],[[-415,-284],[-803,7],[-810,670]],[[-484,-4],[881,-872],[55,-852]],[[-379,822],[-266,324],[-48,748]],[[-304,-278],[406,-60],[959,-89]],[[404,756],[577,-643],[-332,658]],[[291,460],[125,491],[-312,83]],[[311,-734],[-141,582],[282,-557]],[[-450,-661],[-981,710],[-177,794]],[[328,264],[-787,971],[-743,-407]],[[-622,518],[993,-241],[-738,229]],[[273,-826],[-254,-917],[-710,-111]],[[809,770],[96,368],[-818,725]],[[-488,773],[502,-342],[534,745]],[[-28,-414],[236,-315],[-484,363]],[[179,-466],[-566,713],[-683,56]],[[560,-240],[-597,619],[916,-940]],[[893,473],[872,-868],[-642,-461]],[[799,489],[383,-321],[-776,-833]],[[980,490],[-508,764],[-512,-426]],[[917,961],[-16,-675],[440,559]],[[-812,212],[784,-987],[-132,554]],[[-886,454],[747,806],[190,231]],[[910,341],[21,-66],[708,725]],[[29,929],[-831,-494],[-303,389]],[[-103,492],[-271,-174],[-515,529]],[[-292,119],[419,788],[247,-951]],[[483,543],[-347,-673],[664,-549]],[[-926,-871],[-437,337],[162,-877]],[[299,472],[-771,5],[-88,-643]],[[-103,525],[-725,-998],[264,22]],[[-505,708],[550,-545],[823,347]],[[-738,931],[59,147],[-156,-259]],[[456,968],[-162,889],[132,-911]],[[535,120],[968,-517],[-864,-541]],[[24,-395],[-593,-766],[-565,-332]],[[834,611],[825,-576],[280,629]],[[211,-548],[140,-278],[-592,929]],[[-999,-240],[-63,-78],[793,573]],[[-573,160],[450,987],[529,322]],[[63,353],[315,-187],[-461,577]],[[189,-950],[-247,656],[289,241]],[[209,-297],[397,664],[-805,484]],[[-655,452],[435,-556],[917,874]],[[253,-756],[262,-888],[-778,-214]],[[793,-451],[323,-251],[-401,-458]],[[-396,619],[-651,-287],[-668,-781]],[[698,720],[-349,742],[-807,546]],[[738,280],[680,279],[-540,858]],[[-789,387],[530,-36],[-551,-491]],[[162,579],[-427,-272],[228,710]],[[689,356],[917,-580],[729,217]],[[-115,-638],[866,424],[-82,-194]],[[411,-338],[-917,172],[227,-29]],[[-612,63],[630,-976],[-64,-204]],[[-200,911],[583,-571],[682,-579]],[[91,298],[396,-183],[788,-955]],[[141,-873],[-277,149],[-396,916]],[[321,958],[-136,573],[541,-777]],[[797,-909],[-469,-877],[988,-653]],[[784,-198],[129,883],[-203,399]],[[-68,-810],[223,-423],[-467,-512]],[[531,-445],[-603,-997],[-841,641]],[[-274,-242],[174,261],[-636,-158]],[[-574,494],[-796,-798],[-798,99]],[[95,-82],[-613,-954],[-753,986]],[[-883,-448],[-864,-401],[938,-392]],[[913,930],[-542,-988],[310,410]],[[506,-99],[43,512],[790,-222]],[[724,31],[49,-950],[260,-134]],[[-287,-947],[-234,-700],[56,588]],[[-33,782],[-144,948],[105,-791]],[[548,-546],[-652,-293],[881,-520]],[[691,-91],[76,991],[-631,742]],[[-520,-429],[-244,-296],[724,-48]],[[778,646],[377,50],[-188,56]],[[-895,-507],[-898,-165],[-674,652]],[[654,584],[-634,177],[-349,-620]],[[114,-980],[355,62],[182,975]],[[516,9],[-442,-298],[274,-579]],[[-238,262],[-431,-896],[506,-850]],[[47,748],[846,821],[-537,-293]],[[839,726],[593,285],[-297,840]],[[634,-486],[468,-304],[-887,-567]],[[-864,914],[296,-124],[335,233]],[[88,-253],[-523,-956],[-554,803]],[[-587,417],[281,-62],[-409,-363]],[[-136,-39],[-292,-768],[-264,876]],[[-127,506],[-891,-331],[-744,-430]],[[778,584],[-750,-129],[-479,-94]],[[-876,-771],[-987,-757],[180,-641]],[[-777,-694],[411,-87],[329,190]],[[-347,-999],[-882,158],[-754,232]],[[-105,918],[188,237],[-110,-591]],[[-209,703],[-838,77],[838,909]],[[-995,-339],[-762,750],[860,472]],[[185,271],[-289,173],[811,-300]],[[2,65],[-656,-22],[36,-139]],[[765,-210],[883,974],[961,-905]],[[-212,295],[-615,-840],[77,474]],[[211,-910],[-440,703],[-11,859]],[[-559,-4],[-196,841],[-277,969]],[[-73,-159],[-887,126],[978,-371]],[[-569,633],[-423,-33],[512,-393]],[[503,143],[-383,-109],[-649,-998]],[[-663,339],[-317,-523],[-2,596]],[[690,-380],[570,378],[-652,132]],[[72,-744],[-930,399],[-525,935]],[[865,-983],[115,37],[995,826]],[[594,-621],[-872,443],[188,-241]],[[-1000,291],[754,234],[-435,-869]],[[-868,901],[654,-907],[59,181]],[[-868,-793],[-431,596],[-446,-564]],[[900,-944],[-680,-796],[902,-366]],[[331,430],[943,853],[-851,-942]],[[315,-538],[-354,-909],[139,721]],[[170,-884],[-225,-818],[-808,-657]],[[-279,-34],[-533,-871],[-972,552]],[[691,-986],[-800,-950],[654,-747]],[[603,988],[899,841],[-630,591]],[[876,-949],[809,562],[602,-536]],[[-693,363],[-189,495],[738,-1000]],[[-383,431],[-633,297],[665,959]],[[-740,686],[-207,-803],[188,-520]],[[-820,226],[31,-339],[10,121]],[[-312,-844],[624,-516],[483,621]],[[-822,-529],[69,-278],[800,328]],[[834,-82],[-759,420],[811,-264]],[[-960,-240],[-921,561],[173,46]],[[-324,909],[-790,-814],[-2,-785]],[[976,334],[-290,-891],[704,-581]],[[150,-798],[689,-823],[237,-639]],[[-551,-320],[876,-502],[-622,-628]],[[-136,845],[904,595],[-702,-261]],[[-857,-377],[-522,-101],[-943,-805]],[[-682,-787],[-888,-459],[-752,-985]],[[-571,-81],[623,-133],[447,643]],[[-375,-158],[72,-387],[-324,-696]],[[-660,-650],[340,188],[569,526]],[[727,-218],[16,-7],[-595,-988]],[[-966,-684],[802,-783],[-272,-194]],[[115,-566],[-888,47],[712,180]],[[-237,-69],[45,-272],[981,-812]],[[48,897],[439,417],[50,325]],[[348,616],[180,254],[104,-784]],[[-730,811],[-548,612],[-736,790]],[[138,-810],[123,930],[65,865]],[[-768,-299],[-49,-895],[-692,-418]],[[487,-531],[802,-159],[-12,634]],[[808,-179],[552,-73],[470,717]],[[720,-644],[886,-141],[625,144]],[[-485,-505],[-347,-244],[-916,66]],[[600,-565],[995,-5],[324,227]],[[-771,-35],[904,-482],[753,-303]],[[-701,65],[426,-763],[-504,-479]],[[409,733],[-823,475],[64,718]],[[865,975],[368,893],[-413,-433]],[[812,-597],[-970,819],[813,624]],[[193,-642],[-381,-560],[545,398]],[[711,28],[-316,771],[717,-865]],[[-509,462],[809,-136],[786,635]],[[618,-49],[484,169],[635,547]],[[-747,685],[-882,-496],[-332,82]],[[-501,-851],[870,563],[290,570]],[[-279,-829],[-509,397],[457,816]],[[-508,80],[850,-188],[483,-326]],[[860,-100],[360,119],[-205,787]],[[-870,21],[-39,-827],[-185,932]],[[826,284],[-136,-866],[-330,-97]],[[-944,-82],[745,899],[-97,365]],[[929,262],[564,632],[-115,632]],[[244,-276],[713,330],[-897,-214]],[[-890,-109],[664,876],[-974,-907]],[[716,249],[816,489],[723,141]],[[-96,-560],[-272,45],[-70,645]],[[762,-503],[414,-828],[-254,-646]],[[909,-13],[903,-422],[-344,-10]],[[658,-486],[743,545],[50,674]],[[-241,507],[-367,18],[-48,-241]],[[886,-268],[884,-762],[120,-486]],[[-412,-528],[879,-647],[223,-393]],[[851,810],[234,937],[-726,797]],[[-999,942],[839,-134],[-996,-189]],[[100,979],[-527,-521],[378,800]],[[544,-844],[-832,-530],[-77,-641]],[[43,889],[31,442],[-934,-503]],[[-330,-370],[-309,-439],[173,547]],[[169,945],[62,-753],[-542,-597]],[[208,751],[-372,-647],[-520,70]],[[765,-840],[907,-257],[379,918]],[[334,-135],[-689,730],[-427,618]],[[137,-508],[66,-695],[78,169]],[[-962,-123],[400,-417],[151,969]],[[328,689],[666,427],[-555,-642]],[[-907,343],[605,-341],[-647,582]],[[-667,-363],[-571,818],[-265,-399]],[[525,-938],[904,898],[725,692]],[[-176,-802],[-858,-9],[780,275]],[[580,170],[-740,287],[691,-97]],[[365,557],[-375,361],[-288,859]],[[193,737],[842,-808],[520,282]],[[-871,65],[-799,836],[179,-720]],[[958,-144],[744,-789],[797,-48]],[[122,582],[662,912],[68,757]],[[595,241],[-801,513],[388,186]],[[-103,-677],[-259,-731],[-281,-857]],[[921,319],[-696,683],[-88,-997]],[[775,200],[78,858],[648,768]],[[316,821],[-763,68],[-290,-741]],[[564,664],[691,504],[760,787]],[[694,-119],[973,-385],[309,-760]],[[777,-947],[-57,990],[74,19]],[[971,626],[-496,-781],[-602,-239]],[[-651,433],[11,-339],[939,294]],[[-965,-728],[560,569],[-708,-247]]\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3d61000cf542c50fee7",
      "title": "Problem 103: Special subset sums: optimum",
      "challengeType": 1,
      "dashedName": "problem-103-special-subset-sums-optimum",
      "description": "Let $S(A)$ represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:\n\n1. $S(B) ≠ S(C)$; that is, sums of subsets cannot be equal.\n2. If B contains more elements than C then $S(B) > S(C)$.\n\nIf $S(A)$ is minimised for a given n, we shall call it an optimum special sum set. The first five optimum special sum sets are given below.\n\n$$\\begin{align}\n  & n = 1: \\\\{1\\\\} \\\\\\\\\n  & n = 2: \\\\{1, 2\\\\} \\\\\\\\\n  & n = 3: \\\\{2, 3, 4\\\\} \\\\\\\\\n  & n = 4: \\\\{3, 5, 6, 7\\\\} \\\\\\\\\n  & n = 5: \\\\{6, 9, 11, 12, 13\\\\} \\\\\\\\\n\\end{align}$$\n\nIt seems that for a given optimum set, $A = \\\\{a_1, a_2, \\ldots, a_n\\\\}$, the next optimum set is of the form $B = \\\\{b, a_1 + b, a_2 + b, \\ldots, a_n + b\\\\}$, where b is the \"middle\" element on the previous row.\n\nBy applying this \"rule\" we would expect the optimum set for $n = 6$ to be $A = \\\\{11, 17, 20, 22, 23, 24\\\\}$, with $S(A) = 117$. However, this is not the optimum set, as we have merely applied an algorithm to provide a near optimum set. The optimum set for $n = 6$ is $A = \\\\{11, 18, 19, 20, 22, 25\\\\}$, with $S(A) = 115$ and corresponding set string: `111819202225`.\n\nGiven that A is an optimum special sum set for $n = 7$, find its set string.\n\n**Note:** This problem is related to Problem 105 and Problem 106.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function optimumSpecialSumSet() {\n\n  return true;\n}\n\noptimumSpecialSumSet();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`optimumSpecialSumSet()` should return the string `20313839404245`.",
          "testCode": "assert.strictEqual(optimumSpecialSumSet(), '20313839404245');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301727,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-103-special-subset-sums-optimum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3d51000cf542c50fee6",
      "title": "Problem 104: Pandigital Fibonacci ends",
      "challengeType": 1,
      "dashedName": "problem-104-pandigital-fibonacci-ends",
      "description": "The Fibonacci sequence is defined by the recurrence relation:\n\n$F_n = F_{n − 1} + F_{n − 2}$, where $F_1 = 1$ and $F_2 = 1$\n\nIt turns out that $F_{541}$, which contains 113 digits, is the first Fibonacci number for which the last nine digits are 1 - 9 pandigital (contain all the digits 1 to 9, but not necessarily in order). And $F_{2749}$, which contains 575 digits, is the first Fibonacci number for which the first nine digits are 1 - 9 pandigital.\n\nGiven that $F_k$ is the first Fibonacci number for which the first nine digits AND the last nine digits are 1 - 9 pandigital, find `k`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pandigitalFibonacciEnds() {\n\n  return true;\n}\n\npandigitalFibonacciEnds();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pandigitalFibonacciEnds()` should return `329468`.",
          "testCode": "assert.strictEqual(pandigitalFibonacciEnds(), 329468);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301728,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-104-pandigital-fibonacci-ends.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3d61000cf542c50fee8",
      "title": "Problem 105: Special subset sums: testing",
      "challengeType": 1,
      "dashedName": "problem-105-special-subset-sums-testing",
      "description": "Let $S(A)$ represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:\n\n1. $S(B) ≠ S(C)$; that is, sums of subsets cannot be equal.\n2. If B contains more elements than C then $S(B) > S(C)$.\n\nFor example, {81, 88, 75, 42, 87, 84, 86, 65} is not a special sum set because 65 + 87 + 88 = 75 + 81 + 84, whereas {157, 150, 164, 119, 79, 159, 161, 139, 158} satisfies both rules for all possible subset pair combinations and $S(A) = 1286$.\n\nUsing `sets`, an array with one-hundred sets, containing seven to twelve elements (the two examples given above are the first two sets), identify all the special sum sets, $A_1, A_2, \\ldots, A_k$, and find the value of $(A_1) + S(A_2) + \\cdots + S(A_k)$.\n\n**Note:** This problem is related to Problem 103 and Problem 106.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function testingSpecialSubsetSums(sets) {\n\n  return true;\n}\n\nconst testSets = [\n  [81,88,75,42,87,84,86,65],[157,150,164,119,79,159,161,139,158],[673,465,569,603,629,592,584,300,601,599,600],[90,85,83,84,65,87,76,46],[165,168,169,190,162,85,176,167,127],[224,275,278,249,277,279,289,295,139],[354,370,362,384,359,324,360,180,350,270],[599,595,557,298,448,596,577,667,597,588,602],[175,199,137,88,187,173,168,171,174],[93,187,196,144,185,178,186,202,182],[157,155,81,158,119,176,152,167,159],[184,165,159,166,163,167,174,124,83],[1211,1212,1287,605,1208,1189,1060,1216,1243,1200,908,1210],[339,299,153,305,282,304,313,306,302,228],[94,104,63,112,80,84,93,96],[41,88,82,85,61,74,83,81],[90,67,84,83,82,97,86,41],[299,303,151,301,291,302,307,377,333,280],[55,40,48,44,25,42,41],[1038,1188,1255,1184,594,890,1173,1151,1186,1203,1187,1195],[76,132,133,144,135,99,128,154],[77,46,108,81,85,84,93,83],[624,596,391,605,529,610,607,568,604,603,453],[83,167,166,189,163,174,160,165,133],[308,281,389,292,346,303,302,304,300,173],[593,1151,1187,1184,890,1040,1173,1186,1195,1255,1188,1203],[68,46,64,33,60,58,65],[65,43,88,87,86,99,93,90],[83,78,107,48,84,87,96,85],[1188,1173,1256,1038,1187,1151,890,1186,1184,1203,594,1195],[302,324,280,296,294,160,367,298,264,299],[521,760,682,687,646,664,342,698,692,686,672],[56,95,86,97,96,89,108,120],[344,356,262,343,340,382,337,175,361,330],[47,44,42,27,41,40,37],[139,155,161,158,118,166,154,156,78],[118,157,164,158,161,79,139,150,159],[299,292,371,150,300,301,281,303,306,262],[85,77,86,84,44,88,91,67],[88,85,84,44,65,91,76,86],[138,141,127,96,136,154,135,76],[292,308,302,346,300,324,304,305,238,166],[354,342,341,257,348,343,345,321,170,301],[84,178,168,167,131,170,193,166,162],[686,701,706,673,694,687,652,343,683,606,518],[295,293,301,367,296,279,297,263,323,159],[1038,1184,593,890,1188,1173,1187,1186,1195,1150,1203,1255],[343,364,388,402,191,383,382,385,288,374],[1187,1036,1183,591,1184,1175,888,1197,1182,1219,1115,1167],[151,291,307,303,345,238,299,323,301,302],[140,151,143,138,99,69,131,137],[29,44,42,59,41,36,40],[348,329,343,344,338,315,169,359,375,271],[48,39,34,37,50,40,41],[593,445,595,558,662,602,591,297,610,580,594],[686,651,681,342,541,687,691,707,604,675,699],[180,99,189,166,194,188,144,187,199],[321,349,335,343,377,176,265,356,344,332],[1151,1255,1195,1173,1184,1186,1188,1187,1203,593,1038,891],[90,88,100,83,62,113,80,89],[308,303,238,300,151,304,324,293,346,302],[59,38,50,41,42,35,40],[352,366,174,355,344,265,343,310,338,331],[91,89,93,90,117,85,60,106],[146,186,166,175,202,92,184,183,189],[82,67,96,44,80,79,88,76],[54,50,58,66,31,61,64],[343,266,344,172,308,336,364,350,359,333],[88,49,87,82,90,98,86,115],[20,47,49,51,54,48,40],[159,79,177,158,157,152,155,167,118],[1219,1183,1182,1115,1035,1186,591,1197,1167,887,1184,1175],[611,518,693,343,704,667,686,682,677,687,725],[607,599,634,305,677,604,603,580,452,605,591],[682,686,635,675,692,730,687,342,517,658,695],[662,296,573,598,592,584,553,593,595,443,591],[180,185,186,199,187,210,93,177,149],[197,136,179,185,156,182,180,178,99],[271,298,218,279,285,282,280,238,140],[1187,1151,890,593,1194,1188,1184,1173,1038,1186,1255,1203],[169,161,177,192,130,165,84,167,168],[50,42,43,41,66,39,36],[590,669,604,579,448,599,560,299,601,597,598],[174,191,206,179,184,142,177,180,90],[298,299,297,306,164,285,374,269,329,295],[181,172,162,138,170,195,86,169,168],[1184,1197,591,1182,1186,889,1167,1219,1183,1033,1115,1175],[644,695,691,679,667,687,340,681,770,686,517],[606,524,592,576,628,593,591,584,296,444,595],[94,127,154,138,135,74,136,141],[179,168,172,178,177,89,198,186,137],[302,299,291,300,298,149,260,305,280,370],[678,517,670,686,682,768,687,648,342,692,702],[302,290,304,376,333,303,306,298,279,153],[95,102,109,54,96,75,85,97],[150,154,146,78,152,151,162,173,119],[150,143,157,152,184,112,154,151,132],[36,41,54,40,25,44,42],[37,48,34,59,39,41,40],[681,603,638,611,584,303,454,607,606,605,596]\n];\n\ntestingSpecialSubsetSums(testSets);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`testingSpecialSubsetSums(testSets)` should return `73702`.",
          "testCode": "assert.strictEqual(testingSpecialSubsetSums(_testSets), 73702);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301729,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-105-special-subset-sums-testing.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testSets = [\n  [81,88,75,42,87,84,86,65],[157,150,164,119,79,159,161,139,158],[673,465,569,603,629,592,584,300,601,599,600],[90,85,83,84,65,87,76,46],[165,168,169,190,162,85,176,167,127],[224,275,278,249,277,279,289,295,139],[354,370,362,384,359,324,360,180,350,270],[599,595,557,298,448,596,577,667,597,588,602],[175,199,137,88,187,173,168,171,174],[93,187,196,144,185,178,186,202,182],[157,155,81,158,119,176,152,167,159],[184,165,159,166,163,167,174,124,83],[1211,1212,1287,605,1208,1189,1060,1216,1243,1200,908,1210],[339,299,153,305,282,304,313,306,302,228],[94,104,63,112,80,84,93,96],[41,88,82,85,61,74,83,81],[90,67,84,83,82,97,86,41],[299,303,151,301,291,302,307,377,333,280],[55,40,48,44,25,42,41],[1038,1188,1255,1184,594,890,1173,1151,1186,1203,1187,1195],[76,132,133,144,135,99,128,154],[77,46,108,81,85,84,93,83],[624,596,391,605,529,610,607,568,604,603,453],[83,167,166,189,163,174,160,165,133],[308,281,389,292,346,303,302,304,300,173],[593,1151,1187,1184,890,1040,1173,1186,1195,1255,1188,1203],[68,46,64,33,60,58,65],[65,43,88,87,86,99,93,90],[83,78,107,48,84,87,96,85],[1188,1173,1256,1038,1187,1151,890,1186,1184,1203,594,1195],[302,324,280,296,294,160,367,298,264,299],[521,760,682,687,646,664,342,698,692,686,672],[56,95,86,97,96,89,108,120],[344,356,262,343,340,382,337,175,361,330],[47,44,42,27,41,40,37],[139,155,161,158,118,166,154,156,78],[118,157,164,158,161,79,139,150,159],[299,292,371,150,300,301,281,303,306,262],[85,77,86,84,44,88,91,67],[88,85,84,44,65,91,76,86],[138,141,127,96,136,154,135,76],[292,308,302,346,300,324,304,305,238,166],[354,342,341,257,348,343,345,321,170,301],[84,178,168,167,131,170,193,166,162],[686,701,706,673,694,687,652,343,683,606,518],[295,293,301,367,296,279,297,263,323,159],[1038,1184,593,890,1188,1173,1187,1186,1195,1150,1203,1255],[343,364,388,402,191,383,382,385,288,374],[1187,1036,1183,591,1184,1175,888,1197,1182,1219,1115,1167],[151,291,307,303,345,238,299,323,301,302],[140,151,143,138,99,69,131,137],[29,44,42,59,41,36,40],[348,329,343,344,338,315,169,359,375,271],[48,39,34,37,50,40,41],[593,445,595,558,662,602,591,297,610,580,594],[686,651,681,342,541,687,691,707,604,675,699],[180,99,189,166,194,188,144,187,199],[321,349,335,343,377,176,265,356,344,332],[1151,1255,1195,1173,1184,1186,1188,1187,1203,593,1038,891],[90,88,100,83,62,113,80,89],[308,303,238,300,151,304,324,293,346,302],[59,38,50,41,42,35,40],[352,366,174,355,344,265,343,310,338,331],[91,89,93,90,117,85,60,106],[146,186,166,175,202,92,184,183,189],[82,67,96,44,80,79,88,76],[54,50,58,66,31,61,64],[343,266,344,172,308,336,364,350,359,333],[88,49,87,82,90,98,86,115],[20,47,49,51,54,48,40],[159,79,177,158,157,152,155,167,118],[1219,1183,1182,1115,1035,1186,591,1197,1167,887,1184,1175],[611,518,693,343,704,667,686,682,677,687,725],[607,599,634,305,677,604,603,580,452,605,591],[682,686,635,675,692,730,687,342,517,658,695],[662,296,573,598,592,584,553,593,595,443,591],[180,185,186,199,187,210,93,177,149],[197,136,179,185,156,182,180,178,99],[271,298,218,279,285,282,280,238,140],[1187,1151,890,593,1194,1188,1184,1173,1038,1186,1255,1203],[169,161,177,192,130,165,84,167,168],[50,42,43,41,66,39,36],[590,669,604,579,448,599,560,299,601,597,598],[174,191,206,179,184,142,177,180,90],[298,299,297,306,164,285,374,269,329,295],[181,172,162,138,170,195,86,169,168],[1184,1197,591,1182,1186,889,1167,1219,1183,1033,1115,1175],[644,695,691,679,667,687,340,681,770,686,517],[606,524,592,576,628,593,591,584,296,444,595],[94,127,154,138,135,74,136,141],[179,168,172,178,177,89,198,186,137],[302,299,291,300,298,149,260,305,280,370],[678,517,670,686,682,768,687,648,342,692,702],[302,290,304,376,333,303,306,298,279,153],[95,102,109,54,96,75,85,97],[150,154,146,78,152,151,162,173,119],[150,143,157,152,184,112,154,151,132],[36,41,54,40,25,44,42],[37,48,34,59,39,41,40],[681,603,638,611,584,303,454,607,606,605,596]\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3d71000cf542c50fee9",
      "title": "Problem 106: Special subset sums: meta-testing",
      "challengeType": 1,
      "dashedName": "problem-106-special-subset-sums-meta-testing",
      "description": "Let $S(A)$ represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:\n\n1. $S(B) ≠ S(C)$; that is, sums of subsets cannot be equal.\n2. If B contains more elements than C then $S(B) > S(C)$.\n\nFor this problem we shall assume that a given set contains n strictly increasing elements and it already satisfies the second rule.\n\nSurprisingly, out of the 25 possible subset pairs that can be obtained from a set for which n = 4, only 1 of these pairs need to be tested for equality (first rule). Similarly, when n = 7, only 70 out of the 966 subset pairs need to be tested.\n\nFor n = 12, how many of the 261625 subset pairs that can be obtained need to be tested for equality?\n\n**Note:** This problem is related to Problem 103 and Problem 105.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function subsetSumsMetaTesting() {\n\n  return true;\n}\n\nsubsetSumsMetaTesting();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`subsetSumsMetaTesting()` should return `21384`.",
          "testCode": "assert.strictEqual(subsetSumsMetaTesting(), 21384);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301730,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-106-special-subset-sums-meta-testing.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3d91000cf542c50feea",
      "title": "Problem 107: Minimal network",
      "challengeType": 1,
      "dashedName": "problem-107-minimal-network",
      "description": "The following undirected network consists of seven vertices and twelve edges with a total weight of 243.\n\n<img alt=\"Network with seven vertices and twelve edges\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/minimal-network-1.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe same network can be represented by the matrix below.\n\n|   | A  | B  | C  | D  | E  | F  | G  |\n|---|----|----|----|----|----|----|----|\n| A | -  | 16 | 12 | 21 | -  | -  | -  |\n| B | 16 | -  | -  | 17 | 20 | -  | -  |\n| C | 12 | -  | -  | 28 | -  | 31 | -  |\n| D | 21 | 17 | 28 | -  | 18 | 19 | 23 |\n| E | -  | 20 | -  | 18 | -  | -  | 11 |\n| F | -  | -  | 31 | 19 | -  | -  | 27 |\n| G | -  | -  | -  | 23 | 11 | 27 | -  |\n\n\nHowever, it is possible to optimise the network by removing some edges and still ensure that all points on the network remain connected. The network which achieves the maximum saving is shown below. It has a weight of 93, representing a saving of 243 − 93 = 150 from the original network.\n\n<img alt=\"Network with seven vertices and left six edges: AB, BD, CA, DE, DF, EG\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/minimal-network-2.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nUsing `network`, an 2D array representing network in matrix form, find the maximum saving which can be achieved by removing redundant edges whilst ensuring that the network remains connected. Vertices not having connection will be represented with `-1`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function minimalNetwork(network) {\n\n  return true;\n}\n\nconst testNetwork = [\n  [-1,-1,-1,427,668,495,377,678,-1,177,-1,-1,870,-1,869,624,300,609,131,-1,251,-1,-1,-1,856,221,514,-1,591,762,182,56,-1,884,412,273,636,-1,-1,774],[-1,-1,262,-1,-1,508,472,799,-1,956,578,363,940,143,-1,162,122,910,-1,729,802,941,922,573,531,539,667,607,-1,920,-1,-1,315,649,937,-1,185,102,636,289],[-1,262,-1,-1,926,-1,958,158,647,47,621,264,81,-1,402,813,649,386,252,391,264,637,349,-1,-1,-1,108,-1,727,225,578,699,-1,898,294,-1,575,168,432,833],[427,-1,-1,-1,366,-1,-1,635,-1,32,962,468,893,854,718,427,448,916,258,-1,760,909,529,311,404,-1,-1,588,680,875,-1,615,-1,409,758,221,-1,-1,76,257],[668,-1,926,366,-1,-1,-1,250,268,-1,503,944,-1,677,-1,727,793,457,981,191,-1,-1,-1,351,969,925,987,328,282,589,-1,873,477,-1,-1,19,450,-1,-1,-1],[495,508,-1,-1,-1,-1,-1,765,711,819,305,302,926,-1,-1,582,-1,861,-1,683,293,-1,-1,66,-1,27,-1,-1,290,-1,786,-1,554,817,33,-1,54,506,386,381],[377,472,958,-1,-1,-1,-1,-1,-1,120,42,-1,134,219,457,639,538,374,-1,-1,-1,966,-1,-1,-1,-1,-1,449,120,797,358,232,550,-1,305,997,662,744,686,239],[678,799,158,635,250,765,-1,-1,-1,35,-1,106,385,652,160,-1,890,812,605,953,-1,-1,-1,79,-1,712,613,312,452,-1,978,900,-1,901,-1,-1,225,533,770,722],[-1,-1,647,-1,268,711,-1,-1,-1,283,-1,172,-1,663,236,36,403,286,986,-1,-1,810,761,574,53,793,-1,-1,777,330,936,883,286,-1,174,-1,-1,-1,828,711],[177,956,47,32,-1,819,120,35,283,-1,50,-1,565,36,767,684,344,489,565,-1,-1,103,810,463,733,665,494,644,863,25,385,-1,342,470,-1,-1,-1,730,582,468],[-1,578,621,962,503,305,42,-1,-1,50,-1,155,519,-1,-1,256,990,801,154,53,474,650,402,-1,-1,-1,966,-1,-1,406,989,772,932,7,-1,823,391,-1,-1,933],[-1,363,264,468,944,302,-1,106,172,-1,155,-1,-1,-1,380,438,-1,41,266,-1,-1,104,867,609,-1,270,861,-1,-1,165,-1,675,250,686,995,366,191,-1,433,-1],[870,940,81,893,-1,926,134,385,-1,565,519,-1,-1,313,851,-1,-1,-1,248,220,-1,826,359,829,-1,234,198,145,409,68,359,-1,814,218,186,-1,-1,929,203,-1],[-1,143,-1,854,677,-1,219,652,663,36,-1,-1,313,-1,132,-1,433,598,-1,-1,168,870,-1,-1,-1,128,437,-1,383,364,966,227,-1,-1,807,993,-1,-1,526,17],[869,-1,402,718,-1,-1,457,160,236,767,-1,380,851,132,-1,-1,596,903,613,730,-1,261,-1,142,379,885,89,-1,848,258,112,-1,900,-1,-1,818,639,268,600,-1],[624,162,813,427,727,582,639,-1,36,684,256,438,-1,-1,-1,-1,539,379,664,561,542,-1,999,585,-1,-1,321,398,-1,-1,950,68,193,-1,697,-1,390,588,848,-1],[300,122,649,448,793,-1,538,890,403,344,990,-1,-1,433,596,539,-1,-1,73,-1,318,-1,-1,500,-1,968,-1,291,-1,-1,765,196,504,757,-1,542,-1,395,227,148],[609,910,386,916,457,861,374,812,286,489,801,41,-1,598,903,379,-1,-1,-1,946,136,399,-1,941,707,156,757,258,251,-1,807,-1,-1,-1,461,501,-1,-1,616,-1],[131,-1,252,258,981,-1,-1,605,986,565,154,266,248,-1,613,664,73,-1,-1,686,-1,-1,575,627,817,282,-1,698,398,222,-1,649,-1,-1,-1,-1,-1,654,-1,-1],[-1,729,391,-1,191,683,-1,953,-1,-1,53,-1,220,-1,730,561,-1,946,686,-1,-1,389,729,553,304,703,455,857,260,-1,991,182,351,477,867,-1,-1,889,217,853],[251,802,264,760,-1,293,-1,-1,-1,-1,474,-1,-1,168,-1,542,318,136,-1,-1,-1,-1,392,-1,-1,-1,267,407,27,651,80,927,-1,974,977,-1,-1,457,117,-1],[-1,941,637,909,-1,-1,966,-1,810,103,650,104,826,870,261,-1,-1,399,-1,389,-1,-1,-1,202,-1,-1,-1,-1,867,140,403,962,785,-1,511,-1,1,-1,707,-1],[-1,922,349,529,-1,-1,-1,-1,761,810,402,867,359,-1,-1,999,-1,-1,575,729,392,-1,-1,388,939,-1,959,-1,83,463,361,-1,-1,512,931,-1,224,690,369,-1],[-1,573,-1,311,351,66,-1,79,574,463,-1,609,829,-1,142,585,500,941,627,553,-1,202,388,-1,164,829,-1,620,523,639,936,-1,-1,490,-1,695,-1,505,109,-1],[856,531,-1,404,969,-1,-1,-1,53,733,-1,-1,-1,-1,379,-1,-1,707,817,304,-1,-1,939,164,-1,-1,616,716,728,-1,889,349,-1,963,150,447,-1,292,586,264],[221,539,-1,-1,925,27,-1,712,793,665,-1,270,234,128,885,-1,968,156,282,703,-1,-1,-1,829,-1,-1,-1,822,-1,-1,-1,736,576,-1,697,946,443,-1,205,194],[514,667,108,-1,987,-1,-1,613,-1,494,966,861,198,437,89,321,-1,757,-1,455,267,-1,959,-1,616,-1,-1,-1,349,156,339,-1,102,790,359,-1,439,938,809,260],[-1,607,-1,588,328,-1,449,312,-1,644,-1,-1,145,-1,-1,398,291,258,698,857,407,-1,-1,620,716,822,-1,-1,293,486,943,-1,779,-1,6,880,116,775,-1,947],[591,-1,727,680,282,290,120,452,777,863,-1,-1,409,383,848,-1,-1,251,398,260,27,867,83,523,728,-1,349,293,-1,212,684,505,341,384,9,992,507,48,-1,-1],[762,920,225,875,589,-1,797,-1,330,25,406,165,68,364,258,-1,-1,-1,222,-1,651,140,463,639,-1,-1,156,486,212,-1,-1,349,723,-1,-1,186,-1,36,240,752],[182,-1,578,-1,-1,786,358,978,936,385,989,-1,359,966,112,950,765,807,-1,991,80,403,361,936,889,-1,339,943,684,-1,-1,965,302,676,725,-1,327,134,-1,147],[56,-1,699,615,873,-1,232,900,883,-1,772,675,-1,227,-1,68,196,-1,649,182,927,962,-1,-1,349,736,-1,-1,505,349,965,-1,474,178,833,-1,-1,555,853,-1],[-1,315,-1,-1,477,554,550,-1,286,342,932,250,814,-1,900,193,504,-1,-1,351,-1,785,-1,-1,-1,576,102,779,341,723,302,474,-1,689,-1,-1,-1,451,-1,-1],[884,649,898,409,-1,817,-1,901,-1,470,7,686,218,-1,-1,-1,757,-1,-1,477,974,-1,512,490,963,-1,790,-1,384,-1,676,178,689,-1,245,596,445,-1,-1,343],[412,937,294,758,-1,33,305,-1,174,-1,-1,995,186,807,-1,697,-1,461,-1,867,977,511,931,-1,150,697,359,6,9,-1,725,833,-1,245,-1,949,-1,270,-1,112],[273,-1,-1,221,19,-1,997,-1,-1,-1,823,366,-1,993,818,-1,542,501,-1,-1,-1,-1,-1,695,447,946,-1,880,992,186,-1,-1,-1,596,949,-1,91,-1,768,273],[636,185,575,-1,450,54,662,225,-1,-1,391,191,-1,-1,639,390,-1,-1,-1,-1,-1,1,224,-1,-1,443,439,116,507,-1,327,-1,-1,445,-1,91,-1,248,-1,344],[-1,102,168,-1,-1,506,744,533,-1,730,-1,-1,929,-1,268,588,395,-1,654,889,457,-1,690,505,292,-1,938,775,48,36,134,555,451,-1,270,-1,248,-1,371,680],[-1,636,432,76,-1,386,686,770,828,582,-1,433,203,526,600,848,227,616,-1,217,117,707,369,109,586,205,809,-1,-1,240,-1,853,-1,-1,-1,768,-1,371,-1,540],[774,289,833,257,-1,381,239,722,711,468,933,-1,-1,17,-1,-1,148,-1,-1,853,-1,-1,-1,-1,264,194,260,947,-1,752,147,-1,-1,343,112,273,344,680,540,-1]\n];\n\nminimalNetwork(testNetwork);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`minimalNetwork(testNetwork)` should return `259679`.",
          "testCode": "assert.strictEqual(minimalNetwork(_testNetwork), 259679);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301731,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-107-minimal-network.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testNetwork = [\n  [-1,-1,-1,427,668,495,377,678,-1,177,-1,-1,870,-1,869,624,300,609,131,-1,251,-1,-1,-1,856,221,514,-1,591,762,182,56,-1,884,412,273,636,-1,-1,774],[-1,-1,262,-1,-1,508,472,799,-1,956,578,363,940,143,-1,162,122,910,-1,729,802,941,922,573,531,539,667,607,-1,920,-1,-1,315,649,937,-1,185,102,636,289],[-1,262,-1,-1,926,-1,958,158,647,47,621,264,81,-1,402,813,649,386,252,391,264,637,349,-1,-1,-1,108,-1,727,225,578,699,-1,898,294,-1,575,168,432,833],[427,-1,-1,-1,366,-1,-1,635,-1,32,962,468,893,854,718,427,448,916,258,-1,760,909,529,311,404,-1,-1,588,680,875,-1,615,-1,409,758,221,-1,-1,76,257],[668,-1,926,366,-1,-1,-1,250,268,-1,503,944,-1,677,-1,727,793,457,981,191,-1,-1,-1,351,969,925,987,328,282,589,-1,873,477,-1,-1,19,450,-1,-1,-1],[495,508,-1,-1,-1,-1,-1,765,711,819,305,302,926,-1,-1,582,-1,861,-1,683,293,-1,-1,66,-1,27,-1,-1,290,-1,786,-1,554,817,33,-1,54,506,386,381],[377,472,958,-1,-1,-1,-1,-1,-1,120,42,-1,134,219,457,639,538,374,-1,-1,-1,966,-1,-1,-1,-1,-1,449,120,797,358,232,550,-1,305,997,662,744,686,239],[678,799,158,635,250,765,-1,-1,-1,35,-1,106,385,652,160,-1,890,812,605,953,-1,-1,-1,79,-1,712,613,312,452,-1,978,900,-1,901,-1,-1,225,533,770,722],[-1,-1,647,-1,268,711,-1,-1,-1,283,-1,172,-1,663,236,36,403,286,986,-1,-1,810,761,574,53,793,-1,-1,777,330,936,883,286,-1,174,-1,-1,-1,828,711],[177,956,47,32,-1,819,120,35,283,-1,50,-1,565,36,767,684,344,489,565,-1,-1,103,810,463,733,665,494,644,863,25,385,-1,342,470,-1,-1,-1,730,582,468],[-1,578,621,962,503,305,42,-1,-1,50,-1,155,519,-1,-1,256,990,801,154,53,474,650,402,-1,-1,-1,966,-1,-1,406,989,772,932,7,-1,823,391,-1,-1,933],[-1,363,264,468,944,302,-1,106,172,-1,155,-1,-1,-1,380,438,-1,41,266,-1,-1,104,867,609,-1,270,861,-1,-1,165,-1,675,250,686,995,366,191,-1,433,-1],[870,940,81,893,-1,926,134,385,-1,565,519,-1,-1,313,851,-1,-1,-1,248,220,-1,826,359,829,-1,234,198,145,409,68,359,-1,814,218,186,-1,-1,929,203,-1],[-1,143,-1,854,677,-1,219,652,663,36,-1,-1,313,-1,132,-1,433,598,-1,-1,168,870,-1,-1,-1,128,437,-1,383,364,966,227,-1,-1,807,993,-1,-1,526,17],[869,-1,402,718,-1,-1,457,160,236,767,-1,380,851,132,-1,-1,596,903,613,730,-1,261,-1,142,379,885,89,-1,848,258,112,-1,900,-1,-1,818,639,268,600,-1],[624,162,813,427,727,582,639,-1,36,684,256,438,-1,-1,-1,-1,539,379,664,561,542,-1,999,585,-1,-1,321,398,-1,-1,950,68,193,-1,697,-1,390,588,848,-1],[300,122,649,448,793,-1,538,890,403,344,990,-1,-1,433,596,539,-1,-1,73,-1,318,-1,-1,500,-1,968,-1,291,-1,-1,765,196,504,757,-1,542,-1,395,227,148],[609,910,386,916,457,861,374,812,286,489,801,41,-1,598,903,379,-1,-1,-1,946,136,399,-1,941,707,156,757,258,251,-1,807,-1,-1,-1,461,501,-1,-1,616,-1],[131,-1,252,258,981,-1,-1,605,986,565,154,266,248,-1,613,664,73,-1,-1,686,-1,-1,575,627,817,282,-1,698,398,222,-1,649,-1,-1,-1,-1,-1,654,-1,-1],[-1,729,391,-1,191,683,-1,953,-1,-1,53,-1,220,-1,730,561,-1,946,686,-1,-1,389,729,553,304,703,455,857,260,-1,991,182,351,477,867,-1,-1,889,217,853],[251,802,264,760,-1,293,-1,-1,-1,-1,474,-1,-1,168,-1,542,318,136,-1,-1,-1,-1,392,-1,-1,-1,267,407,27,651,80,927,-1,974,977,-1,-1,457,117,-1],[-1,941,637,909,-1,-1,966,-1,810,103,650,104,826,870,261,-1,-1,399,-1,389,-1,-1,-1,202,-1,-1,-1,-1,867,140,403,962,785,-1,511,-1,1,-1,707,-1],[-1,922,349,529,-1,-1,-1,-1,761,810,402,867,359,-1,-1,999,-1,-1,575,729,392,-1,-1,388,939,-1,959,-1,83,463,361,-1,-1,512,931,-1,224,690,369,-1],[-1,573,-1,311,351,66,-1,79,574,463,-1,609,829,-1,142,585,500,941,627,553,-1,202,388,-1,164,829,-1,620,523,639,936,-1,-1,490,-1,695,-1,505,109,-1],[856,531,-1,404,969,-1,-1,-1,53,733,-1,-1,-1,-1,379,-1,-1,707,817,304,-1,-1,939,164,-1,-1,616,716,728,-1,889,349,-1,963,150,447,-1,292,586,264],[221,539,-1,-1,925,27,-1,712,793,665,-1,270,234,128,885,-1,968,156,282,703,-1,-1,-1,829,-1,-1,-1,822,-1,-1,-1,736,576,-1,697,946,443,-1,205,194],[514,667,108,-1,987,-1,-1,613,-1,494,966,861,198,437,89,321,-1,757,-1,455,267,-1,959,-1,616,-1,-1,-1,349,156,339,-1,102,790,359,-1,439,938,809,260],[-1,607,-1,588,328,-1,449,312,-1,644,-1,-1,145,-1,-1,398,291,258,698,857,407,-1,-1,620,716,822,-1,-1,293,486,943,-1,779,-1,6,880,116,775,-1,947],[591,-1,727,680,282,290,120,452,777,863,-1,-1,409,383,848,-1,-1,251,398,260,27,867,83,523,728,-1,349,293,-1,212,684,505,341,384,9,992,507,48,-1,-1],[762,920,225,875,589,-1,797,-1,330,25,406,165,68,364,258,-1,-1,-1,222,-1,651,140,463,639,-1,-1,156,486,212,-1,-1,349,723,-1,-1,186,-1,36,240,752],[182,-1,578,-1,-1,786,358,978,936,385,989,-1,359,966,112,950,765,807,-1,991,80,403,361,936,889,-1,339,943,684,-1,-1,965,302,676,725,-1,327,134,-1,147],[56,-1,699,615,873,-1,232,900,883,-1,772,675,-1,227,-1,68,196,-1,649,182,927,962,-1,-1,349,736,-1,-1,505,349,965,-1,474,178,833,-1,-1,555,853,-1],[-1,315,-1,-1,477,554,550,-1,286,342,932,250,814,-1,900,193,504,-1,-1,351,-1,785,-1,-1,-1,576,102,779,341,723,302,474,-1,689,-1,-1,-1,451,-1,-1],[884,649,898,409,-1,817,-1,901,-1,470,7,686,218,-1,-1,-1,757,-1,-1,477,974,-1,512,490,963,-1,790,-1,384,-1,676,178,689,-1,245,596,445,-1,-1,343],[412,937,294,758,-1,33,305,-1,174,-1,-1,995,186,807,-1,697,-1,461,-1,867,977,511,931,-1,150,697,359,6,9,-1,725,833,-1,245,-1,949,-1,270,-1,112],[273,-1,-1,221,19,-1,997,-1,-1,-1,823,366,-1,993,818,-1,542,501,-1,-1,-1,-1,-1,695,447,946,-1,880,992,186,-1,-1,-1,596,949,-1,91,-1,768,273],[636,185,575,-1,450,54,662,225,-1,-1,391,191,-1,-1,639,390,-1,-1,-1,-1,-1,1,224,-1,-1,443,439,116,507,-1,327,-1,-1,445,-1,91,-1,248,-1,344],[-1,102,168,-1,-1,506,744,533,-1,730,-1,-1,929,-1,268,588,395,-1,654,889,457,-1,690,505,292,-1,938,775,48,36,134,555,451,-1,270,-1,248,-1,371,680],[-1,636,432,76,-1,386,686,770,828,582,-1,433,203,526,600,848,227,616,-1,217,117,707,369,109,586,205,809,-1,-1,240,-1,853,-1,-1,-1,768,-1,371,-1,540],[774,289,833,257,-1,381,239,722,711,468,933,-1,-1,17,-1,-1,148,-1,-1,853,-1,-1,-1,-1,264,194,260,947,-1,752,147,-1,-1,343,112,273,344,680,540,-1]\n];"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3d91000cf542c50feeb",
      "title": "Problem 108: Diophantine Reciprocals I",
      "challengeType": 1,
      "dashedName": "problem-108-diophantine-reciprocals-i",
      "description": "In the following equation x, y, and n are positive integers.\n\n$$\\frac{1}{x} + \\frac{1}{y} = \\frac{1}{n}$$\n\nFor `n` = 4 there are exactly three distinct solutions:\n\n$$\\begin{align}\n  & \\frac{1}{5} + \\frac{1}{20} = \\frac{1}{4}\\\\\\\\\n  \\\\\\\\\n  & \\frac{1}{6} + \\frac{1}{12} = \\frac{1}{4}\\\\\\\\\n  \\\\\\\\\n  & \\frac{1}{8} + \\frac{1}{8} = \\frac{1}{4}\n\\end{align}$$\n\nWhat is the least value of `n` for which the number of distinct solutions exceeds one-thousand?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function diophantineOne() {\n\n  return true;\n}\n\ndiophantineOne();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`diophantineOne()` should return `180180`.",
          "testCode": "assert.strictEqual(diophantineOne(), 180180);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301732,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-108-diophantine-reciprocals-i.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3db1000cf542c50feec",
      "title": "Problem 109: Darts",
      "challengeType": 1,
      "dashedName": "problem-109-darts",
      "description": "In the game of darts a player throws three darts at a target board which is split into twenty equal sized sections numbered one to twenty.\n\n<img alt=\"Darts board\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/darts.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe score of a dart is determined by the number of the region that the dart lands in. A dart landing outside the red/green outer ring scores zero. The black and cream regions inside this ring represent single scores. However, the red/green outer ring and middle ring score double and treble scores respectively.\n\nAt the center of the board are two concentric circles called the bull region, or bulls-eye. The outer bull is worth 25 points and the inner bull is a double, worth 50 points.\n\nThere are many variations of rules but in the most popular game the players will begin with a score of 301 or 501 and the first player to reduce their running total to zero is a winner. However, it is normal to play a \"doubles out\" system, which means that the player must land a double (including the double bulls-eye at the center of the board) on their final dart to win; any other dart that would reduce their running total to one or lower means the score for that set of three darts is \"bust\".\n\nWhen a player is able to finish on their current score it is called a \"checkout\" and the highest checkout is 170: T20 T20 D25 (two treble 20s and double bull). There are exactly eleven distinct ways to checkout on a score of 6:\n\n$$\\begin{array}\n  \\text{D3} &    &    \\\\\\\\\n  D1        & D2 &    \\\\\\\\\n  S2        & D2 &    \\\\\\\\\n  D2        & D1 &    \\\\\\\\\n  S4        & D1 &    \\\\\\\\\n  S1        & S1 & D2 \\\\\\\\\n  S1        & T1 & D1 \\\\\\\\\n  S1        & S3 & D1 \\\\\\\\\n  D1        & D1 & D1 \\\\\\\\\n  D1        & S2 & D1 \\\\\\\\\n  S2        & S2 & D1\n\\end{array}$$\n\nNote that D1 D2 is considered different from D2 D1 as they finish on different doubles. However, the combination S1 T1 D1 is considered the same as T1 S1 D1. In addition, we shall not include misses in considering combinations; for example, D3 is the same as 0 D3 and 0 0 D3. Incredibly there are 42336 distinct ways of checking out in total. How many distinct ways can a player checkout with a score less than 100?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function darts() {\n\n  return true;\n}\n\ndarts();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`darts()` should return `38182`.",
          "testCode": "assert.strictEqual(darts(), 38182);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301733,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-109-darts.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3db1000cf542c50feed",
      "title": "Problem 110: Diophantine Reciprocals II",
      "challengeType": 1,
      "dashedName": "problem-110-diophantine-reciprocals-ii",
      "description": "In the following equation x, y, and n are positive integers.\n\n$$\\frac{1}{x} + \\frac{1}{y} = \\frac{1}{n}$$\n\nIt can be verified that when `n` = 1260 there are 113 distinct solutions and this is the least value of `n` for which the total number of distinct solutions exceeds one hundred.\n\nWhat is the least value of `n` for which the number of distinct solutions exceeds four million?\n\n**Note:** This problem is a much more difficult version of Problem 108 and as it is well beyond the limitations of a brute force approach it requires a clever implementation.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function diophantineTwo() {\n\n  return true;\n}\n\ndiophantineTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`diophantineTwo()` should return `9350130049860600`.",
          "testCode": "assert.strictEqual(diophantineTwo(), 9350130049860600);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301735,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-110-diophantine-reciprocals-ii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3db1000cf542c50feee",
      "title": "Problem 111: Primes with runs",
      "challengeType": 1,
      "dashedName": "problem-111-primes-with-runs",
      "description": "Considering 4-digit primes containing repeated digits it is clear that they cannot all be the same: 1111 is divisible by 11, 2222 is divisible by 22, and so on. But there are nine 4-digit primes containing three ones:\n\n$$1117, 1151, 1171, 1181, 1511, 1811, 2111, 4111, 8111$$\n\nWe shall say that $M(n, d)$ represents the maximum number of repeated digits for an n-digit prime where d is the repeated digit, $N(n, d)$ represents the number of such primes, and $S(n, d)$ represents the sum of these primes.\n\nSo $M(4, 1) = 3$ is the maximum number of repeated digits for a 4-digit prime where one is the repeated digit, there are $N(4, 1) = 9$ such primes, and the sum of these primes is $S(4, 1) = 22275$. It turns out that for d = 0, it is only possible to have $M(4, 0) = 2$ repeated digits, but there are $N(4, 0) = 13$ such cases.\n\nIn the same way we obtain the following results for 4-digit primes.\n\n| Digit, d | $M(4, d)$ | $N(4, d)$ | $S(4, d)$ |\n|----------|-----------|-----------|-----------|\n| 0        | 2         | 13        | 67061     |\n| 1        | 3         | 9         | 22275     |\n| 2        | 3         | 1         | 2221      |\n| 3        | 3         | 12        | 46214     |\n| 4        | 3         | 2         | 8888      |\n| 5        | 3         | 1         | 5557      |\n| 6        | 3         | 1         | 6661      |\n| 7        | 3         | 9         | 57863     |\n| 8        | 3         | 1         | 8887      |\n| 9        | 3         | 7         | 48073     |\n\nFor d = 0 to 9, the sum of all $S(4, d)$ is 273700. Find the sum of all $S(10, d)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primesWithRuns() {\n\n  return true;\n}\n\nprimesWithRuns();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primesWithRuns()` should return `612407567715`.",
          "testCode": "assert.strictEqual(primesWithRuns(), 612407567715);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301736,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-111-primes-with-runs.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3dd1000cf542c50feef",
      "title": "Problem 112: Bouncy numbers",
      "challengeType": 1,
      "dashedName": "problem-112-bouncy-numbers",
      "description": "Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.\n\nSimilarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.\n\nWe shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, 155349.\n\nClearly there cannot be any bouncy numbers below one-hundred, but just over half of the numbers below one-thousand (525) are bouncy. In fact, the least number for which the proportion of bouncy numbers first reaches 50% is 538.\n\nSurprisingly, bouncy numbers become more and more common and by the time we reach 21780 the proportion of bouncy numbers is equal to 90%.\n\nFind the least number for which the proportion of bouncy numbers is exactly 99%.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function bouncyNumbers() {\n\n  return true;\n}\n\nbouncyNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`bouncyNumbers()` should return `1587000`.",
          "testCode": "assert.strictEqual(bouncyNumbers(), 1587000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301738,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-112-bouncy-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3dd1000cf542c50fef0",
      "title": "Problem 113: Non-bouncy numbers",
      "challengeType": 1,
      "dashedName": "problem-113-non-bouncy-numbers",
      "description": "Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.\n\nSimilarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.\n\nWe shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, 155349.\n\nAs n increases, the proportion of bouncy numbers below n increases such that there are only 12951 numbers below one-million that are not bouncy and only 277032 non-bouncy numbers below ${10}^{10}$.\n\nHow many numbers below a googol (${10}^{100}$) are not bouncy?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nonBouncyNumbers() {\n\n  return true;\n}\n\nnonBouncyNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`nonBouncyNumbers()` should return `51161058134250`.",
          "testCode": "assert.strictEqual(nonBouncyNumbers(), 51161058134250);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301739,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-113-non-bouncy-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e01000cf542c50fef2",
      "title": "Problem 114: Counting block combinations I",
      "challengeType": 1,
      "dashedName": "problem-114-counting-block-combinations-i",
      "description": "A row measuring seven units in length has red blocks with a minimum length of three units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one black square. There are exactly seventeen ways of doing this.\n\n<img alt=\"Possible ways of placing block with a minimum length of three units, on a row with length of seven units\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/counting-block-combinations-i.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHow many ways can a row measuring fifty units in length be filled?\n\n**Note:** Although the example above does not lend itself to the possibility, in general it is permitted to mix block sizes. For example, on a row measuring eight units in length you could use red (3), black (1), and red (4).",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countingBlockOne() {\n\n  return true;\n}\n\ncountingBlockOne();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`countingBlockOne()` should return `16475640049`.",
          "testCode": "assert.strictEqual(countingBlockOne(), 16475640049);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301740,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-114-counting-block-combinations-i.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3df1000cf542c50fef1",
      "title": "Problem 115: Counting block combinations II",
      "challengeType": 1,
      "dashedName": "problem-115-counting-block-combinations-ii",
      "description": "A row measuring `n` units in length has red blocks with a minimum length of `m` units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one black square.\n\nLet the fill-count function, $F(m, n)$, represent the number of ways that a row can be filled.\n\nFor example, $F(3, 29) = 673135$ and $F(3, 30) = 1089155$.\n\nThat is, for m = 3, it can be seen that n = 30 is the smallest value for which the fill-count function first exceeds one million.\n\nIn the same way, for m = 10, it can be verified that $F(10, 56) = 880711$ and $F(10, 57) = 1148904$, so n = 57 is the least value for which the fill-count function first exceeds one million.\n\nFor m = 50, find the least value of `n` for which the fill-count function first exceeds one million.\n\n**Note:** This is a more difficult version of Problem 114.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countingBlockTwo() {\n\n  return true;\n}\n\ncountingBlockTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`countingBlockTwo()` should return `168`.",
          "testCode": "assert.strictEqual(countingBlockTwo(), 168);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301741,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-115-counting-block-combinations-ii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e01000cf542c50fef3",
      "title": "Problem 116: Red, green or blue tiles",
      "challengeType": 1,
      "dashedName": "problem-116-red-green-or-blue-tiles",
      "description": "A row of five black square tiles is to have a number of its tiles replaced with colored oblong tiles chosen from red (length two), green (length three), or blue (length four).\n\nIf red tiles are chosen there are exactly seven ways this can be done.\n\n<img alt=\"Possible ways to placing red oblong on a row with length of five units\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/red-green-or-blue-tiles-1.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIf green tiles are chosen there are three ways.\n\n<img alt=\"Possible ways of placing green oblong on a row with length of five units\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/red-green-or-blue-tiles-2.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nAnd if blue tiles are chosen there are two ways.\n\n<img alt=\"Possible ways of placing blue oblong on a row with length of five units\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/red-green-or-blue-tiles-3.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nAssuming that colors cannot be mixed there are 7 + 3 + 2 = 12 ways of replacing the black tiles in a row measuring five units in length. How many different ways can the black tiles in a row measuring fifty units in length be replaced if colors cannot be mixed and at least one colored tile must be used?\n\n**Note:** This is related to Problem 117.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function redGreenBlueOne() {\n\n  return true;\n}\n\nredGreenBlueOne();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`redGreenBlueOne()` should return `20492570929`.",
          "testCode": "assert.strictEqual(redGreenBlueOne(), 20492570929);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301742,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-116-red-green-or-blue-tiles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e21000cf542c50fef4",
      "title": "Problem 117: Red, green, and blue tiles",
      "challengeType": 1,
      "dashedName": "problem-117-red-green-and-blue-tiles",
      "description": "Using a combination of black square tiles and oblong tiles chosen from: red tiles measuring two units, green tiles measuring three units, and blue tiles measuring four units, it is possible to tile a row measuring five units in length in exactly fifteen different ways.\n\n<img alt=\"Possible ways of placing red, green and blue oblongs on a row with length of five units\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/red-green-and-blue-tiles.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHow many ways can a row measuring fifty units in length be tiled?\n\n**Note**: This is related to Problem 116.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function redGreenBlueTilesTwo() {\n\n  return true;\n}\n\nredGreenBlueTilesTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`redGreenBlueTilesTwo()` should return `100808458960497`.",
          "testCode": "assert.strictEqual(redGreenBlueTilesTwo(), 100808458960497);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301743,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-117-red-green-and-blue-tiles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e21000cf542c50fef5",
      "title": "Problem 118: Pandigital prime sets",
      "challengeType": 1,
      "dashedName": "problem-118-pandigital-prime-sets",
      "description": "Using all of the digits 1 through 9 and concatenating them freely to form decimal integers, different sets can be formed. Interestingly with the set $\\\\{2, 5, 47, 89, 631\\\\}$, all of the elements belonging to it are prime.\n\nHow many distinct sets containing each of the digits one through nine exactly once contain only prime elements?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pandigitalPrimeSets() {\n\n  return true;\n}\n\npandigitalPrimeSets();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pandigitalPrimeSets()` should return `44680`.",
          "testCode": "assert.strictEqual(pandigitalPrimeSets(), 44680);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301744,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-118-pandigital-prime-sets.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e41000cf542c50fef6",
      "title": "Problem 119: Digit power sum",
      "challengeType": 1,
      "dashedName": "problem-119-digit-power-sum",
      "description": "The number 512 is interesting because it is equal to the sum of its digits raised to some power: $5 + 1 + 2 = 8$, and $8^3 = 512$. Another example of a number with this property is $614656 = 28^4$.\n\nWe shall define $a_n$ to be the $n-th$ term of this sequence and insist that a number must contain at least two digits to have a sum.\n\nYou are given that $a_2 = 512$ and $a_{10} = 614656$.\n\nFind $a_{30}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function digitPowerSum() {\n\n  return true;\n}\n\ndigitPowerSum();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`digitPowerSum()` should return `248155780267521`.",
          "testCode": "assert.strictEqual(digitPowerSum(), 248155780267521);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301745,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-119-digit-power-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e41000cf542c50fef7",
      "title": "Problem 120: Square remainders",
      "challengeType": 1,
      "dashedName": "problem-120-square-remainders",
      "description": "Let `r` be the remainder when ${(a − 1)}^n + {(a + 1)}^n$ is divided by $a^2$.\n\nFor example, if $a = 7$ and $n = 3$, then $r = 42: 6^3 + 8^3 = 728 ≡ 42 \\\\ \\text{mod}\\\\ 49$. And as `n` varies, so too will `r`, but for $a = 7$ it turns out that $r_{max} = 42$.\n\nFor $3 ≤ a ≤ 1000$, find $\\sum{r}_{max}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squareRemainders() {\n\n  return true;\n}\n\nsquareRemainders();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`squareRemainders()` should return `333082500`.",
          "testCode": "assert.strictEqual(squareRemainders(), 333082500);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301747,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-120-square-remainders.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e51000cf542c50fef8",
      "title": "Problem 121: Disc game prize fund",
      "challengeType": 1,
      "dashedName": "problem-121-disc-game-prize-fund",
      "description": "A bag contains one red disc and one blue disc. In a game of chance a player takes a disc at random and its color is noted. After each turn the disc is returned to the bag, an extra red disc is added, and another disc is taken at random.\n\nThe player pays £1 to play and wins if they have taken more blue discs than red discs at the end of the game.\n\nIf the game is played for four turns, the probability of a player winning is exactly 11/120, and so the maximum prize fund the banker should allocate for winning in this game would be £10 before they would expect to incur a loss. Note that any payout will be a whole number of pounds and also includes the original £1 paid to play the game, so in the example given the player actually wins £9.\n\nFind the maximum prize fund that should be allocated to a single game in which fifteen turns are played.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function discGamePrize() {\n\n  return true;\n}\n\ndiscGamePrize();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`discGamePrize()` should return `2269`.",
          "testCode": "assert.strictEqual(discGamePrize(), 2269);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301748,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-121-disc-game-prize-fund.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e61000cf542c50fef9",
      "title": "Problem 122: Efficient exponentiation",
      "challengeType": 1,
      "dashedName": "problem-122-efficient-exponentiation",
      "description": "The most naive way of computing $n^{15}$ requires fourteen multiplications:\n\n$$n × n × \\ldots × n = n^{15}$$\n\nBut using a \"binary\" method you can compute it in six multiplications:\n\n$$\\begin{align}\n  & n × n = n^2\\\\\\\\\n  & n^2 × n^2 = n^4\\\\\\\\\n  & n^4 × n^4 = n^8\\\\\\\\\n  & n^8 × n^4 = n^{12}\\\\\\\\\n  & n^{12} × n^2 = n^{14}\\\\\\\\\n  & n^{14} × n = n^{15}\n\\end{align}$$\n\nHowever it is yet possible to compute it in only five multiplications:\n\n$$\\begin{align}\n  & n × n = n^2\\\\\\\\\n  & n^2 × n = n^3\\\\\\\\\n  & n^3 × n^3 = n^6\\\\\\\\\n  & n^6 × n^6 = n^{12}\\\\\\\\\n  & n^{12} × n^3 = n^{15}\n\\end{align}$$\n\nWe shall define $m(k)$ to be the minimum number of multiplications to compute $n^k$; for example $m(15) = 5$.\n\nFor $1 ≤ k ≤ 200$, find $\\sum{m(k)}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function efficientExponentiation() {\n\n  return true;\n}\n\nefficientExponentiation();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`efficientExponentiation()` should return `1582`.",
          "testCode": "assert.strictEqual(efficientExponentiation(), 1582);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301749,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-122-efficient-exponentiation.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e71000cf542c50fefa",
      "title": "Problem 123: Prime square remainders",
      "challengeType": 1,
      "dashedName": "problem-123-prime-square-remainders",
      "description": "Let $p_n$ be the $n$th prime: 2, 3, 5, 7, 11, ..., and let $r$ be the remainder when ${(p_n−1)}^n + {(p_n+1)}^n$ is divided by ${p_n}^2$.\n\nFor example, when $n = 3, p_3 = 5$, and $4^3 + 6^3 = 280 ≡ 5\\\\ mod\\\\ 25$.\n\nThe least value of $n$ for which the remainder first exceeds $10^9$ is 7037.\n\nFind the least value of $n$ for which the remainder first exceeds $10^{10}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeSquareRemainders() {\n\n  return true;\n}\n\nprimeSquareRemainders();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeSquareRemainders()` should return `21035`.",
          "testCode": "assert.strictEqual(primeSquareRemainders(), 21035);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301750,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-123-prime-square-remainders.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e81000cf542c50fefb",
      "title": "Problem 124: Ordered radicals",
      "challengeType": 1,
      "dashedName": "problem-124-ordered-radicals",
      "description": "The radical of $n$, $rad(n)$, is the product of the distinct prime factors of $n$. For example, $504 = 2^3 × 3^2 × 7$, so $rad(504) = 2 × 3 × 7 = 42$.\n\nIf we calculate $rad(n)$ for $1 ≤ n ≤ 10$, then sort them on $rad(n)$, and sorting on $n$ if the radical values are equal, we get:\n\n<div style=\"text-align: center;\">\n  <table cellpadding=\"2\" cellspacing=\"0\" border=\"0\" align=\"center\">\n    <tbody>\n      <tr>\n        <td colspan=\"2\">$Unsorted$</td>\n        <td></td>\n        <td colspan=\"3\">$Sorted$</td>\n      </tr>\n      <tr>\n        <td>$n$</td>\n        <td>$rad(n)$</td>\n        <td></td>\n        <td>$n$</td>\n        <td>$rad(n)$</td>\n        <td>$k$</td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>1</td>\n        <td></td>\n        <td>1</td>\n        <td>1</td>\n        <td>1</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>2</td>\n        <td></td>\n        <td>2</td>\n        <td>2</td>\n        <td>2</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>3</td>\n        <td></td>\n        <td>4</td>\n        <td>2</td>\n        <td>3</td>\n      </tr>\n      <tr>\n        <td>4</td>\n        <td>2</td>\n        <td></td>\n        <td>8</td>\n        <td>2</td>\n        <td>4</td>\n      </tr>\n      <tr>\n        <td>5</td>\n        <td>5</td>\n        <td></td>\n        <td>3</td>\n        <td>3</td>\n        <td>5</td>\n      </tr>\n      <tr>\n        <td>6</td>\n        <td>6</td>\n        <td></td>\n        <td>9</td>\n        <td>3</td>\n        <td>6</td>\n      </tr>\n      <tr>\n        <td>7</td>\n        <td>7</td>\n        <td></td>\n        <td>5</td>\n        <td>5</td>\n        <td>7</td>\n      </tr>\n      <tr>\n        <td>8</td>\n        <td>2</td>\n        <td></td>\n        <td>6</td>\n        <td>6</td>\n        <td>8</td>\n      </tr>\n      <tr>\n        <td>9</td>\n        <td>3</td>\n        <td></td>\n        <td>7</td>\n        <td>7</td>\n        <td>9</td>\n      </tr>\n      <tr>\n        <td>10</td>\n        <td>10</td>\n        <td></td>\n        <td>10</td>\n        <td>10</td>\n        <td>10</td>\n      </tr>\n    </tbody>\n  </table>\n</div><br>\n\nLet $E(k)$ be the $k$th element in the sorted $n$ column; for example, $E(4) = 8$ and $E(6) = 9$. If $rad(n)$ is sorted for $1 ≤ n ≤ 100000$, find $E(10000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function orderedRadicals() {\n\n  return true;\n}\n\norderedRadicals();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`orderedRadicals()` should return `21417`.",
          "testCode": "assert.strictEqual(orderedRadicals(), 21417);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301751,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-124-ordered-radicals.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3e91000cf542c50fefc",
      "title": "Problem 125: Palindromic sums",
      "challengeType": 1,
      "dashedName": "problem-125-palindromic-sums",
      "description": "The palindromic number 595 is interesting because it can be written as the sum of consecutive squares: $6^2 + 7^2 + 8^2 + 9^2 + 10^2 + 11^2 + 12^2$.\n\nThere are exactly eleven palindromes below one-thousand that can be written as consecutive square sums, and the sum of these palindromes is 4164. Note that $1 = 0^2 + 1^2$ has not been included as this problem is concerned with the squares of positive integers.\n\nFind the sum of all the numbers less than the  `limit`  that are both palindromic and can be written as the sum of consecutive squares.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function palindromicSums(limit) {\n\n  return true;\n}\n\npalindromicSums(100);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function isPalindrome(num) {\n  return num\n    .toString()\n    .split('')\n    .every((digit, i, arr) => digit === arr[arr.length - 1 - i]);\n}\n\nfunction palindromicSums(limit) {\n  let sumOfPalindromes = 0;\n  const sqrtLimit = Math.sqrt(limit);\n  const list = new Set();\n\n  for (let i = 1; i <= sqrtLimit; i++) {\n    let sumOfSquares = i * i;\n    for (let j = i + 1; j <= sqrtLimit; j++) {\n      sumOfSquares += j * j;\n      if (sumOfSquares > limit) break;\n      if (isPalindrome(sumOfSquares) && !list.has(sumOfSquares)) {\n        sumOfPalindromes += sumOfSquares;\n        list.add(sumOfSquares);\n      }\n    }\n  }\n  return sumOfPalindromes;\n}"
        }
      ],
      "tests": [
        {
          "text": "`palindromicSums(100000000)` should return `2906969179`.\n\n```js\n\nassert.strictEqual(palindromicSums(100000000), 2906969179);\n\n```\n\n`palindromicSums(100)` should return `137`.",
          "testCode": "assert.strictEqual(palindromicSums(100), 137);"
        },
        {
          "text": "`palindromicSums(1000)` should return `4164`.",
          "testCode": "assert.strictEqual(palindromicSums(1000),4164);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301752,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-125-palindromic-sums.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3ea1000cf542c50fefd",
      "title": "Problem 126: Cuboid layers",
      "challengeType": 1,
      "dashedName": "problem-126-cuboid-layers",
      "description": "The minimum number of cubes to cover every visible face on a cuboid measuring 3 x 2 x 1 is twenty-two.\n\n<img alt=\"3x2x1 cuboid covered by twenty-two 1x1x1 cubes\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/cuboid-layers.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIf we add a second layer to this solid it would require forty-six cubes to cover every visible face, the third layer would require seventy-eight cubes, and the fourth layer would require one-hundred and eighteen cubes to cover every visible face.\n\nHowever, the first layer on a cuboid measuring 5 x 1 x 1 also requires twenty-two cubes; similarly, the first layer on cuboids measuring 5 x 3 x 1, 7 x 2 x 1, and 11 x 1 x 1 all contain forty-six cubes.\n\nWe shall define $C(n)$ to represent the number of cuboids that contain $n$ cubes in one of its layers. So $C(22) = 2$, $C(46) = 4$, $C(78) = 5$, and $C(118) = 8$.\n\nIt turns out that 154 is the least value of $n$ for which $C(n) = 10$.\n\nFind the least value of $n$ for which $C(n) = 1000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cuboidLayers() {\n\n  return true;\n}\n\ncuboidLayers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`cuboidLayers()` should return `18522`.",
          "testCode": "assert.strictEqual(cuboidLayers(), 18522);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301753,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-126-cuboid-layers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3ec1000cf542c50fefe",
      "title": "Problem 127: abc-hits",
      "challengeType": 1,
      "dashedName": "problem-127-abc-hits",
      "description": "The radical of $n$, $rad(n)$, is the product of distinct prime factors of $n$. For example, $504 = 2^3 × 3^2 × 7$, so $rad(504) = 2 × 3 × 7 = 42$.\n\nWe shall define the triplet of positive integers (a, b, c) to be an abc-hit if:\n\n1. $GCD(a, b) = GCD(a, c) = GCD(b, c) = 1$\n2. $a &lt; b$\n3. $a + b = c$\n4. $rad(abc) &lt; c$\n\nFor example, (5, 27, 32) is an abc-hit, because:\n\n1. $GCD(5, 27) = GCD(5, 32) = GCD(27, 32) = 1$\n2. $5 &lt; 27$\n3. $5 + 27 = 32$\n4. $rad(4320) = 30 &lt; 32$\n\nIt turns out that abc-hits are quite rare and there are only thirty-one abc-hits for $c &lt; 1000$, with $\\sum{c} = 12523$.\n\nFind $\\sum{c}$ for $c &lt; 120000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function abcHits() {\n\n  return true;\n}\n\nabcHits();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`abcHits()` should return `18407904`.",
          "testCode": "assert.strictEqual(abcHits(), 18407904);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301754,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-127-abc-hits.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3ec1000cf542c50feff",
      "title": "Problem 128: Hexagonal tile differences",
      "challengeType": 1,
      "dashedName": "problem-128-hexagonal-tile-differences",
      "description": "A hexagonal tile with number 1 is surrounded by a ring of six hexagonal tiles, starting at \"12 o'clock\" and numbering the tiles 2 to 7 in an anti-clockwise direction.\n\nNew rings are added in the same fashion, with the next rings being numbered 8 to 19, 20 to 37, 38 to 61, and so on. The diagram below shows the first three rings.\n\n<img alt=\"three first rings of arranged hexagonal tiles with numbers 1 to 37, and with highlighted tiles 8 and 17\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/hexagonal-tile-differences.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nBy finding the difference between tile $n$ and each of its six neighbors we shall define $PD(n)$ to be the number of those differences which are prime.\n\nFor example, working clockwise around tile 8 the differences are 12, 29, 11, 6, 1, and 13. So $PD(8) = 3$.\n\nIn the same way, the differences around tile 17 are 1, 17, 16, 1, 11, and 10, hence $PD(17) = 2$.\n\nIt can be shown that the maximum value of $PD(n)$ is $3$.\n\nIf all of the tiles for which $PD(n) = 3$ are listed in ascending order to form a sequence, the 10th tile would be 271.\n\nFind the 2000th tile in this sequence.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hexagonalTile(tileIndex) {\n\n  return true;\n}\n\nhexagonalTile(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSquaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\n\nfunction hexagonalTile(tileIndex) {\n  const primeSeive = new PrimeSeive(tileIndex * 420);\n  let count = 1;\n  let n = 1;\n  let number = 0;\n\n  while (count < tileIndex) {\n    if (primeSeive.isPrime(6*n - 1) &&\n        primeSeive.isPrime(6*n + 1) &&\n        primeSeive.isPrime(12*n + 5)) {\n      number = 3*n*n - 3*n + 2;\n      count++;\n      if (count >= tileIndex) break;\n    }\n    if (primeSeive.isPrime(6*n + 5) &&\n        primeSeive.isPrime(6*n - 1) &&\n        primeSeive.isPrime(12*n - 7) && n != 1) {\n      number = 3*n*n + 3*n + 1;\n      count++;\n    }\n    n++;\n  }\n  return number;\n}"
        }
      ],
      "tests": [
        {
          "text": "`hexagonalTile(10)` should return `271`.",
          "testCode": "assert.strictEqual(hexagonalTile(10), 271);"
        },
        {
          "text": "`hexagonalTile(2000)` should return `14516824220`.",
          "testCode": "assert.strictEqual(hexagonalTile(2000), 14516824220);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301755,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-128-hexagonal-tile-differences.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3ef1000cf542c50ff01",
      "title": "Problem 129: Repunit divisibility",
      "challengeType": 1,
      "dashedName": "problem-129-repunit-divisibility",
      "description": "A number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.\n\nGiven that $n$ is a positive integer and $GCD(n, 10) = 1$, it can be shown that there always exists a value, $k$, for which $R(k)$ is divisible by $n$, and let $A(n)$ be the least such value of $k$; for example, $A(7) = 6$ and $A(41) = 5$.\n\nThe least value of $n$ for which $A(n)$ first exceeds ten is 17.\n\nFind the least value of $n$ for which $A(n)$ first exceeds one-million.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function repunitDivisibility() {\n\n  return true;\n}\n\nrepunitDivisibility();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`repunitDivisibility()` should return `1000023`.",
          "testCode": "assert.strictEqual(repunitDivisibility(), 1000023);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301756,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-129-repunit-divisibility.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3ee1000cf542c50ff00",
      "title": "Problem 130: Composites with prime repunit property",
      "challengeType": 1,
      "dashedName": "problem-130-composites-with-prime-repunit-property",
      "description": "A number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.\n\nGiven that $n$ is a positive integer and $GCD(n, 10) = 1$, it can be shown that there always exists a value, $k$, for which $R(k)$ is divisible by $n$, and let $A(n)$ be the least such value of $k$; for example, $A(7) = 6$ and $A(41) = 5$.\n\nYou are given that for all primes, $p > 5$, that $p − 1$ is divisible by $A(p)$. For example, when $p = 41, A(41) = 5$, and 40 is divisible by 5.\n\nHowever, there are rare composite values for which this is also true; the first five examples being 91, 259, 451, 481, and 703.\n\nFind the sum of the first twenty-five composite values of $n$ for which $GCD(n, 10) = 1$ and $n − 1$ is divisible by $A(n)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function compositeRepunit() {\n\n  return true;\n}\n\ncompositeRepunit();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`compositeRepunit()` should return `149253`.",
          "testCode": "assert.strictEqual(compositeRepunit(), 149253);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301758,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-130-composites-with-prime-repunit-property.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3ef1000cf542c50ff02",
      "title": "Problem 131: Prime cube partnership",
      "challengeType": 1,
      "dashedName": "problem-131-prime-cube-partnership",
      "description": "There are some prime values, $p$, for which there exists a positive integer, $n$, such that the expression $n^3 + n^{2}p$ is a perfect cube.\n\nFor example, when $p = 19,\\\\ 8^3 + 8^2 × 19 = {12}^3$.\n\nWhat is perhaps most surprising is that the value of $n$ is unique for each prime with this property, and there are only four such primes below one hundred.\n\nHow many primes below one million have this remarkable property?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeCubePartnership() {\n\n  return true;\n}\n\nprimeCubePartnership();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeCubePartnership()` should return `173`.",
          "testCode": "assert.strictEqual(primeCubePartnership(), 173);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301759,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-131-prime-cube-partnership.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f11000cf542c50ff03",
      "title": "Problem 132: Large repunit factors",
      "challengeType": 1,
      "dashedName": "problem-132-large-repunit-factors",
      "description": "A number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$.\n\nFor example, $R(10) = 1111111111 = 11 × 41 × 271 × 9091$, and the sum of these prime factors is 9414.\n\nFind the sum of the first forty prime factors of $R({10}^9)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largeRepunitFactors() {\n\n  return true;\n}\n\nlargeRepunitFactors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`largeRepunitFactors()` should return `843296`.",
          "testCode": "assert.strictEqual(largeRepunitFactors(), 843296);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301760,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-132-large-repunit-factors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f21000cf542c50ff04",
      "title": "Problem 133: Repunit nonfactors",
      "challengeType": 1,
      "dashedName": "problem-133-repunit-nonfactors",
      "description": "A number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.\n\nLet us consider repunits of the form $R({10}^n)$.\n\nAlthough $R(10)$, $R(100)$, or $R(1000)$ are not divisible by 17, $R(10000)$ is divisible by 17. Yet there is no value of n for which $R({10}^n)$ will divide by 19. Remarkably, 11, 17, 41, and 73 are the only four primes below one-hundred that can be a factor of $R({10}^n)$.\n\nFind the sum of all the primes below one-hundred thousand that will never be a factor of $R({10}^n)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function repunitNonfactors() {\n\n  return true;\n}\n\nrepunitNonfactors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`repunitNonfactors()` should return `453647705`.",
          "testCode": "assert.strictEqual(repunitNonfactors(), 453647705);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301761,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-133-repunit-nonfactors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f21000cf542c50ff05",
      "title": "Problem 134: Prime pair connection",
      "challengeType": 1,
      "dashedName": "problem-134-prime-pair-connection",
      "description": "Consider the consecutive primes $p_1 = 19$ and $p_2 = 23$. It can be verified that 1219 is the smallest number such that the last digits are formed by $p_1$ whilst also being divisible by $p_2$.\n\nIn fact, with the exception of $p_1 = 3$ and $p_2 = 5$, for every pair of consecutive primes, $p_2 > p_1$, there exist values of $n$ for which the last digits are formed by $p_1$ and $n$ is divisible by $p_2$. Let $S$ be the smallest of these values of $n$.\n\nFind $\\sum{S}$ for every pair of consecutive primes with $5 ≤ p_1 ≤ 1000000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primePairConnection() {\n\n  return true;\n}\n\nprimePairConnection();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primePairConnection()` should return `18613426663617120`.",
          "testCode": "assert.strictEqual(primePairConnection(), 18613426663617120);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301762,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-134-prime-pair-connection.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f31000cf542c50ff06",
      "title": "Problem 135: Same differences",
      "challengeType": 1,
      "dashedName": "problem-135-same-differences",
      "description": "Given the positive integers, $x$, $y$, and $z$, are consecutive terms of an arithmetic progression, the least value of the positive integer, $n$, for which the equation, $x^2 − y^2 − z^2 = n$, has exactly two solutions is $n = 27$:\n\n$$34^2 − 27^2 − 20^2 = 12^2 − 9^2 − 6^2 = 27$$\n\nIt turns out that $n = 1155$ is the least value which has exactly ten solutions.\n\nHow many values of $n$ less than one million have exactly ten distinct solutions?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sameDifferences() {\n\n  return true;\n}\n\nsameDifferences();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sameDifferences()` should return `4989`.",
          "testCode": "assert.strictEqual(sameDifferences(), 4989);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301763,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-135-same-differences.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f51000cf542c50ff07",
      "title": "Problem 136: Singleton difference",
      "challengeType": 1,
      "dashedName": "problem-136-singleton-difference",
      "description": "The positive integers, $x$, $y$, and $z$, are consecutive terms of an arithmetic progression. Given that $n$ is a positive integer, the equation, $x^2 − y^2 − z^2 = n$, has exactly one solution when $n = 20$:\n\n$$13^2 − 10^2 − 7^2 = 20$$\n\nIn fact, there are twenty-five values of $n$ below one hundred for which the equation has a unique solution.\n\nHow many values of $n$ less than fifty million have exactly one solution?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function singletonDifference() {\n\n  return true;\n}\n\nsingletonDifference();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`singletonDifference()` should return `2544559`.",
          "testCode": "assert.strictEqual(singletonDifference(), 2544559);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301764,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-136-singleton-difference.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f51000cf542c50ff08",
      "title": "Problem 137: Fibonacci golden nuggets",
      "challengeType": 1,
      "dashedName": "problem-137-fibonacci-golden-nuggets",
      "description": "Consider the infinite polynomial series $A_{F}(x) = xF_1 + x^2F_2 + x^3F_3 + \\ldots$, where $F_k$ is the $k$th term in the Fibonacci sequence: $1, 1, 2, 3, 5, 8, \\ldots$; that is, $F_k = F_{k − 1} + F_{k − 2}, F_1 = 1$ and $F_2 = 1$.\n\nFor this problem we shall be interested in values of $x$ for which $A_{F}(x)$ is a positive integer.\n\nSurprisingly\n\n$$\\begin{align}\nA_F(\\frac{1}{2}) & = (\\frac{1}{2}) × 1 + {(\\frac{1}{2})}^2 × 1 + {(\\frac{1}{2})}^3 × 2 + {(\\frac{1}{2})}^4 × 3 + {(\\frac{1}{2})}^5 × 5 + \\cdots \\\\\\\\\n                 & = \\frac{1}{2} + \\frac{1}{4} + \\frac{2}{8} + \\frac{3}{16} + \\frac{5}{32} + \\cdots \\\\\\\\\n                 & = 2\n\\end{align}$$\n\nThe corresponding values of $x$ for the first five natural numbers are shown below.\n\n| $x$                       | $A_F(x)$ |\n|---------------------------|----------|\n| $\\sqrt{2} − 1$            | $1$      |\n| $\\frac{1}{2}$             | $2$      |\n| $\\frac{\\sqrt{13} − 2}{3}$ | $3$      |\n| $\\frac{\\sqrt{89} − 5}{8}$ | $4$      |\n| $\\frac{\\sqrt{34} − 3}{5}$ | $5$      |\n\nWe shall call $A_F(x)$ a golden nugget if $x$ is rational, because they become increasingly rarer; for example, the 10th golden nugget is 74049690.\n\nFind the 15th golden nugget.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function goldenNugget() {\n\n  return true;\n}\n\ngoldenNugget();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`goldenNugget()` should return `1120149658760`.",
          "testCode": "assert.strictEqual(goldenNugget(), 1120149658760);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301765,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-137-fibonacci-golden-nuggets.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f61000cf542c50ff09",
      "title": "Problem 138: Special isosceles triangles",
      "challengeType": 1,
      "dashedName": "problem-138-special-isosceles-triangles",
      "description": "Consider the isosceles triangle with base length, $b = 16$, and legs, $L = 17$.\n\n<img alt=\"isosceles triangle with edges named as L - two edges with the same length and base of the triangle as b; and height of the triangle - h from the base of the triangle to the angle between L edges\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/special-isosceles-triangles.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nBy using the Pythagorean theorem, it can be seen that the height of the triangle, $h = \\sqrt{{17}^2 − 8^2} = 15$, which is one less than the base length.\n\nWith $b = 272$ and $L = 305$, we get $h = 273$, which is one more than the base length, and this is the second smallest isosceles triangle with the property that $h = b ± 1$.\n\nFind $\\sum{L}$ for the twelve smallest isosceles triangles for which $h = b ± 1$ and $b$, $L$ are positive integers.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function isoscelesTriangles() {\n\n  return true;\n}\n\nisoscelesTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`isoscelesTriangles()` should return `1118049290473932`.",
          "testCode": "assert.strictEqual(isoscelesTriangles(), 1118049290473932);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301766,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-138-special-isosceles-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f71000cf542c50ff0a",
      "title": "Problem 139: Pythagorean tiles",
      "challengeType": 1,
      "dashedName": "problem-139-pythagorean-tiles",
      "description": "Let (a, b, c) represent the three sides of a right angle triangle with integral length sides. It is possible to place four such triangles together to form a square with length c.\n\nFor example, (3, 4, 5) triangles can be placed together to form a 5 by 5 square with a 1 by 1 hole in the middle and it can be seen that the 5 by 5 square can be tiled with twenty-five 1 by 1 squares.\n\n<img alt=\"two 5 x 5 squares: one with four 3x4x5 triangles placed to create 1x1 hole in the middle; second with twenty-five 1x1 squares\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/pythagorean-tiles.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHowever, if (5, 12, 13) triangles were used, the hole would measure 7 by 7. These 7 by 7 squares could not be used to tile the 13 by 13 square.\n\nGiven that the perimeter of the right triangle is less than one-hundred million, how many Pythagorean triangles would allow such a tiling to occur?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pythagoreanTiles() {\n\n  return true;\n}\n\npythagoreanTiles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pythagoreanTiles()` should return `10057761`.",
          "testCode": "assert.strictEqual(pythagoreanTiles(), 10057761);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301767,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-139-pythagorean-tiles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3fa1000cf542c50ff0c",
      "title": "Problem 140: Modified Fibonacci golden nuggets",
      "challengeType": 1,
      "dashedName": "problem-140-modified-fibonacci-golden-nuggets",
      "description": "Consider the infinite polynomial series $A_G(x) = xG_1 + x^2G_2 + x^3G_3 + \\cdots$, where $G_k$ is the $k$th term of the second order recurrence relation $G_k = G_{k − 1} + G_{k − 2}, G_1 = 1$ and $G_2 = 4$; that is, $1, 4, 5, 9, 14, 23, \\ldots$.\n\nFor this problem we shall be concerned with values of $x$ for which $A_G(x)$ is a positive integer.\n\nThe corresponding values of $x$ for the first five natural numbers are shown below.\n\n| $x$                         | $A_G(x)$ |\n|-----------------------------|----------|\n| $\\frac{\\sqrt{5} − 1}{4}$    | $1$      |\n| $\\frac{2}{5}$               | $2$      |\n| $\\frac{\\sqrt{22} − 2}{6}$   | $3$      |\n| $\\frac{\\sqrt{137} − 5}{14}$ | $4$      |\n| $\\frac{1}{2}$               | $5$      |\n\nWe shall call $A_G(x)$ a golden nugget if $x$ is rational because they become increasingly rarer; for example, the 20th golden nugget is 211345365. Find the sum of the first thirty golden nuggets.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function modifiedGoldenNuggets() {\n\n  return true;\n}\n\nmodifiedGoldenNuggets();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`modifiedGoldenNuggets()` should return `5673835352990`",
          "testCode": "assert.strictEqual(modifiedGoldenNuggets(), 5673835352990);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301769,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-140-modified-fibonacci-golden-nuggets.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3f91000cf542c50ff0b",
      "title": "Problem 141: Investigating progressive numbers, n, which are also square",
      "challengeType": 1,
      "dashedName": "problem-141-investigating-progressive-numbers-n-which-are-also-square",
      "description": "A positive integer, $n$, is divided by $d$ and the quotient and remainder are $q$ and $r$ respectively. In addition $d$, $q$, and $r$ are consecutive positive integer terms in a geometric sequence, but not necessarily in that order.\n\nFor example, 58 divided by 6 has a quotient of 9 and a remainder of 4. It can also be seen that 4, 6, 9 are consecutive terms in a geometric sequence (common ratio $\\frac{3}{2}$).\n\nWe will call such numbers, $n$, progressive.\n\nSome progressive numbers, such as 9 and 10404 = ${102}^2$, also happen to be perfect squares. The sum of all progressive perfect squares below one hundred thousand is 124657.\n\nFind the sum of all progressive perfect squares below one trillion (${10}^{12}$).",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function progressivePerfectSquares() {\n\n  return true;\n}\n\nprogressivePerfectSquares();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`progressivePerfectSquares()` should return `878454337159`.",
          "testCode": "assert.strictEqual(progressivePerfectSquares(), 878454337159);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301770,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-141-investigating-progressive-numbers-n-which-are-also-square.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3fa1000cf542c50ff0d",
      "title": "Problem 142: Perfect Square Collection",
      "challengeType": 1,
      "dashedName": "problem-142-perfect-square-collection",
      "description": "Find the smallest $x + y + z$ with integers $x > y > z > 0$ such that $x + y$, $x − y$, $x + z$, $x − z$, $y + z$, $y − z$ are all perfect squares.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function perfectSquareCollection() {\n\n  return true;\n}\n\nperfectSquareCollection();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`perfectSquareCollection()` should return `1006193`.",
          "testCode": "assert.strictEqual(perfectSquareCollection(), 1006193);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301771,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-142-perfect-square-collection.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3fc1000cf542c50ff0e",
      "title": "Problem 143: Investigating the Torricelli point of a triangle",
      "challengeType": 1,
      "dashedName": "problem-143-investigating-the-torricelli-point-of-a-triangle",
      "description": "Let ABC be a triangle with all interior angles being less than 120 degrees. Let X be any point inside the triangle and let $XA = p$, $XC = q$, and $XB = r$.\n\nFermat challenged Torricelli to find the position of X such that p + q + r was minimised.\n\nTorricelli was able to prove that if equilateral triangles AOB, BNC and AMC are constructed on each side of triangle ABC, the circumscribed circles of AOB, BNC, and AMC will intersect at a single point, T, inside the triangle. Moreover he proved that T, called the Torricelli/Fermat point, minimises $p + q + r$. Even more remarkable, it can be shown that when the sum is minimised, $AN = BM = CO = p + q + r$ and that AN, BM and CO also intersect at T.\n\n<img alt=\"equilateral triangles AOB, BNC and AMC constructed on each side of triangle ABC; with the circumscribed circles of AOB, BNC, and AMC will intersecting at a single point, T, inside the triangle\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/investigating-the-torricelli-point-of-a-triangle.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIf the sum is minimised and a, b, c, p, q and r are all positive integers we shall call triangle ABC a Torricelli triangle. For example, $a = 399$, $b = 455$, $c = 511$ is an example of a Torricelli triangle, with $p + q + r = 784$. Find the sum of all distinct values of $p + q + r ≤ 120000$ for Torricelli triangles.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumTorricelliTriangles() {\n\n  return true;\n}\n\nsumTorricelliTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumTorricelliTriangles()` should return `30758397`.",
          "testCode": "assert.strictEqual(sumTorricelliTriangles(), 30758397);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301772,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-143-investigating-the-torricelli-point-of-a-triangle.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3fc1000cf542c50ff0f",
      "title": "Problem 144: Investigating multiple reflections of a laser beam",
      "challengeType": 1,
      "dashedName": "problem-144-investigating-multiple-reflections-of-a-laser-beam",
      "description": "In laser physics, a \"white cell\" is a mirror system that acts as a delay line for the laser beam. The beam enters the cell, bounces around on the mirrors, and eventually works its way back out.\n\nThe specific white cell we will be considering is an ellipse with the equation $4{x}^2 + y^2 = 100$\n\nThe section corresponding to $−0.01 ≤ x ≤ +0.01$ at the top is missing, allowing the light to enter and exit through the hole.\n\n<div style=\"text-align: center\">\n  <img alt=\"light beam starting at point (0.0, 10.1), and impacting the mirror at point (1.4, -9.6)\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/investigating-multiple-reflections-of-a-laser-beam-1.png\" style=\"display: inline-block; background-color: white; padding: 10px;\">\n  <img alt=\"animation with first 10 reflections of the beam\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/investigating-multiple-reflections-of-a-laser-beam-2.gif\" style=\"display: inline-block; background-color: white; padding: 10px;\">\n</div><br>\n\nThe light beam in this problem starts at the point (0.0, 10.1) just outside the white cell, and the beam first impacts the mirror at (1.4, -9.6).\n\nEach time the laser beam hits the surface of the ellipse, it follows the usual law of reflection \"angle of incidence equals angle of reflection.\" That is, both the incident and reflected beams make the same angle with the normal line at the point of incidence.\n\nIn the figure on the left, the red line shows the first two points of contact between the laser beam and the wall of the white cell; the blue line shows the line tangent to the ellipse at the point of incidence of the first bounce.\n\nThe slope m of the tangent line at any point (x, y) of the given ellipse is: $m = −4 × \\frac{x}{y}$\n\nThe normal line is perpendicular to this tangent line at the point of incidence.\n\nThe animation on the right shows the first 10 reflections of the beam.\n\nHow many times does the beam hit the internal surface of the white cell before exiting?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function laserBeamReflections() {\n\n  return true;\n}\n\nlaserBeamReflections();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`laserBeamReflections()` should return `354`.",
          "testCode": "assert.strictEqual(laserBeamReflections(), 354);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301773,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-144-investigating-multiple-reflections-of-a-laser-beam.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3fd1000cf542c50ff10",
      "title": "Problem 145: How many reversible numbers are there below one-billion?",
      "challengeType": 1,
      "dashedName": "problem-145-how-many-reversible-numbers-are-there-below-one-billion",
      "description": "Some positive integers $n$ have the property that the sum [ $n + reverse(n)$ ] consists entirely of odd (decimal) digits. For instance, $36 + 63 = 99$ and $409 + 904 = 1313$. We will call such numbers reversible; so 36, 63, 409, and 904 are reversible. Leading zeroes are not allowed in either $n$ or $reverse(n)$.\n\nThere are 120 reversible numbers below one-thousand.\n\nHow many reversible numbers are there below one-billion (${10}^9$)?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function reversibleNumbers() {\n\n  return true;\n}\n\nreversibleNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`reversibleNumbers()` should return `608720`.",
          "testCode": "assert.strictEqual(reversibleNumbers(), 608720);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301774,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-145-how-many-reversible-numbers-are-there-below-one-billion.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3fe1000cf542c50ff11",
      "title": "Problem 146: Investigating a Prime Pattern",
      "challengeType": 1,
      "dashedName": "problem-146-investigating-a-prime-pattern",
      "description": "The smallest positive integer $n$ for which the numbers $n^2 + 1$, $n^2 + 3$, $n^2 + 7$, $n^2 + 9$, $n^2 + 13$, and $n^2 + 27$ are consecutive primes is 10. The sum of all such integers $n$ below one-million is 1242490.\n\nWhat is the sum of all such integers $n$ below 150 million?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primePattern() {\n\n  return true;\n}\n\nprimePattern();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primePattern()` should return `676333270`.",
          "testCode": "assert.strictEqual(primePattern(), 676333270);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301775,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-146-investigating-a-prime-pattern.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f3ff1000cf542c50ff12",
      "title": "Problem 147: Rectangles in cross-hatched grids",
      "challengeType": 1,
      "dashedName": "problem-147-rectangles-in-cross-hatched-grids",
      "description": "In a 3x2 cross-hatched grid, a total of 37 different rectangles could be situated within that grid as indicated in the sketch.\n\n<img alt=\"ways of situating different rectangles within cross-hatched 3x2 grid\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/rectangles-in-cross-hatched-grids.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThere are 5 grids smaller than 3x2, vertical and horizontal dimensions being important, i.e. 1x1, 2x1, 3x1, 1x2 and 2x2. If each of them is cross-hatched, the following number of different rectangles could be situated within those smaller grids:\n\n$$\\begin{array}{|c|c|}\n\\hline\n  1 \\times 1 & 1  \\\\\\\\ \\hline\n  2 \\times 1 & 4  \\\\\\\\ \\hline\n  3 \\times 1 & 8  \\\\\\\\ \\hline\n  1 \\times 2 & 4  \\\\\\\\ \\hline\n  2 \\times 2 & 18 \\\\\\\\ \\hline\n\\end{array}$$\n\nAdding those to the 37 of the 3x2 grid, a total of 72 different rectangles could be situated within 3x2 and smaller grids.\n\nHow many different rectangles could be situated within 47x43 and smaller grids?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function crossHatchedRectangles() {\n\n  return true;\n}\n\ncrossHatchedRectangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`crossHatchedRectangles()` should return `846910284`.",
          "testCode": "assert.strictEqual(crossHatchedRectangles(), 846910284);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301776,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-147-rectangles-in-cross-hatched-grids.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4021000cf542c50ff14",
      "title": "Problem 148: Exploring Pascal''s triangle",
      "challengeType": 1,
      "dashedName": "problem-148-exploring-pascals-triangle",
      "description": "We can easily verify that none of the entries in the first seven rows of Pascal's triangle are divisible by 7:\n\n```markup\n            1\n          1   1\n        1   2   1\n      1   3   3   1\n    1   4   6   4   1\n  1   5   10  10  5   1\n1   6   15  20  15  6   1\n```\n\nHowever, if we check the first one hundred rows, we will find that only 2361 of the 5050 entries are not divisible by 7.",
      "instructions": "Find the number of entries which are not divisible by 7 in the first one billion (${10}^9$) rows of Pascal's triangle.",
      "boilerplate": [
        {
          "language": "js",
          "code": "function entriesOfPascalsTriangle() {\n\n  return true;\n}\n\nentriesOfPascalsTriangle();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`entriesOfPascalsTriangle()` should return `2129970655314432`.",
          "testCode": "assert.strictEqual(entriesOfPascalsTriangle(), 2129970655314432);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301777,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-148-exploring-pascals-triangle.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4021000cf542c50ff13",
      "title": "Problem 149: Searching for a maximum-sum subsequence",
      "challengeType": 1,
      "dashedName": "problem-149-searching-for-a-maximum-sum-subsequence",
      "description": "Looking at the table below, it is easy to verify that the maximum possible sum of adjacent numbers in any direction (horizontal, vertical, diagonal or anti-diagonal) is $16 (= 8 + 7 + 1)$.\n\n$$\\begin{array}{|r|r|r|r|}\n  \\hline\n  −2 &  5 &  3 & 2 \\\\\\\\ \\hline\n   9 & −6 &  5 & 1 \\\\\\\\ \\hline\n   3 &  2 &  7 & 3 \\\\\\\\ \\hline\n  −1 &  8 & −4 & 8 \\\\\\\\ \\hline\n\\end{array}$$\n\nNow, let us repeat the search, but on a much larger scale:\n\nFirst, generate four million pseudo-random numbers using a specific form of what is known as a \"Lagged Fibonacci Generator\":\n\nFor $1 ≤ k ≤ 55$, $s_k = (100003 − 200003k + 300007{k}^3) \\\\ (modulo\\\\ 1000000) − 500000$.\n\nFor $56 ≤ k ≤ 4000000$, $s_k = (s_{k − 24} + s_{k − 55} + 1000000) \\\\ (modulo\\\\ 1000000) − 500000$.\n\nThus, $s_{10} = −393027$ and $s_{100} = 86613$.\n\nThe terms of $s$ are then arranged in a 2000×2000 table, using the first 2000 numbers to fill the first row (sequentially), the next 2000 numbers to fill the second row, and so on.\n\nFinally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal).",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximumSubSequence() {\n\n  return true;\n}\n\nmaximumSubSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`maximumSubSequence()` should return `52852124`.",
          "testCode": "assert.strictEqual(maximumSubSequence(), 52852124);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301778,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-149-searching-for-a-maximum-sum-subsequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4031000cf542c50ff15",
      "title": ">-",
      "challengeType": 1,
      "dashedName": "problem-150-searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum",
      "description": "In a triangular array of positive and negative integers, we wish to find a sub-triangle such that the sum of the numbers it contains is the smallest possible.\n\nIn the example below, it can be easily verified that the marked triangle satisfies this condition having a sum of −42.\n\n<img alt=\"triangular array, with marked sub-triangle, having sum of -42\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWe wish to make such a triangular array with one thousand rows, so we generate 500500 pseudo-random numbers $s_k$ in the range $±2^{19}$, using a type of random number generator (known as a Linear Congruential Generator) as follows:\n\n$$\\begin{align}\n  t := & \\\\ 0\\\\\\\\\n  \\text{for}\\\\ & k = 1\\\\ \\text{up to}\\\\ k = 500500:\\\\\\\\\n  & t := (615949 × t + 797807)\\\\ \\text{modulo}\\\\ 2^{20}\\\\\\\\\n  & s_k := t − 219\\\\\\\\\n\\end{align}$$\n\nThus: $s_1 = 273519$, $s_2 = −153582$, $s_3 = 450905$ etc.\n\nOur triangular array is then formed using the pseudo-random numbers thus:\n\n$$\ns_1 \\\\\\\\\ns_2\\\\;s_3 \\\\\\\\\ns_4\\\\; s_5\\\\; s_6 \\\\\\\\\ns_7\\\\; s_8\\\\; s_9\\\\; s_{10} \\\\\\\\\n\\ldots\n$$\n\nSub-triangles can start at any element of the array and extend down as far as we like (taking-in the two elements directly below it from the next row, the three elements directly below from the row after that, and so on).\n\nThe \"sum of a sub-triangle\" is defined as the sum of all the elements it contains.\n\nFind the smallest possible sub-triangle sum.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function smallestSubTriangleSum() {\n\n  return true;\n}\n\nsmallestSubTriangleSum();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`smallestSubTriangleSum()` should return `-271248680`.",
          "testCode": "assert.strictEqual(smallestSubTriangleSum(), -271248680);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301781,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-150-searching-a-triangular-array-for-a-sub-triangle-having-minimum-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4031000cf542c50ff16",
      "title": "Problem 151: Paper sheets of standard sizes: an expected-value problem",
      "challengeType": 1,
      "dashedName": "problem-151-paper-sheets-of-standard-sizes-an-expected-value-problem",
      "description": "A printing shop runs 16 batches (jobs) every week and each batch requires a sheet of special color-proofing paper of size A5.\n\nEvery Monday morning, the foreman opens a new envelope, containing a large sheet of the special paper with size A1.\n\nHe proceeds to cut it in half, thus getting two sheets of size A2. Then he cuts one of them in half to get two sheets of size A3 and so on until he obtains the A5-size sheet needed for the first batch of the week.\n\nAll the unused sheets are placed back in the envelope.\n\n<img alt=\"A1-size sheet split into: A2, A3, A4 and two A5 sheets\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/paper-sheets-of-standard-sizes-an-expected-value-problem.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nAt the beginning of each subsequent batch, he takes one sheet of paper from the envelope at random. If it is of size A5, he uses it. If it is larger, he repeats the 'cut-in-half' procedure until he has what he needs, and any remaining sheets are always placed back in the envelope.\n\nExcluding the first and last batch of the week, find the expected number of times (during each week) that the foreman finds a single sheet of paper in the envelope.\n\nGive your answer rounded to six decimal places using the format `x.xxxxxx`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function expectedValueProblem() {\n\n  return true;\n}\n\nexpectedValueProblem();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`expectedValueProblem()` should return `0.464399`.",
          "testCode": "assert.strictEqual(expectedValueProblem(), 0.464399);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301782,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-151-paper-sheets-of-standard-sizes-an-expected-value-problem.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4041000cf542c50ff17",
      "title": "Problem 152: Writing one half as a sum of inverse squares",
      "challengeType": 1,
      "dashedName": "problem-152-writing-one-half-as-a-sum-of-inverse-squares",
      "description": "There are several ways to write the number $\\frac{1}{2}$ as a sum of inverse squares using distinct integers.\n\nFor instance, the numbers {2,3,4,5,7,12,15,20,28,35} can be used:\n\n$$\\frac{1}{2} = \\frac{1}{2^2} + \\frac{1}{3^2} + \\frac{1}{4^2} + \\frac{1}{5^2} + \\frac{1}{7^2} + \\frac{1}{{12}^2} + \\frac{1}{{15}^2} + \\frac{1}{{20}^2} + \\frac{1}{{28}^2} + \\frac{1}{{35}^2}$$\n\nIn fact, only using integers between 2 and 45 inclusive, there are exactly three ways to do it, the remaining two being: {2,3,4,6,7,9,10,20,28,35,36,45} and {2,3,4,6,7,9,12,15,28,30,35,36,45}.\n\nHow many ways are there to write the number $\\frac{1}{2}$ as a sum of inverse squares using distinct integers between 2 and 80 inclusive?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumInverseSquares() {\n\n  return true;\n}\n\nsumInverseSquares();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumInverseSquares()` should return `301`.",
          "testCode": "assert.strictEqual(sumInverseSquares(), 301);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301783,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-152-writing-one-half-as-a-sum-of-inverse-squares.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4051000cf542c50ff18",
      "title": "Problem 153: Investigating Gaussian Integers",
      "challengeType": 1,
      "dashedName": "problem-153-investigating-gaussian-integers",
      "description": "As we all know the equation $x^2 = -1$ has no solutions for real $x$.\n\nIf we however introduce the imaginary number $i$ this equation has two solutions: $x = i$ and $x = -i$.\n\nIf we go a step further the equation ${(x - 3)}^2 = -4$ has two complex solutions: $x = 3 + 2i$ and $x = 3 - 2i$, which are called each others' complex conjugate.\n\nNumbers of the form $a + bi$ are called complex numbers.\n\nIn general $a + bi$ and $a − bi$ are each other's complex conjugate. A Gaussian Integer is a complex number $a + bi$ such that both $a$ and $b$ are integers.\n\nThe regular integers are also Gaussian integers (with $b = 0$).\n\nTo distinguish them from Gaussian integers with $b ≠ 0$ we call such integers \"rational integers.\"\n\nA Gaussian integer is called a divisor of a rational integer $n$ if the result is also a Gaussian integer.\n\nIf for example we divide 5 by $1 + 2i$ we can simplify in the following manner:\n\nMultiply numerator and denominator by the complex conjugate of $1 + 2i$: $1 − 2i$.\n\nThe result is:\n\n$$\\frac{5}{1 + 2i} = \\frac{5}{1 + 2i} \\frac{1 - 2i}{1 - 2i} = \\frac{5(1 - 2i)}{1 - {(2i)}^2} = \\frac{5(1 - 2i)}{1 - (-4)} = \\frac{5(1 - 2i)}{5} = 1 - 2i$$\n\nSo $1 + 2i$ is a divisor of 5.\n\nNote that $1 + i$ is not a divisor of 5 because:\n\n$$\\frac{5}{1 + i} = \\frac{5}{2} - \\frac{5}{2}i$$\n\nNote also that if the Gaussian Integer ($a + bi$) is a divisor of a rational integer $n$, then its complex conjugate ($a − bi$) is also a divisor of $n$. In fact, 5 has six divisors such that the real part is positive: {1, 1 + 2i, 1 − 2i, 2 + i, 2 − i, 5}.\n\nThe following is a table of all of the divisors for the first five positive rational integers:\n\n| n | Gaussian integer divisors with positive real part | Sum s(n) of these divisors |\n|---|---------------------------------------------------|----------------------------|\n| 1 | 1                                                 | 1                          |\n| 2 | 1, 1 + i, 1 - i, 2                                | 5                          |\n| 3 | 1, 3                                              | 4                          |\n| 4 | 1, 1 + i, 1 - i, 2, 2 + 2i, 2 - 2i, 4             | 13                         |\n| 5 | 1, 1 + 2i, 1 - 2i, 2 + i, 2 - i, 5                | 12                         |\n\nFor divisors with positive real parts, then, we have: $\\displaystyle\\sum_{n=1}^5 s(n) = 35$.\n\nFor $1 ≤ n ≤ {10}^5$, $\\displaystyle\\sum_{n = 1}^{{10}^5} s(n) = 17924657155$.\n\nWhat is $\\displaystyle\\sum_{n=1}^{{10}^8} s(n)$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumGaussianIntegers() {\n\n  return true;\n}\n\nsumGaussianIntegers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumGaussianIntegers()` should return `17971254122360636`.",
          "testCode": "assert.strictEqual(sumGaussianIntegers(), 17971254122360636);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301784,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-153-investigating-gaussian-integers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4071000cf542c50ff19",
      "title": "Problem 154: Exploring Pascal''s pyramid",
      "challengeType": 1,
      "dashedName": "problem-154-exploring-pascals-pyramid",
      "description": "A triangular pyramid is constructed using spherical balls so that each ball rests on exactly three balls of the next lower level.\n\n<img alt=\"triangular pyramid constructed using spherical balls with four levels\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/exploring-pascals-pyramid.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThen, we calculate the number of paths leading from the apex to each position: A path starts at the apex and progresses downwards to any of the three spheres directly below the current position. Consequently, the number of paths to reach a certain position is the sum of the numbers immediately above it (depending on the position, there are up to three numbers above it).\n\nThe result is Pascal's pyramid and the numbers at each level n are the coefficients of the trinomial expansion ${(x + y + z)}^n$.\n\nHow many coefficients in the expansion of ${(x + y + z)}^{200000}$ are multiples of ${10}^{12}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pascalsPyramid() {\n\n  return true;\n}\n\npascalsPyramid();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pascalsPyramid()` should return `479742450`.",
          "testCode": "assert.strictEqual(pascalsPyramid(), 479742450);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301785,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-154-exploring-pascals-pyramid.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4081000cf542c50ff1a",
      "title": "Problem 155: Counting Capacitor Circuits",
      "challengeType": 1,
      "dashedName": "problem-155-counting-capacitor-circuits",
      "description": "An electric circuit uses exclusively identical capacitors of the same value C.\n\nThe capacitors can be connected in series or in parallel to form sub-units, which can then be connected in series or in parallel with other capacitors or other sub-units to form larger sub-units, and so on up to a final circuit.\n\nUsing this simple procedure and up to n identical capacitors, we can make circuits having a range of different total capacitances. For example, using up to $n = 3$ capacitors of $60 μF$ each, we can obtain the following 7 distinct total capacitance values:\n\n<img alt=\"example circuits having up to three capacitors, each of 60 μF\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/counting-capacitor-circuits.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIf we denote by $D(n)$ the number of distinct total capacitance values we can obtain when using up to $n$ equal-valued capacitors and the simple procedure described above, we have: $D(1) = 1, D(2) = 3, D(3)=7, \\ldots$\n\nFind $D(18)$.\n\nReminder: When connecting capacitors $C_1$, $C_2$ etc in parallel, the total capacitance is $C_T = C_1 + C_2 + \\cdots$, whereas when connecting them in series, the overall capacitance is given by: $\\frac{1}{C_T} = \\frac{1}{C_1} + \\frac{1}{C_2} + \\cdots$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function capacitanceValues() {\n\n  return true;\n}\n\ncapacitanceValues();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`capacitanceValues()` should return `3857447`.",
          "testCode": "assert.strictEqual(capacitanceValues(), 3857447);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301786,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-155-counting-capacitor-circuits.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4091000cf542c50ff1b",
      "title": "Problem 156: Counting Digits",
      "challengeType": 1,
      "dashedName": "problem-156-counting-digits",
      "description": "Starting from zero the natural numbers are written down in base 10 like this:\n\n0 1 2 3 4 5 6 7 8 9 10 11 12....\n\nConsider the digit $d = 1$. After we write down each number n, we will update the number of ones that have occurred and call this number $f(n, 1)$. The first values for $f(n, 1)$, then, are as follows:\n\n| $n$ | $f(n, 1)$ |\n|-----|-----------|\n| 0   | 0         |\n| 1   | 1         |\n| 2   | 1         |\n| 3   | 1         |\n| 4   | 1         |\n| 5   | 1         |\n| 6   | 1         |\n| 7   | 1         |\n| 8   | 1         |\n| 9   | 1         |\n| 10  | 2         |\n| 11  | 4         |\n| 12  | 5         |\n\nNote that $f(n, 1)$ never equals 3.\n\nSo the first two solutions of the equation $f(n, 1) = n$ are $n = 0$ and $n = 1$. The next solution is $n = 199981$. In the same manner the function $f(n, d)$ gives the total number of digits d that have been written down after the number $n$ has been written.\n\nIn fact, for every digit $d ≠ 0$, 0 is the first solution of the equation $f(n, d) = n$. Let $s(d)$ be the sum of all the solutions for which $f(n, d) = n$.\n\nYou are given that $s(1) = 22786974071$. Find $\\sum{s(d)}$ for $1 ≤ d ≤ 9$.\n\nNote: if, for some $n$, $f(n, d) = n$ for more than one value of $d$ this value of $n$ is counted again for every value of $d$ for which $f(n, d) = n$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function countingDigits() {\n\n  return true;\n}\n\ncountingDigits();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`countingDigits()` should return `21295121502550`.",
          "testCode": "assert.strictEqual(countingDigits(), 21295121502550);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301787,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-156-counting-digits.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4091000cf542c50ff1c",
      "title": "Problem 157: Solving the diophantine equation",
      "challengeType": 1,
      "dashedName": "problem-157-solving-the-diophantine-equation",
      "description": "Consider the diophantine equation $\\frac{1}{a} + \\frac{1}{b} = \\frac{p}{{10}^n}$ with $a$, $b$, $p$, $n$ positive integers and $a ≤ b$.\n\nFor $n = 1$ this equation has 20 solutions that are listed below:\n\n$$\\begin{array}{lllll}\n  \\frac{1}{1}  + \\frac{1}{1}  = \\frac{20}{10} & \\frac{1}{1} + \\frac{1}{2}  = \\frac{15}{10}\n& \\frac{1}{1}  + \\frac{1}{5}  = \\frac{12}{10} & \\frac{1}{1} + \\frac{1}{10} = \\frac{11}{10}\n& \\frac{1}{2}  + \\frac{1}{2}  = \\frac{10}{10} \\\\\\\\\n  \\frac{1}{2}  + \\frac{1}{5}  = \\frac{7}{10}   & \\frac{1}{2} + \\frac{1}{10} = \\frac{6}{10}\n& \\frac{1}{3}  + \\frac{1}{6}  = \\frac{5}{10}   & \\frac{1}{3} + \\frac{1}{15} = \\frac{4}{10}\n& \\frac{1}{4}  + \\frac{1}{4}  = \\frac{5}{10} \\\\\\\\\n  \\frac{1}{4}  + \\frac{1}{4}  = \\frac{5}{10}  & \\frac{1}{5}  + \\frac{1}{5}  = \\frac{4}{10}\n& \\frac{1}{5}  + \\frac{1}{10} = \\frac{3}{10}  & \\frac{1}{6}  + \\frac{1}{30} = \\frac{2}{10}\n& \\frac{1}{10} + \\frac{1}{10} = \\frac{2}{10} \\\\\\\\\n  \\frac{1}{11} + \\frac{1}{110} = \\frac{1}{10} & \\frac{1}{12} + \\frac{1}{60}  = \\frac{1}{10}\n& \\frac{1}{14} + \\frac{1}{35}  = \\frac{1}{10} & \\frac{1}{15} + \\frac{1}{30}  = \\frac{1}{10}\n& \\frac{1}{20} + \\frac{1}{20}  = \\frac{1}{10}\n\\end{array}$$\n\nHow many solutions has this equation for $1 ≤ n ≤ 9$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function diophantineEquation() {\n\n  return true;\n}\n\ndiophantineEquation();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`diophantineEquation()` should return `53490`.",
          "testCode": "assert.strictEqual(diophantineEquation(), 53490);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301788,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-157-solving-the-diophantine-equation.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f40a1000cf542c50ff1d",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "Taking three different letters from the 26 letters of the alphabet, character strings of length three can be formed.\n\nExamples are 'abc', 'hat' and 'zyx'.\n\nWhen we study these three examples we see that for 'abc' two characters come lexicographically after its neighbor to the left.\n\nFor 'hat' there is exactly one character that comes lexicographically after its neighbor to the left. For 'zyx' there are zero characters that come lexicographically after its neighbor to the left.\n\nIn all there are 10400 strings of length 3 for which exactly one character comes lexicographically after its neighbor to the left.\n\nWe now consider strings of $n ≤ 26$ different characters from the alphabet.\n\nFor every $n$, $p(n)$ is the number of strings of length $n$ for which exactly one character comes lexicographically after its neighbor to the left.\n\nWhat is the maximum value of $p(n)$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function lexicographicNeighbors() {\n\n  return true;\n}\n\nlexicographicNeighbors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`lexicographicNeighbors()` should return `409511334375`.",
          "testCode": "assert.strictEqual(lexicographicNeighbors(), 409511334375);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301789,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-158-exploring-strings-for-which-only-one-character-comes-lexicographically-after-its-neighbour-to-the-left.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f40c1000cf542c50ff1e",
      "title": "Problem 159: Digital root sums of factorizations",
      "challengeType": 1,
      "dashedName": "problem-159-digital-root-sums-of-factorisations",
      "description": "A composite number can be factored many different ways.\n\nFor instance, not including multiplication by one, 24 can be factored in 7 distinct ways:\n\n$$\\begin{align}\n  & 24 = 2 \\times 2 \\times 2 \\times 3\\\\\\\\\n  & 24 = 2 \\times 3 \\times 4  \\\\\\\\\n  & 24 = 2 \\times 2 \\times 6  \\\\\\\\\n  & 24 = 4 \\times 6    \\\\\\\\\n  & 24 = 3 \\times 8    \\\\\\\\\n  & 24 = 2 \\times 12   \\\\\\\\\n  & 24 = 24\n\\end{align}$$\n\nRecall that the digital root of a number, in base 10, is found by adding together the digits of that number, and repeating that process until a number arrives at less than 10. Thus the digital root of 467 is 8.\n\nWe shall call a Digital Root Sum (DRS) the sum of the digital roots of the individual factors of our number. The chart below demonstrates all of the DRS values for 24.\n\n| Factorization | Digital Root Sum |\n|---------------|------------------|\n|    2x2x2x3    |        9         |\n|     2x3x4     |        9         |\n|     2x2x6     |        10        |\n|      4x6      |        10        |\n|      3x8      |        11        |\n|      2x12     |        5         |\n|      24       |        6         |\n\nThe maximum Digital Root Sum of 24 is 11. The function $mdrs(n)$ gives the maximum Digital Root Sum of $n$. So $mdrs(24) = 11$.\n\nFind $\\sum{mdrs(n)}$ for $1 &lt; n &lt; 1,000,000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function euler159() {\n\n  return true;\n}\n\neuler159();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`euler159()` should return `14489159`.",
          "testCode": "assert.strictEqual(euler159(), 14489159);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301790,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-159-digital-root-sums-of-factorisations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f40d1000cf542c50ff1f",
      "title": "Problem 160: Factorial trailing digits",
      "challengeType": 1,
      "dashedName": "problem-160-factorial-trailing-digits",
      "description": "For any $N$, let $f(N)$ be the last five digits before the trailing zeroes in $N!$.\n\nFor example,\n\n$$\\begin{align}\n  & 9! = 362880 \\\\; \\text{so} \\\\; f(9) = 36288 \\\\\\\\\n  & 10! = 3628800 \\\\; \\text{so} \\\\; f(10) = 36288 \\\\\\\\\n  & 20! = 2432902008176640000 \\\\; \\text{so} \\\\; f(20) = 17664\n\\end{align}$$\n\nFind $f(1,000,000,000,000)$",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function factorialTrailingDigits() {\n\n  return true;\n}\n\nfactorialTrailingDigits();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`factorialTrailingDigits()` should return `16576`.",
          "testCode": "assert.strictEqual(factorialTrailingDigits(), 16576);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301794,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-160-factorial-trailing-digits.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f40d1000cf542c50ff20",
      "title": "Problem 161: Triominoes",
      "challengeType": 1,
      "dashedName": "problem-161-triominoes",
      "description": "A triomino is a shape consisting of three squares joined via the edges.\n\nThere are two basic forms:\n\n<img alt=\"two basic triominoes forms\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/triominoes-1.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIf all possible orientations are taken into account there are six:\n\n<img alt=\"triominoes forms including orientation\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/triominoes-2.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nAny n by m grid for which nxm is divisible by 3 can be tiled with triominoes. If we consider tilings that can be obtained by reflection or rotation from another tiling as different there are 41 ways a 2 by 9 grid can be tiled with triominoes:\n\n<img alt=\"animation showing 41 ways of filling 2x9 grid with triominoes\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/triominoes-3.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIn how many ways can a 9 by 12 grid be tiled in this way by triominoes?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function triominoes() {\n\n  return true;\n}\n\ntriominoes();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`triominoes()` should return `20574308184277972`.",
          "testCode": "assert.strictEqual(triominoes(), 20574308184277972);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301795,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-161-triominoes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f40e1000cf542c50ff21",
      "title": "Problem 162: Hexadecimal numbers",
      "challengeType": 1,
      "dashedName": "problem-162-hexadecimal-numbers",
      "description": "In the hexadecimal number system numbers are represented using 16 different digits:\n\n$$0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F$$\n\nThe hexadecimal number AF when written in the decimal number system equals $10 \\times 16 + 15 = 175$.\n\nIn the 3-digit hexadecimal numbers 10A, 1A0, A10, and A01 the digits 0,1 and A are all present.\n\nLike numbers written in base ten we write hexadecimal numbers without leading zeroes.\n\nHow many hexadecimal numbers containing at most sixteen hexadecimal digits exist with all of the digits 0,1, and A present at least once?\n\nGive your answer with hexadecimal number as a string.\n\n**Note:** (A,B,C,D,E and F in upper case, without any leading or trailing code that marks the number as hexadecimal and without leading zeroes , e.g. 1A3F and not: 1a3f and not 0x1a3f and not $1A3F and not #1A3F and not 0000001A3F)",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hexadecimalNumbers() {\n\n  return true;\n}\n\nhexadecimalNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`hexadecimalNumbers()` should return a string.",
          "testCode": "assert.isString(hexadecimalNumbers());"
        },
        {
          "text": "`hexadecimalNumbers()` should return the string `3D58725572C62302`.",
          "testCode": "assert.strictEqual(hexadecimalNumbers(), '3D58725572C62302');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301796,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-162-hexadecimal-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f40f1000cf542c50ff22",
      "title": "Problem 163: Cross-hatched triangles",
      "challengeType": 1,
      "dashedName": "problem-163-cross-hatched-triangles",
      "description": "Consider an equilateral triangle in which straight lines are drawn from each vertex to the middle of the opposite side, such as in the size 1 triangle in the sketch below.\n\n<img alt=\"triangles with size 1 and size 2\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/cross-hatched-triangles.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nSixteen triangles of either different shape or size or orientation or location can now be observed in that triangle. Using size 1 triangles as building blocks, larger triangles can be formed, such as the size 2 triangle in the above sketch. One-hundred and four triangles of either different shape or size or orientation or location can now be observed in that size 2 triangle.\n\nIt can be observed that the size 2 triangle contains 4 size 1 triangle building blocks. A size 3 triangle would contain 9 size 1 triangle building blocks and a size $n$ triangle would thus contain $n^2$ size 1 triangle building blocks.\n\nIf we denote $T(n)$ as the number of triangles present in a triangle of size $n$, then\n\n$$\\begin{align}\n  & T(1) = 16 \\\\\\\\\n  & T(2) = 104\n\\end{align}$$\n\nFind $T(36)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function crossHatchedTriangles() {\n\n  return true;\n}\n\ncrossHatchedTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`crossHatchedTriangles()` should return `343047`.",
          "testCode": "assert.strictEqual(crossHatchedTriangles(), 343047);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301797,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-163-cross-hatched-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4111000cf542c50ff23",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "How many 20 digit numbers $n$ (without any leading zero) exist such that no three consecutive digits of $n$ have a sum greater than 9?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function consecutiveDigitsSum() {\n\n  return true;\n}\n\nconsecutiveDigitsSum();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`consecutiveDigitsSum()` should return `378158756814587`.",
          "testCode": "assert.strictEqual(consecutiveDigitsSum(), 378158756814587);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301798,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-164-numbers-for-which-no-three-consecutive-digits-have-a-sum-greater-than-a-given-value.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4111000cf542c50ff24",
      "title": "Problem 165: Intersections",
      "challengeType": 1,
      "dashedName": "problem-165-intersections",
      "description": "A segment is uniquely defined by its two endpoints. By considering two line segments in plane geometry there are three possibilities: the segments have zero points, one point, or infinitely many points in common.\n\nMoreover when two segments have exactly one point in common it might be the case that common point is an endpoint of either one of the segments or of both. If a common point of two segments is not an endpoint of either of the segments it is an interior point of both segments.\n\nWe will call a common point $T$ of two segments $L_1$ and $L_2$ a true intersection point of $L_1$ and $L_2$ if $T$ is the only common point of $L_1$ and $L_2$ and $T$ is an interior point of both segments.\n\nConsider the three segments $L_1$, $L_2$, and $L_3$:\n\n$$\\begin{align}\n  & L_1: (27, 44) \\\\;\\text{to}\\\\; (12, 32) \\\\\\\\\n  & L_2: (46, 53) \\\\;\\text{to}\\\\; (17, 62) \\\\\\\\\n  & L_3: (46, 70) \\\\;\\text{to}\\\\; (22, 40) \\\\\\\\\n\\end{align}$$\n\nIt can be verified that line segments $L_2$ and $L_3$ have a true intersection point. We note that as the one of the end points of $L_3$: (22, 40) lies on $L_1$ this is not considered to be a true point of intersection. $L_1$ and $L_2$ have no common point. So among the three line segments, we find one true intersection point.\n\nNow let us do the same for 5000 line segments. To this end, we generate 20000 numbers using the so-called \"Blum Blum Shub\" pseudo-random number generator.\n\n$$\\begin{align}\n  & s_0 = 290797 \\\\\\\\\n  & s_{n + 1} = s_n × s_n (\\text{modulo}\\\\; 50515093) \\\\\\\\\n  & t_n = s_n (\\text{modulo}\\\\; 500) \\\\\\\\\n\\end{align}$$\n\nTo create each line segment, we use four consecutive numbers $t_n$. That is, the first line segment is given by:\n\n($_t$1, $t_2$) to ($t_3$, $t_4$)\n\nThe first four numbers computed according to the above generator should be: 27, 144, 12 and 232. The first segment would thus be (27, 144) to (12, 232).\n\nHow many distinct true intersection points are found among the 5000 line segments?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function distinctIntersections() {\n\n  return true;\n}\n\ndistinctIntersections();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`distinctIntersections()` should return `2868868`.",
          "testCode": "assert.strictEqual(distinctIntersections(), 2868868);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301799,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-165-intersections.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4131000cf542c50ff25",
      "title": "Problem 166: Criss Cross",
      "challengeType": 1,
      "dashedName": "problem-166-criss-cross",
      "description": "A 4x4 grid is filled with digits $d$, $0 ≤ d ≤ 9$.\n\nIt can be seen that in the grid\n\n$$\\begin{array}{}\n  6 & 3 & 3 & 0 \\\\\\\\\n  5 & 0 & 4 & 3 \\\\\\\\\n  0 & 7 & 1 & 4 \\\\\\\\\n  1 & 2 & 4 & 5\n\\end{array}$$\n\nthe sum of each row and each column has the value 12. Moreover the sum of each diagonal is also 12.\n\nIn how many ways can you fill a 4x4 grid with the digits $d$, $0 ≤ d ≤ 9$ so that each row, each column, and both diagonals have the same sum?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function crissCross() {\n\n  return true;\n}\n\ncrissCross();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`crissCross()` should return `7130034`.",
          "testCode": "assert.strictEqual(crissCross(), 7130034);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301800,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-166-criss-cross.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4141000cf542c50ff26",
      "title": "Problem 167: Investigating Ulam sequences",
      "challengeType": 1,
      "dashedName": "problem-167-investigating-ulam-sequences",
      "description": "For two positive integers $a$ and $b$, the Ulam sequence $U(a,b)$ is defined by ${U{(a,b)}\\_1} = a$, ${U{(a,b)}\\_2} = b$ and for $k > 2$, ${U{(a,b)}\\_k}$ is the smallest integer greater than ${U{(a,b)}\\_{(k-1)}}$ which can be written in exactly one way as the sum of two distinct previous members of $U(a,b)$.\n\nFor example, the sequence $U(1,2)$ begins with\n\n$$1, 2, 3 = 1 + 2, 4 = 1 + 3, 6 = 2 + 4, 8 = 2 + 6, 11 = 3 + 8$$\n\n5 does not belong to it because $5 = 1 + 4 = 2 + 3$ has two representations as the sum of two previous members, likewise $7 = 1 + 6 = 3 + 4$.\n\nFind $\\sum {U(2, 2n + 1)_k}$ for $2 ≤ n ≤ 10$, where $k = {10}^{11}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function ulamSequences() {\n\n  return true;\n}\n\nulamSequences();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`ulamSequences()` should return `3916160068885`.",
          "testCode": "assert.strictEqual(ulamSequences(), 3916160068885);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301801,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-167-investigating-ulam-sequences.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4151000cf542c50ff27",
      "title": "Problem 168: Number Rotations",
      "challengeType": 1,
      "dashedName": "problem-168-number-rotations",
      "description": "Consider the number 142857. We can right-rotate this number by moving the last digit (7) to the front of it, giving us 714285.\n\nIt can be verified that $714285 = 5 × 142857$.\n\nThis demonstrates an unusual property of 142857: it is a divisor of its right-rotation.\n\nFor integer number of digits $a$ and $b$, find the last 5 digits of the sum of all integers $n$, $10^a &lt; n &lt; 10^b$, that have this property.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function numberRotations(a, b) {\n\n  return 0;\n}\n\nnumberRotations();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function numberRotations(minDigits, maxDigits) {\n  const DIGITS_TO_KEEP = 100000n;\n  const powersOfTen = Array(maxDigits).fill(0);\n  powersOfTen[0] = 1n;\n  for (let i = 1; i < maxDigits; i++) {\n    powersOfTen[i] = powersOfTen[i - 1] * 10n;\n  }\n\n  // We want numbers of the form xd * m = dx\n  // Or more precisely:\n  //   (x * 10 + d) * m = d*10^(n-1) + x\n  // Solving for x:\n  //   x = d (10^(n-1) - m) / (10 * m - 1)\n  let total = 0n;\n  for (let numDigits = minDigits; numDigits <= maxDigits; numDigits++) {\n    // Check all multiplier - digit pairs to see if a candidate can be built\n    //  with the correct number of digits\n    for (let multiplier = 1n; multiplier < 10n; multiplier++) {\n      for (let lastDigit = 1n; lastDigit < 10n; lastDigit++) {\n        const numerator   = lastDigit * (powersOfTen[numDigits - 1] - multiplier);\n        const denominator = (powersOfTen[1] * multiplier - 1n);\n        if (numerator % denominator === 0n) {\n          const candidate = (numerator / denominator) * 10n + lastDigit;\n          if (candidate.toString().length === numDigits) {\n            total = (total + candidate) % DIGITS_TO_KEEP;\n          }\n        }\n      }\n    }\n  }\n\n  return parseInt(total);\n}"
        }
      ],
      "tests": [
        {
          "text": "`numberRotations(2, 10)` should return `98311`.",
          "testCode": "assert.strictEqual(numberRotations(2, 10), 98311);"
        },
        {
          "text": "`numberRotations(2, 100)` should return `59206`.",
          "testCode": "assert.strictEqual(numberRotations(2, 100), 59206);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301802,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-168-number-rotations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4151000cf542c50ff28",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "Define $f(0)=1$ and $f(n)$ to be the number of different ways $n$ can be expressed as a sum of integer powers of 2 using each power no more than twice.\n\nFor example, $f(10)=5$ since there are five different ways to express 10:\n\n$$\\begin{align}\n  & 1 + 1 + 8 \\\\\\\\\n  & 1 + 1 + 4 + 4 \\\\\\\\\n  & 1 + 1 + 2 + 2 + 4 \\\\\\\\\n  & 2 + 4 + 4 \\\\\\\\\n  & 2 + 8\n\\end{align}$$\n\nWhat is $f({10}^{25})$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function numberOfWaysToExpress() {\n\n  return true;\n}\n\nnumberOfWaysToExpress();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`numberOfWaysToExpress()` should return `178653872807`.",
          "testCode": "assert.strictEqual(numberOfWaysToExpress(), 178653872807);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301803,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-169-exploring-the-number-of-different-ways-a-number-can-be-expressed-as-a-sum-of-powers-of-2.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4161000cf542c50ff29",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "Take the number 6 and multiply it by each of 1273 and 9854:\n\n$$\\begin{align}\n  & 6 × 1273 = 7638 \\\\\\\\\n  & 6 × 9854 = 59124 \\\\\\\\\n\\end{align}$$\n\nBy concatenating these products we get the 1 to 9 pandigital 763859124. We will call 763859124 the \"concatenated product of 6 and (1273, 9854)\". Notice too, that the concatenation of the input numbers, 612739854, is also 1 to 9 pandigital.\n\nThe same can be done for 0 to 9 pandigital numbers.\n\nWhat is the largest 0 to 9 pandigital 10-digit concatenated product of an integer with two or more other integers, such that the concatenation of the input numbers is also a 0 to 9 pandigital 10-digit number?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function largestPandigital() {\n\n  return true;\n}\n\nlargestPandigital();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`largestPandigital()` should return `9857164023`.",
          "testCode": "assert.strictEqual(largestPandigital(), 9857164023);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301805,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-170-find-the-largest-0-to-9-pandigital-that-can-be-formed-by-concatenating-products.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4181000cf542c50ff2a",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "For a positive integer $n$, let $f(n)$ be the sum of the squares of the digits (in base 10) of $n$, e.g.\n\n$$\\begin{align}\n  & f(3) = 3^2 = 9 \\\\\\\\\n  & f(25) = 2^2 + 5^2 = 4 + 25 = 29 \\\\\\\\\n  & f(442) = 4^2 + 4^2 + 2^2 = 16 + 16 + 4 = 36 \\\\\\\\\n\\end{align}$$\n\nFind the last nine digits of the sum of all $n$, $0 &lt; n &lt; {10}^{20}$, such that $f(n)$ is a perfect square.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function lastDigitsSumOfPerfectSquare() {\n\n  return true;\n}\n\nlastDigitsSumOfPerfectSquare();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`lastDigitsSumOfPerfectSquare()` should return `142989277`.",
          "testCode": "assert.strictEqual(lastDigitsSumOfPerfectSquare(), 142989277);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301806,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-171-finding-numbers-for-which-the-sum-of-the-squares-of-the-digits-is-a-square.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4181000cf542c50ff2b",
      "title": "Problem 172: Investigating numbers with few repeated digits",
      "challengeType": 1,
      "dashedName": "problem-172-investigating-numbers-with-few-repeated-digits",
      "description": "How many 18-digit numbers $n$ (without leading zeros) are there such that no digit occurs more than three times in $n$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function numbersWithRepeatedDigits() {\n\n  return true;\n}\n\nnumbersWithRepeatedDigits();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`numbersWithRepeatedDigits()` should return `227485267000992000`.",
          "testCode": "assert.strictEqual(numbersWithRepeatedDigits(), 227485267000992000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301807,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-172-investigating-numbers-with-few-repeated-digits.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f41a1000cf542c50ff2c",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "We shall define a square lamina to be a square outline with a square \"hole\" so that the shape possesses vertical and horizontal symmetry. For example, using exactly thirty-two square tiles we can form two different square laminae:\n\n<img alt=\"two square lamina with holes 2x2 and 7x7\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/using-up-to-one-million-tiles-how-many-different-hollow-square-laminae-can-be-formed.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWith one-hundred tiles, and not necessarily using all of the tiles at one time, it is possible to form forty-one different square laminae. Using up to one million tiles how many different square laminae can be formed?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function differentHollowSquareLaminae() {\n\n  return true;\n}\n\ndifferentHollowSquareLaminae();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`differentHollowSquareLaminae()` should return `1572729`.",
          "testCode": "assert.strictEqual(differentHollowSquareLaminae(), 1572729);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301808,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-173-using-up-to-one-million-tiles-how-many-different-hollow-square-laminae-can-be-formed.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f41a1000cf542c50ff2d",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "We shall define a square lamina to be a square outline with a square \"hole\" so that the shape possesses vertical and horizontal symmetry.\n\nGiven eight tiles it is possible to form a lamina in only one way: 3x3 square with a 1x1 hole in the middle. However, using thirty-two tiles it is possible to form two distinct laminae.\n\n<img alt=\"two square lamina with holes 2x2 and 7x7\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/using-up-to-one-million-tiles-how-many-different-hollow-square-laminae-can-be-formed.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIf $t$ represents the number of tiles used, we shall say that $t = 8$ is type $L(1)$ and $t = 32$ is type $L(2)$.\n\nLet $N(n)$ be the number of $t ≤ 1000000$ such that $t$ is type $L(n)$; for example, $N(15) = 832$.\n\nWhat is $\\sum N(n)$ for $1 ≤ n ≤ 10$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hollowSquareLaminaeDistinctArrangements() {\n\n  return true;\n}\n\nhollowSquareLaminaeDistinctArrangements();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`hollowSquareLaminaeDistinctArrangements()` should return `209566`.",
          "testCode": "assert.strictEqual(hollowSquareLaminaeDistinctArrangements(), 209566);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301809,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-174-counting-the-number-of-hollow-square-laminae-that-can-form-one-two-three-...-distinct-arrangements.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f41c1000cf542c50ff2e",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "Define $f(0) = 1$ and $f(n)$ to be the number of ways to write $n$ as a sum of powers of 2 where no power occurs more than twice.\n\nFor example, $f(10) = 5$ since there are five different ways to express 10:\n\n$$10 = 8 + 2 = 8 + 1 + 1 = 4 + 4 + 2 = 4 + 2 + 2 + 1 + 1 = 4 + 4 + 1 + 1$$\n\nIt can be shown that for every fraction $\\frac{p}{q}\\\\; (p>0, q>0)$ there exists at least one integer $n$ such that $\\frac{f(n)}{f(n - 1)} = \\frac{p}{q}$.\n\nFor instance, the smallest $n$ for which $\\frac{f(n)}{f(n - 1)} = \\frac{13}{17}$ is 241. The binary expansion of 241 is 11110001.\n\nReading this binary number from the most significant bit to the least significant bit there are 4 one's, 3 zeroes and 1 one. We shall call the string 4,3,1 the Shortened Binary Expansion of 241.\n\nFind the Shortened Binary Expansion of the smallest $n$ for which\n\n$$\\frac{f(n)}{f(n - 1)} = \\frac{123456789}{987654321}$$\n\nGive your answer as a string with comma separated integers, without any whitespaces.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function shortenedBinaryExpansionOfNumber() {\n\n  return true;\n}\n\nshortenedBinaryExpansionOfNumber();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`shortenedBinaryExpansionOfNumber()` should return a string.",
          "testCode": "assert.isString(shortenedBinaryExpansionOfNumber());"
        },
        {
          "text": "`shortenedBinaryExpansionOfNumber()` should return the string `1,13717420,8`.",
          "testCode": "assert.strictEqual(shortenedBinaryExpansionOfNumber(), '1,13717420,8');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301810,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-175-fractions-involving-the-number-of-different-ways-a-number-can-be-expressed-as-a-sum-of-powers-of-2.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f41c1000cf542c50ff2f",
      "title": "Problem 176: Right-angled triangles that share a cathetus",
      "challengeType": 1,
      "dashedName": "problem-176-right-angled-triangles-that-share-a-cathetus",
      "description": "The four right-angled triangles with sides (9,12,15), (12,16,20), (5,12,13) and (12,35,37) all have one of the shorter sides (catheti) equal to 12. It can be shown that no other integer sided right-angled triangle exists with one of the catheti equal to 12.\n\nFind the smallest integer that can be the length of a cathetus of exactly 47547 different integer sided right-angled triangles.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function trianglesSharingCathetus() {\n\n  return true;\n}\n\ntrianglesSharingCathetus();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`trianglesSharingCathetus()` should return `96818198400000`.",
          "testCode": "assert.strictEqual(trianglesSharingCathetus(), 96818198400000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301811,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-176-right-angled-triangles-that-share-a-cathetus.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f41e1000cf542c50ff30",
      "title": "Problem 177: Integer angled Quadrilaterals",
      "challengeType": 1,
      "dashedName": "problem-177-integer-angled-quadrilaterals",
      "description": "Let ABCD be a convex quadrilateral, with diagonals AC and BD. At each vertex the diagonal makes an angle with each of the two sides, creating eight corner angles.\n\n<img alt=\"convex quadrilateral ABCD, with diagonals AC and BD\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/integer-angled-quadrilaterals.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFor example, at vertex A, the two angles are CAD, CAB.\n\nWe call such a quadrilateral for which all eight corner angles have integer values when measured in degrees an \"integer angled quadrilateral\". An example of an integer angled quadrilateral is a square, where all eight corner angles are 45°. Another example is given by DAC = 20°, BAC = 60°, ABD = 50°, CBD = 30°, BCA = 40°, DCA = 30°, CDB = 80°, ADB = 50°.\n\nWhat is the total number of non-similar integer angled quadrilaterals?\n\n**Note:** In your calculations you may assume that a calculated angle is integral if it is within a tolerance of ${10}^{-9}$ of an integer value.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function integerAngledQuadrilaterals() {\n\n  return true;\n}\n\nintegerAngledQuadrilaterals();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`integerAngledQuadrilaterals()` should return `129325`.",
          "testCode": "assert.strictEqual(integerAngledQuadrilaterals(), 129325);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301812,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-177-integer-angled-quadrilaterals.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f41e1000cf542c50ff31",
      "title": "Problem 178: Step Numbers",
      "challengeType": 1,
      "dashedName": "problem-178-step-numbers",
      "description": "Consider the number 45656.\n\nIt can be seen that each pair of consecutive digits of 45656 has a difference of one.\n\nA number for which every pair of consecutive digits has a difference of one is called a step number.\n\nA pandigital number contains every decimal digit from 0 to 9 at least once.\n\nHow many pandigital step numbers less than ${10}^{40}$ are there?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function stepNumbers() {\n\n  return true;\n}\n\nstepNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`stepNumbers()` should return `126461847755`.",
          "testCode": "assert.strictEqual(stepNumbers(), 126461847755);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301813,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-178-step-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f41f1000cf542c50ff32",
      "title": "Problem 179: Consecutive positive divisors",
      "challengeType": 1,
      "dashedName": "problem-179-consecutive-positive-divisors",
      "description": "Find the number of integers $1 &lt; n &lt; {10}^7$, for which $n$ and $n + 1$ have the same number of positive divisors. For example, 14 has the positive divisors 1, 2, 7, 14 while 15 has 1, 3, 5, 15.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function consecutivePositiveDivisors() {\n\n  return true;\n}\n\nconsecutivePositiveDivisors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`consecutivePositiveDivisors()` should return `986262`.",
          "testCode": "assert.strictEqual(consecutivePositiveDivisors(), 986262);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301814,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-179-consecutive-positive-divisors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4201000cf542c50ff33",
      "title": "Problem 180: Rational zeros of a function of three variables",
      "challengeType": 1,
      "dashedName": "problem-180-rational-zeros-of-a-function-of-three-variables",
      "description": "For any integer $n$, consider the three functions\n\n$$\\begin{align}\n  & f_{1,n}(x,y,z) = x^{n + 1} + y^{n + 1} − z^{n + 1}\\\\\\\\\n  & f_{2,n}(x,y,z) = (xy + yz + zx) \\times (x^{n - 1} + y^{n - 1} − z^{n - 1})\\\\\\\\\n  & f_{3,n}(x,y,z) = xyz \\times (x^{n - 2} + y^{n - 2} − z^{n - 2})\n\\end{align}$$\n\nand their combination\n\n$$\\begin{align}\n  & f_n(x,y,z) = f_{1,n}(x,y,z) + f_{2,n}(x,y,z) − f_{3,n}(x,y,z)\n\\end{align}$$\n\nWe call $(x,y,z)$ a golden triple of order $k$ if $x$, $y$, and $z$ are all rational numbers of the form $\\frac{a}{b}$ with $0 &lt; a &lt; b ≤ k$ and there is (at least) one integer $n$, so that $f_n(x,y,z) = 0$.\n\nLet $s(x,y,z) = x + y + z$.\n\nLet $t = \\frac{u}{v}$ be the sum of all distinct $s(x,y,z)$ for all golden triples $(x,y,z)$ of order 35. All the $s(x,y,z)$ and $t$ must be in reduced form.\n\nFind $u + v$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rationalZeros() {\n\n  return true;\n}\n\nrationalZeros();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`rationalZeros()` should return `285196020571078980`.",
          "testCode": "assert.strictEqual(rationalZeros(), 285196020571078980);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301816,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-180-rational-zeros-of-a-function-of-three-variables.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4231000cf542c50ff34",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "Having three black objects $B$ and one white object $W$ they can be grouped in 7 ways like this:\n\n$$(BBBW)\\\\;(B,BBW)\\\\;(B,B,BW)\\\\;(B,B,B,W)\\\\;(B,BB,W)\\\\;(BBB,W)\\\\;(BB,BW)$$\n\nIn how many ways can sixty black objects $B$ and forty white objects $W$ be thus grouped?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function colorsGrouping() {\n\n  return true;\n}\n\ncolorsGrouping();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`colorsGrouping()` should return `83735848679360670`.",
          "testCode": "assert.strictEqual(colorsGrouping(), 83735848679360670);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301817,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-181-investigating-in-how-many-ways-objects-of-two-different-colours-can-be-grouped.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4231000cf542c50ff35",
      "title": "Problem 182: RSA encryption",
      "challengeType": 1,
      "dashedName": "problem-182-rsa-encryption",
      "description": "The RSA encryption is based on the following procedure:\n\nGenerate two distinct primes `p` and `q`.\nCompute `n=p*q` and `φ=(p-1)(q-1)`.\nFind an integer `e`, `1 < e < φ`, such that `gcd(e,φ) = 1`\n\nA message in this system is a number in the interval `[0,n-1]`.\nA text to be encrypted is then somehow converted to messages (numbers in the interval `[0,n-1]`).\nTo encrypt the text, for each message, `m`, c=m<sup>e</sup> mod n is calculated.\n\nTo decrypt the text, the following procedure is needed: calculate `d` such that `ed=1 mod φ`, then for each encrypted message, `c`, calculate m=c<sup>d</sup> mod n.\n\nThere exist values of `e` and `m` such that m<sup>e</sup> mod n = m.\nWe call messages `m` for which m<sup>e</sup> mod n=m unconcealed messages.\n\nAn issue when choosing `e` is that there should not be too many unconcealed messages.\nFor instance, let `p=19` and `q=37`.\nThen `n=19*37=703` and `φ=18*36=648`.\nIf we choose `e=181`, then, although `gcd(181,648)=1` it turns out that all possible messages\nm `(0≤m≤n-1)` are unconcealed when calculating m<sup>e</sup> mod n.\nFor any valid choice of `e` there exist some unconcealed messages.\nIt's important that the number of unconcealed messages is at a minimum.\n\nFor any given `p` and `q`, find the sum of all values of `e`, `1 < e < φ(p,q)` and `gcd(e,φ)=1`, so that the number of unconcealed messages for this value of `e` is at a minimum.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function RSAEncryption(p, q) {\n\n  return true;\n}\n\nRSAEncryption(19, 37);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function gcd(a, b) {\n    if (b)\n        return gcd(b, a % b);\n    else\n        return a;\n}\n\nfunction RSAEncryption(p, q) {\n    let phi = (p - 1) * (q - 1);\n\n    let best = Number.MAX_SAFE_INTEGER;\n    let sum = 0;\n\n    for (let e = 0; e < phi; ++e) {\n        if (!(gcd(e, phi) == 1))\n            continue;\n\n        let msg = (gcd(p - 1, e - 1) + 1) * (gcd(q - 1, e - 1) + 1);\n\n        if (best == msg) {\n            sum += e;\n        } else if (best > msg) {\n            best = msg;\n            sum = e;\n        }\n    }\n\n    return sum;\n}"
        }
      ],
      "tests": [
        {
          "text": "`RSAEncryption` should be a function.",
          "testCode": "assert.isFunction(RSAEncryption);"
        },
        {
          "text": "`RSAEncryption` should return a number.",
          "testCode": "assert.strictEqual(typeof RSAEncryption(19, 37), 'number');"
        },
        {
          "text": "`RSAEncryption(19, 37)` should return `17766`.",
          "testCode": "assert.strictEqual(RSAEncryption(19, 37), 17766);"
        },
        {
          "text": "`RSAEncryption(283, 409)` should return `466196580`.",
          "testCode": "assert.strictEqual(RSAEncryption(283, 409), 466196580);"
        },
        {
          "text": "`RSAEncryption(1009, 3643)` should return `399788195976`.",
          "testCode": "assert.strictEqual(RSAEncryption(19, 37), 17766);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301818,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-182-rsa-encryption.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4231000cf542c50ff36",
      "title": "Problem 183: Maximum product of parts",
      "challengeType": 1,
      "dashedName": "problem-183-maximum-product-of-parts",
      "description": "Let $N$ be a positive integer and let $N$ be split into $k$ equal parts, $r = \\frac{N}{k}$, so that $N = r + r + \\cdots + r$.\n\nLet $P$ be the product of these parts, $P = r × r × \\cdots × r = r^k$.\n\nFor example, if 11 is split into five equal parts, 11 = 2.2 + 2.2 + 2.2 + 2.2 + 2.2, then $P = {2.2}^5 = 51.53632$.\n\nLet $M(N) = P_{max}$ for a given value of $N$.\n\nIt turns out that the maximum for $N = 11$ is found by splitting eleven into four equal parts which leads to $P_{max} = {(\\frac{11}{4})}^4$; that is, $M(11) = \\frac{14641}{256} = 57.19140625$, which is a terminating decimal.\n\nHowever, for $N = 8$ the maximum is achieved by splitting it into three equal parts, so $M(8) = \\frac{512}{27}$, which is a non-terminating decimal.\n\nLet $D(N) = N$ if $M(N)$ is a non-terminating decimal and $D(N) = -N$ if $M(N)$ is a terminating decimal.\n\nFor example, $\\sum D(N)$ for $5 ≤ N ≤ 100$ is 2438.\n\nFind $\\sum D(N)$ for $5 ≤ N ≤ 10000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximumProductOfParts() {\n\n  return true;\n}\n\nmaximumProductOfParts();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`maximumProductOfParts()` should return `48861552`.",
          "testCode": "assert.strictEqual(maximumProductOfParts(), 48861552);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301819,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-183-maximum-product-of-parts.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4241000cf542c50ff37",
      "title": "Problem 184: Triangles containing the origin",
      "challengeType": 1,
      "dashedName": "problem-184-triangles-containing-the-origin",
      "description": "Consider the set $I_r$ of points $(x,y)$ with integer coordinates in the interior of the circle with radius $r$, centered at the origin, i.e. $x^2 + y^2 &lt; r^2$.\n\nFor a radius of 2, $I_2$ contains the nine points (0,0), (1,0), (1,1), (0,1), (-1,1), (-1,0), (-1,-1), (0,-1) and (1,-1). There are eight triangles having all three vertices in $I_2$ which contain the origin in the interior. Two of them are shown below, the others are obtained from these by rotation.\n\n<img alt=\"circle with radius 2, centered at the origin, with nine marked points and two triangles - (-1,0), (0,1), (1,-1) and (-1,1), (0,-1), (1,1)\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/triangles-containing-the-origin.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFor a radius of 3, there are 360 triangles containing the origin in the interior and having all vertices in $I_3$ and for $I_5$ the number is 10600.\n\nHow many triangles are there containing the origin in the interior and having all three vertices in $I_{105}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function trianglesContainingOrigin() {\n\n  return true;\n}\n\ntrianglesContainingOrigin();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`trianglesContainingOrigin()` should return `1725323624056`.",
          "testCode": "assert.strictEqual(trianglesContainingOrigin(), 1725323624056);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301820,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-184-triangles-containing-the-origin.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4251000cf542c50ff38",
      "title": "Problem 185: Number Mind",
      "challengeType": 1,
      "dashedName": "problem-185-number-mind",
      "description": "The game Number Mind is a variant of the well known game Master Mind.\n\nInstead of colored pegs, you have to guess a secret sequence of digits. After each guess you're only told in how many places you've guessed the correct digit. So, if the sequence was 1234 and you guessed 2036, you'd be told that you have one correct digit; however, you would NOT be told that you also have another digit in the wrong place.\n\nFor instance, given the following guesses for a 5-digit secret sequence,\n\n$$\\begin{align}\n  & 90342 ;2\\\\;\\text{correct}\\\\\\\\\n  & 70794 ;0\\\\;\\text{correct}\\\\\\\\\n  & 39458 ;2\\\\;\\text{correct}\\\\\\\\\n  & 34109 ;1\\\\;\\text{correct}\\\\\\\\\n  & 51545 ;2\\\\;\\text{correct}\\\\\\\\\n  & 12531 ;1\\\\;\\text{correct}\n\\end{align}$$\n\nThe correct sequence 39542 is unique.\n\nBased on the following guesses,\n\n$$\\begin{align}\n  & 5616185650518293 ;2\\\\;\\text{correct}\\\\\\\\\n  & 3847439647293047 ;1\\\\;\\text{correct}\\\\\\\\\n  & 5855462940810587 ;3\\\\;\\text{correct}\\\\\\\\\n  & 9742855507068353 ;3\\\\;\\text{correct}\\\\\\\\\n  & 4296849643607543 ;3\\\\;\\text{correct}\\\\\\\\\n  & 3174248439465858 ;1\\\\;\\text{correct}\\\\\\\\\n  & 4513559094146117 ;2\\\\;\\text{correct}\\\\\\\\\n  & 7890971548908067 ;3\\\\;\\text{correct}\\\\\\\\\n  & 8157356344118483 ;1\\\\;\\text{correct}\\\\\\\\\n  & 2615250744386899 ;2\\\\;\\text{correct}\\\\\\\\\n  & 8690095851526254 ;3\\\\;\\text{correct}\\\\\\\\\n  & 6375711915077050 ;1\\\\;\\text{correct}\\\\\\\\\n  & 6913859173121360 ;1\\\\;\\text{correct}\\\\\\\\\n  & 6442889055042768 ;2\\\\;\\text{correct}\\\\\\\\\n  & 2321386104303845 ;0\\\\;\\text{correct}\\\\\\\\\n  & 2326509471271448 ;2\\\\;\\text{correct}\\\\\\\\\n  & 5251583379644322 ;2\\\\;\\text{correct}\\\\\\\\\n  & 1748270476758276 ;3\\\\;\\text{correct}\\\\\\\\\n  & 4895722652190306 ;1\\\\;\\text{correct}\\\\\\\\\n  & 3041631117224635 ;3\\\\;\\text{correct}\\\\\\\\\n  & 1841236454324589 ;3\\\\;\\text{correct}\\\\\\\\\n  & 2659862637316867 ;2\\\\;\\text{correct}\n\\end{align}$$\n\nFind the unique 16-digit secret sequence.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function numberMind() {\n\n  return true;\n}\n\nnumberMind();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`numberMind()` should return `4640261571849533`.",
          "testCode": "assert.strictEqual(numberMind(), 4640261571849533);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301821,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-185-number-mind.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4281000cf542c50ff39",
      "title": "Problem 186: Connectedness of a network",
      "challengeType": 1,
      "dashedName": "problem-186-connectedness-of-a-network",
      "description": "Here are the records from a busy telephone system with one million users:\n\n| RecNr | Caller | Called |\n|-------|--------|--------|\n|   1   | 200007 | 100053 |\n|   2   | 600183 | 500439 |\n|   3   | 600863 | 701497 |\n|  ...  |  ...   |  ...   |\n\nThe telephone number of the caller and the called number in record $n$ are $Caller(n) = S_{2n - 1}$ and $Called(n) = S_{2n}$ where ${S}_{1,2,3,\\ldots}$ come from the \"Lagged Fibonacci Generator\":\n\nFor $1 ≤ k ≤ 55$, $S_k = [100003 - 200003k + 300007{k}^3]\\\\;(\\text{modulo}\\\\;1000000)$\n\nFor $56 ≤ k$, $S_k = [S_{k - 24} + S_{k - 55}]\\\\;(\\text{modulo}\\\\;1000000)$\n\nIf $Caller(n) = Called(n)$ then the user is assumed to have misdialled and the call fails; otherwise the call is successful.\n\nFrom the start of the records, we say that any pair of users $X$ and $Y$ are friends if $X$ calls $Y$ or vice-versa. Similarly, $X$ is a friend of a friend of $Z$ if $X$ is a friend of $Y$ and $Y$ is a friend of $Z$; and so on for longer chains.\n\nThe Prime Minister's phone number is 524287. After how many successful calls, not counting misdials, will 99% of the users (including the PM) be a friend, or a friend of a friend etc., of the Prime Minister?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function connectednessOfANetwork() {\n\n  return true;\n}\n\nconnectednessOfANetwork();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`connectednessOfANetwork()` should return `2325629`.",
          "testCode": "assert.strictEqual(connectednessOfANetwork(), 2325629);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301822,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-186-connectedness-of-a-network.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4291000cf542c50ff3a",
      "title": "Problem 187: Semiprimes",
      "challengeType": 1,
      "dashedName": "problem-187-semiprimes",
      "description": "A composite is a number containing at least two prime factors. For example, $15 = 3 × 5; 9 = 3 × 3; 12 = 2 × 2 × 3$.\n\nThere are ten composites below thirty containing precisely two, not necessarily distinct, prime factors: 4, 6, 9, 10, 14, 15, 21, 22, 25, 26.\n\nHow many composite integers, $n &lt; {10}^8$, have precisely two, not necessarily distinct, prime factors?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function semiPrimes() {\n\n  return true;\n}\n\nsemiPrimes();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`semiPrimes()` should return `17427258`.",
          "testCode": "assert.strictEqual(semiPrimes(), 17427258);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301823,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-187-semiprimes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4291000cf542c50ff3b",
      "title": "Problem 188: The hyperexponentiation of a number",
      "challengeType": 1,
      "dashedName": "problem-188-the-hyperexponentiation-of-a-number",
      "description": "The hyperexponentiation or tetration of a number $a$ by a positive integer $b$, denoted by $a↑↑b$ or ${}^ba$, is recursively defined by:\n\n$a↑↑1 = a$,\n\n$a↑↑(k+1) = a^{(a↑↑k)}$.\n\nThus we have e.g. $3↑↑2 = 3^3 = 27$, hence $3↑↑3 = 3^{27} = 7625597484987$ and $3↑↑4$ is roughly ${10}^{3.6383346400240996 \\times {10}^{12}}$. Find the last 8 digits of $1777↑↑1855$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hyperexponentation() {\n\n  return true;\n}\n\nhyperexponentation();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`hyperexponentation()` should return `95962097`.",
          "testCode": "assert.strictEqual(hyperexponentation(), 95962097);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301824,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-188-the-hyperexponentiation-of-a-number.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4291000cf542c50ff3c",
      "title": "Problem 189: Tri-coloring a triangular grid",
      "challengeType": 1,
      "dashedName": "problem-189-tri-colouring-a-triangular-grid",
      "description": "Consider the following configuration of 64 triangles:\n\n<img alt=\"64 triangles arranged to create larger triangle with side length of 8 triangles\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/tri-colouring-a-triangular-grid-1.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWe wish to color the interior of each triangle with one of three colors: red, green or blue, so that no two neighboring triangles have the same color. Such a coloring shall be called valid. Here, two triangles are said to be neighboring if they share an edge. Note: if they only share a vertex, then they are not neighbors.\n\nFor example, here is a valid coloring of the above grid:\n\n<img alt=\"colored grid of 64 triangles\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/tri-colouring-a-triangular-grid-2.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nA coloring C' which is obtained from a coloring C by rotation or reflection is considered distinct from C unless the two are identical.\n\nHow many distinct valid colorings are there for the above configuration?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function triangularGridColoring() {\n\n  return true;\n}\n\ntriangularGridColoring();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`triangularGridColoring()` should return `10834893628237824`.",
          "testCode": "assert.strictEqual(triangularGridColoring(), 10834893628237824);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301825,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-189-tri-colouring-a-triangular-grid.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f42b1000cf542c50ff3d",
      "title": "Problem 190: Maximizing a weighted product",
      "challengeType": 1,
      "dashedName": "problem-190-maximising-a-weighted-product",
      "description": "Let $S_m = (x_1, x_2, \\ldots, x_m)$ be the $m$-tuple of positive real numbers with $x_1 + x_2 + \\cdots + x_m = m$ for which $P_m = x_1 \\times {x_2}^2 \\times \\cdots \\times {x_m}^m$ is maximized.\n\nFor example, it can be verified that $[P_{10}] = 4112$ ([ ] is the integer part function).\n\nFind $\\sum {[P_m]}$ for $2 ≤ m ≤ 15$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximizingWeightedProduct() {\n\n  return true;\n}\n\nmaximizingWeightedProduct();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`maximizingWeightedProduct()` should return `371048281`.",
          "testCode": "assert.strictEqual(maximizingWeightedProduct(), 371048281);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301828,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-190-maximising-a-weighted-product.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f42b1000cf542c50ff3e",
      "title": "Problem 191: Prize Strings",
      "challengeType": 1,
      "dashedName": "problem-191-prize-strings",
      "description": "A particular school offers cash rewards to children with good attendance and punctuality. If they are absent for three consecutive days or late on more than one occasion then they forfeit their prize.\n\nDuring an n-day period a trinary string is formed for each child consisting of L's (late), O's (on time), and A's (absent).\n\nAlthough there are eighty-one trinary strings for a 4-day period that can be formed, exactly forty-three strings would lead to a prize:\n\n```markup\nOOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA\nOAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO\nAOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL\nAALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA\nLAOO LAOA LAAO\n```\n\nHow many \"prize\" strings exist over a 30-day period?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function prizeStrings() {\n\n  return true;\n}\n\nprizeStrings();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`prizeStrings()` should return `1918080160`.",
          "testCode": "assert.strictEqual(prizeStrings(), 1918080160);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301829,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-191-prize-strings.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f42c1000cf542c50ff3f",
      "title": "Problem 192: Best Approximations",
      "challengeType": 1,
      "dashedName": "problem-192-best-approximations",
      "description": "Let $x$ be a real number.\n\nA best approximation to $x$ for the denominator bound $d$ is a rational number $\\frac{r}{s}$ in reduced form, with $s ≤ d$, such that any rational number which is closer to $x$ than $\\frac{r}{s}$ has a denominator larger than $d$:\n\n$$|\\frac{p}{q} - x| &lt; |\\frac{r}{s} - x| ⇒ q > d$$\n\nFor example, the best approximation to $\\sqrt{13}$ for the denominator bound $20$ is $\\frac{18}{5}$ and the best approximation to $\\sqrt{13}$ for the denominator bound $30$ is $\\frac{101}{28}$.\n\nFind the sum of all denominators of the best approximations to $\\sqrt{n}$ for the denominator bound ${10}^{12}$, where $n$ is not a perfect square and $1 &lt; n ≤ 100000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function bestApproximations() {\n\n  return true;\n}\n\nbestApproximations();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`bestApproximations()` should return `57060635927998344`.",
          "testCode": "assert.strictEqual(bestApproximations(), 57060635927998344);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301830,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-192-best-approximations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f42f1000cf542c50ff41",
      "title": "Problem 193: Squarefree Numbers",
      "challengeType": 1,
      "dashedName": "problem-193-squarefree-numbers",
      "description": "A positive integer $n$ is called squarefree, if no square of a prime divides $n$, thus 1, 2, 3, 5, 6, 7, 10, 11 are squarefree, but not 4, 8, 9, 12.\n\nHow many squarefree numbers are there below $2^{50}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squarefreeNumbers() {\n\n  return true;\n}\n\nsquarefreeNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`squarefreeNumbers()` should return `684465067343069`.",
          "testCode": "assert.strictEqual(squarefreeNumbers(), 684465067343069);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301831,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-193-squarefree-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f42f1000cf542c50ff40",
      "title": "Problem 194: Colored Configurations",
      "challengeType": 1,
      "dashedName": "problem-194-coloured-configurations",
      "description": "Consider graphs built with the units A: <img alt=\"graph unit A\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/coloured-configurations-1.png\" style=\"display: inline-block; background-color: white; padding: 10px;\">\n and B: <img  alt=\"graph unit B\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/coloured-configurations-2.png\" style=\"display: inline-block; background-color: white; padding: 10px;\">, where the units are glued along the vertical edges as in the graph <img alt=\"graph with four units glued along the vertical edges\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/coloured-configurations-3.png\" style=\"display: inline-block; background-color: white; padding: 10px;\">.\n\nA configuration of type $(a,b,c)$ is a graph thus built of $a$ units A and $b$ units B, where the graph's vertices are colored using up to $c$ colors, so that no two adjacent vertices have the same color. The compound graph above is an example of a configuration of type $(2,2,6)$, in fact of type $(2,2,c)$ for all $c ≥ 4$\n\nLet $N(a,b,c)$ be the number of configurations of type $(a,b,c)$. For example, $N(1,0,3) = 24$, $N(0,2,4) = 92928$ and $N(2,2,3) = 20736$.\n\nFind the last 8 digits of $N(25,75,1984)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function coloredConfigurations() {\n\n  return true;\n}\n\ncoloredConfigurations();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`coloredConfigurations()` should return `61190912`.",
          "testCode": "assert.strictEqual(coloredConfigurations(), 61190912);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301832,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-194-coloured-configurations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4311000cf542c50ff43",
      "title": "Problem 195: Inscribed circles of triangles with one angle of 60 degrees",
      "challengeType": 1,
      "dashedName": "problem-195-inscribed-circles-of-triangles-with-one-angle-of-60-degrees",
      "description": "Let's call an integer sided triangle with exactly one angle of 60° a 60° triangle.\n\nLet $r$ be the radius of the inscribed circle of such a 60° triangle.\n\nThere are 1234 60° triangles for which $r ≤ 100$.\n\nLet $T(n)$ be the number of 60° triangles for which $r ≤ n$, so $T(100) = 1234$, $T(1000) = 22767$, and $T(10000) = 359912$.\n\nFind $T(1053779)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function inscribedCirclesOfTriangles() {\n\n  return true;\n}\n\ninscribedCirclesOfTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`inscribedCirclesOfTriangles()` should return `75085391`.",
          "testCode": "assert.strictEqual(inscribedCirclesOfTriangles(), 75085391);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301833,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-195-inscribed-circles-of-triangles-with-one-angle-of-60-degrees.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4301000cf542c50ff42",
      "title": "Problem 196: Prime triplets",
      "challengeType": 1,
      "dashedName": "problem-196-prime-triplets",
      "description": "Build a triangle from all positive integers in the following way:\n\n$$\\begin{array}{rrr}\n  &  1 \\\\\\\\\n  &  \\color{red}{2} &  \\color{red}{3} \\\\\\\\\n  &  4 & \\color{red}{5} &  6 \\\\\\\\\n  &  \\color{red}{7} &  8 &  9 & 10 \\\\\\\\\n  & \\color{red}{11} & 12 & \\color{red}{13} & 14 & 15  \\\\\\\\\n  & 16 & \\color{red}{17} & 18 & \\color{red}{19} & 20 & 21 \\\\\\\\\n  & 22 & \\color{red}{23} & 24 & 25 & 26 & 27 & 28 \\\\\\\\\n  & \\color{red}{29} & 30 & \\color{red}{31} & 32 & 33 & 34 & 35 & 36 \\\\\\\\\n  & \\color{red}{37} & 38 & 39 & 40 & \\color{red}{41} & 42 & \\color{red}{43} & 44 & 45 \\\\\\\\\n  & 46 & \\color{red}{47} & 48 & 49 & 50 & 51 & 52 & \\color{red}{53} & 54 & 55 \\\\\\\\\n  & 56 & 57 & 58 & \\color{red}{59} & 60 & \\color{red}{61} & 62 & 63 & 64 & 65 & 66 \\\\\\\\\n  & \\cdots\n\\end{array}$$\n\nEach positive integer has up to eight neighbors in the triangle.\n\nA set of three primes is called a prime triplet if one of the three primes has the other two as neighbors in the triangle.\n\nFor example, in the second row, the prime numbers 2 and 3 are elements of some prime triplet.\n\nIf row 8 is considered, it contains two primes which are elements of some prime triplet, i.e. 29 and 31. If row 9 is considered, it contains only one prime which is an element of some prime triplet: 37.\n\nDefine $S(n)$ as the sum of the primes in row $n$ which are elements of any prime triplet. Then $S(8) = 60$ and $S(9) = 37$.\n\nYou are given that $S(10000) = 950007619$.\n\nFind $S(5678027) + S(7208785)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeTriplets() {\n\n  return true;\n}\n\nprimeTriplets();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeTriplets()` should return `322303240771079940`.",
          "testCode": "assert.strictEqual(primeTriplets(), 322303240771079940);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301834,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-196-prime-triplets.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4311000cf542c50ff44",
      "title": "Problem 197: Investigating the behavior of a recursively defined sequence",
      "challengeType": 1,
      "dashedName": "problem-197-investigating-the-behaviour-of-a-recursively-defined-sequence",
      "description": "Given is the function $f(x) = ⌊{2}^{30.403243784 - x^2}⌋ × {10}^{-9}$ ( ⌊ ⌋ is the floor-function), the sequence $u_n$ is defined by $u_0 = -1$ and $u_{n + 1} = f(u_n)$.\n\nFind $u_n + u_{n + 1}$ for $n = {10}^{12}$. Give your answer with 9 digits after the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function recursivelyDefinedSequence() {\n\n  return true;\n}\n\nrecursivelyDefinedSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`recursivelyDefinedSequence()` should return `1.710637717`.",
          "testCode": "assert.strictEqual(recursivelyDefinedSequence(), 1.710637717);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301835,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-197-investigating-the-behaviour-of-a-recursively-defined-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4331000cf542c50ff45",
      "title": "Problem 198: Ambiguous Numbers",
      "challengeType": 1,
      "dashedName": "problem-198-ambiguous-numbers",
      "description": "A best approximation to a real number $x$ for the denominator bound $d$ is a rational number $\\frac{r}{s}$ (in reduced form) with $s ≤ d$, so that any rational number $\\frac{p}{q}$ which is closer to $x$ than $\\frac{r}{s}$ has $q > d$.\n\nUsually the best approximation to a real number is uniquely determined for all denominator bounds. However, there are some exceptions, e.g. $\\frac{9}{40}$ has the two best approximations $\\frac{1}{4}$ and $\\frac{1}{5}$ for the denominator bound $6$. We shall call a real number $x$ ambiguous, if there is at least one denominator bound for which $x$ possesses two best approximations. Clearly, an ambiguous number is necessarily rational.\n\nHow many ambiguous numbers $x = \\frac{p}{q}$, $0 &lt; x &lt; \\frac{1}{100}$, are there whose denominator $q$ does not exceed ${10}^8$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function ambiguousNumbers() {\n\n  return true;\n}\n\nambiguousNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`ambiguousNumbers()` should return `52374425`.",
          "testCode": "assert.strictEqual(ambiguousNumbers(), 52374425);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301836,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-198-ambiguous-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4341000cf542c50ff46",
      "title": "Problem 199: Iterative Circle Packing",
      "challengeType": 1,
      "dashedName": "problem-199-iterative-circle-packing",
      "description": "Three circles of equal radius are placed inside a larger circle such that each pair of circles is tangent to one another and the inner circles do not overlap. There are four uncovered \"gaps\" which are to be filled iteratively with more tangent circles.\n\n<img alt=\"a diagram of non-overlapping circles\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/199-circles-in-circles.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nAt each iteration, a maximally sized circle is placed in each gap, which creates more gaps for the next iteration. After 3 iterations (pictured), there are 108 gaps and the fraction of the area which is not covered by circles is 0.06790342, rounded to eight decimal places.\n\nWhat fraction of the area is not covered by circles after `n` iterations? Give your answer rounded to eight decimal places using the format x.xxxxxxxx .",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function iterativeCirclePacking(n) {\n\n  return true;\n}\n\niterativeCirclePacking(10);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function iterativeCirclePacking(n) {\n  let k1 = 1;\n  let k0 = k1 * (3 - 2 * Math.sqrt(3));\n  let a0 = 1 / (k0 * k0);\n  let a1 = 3 / (k1 * k1);\n  a1 += 3 * getArea(k0, k1, k1, n);\n  a1 += getArea(k1, k1, k1, n);\n  let final = ((a0 - a1) / a0).toFixed(8);\n\n  return parseFloat(final);\n  function getArea(k1, k2, k3, depth) {\n      if (depth == 0) return 0.0;\n      let k4 = k1 + k2 + k3 + 2 * Math.sqrt(k1 * k2 + k2 * k3 + k3 * k1);\n      let a = 1 / (k4 * k4);\n      a += getArea(k1, k2, k4, depth - 1);\n      a += getArea(k2, k3, k4, depth - 1);\n      a += getArea(k3, k1, k4, depth - 1);\n      return a;\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`iterativeCirclePacking(10)` should return a number.",
          "testCode": "assert.isNumber(iterativeCirclePacking(10));"
        },
        {
          "text": "`iterativeCirclePacking(10)` should return `0.00396087`.",
          "testCode": "assert.strictEqual(iterativeCirclePacking(10), 0.00396087);"
        },
        {
          "text": "`iterativeCirclePacking(3)` should return `0.06790342`.",
          "testCode": "assert.strictEqual(iterativeCirclePacking(3), 0.06790342);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301837,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-199-iterative-circle-packing.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4351000cf542c50ff47",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "We shall define a sqube to be a number of the form, ${p^2}{q^3}$, where $p$ and $q$ are distinct primes.\n\nFor example, $200 = {5^2}{2^3}$ or $120072949 = {{23}^2}{{61}^3}$.\n\nThe first five squbes are 72, 108, 200, 392, and 500.\n\nInterestingly, 200 is also the first number for which you cannot change any single digit to make a prime; we shall call such numbers, prime-proof. The next prime-proof sqube which contains the contiguous sub-string `200` is 1992008.\n\nFind the 200th prime-proof sqube containing the contiguous sub-string `200`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeProofSqubeWithSubString() {\n\n  return true;\n}\n\nprimeProofSqubeWithSubString();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeProofSqubeWithSubString()` should return `229161792008`.",
          "testCode": "assert.strictEqual(primeProofSqubeWithSubString(), 229161792008);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301840,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-101-to-200\\problem-200-find-the-200th-prime-proof-sqube-containing-the-contiguous-sub-string-200.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-101-to-200",
        "name": "Project Euler Problems 101 To 200"
      }
    },
    {
      "id": "5900f4361000cf542c50ff48",
      "title": "Problem 201: Subsets with a unique sum",
      "challengeType": 1,
      "dashedName": "problem-201-subsets-with-a-unique-sum",
      "description": "For any set $A$ of numbers, let $sum(A)$ be the sum of the elements of $A$.\n\nConsider the set $B = \\\\{1,3,6,8,10,11\\\\}$. There are 20 subsets of $B$ containing three elements, and their sums are:\n\n$$\\begin{align}\n  & sum(\\\\{1,3,6\\\\}) = 10 \\\\\\\\\n  & sum(\\\\{1,3,8\\\\}) = 12 \\\\\\\\\n  & sum(\\\\{1,3,10\\\\}) = 14 \\\\\\\\\n  & sum(\\\\{1,3,11\\\\}) = 15 \\\\\\\\\n  & sum(\\\\{1,6,8\\\\}) = 15 \\\\\\\\\n  & sum(\\\\{1,6,10\\\\}) = 17 \\\\\\\\\n  & sum(\\\\{1,6,11\\\\}) = 18 \\\\\\\\\n  & sum(\\\\{1,8,10\\\\}) = 19 \\\\\\\\\n  & sum(\\\\{1,8,11\\\\}) = 20 \\\\\\\\\n  & sum(\\\\{1,10,11\\\\}) = 22 \\\\\\\\\n  & sum(\\\\{3,6,8\\\\}) = 17 \\\\\\\\\n  & sum(\\\\{3,6,10\\\\}) = 19 \\\\\\\\\n  & sum(\\\\{3,6,11\\\\}) = 20 \\\\\\\\\n  & sum(\\\\{3,8,10\\\\}) = 21 \\\\\\\\\n  & sum(\\\\{3,8,11\\\\}) = 22 \\\\\\\\\n  & sum(\\\\{3,10,11\\\\}) = 24 \\\\\\\\\n  & sum(\\\\{6,8,10\\\\}) = 24 \\\\\\\\\n  & sum(\\\\{6,8,11\\\\}) = 25 \\\\\\\\\n  & sum(\\\\{6,10,11\\\\}) = 27 \\\\\\\\\n  & sum(\\\\{8,10,11\\\\}) = 29\n\\\\end{align}$$\n\nSome of these sums occur more than once, others are unique. For a set $A$, let $U(A,k)$ be the set of unique sums of $k$-element subsets of $A$, in our example we find $U(B,3) = \\\\{10,12,14,18,21,25,27,29\\\\}$ and $sum(U(B,3)) = 156$.\n\nNow consider the $100$-element set $S = \\\\{1^2, 2^2, \\ldots , {100}^2\\\\}$. $S$ has $100\\\\,891\\\\,344\\\\,545\\\\,564\\\\,193\\\\,334\\\\,812\\\\,497\\\\,256\\\\;$ $50$-element subsets.\n\nDetermine the sum of all integers which are the sum of exactly one of the $50$-element subsets of $S$, i.e. find $sum(U(S,50))$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function uniqueSubsetsSum() {\n\n  return true;\n}\n\nuniqueSubsetsSum();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`uniqueSubsetsSum()` should return `115039000`.",
          "testCode": "assert.strictEqual(uniqueSubsetsSum(), 115039000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301841,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-201-subsets-with-a-unique-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4371000cf542c50ff49",
      "title": "Problem 202: Laserbeam",
      "challengeType": 1,
      "dashedName": "problem-202-laserbeam",
      "description": "Three mirrors are arranged in the shape of an equilateral triangle, with their reflective surfaces pointing inwards. There is an infinitesimal gap at each vertex of the triangle through which a laser beam may pass.\n\nLabel the vertices $A$, $B$ and $C$. There are 2 ways in which a laser beam may enter vertex $C$, bounce off 11 surfaces, then exit through the same vertex: one way is shown below; the other is the reverse of that.\n\n<img alt=\"one way in which laser beam may enter vertex C, bounce off 11 surfaces and exit through the same vertex\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/laserbeam.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThere are 80840 ways in which a laser beam may enter vertex $C$, bounce off 1000001 surfaces, then exit through the same vertex.\n\nIn how many ways can a laser beam enter at vertex $C$, bounce off 12017639147 surfaces, then exit through the same vertex?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function laserbeam() {\n\n  return true;\n}\n\nlaserbeam();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`laserbeam()` should return `1209002624`.",
          "testCode": "assert.strictEqual(laserbeam(), 1209002624);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301843,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-202-laserbeam.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4381000cf542c50ff4a",
      "title": "Problem 203: Squarefree Binomial Coefficients",
      "challengeType": 1,
      "dashedName": "problem-203-squarefree-binomial-coefficients",
      "description": "The binomial coefficients $\\displaystyle\\binom{n}{k}$ can be arranged in triangular form, Pascal's triangle, like this:\n\n$$\\begin{array}{ccccccccccccccc}\n   &   &   &   &    &    &    &  1 &    &    &    &   &   &   &   \\\\\\\\\n   &   &   &   &    &    &  1 &    & 1  &    &    &   &   &   &   \\\\\\\\\n   &   &   &   &    &  1 &    &  2 &    &  1 &    &   &   &   &   \\\\\\\\\n   &   &   &   &  1 &    &  3 &    &  3 &    &  1 &   &   &   &   \\\\\\\\\n   &   &   & 1 &    &  4 &    &  6 &    &  4 &    & 1 &   &   &   \\\\\\\\\n   &   & 1 &   &  5 &    & 10 &    & 10 &    &  5 &   & 1 &   &   \\\\\\\\\n   & 1 &   & 6 &    & 15 &    & 20 &    & 15 &    & 6 &   & 1 &   \\\\\\\\\n 1 &   & 7 &   & 21 &    & 35 &    & 35 &    & 21 &   & 7 &   & 1 \\\\\\\\\n   &   &   &   &    &    &    & \\ldots\n\\end{array}$$\n\nIt can be seen that the first eight rows of Pascal's triangle contain twelve distinct numbers: 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 21 and 35.\n\nA positive integer n is called squarefree if no square of a prime divides n. Of the twelve distinct numbers in the first eight rows of Pascal's triangle, all except 4 and 20 are squarefree. The sum of the distinct squarefree numbers in the first eight rows is 105.\n\nFind the sum of the distinct squarefree numbers in the first 51 rows of Pascal's triangle.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squarefreeBinomialCoefficients() {\n\n  return true;\n}\n\nsquarefreeBinomialCoefficients();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`squarefreeBinomialCoefficients()` should return `34029210557338`.",
          "testCode": "assert.strictEqual(squarefreeBinomialCoefficients(), 34029210557338);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301844,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-203-squarefree-binomial-coefficients.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4381000cf542c50ff4b",
      "title": "Problem 204: Generalised Hamming Numbers",
      "challengeType": 1,
      "dashedName": "problem-204-generalised-hamming-numbers",
      "description": "A Hamming number is a positive number which has no prime factor larger than 5.\n\nSo the first few Hamming numbers are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15.\n\nThere are 1105 Hamming numbers not exceeding ${10}^8$.\n\nWe will call a positive number a generalised Hamming number of type $n$, if it has no prime factor larger than $n$. Hence the Hamming numbers are the generalised Hamming numbers of type 5.\n\nHow many generalised Hamming numbers of type 100 are there which don't exceed ${10}^9$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function generalisedHammingNumbers() {\n\n  return true;\n}\n\ngeneralisedHammingNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`generalisedHammingNumbers()` should return `2944730`.",
          "testCode": "assert.strictEqual(generalisedHammingNumbers(), 2944730);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301845,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-204-generalised-hamming-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4391000cf542c50ff4c",
      "title": "Problem 205: Dice Game",
      "challengeType": 1,
      "dashedName": "problem-205-dice-game",
      "description": "Peter has nine four-sided (pyramidal) dice, each with faces numbered 1, 2, 3, 4.\n\nColin has six six-sided (cubic) dice, each with faces numbered 1, 2, 3, 4, 5, 6.\n\nPeter and Colin roll their dice and compare totals: the highest total wins. The result is a draw if the totals are equal.\n\nWhat is the probability that Pyramidal Pete beats Cubic Colin? Give your answer rounded to seven decimal places in the form 0.abcdefg",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function diceGame() {\n\n  return true;\n}\n\ndiceGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`diceGame()` should return `0.5731441`.",
          "testCode": "assert.strictEqual(diceGame(), 0.5731441);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301846,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-205-dice-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f43a1000cf542c50ff4d",
      "title": "Problem 206: Concealed Square",
      "challengeType": 1,
      "dashedName": "problem-206-concealed-square",
      "description": "Find the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0, where each \"_\" is a single digit.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function concealedSquare() {\n\n  return true;\n}\n\nconcealedSquare();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// Check if n**2 matches the pattern\nfunction squareMatches(n) {\n  // Need BigInt due to size of values\n  let nSquared = (BigInt(n) * BigInt(n)).toString();\n\n  // Check if digits match pattern\n  for (let i = 1; i <= 9; i++) {\n    if (nSquared[2 * (i - 1)] != i) return false;\n  }\n  return true;\n}\n\n// Find integer whose square matches the pattern\nfunction concealedSquare() {\n  // Set bounds based upon max and min candidates\n  const minSquareRoot = Math.floor(Math.sqrt(10203040506070809) / 10) * 10;\n  const maxSquareRoot = Math.ceil(Math.sqrt(19293949596979899) / 10) * 10;\n\n  for (let x = maxSquareRoot; x >= minSquareRoot; x -= 10) {\n    // Note: 3*3 = 9 and 7*7 = 49 are only trailing digits\n    //       that can produce 9 as trailing digit in square\n    if (squareMatches(x + 3)) return (x + 3)*10;\n    if (squareMatches(x + 7)) return (x + 7)*10;\n  }\n  return -1;\n}"
        }
      ],
      "tests": [
        {
          "text": "`concealedSquare()` should return `1389019170`.",
          "testCode": "assert.strictEqual(concealedSquare(), 1389019170);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301847,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-206-concealed-square.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f43c1000cf542c50ff4e",
      "title": "Problem 207: Integer partition equations",
      "challengeType": 1,
      "dashedName": "problem-207-integer-partition-equations",
      "description": "For some positive integers $k$, there exists an integer partition of the form $4^t = 2^t + k$,\n\nwhere $4^t$, $2^t$, and $k$ are all positive integers and $t$ is a real number.\n\nThe first two such partitions are $4^1 = 2^1 + 2$ and $4^{1.584\\\\,962\\\\,5\\ldots} = 2^{1.584\\\\,962\\\\,5\\ldots} + 6$.\n\nPartitions where $t$ is also an integer are called perfect. For any $m ≥ 1$ let $P(m)$ be the proportion of such partitions that are perfect with $k ≤ m$.\n\nThus $P(6) = \\frac{1}{2}$.\n\nIn the following table are listed some values of $P(m)$\n\n$$\\begin{align}\n  & P(5) = \\frac{1}{1}    \\\\\\\\\n  & P(10) = \\frac{1}{2}   \\\\\\\\\n  & P(15) = \\frac{2}{3}   \\\\\\\\\n  & P(20) = \\frac{1}{2}   \\\\\\\\\n  & P(25) = \\frac{1}{2}   \\\\\\\\\n  & P(30) = \\frac{2}{5}   \\\\\\\\\n  & \\ldots                \\\\\\\\\n  & P(180) = \\frac{1}{4}  \\\\\\\\\n  & P(185) = \\frac{3}{13}\n\\end{align}$$\n\nFind the smallest $m$ for which $P(m) &lt; \\frac{1}{12\\\\,345}$",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function integerPartitionEquations() {\n\n  return true;\n}\n\nintegerPartitionEquations();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`integerPartitionEquations()` should return `44043947822`.",
          "testCode": "assert.strictEqual(integerPartitionEquations(), 44043947822);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301848,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-207-integer-partition-equations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f43f1000cf542c50ff51",
      "title": "Problem 208: Robot Walks",
      "challengeType": 1,
      "dashedName": "problem-208-robot-walks",
      "description": "A robot moves in a series of one-fifth circular arcs (72°), with a free choice of a clockwise or an anticlockwise arc for each step, but no turning on the spot.\n\nOne of 70932 possible closed paths of 25 arcs starting northward is\n\n<img alt=\"closed path of 25 arcs, starting northward\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/robot-walks.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nGiven that the robot starts facing North, how many journeys of 70 arcs in length can it take that return it, after the final arc, to its starting position?\n\n**Note:** Any arc may be traversed multiple times.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function robotWalks() {\n\n  return true;\n}\n\nrobotWalks();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`robotWalks()` should return `331951449665644800`.",
          "testCode": "assert.strictEqual(robotWalks(), 331951449665644800);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301849,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-208-robot-walks.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f43e1000cf542c50ff4f",
      "title": "Problem 209: Circular Logic",
      "challengeType": 1,
      "dashedName": "problem-209-circular-logic",
      "description": "A $k$-input binary truth table is a map from $k$ input bits (binary digits, 0 [false] or 1 [true]) to 1 output bit. For example, the $2$-input binary truth tables for the logical $AND$ and $XOR$ functions are:\n\n| x | y | x AND y |\n|---|---|---------|\n| 0 | 0 |    0    |\n| 0 | 1 |    0    |\n| 1 | 0 |    0    |\n| 1 | 1 |    1    |\n\n| x | y | x XOR y |\n|---|---|---------|\n| 0 | 0 |    0    |\n| 0 | 1 |    1    |\n| 1 | 0 |    1    |\n| 1 | 1 |    0    |\n\nHow many $6$-input binary truth tables, $τ$, satisfy the formula\n\n$$τ(a, b, c, d, e, f) \\\\; AND \\\\; τ(b, c, d, e, f, a \\\\; XOR \\\\; (b \\\\; AND \\\\; c)) = 0$$\n\nfor all $6$-bit inputs ($a$, $b$, $c$, $d$, $e$, $f$)?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function circularLogic() {\n\n  return true;\n}\n\ncircularLogic();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`circularLogic()` should return `15964587728784`.",
          "testCode": "assert.strictEqual(circularLogic(), 15964587728784);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301850,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-209-circular-logic.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f43e1000cf542c50ff50",
      "title": "Problem 210: Obtuse Angled Triangles",
      "challengeType": 1,
      "dashedName": "problem-210-obtuse-angled-triangles",
      "description": "Consider the set $S(r)$ of points ($x$,$y$) with integer coordinates satisfying $|x| + |y| ≤ r$.\n\nLet $O$ be the point (0,0) and $C$ the point ($\\frac{r}{4}$,$\\frac{r}{4}$).\n\nLet $N(r)$ be the number of points $B$ in $S(r)$, so that the triangle $OBC$ has an obtuse angle, i.e. the largest angle $α$ satisfies $90°&lt;α&lt;180°$.\n\nSo, for example, $N(4)=24$ and $N(8)=100$.\n\nWhat is $N(1\\\\,000\\\\,000\\\\,000)$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function obtuseAngledTriangles() {\n\n  return true;\n}\n\nobtuseAngledTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`obtuseAngledTriangles()` should return `1598174770174689500`.",
          "testCode": "assert.strictEqual(obtuseAngledTriangles(), 1598174770174689500);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301852,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-210-obtuse-angled-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f43f1000cf542c50ff52",
      "title": "Problem 211: Divisor Square Sum",
      "challengeType": 1,
      "dashedName": "problem-211-divisor-square-sum",
      "description": "For a positive integer $n$, let $σ_2(n)$ be the sum of the squares of its divisors. For example,\n\n$$σ_2(10) = 1 + 4 + 25 + 100 = 130$$\n\nFind the sum of all $n$, $0 &lt; n &lt; 64\\\\,000\\\\,000$ such that $σ_2(n)$ is a perfect square.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function divisorSquareSum() {\n\n  return true;\n}\n\ndivisorSquareSum();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`divisorSquareSum()` should return `1922364685`.",
          "testCode": "assert.strictEqual(divisorSquareSum(), 1922364685);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301853,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-211-divisor-square-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4411000cf542c50ff53",
      "title": "Problem 212: Combined Volume of Cuboids",
      "challengeType": 1,
      "dashedName": "problem-212-combined-volume-of-cuboids",
      "description": "An axis-aligned cuboid, specified by parameters $\\{ (x_0,y_0,z_0), (dx,dy,dz) \\}$, consists of all points ($X$,$Y$,$Z$) such that $x_0 ≤ X ≤ x_0 + dx$, $y_0 ≤ Y ≤ y_0 + dy$ and $z_0 ≤ Z ≤ z_0 + dz$. The volume of the cuboid is the product, $dx × dy × dz$. The combined volume of a collection of cuboids is the volume of their union and will be less than the sum of the individual volumes if any cuboids overlap.\n\nLet $C_1, \\ldots, C_{50000}$ be a collection of 50000 axis-aligned cuboids such that $C_n$ has parameters\n\n$$\\begin{align}\n  & x_0 = S_{6n - 5} \\\\; \\text{modulo} \\\\; 10000    \\\\\\\\\n  & y_0 = S_{6n - 4} \\\\; \\text{modulo} \\\\; 10000    \\\\\\\\\n  & z_0 = S_{6n - 3} \\\\; \\text{modulo} \\\\; 10000    \\\\\\\\\n  & dx = 1 + (S_{6n - 2} \\\\; \\text{modulo} \\\\; 399) \\\\\\\\\n  & dy = 1 + (S_{6n - 1} \\\\; \\text{modulo} \\\\; 399) \\\\\\\\\n  & dz = 1 + (S_{6n} \\\\; \\text{modulo} \\\\; 399)     \\\\\\\\\n\\end{align}$$\n\nwhere $S_1, \\ldots, S_{300000}$ come from the \"Lagged Fibonacci Generator\":\n\nFor $1 ≤ k ≤ 55$, $S_k = [100003 - 200003k + 300007k^3] \\\\; (modulo \\\\; 1000000)$\n\nFor $56 ≤ k$, $S_k = [S_{k - 24} + S_{k - 55}] \\\\; (modulo \\\\; 1000000)$\n\nThus, $C_1$ has parameters $\\{(7,53,183), (94,369,56)\\}$, $C_2$ has parameters $\\{(2383,3563,5079), (42,212,344)\\}$, and so on.\n\nThe combined volume of the first 100 cuboids, $C_1, \\ldots, C_{100}$, is 723581599.\n\nWhat is the combined volume of all 50000 cuboids, $C_1, \\ldots, C_{50000}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function combinedValueOfCuboids() {\n\n  return true;\n}\n\ncombinedValueOfCuboids();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`combinedValueOfCuboids()` should return `328968937309`.",
          "testCode": "assert.strictEqual(combinedValueOfCuboids(), 328968937309);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301854,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-212-combined-volume-of-cuboids.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4411000cf542c50ff54",
      "title": "Problem 213: Flea Circus",
      "challengeType": 1,
      "dashedName": "problem-213-flea-circus",
      "description": "A 30×30 grid of squares contains 900 fleas, initially one flea per square.\n\nWhen a bell is rung, each flea jumps to an adjacent square at random (usually 4 possibilities, except for fleas on the edge of the grid or at the corners).\n\nWhat is the expected number of unoccupied squares after 50 rings of the bell? Give your answer rounded to six decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function fleaCircus() {\n\n  return true;\n}\n\nfleaCircus();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`fleaCircus()` should return `330.721154`.",
          "testCode": "assert.strictEqual(fleaCircus(), 330.721154);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301855,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-213-flea-circus.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4421000cf542c50ff55",
      "title": "Problem 214: Totient Chains",
      "challengeType": 1,
      "dashedName": "problem-214-totient-chains",
      "description": "Let $φ$ be Euler's totient function, i.e. for a natural number $n$, $φ(n)$ is the number of $k$, $1 ≤ k ≤ n$, for which $gcd(k,n) = 1$.\n\nBy iterating $φ$, each positive integer generates a decreasing chain of numbers ending in 1. E.g. if we start with 5 the sequence 5,4,2,1 is generated. Here is a listing of all chains with length 4:\n\n$$\\begin{align}\n   5,4,2,1 & \\\\\\\\\n   7,6,2,1 & \\\\\\\\\n   8,4,2,1 & \\\\\\\\\n   9,6,2,1 & \\\\\\\\\n  10,4,2,1 & \\\\\\\\\n  12,4,2,1 & \\\\\\\\\n  14,6,2,1 & \\\\\\\\\n  18,6,2,1 &\n\\end{align}$$\n\nOnly two of these chains start with a prime, their sum is 12.\n\nWhat is the sum of all primes less than $40\\\\,000\\\\,000$ which generate a chain of length 25?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function totientChains() {\n\n  return true;\n}\n\ntotientChains();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`totientChains()` should return `1677366278943`.",
          "testCode": "assert.strictEqual(totientChains(), 1677366278943);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301856,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-214-totient-chains.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4431000cf542c50ff56",
      "title": "Problem 215: Crack-free Walls",
      "challengeType": 1,
      "dashedName": "problem-215-crack-free-walls",
      "description": "Consider the problem of building a wall out of 2×1 and 3×1 bricks (horizontal×vertical dimensions) such that, for extra strength, the gaps between horizontally-adjacent bricks never line up in consecutive layers, i.e. never form a \"running crack\".\n\nFor example, the following 9×3 wall is not acceptable due to the running crack shown in red:\n\n<img alt=\"9x3 wall with one lined up gap between horizontally-adjacent bricks\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/crack-free-walls.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThere are eight ways of forming a crack-free 9×3 wall, written $W(9,3) = 8$.\n\nCalculate $W(32,10)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function crackFreeWalls() {\n\n  return true;\n}\n\ncrackFreeWalls();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`crackFreeWalls()` should return `806844323190414`.",
          "testCode": "assert.strictEqual(crackFreeWalls(), 806844323190414);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301857,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-215-crack-free-walls.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4451000cf542c50ff57",
      "title": "Problem 216: Investigating the primality of numbers of the form 2n2-1",
      "challengeType": 1,
      "dashedName": "problem-216-investigating-the-primality-of-numbers-of-the-form-2n2-1",
      "description": "Consider numbers $t(n)$ of the form $t(n) = 2n^2 - 1$ with $n > 1$.\n\nThe first such numbers are 7, 17, 31, 49, 71, 97, 127 and 161.\n\nIt turns out that only $49 = 7 \\times 7$ and $161 = 7 \\times 23$ are not prime.\n\nFor $n ≤ 10000$ there are 2202 numbers $t(n)$ that are prime.\n\nHow many numbers $t(n)$ are prime for $n ≤ 50\\\\,000\\\\,000$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primalityOfNumbers() {\n\n  return true;\n}\n\nprimalityOfNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primalityOfNumbers()` should return `5437849`.",
          "testCode": "assert.strictEqual(primalityOfNumbers(), 5437849);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301858,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-216-investigating-the-primality-of-numbers-of-the-form-2n2-1.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4461000cf542c50ff58",
      "title": "Problem 217: Balanced Numbers",
      "challengeType": 1,
      "dashedName": "problem-217-balanced-numbers",
      "description": "A positive integer with $k$ (decimal) digits is called balanced if its first $⌈\\frac{k}{2}⌉$ digits sum to the same value as its last $⌈\\frac{k}{2}⌉$ digits, where $⌈x⌉$, pronounced ceiling of $x$, is the smallest integer $≥ x$, thus $⌈π⌉ = 4$ and $⌈5⌉ = 5$.\n\nSo, for example, all palindromes are balanced, as is 13722.\n\nLet $T(n)$ be the sum of all balanced numbers less than $10^n$.\n\nThus: $T(1) = 45$, $T(2) = 540$ and $T(5) = 334\\\\,795\\\\,890$.\n\nFind $T(47)\\\\,mod\\\\,3^{15}$",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function balancedNumbers() {\n\n  return true;\n}\n\nbalancedNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`balancedNumbers()` should return `6273134`.",
          "testCode": "assert.strictEqual(balancedNumbers(), 6273134);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301859,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-217-balanced-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4461000cf542c50ff59",
      "title": "Problem 218: Perfect right-angled triangles",
      "challengeType": 1,
      "dashedName": "problem-218-perfect-right-angled-triangles",
      "description": "Consider the right-angled triangle with sides $a=7$, $b=24$ and $c=25$.\n\nThe area of this triangle is 84, which is divisible by the perfect numbers 6 and 28.\n\nMoreover it is a primitive right-angled triangle as $gcd(a,b) = 1$ and $gcd(b,c) = 1$.\n\nAlso $c$ is a perfect square.\n\nWe will call a right-angled triangle perfect if:\n\n- it is a primitive right-angled triangle\n- its hypotenuse is a perfect square\n\nWe will call a right-angled triangle super-perfect if:\n\n- it is a perfect right-angled triangle\n- its area is a multiple of the perfect numbers 6 and 28.\n\nHow many perfect right-angled triangles with $c ≤ {10}^{16}$ exist that are not super-perfect?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function perfectRightAngledTriangles() {\n\n  return true;\n}\n\nperfectRightAngledTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`perfectRightAngledTriangles()` should return `0`.",
          "testCode": "assert.strictEqual(perfectRightAngledTriangles(), 0);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301860,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-218-perfect-right-angled-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4481000cf542c50ff5a",
      "title": "Problem 219: Skew-cost coding",
      "challengeType": 1,
      "dashedName": "problem-219-skew-cost-coding",
      "description": "Let $A$ and $B$ be bit strings (sequences of 0's and 1's).\n\nIf $A$ is equal to the <u>left</u>most length($A$) bits of $B$, then $A$ is said to be a prefix of $B$.\n\nFor example, 00110 is a prefix of <u>00110</u>1001, but not of 00111 or 100110.\n\nA prefix-free code of size $n$ is a collection of $n$ distinct bit strings such that no string is a prefix of any other. For example, this is a prefix-free code of size 6:\n\n$$0000, 0001, 001, 01, 10, 11$$\n\nNow suppose that it costs one penny to transmit a '0' bit, but four pence to transmit a '1'. Then the total cost of the prefix-free code shown above is 35 pence, which happens to be the cheapest possible for the skewed pricing scheme in question. In short, we write $Cost(6) = 35$.\n\nWhat is $Cost(10^9)$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function skewCostCoding() {\n\n  return true;\n}\n\nskewCostCoding();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`skewCostCoding()` should return `64564225042`.",
          "testCode": "assert.strictEqual(skewCostCoding(), 64564225042);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301861,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-219-skew-cost-coding.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4481000cf542c50ff5b",
      "title": "Problem 220: Heighway Dragon",
      "challengeType": 1,
      "dashedName": "problem-220-heighway-dragon",
      "description": "Let $D_0$ be the two-letter string \"Fa\". For $n ≥ 1$, derive $D_n$ from $D_{n - 1}$ by the string-rewriting rules:\n\n- \"a\" → \"aRbFR\"\n- \"b\" → \"LFaLb\"\n\nThus, $D_0$ = \"Fa\", $D_1$ = \"FaRbFR\", $D_2$ = \"FaRbFRRLFaLbFR\", and so on.\n\nThese strings can be interpreted as instructions to a computer graphics program, with \"F\" meaning \"draw forward one unit\", \"L\" meaning \"turn left 90 degrees\", \"R\" meaning \"turn right 90 degrees\", and \"a\" and \"b\" being ignored. The initial position of the computer cursor is (0,0), pointing up towards (0,1).\n\nThen $D_n$ is an exotic drawing known as the Heighway Dragon of order $n$. For example, $D_{10}$ is shown below; counting each \"F\" as one step, the highlighted spot at (18,16) is the position reached after 500 steps.\n\n<img alt=\"drawing of the Heighway Dragon after 500 steps\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/heighway-dragon.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWhat is the position of the cursor after ${10}^{12}$ steps in $D_{50}$? Give your answer as a string in the form `x,y` with no spaces.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function heighwayDragon() {\n\n  return true;\n}\n\nheighwayDragon();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`heighwayDragon()` should return a string.",
          "testCode": "assert.isString(heighwayDragon());"
        },
        {
          "text": "`heighwayDragon()` should return the string `139776,963904`.",
          "testCode": "assert.strictEqual(heighwayDragon(), '139776,963904');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301863,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-220-heighway-dragon.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4491000cf542c50ff5c",
      "title": "Problem 221: Alexandrian Integers",
      "challengeType": 1,
      "dashedName": "problem-221-alexandrian-integers",
      "description": "We shall call a positive integer $A$ an \"Alexandrian integer\", if there exist integers $p$, $q$, $r$ such that:\n\n$$A = p \\times q \\times r$$\n\nand\n\n$$\\frac{1}{A} = \\frac{1}{p} + \\frac{1}{q} + \\frac{1}{r}$$\n\n\nFor example, 630 is an Alexandrian integer ($p = 5$, $q = −7$, $r = −18$). In fact, 630 is the 6th Alexandrian integer, the first 6 Alexandrian integers being: 6, 42, 120, 156, 420 and 630.\n\nFind the 150000th Alexandrian integer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function alexandrianIntegers() {\n\n  return true;\n}\n\nalexandrianIntegers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`alexandrianIntegers()` should return `1884161251122450`.",
          "testCode": "assert.strictEqual(alexandrianIntegers(), 1884161251122450);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301864,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-221-alexandrian-integers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f44b1000cf542c50ff5d",
      "title": "Problem 222: Sphere Packing",
      "challengeType": 1,
      "dashedName": "problem-222-sphere-packing",
      "description": "What is the length of the shortest pipe, of internal radius 50mm, that can fully contain 21 balls of radii 30mm, 31mm, ..., 50mm?\n\nGive your answer in micrometres (${10}^{-6}$ m) rounded to the nearest integer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function spherePacking() {\n\n  return true;\n}\n\nspherePacking();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`spherePacking()` should return `1590933`.",
          "testCode": "assert.strictEqual(spherePacking(), 1590933);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301865,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-222-sphere-packing.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f44b1000cf542c50ff5e",
      "title": "Problem 223: Almost right-angled triangles I",
      "challengeType": 1,
      "dashedName": "problem-223-almost-right-angled-triangles-i",
      "description": "Let us call an integer sided triangle with sides $a ≤ b ≤ c$ barely acute if the sides satisfy $a^2 + b^2 = c^2 + 1$.\n\nHow many barely acute triangles are there with perimeter $≤ 25\\\\,000\\\\,000$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function almostRightAngledTrianglesOne() {\n\n  return true;\n}\n\nalmostRightAngledTrianglesOne();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`almostRightAngledTrianglesOne()` should return `61614848`.",
          "testCode": "assert.strictEqual(almostRightAngledTrianglesOne(), 61614848);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301866,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-223-almost-right-angled-triangles-i.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f44e1000cf542c50ff5f",
      "title": "Problem 224: Almost right-angled triangles II",
      "challengeType": 1,
      "dashedName": "problem-224-almost-right-angled-triangles-ii",
      "description": "Let us call an integer sided triangle with sides $a ≤ b ≤ c$ barely obtuse if the sides satisfy $a^2 + b^2 = c^2 - 1$.\n\nHow many barely obtuse triangles are there with perimeter $≤ 75\\\\,000\\\\,000$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function almostRightAngledTrianglesTwo() {\n\n  return true;\n}\n\nalmostRightAngledTrianglesTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`almostRightAngledTrianglesTwo()` should return `4137330`.",
          "testCode": "assert.strictEqual(almostRightAngledTrianglesTwo(), 4137330);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301867,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-224-almost-right-angled-triangles-ii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f44e1000cf542c50ff60",
      "title": "Problem 225: Tribonacci non-divisors",
      "challengeType": 1,
      "dashedName": "problem-225-tribonacci-non-divisors",
      "description": "The sequence 1, 1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355, 653, 1201 ...\n\nis defined by $T_1 = T_2 = T_3 = 1$ and $T_n = T_{n - 1} + T_{n - 2} + T_{n - 3}$.\n\nIt can be shown that 27 does not divide any terms of this sequence. In fact, 27 is the first odd number with this property.\n\nFind the ${124}^{\\text{th}}$ odd number that does not divide any terms of the above sequence.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function tribonacciNonDivisors() {\n\n  return true;\n}\n\ntribonacciNonDivisors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`tribonacciNonDivisors()` should return `2009`.",
          "testCode": "assert.strictEqual(tribonacciNonDivisors(), 2009);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301868,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-225-tribonacci-non-divisors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4511000cf542c50ff62",
      "title": "Problem 226: A Scoop of Blancmange",
      "challengeType": 1,
      "dashedName": "problem-226-a-scoop-of-blancmange",
      "description": "The blancmange curve is the set of points ($x$,$y$) such that $0 ≤ x ≤ 1$ and $\\displaystyle y = \\sum_{n = 0}^{\\infty} \\frac{s(2^nx)}{2^n}$, where $s(x)$ is the distance from $x$ to the nearest integer.\n\nThe area under the blancmange curve is equal to $\\frac{1}{2}$, shown in pink in the diagram below.\n\n<img alt=\"diagram of blancmange curve, with circle C shown on diagram\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/a-scoop-of-blancmange.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $C$ be the circle with center ($\\frac{1}{4}$,$\\frac{1}{2}$) and radius $\\frac{1}{4}$, shown in black in the diagram.\n\nWhat area under the blancmange curve is enclosed by $C$? Give your answer rounded to eight decimal places in the form 0.abcdefgh",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function scoopOfBlancmange() {\n\n  return true;\n}\n\nscoopOfBlancmange();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`scoopOfBlancmange()` should return `0.11316017`.",
          "testCode": "assert.strictEqual(scoopOfBlancmange(), 0.11316017);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301869,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-226-a-scoop-of-blancmange.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f44f1000cf542c50ff61",
      "title": "Problem 227: The Chase",
      "challengeType": 1,
      "dashedName": "problem-227-the-chase",
      "description": "\"The Chase\" is a game played with two dice and an even number of players.\n\nThe players sit around a table; the game begins with two opposite players having one die each. On each turn, the two players with a die roll it.\n\nIf the player rolls a 1, he passes the die to his neighbor on the left.\n\nIf the player rolls a 6, he passes the die to his neighbor on the right.\n\nOtherwise, he keeps the die for the next turn.\n\nThe game ends when one player has both dice after they have been rolled and passed; that player has then lost.\n\nIn a game with 100 players, what is the expected number of turns the game lasts? Give your answer rounded to ten significant digits.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function theChase() {\n\n  return true;\n}\n\ntheChase();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`theChase()` should return `3780.618622`.",
          "testCode": "assert.strictEqual(theChase(), 3780.618622);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301870,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-227-the-chase.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4511000cf542c50ff63",
      "title": "Problem 228: Minkowski Sums",
      "challengeType": 1,
      "dashedName": "problem-228-minkowski-sums",
      "description": "Let $S_n$ be the regular $n$-sided polygon – or shape – whose vertices $v_k (k = 1, 2, \\ldots, n)$ have coordinates:\n\n$$\\begin{align}\n  & x_k = cos(\\frac{2k - 1}{n} × 180°) \\\\\\\\\n  & y_k = sin(\\frac{2k - 1}{n} × 180°)\n\\end{align}$$\n\nEach $S_n$ is to be interpreted as a filled shape consisting of all points on the perimeter and in the interior.\n\nThe Minkowski sum, $S + T$, of two shapes $S$ and $T$ is the result of adding every point in $S$ to every point in $T$, where point addition is performed coordinate-wise: $(u, v) + (x, y) = (u + x, v + y)$.\n\nFor example, the sum of $S_3$ and $S_4$ is the six-sided shape shown in pink below:\n\n<img alt=\"image showing S_3, S_4 and S_3 + S_4\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/minkowski-sums.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHow many sides does $S_{1864} + S_{1865} + \\ldots + S_{1909}$ have?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function minkowskiSums() {\n\n  return true;\n}\n\nminkowskiSums();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`minkowskiSums()` should return `86226`.",
          "testCode": "assert.strictEqual(minkowskiSums(), 86226);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301871,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-228-minkowski-sums.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4521000cf542c50ff64",
      "title": "Problem 229: Four Representations using Squares",
      "challengeType": 1,
      "dashedName": "problem-229-four-representations-using-squares",
      "description": "Consider the number 3600. It is very special, because\n\n$$\\begin{align}\n  & 3600 = {48}^2 + {36}^2   \\\\\\\\\n  & 3600 = {20}^2 + {2×40}^2 \\\\\\\\\n  & 3600 = {30}^2 + {3×30}^2 \\\\\\\\\n  & 3600 = {45}^2 + {7×15}^2 \\\\\\\\\n\\end{align}$$\n\nSimilarly, we find that $88201 = {99}^2 + {280}^2 = {287}^2 + 2 × {54}^2 = {283}^2 + 3 × {52}^2 = {197}^2 + 7 × {84}^2$.\n\nIn 1747, Euler proved which numbers are representable as a sum of two squares. We are interested in the numbers $n$ which admit representations of all of the following four types:\n\n$$\\begin{align}\n  & n = {a_1}^2 + {b_1}^2  \\\\\\\\\n  & n = {a_2}^2 + 2{b_2}^2 \\\\\\\\\n  & n = {a_3}^2 + 3{b_3}^2 \\\\\\\\\n  & n = {a_7}^2 + 7{b_7}^2 \\\\\\\\\n\\end{align}$$\n\nwhere the $a_k$ and $b_k$ are positive integers.\n\nThere are 75373 such numbers that do not exceed ${10}^7$.\n\nHow many such numbers are there that do not exceed $2 × {10}^9$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function representationsUsingSquares() {\n\n  return true;\n}\n\nrepresentationsUsingSquares();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`representationsUsingSquares()` should return `11325263`.",
          "testCode": "assert.strictEqual(representationsUsingSquares(), 11325263);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301872,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-229-four-representations-using-squares.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4531000cf542c50ff65",
      "title": "Problem 230: Fibonacci Words",
      "challengeType": 1,
      "dashedName": "problem-230-fibonacci-words",
      "description": "For any two strings of digits, $A$ and $B$, we define $F_{A,B}$ to be the sequence ($A, B, AB, BAB, ABBAB, \\ldots$) in which each term is the concatenation of the previous two.\n\nFurther, we define $D_{A,B}(n)$ to be the $n^{\\text{th}}$ digit in the first term of $F_{A,B}$ that contains at least $n$ digits.\n\nExample:\n\nLet $A = 1\\\\,415\\\\,926\\\\,535$, $B = 8\\\\,979\\\\,323\\\\,846$. We wish to find $D_{A,B}(35)$, say.\n\nThe first few terms of $F_{A,B}$ are:\n\n$$\\begin{align}\n  & 1\\\\,415\\\\,926\\\\,535 \\\\\\\\\n  & 8\\\\,979\\\\,323\\\\,846 \\\\\\\\\n  & 14\\\\,159\\\\,265\\\\,358\\\\,979\\\\,323\\\\,846 \\\\\\\\\n  & 897\\\\,932\\\\,384\\\\,614\\\\,159\\\\,265\\\\,358\\\\,979\\\\,323\\\\,846 \\\\\\\\\n  & 14\\\\,159\\\\,265\\\\,358\\\\,979\\\\,323\\\\,846\\\\,897\\\\,932\\\\,384\\\\,614\\\\,15\\color{red}{9}\\\\,265\\\\,358\\\\,979\\\\,323\\\\,846\n\\end{align}$$\n\nThen $D_{A,B}(35)$ is the ${35}^{\\text{th}}$ digit in the fifth term, which is 9.\n\nNow we use for $A$ the first 100 digits of $π$ behind the decimal point:\n\n$$\\begin{align}\n  & 14\\\\,159\\\\,265\\\\,358\\\\,979\\\\,323\\\\,846\\\\,264\\\\,338\\\\,327\\\\,950\\\\,288\\\\,419\\\\,716\\\\,939\\\\,937\\\\,510 \\\\\\\\\n  & 58\\\\,209\\\\,749\\\\,445\\\\,923\\\\,078\\\\,164\\\\,062\\\\,862\\\\,089\\\\,986\\\\,280\\\\,348\\\\,253\\\\,421\\\\,170\\\\,679\n\\end{align}$$\n\nand for $B$ the next hundred digits:\n\n$$\\begin{align}\n  & 82\\\\,148\\\\,086\\\\,513\\\\,282\\\\,306\\\\,647\\\\,093\\\\,844\\\\,609\\\\,550\\\\,582\\\\,231\\\\,725\\\\,359\\\\,408\\\\,128 \\\\\\\\\n  & 48\\\\,111\\\\,745\\\\,028\\\\,410\\\\,270\\\\,193\\\\,852\\\\,110\\\\,555\\\\,964\\\\,462\\\\,294\\\\,895\\\\,493\\\\,038\\\\,196\n\\end{align}$$\n\nFind $\\sum_{n = 0, 1, \\ldots, 17} {10}^n × D_{A,B}((127 + 19n) × 7^n)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function fibonacciWords() {\n\n  return true;\n}\n\nfibonacciWords();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`fibonacciWords()` should return `850481152593119200`.",
          "testCode": "assert.strictEqual(fibonacciWords(), 850481152593119200);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301874,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-230-fibonacci-words.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4531000cf542c50ff66",
      "title": "Problem 231: The prime factorisation of binomial coefficients",
      "challengeType": 1,
      "dashedName": "problem-231-the-prime-factorisation-of-binomial-coefficients",
      "description": "The binomial coefficient $\\displaystyle\\binom{10}{3} = 120$.\n\n$120 = 2^3 × 3 × 5 = 2 × 2 × 2 × 3 × 5$, and $2 + 2 + 2 + 3 + 5 = 14$.\n\nSo the sum of the terms in the prime factorisation of $\\displaystyle\\binom{10}{3}$ is $14$.\n\nFind the sum of the terms in the prime factorisation of $\\binom{20\\\\,000\\\\,000}{15\\\\,000\\\\,000}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeFactorisation() {\n\n  return true;\n}\n\nprimeFactorisation();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeFactorisation()` should return `7526965179680`.",
          "testCode": "assert.strictEqual(primeFactorisation(), 7526965179680);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301875,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-231-the-prime-factorisation-of-binomial-coefficients.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4551000cf542c50ff67",
      "title": "Problem 232: The Race",
      "challengeType": 1,
      "dashedName": "problem-232-the-race",
      "description": "Two players share an unbiased coin and take it in turns to play \"The Race\".\n\nOn Player 1's turn, he tosses the coin once: if it comes up Heads, he scores one point; if it comes up Tails, he scores nothing.\n\nOn Player 2's turn, she chooses a positive integer $T$ and tosses the coin $T$ times: if it comes up all Heads, she scores $2^{T - 1}$ points; otherwise, she scores nothing.\n\nPlayer 1 goes first. The winner is the first to 100 or more points.\n\nOn each turn Player 2 selects the number, $T$, of coin tosses that maximizes the probability of her winning.\n\nWhat is the probability that Player 2 wins?\n\nGive your answer rounded to eight decimal places in the form 0.abcdefgh .",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function theRace() {\n\n  return true;\n}\n\ntheRace();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`theRace()` should return `0.83648556`.",
          "testCode": "assert.strictEqual(theRace(), 0.83648556);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301876,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-232-the-race.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4551000cf542c50ff68",
      "title": "Problem 233: Lattice points on a circle",
      "challengeType": 1,
      "dashedName": "problem-233-lattice-points-on-a-circle",
      "description": "Let $f(N)$ be the number of points with integer coordinates that are on a circle passing through $(0,0)$, $(N,0)$,$(0,N)$, and $(N,N)$.\n\nIt can be shown that $f(10000) = 36$.\n\nWhat is the sum of all positive integers $N ≤ {10}^{11}$ such that $f(N) = 420$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function latticePointsOnACircle() {\n\n  return true;\n}\n\nlatticePointsOnACircle();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`latticePointsOnACircle()` should return `271204031455541300`.",
          "testCode": "assert.strictEqual(latticePointsOnACircle(), 271204031455541300);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301877,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-233-lattice-points-on-a-circle.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4571000cf542c50ff69",
      "title": "Problem 234: Semidivisible numbers",
      "challengeType": 1,
      "dashedName": "problem-234-semidivisible-numbers",
      "description": "For an integer $n ≥ 4$, we define the lower prime square root of $n$, denoted by $lps(n)$, as the $\\text{largest prime} ≤ \\sqrt{n}$ and the upper prime square root of $n$, $ups(n)$, as the $\\text{smallest prime} ≥ \\sqrt{n}$.\n\nSo, for example, $lps(4) = 2 = ups(4)$, $lps(1000) = 31$, $ups(1000) = 37$.\n\nLet us call an integer $n ≥ 4$ semidivisible, if one of $lps(n)$ and $ups(n)$ divides $n$, but not both.\n\nThe sum of the semidivisible numbers not exceeding 15 is 30, the numbers are 8, 10 and 12. 15 is not semidivisible because it is a multiple of both $lps(15) = 3$ and $ups(15) = 5$. As a further example, the sum of the 92 semidivisible numbers up to 1000 is 34825.\n\nWhat is the sum of all semidivisible numbers not exceeding 999966663333?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function semidivisibleNumbers() {\n\n  return true;\n}\n\nsemidivisibleNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`semidivisibleNumbers()` should return `1259187438574927000`.",
          "testCode": "assert.strictEqual(semidivisibleNumbers(), 1259187438574927000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301878,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-234-semidivisible-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4571000cf542c50ff6a",
      "title": "Problem 235: An Arithmetic Geometric sequence",
      "challengeType": 1,
      "dashedName": "problem-235-an-arithmetic-geometric-sequence",
      "description": "Given is the arithmetic-geometric sequence $u(k) = (900 - 3k)r^{k - 1}$.\n\nLet $s(n) = \\sum_{k=1 \\ldots n} u(k)$.\n\nFind the value of $r$ for which $s(5000) = -600\\\\,000\\\\,000\\\\,000$.\n\nGive your answer rounded to 12 places behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function arithmeticGeometricSequence() {\n\n  return true;\n}\n\narithmeticGeometricSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`arithmeticGeometricSequence()` should return `1.002322108633`.",
          "testCode": "assert.strictEqual(arithmeticGeometricSequence(), 1.002322108633);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301879,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-235-an-arithmetic-geometric-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4591000cf542c50ff6b",
      "title": "Problem 236: Luxury Hampers",
      "challengeType": 1,
      "dashedName": "problem-236-luxury-hampers",
      "description": "Suppliers 'A' and 'B' provided the following numbers of products for the luxury hamper market:\n\n|       Product      | 'A'  | 'B'  |\n|--------------------|------|------|\n|    Beluga Caviar   | 5248 | 640  |\n|    Christmas Cake  | 1312 | 1888 |\n|    Gammon Joint    | 2624 | 3776 |\n|    Vintage Port    | 5760 | 3776 |\n| Champagne Truffles | 3936 | 5664 |\n\nAlthough the suppliers try very hard to ship their goods in perfect condition, there is inevitably some spoilage - i.e. products gone bad.\n\nThe suppliers compare their performance using two types of statistic:\n\n- The five per-product spoilage rates for each supplier are equal to the number of products gone bad divided by the number of products supplied, for each of the five products in turn.\n- The overall spoilage rate for each supplier is equal to the total number of products gone bad divided by the total number of products provided by that supplier.\n\nTo their surprise, the suppliers found that each of the five per-product spoilage rates was worse (higher) for 'B' than for 'A' by the same factor (ratio of spoilage rates), $m > 1$; and yet, paradoxically, the overall spoilage rate was worse for 'A' than for 'B', also by a factor of $m$.\n\nThere are thirty-five $m > 1$ for which this surprising result could have occurred, the smallest of which is $\\frac{1476}{1475}$.\n\nWhat's the largest possible value of $m$? Give your answer as a string with fraction reduced to its lowest terms, in the form `u/v`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function luxuryHampers() {\n\n  return true;\n}\n\nluxuryHampers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`luxuryHampers()` should return a string.",
          "testCode": "assert.isString(luxuryHampers());"
        },
        {
          "text": "`luxuryHampers()` should return the string `123/59`.",
          "testCode": "assert.strictEqual(luxuryHampers(), '123/59');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301881,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-236-luxury-hampers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4591000cf542c50ff6c",
      "title": "Problem 237: Tours on a 4 x n playing board",
      "challengeType": 1,
      "dashedName": "problem-237-tours-on-a-4-x-n-playing-board",
      "description": "Let $T(n)$ be the number of tours over a 4 × $n$ playing board such that:\n\n- The tour starts in the top left corner.\n- The tour consists of moves that are up, down, left, or right one square.\n- The tour visits each square exactly once.\n- The tour ends in the bottom left corner.\n\nThe diagram shows one tour over a 4 × 10 board:\n\n<img alt=\"one tour over 4 x 10 board\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/tours-on-a-4-x-n-playing-board.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\n$T(10)$ is 2329. What is $T({10}^{12})$ modulo ${10}^8$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function toursOnPlayingBoard() {\n\n  return true;\n}\n\ntoursOnPlayingBoard();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`toursOnPlayingBoard()` should return `15836928`.",
          "testCode": "assert.strictEqual(toursOnPlayingBoard(), 15836928);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301882,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-237-tours-on-a-4-x-n-playing-board.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f45b1000cf542c50ff6d",
      "title": "Problem 238: Infinite string tour",
      "challengeType": 1,
      "dashedName": "problem-238-infinite-string-tour",
      "description": "Create a sequence of numbers using the \"Blum Blum Shub\" pseudo-random number generator:\n\n$$\ns_0 = 14025256 \\\\\\\\\ns_{n + 1} = {s_n}^2 \\\\; mod \\\\; 20\\\\,300\\\\,713\n$$\n\nConcatenate these numbers $s_0s_1s_2\\ldots$ to create a string $w$ of infinite length. Then, $w = 14025256741014958470038053646\\ldots$\n\nFor a positive integer $k$, if no substring of $w$ exists with a sum of digits equal to $k$, $p(k)$ is defined to be zero. If at least one substring of $w$ exists with a sum of digits equal to $k$, we define $p(k) = z$, where $z$ is the starting position of the earliest such substring.\n\nFor instance:\n\nThe substrings 1, 14, 1402, … with respective sums of digits equal to 1, 5, 7, … start at position 1, hence $p(1) = p(5) = p(7) = \\ldots = 1$.\n\nThe substrings 4, 402, 4025, … with respective sums of digits equal to 4, 6, 11, … start at position 2, hence $p(4) = p(6) = p(11) = \\ldots = 2$.\n\nThe substrings 02, 0252, … with respective sums of digits equal to 2, 9, … start at position 3, hence $p(2) = p(9) = \\ldots = 3$.\n\nNote that substring 025 starting at position 3, has a sum of digits equal to 7, but there was an earlier substring (starting at position 1) with a sum of digits equal to 7, so $p(7) = 1$, not 3.\n\nWe can verify that, for $0 &lt; k ≤ {10}^3$, $\\sum p(k) = 4742$.\n\nFind $\\sum p(k)$, for $0 &lt; k ≤ 2 \\times {10}^{15}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function infiniteStringTour() {\n\n  return true;\n}\n\ninfiniteStringTour();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`infiniteStringTour()` should return `9922545104535660`.",
          "testCode": "assert.strictEqual(infiniteStringTour(), 9922545104535660);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301883,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-238-infinite-string-tour.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f45c1000cf542c50ff6e",
      "title": "Problem 239: Twenty-two Foolish Primes",
      "challengeType": 1,
      "dashedName": "problem-239-twenty-two-foolish-primes",
      "description": "A set of disks numbered 1 through 100 are placed in a line in random order.\n\nWhat is the probability that we have a partial derangement such that exactly 22 prime number discs are found away from their natural positions? (Any number of non-prime disks may also be found in or out of their natural positions.)\n\nGive your answer rounded to 12 places behind the decimal point in the form 0.abcdefghijkl.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function twentyTwoFoolishPrimes() {\n\n  return true;\n}\n\ntwentyTwoFoolishPrimes();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`twentyTwoFoolishPrimes()` should return `0.001887854841`.",
          "testCode": "assert.strictEqual(twentyTwoFoolishPrimes(), 0.001887854841);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301884,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-239-twenty-two-foolish-primes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f45d1000cf542c50ff6f",
      "title": "Problem 240: Top Dice",
      "challengeType": 1,
      "dashedName": "problem-240-top-dice",
      "description": "There are 1111 ways in which five 6-sided dice (sides numbered 1 to 6) can be rolled so that the top three sum to 15. Some examples are:\n\n$$\\begin{align}\n  & D_1,D_2,D_3,D_4,D_5 = 4,3,6,3,5 \\\\\\\\\n  & D_1,D_2,D_3,D_4,D_5 = 4,3,3,5,6 \\\\\\\\\n  & D_1,D_2,D_3,D_4,D_5 = 3,3,3,6,6 \\\\\\\\\n  & D_1,D_2,D_3,D_4,D_5 = 6,6,3,3,3\n\\end{align}$$\n\nIn how many ways can twenty 12-sided dice (sides numbered 1 to 12) be rolled so that the top ten sum to 70?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function topDice() {\n\n  return true;\n}\n\ntopDice();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`topDice()` should return `7448717393364182000`.",
          "testCode": "assert.strictEqual(topDice(), 7448717393364182000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301887,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-240-top-dice.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f45d1000cf542c50ff70",
      "title": "Problem 241: Perfection Quotients",
      "challengeType": 1,
      "dashedName": "problem-241-perfection-quotients",
      "description": "For a positive integer $n$, let $σ(n)$ be the sum of all divisors of $n$, so e.g. $σ(6) = 1 + 2 + 3 + 6 = 12$.\n\nA perfect number, as you probably know, is a number with $σ(n) = 2n$.\n\nLet us define the perfection quotient of a positive integer as $p(n) = \\frac{σ(n)}{n}$.\n\nFind the sum of all positive integers $n ≤ {10}^{18}$ for which $p(n)$ has the form $k + \\frac{1}{2}$, where $k$ is an integer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function perfectionQuotients() {\n\n  return true;\n}\n\nperfectionQuotients();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`perfectionQuotients()` should return `482316491800641150`.",
          "testCode": "assert.strictEqual(perfectionQuotients(), 482316491800641150);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301888,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-241-perfection-quotients.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f45f1000cf542c50ff71",
      "title": "Problem 242: Odd Triplets",
      "challengeType": 1,
      "dashedName": "problem-242-odd-triplets",
      "description": "Given the set {1,2,..., $n$}, we define $f(n, k)$ as the number of its $k$-element subsets with an odd sum of elements. For example, $f(5,3) = 4$, since the set {1,2,3,4,5} has four 3-element subsets having an odd sum of elements, i.e.: {1,2,4}, {1,3,5}, {2,3,4} and {2,4,5}.\n\nWhen all three values $n$, $k$ and $f(n, k)$ are odd, we say that they make an odd-triplet $[n, k, f(n, k)]$.\n\nThere are exactly five odd-triplets with $n ≤ 10$, namely: $[1, 1, f(1, 1) = 1]$, $[5, 1, f(5, 1) = 3]$, $[5, 5, f(5, 5) = 1]$, $[9, 1, f(9, 1) = 5]$ and $[9, 9, f(9, 9) = 1]$.\n\nHow many odd-triplets are there with $n ≤ {10}^{12}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function oddTriplets() {\n\n  return true;\n}\n\noddTriplets();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`oddTriplets()` should return `997104142249036700`.",
          "testCode": "assert.strictEqual(oddTriplets(), 997104142249036700);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301889,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-242-odd-triplets.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4601000cf542c50ff73",
      "title": "Problem 243: Resilience",
      "challengeType": 1,
      "dashedName": "problem-243-resilience",
      "description": "A positive fraction whose numerator is less than its denominator is called a proper fraction.\n\nFor any denominator, $d$, there will be $d−1$ proper fractions; for example, with $d = 12$:\n\n$$\\frac{1}{12}, \\frac{2}{12}, \\frac{3}{12}, \\frac{4}{12}, \\frac{5}{12}, \\frac{6}{12}, \\frac{7}{12}, \\frac{8}{12}, \\frac{9}{12}, \\frac{10}{12}, \\frac{11}{12}$$\n\nWe shall call a fraction that cannot be canceled down a resilient fraction.\n\nFurthermore we shall define the resilience of a denominator, $R(d)$, to be the ratio of its proper fractions that are resilient; for example, $R(12) = \\frac{4}{11}$.\n\nIn fact, $d = 12$ is the smallest denominator having a resilience $R(d) &lt; \\frac{4}{10}$.\n\nFind the smallest denominator $d$, having a resilience $R(d) &lt; \\frac{15\\\\,499}{94\\\\,744}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function resilience() {\n\n  return true;\n}\n\nresilience();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`resilience()` should return `892371480`.",
          "testCode": "assert.strictEqual(resilience(), 892371480);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301890,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-243-resilience.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4601000cf542c50ff72",
      "title": "Problem 244: Sliders",
      "challengeType": 1,
      "dashedName": "problem-244-sliders",
      "description": "You probably know the game Fifteen Puzzle. Here, instead of numbered tiles, we have seven red tiles and eight blue tiles.\n\nA move is denoted by the uppercase initial of the direction (Left, Right, Up, Down) in which the tile is slid, e.g. starting from configuration ($S$), by the sequence $LULUR$ we reach the configuration ($E$):\n\n($S$) <img alt=\"configuration S\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/sliders-1.gif\" style=\"display: inline-block; background-color: white; padding: 10px;\">, ($E$) <img alt=\"configuration E\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/sliders-2.gif\" style=\"display: inline-block; background-color: white; padding: 10px;\">\n\nFor each path, its checksum is calculated by (pseudocode):\n\n$$\\begin{align}\n  & \\text{checksum} = 0 \\\\\\\\\n  & \\text{checksum} = (\\text{checksum} × 243 + m_1) \\\\; \\text{mod} \\\\; 100\\\\,000\\\\,007 \\\\\\\\\n  & \\text{checksum} = (\\text{checksum} × 243 + m_2) \\\\; \\text{mod} \\\\; 100\\\\,000\\\\,007 \\\\\\\\\n  & \\ldots \\\\\\\\\n  & \\text{checksum} = (\\text{checksum} × 243 + m_n) \\\\; \\text{mod} \\\\; 100\\\\,000\\\\,007\n\\end{align}$$\n\nwhere $m_k$ is the ASCII value of the $k^{\\text{th}}$ letter in the move sequence and the ASCII values for the moves are:\n\n$$\\begin{array}{|c|c|}\n  \\hline\n  L & 76 \\\\\\\\ \\hline\n  R & 82 \\\\\\\\ \\hline\n  U & 85 \\\\\\\\ \\hline\n  D & 68 \\\\\\\\ \\hline\n\\end{array}$$\n\nFor the sequence $LULUR$ given above, the checksum would be 19761398. Now, starting from configuration ($S$), find all shortest ways to reach configuration ($T$).\n\n($S$) <img alt=\"configuration S\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/sliders-3.gif\" style=\"display: inline-block; background-color: white; padding: 10px;\">, ($T$) <img alt=\"configuration T\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/sliders-4.gif\" style=\"display: inline-block; background-color: white; padding: 10px;\">\n\nWhat is the sum of all checksums for the paths having the minimal length?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sliders() {\n\n  return true;\n}\n\nsliders();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sliders()` should return `96356848`.",
          "testCode": "assert.strictEqual(sliders(), 96356848);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301891,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-244-sliders.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4621000cf542c50ff74",
      "title": "Problem 245: Coresilience",
      "challengeType": 1,
      "dashedName": "problem-245-coresilience",
      "description": "We shall call a fraction that cannot be canceled down a resilient fraction.\n\nFurthermore we shall define the resilience of a denominator, $R(d)$, to be the ratio of its proper fractions that are resilient; for example, $R(12) = \\frac{4}{11}$.\n\nThe resilience of a number $d > 1$ is then $\\frac{φ(d)}{d − 1}$ , where $φ$ is Euler's totient function.\n\nWe further define the coresilience of a number $n > 1$ as $C(n) = \\frac{n − φ(n)}{n − 1}$.\n\nThe coresilience of a prime $p$ is $C(p) = \\frac{1}{p − 1}$.\n\nFind the sum of all composite integers $1 &lt; n ≤ 2 × {10}^{11}$, for which $C(n)$ is a unit fraction.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function coresilience() {\n\n  return true;\n}\n\ncoresilience();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`coresilience()` should return `288084712410001`.",
          "testCode": "assert.strictEqual(coresilience(), 288084712410001);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301892,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-245-coresilience.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4621000cf542c50ff75",
      "title": "Problem 246: Tangents to an ellipse",
      "challengeType": 1,
      "dashedName": "problem-246-tangents-to-an-ellipse",
      "description": "A definition for an ellipse is:\n\nGiven a circle $c$ with center $M$ and radius $r$ and a point $G$ such that $d(G, M) < r$, the locus of the points that are equidistant from $c$ and $G$ form an ellipse.\n\nThe construction of the points of the ellipse is shown below.\n\n<img alt=\"animation of ellipse construction\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/tangents-to-an-ellipse-1.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nGiven are the points $M(-2000, 1500)$ and $G(8000, 1500)$.\n\nGiven is also the circle $c$ with center $M$ and radius $15\\\\,000$.\n\nThe locus of the points that are equidistant from $G$ and $c$ form an ellipse $e$.\n\nFrom a point $P$ outside $e$ the two tangents $t_1$ and $t_2$ to the ellipse are drawn.\n\nLet the points where $t_1$ and $t_2$ touch the ellipse be $R$ and $S$.\n\n<img alt=\"circle c with the center M, radius 15000, and point P outside of ellipse e; from point P two tangents t_1 and t_2 are drawn to the ellipse, with points touching ellipse are R and S\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/tangents-to-an-ellipse-2.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFor how many lattice points $P$ is angle $RPS$ greater than 45°?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function tangentsToAnEllipse() {\n\n  return true;\n}\n\ntangentsToAnEllipse();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`tangentsToAnEllipse()` should return `810834388`.",
          "testCode": "assert.strictEqual(tangentsToAnEllipse(), 810834388);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301893,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-246-tangents-to-an-ellipse.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4641000cf542c50ff76",
      "title": "Problem 247: Squares under a hyperbola",
      "challengeType": 1,
      "dashedName": "problem-247-squares-under-a-hyperbola",
      "description": "Consider the region constrained by $1 ≤ x$ and $0 ≤ y ≤ \\frac{1}{x}$.\n\nLet $S_1$ be the largest square that can fit under the curve.\n\nLet $S_2$ be the largest square that fits in the remaining area, and so on.\n\nLet the index of $S_n$ be the pair (left, below) indicating the number of squares to the left of $S_n$ and the number of squares below $S_n$.\n\n<img alt=\"diagram with squares under the hyperbola\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/squares-under-a-hyperbola.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe diagram shows some such squares labeled by number.\n\n$S_2$ has one square to its left and none below, so the index of $S_2$ is (1, 0).\n\nIt can be seen that the index of $S_{32}$ is (1,1) as is the index of $S_{50}$.\n\n50 is the largest $n$ for which the index of $S_n$ is (1, 1).\n\nWhat is the largest $n$ for which the index of $S_n$ is (3, 3)?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squaresUnderAHyperbola() {\n\n  return true;\n}\n\nsquaresUnderAHyperbola();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`squaresUnderAHyperbola()` should return `782252`.",
          "testCode": "assert.strictEqual(squaresUnderAHyperbola(), 782252);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301894,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-247-squares-under-a-hyperbola.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4651000cf542c50ff77",
      "title": "Problem 248: Numbers for which Euler’s totient function equals 13!",
      "challengeType": 1,
      "dashedName": "problem-248-numbers-for-which-eulers-totient-function-equals-13",
      "description": "The first number $n$ for which $φ(n) = 13!$ is $6\\\\,227\\\\,180\\\\,929$.\n\nFind the ${150\\\\,000}^{\\text{th}}$ such number.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function eulersTotientFunctionEquals() {\n\n  return true;\n}\n\neulersTotientFunctionEquals();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`eulersTotientFunctionEquals()` should return `23507044290`.",
          "testCode": "assert.strictEqual(eulersTotientFunctionEquals(), 23507044290);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301895,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-248-numbers-for-which-eulers-totient-function-equals-13.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4671000cf542c50ff79",
      "title": "Problem 249: Prime Subset Sums",
      "challengeType": 1,
      "dashedName": "problem-249-prime-subset-sums",
      "description": "Let $S = \\\\{2, 3, 5, \\ldots, 4999\\\\}$ be the set of prime numbers less than 5000.\n\nFind the number of subsets of $S$, the sum of whose elements is a prime number.\n\nEnter the rightmost 16 digits as your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeSubsetSums() {\n\n  return true;\n}\n\nprimeSubsetSums();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeSubsetSums()` should return `9275262564250418`.",
          "testCode": "assert.strictEqual(primeSubsetSums(), 9275262564250418);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301896,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-249-prime-subset-sums.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4661000cf542c50ff78",
      "title": "Problem 250: 250250",
      "challengeType": 1,
      "dashedName": "problem-250-250250",
      "description": "Find the number of non-empty subsets of $\\\\{{1}^{1}, {2}^{2}, {3}^{3}, \\ldots, {250250}^{250250}\\\\}$, the sum of whose elements is divisible by 250. Enter the rightmost 16 digits as your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function twoHundredFifty() {\n\n  return true;\n}\n\ntwoHundredFifty();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`twoHundredFifty()` should return `1425480602091519`.",
          "testCode": "assert.strictEqual(twoHundredFifty(), 1425480602091519);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301898,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-250-250250.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4671000cf542c50ff7a",
      "title": "Problem 251: Cardano Triplets",
      "challengeType": 1,
      "dashedName": "problem-251-cardano-triplets",
      "description": "A triplet of positive integers ($a$,$b$,$c$) is called a Cardano Triplet if it satisfies the condition:\n\n$$\\sqrt[3]{a + b \\sqrt{c}} + \\sqrt[3]{a - b \\sqrt{c}} = 1$$\n\nFor example, (2,1,5) is a Cardano Triplet.\n\nThere exist 149 Cardano Triplets for which $a + b + c ≤ 1000$.\n\nFind how many Cardano Triplets exist such that $a + b + c ≤ 110\\\\,000\\\\,000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cardanoTriplets() {\n\n  return true;\n}\n\ncardanoTriplets();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`cardanoTriplets()` should return `18946051`.",
          "testCode": "assert.strictEqual(cardanoTriplets(), 18946051);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301899,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-251-cardano-triplets.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4691000cf542c50ff7b",
      "title": "Problem 252: Convex Holes",
      "challengeType": 1,
      "dashedName": "problem-252-convex-holes",
      "description": "Given a set of points on a plane, we define a convex hole to be a convex polygon having as vertices any of the given points and not containing any of the given points in its interior (in addition to the vertices, other given points may lie on the perimeter of the polygon).\n\nAs an example, the image below shows a set of twenty points and a few such convex holes. The convex hole shown as a red heptagon has an area equal to 1049694.5 square units, which is the highest possible area for a convex hole on the given set of points.\n\n<img alt=\"set of twenty points and convex holes on plane\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/convex-holes.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFor our example, we used the first 20 points ($T_{2k − 1}$, $T_{2k}$), for $k = 1, 2, \\ldots, 20$, produced with the pseudo-random number generator:\n\n$$\\begin{align}\n  S_0 & = 290\\\\,797 \\\\\\\\\n  S_{n+1} & = {S_n}^2 \\\\; \\text{mod} \\\\; 50\\\\,515\\\\,093 \\\\\\\\\n  T_n & = (S_n \\\\; \\text{mod} \\\\; 2000) − 1000\n\\end{align}$$\n\ni.e. (527, 144), (−488, 732), (−454, −947), …\n\nWhat is the maximum area for a convex hole on the set containing the first 500 points in the pseudo-random sequence? Specify your answer including one digit after the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function convexHoles() {\n\n  return true;\n}\n\nconvexHoles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`convexHoles()` should return `104924`.",
          "testCode": "assert.strictEqual(convexHoles(), 104924);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301900,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-252-convex-holes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4691000cf542c50ff7c",
      "title": "Problem 253: Tidying up",
      "challengeType": 1,
      "dashedName": "problem-253-tidying-up",
      "description": "A small child has a \"number caterpillar\" consisting of forty jigsaw pieces, each with one number on it, which, when connected together in a line, reveal the numbers 1 to 40 in order.\n\nEvery night, the child's father has to pick up the pieces of the caterpillar that have been scattered across the play room. He picks up the pieces at random and places them in the correct order.\n\nAs the caterpillar is built up in this way, it forms distinct segments that gradually merge together. The number of segments starts at zero (no pieces placed), generally increases up to about eleven or twelve, then tends to drop again before finishing at a single segment (all pieces placed).\n\nFor example:\n\n| Piece Placed | Segments So Far |\n| -------------|-----------------|\n|       12     |        1        |\n|        4     |        2        |\n|       29     |        3        |\n|        6     |        4        |\n|       34     |        5        |\n|        5     |        4        |\n|       35     |        4        |\n|       …      |        …        |\n\nLet $M$ be the maximum number of segments encountered during a random tidy-up of the caterpillar. For a caterpillar of ten pieces, the number of possibilities for each $M$ is\n\n| M | Possibilities |\n|---|---------------|\n| 1 |      512      |\n| 2 |     250912    |\n| 3 |    1815264    |\n| 4 |    1418112    |\n| 5 |     144000    |\n\nso the most likely value of $M$ is 3 and the average value is $\\frac{385\\\\,643}{113\\\\,400} = 3.400732$, rounded to six decimal places.\n\nThe most likely value of $M$ for a forty-piece caterpillar is 11; but what is the average value of $M$? Give your answer rounded to six decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function tidyingUp() {\n\n  return true;\n}\n\ntidyingUp();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`tidyingUp()` should return `11.492847`.",
          "testCode": "assert.strictEqual(tidyingUp(), 11.492847);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301901,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-253-tidying-up.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f46b1000cf542c50ff7d",
      "title": "Problem 254: Sums of Digit Factorials",
      "challengeType": 1,
      "dashedName": "problem-254-sums-of-digit-factorials",
      "description": "Define $f(n)$ as the sum of the factorials of the digits of $n$. For example, $f(342) = 3! + 4! + 2! = 32$.\n\nDefine $sf(n)$ as the sum of the digits of $f(n)$. So $sf(342) = 3 + 2 = 5$.\n\nDefine $g(i)$ to be the smallest positive integer $n$ such that $sf(n) = i$. Though $sf(342)$ is 5, $sf(25)$ is also 5, and it can be verified that $g(5)$ is 25.\n\nDefine $sg(i)$ as the sum of the digits of $g(i)$. So $sg(5) = 2 + 5 = 7$.\n\nFurther, it can be verified that $g(20)$ is 267 and $\\sum sg(i)$ for $1 ≤ i ≤ 20$ is 156.\n\nWhat is $\\sum sg(i)$ for $1 ≤ i ≤ 150$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumsOfDigitFactorials() {\n\n  return true;\n}\n\nsumsOfDigitFactorials();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumsOfDigitFactorials()` should return `8184523820510`.",
          "testCode": "assert.strictEqual(sumsOfDigitFactorials(), 8184523820510);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301902,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-254-sums-of-digit-factorials.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f46d1000cf542c50ff7f",
      "title": "Problem 255: Rounded Square Roots",
      "challengeType": 1,
      "dashedName": "problem-255-rounded-square-roots",
      "description": "We define the rounded-square-root of a positive integer $n$ as the square root of $n$ rounded to the nearest integer.\n\nThe following procedure (essentially Heron's method adapted to integer arithmetic) finds the rounded-square-root of $n$:\n\nLet $d$ be the number of digits of the number $n$.\n\nIf $d$ is odd, set $x_0 = 2 × {10}^{\\frac{d - 1}{2}}$.\n\nIf $d$ is even, set $x_0 = 7 × {10}^{\\frac{d - 2}{2}}$.\n\nRepeat:\n\n$$x_{k + 1} = \\left\\lfloor\\frac{x_k + \\left\\lceil\\frac{n}{x_k}\\right\\rceil}{2}\\right\\rfloor$$\n\nuntil $x_{k + 1} = x_k$.\n\nAs an example, let us find the rounded-square-root of $n = 4321$.\n\n$n$ has 4 digits, so $x_0 = 7 × {10}^{\\frac{4-2}{2}} = 70$.\n\n$$x_1 = \\left\\lfloor\\frac{70 + \\left\\lceil\\frac{4321}{70}\\right\\rceil}{2}\\right\\rfloor = 66 \\\\\\\\\nx_2 = \\left\\lfloor\\frac{66 + \\left\\lceil\\frac{4321}{66}\\right\\rceil}{2}\\right\\rfloor = 66$$\n\nSince $x_2 = x_1$, we stop here. So, after just two iterations, we have found that the rounded-square-root of 4321 is 66 (the actual square root is 65.7343137…).\n\nThe number of iterations required when using this method is surprisingly low. For example, we can find the rounded-square-root of a 5-digit integer ($10\\\\,000 ≤ n ≤ 99\\\\,999$) with an average of 3.2102888889 iterations (the average value was rounded to 10 decimal places).\n\nUsing the procedure described above, what is the average number of iterations required to find the rounded-square-root of a 14-digit number (${10}^{13} ≤ n &lt; {10}^{14}$)? Give your answer rounded to 10 decimal places.\n\n**Note:** The symbols $⌊x⌋$ and $⌈x⌉$ represent the floor function and ceiling function respectively.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function roundedSquareRoots() {\n\n  return true;\n}\n\nroundedSquareRoots();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`roundedSquareRoots()` should return `4.447401118`.",
          "testCode": "assert.strictEqual(roundedSquareRoots(), 4.447401118);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301903,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-255-rounded-square-roots.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f46c1000cf542c50ff7e",
      "title": "Problem 256: Tatami-Free Rooms",
      "challengeType": 1,
      "dashedName": "problem-256-tatami-free-rooms",
      "description": "Tatami are rectangular mats, used to completely cover the floor of a room, without overlap.\n\nAssuming that the only type of available tatami has dimensions 1×2, there are obviously some limitations for the shape and size of the rooms that can be covered.\n\nFor this problem, we consider only rectangular rooms with integer dimensions $a$, $b$ and even size $s = a \\times b$. We use the term 'size' to denote the floor surface area of the room, and — without loss of generality — we add the condition $a ≤ b$.\n\nThere is one rule to follow when laying out tatami: there must be no points where corners of four different mats meet. For example, consider the two arrangements below for a 4×4 room:\n\n<img alt=\"two arrangements of mats in 4x4 room\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/tatami-free-rooms.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe arrangement on the left is acceptable, whereas the one on the right is not: a red \"<strong><span style=\"color: red;\">X</span></strong>\" in the middle, marks the point where four tatami meet.\n\nBecause of this rule, certain even-sized rooms cannot be covered with tatami: we call them tatami-free rooms. Further, we define $T(s)$ as the number of tatami-free rooms of size $s$.\n\nThe smallest tatami-free room has size $s = 70$ and dimensions 7×10. All the other rooms of size $s = 70$ can be covered with tatami; they are: 1×70, 2×35 and 5×14. Hence, $T(70) = 1$.\n\nSimilarly, we can verify that $T(1320) = 5$ because there are exactly 5 tatami-free rooms of size $s = 1320$: 20×66, 22×60, 24×55, 30×44 and 33×40. In fact, $s = 1320$ is the smallest room-size $s$ for which $T(s) = 5$.\n\nFind the smallest room-size $s$ for which $T(s) = 200$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function tatamiFreeRooms() {\n\n  return true;\n}\n\ntatamiFreeRooms();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`tatamiFreeRooms()` should return `85765680`.",
          "testCode": "assert.strictEqual(tatamiFreeRooms(), 85765680);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301904,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-256-tatami-free-rooms.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f46e1000cf542c50ff80",
      "title": "Problem 257: Angular Bisectors",
      "challengeType": 1,
      "dashedName": "problem-257-angular-bisectors",
      "description": "Given is an integer sided triangle $ABC$ with sides $a ≤ b ≤ c$ ($AB = c$, $BC = a$ and $AC = b$).\n\nThe angular bisectors of the triangle intersect the sides at points $E$, $F$ and $G$ (see picture below).\n\n<img alt=\"triangle ABC, with angular bisectors intersecting sides at the points E, F and G\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/angular-bisectors.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe segments $EF$, $EG$ and $FG$ partition the triangle $ABC$ into four smaller triangles: $AEG$, $BFE$, $CGF$ and $EFG$. It can be proven that for each of these four triangles the ratio $\\frac{\\text{area}(ABC)}{\\text{area}(\\text{subtriangle})}$ is rational. However, there exist triangles for which some or all of these ratios are integral.\n\nHow many triangles $ABC$ with perimeter $≤ 100\\\\,000\\\\,000$ exist so that the ratio $\\frac{\\text{area}(ABC)}{\\text{area}(AEG)}$ is integral?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function angularBisectors() {\n\n  return true;\n}\n\nangularBisectors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`angularBisectors()` should return `139012411`.",
          "testCode": "assert.strictEqual(angularBisectors(), 139012411);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301905,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-257-angular-bisectors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f46e1000cf542c50ff81",
      "title": "Problem 258: A lagged Fibonacci sequence",
      "challengeType": 1,
      "dashedName": "problem-258-a-lagged-fibonacci-sequence",
      "description": "A sequence is defined as:\n\n- $g_k = 1$, for $0 ≤ k ≤ 1999$\n- $g_k = g_{k - 2000} + g_{k - 1999}$, for $k ≥ 2000$.\n\nFind $g_k$ mod 20092010 for $k = {10}^{18}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function laggedFibonacciSequence() {\n\n  return true;\n}\n\nlaggedFibonacciSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`laggedFibonacciSequence()` should return `12747994`.",
          "testCode": "assert.strictEqual(laggedFibonacciSequence(), 12747994);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301906,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-258-a-lagged-fibonacci-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4701000cf542c50ff82",
      "title": "Problem 259: Reachable Numbers",
      "challengeType": 1,
      "dashedName": "problem-259-reachable-numbers",
      "description": "A positive integer will be called reachable if it can result from an arithmetic expression obeying the following rules:\n\n- Uses the digits 1 through 9, in that order and exactly once each.\n- Any successive digits can be concatenated (for example, using the digits 2, 3 and 4 we obtain the number 234).\n- Only the four usual binary arithmetic operations (addition, subtraction, multiplication and division) are allowed.\n- Each operation can be used any number of times, or not at all.\n- Unary minus is not allowed.\n- Any number of (possibly nested) parentheses may be used to define the order of operations.\n\nFor example, 42 is reachable, since $\\frac{1}{23} \\times ((4 \\times 5) - 6) \\times (78 - 9) = 42$.\n\nWhat is the sum of all positive reachable integers?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function reachableNumbers() {\n\n  return true;\n}\n\nreachableNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`reachableNumbers()` should return `20101196798`.",
          "testCode": "assert.strictEqual(reachableNumbers(), 20101196798);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301907,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-259-reachable-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4701000cf542c50ff83",
      "title": "Problem 260: Stone Game",
      "challengeType": 1,
      "dashedName": "problem-260-stone-game",
      "description": "A game is played with three piles of stones and two players.\n\nOn each player's turn, the player removes one or more stones from the piles. However, if the player takes stones from more than one pile, the same number of stones must be removed from each of the selected piles.\n\nIn other words, the player chooses some $N > 0$ and removes:\n\n- $N$ stones from any single pile; or\n- $N$ stones from each of any two piles ($2N$ total); or\n- $N$ stones from each of the three piles ($3N$ total).\n\nThe player taking the last stone(s) wins the game.\n\nA winning configuration is one where the first player can force a win.\n\nFor example, (0,0,13), (0,11,11) and (5,5,5) are winning configurations because the first player can immediately remove all stones.\n\nA losing configuration is one where the second player can force a win, no matter what the first player does.\n\nFor example, (0,1,2) and (1,3,3) are losing configurations: any legal move leaves a winning configuration for the second player.\n\nConsider all losing configurations ($x_i$,$y_i$,$z_i$) where $x_i ≤ y_i ≤ z_i ≤ 100$. We can verify that $\\sum (x_i + y_i + z_i) = 173\\\\,895$ for these.\n\nFind $\\sum (x_i + y_i + z_i)$ where ($x_i$,$y_i$,$z_i$) ranges over the losing configurations with $x_i ≤ y_i ≤ z_i ≤ 1000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function stoneGame() {\n\n  return true;\n}\n\nstoneGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`stoneGame()` should return `167542057`.",
          "testCode": "assert.strictEqual(stoneGame(), 167542057);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301909,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-260-stone-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4711000cf542c50ff84",
      "title": "Problem 261: Pivotal Square Sums",
      "challengeType": 1,
      "dashedName": "problem-261-pivotal-square-sums",
      "description": "Let us call a positive integer $k$ a square-pivot, if there is a pair of integers $m > 0$ and $n ≥ k$, such that the sum of the ($m + 1$) consecutive squares up to $k$ equals the sum of the $m$ consecutive squares from ($n + 1$) on:\n\n$${(k - m)}^2 + \\ldots + k^2 = {(n + 1)}^2 + \\ldots + {(n + m)}^2$$\n\nSome small square-pivots are\n\n$$\\begin{align}\n  & \\mathbf{4}: 3^2 + \\mathbf{4}^2 = 5^2 \\\\\\\\\n  & \\mathbf{21}: {20}^2 + \\mathbf{21}^2 = {29}^2 \\\\\\\\\n  & \\mathbf{24}: {21}^2 + {22}^2 + {23}^2 + \\mathbf{24}^2 = {25}^2 + {26}^2 + {27}^2 \\\\\\\\\n  & \\mathbf{110}: {108}^2 + {109}^2 + \\mathbf{110}^2 = {133}^2 + {134}^2 \\\\\\\\\n\\end{align}$$\n\nFind the sum of all distinct square-pivots $≤ {10}^{10}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pivotalSquareSums() {\n\n  return true;\n}\n\npivotalSquareSums();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pivotalSquareSums()` should return `238890850232021`.",
          "testCode": "assert.strictEqual(pivotalSquareSums(), 238890850232021);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301910,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-261-pivotal-square-sums.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4731000cf542c50ff85",
      "title": "Problem 262: Mountain Range",
      "challengeType": 1,
      "dashedName": "problem-262-mountain-range",
      "description": "The following equation represents the continuous topography of a mountainous region, giving the elevation $h$ at any point ($x$,$y$):\n\n$$h = \\left(5000 - \\frac{x^2 + y^2 + xy}{200} + \\frac{25(x + y)}{2}\\right) \\times e^{-\\left|\\frac{x^2 + y^2}{1\\\\,000\\\\,000} - \\frac{3(x + y)}{2000} + \\frac{7}{10}\\right|}$$\n\nA mosquito intends to fly from A(200,200) to B(1400,1400), without leaving the area given by $0 ≤ x$, $y ≤ 1600$.\n\nBecause of the intervening mountains, it first rises straight up to a point A', having elevation $f$. Then, while remaining at the same elevation $f$, it flies around any obstacles until it arrives at a point B' directly above B.\n\nFirst, determine $f_{min}$ which is the minimum constant elevation allowing such a trip from A to B, while remaining in the specified area. Then, find the length of the shortest path between A' and B', while flying at that constant elevation $f_{min}$.\n\nGive that length as your answer, rounded to three decimal places.\n\n**Note:** For convenience, the elevation function shown above is repeated below, in a form suitable for most programming languages: `h=( 5000-0.005*(x*x+y*y+x*y)+12.5*(x+y) )* exp( -abs(0.000001*(x*x+y*y)-0.0015*(x+y)+0.7) )`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function mountainRange() {\n\n  return true;\n}\n\nmountainRange();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`mountainRange()` should return `2531.205`.",
          "testCode": "assert.strictEqual(mountainRange(), 2531.205);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301911,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-262-mountain-range.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4741000cf542c50ff86",
      "title": "Problem 263: An engineers'' dream come true",
      "challengeType": 1,
      "dashedName": "problem-263-an-engineers-dream-come-true",
      "description": "Consider the number 6. The divisors of 6 are: 1,2,3 and 6.\n\nEvery number from 1 up to and including 6 can be written as a sum of distinct divisors of 6:\n\n$1 = 1$, $2 = 2$, $3 = 1 + 2$, $4 = 1 + 3$, $5 = 2 + 3$, $6 = 6$.\n\nA number $n$ is called a practical number if every number from 1 up to and including $n$ can be expressed as a sum of distinct divisors of $n$.\n\nA pair of consecutive prime numbers with a difference of six is called a sexy pair (since \"sex\" is the Latin word for \"six\"). The first sexy pair is (23, 29).\n\nWe may occasionally find a triple-pair, which means three consecutive sexy prime pairs, such that the second member of each pair is the first member of the next pair.\n\nWe shall call a number $n$ such that:\n\n- ($n - 9$, $n - 3$), ($n - 3$, $n + 3$), ($n + 3$, $n + 9$) form a triple-pair, and\n- the numbers $n - 8$, $n - 4$, $n$, $n + 4$ and $n + 8$ are all practical,\n\nan engineers’ paradise.\n\nFind the sum of the first four engineers’ paradises.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function engineersDreamComeTrue() {\n\n  return true;\n}\n\nengineersDreamComeTrue();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`engineersDreamComeTrue()` should return `2039506520`.",
          "testCode": "assert.strictEqual(engineersDreamComeTrue(), 2039506520);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301912,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-263-an-engineers-dream-come-true.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4751000cf542c50ff87",
      "title": "Problem 264: Triangle Centers",
      "challengeType": 1,
      "dashedName": "problem-264-triangle-centres",
      "description": "Consider all the triangles having:\n\n- All their vertices on lattice points.\n- Circumcenter at the origin O.\n- Orthocenter at the point H(5, 0).\n\nThere are nine such triangles having a $\\text{perimeter} ≤ 50$.\n\nListed and shown in ascending order of their perimeter, they are:\n\n<table>\n  <tbody>\n    <tr>\n      <td>\nA(-4, 3), B(5, 0), C(4, -3)<br>\nA(4, 3), B(5, 0), C(-4, -3)<br>\nA(-3, 4), B(5, 0), C(3, -4)<br>\n<br><br>\nA(3, 4), B(5, 0), C(-3, -4)<br>\nA(0, 5), B(5, 0), C(0, -5)<br>\nA(1, 8), B(8, -1), C(-4, -7)<br>\n<br><br>\nA(8, 1), B(1, -8), C(-4, 7)<br>\nA(2, 9), B(9, -2), C(-6, -7)<br>\nA(9, 2), B(2, -9), C(-6, 7)<br>\n      </td>\n      <td><img alt=\"nine triangles ABC with perimeter ≤ 50\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/triangle-centres.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto;\"></td>\n    </tr>\n  </tbody>\n</table>\n\nThe sum of their perimeters, rounded to four decimal places, is 291.0089.\n\nFind all such triangles with a $\\text{perimeter} ≤ {10}^5$. Enter as your answer the sum of their perimeters rounded to four decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function triangleCenters() {\n\n  return true;\n}\n\ntriangleCenters();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`triangleCenters()` should return `2816417.1055`.",
          "testCode": "assert.strictEqual(triangleCenters(), 2816417.1055);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301913,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-264-triangle-centres.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4761000cf542c50ff88",
      "title": "Problem 265: Binary Circles",
      "challengeType": 1,
      "dashedName": "problem-265-binary-circles",
      "description": "$2^N$ binary digits can be placed in a circle so that all the $N$-digit clockwise subsequences are distinct.\n\nFor $N = 3$, two such circular arrangements are possible, ignoring rotations:\n\n<img alt=\"two circular arrangements for N = 3\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/binary-circles.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFor the first arrangement, the 3-digit subsequences, in clockwise order, are: 000, 001, 010, 101, 011, 111, 110 and 100.\n\nEach circular arrangement can be encoded as a number by concatenating the binary digits starting with the subsequence of all zeros as the most significant bits and proceeding clockwise. The two arrangements for $N = 3$ are thus represented as 23 and 29:\n\n$${00010111}_2 = 23\\\\\\\\\n{00011101}_2 = 29$$\n\nCalling $S(N)$ the sum of the unique numeric representations, we can see that $S(3) = 23 + 29 = 52$.\n\nFind $S(5)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function binaryCircles() {\n\n  return true;\n}\n\nbinaryCircles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`binaryCircles()` should return `209110240768`.",
          "testCode": "assert.strictEqual(binaryCircles(), 209110240768);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301914,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-265-binary-circles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4771000cf542c50ff89",
      "title": "Problem 266: Pseudo Square Root",
      "challengeType": 1,
      "dashedName": "problem-266-pseudo-square-root",
      "description": "The divisors of 12 are: 1,2,3,4,6 and 12.\n\nThe largest divisor of 12 that does not exceed the square root of 12 is 3.\n\nWe shall call the largest divisor of an integer $n$ that does not exceed the square root of $n$ the pseudo square root ($PSR$) of $n$.\n\nIt can be seen that $PSR(3102) = 47$.\n\nLet $p$ be the product of the primes below 190. Find $PSR(p)\\bmod {10}^{16}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pseudoSquareRoot() {\n\n  return true;\n}\n\npseudoSquareRoot();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pseudoSquareRoot()` should return `1096883702440585`.",
          "testCode": "assert.strictEqual(pseudoSquareRoot(), 1096883702440585);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301915,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-266-pseudo-square-root.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4771000cf542c50ff8a",
      "title": "Problem 267: Billionaire",
      "challengeType": 1,
      "dashedName": "problem-267-billionaire",
      "description": "You are given a unique investment opportunity.\n\nStarting with £1 of capital, you can choose a fixed proportion, $f$, of your capital to bet on a fair coin toss repeatedly for 1000 tosses.\n\nYour return is double your bet for heads and you lose your bet for tails.\n\nFor example, if $f = \\frac{1}{4}$, for the first toss you bet £0.25, and if heads comes up you win £0.5 and so then have £1.5. You then bet £0.375 and if the second toss is tails, you have £1.125.\n\nChoosing $f$ to maximize your chances of having at least £1,000,000,000 after 1,000 flips, what is the chance that you become a billionaire?\n\nAll computations are assumed to be exact (no rounding), but give your answer rounded to 12 digits behind the decimal point in the form 0.abcdefghijkl.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function billionaire() {\n\n  return true;\n}\n\nbillionaire();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`billionaire()` should return `0.999992836187`.",
          "testCode": "assert.strictEqual(billionaire(), 0.999992836187);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301916,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-267-billionaire.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4791000cf542c50ff8b",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "It can be verified that there are 23 positive integers less than 1000 that are divisible by at least four distinct primes less than 100.\n\nFind how many positive integers less than ${10}^{16}$ are divisible by at least four distinct primes less than 100.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function fourDistinctPrimeFactors() {\n\n  return true;\n}\n\nfourDistinctPrimeFactors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`fourDistinctPrimeFactors()` should return `785478606870985`.",
          "testCode": "assert.strictEqual(fourDistinctPrimeFactors(), 785478606870985);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301917,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-268-counting-numbers-with-at-least-four-distinct-prime-factors-less-than-100.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4791000cf542c50ff8c",
      "title": "Problem 269: Polynomials with at least one integer root",
      "challengeType": 1,
      "dashedName": "problem-269-polynomials-with-at-least-one-integer-root",
      "description": "A root or zero of a polynomial $P(x)$ is a solution to the equation $P(x) = 0$.\n\nDefine $P_n$ as the polynomial whose coefficients are the digits of $n$.\n\nFor example, $P_{5703}(x) = 5x^3 + 7x^2 + 3$.\n\nWe can see that:\n\n- $P_n(0)$ is the last digit of $n$,\n- $P_n(1)$ is the sum of the digits of $n$,\n- $Pn(10)$ is $n$ itself.\n\nDefine $Z(k)$ as the number of positive integers, $n$, not exceeding $k$ for which the polynomial $P_n$ has at least one integer root.\n\nIt can be verified that $Z(100\\\\,000)$ is 14696.\n\nWhat is $Z({10}^{16})$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function polynomialsWithOneIntegerRoot() {\n\n  return true;\n}\n\npolynomialsWithOneIntegerRoot();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`polynomialsWithOneIntegerRoot()` should return `1311109198529286`.",
          "testCode": "assert.strictEqual(polynomialsWithOneIntegerRoot(), 1311109198529286);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301918,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-269-polynomials-with-at-least-one-integer-root.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f47c1000cf542c50ff8e",
      "title": "Problem 270: Cutting Squares",
      "challengeType": 1,
      "dashedName": "problem-270-cutting-squares",
      "description": "A square piece of paper with integer dimensions $N×N$ is placed with a corner at the origin and two of its sides along the $x$- and $y$-axes. Then, we cut it up respecting the following rules:\n\n- We only make straight cuts between two points lying on different sides of the square, and having integer coordinates.\n- Two cuts cannot cross, but several cuts can meet at the same border point.\n- Proceed until no more legal cuts can be made.\n\nCounting any reflections or rotations as distinct, we call $C(N)$ the number of ways to cut an $N×N$ square. For example, $C(1) = 2$ and $C(2) = 30$ (shown below).\n\n<img alt=\"ways to cut 2x2 square, counting reflections and rotations as distinct\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/cutting-squares.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWhat is $C(30)\\bmod {10}^8$ ?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cuttingSquares() {\n\n  return true;\n}\n\ncuttingSquares();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`cuttingSquares()` should return `82282080`.",
          "testCode": "assert.strictEqual(cuttingSquares(), 82282080);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301920,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-270-cutting-squares.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f47b1000cf542c50ff8d",
      "title": "Problem 271: Modular Cubes, part 1",
      "challengeType": 1,
      "dashedName": "problem-271-modular-cubes-part-1",
      "description": "For a positive number $n$, define $S(n)$ as the sum of the integers $x$, for which $1 < x < n$ and $x^3 \\equiv 1\\bmod n$.\n\nWhen $n = 91$, there are 8 possible values for $x$, namely: 9, 16, 22, 29, 53, 74, 79, 81. Thus, $S(91) = 9 + 16 + 22 + 29 + 53 + 74 + 79 + 81 = 363$.\n\nFind $S(13\\\\,082\\\\,761\\\\,331\\\\,670\\\\,030)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function modularCubesOne() {\n\n  return true;\n}\n\nmodularCubesOne();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`modularCubesOne()` should return `4617456485273130000`.",
          "testCode": "assert.strictEqual(modularCubesOne(), 4617456485273130000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301921,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-271-modular-cubes-part-1.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f47d1000cf542c50ff8f",
      "title": "Problem 272: Modular Cubes, part 2",
      "challengeType": 1,
      "dashedName": "problem-272-modular-cubes-part-2",
      "description": "For a positive number $n$, define $C(n)$ as the number of the integers $x$, for which $1 < x < n$ and $x^3 \\equiv 1\\bmod n$.\n\nWhen $n = 91$, there are 8 possible values for $x$, namely: 9, 16, 22, 29, 53, 74, 79, 81. Thus, $C(91) = 8$.\n\nFind the sum of the positive numbers $n ≤ {10}^{11}$ for which $C(n)=242$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function modularCubesTwo() {\n\n  return true;\n}\n\nmodularCubesTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`modularCubesTwo()` should return `8495585919506151000`.",
          "testCode": "assert.strictEqual(modularCubesTwo(), 8495585919506151000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301922,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-272-modular-cubes-part-2.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f47e1000cf542c50ff90",
      "title": "Problem 273: Sum of Squares",
      "challengeType": 1,
      "dashedName": "problem-273-sum-of-squares",
      "description": "Consider equations of the form: $a^2 + b^2 = N$, $0 ≤ a ≤ b$, $a$, $b$ and $N$ integer.\n\nFor $N = 65$ there are two solutions:\n\n$a = 1, b = 8$ and $a = 4, b = 7$.\n\nWe call $S(N)$ the sum of the values of $a$ of all solutions of $a^2 + b^2 = N$, $0 ≤ a ≤ b$, $a$, $b$ and $N$ integer.\n\nThus $S(65) = 1 + 4 = 5$.\n\nFind $\\sum S(N)$, for all squarefree $N$ only divisible by primes of the form $4k + 1$ with $4k + 1 &lt; 150$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumOfSquares() {\n\n  return true;\n}\n\nsumOfSquares();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumOfSquares()` should return `2032447591196869000`.",
          "testCode": "assert.strictEqual(sumOfSquares(), 2032447591196869000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301923,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-273-sum-of-squares.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f47f1000cf542c50ff91",
      "title": "Problem 274: Divisibility Multipliers",
      "challengeType": 1,
      "dashedName": "problem-274-divisibility-multipliers",
      "description": "For each integer $p > 1$ coprime to 10 there is a positive divisibility multiplier $m &lt; p$ which preserves divisibility by $p$ for the following function on any positive integer, $n$:\n\n$f(n) = (\\text{all but the last digit of} \\\\; n) + (\\text{the last digit of} \\\\; n) \\times m$\n\nThat is, if $m$ is the divisibility multiplier for $p$, then $f(n)$ is divisible by $p$ if and only if $n$ is divisible by $p$.\n\n(When $n$ is much larger than $p$, $f(n)$ will be less than $n$ and repeated application of $f$ provides a multiplicative divisibility test for $p$.)\n\nFor example, the divisibility multiplier for 113 is 34.\n\n$f(76275) = 7627 + 5 \\times 34 = 7797$: 76275 and 7797 are both divisible by 113\n\n$f(12345) = 1234 + 5 \\times 34 = 1404$: 12345 and 1404 are both not divisible by 113\n\nThe sum of the divisibility multipliers for the primes that are coprime to 10 and less than 1000 is 39517. What is the sum of the divisibility multipliers for the primes that are coprime to 10 and less than ${10}^7$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function divisibilityMultipliers() {\n\n  return true;\n}\n\ndivisibilityMultipliers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`divisibilityMultipliers()` should return `1601912348822`.",
          "testCode": "assert.strictEqual(divisibilityMultipliers(), 1601912348822);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301924,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-274-divisibility-multipliers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4801000cf542c50ff92",
      "title": "Problem 275: Balanced Sculptures",
      "challengeType": 1,
      "dashedName": "problem-275-balanced-sculptures",
      "description": "Let us define a balanced sculpture of order $n$ as follows:\n\n- A polyomino made up of $n + 1$ tiles known as the blocks ($n$ tiles) and the plinth (remaining tile);\n- the plinth has its center at position ($x = 0$, $y = 0$);\n- the blocks have $y$-coordinates greater than zero (so the plinth is the unique lowest tile);\n- the center of mass of all the blocks, combined, has $x$-coordinate equal to zero.\n\nWhen counting the sculptures, any arrangements which are simply reflections about the $y$-axis, are <u>not</u> counted as distinct. For example, the 18 balanced sculptures of order 6 are shown below; note that each pair of mirror images (about the $y$-axis) is counted as one sculpture:\n\n<img alt=\"18 balanced sculptures of order 6\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/balanced-sculptures.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThere are 964 balanced sculptures of order 10 and 360505 of order 15.\n\nHow many balanced sculptures are there of order 18?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function balancedSculptures() {\n\n  return true;\n}\n\nbalancedSculptures();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`balancedSculptures()` should return `15030564`.",
          "testCode": "assert.strictEqual(balancedSculptures(), 15030564);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301925,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-275-balanced-sculptures.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4801000cf542c50ff93",
      "title": "Problem 276: Primitive Triangles",
      "challengeType": 1,
      "dashedName": "problem-276-primitive-triangles",
      "description": "Consider the triangles with integer sides $a$, $b$ and $c$ with $a ≤ b ≤ c$.\n\nAn integer sided triangle $(a,b,c)$ is called primitive if $gcd(a,b,c) = 1$.\n\nHow many primitive integer sided triangles exist with a perimeter not exceeding $10\\\\,000\\\\,000$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primitiveTriangles() {\n\n  return true;\n}\n\nprimitiveTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primitiveTriangles()` should return `5777137137739633000`.",
          "testCode": "assert.strictEqual(primitiveTriangles(), 5777137137739633000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301926,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-276-primitive-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4811000cf542c50ff94",
      "title": "Problem 277: A Modified Collatz sequence",
      "challengeType": 1,
      "dashedName": "problem-277-a-modified-collatz-sequence",
      "description": "A modified Collatz sequence of integers is obtained from a starting value $a_1$ in the following way:\n\n$a_{n + 1} = \\frac{a_n}{3}$ if $a_n$ is divisible by 3. We shall denote this as a large downward step, \"D\".\n\n$a_{n + 1} = \\frac{4a_n + 2}{3}$ if $a_n$ divided by 3 gives a remainder of 1. We shall denote this as an upward step, \"U\".\n\n$a_{n + 1} = \\frac{2a_n - 1}{3}$ if $a_n$ divided by 3 gives a remainder of 2. We shall denote this as a small downward step, \"d\".\n\nThe sequence terminates when some $a_n = 1$.\n\nGiven any integer, we can list out the sequence of steps. For instance if $a_1 = 231$, then the sequence $\\\\{a_n\\\\} = \\\\{231, 77, 51, 17, 11, 7, 10, 14, 9, 3, 1\\\\}$ corresponds to the steps \"DdDddUUdDD\".\n\nOf course, there are other sequences that begin with that same sequence \"DdDddUUdDD....\".\n\nFor instance, if $a_1 = 1004064$, then the sequence is DdDddUUdDDDdUDUUUdDdUUDDDUdDD.\n\nIn fact, 1004064 is the smallest possible $a_1 > {10}^6$ that begins with the sequence DdDddUUdDD.\n\nWhat is the smallest $a_1 > {10}^{15}$ that begins with the sequence \"UDDDUdddDDUDDddDdDddDDUDDdUUDd\"?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function modifiedCollatzSequence() {\n\n  return true;\n}\n\nmodifiedCollatzSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`modifiedCollatzSequence()` should return `1125977393124310`.",
          "testCode": "assert.strictEqual(modifiedCollatzSequence(), 1125977393124310);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301927,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-277-a-modified-collatz-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4831000cf542c50ff95",
      "title": "Problem 278: Linear Combinations of Semiprimes",
      "challengeType": 1,
      "dashedName": "problem-278-linear-combinations-of-semiprimes",
      "description": "Given the values of integers $1 &lt; a_1 &lt; a_2 &lt; \\ldots &lt; a_n$, consider the linear combination $q_1a_1 + q_2a_2 + \\ldots + q_na_n = b$, using only integer values $q_k ≥ 0$.\n\nNote that for a given set of $a_k$, it may be that not all values of $b$ are possible. For instance, if $a_1 = 5$ and $a_2 = 7$, there are no $q_1 ≥ 0$ and $q_2 ≥ 0$ such that $b$ could be 1, 2, 3, 4, 6, 8, 9, 11, 13, 16, 18 or 23.\n\nIn fact, 23 is the largest impossible value of $b$ for $a_1 = 5$ and $a_2 = 7$. We therefore call $f(5, 7) = 23$. Similarly, it can be shown that $f(6, 10, 15)=29$ and $f(14, 22, 77) = 195$.\n\nFind $\\sum f(pq,pr,qr)$, where $p$, $q$ and $r$ are prime numbers and $p &lt; q &lt; r &lt; 5000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function linearCombinationOfSemiprimes() {\n\n  return true;\n}\n\nlinearCombinationOfSemiprimes();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`linearCombinationOfSemiprimes()` should return `1228215747273908500`.",
          "testCode": "assert.strictEqual(linearCombinationOfSemiprimes(), 1228215747273908500);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301928,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-278-linear-combinations-of-semiprimes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4841000cf542c50ff96",
      "title": "Problem 279: Triangles with integral sides and an integral angle",
      "challengeType": 1,
      "dashedName": "problem-279-triangles-with-integral-sides-and-an-integral-angle",
      "description": "How many triangles are there with integral sides, at least one integral angle (measured in degrees), and a perimeter that does not exceed ${10}^8$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function trianglesWithIntegralSidesAndAngle() {\n\n  return true;\n}\n\ntrianglesWithIntegralSidesAndAngle();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`trianglesWithIntegralSidesAndAngle()` should return `416577688`.",
          "testCode": "assert.strictEqual(trianglesWithIntegralSidesAndAngle(), 416577688);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301929,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-279-triangles-with-integral-sides-and-an-integral-angle.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4841000cf542c50ff97",
      "title": "Problem 280: Ant and seeds",
      "challengeType": 1,
      "dashedName": "problem-280-ant-and-seeds",
      "description": "A laborious ant walks randomly on a 5x5 grid. The walk starts from the central square. At each step, the ant moves to an adjacent square at random, without leaving the grid; thus there are 2, 3 or 4 possible moves at each step depending on the ant's position.\n\nAt the start of the walk, a seed is placed on each square of the lower row. When the ant isn't carrying a seed and reaches a square of the lower row containing a seed, it will start to carry the seed. The ant will drop the seed on the first empty square of the upper row it eventually reaches.\n\nWhat's the expected number of steps until all seeds have been dropped in the top row? Give your answer rounded to 6 decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function antAndSeeds() {\n\n  return true;\n}\n\nantAndSeeds();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`antAndSeeds()` should return `430.088247`.",
          "testCode": "assert.strictEqual(antAndSeeds(), 430.088247);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301931,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-280-ant-and-seeds.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4861000cf542c50ff98",
      "title": "Problem 281: Pizza Toppings",
      "challengeType": 1,
      "dashedName": "problem-281-pizza-toppings",
      "description": "You are given a pizza (perfect circle) that has been cut into $m·n$ equal pieces and you want to have exactly one topping on each slice.\n\nLet $f(m,n)$ denote the number of ways you can have toppings on the pizza with $m$ different toppings ($m ≥ 2$), using each topping on exactly $n$ slices ($n ≥ 1$). Reflections are considered distinct, rotations are not.\n\nThus, for instance, $f(2,1) = 1$, $f(2,2) = f(3,1) = 2$ and $f(3,2) = 16$. $f(3,2)$ is shown below:\n\n<img alt=\"animation with 16 ways to have 3 different toppings on 2 slices each\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/pizza-toppings.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFind the sum of all $f(m,n)$ such that $f(m,n) ≤ {10}^{15}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pizzaToppings() {\n\n  return true;\n}\n\npizzaToppings();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pizzaToppings()` should return `1485776387445623`.",
          "testCode": "assert.strictEqual(pizzaToppings(), 1485776387445623);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301932,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-281-pizza-toppings.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4861000cf542c50ff99",
      "title": "Problem 282: The Ackermann function",
      "challengeType": 1,
      "dashedName": "problem-282-the-ackermann-function",
      "description": "For non-negative integers $m$, $n$, the Ackermann function $A(m, n)$ is defined as follows:\n\n$$A(m, n) =\n\\begin{cases}\nn + 1                 & \\text{if $m = 0$}             \\\\\\\\\nA(m - 1, 1)           & \\text{if $m > 0$ and $n = 0$} \\\\\\\\\nA(m - 1, A(m, n - 1)) & \\text{if $m > 0$ and $n > 0$}\n\\end{cases}$$\n\nFor example $A(1, 0) = 2$, $A(2, 2) = 7$ and $A(3, 4) = 125$.\n\nFind $\\displaystyle\\sum_{n = 0}^6 A(n, n)$ and give your answer mod ${14}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function ackermanFunction() {\n\n  return true;\n}\n\nackermanFunction();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`ackermanFunction()` should return `1098988351`.",
          "testCode": "assert.strictEqual(ackermanFunction(), 1098988351);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301933,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-282-the-ackermann-function.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4881000cf542c50ff9a",
      "title": ">-",
      "challengeType": 1,
      "dashedName": ">-",
      "description": "Consider the triangle with sides 6, 8 and 10. It can be seen that the perimeter and the area are both equal to 24.\n\nSo the $\\frac{\\text{area}}{\\text{perimeter}}$ ratio is equal to 1.\n\nConsider also the triangle with sides 13, 14 and 15. The perimeter equals 42 while the area is equal to 84.\n\nSo for this triangle the $\\frac{\\text{area}}{\\text{perimeter}}$ ratio is equal to 2.\n\nFind the sum of the perimeters of all integer sided triangles for which the area/perimeter ratios are equal to positive integers not exceeding 1000.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function integralAreaPerimeterRatio() {\n\n  return true;\n}\n\nintegralAreaPerimeterRatio();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`integralAreaPerimeterRatio()` should return `28038042525570324`.",
          "testCode": "assert.strictEqual(integralAreaPerimeterRatio(), 28038042525570324);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301934,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-283-integer-sided-triangles-for-which-the-area--perimeter-ratio-is-integral.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4891000cf542c50ff9b",
      "title": "Problem 284: Steady Squares",
      "challengeType": 1,
      "dashedName": "problem-284-steady-squares",
      "description": "The 3-digit number 376 in the decimal numbering system is an example of numbers with the special property that its square ends with the same digits: ${376}^2 = 141376$. Let's call a number with this property a steady square.\n\nSteady squares can also be observed in other numbering systems. In the base 14 numbering system, the 3-digit number $c37$ is also a steady square: $c37^2 = aa0c37$, and the sum of its digits is $c+3+7=18$ in the same numbering system. The letters $a$, $b$, $c$ and $d$ are used for the 10, 11, 12 and 13 digits respectively, in a manner similar to the hexadecimal numbering system.\n\nFor $1 ≤ n ≤ 9$, the sum of the digits of all the $n$-digit steady squares in the base 14 numbering system is $2d8$ (582 decimal). Steady squares with leading 0's are not allowed.\n\nFind the sum of the digits of all the $n$-digit steady squares in the base 14 numbering system for $1 ≤ n ≤ 10000$ (decimal) and give your answer as a string in the base 14 system using lower case letters where necessary.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function steadySquares() {\n\n  return true;\n}\n\nsteadySquares();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`steadySquares()` should return a string.",
          "testCode": "assert.isString(steadySquares());"
        },
        {
          "text": "`steadySquares()` should return the string `5a411d7b`.",
          "testCode": "assert.strictEqual(steadySquares(), '5a411d7b');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301935,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-284-steady-squares.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f48a1000cf542c50ff9c",
      "title": "Problem 285: Pythagorean odds",
      "challengeType": 1,
      "dashedName": "problem-285-pythagorean-odds",
      "description": "Albert chooses a positive integer $k$, then two real numbers $a$, $b$ are randomly chosen in the interval [0,1] with uniform distribution.\n\nThe square root of the sum ${(ka + 1)}^2 + {(kb + 1)}^2$ is then computed and rounded to the nearest integer. If the result is equal to $k$, he scores $k$ points; otherwise he scores nothing.\n\nFor example, if $k = 6$, $a = 0.2$ and $b = 0.85$, then ${(ka + 1)}^2 + {(kb + 1)}^2 = 42.05$. The square root of 42.05 is 6.484... and when rounded to the nearest integer, it becomes 6. This is equal to $k$, so he scores 6 points.\n\nIt can be shown that if he plays 10 turns with $k = 1, k = 2, \\ldots, k = 10$, the expected value of his total score, rounded to five decimal places, is 10.20914.\n\nIf he plays ${10}^5$ turns with $k = 1, k = 2, k = 3, \\ldots, k = {10}^5$, what is the expected value of his total score, rounded to five decimal places?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pythagoreanOdds() {\n\n  return true;\n}\n\npythagoreanOdds();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pythagoreanOdds()` should return `157055.80999`.",
          "testCode": "assert.strictEqual(pythagoreanOdds(), 157055.80999);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301936,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-285-pythagorean-odds.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f48a1000cf542c50ff9d",
      "title": "Problem 286: Scoring probabilities",
      "challengeType": 1,
      "dashedName": "problem-286-scoring-probabilities",
      "description": "Barbara is a mathematician and a basketball player. She has found that the probability of scoring a point when shooting from a distance $x$ is exactly ($1 - \\frac{x}{q}$), where $q$ is a real constant greater than 50.\n\nDuring each practice run, she takes shots from distances $x = 1, x = 2, \\ldots, x = 50$ and, according to her records, she has precisely a 2 % chance to score a total of exactly 20 points.\n\nFind $q$ and give your answer rounded to 10 decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function scoringProbabilities() {\n\n  return true;\n}\n\nscoringProbabilities();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`scoringProbabilities()` should return `52.6494571953`.",
          "testCode": "assert.strictEqual(scoringProbabilities(), 52.6494571953);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301937,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-286-scoring-probabilities.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f48b1000cf542c50ff9e",
      "title": "Problem 287: Quadtree encoding (a simple compression algorithm)",
      "challengeType": 1,
      "dashedName": "problem-287-quadtree-encoding-a-simple-compression-algorithm",
      "description": "The quadtree encoding allows us to describe a $2^N×2^N$ black and white image as a sequence of bits (0 and 1). Those sequences are to be read from left to right like this:\n\n- the first bit deals with the complete $2^N×2^N$ region;\n- \"0\" denotes a split:\n  - the current $2^n×2^n$ region is divided into 4 sub-regions of dimension $2^{n - 1}×2^{n - 1}$,\n  - the next bits contains the description of the top left, top right, bottom left and bottom right sub-regions - in that order;\n- \"10\" indicates that the current region contains only black pixels;\n- \"11\" indicates that the current region contains only white pixels.\n\nConsider the following 4×4 image (colored marks denote places where a split can occur):\n\n<img alt=\"4x4 image with colored marks denoting place where split can occur\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/quadtree-encoding-a-simple-compression-algorithm.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThis image can be described by several sequences, for example : \"<strong><span style=\"color: red\">0</span></strong><strong><span style=\"color: blue\">0</span></strong>10101010<strong><span style=\"color: green\">0</span></strong>1011111011<strong><span style=\"color: orange\">0</span></strong>10101010\", of length 30, or \"<strong><span style=\"color: red\">0</span></strong>10<strong><span style=\"color: green\">0</span></strong>101111101110\", of length 16, which is the minimal sequence for this image.\n\nFor a positive integer $N$, define $D_N$ as the $2^N×2^N$ image with the following coloring scheme:\n\n- the pixel with coordinates $x = 0$, $y = 0$ corresponds to the bottom left pixel,\n- if ${(x - 2^{N - 1})}^2 + {(y - 2^{N - 1})}^2 ≤ 2^{2N - 2}$ then the pixel is black,\n- otherwise the pixel is white.\n\nWhat is the length of the minimal sequence describing $D_{24}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function quadtreeEncoding() {\n\n  return true;\n}\n\nquadtreeEncoding();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`quadtreeEncoding()` should return `313135496`.",
          "testCode": "assert.strictEqual(quadtreeEncoding(), 313135496);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301938,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-287-quadtree-encoding-a-simple-compression-algorithm.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f48d1000cf542c50ff9f",
      "title": "Problem 288: An enormous factorial",
      "challengeType": 1,
      "dashedName": "problem-288-an-enormous-factorial",
      "description": "For any prime $p$ the number $N(p,q)$ is defined by $N(p,q) = \\sum_{n=0}^q T_n \\times p^n$ with $T_n$ generated by the following random number generator:\n\n$$\\begin{align}\n  & S_0 = 290797 \\\\\\\\\n  & S_{n + 1} = {S_n}^2\\bmod 50\\\\,515\\\\,093 \\\\\\\\\n  & T_n = S_n\\bmod p\n\\end{align}$$\n\nLet $Nfac(p,q)$ be the factorial of $N(p,q)$.\n\nLet $NF(p,q)$ be the number of factors $p$ in $Nfac(p,q)$.\n\nYou are given that $NF(3,10000) \\bmod 3^{20} = 624\\\\,955\\\\,285$.\n\nFind $NF(61,{10}^7)\\bmod {61}^{10}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function enormousFactorial() {\n\n  return true;\n}\n\nenormousFactorial();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`enormousFactorial()` should return `605857431263982000`.",
          "testCode": "assert.strictEqual(enormousFactorial(), 605857431263982000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301939,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-288-an-enormous-factorial.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f48d1000cf542c50ffa0",
      "title": "Problem 289: Eulerian Cycles",
      "challengeType": 1,
      "dashedName": "problem-289-eulerian-cycles",
      "description": "Let $C(x,y)$ be a circle passing through the points ($x$, $y$), ($x$, $y + 1$), ($x + 1$, $y$) and ($x + 1$, $y + 1$).\n\nFor positive integers $m$ and $n$, let $E(m,n)$ be a configuration which consists of the $m·n$ circles: { $C(x,y)$: $0 ≤ x &lt; m$, $0 ≤ y &lt; n$, $x$ and $y$ are integers }\n\nAn Eulerian cycle on $E(m,n)$ is a closed path that passes through each arc exactly once. Many such paths are possible on $E(m,n)$, but we are only interested in those which are not self-crossing: A non-crossing path just touches itself at lattice points, but it never crosses itself.\n\nThe image below shows $E(3,3)$ and an example of an Eulerian non-crossing path.\n\n<img alt=\"Eulerian cycle E(3, 3) and Eulerian non-crossing path\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/eulerian-cycles.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $L(m,n)$ be the number of Eulerian non-crossing paths on $E(m,n)$. For example, $L(1,2) = 2$, $L(2,2) = 37$ and $L(3,3) = 104290$.\n\nFind $L(6,10)\\bmod {10}^{10}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function eulerianCycles() {\n\n  return true;\n}\n\neulerianCycles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`eulerianCycles()` should return `6567944538`.",
          "testCode": "assert.strictEqual(eulerianCycles(), 6567944538);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301940,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-289-eulerian-cycles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f48f1000cf542c50ffa1",
      "title": "Problem 290: Digital Signature",
      "challengeType": 1,
      "dashedName": "problem-290-digital-signature",
      "description": "How many integers $0 ≤ n &lt; {10}^{18}$ have the property that the sum of the digits of $n$ equals the sum of digits of $137n$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function digitalSignature() {\n\n  return true;\n}\n\ndigitalSignature();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`digitalSignature()` should return `20444710234716470`.",
          "testCode": "assert.strictEqual(digitalSignature(), 20444710234716470);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301942,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-290-digital-signature.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f48f1000cf542c50ffa2",
      "title": "Problem 291: Panaitopol Primes",
      "challengeType": 1,
      "dashedName": "problem-291-panaitopol-primes",
      "description": "A prime number $p$ is called a Panaitopol prime if $p = \\frac{x^4 - y^4}{x^3 + y^3}$ for some positive integers $x$ and $y$.\n\nFind how many Panaitopol primes are less than $5 × {10}^{15}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function panaitopolPrimes() {\n\n  return true;\n}\n\npanaitopolPrimes();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`panaitopolPrimes()` should return `4037526`.",
          "testCode": "assert.strictEqual(panaitopolPrimes(), 4037526);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301943,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-291-panaitopol-primes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4911000cf542c50ffa3",
      "title": "Problem 292: Pythagorean Polygons",
      "challengeType": 1,
      "dashedName": "problem-292-pythagorean-polygons",
      "description": "We shall define a pythagorean polygon to be a convex polygon with the following properties:\n\n- there are at least three vertices,\n- no three vertices are aligned,\n- each vertex has integer coordinates,\n- each edge has integer length.\n\nFor a given integer $n$, define $P(n)$ as the number of distinct pythagorean polygons for which the perimeter is $≤ n$.\n\nPythagorean polygons should be considered distinct as long as none is a translation of another.\n\nYou are given that $P(4) = 1$, $P(30) = 3655$ and $P(60) = 891045$.\n\nFind $P(120)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pythagoreanPolygons() {\n\n  return true;\n}\n\npythagoreanPolygons();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pythagoreanPolygons()` should return `3600060866`.",
          "testCode": "assert.strictEqual(pythagoreanPolygons(), 3600060866);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301944,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-292-pythagorean-polygons.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4931000cf542c50ffa4",
      "title": "Problem 293: Pseudo-Fortunate Numbers",
      "challengeType": 1,
      "dashedName": "problem-293-pseudo-fortunate-numbers",
      "description": "An even positive integer $N$ will be called admissible, if it is a power of 2 or its distinct prime factors are consecutive primes.\n\nThe first twelve admissible numbers are 2, 4, 6, 8, 12, 16, 18, 24, 30, 32, 36, 48.\n\nIf $N$ is admissible, the smallest integer $M > 1$ such that $N + M$ is prime, will be called the pseudo-Fortunate number for $N$.\n\nFor example, $N = 630$ is admissible since it is even and its distinct prime factors are the consecutive primes 2, 3, 5 and 7. The next prime number after 631 is 641; hence, the pseudo-Fortunate number for 630 is $M = 11$. It can also be seen that the pseudo-Fortunate number for 16 is 3.\n\nFind the sum of all distinct pseudo-Fortunate numbers for admissible numbers $N$ less than ${10}^9$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pseudoFortunateNumbers() {\n\n  return true;\n}\n\npseudoFortunateNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pseudoFortunateNumbers()` should return `2209`.",
          "testCode": "assert.strictEqual(pseudoFortunateNumbers(), 2209);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301945,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-293-pseudo-fortunate-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4931000cf542c50ffa5",
      "title": "Problem 294: Sum of digits - experience #23",
      "challengeType": 1,
      "dashedName": "problem-294-sum-of-digits",
      "description": "For a positive integer $k$, define $d(k)$ as the sum of the digits of $k$ in its usual decimal representation. Thus $d(42) = 4 + 2 = 6$.\n\nFor a positive integer $n$, define $S(n)$ as the number of positive integers $k &lt; {10}^n$ with the following properties:\n\n- $k$ is divisible by 23 and,\n- $d(k) = 23$.\n\nYou are given that $S(9) = 263\\\\,626$ and $S(42) = 6\\\\,377\\\\,168\\\\,878\\\\,570\\\\,056$.\n\nFind $S({11}^{12})$ and give your answer $\\bmod {10}^9$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function experience23() {\n\n  return true;\n}\n\nexperience23();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`experience23()` should return `789184709`.",
          "testCode": "assert.strictEqual(experience23(), 789184709);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301946,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-294-sum-of-digits---experience-23.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4931000cf542c50ffa6",
      "title": "Problem 295: Lenticular holes",
      "challengeType": 1,
      "dashedName": "problem-295-lenticular-holes",
      "description": "We call the convex area enclosed by two circles a lenticular hole if:\n\n- The centers of both circles are on lattice points.\n- The two circles intersect at two distinct lattice points.\n- The interior of the convex area enclosed by both circles does not contain any lattice points.\n\nConsider the circles:\n\n$$\\begin{align}\n  & C_0: x^2 + y^2 = 25 \\\\\\\\\n  & C_1: {(x + 4)}^2 + {(y - 4)}^2 = 1 \\\\\\\\\n  & C_2: {(x - 12)}^2 + {(y - 4)}^2 = 65\n\\end{align}$$\n\nThe circles $C_0$, $C_1$ and $C_2$ are drawn in the picture below.\n\n<img alt=\"C_0, C_1 and C_2 circles\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/lenticular-holes.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\n$C_0$ and $C_1$ form a lenticular hole, as well as $C_0$ and $C_2$.\n\nWe call an ordered pair of positive real numbers ($r_1$, $r_2$) a lenticular pair if there exist two circles with radii $r_1$ and $r_2$ that form a lenticular hole. We can verify that ($1$, $5$) and ($5$, $\\sqrt{65}$) are the lenticular pairs of the example above.\n\nLet $L(N)$ be the number of distinct lenticular pairs ($r_1$, $r_2$) for which $0 &lt; r_1 ≤ r_2 ≤ N$. We can verify that $L(10) = 30$ and $L(100) = 3442$.\n\nFind $L(100\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function lenticularHoles() {\n\n  return true;\n}\n\nlenticularHoles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`lenticularHoles()` should return `4884650818`.",
          "testCode": "assert.strictEqual(lenticularHoles(), 4884650818);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301947,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-295-lenticular-holes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4941000cf542c50ffa7",
      "title": "Problem 296: Angular Bisector and Tangent",
      "challengeType": 1,
      "dashedName": "problem-296-angular-bisector-and-tangent",
      "description": "Given is an integer sided triangle $ABC$ with $BC ≤ AC ≤ AB$. $k$ is the angular bisector of angle $ACB$. $m$ is the tangent at $C$ to the circumscribed circle of $ABC$. $n$ is a line parallel to $m$ through $B$.\n\nThe intersection of $n$ and $k$ is called $E$.\n\n<img alt=\"triangle ABC, with k - the angular bisector of angle ACB, m - tangent at point C, n - line parallel to m through B, and point E - intersection of k and n\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/angular-bisector-and-tangent.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHow many triangles $ABC$ with a perimeter not exceeding $100\\\\,000$ exist such that $BE$ has integral length?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function angularBisectorAndTangent() {\n\n  return true;\n}\n\nangularBisectorAndTangent();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`angularBisectorAndTangent()` should return `1137208419`.",
          "testCode": "assert.strictEqual(angularBisectorAndTangent(), 1137208419);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301948,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-296-angular-bisector-and-tangent.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4951000cf542c50ffa8",
      "title": "Problem 297: Zeckendorf Representation",
      "challengeType": 1,
      "dashedName": "problem-297-zeckendorf-representation",
      "description": "Each new term in the Fibonacci sequence is generated by adding the previous two terms.\n\nStarting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.\n\nEvery positive integer can be uniquely written as a sum of nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 + 8 + 89.\n\nSuch a sum is called the Zeckendorf representation of the number.\n\nFor any integer $n>0$, let $z(n)$ be the number of terms in the Zeckendorf representation of $n$.\n\nThus, $z(5) = 1$, $z(14) = 2$, $z(100) = 3$ etc.\n\nAlso, for $0 &lt; n &lt; {10}^6$, $\\sum z(n) = 7\\\\,894\\\\,453$.\n\nFind $\\sum z(n)$ for $0 &lt; n &lt; {10}^{17}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function zeckendorfRepresentation() {\n\n  return true;\n}\n\nzeckendorfRepresentation();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`zeckendorfRepresentation()` should return `2252639041804718000`.",
          "testCode": "assert.strictEqual(zeckendorfRepresentation(), 2252639041804718000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301949,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-297-zeckendorf-representation.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4971000cf542c50ffa9",
      "title": "Problem 298: Selective Amnesia",
      "challengeType": 1,
      "dashedName": "problem-298-selective-amnesia",
      "description": "Larry and Robin play a memory game involving of a sequence of random numbers between 1 and 10, inclusive, that are called out one at a time. Each player can remember up to 5 previous numbers. When the called number is in a player's memory, that player is awarded a point. If it's not, the player adds the called number to his memory, removing another number if his memory is full.\n\nBoth players start with empty memories. Both players always add new missed numbers to their memory but use a different strategy in deciding which number to remove: Larry's strategy is to remove the number that hasn't been called in the longest time. Robin's strategy is to remove the number that's been in the memory the longest time.\n\nExample game:\n\n| Turn | Called number | Larry's memory | Larry's score | Robin's memory | Robin's score |\n|------|---------------|---------------:|---------------|----------------|---------------|\n|   1  |       1       |              1 |       0       |              1 |       0       |\n|   2  |       2       |            1,2 |       0       |            1,2 |       0       |\n|   3  |       4       |          1,2,4 |       0       |          1,2,4 |       0       |\n|   4  |       6       |        1,2,4,6 |       0       |        1,2,4,6 |       0       |\n|   5  |       1       |        1,2,4,6 |       1       |        1,2,4,6 |       1       |\n|   6  |       8       |      1,2,4,6,8 |       1       |      1,2,4,6,8 |       1       |\n|   7  |      10       |     1,4,6,8,10 |       1       |     2,4,6,8,10 |       1       |\n|   8  |       2       |     1,2,6,8,10 |       1       |     2,4,6,8,10 |       2       |\n|   9  |       4       |     1,2,4,8,10 |       1       |     2,4,6,8,10 |       3       |\n|  10  |       1       |     1,2,4,8,10 |       2       |     1,4,6,8,10 |       3       |\n\nDenoting Larry's score by $L$ and Robin's score by $R$, what is the expected value of $|L - R|$ after 50 turns? Give your answer rounded to eight decimal places using the format x.xxxxxxxx .",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function selectiveAmnesia() {\n\n  return true;\n}\n\nselectiveAmnesia();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`selectiveAmnesia()` should return `1.76882294`.",
          "testCode": "assert.strictEqual(selectiveAmnesia(), 1.76882294);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301950,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-298-selective-amnesia.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4971000cf542c50ffaa",
      "title": "Problem 299: Three similar triangles",
      "challengeType": 1,
      "dashedName": "problem-299-three-similar-triangles",
      "description": "Four points with integer coordinates are selected:\n\n$A(a, 0)$, $B(b, 0)$, $C(0, c)$ and $D(0, d)$, with $0 &lt; a &lt; b$ and $0 &lt; c &lt; d$.\n\nPoint $P$, also with integer coordinates, is chosen on the line $AC$ so that the three triangles $ABP$, $CDP$ and $BDP$ are all similar.\n\n<img alt=\"points A, B, C, D and P creating three triangles: ABP, CDP, and BDP\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/three-similar-triangles.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIt is easy to prove that the three triangles can be similar, only if $a = c$.\n\nSo, given that $a = c$, we are looking for triplets ($a$, $b$, $d$) such that at least one point $P$ (with integer coordinates) exists on $AC$, making the three triangles $ABP$, $CDP$ and $BDP$ all similar.\n\nFor example, if $(a, b, d) = (2, 3, 4)$, it can be easily verified that point $P(1, 1)$ satisfies the above condition. Note that the triplets (2,3,4) and (2,4,3) are considered as distinct, although point $P(1, 1)$ is common for both.\n\nIf $b + d &lt; 100$, there are 92 distinct triplets ($a$, $b$, $d$) such that point $P$ exists.\n\nIf $b + d &lt; 100\\\\,000$, there are 320471 distinct triplets ($a$, $b$, $d$) such that point $P$ exists.\n\nIf $b + d &lt; 100\\\\,000\\\\,000$, how many distinct triplets ($a$, $b$, $d$) are there such that point $P$ exists?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function threeSimilarTriangles() {\n\n  return true;\n}\n\nthreeSimilarTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`threeSimilarTriangles()` should return `549936643`.",
          "testCode": "assert.strictEqual(threeSimilarTriangles(), 549936643);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301951,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-299-three-similar-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f49a1000cf542c50ffac",
      "title": "Problem 300: Protein folding",
      "challengeType": 1,
      "dashedName": "problem-300-protein-folding",
      "description": "In a very simplified form, we can consider proteins as strings consisting of hydrophobic (H) and polar (P) elements, e.g. HHPPHHHPHHPH.\n\nFor this problem, the orientation of a protein is important; e.g. HPP is considered distinct from PPH. Thus, there are $2^n$ distinct proteins consisting of $n$ elements.\n\nWhen one encounters these strings in nature, they are always folded in such a way that the number of H-H contact points is as large as possible, since this is energetically advantageous.\n\nAs a result, the H-elements tend to accumulate in the inner part, with the P-elements on the outside.\n\nNatural proteins are folded in three dimensions of course, but we will only consider protein folding in <u>two dimensions</u>.\n\nThe figure below shows two possible ways that our example protein could be folded (H-H contact points are shown with red dots).\n\n<img alt=\"two possible ways to fold example protein\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/protein-folding.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe folding on the left has only six H-H contact points, thus it would never occur naturally. On the other hand, the folding on the right has nine H-H contact points, which is optimal for this string.\n\nAssuming that H and P elements are equally likely to occur in any position along the string, the average number of H-H contact points in an optimal folding of a random protein string of length 8 turns out to be $\\frac{850}{2^8} = 3.3203125$.\n\nWhat is the average number of H-H contact points in an optimal folding of a random protein string of length 15? Give your answer using as many decimal places as necessary for an exact result.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function proteinFolding() {\n\n  return true;\n}\n\nproteinFolding();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`proteinFolding()` should return `8.0540771484375`.",
          "testCode": "assert.strictEqual(proteinFolding(), 8.0540771484375);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301954,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-201-to-300\\problem-300-protein-folding.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-201-to-300",
        "name": "Project Euler Problems 201 To 300"
      }
    },
    {
      "id": "5900f4991000cf542c50ffab",
      "title": "Problem 301: Nim",
      "challengeType": 1,
      "dashedName": "problem-301-nim",
      "description": "Nim is a game played with heaps of stones, where two players take it in turn to remove any number of stones from any heap until no stones remain.\n\nWe'll consider the three-heap normal-play version of Nim, which works as follows:\n\n- At the start of the game there are three heaps of stones.\n- On his turn the player removes any positive number of stones from any single heap.\n- The first player unable to move (because no stones remain) loses.\n\nIf ($n_1$, $n_2$, $n_3$) indicates a Nim position consisting of heaps of size $n_1$, $n_2$ and $n_3$ then there is a simple function $X(n_1,n_2,n_3)$ — that you may look up or attempt to deduce for yourself — that returns:\n\n- zero if, with perfect strategy, the player about to move will eventually lose; or\n- non-zero if, with perfect strategy, the player about to move will eventually win.\n\nFor example $X(1, 2, 3) = 0$ because, no matter what the current player does, his opponent can respond with a move that leaves two heaps of equal size, at which point every move by the current player can be mirrored by his opponent until no stones remain; so the current player loses. To illustrate:\n\n- current player moves to (1,2,1)\n- opponent moves to (1,0,1)\n- current player moves to (0,0,1)\n- opponent moves to (0,0,0), and so wins.\n\nFor how many positive integers $n ≤ 2^{30}$ does $X(n, 2n, 3n) = 0$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nim() {\n\n  return true;\n}\n\nnim();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`nim()` should return `2178309`.",
          "testCode": "assert.strictEqual(nim(), 2178309);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301955,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-301-nim.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f49b1000cf542c50ffad",
      "title": "Problem 302: Strong Achilles Numbers",
      "challengeType": 1,
      "dashedName": "problem-302-strong-achilles-numbers",
      "description": "A positive integer $n$ is powerful if $p^2$ is a divisor of $n$ for every prime factor $p$ in $n$.\n\nA positive integer $n$ is a perfect power if $n$ can be expressed as a power of another positive integer.\n\nA positive integer $n$ is an Achilles number if $n$ is powerful but not a perfect power. For example, 864 and 1800 are Achilles numbers: $864 = 2^5 \\times 3^3$ and $1800 = 2^3 \\times 3^2 \\times 5^2$.\n\nWe shall call a positive integer $S$ a Strong Achilles number if both $S$ and $φ(S)$ are Achilles numbers. $φ$ denotes Euler's totient function.\n\nFor example, 864 is a Strong Achilles number: $φ(864) = 288 = 2^5 \\times 3^2$. However, 1800 isn't a Strong Achilles number because: $φ(1800) = 480 = 2^5 \\times 3^1 \\times 5^1$.\n\nThere are 7 Strong Achilles numbers below ${10}^4$ and 656 below ${10}^8$.\n\nHow many Strong Achilles numbers are there below ${10}^{18}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function strongAchillesNumbers() {\n\n  return true;\n}\n\nstrongAchillesNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`strongAchillesNumbers()` should return `1170060`.",
          "testCode": "assert.strictEqual(strongAchillesNumbers(), 1170060);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301956,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-302-strong-achilles-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f49b1000cf542c50ffae",
      "title": "Problem 303: Multiples with small digits",
      "challengeType": 1,
      "dashedName": "problem-303-multiples-with-small-digits",
      "description": "For a positive integer $n$, define $f(n)$ as the least positive multiple of $n$ that, written in base 10, uses only digits $≤ 2$.\n\nThus $f(2) = 2$, $f(3) = 12$, $f(7) = 21$, $f(42) = 210$, $f(89) = 1\\\\,121\\\\,222$.\n\nAlso, $\\displaystyle\\sum_{n = 1}^{100} \\frac{f(n)}{n} = 11\\\\,363\\\\,107$.\n\nFind $\\displaystyle\\sum_{n = 1}^{10\\\\,000} \\frac{f(n)}{n}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function multiplesWithSmallDigits() {\n\n  return true;\n}\n\nmultiplesWithSmallDigits();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`multiplesWithSmallDigits()` should return `1111981904675169`.",
          "testCode": "assert.strictEqual(multiplesWithSmallDigits(), 1111981904675169);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301957,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-303-multiples-with-small-digits.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f49d1000cf542c50ffaf",
      "title": "Problem 304: Primonacci",
      "challengeType": 1,
      "dashedName": "problem-304-primonacci",
      "description": "For any positive integer $n$ the function $\\text{next_prime}(n)$ returns the smallest prime $p$ such that $p > n$.\n\nThe sequence $a(n)$ is defined by: $a(1) = \\text{next_prime}({10}^{14})$ and $a(n) = \\text{next_prime}(a(n - 1))$ for $n > 1$.\n\nThe fibonacci sequence $f(n)$ is defined by: $f(0) = 0$, $f(1) = 1$ and $f(n) = f(n - 1) + f(n - 2)$ for $n > 1$.\n\nThe sequence $b(n)$ is defined as $f(a(n))$.\n\nFind $\\sum b(n)$ for $1≤n≤100\\\\,000$. Give your answer $\\bmod 1\\\\,234\\\\,567\\\\,891\\\\,011$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primonacci() {\n\n  return true;\n}\n\nprimonacci();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primonacci()` should return `283988410192`.",
          "testCode": "assert.strictEqual(primonacci(), 283988410192);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301958,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-304-primonacci.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f49d1000cf542c50ffb0",
      "title": "Problem 305: Reflexive Position",
      "challengeType": 1,
      "dashedName": "problem-305-reflexive-position",
      "description": "Let's call $S$ the (infinite) string that is made by concatenating the consecutive positive integers (starting from 1) written down in base 10.\n\nThus, $S = 1234567891011121314151617181920212223242\\ldots$\n\nIt's easy to see that any number will show up an infinite number of times in $S$.\n\nLet's call $f(n)$ the starting position of the $n^{\\text{th}}$ occurrence of $n$ in $S$. For example, $f(1) = 1$, $f(5) = 81$, $f(12) = 271$ and $f(7780) = 111\\\\,111\\\\,365$.\n\nFind $\\sum f(3^k) for 1 ≤ k ≤ 13$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function reflexivePosition() {\n\n  return true;\n}\n\nreflexivePosition();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`reflexivePosition()` should return `18174995535140`.",
          "testCode": "assert.strictEqual(reflexivePosition(), 18174995535140);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301959,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-305-reflexive-position.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f49f1000cf542c50ffb1",
      "title": "Problem 306: Paper-strip Game",
      "challengeType": 1,
      "dashedName": "problem-306-paper-strip-game",
      "description": "The following game is a classic example of Combinatorial Game Theory:\n\nTwo players start with a strip of $n$ white squares and they take alternate turns. On each turn, a player picks two contiguous white squares and paints them black. The first player who cannot make a move loses.\n\n- $n = 1$: No valid moves, so the first player loses automatically.\n- $n = 2$: Only one valid move, after which the second player loses.\n- $n = 3$: Two valid moves, but both leave a situation where the second player loses.\n- $n = 4$: There are three valid moves for the first player; who is able to win the game by painting the two middle squares.\n- $n = 5$: Four valid moves for the first player (shown below in red); but no matter what the player does, the second player (blue) wins.\n\n<img alt=\"valid starting moves for strip with 5 squares\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/paper-strip-game.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nSo, for $1 ≤ n ≤ 5$, there are 3 values of $n$ for which the first player can force a win.\n\nSimilarly, for $1 ≤ n ≤ 50$, there are 40 values of $n$ for which the first player can force a win.\n\nFor $1 ≤ n ≤ 1\\\\,000\\\\,000$, how many values of $n$ are there for which the first player can force a win?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function paperStripGame() {\n\n  return true;\n}\n\npaperStripGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`paperStripGame()` should return `852938`.",
          "testCode": "assert.strictEqual(paperStripGame(), 852938);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301960,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-306-paper-strip-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a01000cf542c50ffb2",
      "title": "Problem 307: Chip Defects",
      "challengeType": 1,
      "dashedName": "problem-307-chip-defects",
      "description": "$k$ defects are randomly distributed amongst $n$ integrated-circuit chips produced by a factory (any number of defects may be found on a chip and each defect is independent of the other defects).\n\nLet $p(k,n)$ represent the probability that there is a chip with at least 3 defects. For instance $p(3,7) ≈ 0.0204081633$.\n\nFind $p(20\\\\,000, 1\\\\,000\\\\,000)$ and give your answer rounded to 10 decimal places in the form 0.abcdefghij",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function chipDefects() {\n\n  return true;\n}\n\nchipDefects();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`chipDefects()` should return `0.7311720251`.",
          "testCode": "assert.strictEqual(chipDefects(), 0.7311720251);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301961,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-307-chip-defects.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a11000cf542c50ffb3",
      "title": "Problem 308: An amazing Prime-generating Automaton",
      "challengeType": 1,
      "dashedName": "problem-308-an-amazing-prime-generating-automaton",
      "description": "A program written in the programming language Fractran consists of a list of fractions.\n\nThe internal state of the Fractran Virtual Machine is a positive integer, which is initially set to a seed value. Each iteration of a Fractran program multiplies the state integer by the first fraction in the list which will leave it an integer.\n\nFor example, one of the Fractran programs that John Horton Conway wrote for prime-generation consists of the following 14 fractions:\n\n$$\\frac{17}{91}, \\frac{78}{85}, \\frac{19}{51}, \\frac{23}{38}, \\frac{29}{33}, \\frac{77}{29}, \\frac{95}{23}, \\frac{77}{19}, \\frac{1}{17}, \\frac{11}{13}, \\frac{13}{11}, \\frac{15}{2}, \\frac{1}{7}, \\frac{55}{1}$$\n\nStarting with the seed integer 2, successive iterations of the program produce the sequence:\n\n$$15, 825, 725, 1925, 2275, 425, \\ldots, 68, \\mathbf{4}, 30, \\ldots, 136, \\mathbf{8}, 60, \\ldots, 544, \\mathbf{32}, 240, \\ldots$$\n\nThe powers of 2 that appear in this sequence are $2^2, 2^3, 2^5, \\ldots$.\n\nIt can be shown that all the powers of 2 in this sequence have prime exponents and that all the primes appear as exponents of powers of 2, in proper order!\n\nIf someone uses the above Fractran program to solve Project Euler Problem 7 (find the ${10001}^{\\text{st}}$ prime), how many iterations would be needed until the program produces $2^{10001^{\\text{st}}\\text{ prime}}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeGeneratingAutomation() {\n\n  return true;\n}\n\nprimeGeneratingAutomation();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeGeneratingAutomation()` should return `1539669807660924`.",
          "testCode": "assert.strictEqual(primeGeneratingAutomation(), 1539669807660924);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301962,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-308-an-amazing-prime-generating-automaton.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a11000cf542c50ffb4",
      "title": "Problem 309: Integer Ladders",
      "challengeType": 1,
      "dashedName": "problem-309-integer-ladders",
      "description": "In the classic \"Crossing Ladders\" problem, we are given the lengths $x$ and $y$ of two ladders resting on the opposite walls of a narrow, level street. We are also given the height $h$ above the street where the two ladders cross and we are asked to find the width of the street ($w$).\n\n<img alt=\"ladders x and y, crossing at the height h, and resting on opposite walls of the street of width w\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/integer-ladders.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHere, we are only concerned with instances where all four variables are positive integers. For example, if $x = 70$, $y = 119$ and $h = 30$, we can calculate that $w = 56$.\n\nIn fact, for integer values $x$, $y$, $h$ and $0 &lt; x &lt; y &lt; 200$, there are only five triplets ($x$, $y$, $h$) producing integer solutions for $w$: (70, 119, 30), (74, 182, 21), (87, 105, 35), (100, 116, 35) and (119, 175, 40).\n\nFor integer values $x$, $y$, $h$ and $0 &lt; x &lt; y &lt; 1\\\\,000\\\\,000$, how many triplets ($x$, $y$, $h$) produce integer solutions for $w$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function integerLadders() {\n\n  return true;\n}\n\nintegerLadders();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`integerLadders()` should return `210139`.",
          "testCode": "assert.strictEqual(integerLadders(), 210139);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301963,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-309-integer-ladders.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a21000cf542c50ffb5",
      "title": "Problem 310: Nim Square",
      "challengeType": 1,
      "dashedName": "problem-310-nim-square",
      "description": "Alice and Bob play the game Nim Square.\n\nNim Square is just like ordinary three-heap normal play Nim, but the players may only remove a square number of stones from a heap.\n\nThe number of stones in the three heaps is represented by the ordered triple ($a$, $b$, $c$).\n\nIf $0 ≤ a ≤ b ≤ c ≤ 29$ then the number of losing positions for the next player is 1160.\n\nFind the number of losing positions for the next player if $0 ≤ a ≤ b ≤ c ≤ 100\\\\,000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nimSquare() {\n\n  return true;\n}\n\nnimSquare();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`nimSquare()` should return `2586528661783`.",
          "testCode": "assert.strictEqual(nimSquare(), 2586528661783);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301966,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-310-nim-square.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a31000cf542c50ffb6",
      "title": "Problem 311: Biclinic Integral Quadrilaterals",
      "challengeType": 1,
      "dashedName": "problem-311-biclinic-integral-quadrilaterals",
      "description": "$ABCD$ is a convex, integer sided quadrilateral with $1 ≤ AB &lt; BC &lt; CD &lt; AD$.\n\n$BD$ has integer length. $O$ is the midpoint of $BD$. $AO$ has integer length.\n\nWe'll call $ABCD$ a biclinic integral quadrilateral if $AO = CO ≤ BO = DO$.\n\nFor example, the following quadrilateral is a biclinic integral quadrilateral: $AB = 19$, $BC = 29$, $CD = 37$, $AD = 43$, $BD = 48$ and $AO = CO = 23$.\n\n<img alt=\"quadrilateral ABCD, with point O, a midpoint of BD\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/biclinic-integral-quadrilaterals.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $B(N)$ be the number of distinct biclinic integral quadrilaterals $ABCD$ that satisfy ${AB}^2 + {BC}^2 + {CD}^2 + {AD}^2 ≤ N$. We can verify that $B(10\\\\,000) = 49$ and $B(1\\\\,000\\\\,000) = 38239$.\n\nFind $B(10\\\\,000\\\\,000\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function biclinicIntegralQuadrilaterals() {\n\n  return true;\n}\n\nbiclinicIntegralQuadrilaterals();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`biclinicIntegralQuadrilaterals()` should return `2466018557`.",
          "testCode": "assert.strictEqual(biclinicIntegralQuadrilaterals(), 2466018557);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301967,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-311-biclinic-integral-quadrilaterals.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a51000cf542c50ffb7",
      "title": "Problem 312: Cyclic paths on Sierpiński graphs",
      "challengeType": 1,
      "dashedName": "problem-312-cyclic-paths-on-sierpiski-graphs",
      "description": "- A Sierpiński graph of order-1 ($S_1$) is an equilateral triangle.\n- $S_{n + 1}$ is obtained from $S_n$ by positioning three copies of $S_n$ so that every pair of copies has one common corner.\n\n<img alt=\"Sierpinski graphs of order-1 to order-5\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/cyclic-paths-on-sierpinski-graphs-1.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $C(n)$ be the number of cycles that pass exactly once through all the vertices of $S_n$. For example, $C(3) = 8$ because eight such cycles can be drawn on $S_3$, as shown below:\n\n<img alt=\"eight cycles that pass exactly once through all vertices of S_3\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/cyclic-paths-on-sierpinski-graphs-2.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIt can also be verified that:\n\n$$\\begin{align}\n  & C(1) = C(2) = 1 \\\\\\\\\n  & C(5) = 71\\\\,328\\\\,803\\\\,586\\\\,048 \\\\\\\\\n  & C(10 000)\\bmod {10}^8 = 37\\\\,652\\\\,224 \\\\\\\\\n  & C(10 000)\\bmod {13}^8 = 617\\\\,720\\\\,485 \\\\\\\\\n\\end{align}$$\n\nFind $C(C(C(10\\\\,000)))\\bmod {13}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pathsOnSierpinskiGraphs() {\n\n  return true;\n}\n\npathsOnSierpinskiGraphs();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pathsOnSierpinskiGraphs()` should return `324681947`.",
          "testCode": "assert.strictEqual(pathsOnSierpinskiGraphs(), 324681947);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301968,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-312-cyclic-paths-on-sierpiski-graphs.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a61000cf542c50ffb8",
      "title": "Problem 313: Sliding game",
      "challengeType": 1,
      "dashedName": "problem-313-sliding-game",
      "description": "In a sliding game a counter may slide horizontally or vertically into an empty space. The objective of the game is to move the red counter from the top left corner of a grid to the bottom right corner; the space always starts in the bottom right corner. For example, the following sequence of pictures show how the game can be completed in five moves on a 2 by 2 grid.\n\n<img alt=\"completing game in five moves on grid 2x2\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/sliding-game-1.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $S(m, n)$ represent the minimum number of moves to complete the game on an $m$ by $n$ grid. For example, it can be verified that $S(5, 4) = 25$.\n\n<img alt=\"initial grid state and final grid state for game on grid 5x4\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/sliding-game-2.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThere are exactly 5482 grids for which $S(m, n) = p^2$, where $p &lt; 100$ is prime.\n\nHow many grids does $S(m, n) = p^2$, where $p &lt; {10}^6$ is prime?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function slidingGame() {\n\n  return true;\n}\n\nslidingGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`slidingGame()` should return `2057774861813004`.",
          "testCode": "assert.strictEqual(slidingGame(), 2057774861813004);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301969,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-313-sliding-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a71000cf542c50ffb9",
      "title": "Problem 314: The Mouse on the Moon",
      "challengeType": 1,
      "dashedName": "problem-314-the-mouse-on-the-moon",
      "description": "The moon has been opened up, and land can be obtained for free, but there is a catch. You have to build a wall around the land that you stake out, and building a wall on the moon is expensive. Every country has been allotted a 500 m by 500 m square area, but they will possess only that area which they wall in. 251001 posts have been placed in a rectangular grid with 1 meter spacing. The wall must be a closed series of straight lines, each line running from post to post.\n\nThe bigger countries of course have built a 2000 m wall enclosing the entire 250 000 $\\text{m}^2$ area. The Duchy of Grand Fenwick, has a tighter budget, and has asked you (their Royal Programmer) to compute what shape would get best maximum $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio.\n\nYou have done some preliminary calculations on a sheet of paper. For a 2000 meter wall enclosing the 250 000 $\\text{m}^2$ area the $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio is 125.\n\nAlthough not allowed, but to get an idea if this is anything better: if you place a circle inside the square area touching the four sides the area will be equal to $π \\times {250}^2 \\text{m}^2$ and the perimeter will be $π \\times 500 \\text{m}$, so the $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio will also be 125.\n\nHowever, if you cut off from the square four triangles with sides 75 m, 75 m and $75\\sqrt{2}$ m the total area becomes 238750 $\\text{m}^2$ and the perimeter becomes $1400 + 300\\sqrt{2}$ m. So this gives an $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio of 130.87, which is significantly better.\n\n<img alt=\"picture showing difference in enclosed-area between circle and square with cut off four triangles\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/the-mouse-on-the-moon.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFind the maximum $\\frac{\\text{enclosed-area}}{\\text{wall-length}}$ ratio. Give your answer rounded to 8 places behind the decimal point in the form abc.defghijk.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function theMouseOnTheMoon() {\n\n  return true;\n}\n\ntheMouseOnTheMoon();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`theMouseOnTheMoon()` should return `132.52756426`.",
          "testCode": "assert.strictEqual(theMouseOnTheMoon(), 132.52756426);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301970,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-314-the-mouse-on-the-moon.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a71000cf542c50ffba",
      "title": "Problem 315: Digital root clocks",
      "challengeType": 1,
      "dashedName": "problem-315-digital-root-clocks",
      "description": "<img alt=\"animation of Sam's and Max's clocks calculating digital roots starting from 137\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/digital-root-clocks.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nSam and Max are asked to transform two digital clocks into two \"digital root\" clocks.\n\nA digital root clock is a digital clock that calculates digital roots step by step.\n\nWhen a clock is fed a number, it will show it and then it will start the calculation, showing all the intermediate values until it gets to the result. For example, if the clock is fed the number 137, it will show: `137` → `11` → `2` and then it will go black, waiting for the next number.\n\nEvery digital number consists of some light segments: three horizontal (top, middle, bottom) and four vertical (top-left, top-right, bottom-left, bottom-right). Number `1` is made of vertical top-right and bottom-right, number `4` is made by middle horizontal and vertical top-left, top-right and bottom-right. Number `8` lights them all.\n\nThe clocks consume energy only when segments are turned on/off. To turn on a `2` will cost 5 transitions, while a `7` will cost only 4 transitions.\n\nSam and Max built two different clocks.\n\nSam's clock is fed e.g. number 137: the clock shows `137`, then the panel is turned off, then the next number (`11`) is turned on, then the panel is turned off again and finally the last number (`2`) is turned on and, after some time, off.\n\nFor the example, with number 137, Sam's clock requires:\n\n- `137`: $(2 + 5 + 4) × 2 = 22$ transitions (`137` on/off).\n- `11`: $(2 + 2) × 2 = 8$ transitions (`11` on/off).\n- `2`: $(5) × 2 = 10$ transitions (`2` on/off).\n\nFor a grand total of 40 transitions.\n\nMax's clock works differently. Instead of turning off the whole panel, it is smart enough to turn off only those segments that won't be needed for the next number.\n\nFor number 137, Max's clock requires:\n\n- `137` : $2 + 5 + 4 = 11$ transitions (`137` on), $7$ transitions (to turn off the segments that are not needed for number `11`).\n- `11` : $0$ transitions (number `11` is already turned on correctly), $3$ transitions (to turn off the first `1` and the bottom part of the second `1`; the top part is common with number `2`).\n- `2` : $4$ transitions (to turn on the remaining segments in order to get a `2`), $5$ transitions (to turn off number `2`).\n\nFor a grand total of 30 transitions.\n\nOf course, Max's clock consumes less power than Sam's one. The two clocks are fed all the prime numbers between $A = {10}^7$ and $B = 2 × {10}^7$. Find the difference between the total number of transitions needed by Sam's clock and that needed by Max's one.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function digitalRootClocks() {\n\n  return true;\n}\n\ndigitalRootClocks();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`digitalRootClocks()` should return `13625242`.",
          "testCode": "assert.strictEqual(digitalRootClocks(), 13625242);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301971,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-315-digital-root-clocks.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4a81000cf542c50ffbb",
      "title": "Problem 316: Numbers in decimal expansions",
      "challengeType": 1,
      "dashedName": "problem-316-numbers-in-decimal-expansions",
      "description": "Let $p = p_1 p_2 p_3 \\ldots$ be an infinite sequence of random digits, selected from {0,1,2,3,4,5,6,7,8,9} with equal probability.\n\nIt can be seen that $p$ corresponds to the real number $0.p_1 p_2 p_3 \\ldots$.\n\nIt can also be seen that choosing a random real number from the interval [0,1) is equivalent to choosing an infinite sequence of random digits selected from {0,1,2,3,4,5,6,7,8,9} with equal probability.\n\nFor any positive integer $n$ with $d$ decimal digits, let $k$ be the smallest index such that $p_k, p_{k + 1}, \\ldots p_{k + d - 1}$ are the decimal digits of $n$, in the same order.\n\nAlso, let $g(n)$ be the expected value of $k$; it can be proven that $g(n)$ is always finite and, interestingly, always an integer number.\n\nFor example, if $n = 535$, then\n\nfor $p = 31415926\\mathbf{535}897\\ldots$, we get $k = 9$\n\nfor $p = 35528714365004956000049084876408468\\mathbf{535}4\\ldots$, we get $k = 36$\n\netc and we find that $g(535) = 1008$.\n\nGiven that $\\displaystyle\\sum_{n = 2}^{999} g\\left(\\left\\lfloor\\frac{{10}^6}{n}\\right\\rfloor\\right) = 27280188$, find $\\displaystyle\\sum_{n = 2}^{999\\\\,999} g\\left(\\left\\lfloor\\frac{{10}^{16}}{n}\\right\\rfloor\\right)$.\n\n**Note:** $\\lfloor x\\rfloor$ represents the floor function.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function numbersInDecimalExpansion() {\n\n  return true;\n}\n\nnumbersInDecimalExpansion();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`numbersInDecimalExpansion()` should return `542934735751917760`.",
          "testCode": "assert.strictEqual(numbersInDecimalExpansion(), 542934735751917760);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301972,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-316-numbers-in-decimal-expansions.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4aa1000cf542c50ffbc",
      "title": "Problem 317: Firecracker",
      "challengeType": 1,
      "dashedName": "problem-317-firecracker",
      "description": "A firecracker explodes at a height of 100 m above level ground. It breaks into a large number of very small fragments, which move in every direction; all of them have the same initial velocity of 20 $\\frac{\\text{m}}{\\text{s}}$.\n\nWe assume that the fragments move without air resistance, in a uniform gravitational field with $g=9.81 \\frac{\\text{m}}{\\text{s}^2}$.\n\nFind the volume (in $\\text{m}^3$) of the region through which the fragments move before reaching the ground. Give your answer rounded to four decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function firecracker() {\n\n  return true;\n}\n\nfirecracker();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`firecracker()` should return `1856532.8455`.",
          "testCode": "assert.strictEqual(firecracker(), 1856532.8455);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301973,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-317-firecracker.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ab1000cf542c50ffbd",
      "title": "Problem 318: 2011 nines",
      "challengeType": 1,
      "dashedName": "problem-318-2011-nines",
      "description": "Consider the real number $\\sqrt{2} + \\sqrt{3}$.\n\nWhen we calculate the even powers of $\\sqrt{2} + \\sqrt{3}$ we get:\n\n$$\\begin{align}\n  & {(\\sqrt{2} + \\sqrt{3})}^2 = 9.898979485566356\\ldots \\\\\\\\\n  & {(\\sqrt{2} + \\sqrt{3})}^4 = 97.98979485566356\\ldots \\\\\\\\\n  & {(\\sqrt{2} + \\sqrt{3})}^6 = 969.998969071069263\\ldots \\\\\\\\\n  & {(\\sqrt{2} + \\sqrt{3})}^8 = 9601.99989585502907\\ldots \\\\\\\\\n  & {(\\sqrt{2} + \\sqrt{3})}^{10} = 95049.999989479221\\ldots \\\\\\\\\n  & {(\\sqrt{2} + \\sqrt{3})}^{12} = 940897.9999989371855\\ldots \\\\\\\\\n  & {(\\sqrt{2} + \\sqrt{3})}^{14} = 9313929.99999989263\\ldots \\\\\\\\\n  & {(\\sqrt{2} + \\sqrt{3})}^{16} = 92198401.99999998915\\ldots \\\\\\\\\n\\end{align}$$\n\nIt looks like that the number of consecutive nines at the beginning of the fractional part of these powers is non-decreasing. In fact it can be proven that the fractional part of ${(\\sqrt{2} + \\sqrt{3})}^{2n}$ approaches 1 for large $n$.\n\nConsider all real numbers of the form $\\sqrt{p} + \\sqrt{q}$ with $p$ and $q$ positive integers and $p &lt; q$, such that the fractional part of ${(\\sqrt{p} + \\sqrt{q})}^{2n}$ approaches 1 for large $n$.\n\nLet $C(p,q,n)$ be the number of consecutive nines at the beginning of the fractional part of ${(\\sqrt{p} + \\sqrt{q})}^{2n}$.\n\nLet $N(p,q)$ be the minimal value of $n$ such that $C(p,q,n) ≥ 2011$.\n\nFind $\\sum N(p,q)$ for $p + q ≤ 2011$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function twoThousandElevenNines() {\n\n  return true;\n}\n\ntwoThousandElevenNines();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`twoThousandElevenNines()` should return `709313889`.",
          "testCode": "assert.strictEqual(twoThousandElevenNines(), 709313889);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301974,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-318-2011-nines.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ab1000cf542c50ffbe",
      "title": "Problem 319: Bounded Sequences",
      "challengeType": 1,
      "dashedName": "problem-319-bounded-sequences",
      "description": "Let $x_1, x_2, \\ldots, x_n$ be a sequence of length $n$ such that:\n\n- $x_1 = 2$\n- for all $1 &lt; i ≤ n : x_{i - 1} &lt; x_i$\n- for all $i$ and $j$ with $1 ≤ i, j ≤ n : {(x_i)}^j &lt; {(x_j + 1)}^i$\n\nThere are only five such sequences of length 2, namely: {2,4}, {2,5}, {2,6}, {2,7} and {2,8}. There are 293 such sequences of length 5; three examples are given below: {2,5,11,25,55}, {2,6,14,36,88}, {2,8,22,64,181}.\n\nLet $t(n)$ denote the number of such sequences of length $n$. You are given that $t(10) = 86195$ and $t(20) = 5227991891$.\n\nFind $t({10}^{10})$ and give your answer modulo $10^9$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function boundedSequences() {\n\n  return true;\n}\n\nboundedSequences();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`boundedSequences()` should return `268457129`.",
          "testCode": "assert.strictEqual(boundedSequences(), 268457129);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301975,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-319-bounded-sequences.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ae1000cf542c50ffbf",
      "title": "Problem 320: Factorials divisible by a huge integer",
      "challengeType": 1,
      "dashedName": "problem-320-factorials-divisible-by-a-huge-integer",
      "description": "Let $N(i)$ be the smallest integer $n$ such that $n!$ is divisible by $(i!)^{1234567890}$\n\nLet $S(u) = \\sum N(i)$ for $10 ≤ i ≤ u$.\n\n$S(1000)=614\\\\,538\\\\,266\\\\,565\\\\,663$.\n\nFind $S(1\\\\,000\\\\,000)\\bmod {10}^{18}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function divisibleByHugeInteger() {\n\n  return true;\n}\n\ndivisibleByHugeInteger();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`divisibleByHugeInteger()` should return `278157919195482660`.",
          "testCode": "assert.strictEqual(divisibleByHugeInteger(), 278157919195482660);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301977,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-320-factorials-divisible-by-a-huge-integer.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ae1000cf542c50ffc0",
      "title": "Problem 321: Swapping Counters",
      "challengeType": 1,
      "dashedName": "problem-321-swapping-counters",
      "description": "A horizontal row comprising of $2n + 1$ squares has $n$ red counters placed at one end and $n$ blue counters at the other end, being separated by a single empty square in the center. For example, when $n = 3$.\n\n<img alt=\"three squares with red and blue counters placed on opposite ends of the row, separated by one empty square\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/swapping-counters-1.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nA counter can move from one square to the next (slide) or can jump over another counter (hop) as long as the square next to that counter is unoccupied.\n\n<img alt=\"allowed moves of the counter\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/swapping-counters-2.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $M(n)$ represent the minimum number of moves/actions to completely reverse the positions of the colored counters; that is, move all the red counters to the right and all the blue counters to the left.\n\nIt can be verified $M(3) = 15$, which also happens to be a triangle number.\n\nIf we create a sequence based on the values of n for which $M(n)$ is a triangle number then the first five terms would be: 1, 3, 10, 22, and 63, and their sum would be 99.\n\nFind the sum of the first forty terms of this sequence.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function swappingCounters() {\n\n  return true;\n}\n\nswappingCounters();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`swappingCounters()` should return `2470433131948040`.",
          "testCode": "assert.strictEqual(swappingCounters(), 2470433131948040);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301978,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-321-swapping-counters.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4af1000cf542c50ffc1",
      "title": "Problem 322: Binomial coefficients divisible by 10",
      "challengeType": 1,
      "dashedName": "problem-322-binomial-coefficients-divisible-by-10",
      "description": "Let $T(m, n)$ be the number of the binomial coefficients ${}^iC_n$ that are divisible by 10 for $n ≤ i &lt; m$ ($i$, $m$ and $n$ are positive integers).\n\nYou are given that $T({10}^9, {10}^7 - 10) = 989\\\\,697\\\\,000$.\n\nFind $T({10}^{18}, {10}^{12} - 10)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function binomialCoefficientsDivisibleBy10() {\n\n  return true;\n}\n\nbinomialCoefficientsDivisibleBy10();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`binomialCoefficientsDivisibleBy10()` should return `999998760323314000`.",
          "testCode": "assert.strictEqual(binomialCoefficientsDivisibleBy10(), 999998760323314000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301979,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-322-binomial-coefficients-divisible-by-10.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b01000cf542c50ffc2",
      "title": "Problem 323: Bitwise-OR operations on random integers",
      "challengeType": 1,
      "dashedName": "problem-323-bitwise-or-operations-on-random-integers",
      "description": "Let $y_0, y_1, y_2, \\ldots$ be a sequence of random unsigned 32 bit integers (i.e. $0 ≤ y_i &lt; 2^{32}$, every value equally likely).\n\nFor the sequence $x_i$ the following recursion is given:\n\n- $x_0 = 0$ and\n- $x_i = x_{i - 1} \\mathbf{|} y_{i - 1}$, for $i > 0$. ($\\mathbf{|}$ is the bitwise-OR operator)\n\nIt can be seen that eventually there will be an index $N$ such that $x_i = 2^{32} - 1$ (a bit-pattern of all ones) for all $i ≥ N$.\n\nFind the expected value of $N$. Give your answer rounded to 10 digits after the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function bitwiseOrOnRandomIntegers() {\n\n  return true;\n}\n\nbitwiseOrOnRandomIntegers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`bitwiseOrOnRandomIntegers()` should return `6.3551758451`.",
          "testCode": "assert.strictEqual(bitwiseOrOnRandomIntegers(), 6.3551758451);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301980,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-323-bitwise-or-operations-on-random-integers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b11000cf542c50ffc3",
      "title": "Problem 324: Building a tower",
      "challengeType": 1,
      "dashedName": "problem-324-building-a-tower",
      "description": "Let $f(n)$ represent the number of ways one can fill a $3×3×n$ tower with blocks of $2×1×1$. You're allowed to rotate the blocks in any way you like; however, rotations, reflections etc of the tower itself are counted as distinct.\n\nFor example (with $q = 100\\\\,000\\\\,007$):\n\n$$\\begin{align}\n  & f(2) = 229, \\\\\\\\\n  & f(4) = 117\\\\,805, \\\\\\\\\n  & f(10)\\bmod q = 96\\\\,149\\\\,360, \\\\\\\\\n  & f({10}^3)\\bmod q = 24\\\\,806\\\\,056, \\\\\\\\\n  & f({10}^6)\\bmod q = 30\\\\,808\\\\,124.\n\\end{align}$$\n\nFind $f({10}^{10000})\\bmod 100\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function buildingTower() {\n\n  return true;\n}\n\nbuildingTower();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`buildingTower()` should return `96972774`.",
          "testCode": "assert.strictEqual(buildingTower(), 96972774);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301981,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-324-building-a-tower.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b11000cf542c50ffc4",
      "title": "Problem 325: Stone Game II",
      "challengeType": 1,
      "dashedName": "problem-325-stone-game-ii",
      "description": "A game is played with two piles of stones and two players. On each player's turn, the player may remove a number of stones from the larger pile. The number of stones removes must be a positive multiple of the number of stones in the smaller pile.\n\nE.g., let the ordered pair (6,14) describe a configuration with 6 stones in the smaller pile and 14 stones in the larger pile, then the first player can remove 6 or 12 stones from the larger pile.\n\nThe player taking all the stones from a pile wins the game.\n\nA winning configuration is one where the first player can force a win. For example, (1,5), (2,6) and (3,12) are winning configurations because the first player can immediately remove all stones in the second pile.\n\nA losing configuration is one where the second player can force a win, no matter what the first player does. For example, (2,3) and (3,4) are losing configurations: any legal move leaves a winning configuration for the second player.\n\nDefine $S(N)$ as the sum of ($x_i + y_i$) for all losing configurations ($x_i$, $y_i$), $0 &lt; x_i &lt; y_i ≤ N$. We can verify that $S(10) = 211$ and $S({10}^4) = 230\\\\,312\\\\,207\\\\,313$.\n\nFind $S({10}^{16})\\bmod 7^{10}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function stoneGameTwo() {\n\n  return true;\n}\n\nstoneGameTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`stoneGameTwo()` should return `54672965`.",
          "testCode": "assert.strictEqual(stoneGameTwo(), 54672965);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301982,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-325-stone-game-ii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b21000cf542c50ffc5",
      "title": "Problem 326: Modulo Summations",
      "challengeType": 1,
      "dashedName": "problem-326-modulo-summations",
      "description": "Let $a_n$ be a sequence recursively defined by: $a_1 = 1$, $\\displaystyle a_n = \\left(\\sum_{k = 1}^{n - 1} k \\times a_k\\right)\\bmod n$.\n\nSo the first 10 elements of $a_n$ are: 1, 1, 0, 3, 0, 3, 5, 4, 1, 9.\n\nLet $f(N, M)$ represent the number of pairs $(p, q)$ such that:\n\n$$ 1 \\le p \\le q \\le N \\\\; \\text{and} \\\\; \\left(\\sum_{i = p}^q a_i\\right)\\bmod M = 0$$\n\nIt can be seen that $f(10, 10) = 4$ with the pairs (3,3), (5,5), (7,9) and (9,10).\n\nYou are also given that $f({10}^4, {10}^3) = 97\\\\,158$.\n\nFind $f({10}^{12}, {10}^6)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function moduloSummations() {\n\n  return true;\n}\n\nmoduloSummations();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`moduloSummations()` should return `1966666166408794400`.",
          "testCode": "assert.strictEqual(moduloSummations(), 1966666166408794400);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301983,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-326-modulo-summations.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b31000cf542c50ffc6",
      "title": "Problem 327: Rooms of Doom",
      "challengeType": 1,
      "dashedName": "problem-327-rooms-of-doom",
      "description": "A series of three rooms are connected to each other by automatic doors.\n\n<img alt=\"series of three rooms, connected to each other by automatic doors\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/rooms-of-doom.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nEach door is operated by a security card. Once you enter a room, the door automatically closes, and that security card cannot be used again. A machine will dispense an unlimited number of cards at the start, but each room (including the starting room) contains scanners. If they detect that you are holding more than three security cards or if they detect an unattended security card on the floor, then all the doors will become permanently locked. However, each room contains a box where you may safely store any number of security cards for use at a later stage.\n\nIf you simply tried to travel through the rooms one at a time then as you entered room 3 you would have used all three cards and would be trapped in that room forever!\n\nHowever, if you make use of the storage boxes, then escape is possible. For example, you could enter room 1 using your first card, place one card in the storage box, and use your third card to exit the room back to the start. Then after collecting three more cards from the dispensing machine you could use one to enter room 1 and collect the card you placed in the box a moment ago. You now have three cards again and will be able to travel through the remaining three doors. This method allows you to travel through all three rooms using six security cards in total.\n\nIt is possible to travel through six rooms using a total of 123 security cards while carrying a maximum of 3 cards.\n\nLet $C$ be the maximum number of cards which can be carried at any time.\n\nLet $R$ be the number of rooms to travel through.\n\nLet $M(C, R)$ be the minimum number of cards required from the dispensing machine to travel through $R$ rooms carrying up to a maximum of $C$ cards at any time.\n\nFor example, $M(3, 6) = 123$ and $M(4, 6) = 23$.\n\nAnd, $\\sum M(C, 6) = 146$ for $3 ≤ C ≤ 4$.\n\nYou are given that $\\sum M(C, 10) = 10382$ for $3 ≤ C ≤ 10$.\n\nFind $\\sum M(C, 30)$ for $3 ≤ C ≤ 40$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function roomsOfDoom() {\n\n  return true;\n}\n\nroomsOfDoom();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`roomsOfDoom()` should return `34315549139516`.",
          "testCode": "assert.strictEqual(roomsOfDoom(), 34315549139516);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301984,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-327-rooms-of-doom.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b41000cf542c50ffc7",
      "title": "Problem 328: Lowest-cost Search",
      "challengeType": 1,
      "dashedName": "problem-328-lowest-cost-search",
      "description": "We are trying to find a hidden number selected from the set of integers {1, 2, ..., $n$} by asking questions. Each number (question) we ask, has a <u>cost equal to the number asked</u> and we get one of three possible answers:\n\n- \"Your guess is lower than the hidden number\", or\n- \"Yes, that's it!\", or\n- \"Your guess is higher than the hidden number\".\n\nGiven the value of $n$, an optimal strategy minimizes the total cost (i.e. the sum of all the questions asked) <u>for the worst possible case</u>. E.g.\n\nIf $n = 3$, the best we can do is obviously to ask the number \"<strong>2</strong>\". The answer will immediately lead us to find the hidden number (at a total cost = 2).\n\nIf $n = 8$, we might decide to use a \"binary search\" type of strategy: Our first question would be \"<strong>4</strong>\" and if the hidden number is higher than 4 we will need one or two additional questions. Let our second question be \"<strong>6</strong>\". If the hidden number is still higher than 6, we will need a third question in order to discriminate between 7 and 8. Thus, our third question will be \"<strong>7</strong>\" and the total cost for this worst-case scenario will be $4 + 6 + 7 = \\mathbf{\\color{red}{17}}$.\n\nWe can improve considerably the worst-case cost for $n = 8$, by asking \"<strong>5</strong>\" as our first question. If we are told that the hidden number is higher than 5, our second question will be \"<strong>7</strong>\", then we'll know for certain what the hidden number is (for a total cost of $5 + 7 = \\mathbf{\\color{blue}{12}}$). If we are told that the hidden number is lower than 5, our second question will be \"<strong>3</strong>\" and if the hidden number is lower than 3 our third question will be \"<strong>1</strong>\", giving a total cost of $5 + 3 + 1 = \\mathbf{\\color{blue}{9}}$. Since $\\mathbf{\\color{blue}{12 > 9}}$, the worst-case cost for this strategy is <strong><span style=\"color: red;\">12</span></strong>. That's better than what we achieved previously with the \"binary search\" strategy; it is also better than or equal to any other strategy. So, in fact, we have just described an optimal strategy for $n = 8$.\n\nLet $C(n)$ be the worst-case cost achieved by an optimal strategy for $n$, as described above. Thus $C(1) = 0$, $C(2) = 1$, $C(3) = 2$ and $C(8) = 12$.\n\nSimilarly, $C(100) = 400$ and $\\displaystyle\\sum_{n = 1}^{100} C(n) = 17575$.\n\nFind $\\displaystyle\\sum_{n = 1}^{200\\\\,000} C(n)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function lowestCostSearch() {\n\n  return true;\n}\n\nlowestCostSearch();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`lowestCostSearch()` should return `260511850222`.",
          "testCode": "assert.strictEqual(lowestCostSearch(), 260511850222);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301985,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-328-lowest-cost-search.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b51000cf542c50ffc8",
      "title": "Problem 329: Prime Frog",
      "challengeType": 1,
      "dashedName": "problem-329-prime-frog",
      "description": "Susan has a prime frog.\n\nHer frog is jumping around over 500 squares numbered 1 to 500.\n\nHe can only jump one square to the left or to the right, with equal probability, and he cannot jump outside the range [1;500]. (if it lands at either end, it automatically jumps to the only available square on the next move.)\n\nWhen he is on a square with a prime number on it, he croaks 'P' (PRIME) with probability $\\frac{2}{3}$ or 'N' (NOT PRIME) with probability $\\frac{1}{3}$ just before jumping to the next square. When he is on a square with a number on it that is not a prime he croaks 'P' with probability $\\frac{1}{3}$ or 'N' with probability $\\frac{2}{3}$ just before jumping to the next square.\n\nGiven that the frog's starting position is random with the same probability for every square, and given that she listens to his first 15 croaks, what is the probability that she hears the sequence PPPPNNPPPNPPNPN?\n\nGive your answer as a string as a fraction `p/q` in reduced form.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeFrog() {\n\n  return true;\n}\n\nprimeFrog();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeFrog()` should return a string.",
          "testCode": "asset.isString(primeFrog());"
        },
        {
          "text": "`primeFrog()` should return the string `199740353/29386561536000`.",
          "testCode": "assert.strictEqual(primeFrog(), '199740353/29386561536000');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301986,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-329-prime-frog.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b71000cf542c50ffc9",
      "title": "Problem 330: Euler''s Number",
      "challengeType": 1,
      "dashedName": "problem-330-eulers-number",
      "description": "An infinite sequence of real numbers $a(n)$ is defined for all integers $n$ as follows:\n\n$$ a(n) =\n\\begin{cases}\n1                                                       & n < 0 \\\\\\\\\n\\displaystyle \\sum_{i = 1}^{\\infty} \\frac{a(n - 1)}{i!} & n \\ge 0\n\\end{cases}\n$$\n\nFor example,\n\n$$\\begin{align}\n  & a(0) = \\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\ldots = e − 1 \\\\\\\\\n  & a(1) = \\frac{e − 1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\ldots = 2e − 3 \\\\\\\\\n  & a(2) = \\frac{2e − 3}{1!} + \\frac{e − 1}{2!} + \\frac{1}{3!} + \\ldots = \\frac{7}{2} e − 6\n\\end{align}$$\n\nwith $e = 2.7182818\\ldots$ being Euler's constant.\n\nIt can be shown that $a(n)$ is of the form $\\displaystyle\\frac{A(n)e + B(n)}{n!}$ for integers $A(n)$ and $B(n)$.\n\nFor example $\\displaystyle a(10) = \\frac{328161643e − 652694486}{10!}$.\n\nFind $A({10}^9)$ + $B({10}^9)$ and give your answer $\\bmod 77\\\\,777\\\\,777$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function eulersNumber() {\n\n  return true;\n}\n\neulersNumber();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`eulersNumber()` should return `15955822`.",
          "testCode": "assert.strictEqual(eulersNumber(), 15955822);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301988,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-330-eulers-number.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b71000cf542c50ffca",
      "title": "Problem 331: Cross flips",
      "challengeType": 1,
      "dashedName": "problem-331-cross-flips",
      "description": "N×N disks are placed on a square game board. Each disk has a black side and white side.\n\nAt each turn, you may choose a disk and flip all the disks in the same row and the same column as this disk: thus $2 × N - 1$ disks are flipped. The game ends when all disks show their white side. The following example shows a game on a 5×5 board.\n\n<img alt=\"animation showing game on 5x5 board\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/cross-flips.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIt can be proven that 3 is the minimal number of turns to finish this game.\n\nThe bottom left disk on the $N×N$ board has coordinates (0, 0); the bottom right disk has coordinates ($N - 1$,$0$) and the top left disk has coordinates ($0$,$N - 1$).\n\nLet $C_N$ be the following configuration of a board with $N × N$ disks: A disk at ($x$, $y$) satisfying $N - 1 \\le \\sqrt{x^2 + y^2} \\lt N$, shows its black side; otherwise, it shows its white side. $C_5$ is shown above.\n\nLet $T(N)$ be the minimal number of turns to finish a game starting from configuration $C_N$ or 0 if configuration $C_N$ is unsolvable. We have shown that $T(5) = 3$. You are also given that $T(10) = 29$ and $T(1\\\\,000) = 395\\\\,253$.\n\nFind $\\displaystyle \\sum_{i = 3}^{31} T(2^i - i)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function crossFlips() {\n\n  return true;\n}\n\ncrossFlips();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`crossFlips()` should return `467178235146843500`.",
          "testCode": "assert.strictEqual(crossFlips(), 467178235146843500);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301989,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-331-cross-flips.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b91000cf542c50ffcb",
      "title": "Problem 332: Spherical triangles",
      "challengeType": 1,
      "dashedName": "problem-332-spherical-triangles",
      "description": "A spherical triangle is a figure formed on the surface of a sphere by three great circular arcs intersecting pairwise in three vertices.\n\n<img alt=\"spherical triangle formed on the surface of a sphere\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/spherical-triangles.jpg\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $C(r)$ be the sphere with the center (0,0,0) and radius $r$.\n\nLet $Z(r)$ be the set of points on the surface of $C(r)$ with integer coordinates.\n\nLet $T(r)$ be the set of spherical triangles with vertices in $Z(r)$. Degenerate spherical triangles, formed by three points on the same great arc, are <u>not</u> included in $T(r)$.\n\nLet $A(r)$ be the area of the smallest spherical triangle in $T(r)$.\n\nFor example $A(14)$ is 3.294040 rounded to six decimal places.\n\nFind $\\displaystyle \\sum_{r = 1}^{50} A(r)$. Give your answer rounded to six decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sphericalTriangles() {\n\n  return true;\n}\n\nsphericalTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sphericalTriangles()` should return `2717.751525`.",
          "testCode": "assert.strictEqual(sphericalTriangles(), 2717.751525);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301990,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-332-spherical-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4b91000cf542c50ffcc",
      "title": "Problem 333: Special partitions",
      "challengeType": 1,
      "dashedName": "problem-333-special-partitions",
      "description": "All positive integers can be partitioned in such a way that each and every term of the partition can be expressed as $2^i \\times 3^j$, where $i, j ≥ 0$.\n\nLet's consider only those such partitions where none of the terms can divide any of the other terms. For example, the partition of $17 = 2 + 6 + 9 = (2^1 \\times 3^0 + 2^1 \\times 3^1 + 2^0 \\times 3^2)$ would not be valid since 2 can divide 6. Neither would the partition $17 = 16 + 1 = (2^4 \\times 3^0 + 2^0 \\times 3^0)$ since 1 can divide 16. The only valid partition of 17 would be $8 + 9 = (2^3 \\times 3^0 + 2^0 \\times 3^2)$.\n\nMany integers have more than one valid partition, the first being 11 having the following two partitions.\n\n$$\\begin{align}\n  & 11 = 2 + 9 = (2^1 \\times 3^0 + 2^0 \\times 3^2) \\\\\\\\\n  & 11 = 8 + 3 = (2^3 \\times 3^0 + 2^0 \\times 3^1)\n\\end{align}$$\n\nLet's define $P(n)$ as the number of valid partitions of $n$. For example, $P(11) = 2$.\n\nLet's consider only the prime integers $q$ which would have a single valid partition such as $P(17)$.\n\nThe sum of the primes $q &lt;100$ such that $P(q) = 1$ equals 233.\n\nFind the sum of the primes $q &lt; 1\\\\,000\\\\,000$ such that $P(q) = 1$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function specialPartitions() {\n\n  return true;\n}\n\nspecialPartitions();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`specialPartitions()` should return `3053105`.",
          "testCode": "assert.strictEqual(specialPartitions(), 3053105);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301991,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-333-special-partitions.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ba1000cf542c50ffcd",
      "title": "Problem 334: Spilling the beans",
      "challengeType": 1,
      "dashedName": "problem-334-spilling-the-beans",
      "description": "In Plato's heaven, there exist an infinite number of bowls in a straight line. Each bowl either contains some or none of a finite number of beans. A child plays a game, which allows only one kind of move: removing two beans from any bowl, and putting one in each of the two adjacent bowls. The game ends when each bowl contains either one or no beans.\n\nFor example, consider two adjacent bowls containing 2 and 3 beans respectively, all other bowls being empty. The following eight moves will finish the game:\n\n<img alt=\"animation of game when two adjacent bowls contain 2 and 3 beans respectively\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/spilling-the-beans.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nYou are given the following sequences:\n\n$$\\begin{align}\n  & t_0 = 123456, \\\\\\\\\n  & t_i = \\begin{cases}\n         \\frac{t_{i - 1}}{2},               & \\text{if $t_{i - 1}$ is even} \\\\\\\\\n         \\left\\lfloor\\frac{t_{i - 1}}{2}\\right\\rfloor \\oplus 926252, & \\text{if $t_{i - 1}$ is odd}\n         \\end{cases} \\\\\\\\\n         & \\qquad \\text{where $⌊x⌋$ is the floor function and $\\oplus$ is the bitwise XOR operator.} \\\\\\\\\n  & b_i = (t_i\\bmod 2^{11}) + 1.\n\\end{align}$$\n\nThe first two terms of the last sequence are $b_1 = 289$ and $b_2 = 145$. If we start with $b_1$ and $b_2$ beans in two adjacent bowls, 3419100 moves would be required to finish the game.\n\nConsider now 1500 adjacent bowls containing $b_1, b_2, \\ldots, b_{1500}$ beans respectively, all other bowls being empty. Find how many moves it takes before the game ends.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function spillingTheBeans() {\n\n  return true;\n}\n\nspillingTheBeans();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`spillingTheBeans()` should return `150320021261690850`.",
          "testCode": "assert.strictEqual(spillingTheBeans(), 150320021261690850);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301992,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-334-spilling-the-beans.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4bd1000cf542c50ffce",
      "title": "Problem 335: Gathering the beans",
      "challengeType": 1,
      "dashedName": "problem-335-gathering-the-beans",
      "description": "Whenever Peter feels bored, he places some bowls, containing one bean each, in a circle. After this, he takes all the beans out of a certain bowl and drops them one by one in the bowls going clockwise. He repeats this, starting from the bowl he dropped the last bean in, until the initial situation appears again. For example with 5 bowls he acts as follows:\n\n<img alt=\"animation of moving beans in 5 bowls\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/gathering-the-beans.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nSo with 5 bowls it takes Peter 15 moves to return to the initial situation.\n\nLet $M(x)$ represent the number of moves required to return to the initial situation, starting with $x$ bowls. Thus, $M(5) = 15$. It can also be verified that $M(100) = 10920$.\n\nFind $\\displaystyle\\sum_{k = 0}^{{10}^{18}} M(2^k + 1)$. Give your answer modulo $7^9$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function gatheringTheBeans() {\n\n  return true;\n}\n\ngatheringTheBeans();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`gatheringTheBeans()` should return `5032316`.",
          "testCode": "assert.strictEqual(gatheringTheBeans(), 5032316);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301993,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-335-gathering-the-beans.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4bd1000cf542c50ffcf",
      "title": "Problem 336: Maximix Arrangements",
      "challengeType": 1,
      "dashedName": "problem-336-maximix-arrangements",
      "description": "A train is used to transport four carriages in the order: $ABCD$. However, sometimes when the train arrives to collect the carriages they are not in the correct order.\n\nTo rearrange the carriages, they are all shunted onto a large rotating turntable. After the carriages are uncoupled at a specific point, the train moves off the turntable pulling the carriages still attached with it. The remaining carriages are rotated 180°. All of the carriages are then rejoined and this process is repeated as often as necessary in order to obtain the least number of uses of the turntable.\n\nSome arrangements, such as $ADCB$, can be solved easily: the carriages are separated between $A$ and $D$, and after $DCB$ are rotated the correct order has been achieved.\n\nHowever, Simple Simon, the train driver, is not known for his efficiency, so he always solves the problem by initially getting carriage $A$ in the correct place, then carriage $B$, and so on.\n\nUsing four carriages, the worst possible arrangements for Simon, which we shall call maximix arrangements, are $DACB$ and $DBAC$; each requiring him five rotations (although, using the most efficient approach, they could be solved using just three rotations). The process he uses for $DACB$ is shown below.\n\n<img alt=\"five rotations for maximix arrangement DACB\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/maximix-arrangements.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIt can be verified that there are 24 maximix arrangements for six carriages, of which the tenth lexicographic maximix arrangement is $DFAECB$.\n\nFind the ${2011}^{\\text{th}}$ lexicographic maximix arrangement for eleven carriages.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximixArrangements() {\n\n  return true;\n}\n\nmaximixArrangements();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`maximixArrangements()` should return a string.",
          "testCode": "asset.isString(maximixArrangements());"
        },
        {
          "text": "`maximixArrangements()` should return the string `CAGBIHEFJDK`.",
          "testCode": "assert.strictEqual(maximixArrangements(), 'CAGBIHEFJDK');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301994,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-336-maximix-arrangements.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4be1000cf542c50ffd0",
      "title": "Problem 337: Totient Stairstep Sequences",
      "challengeType": 1,
      "dashedName": "problem-337-totient-stairstep-sequences",
      "description": "Let $\\\\{a_1, a_2, \\ldots, a_n\\\\}$ be an integer sequence of length $n$ such that:\n\n- $a_1 = 6$\n- for all $1 ≤ i &lt; n$ : $φ(a_i) &lt; φ(a_{i + 1}) &lt; a_i &lt; a_{i + 1}$\n\n$φ$ denotes Euler's totient function.\n\nLet $S(N)$ be the number of such sequences with $a_n ≤ N$.\n\nFor example, $S(10) = 4$: {6}, {6, 8}, {6, 8, 9} and {6, 10}.\n\nWe can verify that $S(100) = 482\\\\,073\\\\,668$ and $S(10\\\\,000)\\bmod {10}^8 = 73\\\\,808\\\\,307$.\n\nFind $S(20\\\\,000\\\\,000)\\bmod {10}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function totientStairstepSequences() {\n\n  return true;\n}\n\ntotientStairstepSequences();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`totientStairstepSequences()` should return `85068035`.",
          "testCode": "assert.strictEqual(totientStairstepSequences(), 85068035);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301995,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-337-totient-stairstep-sequences.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4be1000cf542c50ffd1",
      "title": "Problem 338: Cutting Rectangular Grid Paper",
      "challengeType": 1,
      "dashedName": "problem-338-cutting-rectangular-grid-paper",
      "description": "A rectangular sheet of grid paper with integer dimensions $w$ × $h$ is given. Its grid spacing is 1.\n\nWhen we cut the sheet along the grid lines into two pieces and rearrange those pieces without overlap, we can make new rectangles with different dimensions.\n\nFor example, from a sheet with dimensions 9 × 4, we can make rectangles with dimensions 18 × 2, 12 × 3 and 6 × 6 by cutting and rearranging as below:\n\n<img alt=\"sheet with 9 x 4 dimensions cut in three different ways to make rectangles with 18 x 2, 12 x 3 and 6 x 6 dimensions\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/cutting-rectangular-grid-paper.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nSimilarly, from a sheet with dimensions 9 × 8, we can make rectangles with dimensions 18 × 4 and 12 × 6.\n\nFor a pair $w$ and $h$, let $F(w, h)$ be the number of distinct rectangles that can be made from a sheet with dimensions $w$ × $h$. For example, $F(2, 1) = 0$, $F(2, 2) = 1$, $F(9, 4) = 3$ and $F(9, 8) = 2$. Note that rectangles congruent to the initial one are not counted in $F(w, h)$. Note also that rectangles with dimensions $w$ × $h$ and dimensions $h$ × $w$ are not considered distinct.\n\nFor an integer $N$, let $G(N)$ be the sum of $F(w, h)$ for all pairs $w$ and $h$ which satisfy $0 &lt; h ≤ w ≤ N$. We can verify that $G(10) = 55$, $G({10}^3) = 971\\\\,745$ and $G({10}^5) = 9\\\\,992\\\\,617\\\\,687$.\n\nFind $G({10}^{12})$. Give your answer modulo ${10}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cuttingRectangularGridPaper() {\n\n  return true;\n}\n\ncuttingRectangularGridPaper();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`cuttingRectangularGridPaper()` should return `15614292`.",
          "testCode": "assert.strictEqual(cuttingRectangularGridPaper(), 15614292);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301996,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-338-cutting-rectangular-grid-paper.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c01000cf542c50ffd2",
      "title": "Problem 339: Peredur fab Efrawg",
      "challengeType": 1,
      "dashedName": "problem-339-peredur-fab-efrawg",
      "description": "\"And he came towards a valley, through which ran a river; and the borders of the valley were wooded, and on each side of the river were level meadows. And on one side of the river he saw a flock of white sheep, and on the other a flock of black sheep. And whenever one of the white sheep bleated, one of the black sheep would cross over and become white; and when one of the black sheep bleated, one of the white sheep would cross over and become black.\" - Peredur the Son of Evrawc\n\nInitially, each flock consists of $n$ sheep. Each sheep (regardless of color) is equally likely to be the next sheep to bleat. After a sheep has bleated and a sheep from the other flock has crossed over, Peredur may remove a number of white sheep in order to maximize the expected final number of black sheep. Let $E(n)$ be the expected final number of black sheep if Peredur uses an optimal strategy.\n\nYou are given that $E(5) = 6.871346$ rounded to 6 places behind the decimal point.\n\nFind $E(10\\\\,000)$ and give your answer rounded to 6 places behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function peredurFabEfrawg() {\n\n  return true;\n}\n\nperedurFabEfrawg();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`peredurFabEfrawg()` should return `19823.542204`.",
          "testCode": "assert.strictEqual(peredurFabEfrawg(), 19823.542204);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301997,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-339-peredur-fab-efrawg.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c21000cf542c50ffd4",
      "title": "Problem 340: Crazy Function",
      "challengeType": 1,
      "dashedName": "problem-340-crazy-function",
      "description": "For fixed integers $a$, $b$, $c$, define the crazy function $F(n)$ as follows:\n\n$$\\begin{align}\n  & F(n) = n - c \\\\;\\text{ for all } n > b \\\\\\\\\n  & F(n) = F(a + F(a + F(a + F(a + n)))) \\\\;\\text{ for all } n ≤ b.\n\\end{align}$$\n\nAlso, define $S(a, b, c) = \\displaystyle\\sum_{n = 0}^b F(n)$.\n\nFor example, if $a = 50$, $b = 2000$ and $c = 40$, then $F(0) = 3240$ and $F(2000) = 2040$. Also, $S(50, 2000, 40) = 5\\\\,204\\\\,240$.\n\nFind the last 9 digits of $S({21}^7, 7^{21}, {12}^7)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function crazyFunction() {\n\n  return true;\n}\n\ncrazyFunction();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`crazyFunction()` should return `291504964`.",
          "testCode": "assert.strictEqual(crazyFunction(), 291504964);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301999,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-340-crazy-function.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c11000cf542c50ffd3",
      "title": "Problem 341: Golomb''s self-describing sequence",
      "challengeType": 1,
      "dashedName": "problem-341-golombs-self-describing-sequence",
      "description": "The Golomb's self-describing sequence ($G(n)$) is the only nondecreasing sequence of natural numbers such that $n$ appears exactly $G(n)$ times in the sequence. The values of $G(n)$ for the first few $n$ are\n\n$$\\begin{array}{c}\n  n    & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & 13 & 14 & 15 & \\ldots \\\\\\\\\n  G(n) & 1 & 2 & 2 & 3 & 3 & 4 & 4 & 4 & 5 & 5  &  5 &  6 &  6 &  6 &  6 & \\ldots\n\\end{array}$$\n\nYou are given that $G({10}^3) = 86$, $G({10}^6) = 6137$.\n\nYou are also given that $\\sum G(n^3) = 153\\\\,506\\\\,976$ for $1 ≤ n &lt; {10}^3$.\n\nFind $\\sum G(n^3)$ for $1 ≤ n &lt; {10}^6$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function golombsSequence() {\n\n  return true;\n}\n\ngolombsSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`golombsSequence()` should return `56098610614277016`.",
          "testCode": "assert.strictEqual(golombsSequence(), 56098610614277016);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302000,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-341-golombs-self-describing-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c31000cf542c50ffd5",
      "title": "Problem 342: The totient of a square is a cube",
      "challengeType": 1,
      "dashedName": "problem-342-the-totient-of-a-square-is-a-cube",
      "description": "Consider the number 50.\n\n${50}^2 = 2500 = 2^2 × 5^4$, so $φ(2500) = 2 × 4 × 5^3 = 8 × 5^3 = 2^3 × 5^3$. $φ$ denotes Euler's totient function.\n\nSo 2500 is a square and $φ(2500)$ is a cube.\n\nFind the sum of all numbers $n$, $1 &lt; n &lt; {10}^{10}$ such that $φ(n^2)$ is a cube.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function totientOfSquare() {\n\n  return true;\n}\n\ntotientOfSquare();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`totientOfSquare()` should return `5943040885644`.",
          "testCode": "assert.strictEqual(totientOfSquare(), 5943040885644);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302001,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-342-the-totient-of-a-square-is-a-cube.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c41000cf542c50ffd6",
      "title": "Problem 343: Fractional Sequences",
      "challengeType": 1,
      "dashedName": "problem-343-fractional-sequences",
      "description": "For any positive integer $k$, a finite sequence $a_i$ of fractions $\\frac{x_i}{y_i}$ is defined by:\n\n- $a_1 = \\displaystyle\\frac{1}{k}$ and\n- $a_i = \\displaystyle\\frac{(x_{i - 1} + 1)}{(y_{i - 1} - 1)}$ reduced to lowest terms for $i > 1$.\n\nWhen $a_i$ reaches some integer $n$, the sequence stops. (That is, when $y_i = 1$.)\n\nDefine $f(k) = n$.\n\nFor example, for $k = 20$:\n\n$$\\frac{1}{20} → \\frac{2}{19} → \\frac{3}{18} = \\frac{1}{6} → \\frac{2}{5} → \\frac{3}{4} → \\frac{4}{3} → \\frac{5}{2} → \\frac{6}{1} = 6$$\n\nSo $f(20) = 6$.\n\nAlso $f(1) = 1$, $f(2) = 2$, $f(3) = 1$ and $\\sum f(k^3) = 118\\\\,937$ for $1 ≤ k ≤ 100$.\n\nFind $\\sum f(k^3)$ for $1 ≤ k ≤ 2 × {10}^6$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function fractionalSequences() {\n\n  return true;\n}\n\nfractionalSequences();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`fractionalSequences()` should return `269533451410884200`.",
          "testCode": "assert.strictEqual(fractionalSequences(), 269533451410884200);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302002,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-343-fractional-sequences.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c51000cf542c50ffd7",
      "title": "Problem 344: Silver dollar game",
      "challengeType": 1,
      "dashedName": "problem-344-silver-dollar-game",
      "description": "One variant of N.G. de Bruijn's silver dollar game can be described as follows:\n\nOn a strip of squares a number of coins are placed, at most one coin per square. Only one coin, called the silver dollar, has any value. Two players take turns making moves. At each turn a player must make either a regular or a special move.\n\nA regular move consists of selecting one coin and moving it one or more squares to the left. The coin cannot move out of the strip or jump on or over another coin.\n\nAlternatively, the player can choose to make the special move of pocketing the leftmost coin rather than making a regular move. If no regular moves are possible, the player is forced to pocket the leftmost coin.\n\nThe winner is the player who pockets the silver dollar.\n\n<img alt=\"silver dollar game\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/silver-dollar-game.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nA winning configuration is an arrangement of coins on the strip where the first player can force a win no matter what the second player does.\n\nLet $W(n, c)$ be the number of winning configurations for a strip of $n$ squares, $c$ worthless coins and one silver dollar.\n\nYou are given that $W(10, 2) = 324$ and $W(100, 10) = 1\\\\,514\\\\,704\\\\,946\\\\,113\\\\,500$.\n\nFind $W(1\\\\,000\\\\,000, 100)$ modulo the semiprime $1000\\\\,036\\\\,000\\\\,099 (= 1\\\\,000\\\\,003 \\times 1\\\\,000\\\\,033)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function silverDollarGame() {\n\n  return true;\n}\n\nsilverDollarGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`silverDollarGame()` should return `65579304332`.",
          "testCode": "assert.strictEqual(silverDollarGame(), 65579304332);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302003,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-344-silver-dollar-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c81000cf542c50ffda",
      "title": "Problem 345: Matrix Sum",
      "challengeType": 1,
      "dashedName": "problem-345-matrix-sum",
      "description": "We define the Matrix Sum of a matrix as the maximum sum of matrix elements with each element being the only one in his row and column.\n\nFor example, the Matrix Sum of the matrix below equals $3315 ( = 863 + 383 + 343 + 959 + 767)$:\n\n$$\\begin{array}{rrrrr}\n    7                &  53                & 183                & 439                & \\color{lime}{863} \\\\\\\\\n  497                & \\color{lime}{383} & 563                &  79                & 973 \\\\\\\\\n  287                &  63                & \\color{lime}{343} & 169                & 583 \\\\\\\\\n  627                & 343                & 773                & \\color{lime}{959} & 943 \\\\\\\\\n  \\color{lime}{767} & 473                & 103                & 699                & 303\n\\end{array}$$\n\nFind the Matrix Sum of:\n\n$$\\\\begin{array}{r}\n    7 &  53 & 183 & 439 & 863 & 497 & 383 & 563 &  79 & 973 & 287 &  63 & 343 & 169 & 583 \\\\\\\\\n  627 & 343 & 773 & 959 & 943 & 767 & 473 & 103 & 699 & 303 & 957 & 703 & 583 & 639 & 913 \\\\\\\\\n  447 & 283 & 463 &  29 &  23 & 487 & 463 & 993 & 119 & 883 & 327 & 493 & 423 & 159 & 743 \\\\\\\\\n  217 & 623 &   3 & 399 & 853 & 407 & 103 & 983 &  89 & 463 & 290 & 516 & 212 & 462 & 350 \\\\\\\\\n  960 & 376 & 682 & 962 & 300 & 780 & 486 & 502 & 912 & 800 & 250 & 346 & 172 & 812 & 350 \\\\\\\\\n  870 & 456 & 192 & 162 & 593 & 473 & 915 &  45 & 989 & 873 & 823 & 965 & 425 & 329 & 803 \\\\\\\\\n  973 & 965 & 905 & 919 & 133 & 673 & 665 & 235 & 509 & 613 & 673 & 815 & 165 & 992 & 326 \\\\\\\\\n  322 & 148 & 972 & 962 & 286 & 255 & 941 & 541 & 265 & 323 & 925 & 281 & 601 &  95 & 973 \\\\\\\\\n  445 & 721 &  11 & 525 & 473 &  65 & 511 & 164 & 138 & 672 &  18 & 428 & 154 & 448 & 848 \\\\\\\\\n  414 & 456 & 310 & 312 & 798 & 104 & 566 & 520 & 302 & 248 & 694 & 976 & 430 & 392 & 198 \\\\\\\\\n  184 & 829 & 373 & 181 & 631 & 101 & 969 & 613 & 840 & 740 & 778 & 458 & 284 & 760 & 390 \\\\\\\\\n  821 & 461 & 843 & 513 &  17 & 901 & 711 & 993 & 293 & 157 & 274 &  94 & 192 & 156 & 574 \\\\\\\\\n   34 & 124 &   4 & 878 & 450 & 476 & 712 & 914 & 838 & 669 & 875 & 299 & 823 & 329 & 699 \\\\\\\\\n  815 & 559 & 813 & 459 & 522 & 788 & 168 & 586 & 966 & 232 & 308 & 833 & 251 & 631 & 107 \\\\\\\\\n  813 & 883 & 451 & 509 & 615 &  77 & 281 & 613 & 459 & 205 & 380 & 274 & 302 &  35 & 805\n\\end{array}$$",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function matrixSum() {\n\n  return true;\n}\n\nmatrixSum();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`matrixSum()` should return `13938`.",
          "testCode": "assert.strictEqual(matrixSum(), 13938);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302004,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-345-matrix-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c71000cf542c50ffd8",
      "title": "Problem 346: Strong Repunits",
      "challengeType": 1,
      "dashedName": "problem-346-strong-repunits",
      "description": "The number 7 is special, because 7 is 111 written in base 2, and 11 written in base 6 (i.e. $7_{10} = {11}_6 = {111}_2$). In other words, 7 is a repunit in at least two bases $b > 1$.\n\nWe shall call a positive integer with this property a strong repunit. It can be verified that there are 8 strong repunits below 50: {1, 7, 13, 15, 21, 31, 40, 43}. Furthermore, the sum of all strong repunits below 1000 equals 15864.\n\nFind the sum of all strong repunits below ${10}^{12}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function strongRepunits() {\n\n  return true;\n}\n\nstrongRepunits();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`strongRepunits()` should return `336108797689259260`.",
          "testCode": "assert.strictEqual(strongRepunits(), 336108797689259260);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302005,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-346-strong-repunits.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c81000cf542c50ffd9",
      "title": "Problem 347: Largest integer divisible by two primes",
      "challengeType": 1,
      "dashedName": "problem-347-largest-integer-divisible-by-two-primes",
      "description": "The largest integer $≤ 100$ that is only divisible by both the primes 2 and 3 is 96, as $96 = 32 \\times 3 = 2^5 \\times 3$.\n\nFor two distinct primes $p$ and $q$ let $M(p, q, N)$ be the largest positive integer $≤ N$ only divisible by both $p$ and $q$ and $M(p, q, N)=0$ if such a positive integer does not exist.\n\nE.g. $M(2, 3, 100) = 96$.\n\n$M(3, 5, 100) = 75$ and not 90 because 90 is divisible by 2, 3 and 5. Also $M(2, 73, 100) = 0$ because there does not exist a positive integer $≤ 100$ that is divisible by both 2 and 73.\n\nLet $S(N)$ be the sum of all distinct $M(p, q, N)$. $S(100)=2262$.\n\nFind $S(10\\\\,000\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function integerDivisibleByTwoPrimes() {\n\n  return true;\n}\n\nintegerDivisibleByTwoPrimes();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`integerDivisibleByTwoPrimes()` should return `11109800204052`.",
          "testCode": "assert.strictEqual(integerDivisibleByTwoPrimes(), 11109800204052);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302006,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-347-largest-integer-divisible-by-two-primes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4c81000cf542c50ffdb",
      "title": "Problem 348: Sum of a square and a cube",
      "challengeType": 1,
      "dashedName": "problem-348-sum-of-a-square-and-a-cube",
      "description": "Many numbers can be expressed as the sum of a square and a cube. Some of them in more than one way.\n\nConsider the palindromic numbers that can be expressed as the sum of a square and a cube, both greater than 1, in exactly 4 different ways.\n\nFor example, 5229225 is a palindromic number and it can be expressed in exactly 4 different ways:\n\n$$\\begin{align}\n  & {2285}^2 + {20}^3 \\\\\\\\\n  & {2223}^2 + {66}^3 \\\\\\\\\n  & {1810}^2 + {125}^3 \\\\\\\\\n  & {1197}^2 + {156}^3\n\\end{align}$$\n\nFind the sum of the five smallest such palindromic numbers.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumOfSquareAndCube() {\n\n  return true;\n}\n\nsumOfSquareAndCube();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumOfSquareAndCube()` should return `1004195061`.",
          "testCode": "assert.strictEqual(sumOfSquareAndCube(), 1004195061);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302007,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-348-sum-of-a-square-and-a-cube.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ca1000cf542c50ffdc",
      "title": "Problem 349: Langton''s ant",
      "challengeType": 1,
      "dashedName": "problem-349-langtons-ant",
      "description": "An ant moves on a regular grid of squares that are colored either black or white.\n\nThe ant is always oriented in one of the cardinal directions (left, right, up or down) and moves from square to adjacent square according to the following rules:\n\n- if it is on a black square, it flips the color of the square to white, rotates 90° counterclockwise and moves forward one square.\n- if it is on a white square, it flips the color of the square to black, rotates 90° clockwise and moves forward one square.\n\nStarting with a grid that is entirely white, how many squares are black after ${10}^{18}$ moves of the ant?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function langtonsAnt() {\n\n  return true;\n}\n\nlangtonsAnt();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`langtonsAnt()` should return `115384615384614940`.",
          "testCode": "assert.strictEqual(langtonsAnt(), 115384615384614940);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302008,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-349-langtons-ant.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4cb1000cf542c50ffdd",
      "title": "Problem 350: Constraining the least greatest and the greatest least",
      "challengeType": 1,
      "dashedName": "problem-350-constraining-the-least-greatest-and-the-greatest-least",
      "description": "A list of size $n$ is a sequence of $n$ natural numbers. Examples are (2, 4, 6), (2, 6, 4), (10, 6, 15, 6), and (11).\n\nThe greatest common divisor, or $gcd$, of a list is the largest natural number that divides all entries of the list. Examples: $gcd(2, 6, 4) = 2$, $gcd(10, 6, 15, 6) = 1$ and $gcd(11) = 11$.\n\nThe least common multiple, or $lcm$, of a list is the smallest natural number divisible by each entry of the list. Examples: $lcm(2, 6, 4) = 12$, $lcm(10, 6, 15, 6) = 30$ and $lcm(11) = 11$.\n\nLet $f(G, L, N)$ be the number of lists of size $N$ with $gcd ≥ G$ and $lcm ≤ L$. For example:\n\n$$\\begin{align}\n  & f(10, 100, 1) = 91 \\\\\\\\\n  & f(10, 100, 2) = 327 \\\\\\\\\n  & f(10, 100, 3) = 1135 \\\\\\\\\n  & f(10, 100, 1000)\\bmod {101}^4 = 3\\\\,286\\\\,053\n\\end{align}$$\n\nFind $f({10}^6, {10}^{12}, {10}^{18})\\bmod {101}^4$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function leastGreatestAndGreatestLeast() {\n\n  return true;\n}\n\nleastGreatestAndGreatestLeast();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`leastGreatestAndGreatestLeast()` should return `84664213`.",
          "testCode": "assert.strictEqual(leastGreatestAndGreatestLeast(), 84664213);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302010,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-350-constraining-the-least-greatest-and-the-greatest-least.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4cb1000cf542c50ffde",
      "title": "Problem 351: Hexagonal orchards",
      "challengeType": 1,
      "dashedName": "problem-351-hexagonal-orchards",
      "description": "A hexagonal orchard of order $n$ is a triangular lattice made up of points within a regular hexagon with side $n$. The following is an example of a hexagonal orchard of order 5:\n\n<img alt=\"hexagonal orchard of order 5, with highlighted in green points, which are hidden from the center by a point closer to it\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/hexagonal-orchards.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHighlighted in green are the points which are hidden from the center by a point closer to it. It can be seen that for a hexagonal orchard of order 5, 30 points are hidden from the center.\n\nLet $H(n)$ be the number of points hidden from the center in a hexagonal orchard of order $n$.\n\n$H(5) = 30$. $H(10) = 138$. $H(1\\\\,000)$ = $1\\\\,177\\\\,848$.\n\nFind $H(100\\\\,000\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hexagonalOrchards() {\n\n  return true;\n}\n\nhexagonalOrchards();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`hexagonalOrchards()` should return `11762187201804552`.",
          "testCode": "assert.strictEqual(hexagonalOrchards(), 11762187201804552);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302011,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-351-hexagonal-orchards.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4cd1000cf542c50ffdf",
      "title": "Problem 352: Blood tests",
      "challengeType": 1,
      "dashedName": "problem-352-blood-tests",
      "description": "Each one of the 25 sheep in a flock must be tested for a rare virus, known to affect 2% of the sheep population.\n\nAn accurate and extremely sensitive PCR test exists for blood samples, producing a clear positive / negative result, but it is very time-consuming and expensive.\n\nBecause of the high cost, the vet-in-charge suggests that instead of performing 25 separate tests, the following procedure can be used instead:\n\nThe sheep are split into 5 groups of 5 sheep in each group. For each group, the 5 samples are mixed together and a single test is performed. Then,\n\n- If the result is negative, all the sheep in that group are deemed to be virus-free.\n- If the result is positive, 5 additional tests will be performed (a separate test for each animal) to determine the affected individual(s).\n\nSince the probability of infection for any specific animal is only 0.02, the first test (on the pooled samples) for each group will be:\n\n- Negative (and no more tests needed) with probability ${0.98}^5 = 0.9039207968$.\n- Positive (5 additional tests needed) with probability $1 - 0.9039207968 = 0.0960792032$.\n\nThus, the expected number of tests for each group is $1 + 0.0960792032 × 5 = 1.480396016$.\n\nConsequently, all 5 groups can be screened using an average of only $1.480396016 × 5 = \\mathbf{7.40198008}$ tests, which represents a huge saving of more than 70%!\n\nAlthough the scheme we have just described seems to be very efficient, it can still be improved considerably (always assuming that the test is sufficiently sensitive and no adverse effects are caused by mixing different samples). E.g.:\n\n- We may start by running a test on a mixture of all the 25 samples. It can be verified that in about 60.35% of the cases this test will be negative, thus no more tests will be needed. Further testing will only be required for the remaining 39.65% of the cases.\n- If we know that at least one animal in a group of 5 is infected and the first 4 individual tests come out negative, there is no need to run a test on the fifth animal (we know that it must be infected).\n- We can try a different number of groups / different number of animals in each group, adjusting those numbers at each level so that the total expected number of tests will be minimised.\n\nTo simplify the very wide range of possibilities, there is one restriction we place when devising the most cost-efficient testing scheme: whenever we start with a mixed sample, all the sheep contributing to that sample must be fully screened (i.e. a verdict of infected / virus-free must be reached for all of them) before we start examining any other animals.\n\nFor the current example, it turns out that the most cost-efficient testing scheme (we'll call it the optimal strategy) requires an average of just <strong>4.155452</strong> tests!\n\nUsing the optimal strategy, let $T(s, p)$ represent the average number of tests needed to screen a flock of $s$ sheep for a virus having probability $p$ to be present in any individual. Thus, rounded to six decimal places, $T(25, 0.02) = 4.155452$ and $T(25, 0.10) = 12.702124$.\n\nFind $\\sum T(10\\\\,000, p)$ for $p = 0.01, 0.02, 0.03, \\ldots 0.50$. Give your answer rounded to six decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function bloodTests() {\n\n  return true;\n}\n\nbloodTests();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`bloodTests()` should return `378563.260589`.",
          "testCode": "assert.strictEqual(bloodTests(), 378563.260589);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302012,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-352-blood-tests.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4cd1000cf542c50ffe0",
      "title": "Problem 353: Risky moon",
      "challengeType": 1,
      "dashedName": "problem-353-risky-moon",
      "description": "A moon could be described by the sphere $C(r)$ with center (0, 0, 0) and radius $r$.\n\nThere are stations on the moon at the points on the surface of $C(r)$ with integer coordinates. The station at (0, 0, $r$) is called North Pole station, the station at (0, 0, $-r$) is called South Pole station.\n\nAll stations are connected with each other via the shortest road on the great arc through the stations. A journey between two stations is risky. If $d$ is the length of the road between two stations, $\\{\\left(\\frac{d}{πr}\\right)}^2$ is a measure for the risk of the journey (let us call it the risk of the road). If the journey includes more than two stations, the risk of the journey is the sum of risks of the used roads.\n\nA direct journey from the North Pole station to the South Pole station has the length $πr$ and risk 1. The journey from the North Pole station to the South Pole station via (0, $r$, 0) has the same length, but a smaller risk:\n\n$${\\left(\\frac{\\frac{1}{2}πr}{πr}\\right)}^2+{\\left(\\frac{\\frac{1}{2}πr}{πr}\\right)}^2 = 0.5$$\n\nThe minimal risk of a journey from the North Pole station to the South Pole station on $C(r)$ is $M(r)$.\n\nYou are given that $M(7) = 0.178\\\\,494\\\\,399\\\\,8$ rounded to 10 digits behind the decimal point.\n\nFind $\\displaystyle\\sum_{n = 1}^{15} M(2^n - 1)$.\n\nGive your answer rounded to 10 digits behind the decimal point in the form a.bcdefghijk.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function riskyMoon() {\n\n  return true;\n}\n\nriskyMoon();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`riskyMoon()` should return `1.2759860331`.",
          "testCode": "assert.strictEqual(riskyMoon(), 1.2759860331);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302013,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-353-risky-moon.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4cf1000cf542c50ffe1",
      "title": "Problem 354: Distances in a bee''s honeycomb",
      "challengeType": 1,
      "dashedName": "problem-354-distances-in-a-bees-honeycomb",
      "description": "Consider a honey bee's honeycomb where each cell is a perfect regular hexagon with side length 1.\n\n<img alt=\"honeycomb with hexagon sides of length 1\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/distances-in-a-bees-honeycomb.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nOne particular cell is occupied by the queen bee. For a positive real number $L$, let $B(L)$ count the cells with distance $L$ from the queen bee cell (all distances are measured from center to center); you may assume that the honeycomb is large enough to accommodate for any distance we wish to consider.\n\nFor example, $B(\\sqrt{3}) = 6$, $B(\\sqrt{21}) = 12$ and $B(111\\\\,111\\\\,111) = 54$.\n\nFind the number of $L ≤ 5 \\times {10}^{11}$ such that $B(L) = 450$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function distancesInHoneycomb() {\n\n  return true;\n}\n\ndistancesInHoneycomb();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`distancesInHoneycomb()` should return `58065134`.",
          "testCode": "assert.strictEqual(distancesInHoneycomb(), 58065134);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302014,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-354-distances-in-a-bees-honeycomb.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d01000cf542c50ffe2",
      "title": "Problem 355: Maximal coprime subset",
      "challengeType": 1,
      "dashedName": "problem-355-maximal-coprime-subset",
      "description": "Define $Co(n)$ to be the maximal possible sum of a set of mutually co-prime elements from $\\\\{1, 2, \\ldots, n\\\\}$. For example $Co(10)$ is 30 and hits that maximum on the subset $\\\\{1, 5, 7, 8, 9\\\\}$.\n\nYou are given that $Co(30) = 193$ and $Co(100) = 1356$.\n\nFind $Co(200\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximalCoprimeSubset() {\n\n  return true;\n}\n\nmaximalCoprimeSubset();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`maximalCoprimeSubset()` should return `1726545007`.",
          "testCode": "assert.strictEqual(maximalCoprimeSubset(), 1726545007);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302015,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-355-maximal-coprime-subset.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d01000cf542c50ffe3",
      "title": "Problem 356: Largest roots of cubic polynomials",
      "challengeType": 1,
      "dashedName": "problem-356-largest-roots-of-cubic-polynomials",
      "description": "Let $a_n$ be the largest real root of a polynomial $g(x) = x^3 - 2^n \\times x^2 + n$.\n\nFor example, $a_2 = 3.86619826\\ldots$\n\nFind the last eight digits of $\\displaystyle\\sum_{i = 1}^{30} \\lfloor {a_i}^{987654321}\\rfloor$.\n\n**Note:** $\\lfloor a\\rfloor$ represents the floor function.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rootsOfCubicPolynomials() {\n\n  return true;\n}\n\nrootsOfCubicPolynomials();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`rootsOfCubicPolynomials()` should return `28010159`.",
          "testCode": "assert.strictEqual(rootsOfCubicPolynomials(), 28010159);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302016,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-356-largest-roots-of-cubic-polynomials.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d11000cf542c50ffe4",
      "title": "Problem 357: Prime generating integers",
      "challengeType": 1,
      "dashedName": "problem-357-prime-generating-integers",
      "description": "Consider the divisors of 30: 1, 2, 3, 5, 6, 10, 15, 30.\n\nIt can be seen that for every divisor $d$ of 30, $d + \\frac{30}{d}$ is prime.\n\nFind the sum of all positive integers $n$ not exceeding $100\\\\,000\\\\,000$ such that for every divisor $d$ of $n$, $d + \\frac{n}{d}$ is prime.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeGeneratingIntegers() {\n\n  return true;\n}\n\nprimeGeneratingIntegers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeGeneratingIntegers()` should return `1739023853137`.",
          "testCode": "assert.strictEqual(primeGeneratingIntegers(), 1739023853137);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302017,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-357-prime-generating-integers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d21000cf542c50ffe5",
      "title": "Problem 358: Cyclic numbers",
      "challengeType": 1,
      "dashedName": "problem-358-cyclic-numbers",
      "description": "A cyclic number with $n$ digits has a very interesting property:\n\nWhen it is multiplied by 1, 2, 3, 4, ... $n$, all the products have exactly the same digits, in the same order, but rotated in a circular fashion!\n\nThe smallest cyclic number is the 6-digit number 142857:\n\n$$\\begin{align}\n  & 142857 × 1 = 142857 \\\\\\\\\n  & 142857 × 2 = 285714 \\\\\\\\\n  & 142857 × 3 = 428571 \\\\\\\\\n  & 142857 × 4 = 571428 \\\\\\\\\n  & 142857 × 5 = 714285 \\\\\\\\\n  & 142857 × 6 = 857142\n\\end{align}$$\n\nThe next cyclic number is 0588235294117647 with 16 digits:\n\n$$\\begin{align}\n  & 0588235294117647 × 1 = 0588235294117647 \\\\\\\\\n  & 0588235294117647 × 2 = 1176470588235294 \\\\\\\\\n  & 0588235294117647 × 3 = 1764705882352941 \\\\\\\\\n  & \\ldots \\\\\\\\\n  & 0588235294117647 × 16 = 9411764705882352\n\\end{align}$$\n\nNote that for cyclic numbers, leading zeros are important.\n\nThere is only one cyclic number for which, the eleven leftmost digits are 00000000137 and the five rightmost digits are 56789 (i.e., it has the form $00000000137\\ldots56789$ with an unknown number of digits in the middle). Find the sum of all its digits.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cyclicNumbers() {\n\n  return true;\n}\n\ncyclicNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`cyclicNumbers()` should return `3284144505`.",
          "testCode": "assert.strictEqual(cyclicNumbers(), 3284144505);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302018,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-358-cyclic-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d31000cf542c50ffe6",
      "title": "Problem 359: Hilbert''s New Hotel",
      "challengeType": 1,
      "dashedName": "problem-359-hilberts-new-hotel",
      "description": "An infinite number of people (numbered 1, 2, 3, etc.) are lined up to get a room at Hilbert's newest infinite hotel. The hotel contains an infinite number of floors (numbered 1, 2, 3, etc.), and each floor contains an infinite number of rooms (numbered 1, 2, 3, etc.).\n\nInitially the hotel is empty. Hilbert declares a rule on how the $n^{\\text{th}}$ person is assigned a room: person $n$ gets the first vacant room in the lowest numbered floor satisfying either of the following:\n\n- the floor is empty\n- the floor is not empty, and if the latest person taking a room in that floor is person $m$, then $m + n$ is a perfect square\n\nPerson 1 gets room 1 in floor 1 since floor 1 is empty.\n\nPerson 2 does not get room 2 in floor 1 since 1 + 2 = 3 is not a perfect square.\n\nPerson 2 instead gets room 1 in floor 2 since floor 2 is empty.\n\nPerson 3 gets room 2 in floor 1 since 1 + 3 = 4 is a perfect square.\n\nEventually, every person in the line gets a room in the hotel.\n\nDefine $P(f, r)$ to be $n$ if person $n$ occupies room $r$ in floor $f$, and 0 if no person occupies the room. Here are a few examples:\n\n$$\\begin{align}\n  & P(1, 1) = 1 \\\\\\\\\n  & P(1, 2) = 3 \\\\\\\\\n  & P(2, 1) = 2 \\\\\\\\\n  & P(10, 20) = 440 \\\\\\\\\n  & P(25, 75) = 4863 \\\\\\\\\n  & P(99, 100) = 19454\n\\end{align}$$\n\nFind the sum of all $P(f, r)$ for all positive $f$ and $r$ such that $f × r = 71\\\\,328\\\\,803\\\\,586\\\\,048$ and give the last 8 digits as your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hilbertsNewHotel() {\n\n  return true;\n}\n\nhilbertsNewHotel();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`hilbertsNewHotel()` should return `40632119`.",
          "testCode": "assert.strictEqual(hilbertsNewHotel(), 40632119);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302019,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-359-hilberts-new-hotel.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d41000cf542c50ffe7",
      "title": "Problem 360: Scary Sphere",
      "challengeType": 1,
      "dashedName": "problem-360-scary-sphere",
      "description": "Given two points ($x_1$, $y_1$, $z_1$) and ($x_2$, $y_2$, $z_2$) in three dimensional space, the Manhattan distance between those points is defined as $|x_1 - x_2| + |y_1 - y_2| + |z_1 - z_2|$.\n\nLet $C(r)$ be a sphere with radius $r$ and center in the origin $O(0, 0, 0)$.\n\nLet $I(r)$ be the set of all points with integer coordinates on the surface of $C(r)$.\n\nLet $S(r)$ be the sum of the Manhattan distances of all elements of $I(r)$ to the origin $O$.\n\nE.g. $S(45)=34518$.\n\nFind $S({10}^{10})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function scarySphere() {\n\n  return true;\n}\n\nscarySphere();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`scarySphere()` should return `878825614395267100`.",
          "testCode": "assert.strictEqual(scarySphere(), 878825614395267100);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302021,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-360-scary-sphere.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d51000cf542c50ffe8",
      "title": "Problem 361: Subsequence of Thue-Morse sequence",
      "challengeType": 1,
      "dashedName": "problem-361-subsequence-of-thue-morse-sequence",
      "description": "The Thue-Morse sequence $\\\\{T_n\\\\}$ is a binary sequence satisfying:\n\n- $T_0 = 0$\n- $T_{2n} = T_n$\n- $T_{2n + 1} = 1 - T_n$\n\nThe first several terms of $\\\\{T_n\\\\}$ are given as follows: $01101001\\color{red}{10010}1101001011001101001\\ldots$.\n\nWe define $\\\\{A_n\\\\}$ as the sorted sequence of integers such that the binary expression of each element appears as a subsequence in $\\\\{T_n\\\\}$. For example, the decimal number 18 is expressed as 10010 in binary. 10010 appears in $\\\\{T_n\\\\}$ ($T_8$ to $T_{12}$), so 18 is an element of $\\\\{A_n\\\\}$. The decimal number 14 is expressed as 1110 in binary. 1110 never appears in $\\\\{T_n\\\\}$, so 14 is not an element of $\\\\{A_n\\\\}$.\n\nThe first several terms of $A_n$ are given as follows:\n\n$$\\begin{array}{cr}\n  n   & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 &  8 &  9 & 10 & 11 & 12 & \\ldots \\\\\\\\\n  A_n & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 9 & 10 & 11 & 12 & 13 & 18 & \\ldots\n\\end{array}$$\n\nWe can also verify that $A_{100} = 3251$ and $A_{1000} = 80\\\\,852\\\\,364\\\\,498$.\n\nFind the last 9 digits of $\\displaystyle\\sum_{k = 1}^{18} A_{{10}^k}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function subsequenceOfThueMorseSequence() {\n\n  return true;\n}\n\nsubsequenceOfThueMorseSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`subsequenceOfThueMorseSequence()` should return `178476944`.",
          "testCode": "assert.strictEqual(subsequenceOfThueMorseSequence(), 178476944);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302022,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-361-subsequence-of-thue-morse-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d61000cf542c50ffe9",
      "title": "Problem 362: Squarefree factors",
      "challengeType": 1,
      "dashedName": "problem-362-squarefree-factors",
      "description": "Consider the number 54.\n\n54 can be factored in 7 distinct ways into one or more factors larger than 1:\n\n$$54, 2 × 27, 3 × 18, 6 × 9, 3 × 3 × 6, 2 × 3 × 9 \\text{ and } 2 × 3 × 3 × 3$$\n\nIf we require that the factors are all squarefree only two ways remain: $3 × 3 × 6$ and $2 × 3 × 3 × 3$.\n\nLet's call $Fsf(n)$ the number of ways $n$ can be factored into one or more squarefree factors larger than 1, so $Fsf(54) = 2$.\n\nLet $S(n)$ be $\\sum Fsf(k)$ for $k = 2$ to $n$.\n\n$S(100) = 193$.\n\nFind $S(10\\\\,000\\\\,000\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squarefreeFactors() {\n\n  return true;\n}\n\nsquarefreeFactors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`squarefreeFactors()` should return `457895958010`.",
          "testCode": "assert.strictEqual(squarefreeFactors(), 457895958010);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302023,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-362-squarefree-factors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d91000cf542c50ffeb",
      "title": "Problem 363: Bézier Curves",
      "challengeType": 1,
      "dashedName": "problem-363-bzier-curves",
      "description": "A cubic Bézier curve is defined by four points: $P_0$, $P_1$, $P_2$ and $P_3$.\n\nThe curve is constructed as follows:\n\n<img alt=\"construction of Bézier curve\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/bzier-curves.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nOn the segments $P_0P_1$, $P_1P_2$ and $P_2P_3$ the points $Q_0$,$Q_1$ and $Q_2$ are drawn such that $\\frac{P_0Q_0}{P_0P_1} = \\frac{P_1Q_1}{P_1P_2} = \\frac{P_2Q_2}{P_2P_3} = t$, with $t$ in [0,1].\n\nOn the segments $Q_0Q_1$ and $Q_1Q_2$ the points $R_0$ and $R_1$ are drawn such that $\\frac{Q_0R_0}{Q_0Q_1} = \\frac{Q_1R_1}{Q_1Q_2} = t$ for the same value of $t$.\n\nOn the segment $R_0R_1$ the point $B$ is drawn such that $\\frac{R_0B}{R_0R_1} = t$ for the same value of $t$.\n\nThe Bézier curve defined by the points $P_0$, $P_1$, $P_2$, $P_3$ is the locus of $B$ as $Q_0$ takes all possible positions on the segment $P_0P_1$. (Please note that for all points the value of $t$ is the same.)\n\nFrom the construction it is clear that the Bézier curve will be tangent to the segments $P_0P_1$ in $P_0$ and $P_2P_3$ in $P_3$.\n\nA cubic Bézier curve with $P_0 = (1, 0)$, $P_1 = (1, v)$, $P_2 = (v, 1)$ and $P_3 = (0, 1)$ is used to approximate a quarter circle. The value $v > 0$ is chosen such that the area enclosed by the lines $OP_0$, $OP_3$ and the curve is equal to $\\frac{π}{4}$ (the area of the quarter circle).\n\nBy how many percent does the length of the curve differ from the length of the quarter circle? That is, if $L$ is the length of the curve, calculate $100 × \\displaystyle\\frac{L − \\frac{π}{2}}{\\frac{π}{2}}$. Give your answer rounded to 10 digits behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function bezierCurves() {\n\n  return true;\n}\n\nbezierCurves();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`bezierCurves()` should return `0.0000372091`.",
          "testCode": "assert.strictEqual(bezierCurves(), 0.0000372091);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302024,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-363-bzier-curves.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4d91000cf542c50ffea",
      "title": "Problem 364: Comfortable distance",
      "challengeType": 1,
      "dashedName": "problem-364-comfortable-distance",
      "description": "There are $N$ seats in a row. $N$ people come after each other to fill the seats according to the following rules:\n\n1. If there is any seat whose adjacent seat(s) are not occupied take such a seat.\n2. If there is no such seat and there is any seat for which only one adjacent seat is occupied take such a seat.\n3. Otherwise take one of the remaining available seats.\n\nLet $T(N)$ be the number of possibilities that $N$ seats are occupied by $N$ people with the given rules. The following figure shows $T(4) = 8$.\n\n<img alt=\"eight ways for N seats to be occupied by N people\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/comfortable-distance.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWe can verify that $T(10) = 61\\\\,632$ and $T(1\\\\,000)\\bmod 100\\\\,000\\\\,007 = 47\\\\,255\\\\,094$.\n\nFind $T(1\\\\,000\\\\,000)\\bmod 100\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function comfortableDistance() {\n\n  return true;\n}\n\ncomfortableDistance();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`comfortableDistance()` should return `44855254`.",
          "testCode": "assert.strictEqual(comfortableDistance(), 44855254);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302025,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-364-comfortable-distance.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4da1000cf542c50ffec",
      "title": "Problem 365: A huge binomial coefficient",
      "challengeType": 1,
      "dashedName": "problem-365-a-huge-binomial-coefficient",
      "description": "The binomial coefficient $\\displaystyle\\binom{{10}^{18}}{{10}^9}$ is a number with more than 9 billion ($9 × {10}^9$) digits.\n\nLet $M(n, k, m)$ denote the binomial coefficient $\\displaystyle\\binom{n}{k}$ modulo $m$.\n\nCalculate $\\sum M({10}^{18}, {10}^9, p \\times q \\times r)$ for $1000 &lt; p &lt; q &lt; r &lt; 5000$ and $p$, $q$, $r$ prime.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hugeBinomialCoefficient() {\n\n  return true;\n}\n\nhugeBinomialCoefficient();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`hugeBinomialCoefficient()` should return `162619462356610300`.",
          "testCode": "assert.strictEqual(hugeBinomialCoefficient(), 162619462356610300);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302026,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-365-a-huge-binomial-coefficient.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4da1000cf542c50ffed",
      "title": "Problem 366: Stone Game III",
      "challengeType": 1,
      "dashedName": "problem-366-stone-game-iii",
      "description": "Two players, Anton and Bernhard, are playing the following game.\n\nThere is one pile of $n$ stones.\n\nThe first player may remove any positive number of stones, but not the whole pile.\n\nThereafter, each player may remove at most twice the number of stones his opponent took on the previous move.\n\nThe player who removes the last stone wins.\n\nE.g. $n = 5$\n\nIf the first player takes anything more than one stone the next player will be able to take all remaining stones.\n\nIf the first player takes one stone, leaving four, his opponent will take also one stone, leaving three stones.\n\nThe first player cannot take all three because he may take at most $2 \\times 1 = 2$ stones. So let's say he also takes one stone, leaving 2.\n\nThe second player can take the two remaining stones and wins.\n\nSo 5 is a losing position for the first player.\n\nFor some winning positions there is more than one possible move for the first player.\n\nE.g. when $n = 17$ the first player can remove one or four stones.\n\nLet $M(n)$ be the maximum number of stones the first player can take from a winning position at his first turn and $M(n) = 0$ for any other position.\n\n$\\sum M(n)$ for $n ≤ 100$ is 728.\n\nFind $\\sum M(n)$ for $n ≤ {10}^{18}$. Give your answer modulo ${10}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function stoneGameThree() {\n\n  return true;\n}\n\nstoneGameThree();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`stoneGameThree()` should return `88351299`.",
          "testCode": "assert.strictEqual(stoneGameThree(), 88351299);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302027,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-366-stone-game-iii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4db1000cf542c50ffee",
      "title": "Problem 367: Bozo sort",
      "challengeType": 1,
      "dashedName": "problem-367-bozo-sort",
      "description": "Bozo sort, not to be confused with the slightly less efficient bogo sort, consists out of checking if the input sequence is sorted and if not swapping randomly two elements. This is repeated until eventually the sequence is sorted.\n\nIf we consider all permutations of the first 4 natural numbers as input the expectation value of the number of swaps, averaged over all $4!$ input sequences is $24.75$.\n\nThe already sorted sequence takes 0 steps.\n\nIn this problem we consider the following variant on bozo sort.\n\nIf the sequence is not in order we pick three elements at random and shuffle these three elements randomly.\n\nAll $3! = 6$ permutations of those three elements are equally likely.\n\nThe already sorted sequence will take 0 steps.\n\nIf we consider all permutations of the first 4 natural numbers as input the expectation value of the number of shuffles, averaged over all $4!$ input sequences is $27.5$.\n\nConsider as input sequences the permutations of the first 11 natural numbers.\n\nAveraged over all $11!$ input sequences, what is the expected number of shuffles this sorting algorithm will perform? Give your answer rounded to the nearest integer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function bozoSort() {\n\n  return true;\n}\n\nbozoSort();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`bozoSort()` should return `48271207`.",
          "testCode": "assert.strictEqual(bozoSort(), 48271207);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302028,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-367-bozo-sort.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4dd1000cf542c50ffef",
      "title": "Problem 368: A Kempner-like series",
      "challengeType": 1,
      "dashedName": "problem-368-a-kempner-like-series",
      "description": "The harmonic series $1 + \\dfrac{1}{2} + \\dfrac{1}{3} + \\dfrac{1}{4} + \\ldots$ is well known to be divergent.\n\nIf we however omit from this series every term where the denominator has a 9 in it, the series remarkably enough converges to approximately 22.9206766193. This modified harmonic series is called the Kempner series.\n\nLet us now consider another modified harmonic series by omitting from the harmonic series every term where the denominator has 3 or more equal consecutive digits. One can verify that out of the first 1200 terms of the harmonic series, only 20 terms will be omitted.\n\nThese 20 omitted terms are:\n\n$$\\dfrac{1}{111}, \\dfrac{1}{222}, \\dfrac{1}{333}, \\dfrac{1}{444}, \\dfrac{1}{555}, \\dfrac{1}{666}, \\dfrac{1}{777}, \\dfrac{1}{888}, \\dfrac{1}{999}, \\dfrac{1}{1000}, \\dfrac{1}{1110}, \\\\\\\\\n\\dfrac{1}{1111}, \\dfrac{1}{1112}, \\dfrac{1}{1113}, \\dfrac{1}{1114}, \\dfrac{1}{1115}, \\dfrac{1}{1116}, \\dfrac{1}{1117}, \\dfrac{1}{1118}, \\dfrac{1}{1119}$$\n\nThis series converges as well.\n\nFind the value the series converges to. Give your answer rounded to 10 digits behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function kempnerLikeSeries() {\n\n  return true;\n}\n\nkempnerLikeSeries();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`kempnerLikeSeries()` should return `253.6135092068`.",
          "testCode": "assert.strictEqual(kempnerLikeSeries(), 253.6135092068);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302029,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-368-a-kempner-like-series.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4de1000cf542c50fff0",
      "title": "Problem 369: Badugi",
      "challengeType": 1,
      "dashedName": "problem-369-badugi",
      "description": "In a standard 52 card deck of playing cards, a set of 4 cards is a Badugi if it contains 4 cards with no pairs and no two cards of the same suit.\n\nLet $f(n)$ be the number of ways to choose $n$ cards with a 4 card subset that is a Badugi. For example, there are $2\\\\,598\\\\,960$ ways to choose five cards from a standard 52 card deck, of which $514\\\\,800$ contain a 4 card subset that is a Badugi, so $f(5) = 514800$.\n\nFind $\\sum f(n)$ for $4 ≤ n ≤ 13$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function badugi() {\n\n  return true;\n}\n\nbadugi();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`badugi()` should return `862400558448`.",
          "testCode": "assert.strictEqual(badugi(), 862400558448);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302030,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-369-badugi.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4de1000cf542c50fff1",
      "title": "Problem 370: Geometric triangles",
      "challengeType": 1,
      "dashedName": "problem-370-geometric-triangles",
      "description": "Let us define a geometric triangle as an integer sided triangle with sides $a ≤ b ≤ c$ so that its sides form a geometric progression, i.e. $b^2 = a \\times c$.\n\nAn example of such a geometric triangle is the triangle with sides $a = 144$, $b = 156$ and $c = 169$.\n\nThere are $861\\\\,805$ geometric triangles with $\\text{perimeter} ≤ {10}^6$.\n\nHow many geometric triangles exist with $\\text{perimeter} ≤ 2.5 \\times {10}^{13}$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function geometricTriangles() {\n\n  return true;\n}\n\ngeometricTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`geometricTriangles()` should return `41791929448408`.",
          "testCode": "assert.strictEqual(geometricTriangles(), 41791929448408);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302032,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-370-geometric-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e01000cf542c50fff2",
      "title": "Problem 371: License plates",
      "challengeType": 1,
      "dashedName": "problem-371-licence-plates",
      "description": "Oregon license plates consist of three letters followed by a three digit number (each digit can be from [0...9]).\n\nWhile driving to work Seth plays the following game:\n\nWhenever the numbers of two license plates seen on his trip add to 1000 that's a win.\n\nE.g. `MIC-012` and `HAN-988` is a win and `RYU-500` and `SET-500` too (as long as he sees them in the same trip).\n\nFind the expected number of plates he needs to see for a win. Give your answer rounded to 8 decimal places behind the decimal point.\n\n**Note:** We assume that each license plate seen is equally likely to have any three digit number on it.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function licensePlates() {\n\n  return true;\n}\n\nlicensePlates();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`licensePlates()` should return `40.66368097`.",
          "testCode": "assert.strictEqual(licensePlates(), 40.66368097);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302033,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-371-licence-plates.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e11000cf542c50fff3",
      "title": "Problem 372: Pencils of rays",
      "challengeType": 1,
      "dashedName": "problem-372-pencils-of-rays",
      "description": "Let $R(M, N)$ be the number of lattice points ($x$, $y$) which satisfy $M \\lt x \\le N$, $M \\lt y \\le N$ and $\\left\\lfloor\\frac{y^2}{x^2}\\right\\rfloor$ is odd.\n\nWe can verify that $R(0, 100) = 3\\\\,019$ and $R(100, 10\\\\,000) = 29\\\\,750\\\\,422$.\n\nFind $R(2 \\times {10}^6, {10}^9)$.\n\n**Note:** $\\lfloor x\\rfloor$ represents the floor function.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pencilsOfRays() {\n\n  return true;\n}\n\npencilsOfRays();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pencilsOfRays()` should return `301450082318807040`.",
          "testCode": "assert.strictEqual(pencilsOfRays(), 301450082318807040);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302034,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-372-pencils-of-rays.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e11000cf542c50fff4",
      "title": "Problem 373: Circumscribed Circles",
      "challengeType": 1,
      "dashedName": "problem-373-circumscribed-circles",
      "description": "Every triangle has a circumscribed circle that goes through the three vertices. Consider all integer sided triangles for which the radius of the circumscribed circle is integral as well.\n\nLet $S(n)$ be the sum of the radii of the circumscribed circles of all such triangles for which the radius does not exceed $n$.\n\n$S(100) = 4\\\\,950$ and $S(1\\\\,200) = 1\\\\,653\\\\,605$.\n\nFind $S({10}^7)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function circumscribedCircles() {\n\n  return true;\n}\n\ncircumscribedCircles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`circumscribedCircles()` should return `727227472448913`.",
          "testCode": "assert.strictEqual(circumscribedCircles(), 727227472448913);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302035,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-373-circumscribed-circles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e51000cf542c50fff6",
      "title": "Problem 374: Maximum Integer Partition Product",
      "challengeType": 1,
      "dashedName": "problem-374-maximum-integer-partition-product",
      "description": "An integer partition of a number $n$ is a way of writing $n$ as a sum of positive integers.\n\nPartitions that differ only in the order of their summands are considered the same. A partition of $n$ into distinct parts is a partition of $n$ in which every part occurs at most once.\n\nThe partitions of 5 into distinct parts are:\n\n5, 4 + 1 and 3 + 2.\n\nLet $f(n)$ be the maximum product of the parts of any such partition of $n$ into distinct parts and let $m(n)$ be the number of elements of any such partition of $n$ with that product.\n\nSo $f(5) = 6$ and $m(5) = 2$.\n\nFor $n = 10$ the partition with the largest product is $10 = 2 + 3 + 5$, which gives $f(10) = 30$ and $m(10) = 3$. And their product, $f(10) \\times m(10) = 30 \\times 3 = 90$\n\nIt can be verified that $\\sum f(n) \\times m(n)$ for $1 ≤ n ≤ 100 = 1\\\\,683\\\\,550\\\\,844\\\\,462$.\n\nFind $\\sum f(n) \\times m(n)$ for $1 ≤ n ≤ {10}^{14}$. Give your answer modulo $982\\\\,451\\\\,653$, the 50 millionth prime.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximumIntegerPartitionProduct() {\n\n  return true;\n}\n\nmaximumIntegerPartitionProduct();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`maximumIntegerPartitionProduct()` should return `334420941`.",
          "testCode": "assert.strictEqual(maximumIntegerPartitionProduct(), 334420941);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302036,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-374-maximum-integer-partition-product.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e41000cf542c50fff5",
      "title": "Problem 375: Minimum of subsequences",
      "challengeType": 1,
      "dashedName": "problem-375-minimum-of-subsequences",
      "description": "Let $S_n$ be an integer sequence produced with the following pseudo-random number generator:\n\n$$\\begin{align}\n        S_0 & = 290\\\\,797 \\\\\\\\\n  S_{n + 1} & = {S_n}^2\\bmod 50\\\\,515\\\\,093\n\\end{align}$$\n\nLet $A(i, j)$ be the minimum of the numbers $S_i, S_{i + 1}, \\ldots, S_j$ for $i ≤ j$. Let $M(N) = \\sum A(i, j)$ for $1 ≤ i ≤ j ≤ N$.\n\nWe can verify that $M(10) = 432\\\\,256\\\\,955$ and $M(10\\\\,000) = 3\\\\,264\\\\,567\\\\,774\\\\,119$.\n\nFind $M(2\\\\,000\\\\,000\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function minimumOfSubsequences() {\n\n  return true;\n}\n\nminimumOfSubsequences();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`minimumOfSubsequences()` should return `7435327983715286000`.",
          "testCode": "assert.strictEqual(minimumOfSubsequences(), 7435327983715286000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302037,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-375-minimum-of-subsequences.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e51000cf542c50fff7",
      "title": "Problem 376: Nontransitive sets of dice",
      "challengeType": 1,
      "dashedName": "problem-376-nontransitive-sets-of-dice",
      "description": "Consider the following set of dice with nonstandard pips:\n\n$$\\begin{array}{}\n  \\text{Die A: } & 1 & 4 & 4 & 4 & 4 & 4 \\\\\\\\\n  \\text{Die B: } & 2 & 2 & 2 & 5 & 5 & 5 \\\\\\\\\n  \\text{Die C: } & 3 & 3 & 3 & 3 & 3 & 6 \\\\\\\\\n\\end{array}$$\n\nA game is played by two players picking a die in turn and rolling it. The player who rolls the highest value wins.\n\nIf the first player picks die $A$ and the second player picks die $B$ we get\n\n$P(\\text{second player wins}) = \\frac{7}{12} > \\frac{1}{2}$\n\nIf the first player picks die $B$ and the second player picks die $C$ we get\n\n$P(\\text{second player wins}) = \\frac{7}{12} > \\frac{1}{2}$\n\nIf the first player picks die $C$ and the second player picks die $A$ we get\n\n$P(\\text{second player wins}) = \\frac{25}{36} > \\frac{1}{2}$\n\nSo whatever die the first player picks, the second player can pick another die and have a larger than 50% chance of winning. A set of dice having this property is called a nontransitive set of dice.\n\nWe wish to investigate how many sets of nontransitive dice exist. We will assume the following conditions:\n\n- There are three six-sided dice with each side having between 1 and $N$ pips, inclusive.\n- Dice with the same set of pips are equal, regardless of which side on the die the pips are located.\n- The same pip value may appear on multiple dice; if both players roll the same value neither player wins.\n- The sets of dice $\\\\{A, B, C\\\\}$, $\\\\{B, C, A\\\\}$ and $\\\\{C, A, B\\\\}$ are the same set.\n\nFor $N = 7$ we find there are 9780 such sets.\n\nHow many are there for $N = 30$?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nontransitiveSetsOfDice() {\n\n  return true;\n}\n\nnontransitiveSetsOfDice();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`nontransitiveSetsOfDice()` should return `973059630185670`.",
          "testCode": "assert.strictEqual(nontransitiveSetsOfDice(), 973059630185670);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302038,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-376-nontransitive-sets-of-dice.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e51000cf542c50fff8",
      "title": "Problem 377: Sum of digits, experience 13",
      "challengeType": 1,
      "dashedName": "problem-377-sum-of-digits-experience-13",
      "description": "There are 16 positive integers that do not have a zero in their digits and that have a digital sum equal to 5, namely:\n\n5, 14, 23, 32, 41, 113, 122, 131, 212, 221, 311, 1112, 1121, 1211, 2111 and 11111.\n\nTheir sum is 17891.\n\nLet $f(n)$ be the sum of all positive integers that do not have a zero in their digits and have a digital sum equal to $n$.\n\nFind $\\displaystyle\\sum_{i=1}^{17} f(13^i)$. Give the last 9 digits as your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function experience13() {\n\n  return true;\n}\n\nexperience13();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`experience13()` should return `732385277`.",
          "testCode": "assert.strictEqual(experience13(), 732385277);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302039,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-377-sum-of-digits-experience-13.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e61000cf542c50fff9",
      "title": "Problem 378: Triangle Triples",
      "challengeType": 1,
      "dashedName": "problem-378-triangle-triples",
      "description": "Let $T(n)$ be the $n^{\\text{th}}$ triangle number, so $T(n) = \\frac{n(n + 1)}{2}$.\n\nLet $dT(n)$ be the number of divisors of $T(n)$. E.g.: $T(7) = 28$ and $dT(7) = 6$.\n\nLet $Tr(n)$ be the number of triples ($i$, $j$, $k$) such that $1 ≤ i &lt; j &lt; k ≤ n$ and $dT(i) > dT(j) > dT(k)$. $Tr(20) = 14$, $Tr(100) = 5\\\\,772$ and $Tr(1000) = 11\\\\,174\\\\,776$.\n\nFind $Tr(60\\\\,000\\\\,000)$. Give the last 18 digits of your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function triangleTriples() {\n\n  return true;\n}\n\ntriangleTriples();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`triangleTriples()` should return `147534623725724700`.",
          "testCode": "assert.strictEqual(triangleTriples(), 147534623725724700);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302040,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-378-triangle-triples.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e81000cf542c50fffa",
      "title": "Problem 379: Least common multiple count",
      "challengeType": 1,
      "dashedName": "problem-379-least-common-multiple-count",
      "description": "Let $f(n)$ be the number of couples ($x$, $y$) with $x$ and $y$ positive integers, $x ≤ y$ and the least common multiple of $x$ and $y$ equal to $n$.\n\nLet $g$ be the summatory function of $f$, i.e.: $g(n) = \\sum f(i)$ for $1 ≤ i ≤ n$.\n\nYou are given that $g({10}^6) = 37\\\\,429\\\\,395$.\n\nFind $g({10}^{12})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function leastCommonMultipleCount() {\n\n  return true;\n}\n\nleastCommonMultipleCount();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`leastCommonMultipleCount()` should return `132314136838185`.",
          "testCode": "assert.strictEqual(leastCommonMultipleCount(), 132314136838185);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302041,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-379-least-common-multiple-count.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4e81000cf542c50fffb",
      "title": "Problem 380: Amazing Mazes!",
      "challengeType": 1,
      "dashedName": "problem-380-amazing-mazes",
      "description": "An $m×n$ maze is an $m×n$ rectangular grid with walls placed between grid cells such that there is exactly one path from the top-left square to any other square. The following are examples of a 9×12 maze and a 15×20 maze:\n\n<img alt=\"9x12 maze and 15x20 maze\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/amazing-mazes.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $C(m, n)$ be the number of distinct $m×n$ mazes. Mazes which can be formed by rotation and reflection from another maze are considered distinct.\n\nIt can be verified that $C(1, 1) = 1$, $C(2, 2) = 4$, $C(3, 4) = 2415$, and $C(9, 12) = 2.5720\\mathrm{e}\\\\,46$ (in scientific notation rounded to 5 significant digits).\n\nFind $C(100, 500)$ and write your answer as a string in scientific notation rounded to 5 significant digits.\n\nWhen giving your answer, use a lowercase e to separate mantissa and exponent. E.g. if the answer is 1234567891011 then the answer format would be the string `1.2346e12`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function amazingMazes() {\n\n  return true;\n}\n\namazingMazes();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`amazingMazes()` should return a string.",
          "testCode": "asset.isString(amazingMazes());"
        },
        {
          "text": "`amazingMazes()` should return the string `6.3202e25093`.",
          "testCode": "assert.strictEqual(amazingMazes(), '6.3202e25093');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302044,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-380-amazing-mazes.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ea1000cf542c50fffc",
      "title": "Problem 381: (prime-k) factorial",
      "challengeType": 1,
      "dashedName": "problem-381-prime-k-factorial",
      "description": "For a prime $p$ let $S(p) = (\\sum (p - k)!)\\bmod (p)$ for $1 ≤ k ≤ 5$.\n\nFor example, if $p = 7$,\n\n$$(7 - 1)! + (7 - 2)! + (7 - 3)! + (7 - 4)! + (7 - 5)! = 6! + 5! + 4! + 3! + 2! = 720 + 120 + 24 + 6 + 2 = 872$$\n\nAs $872\\bmod (7) = 4$, $S(7) = 4$.\n\nIt can be verified that $\\sum S(p) = 480$ for $5 ≤ p &lt; 100$.\n\nFind $\\sum S(p)$ for $5 ≤ p &lt; {10}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeKFactorial() {\n\n  return true;\n}\n\nprimeKFactorial();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeKFactorial()` should return `139602943319822`.",
          "testCode": "assert.strictEqual(primeKFactorial(), 139602943319822);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302045,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-381-prime-k-factorial.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4eb1000cf542c50fffd",
      "title": "Problem 382: Generating polygons",
      "challengeType": 1,
      "dashedName": "problem-382-generating-polygons",
      "description": "A polygon is a flat shape consisting of straight line segments that are joined to form a closed chain or circuit. A polygon consists of at least three sides and does not self-intersect.\n\nA set $S$ of positive numbers is said to generate a polygon $P$ if:\n\n- no two sides of $P$ are the same length,\n- the length of every side of $P$ is in $S$, and\n- $S$ contains no other value.\n\nFor example:\n\nThe set {3, 4, 5} generates a polygon with sides 3, 4, and 5 (a triangle).\n\nThe set {6, 9, 11, 24} generates a polygon with sides 6, 9, 11, and 24 (a quadrilateral).\n\nThe sets {1, 2, 3} and {2, 3, 4, 9} do not generate any polygon at all.\n\nConsider the sequence $s$, defined as follows:\n\n- $s_1 = 1$, $s_2 = 2$, $s_3 = 3$\n- $s_n = s_{n - 1} + s_{n - 3}$ for $n > 3$.\n\nLet $U_n$ be the set $\\\\{s_1, s_2, \\ldots, s_n\\\\}$. For example, $U_{10} = \\\\{1, 2, 3, 4, 6, 9, 13, 19, 28, 41\\\\}$.\n\nLet $f(n)$ be the number of subsets of $U_n$ which generate at least one polygon.\n\nFor example, $f(5) = 7$, $f(10) = 501$ and $f(25) = 18\\\\,635\\\\,853$.\n\nFind the last 9 digits of $f({10}^{18})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function generatingPolygons() {\n\n  return true;\n}\n\ngeneratingPolygons();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`generatingPolygons()` should return `697003956`.",
          "testCode": "assert.strictEqual(generatingPolygons(), 697003956);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302046,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-382-generating-polygons.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ed1000cf542c50ffff",
      "title": "Problem 383: Divisibility comparison between factorials",
      "challengeType": 1,
      "dashedName": "problem-383-divisibility-comparison-between-factorials",
      "description": "Let $f_5(n)$ be the largest integer $x$ for which $5^x$ divides $n$.\n\nFor example, $f_5(625\\\\,000) = 7$.\n\nLet $T_5(n)$ be the number of integers $i$ which satisfy $f_5((2 \\times i - 1)!) &lt; 2 \\times f_5(i!)$ and $1 ≤ i ≤ n$.\n\nIt can be verified that $T_5({10}^3) = 68$ and $T_5({10}^9) = 2\\\\,408\\\\,210$.\n\nFind $T_5({10}^{18})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function factorialDivisibilityComparison() {\n\n  return true;\n}\n\nfactorialDivisibilityComparison();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`factorialDivisibilityComparison()` should return `22173624649806`.",
          "testCode": "assert.strictEqual(factorialDivisibilityComparison(), 22173624649806);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302047,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-383-divisibility-comparison-between-factorials.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ed1000cf542c50fffe",
      "title": "Problem 384: Rudin-Shapiro sequence",
      "challengeType": 1,
      "dashedName": "problem-384-rudin-shapiro-sequence",
      "description": "Define the sequence $a(n)$ as the number of adjacent pairs of ones in the binary expansion of $n$ (possibly overlapping).\n\nE.g.: $a(5) = a({101}_2) = 0$, $a(6) = a({110}_2) = 1$, $a(7) = a({111}_2) = 2$\n\nDefine the sequence $b(n) = {(-1)}^{a(n)}$. This sequence is called the Rudin-Shapiro sequence.\n\nAlso consider the summatory sequence of $b(n)$: $s(n) = \\displaystyle\\sum_{i = 0}^{n} b(i)$.\n\nThe first couple of values of these sequences are:\n\n$$\\begin{array}{lr}\n  n    & 0 & 1 & 2 &  3 & 4 & 5 &  6 & 7 \\\\\\\\\n  a(n) & 0 & 0 & 0 &  1 & 0 & 0 &  1 & 2 \\\\\\\\\n  b(n) & 1 & 1 & 1 & -1 & 1 & 1 & -1 & 1 \\\\\\\\\n  s(n) & 1 & 2 & 3 &  2 & 3 & 4 &  3 & 4\n\\end{array}$$\n\nThe sequence $s(n)$ has the remarkable property that all elements are positive and every positive integer $k$ occurs exactly $k$ times.\n\nDefine $g(t, c)$, with $1 ≤ c ≤ t$, as the index in $s(n)$ for which $t$ occurs for the $c$'th time in $s(n)$.\n\nE.g.: $g(3, 3) = 6$, $g(4, 2) = 7$ and $g(54321, 12345) = 1\\\\,220\\\\,847\\\\,710$.\n\nLet $F(n)$ be the fibonacci sequence defined by:\n\n$$\\begin{align}\n  & F(0) = F(1) = 1 \\text{ and} \\\\\\\\\n  & F(n) = F(n - 1) + F(n - 2) \\text{ for } n > 1.\n\\end{align}$$\n\nDefine $GF(t) = g(F(t), F(t - 1))$.\n\nFind $\\sum GF(t)$ for$ 2 ≤ t ≤ 45$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rudinShapiroSequence() {\n\n  return true;\n}\n\nrudinShapiroSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`rudinShapiroSequence()` should return `3354706415856333000`.",
          "testCode": "assert.strictEqual(rudinShapiroSequence(), 3354706415856333000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302048,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-384-rudin-shapiro-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ee1000cf542c510000",
      "title": "Problem 385: Ellipses inside triangles",
      "challengeType": 1,
      "dashedName": "problem-385-ellipses-inside-triangles",
      "description": "For any triangle $T$ in the plane, it can be shown that there is a unique ellipse with largest area that is completely inside $T$.\n\n<img alt=\"ellipse completely inside a triangle\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/ellipses-inside-triangles.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFor a given $n$, consider triangles $T$ such that:\n\n-   the vertices of $T$ have integer coordinates with absolute value $≤ n$, and\n-   the foci<sup>1</sup> of the largest-area ellipse inside $T$ are $(\\sqrt{13}, 0)$ and $(-\\sqrt{13}, 0)$.\n\nLet $A(n)$ be the sum of the areas of all such triangles.\n\nFor example, if $n = 8$, there are two such triangles. Their vertices are (-4,-3), (-4,3), (8,0) and (4,3), (4,-3), (-8,0), and the area of each triangle is 36. Thus $A(8) = 36 + 36 = 72$.\n\nIt can be verified that $A(10) = 252$, $A(100) = 34\\\\,632$ and $A(1000) = 3\\\\,529\\\\,008$.\n\nFind $A(1\\\\,000\\\\,000\\\\,000)$.\n\n<sup>1</sup>The foci (plural of focus) of an ellipse are two points $A$ and $B$ such that for every point $P$ on the boundary of the ellipse, $AP + PB$ is constant.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function ellipsesInsideTriangles() {\n\n  return true;\n}\n\nellipsesInsideTriangles();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`ellipsesInsideTriangles()` should return `3776957309612154000`.",
          "testCode": "assert.strictEqual(ellipsesInsideTriangles(), 3776957309612154000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302049,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-385-ellipses-inside-triangles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4ef1000cf542c510001",
      "title": "Problem 386: Maximum length of an antichain",
      "challengeType": 1,
      "dashedName": "problem-386-maximum-length-of-an-antichain",
      "description": "Let $n$ be an integer and $S(n)$ be the set of factors of $n$.\n\nA subset $A$ of $S(n)$ is called an antichain of $S(n)$ if $A$ contains only one element or if none of the elements of $A$ divides any of the other elements of $A$.\n\nFor example: $S(30) = \\\\{1, 2, 3, 5, 6, 10, 15, 30\\\\}$\n\n$\\\\{2, 5, 6\\\\}$ is not an antichain of $S(30)$.\n\n$\\\\{2, 3, 5\\\\}$ is an antichain of $S(30)$.\n\nLet $N(n)$ be the maximum length of an antichain of $S(n)$.\n\nFind $\\sum N(n)$ for $1 ≤ n ≤ {10}^8$",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function maximumLengthOfAntichain() {\n\n  return true;\n}\n\nmaximumLengthOfAntichain();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`maximumLengthOfAntichain()` should return `528755790`.",
          "testCode": "assert.strictEqual(maximumLengthOfAntichain(), 528755790);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302050,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-386-maximum-length-of-an-antichain.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f11000cf542c510003",
      "title": "Problem 387: Harshad Numbers",
      "challengeType": 1,
      "dashedName": "problem-387-harshad-numbers",
      "description": "A Harshad or Niven number is a number that is divisible by the sum of its digits.\n\n201 is a Harshad number because it is divisible by 3 (the sum of its digits).\n\nWhen we truncate the last digit from 201, we get 20, which is a Harshad number.\n\nWhen we truncate the last digit from 20, we get 2, which is also a Harshad number.\n\nLet's call a Harshad number that, while recursively truncating the last digit, always results in a Harshad number a right truncatable Harshad number.\n\nAlso:\n\n$\\frac{201}{3} = 67$ which is prime.\n\nLet's call a Harshad number that, when divided by the sum of its digits, results in a prime a strong Harshad number.\n\nNow take the number 2011 which is prime. When we truncate the last digit from it we get 201, a strong Harshad number that is also right truncatable. Let's call such primes strong, right truncatable Harshad primes.\n\nYou are given that the sum of the strong, right truncatable Harshad primes less than 10000 is 90619.\n\nFind the sum of the strong, right truncatable Harshad primes less than ${10}^{14}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function harshadNumbers() {\n\n  return true;\n}\n\nharshadNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`harshadNumbers()` should return `696067597313468`.",
          "testCode": "assert.strictEqual(harshadNumbers(), 696067597313468);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302051,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-387-harshad-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f11000cf542c510002",
      "title": "Problem 388: Distinct Lines",
      "challengeType": 1,
      "dashedName": "problem-388-distinct-lines",
      "description": "Consider all lattice points ($a$, $b$, $c$) with $0 ≤ a, b, c ≤ N$.\n\nFrom the origin $O(0, 0, 0)$ all lines are drawn to the other lattice points. Let $D(N)$ be the number of distinct such lines.\n\nYou are given that $D(1\\\\,000\\\\,000) = 831\\\\,909\\\\,254\\\\,469\\\\,114\\\\,121$.\n\nFind $D({10}^{10})$. Give as your answer the first nine digits followed by the last nine digits.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function distinctLines() {\n\n  return true;\n}\n\ndistinctLines();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`distinctLines()` should return `831907372805130000`.",
          "testCode": "assert.strictEqual(distinctLines(), 831907372805130000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302052,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-388-distinct-lines.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f21000cf542c510004",
      "title": "Problem 389: Platonic Dice",
      "challengeType": 1,
      "dashedName": "problem-389-platonic-dice",
      "description": "An unbiased single 4-sided die is thrown and its value, $T$, is noted.\n\n$T$ unbiased 6-sided dice are thrown and their scores are added together. The sum, $C$, is noted.\n\n$C$ unbiased 8-sided dice are thrown and their scores are added together. The sum, $O$, is noted.\n\n$O$ unbiased 12-sided dice are thrown and their scores are added together. The sum, $D$, is noted.\n\n$D$ unbiased 20-sided dice are thrown and their scores are added together. The sum, $I$, is noted.\n\nFind the variance of $I$, and give your answer rounded to 4 decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function platonicDice() {\n\n  return true;\n}\n\nplatonicDice();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`platonicDice()` should return `2406376.3623`.",
          "testCode": "assert.strictEqual(platonicDice(), 2406376.3623);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302053,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-389-platonic-dice.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f21000cf542c510005",
      "title": "Problem 390: Triangles with non rational sides and integral area",
      "challengeType": 1,
      "dashedName": "problem-390-triangles-with-non-rational-sides-and-integral-area",
      "description": "Consider the triangle with sides $\\sqrt{5}$, $\\sqrt{65}$ and $\\sqrt{68}$. It can be shown that this triangle has area 9.\n\n$S(n)$ is the sum of the areas of all triangles with sides $\\sqrt{1 + b^2}$, $\\sqrt{1 + c^2}$ and $\\sqrt{b^2 + c^2}$ (for positive integers $b$ and $c$) that have an integral area not exceeding $n$.\n\nThe example triangle has $b = 2$ and $c = 8$.\n\n$S({10}^6) = 18\\\\,018\\\\,206$.\n\nFind $S({10}^{10})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nonRationalSidesAndIntegralArea() {\n\n  return true;\n}\n\nnonRationalSidesAndIntegralArea();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`nonRationalSidesAndIntegralArea()` should return `2919133642971`.",
          "testCode": "assert.strictEqual(nonRationalSidesAndIntegralArea(), 2919133642971);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302055,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-390-triangles-with-non-rational-sides-and-integral-area.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f31000cf542c510006",
      "title": "Problem 391: Hopping Game",
      "challengeType": 1,
      "dashedName": "problem-391-hopping-game",
      "description": "Let $s_k$ be the number of 1’s when writing the numbers from 0 to $k$ in binary.\n\nFor example, writing 0 to 5 in binary, we have 0, 1, 10, 11, 100, 101. There are seven 1’s, so $s_5 = 7$.\n\nThe sequence $S = \\\\{s_k : k ≥ 0\\\\}$ starts $\\\\{0, 1, 2, 4, 5, 7, 9, 12, \\ldots\\\\}$.\n\nA game is played by two players. Before the game starts, a number $n$ is chosen. A counter $c$ starts at 0. At each turn, the player chooses a number from 1 to $n$ (inclusive) and increases $c$ by that number. The resulting value of $c$ must be a member of $S$. If there are no more valid moves, the player loses.\n\nFor example, with $n = 5$ and starting with $c = 0$:\n\n- Player 1 chooses 4, so $c$ becomes $0 + 4 = 4$.\n- Player 2 chooses 5, so $c$ becomes $4 + 5 = 9$.\n- Player 1 chooses 3, so $c$ becomes $9 + 3 = 12$.\n- etc.\n\nNote that $c$ must always belong to $S$, and each player can increase $c$ by at most $n$.\n\nLet $M(n)$ be the highest number the first player can choose at her first turn to force a win, and $M(n) = 0$ if there is no such move. For example, $M(2) = 2$, $M(7) = 1$ and $M(20) = 4$.\n\nIt can be verified $\\sum M{(n)}^3 = 8150$ for $1 ≤ n ≤ 20$.\n\nFind $\\sum M{(n)}^3$ for $1 ≤ n ≤ 1000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hoppingGame() {\n\n  return true;\n}\n\nhoppingGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`hoppingGame()` should return `61029882288`.",
          "testCode": "assert.strictEqual(hoppingGame(), 61029882288);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302056,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-391-hopping-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f41000cf542c510007",
      "title": "Problem 392: Enmeshed unit circle",
      "challengeType": 1,
      "dashedName": "problem-392-enmeshed-unit-circle",
      "description": "A rectilinear grid is an orthogonal grid where the spacing between the gridlines does not have to be equidistant.\n\nAn example of such grid is logarithmic graph paper.\n\nConsider rectilinear grids in the Cartesian coordinate system with the following properties:\n\n- The gridlines are parallel to the axes of the Cartesian coordinate system.\n- There are $N + 2$ vertical and $N + 2$ horizontal gridlines. Hence there are $(N + 1) \\times (N + 1)$ rectangular cells.\n- The equations of the two outer vertical gridlines are $x = -1$ and $x = 1$.\n- The equations of the two outer horizontal gridlines are $y = -1$ and $y = 1$.\n- The grid cells are colored red if they overlap with the unit circle, black otherwise.\n\nFor this problem we would like you to find the positions of the remaining $N$ inner horizontal and $N$ inner vertical gridlines so that the area occupied by the red cells is minimized.\n\nE.g. here is a picture of the solution for $N = 10$:\n\n<img alt=\"solution for N = 10\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/enmeshed-unit-circle.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe area occupied by the red cells for $N = 10$ rounded to 10 digits behind the decimal point is 3.3469640797.\n\nFind the positions for $N = 400$. Give as your answer the area occupied by the red cells rounded to 10 digits behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function enmeshedUnitCircle() {\n\n  return true;\n}\n\nenmeshedUnitCircle();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`enmeshedUnitCircle()` should return `3.1486734435`.",
          "testCode": "assert.strictEqual(enmeshedUnitCircle(), 3.1486734435);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302057,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-392-enmeshed-unit-circle.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f61000cf542c510008",
      "title": "Problem 393: Migrating ants",
      "challengeType": 1,
      "dashedName": "problem-393-migrating-ants",
      "description": "An $n × n$ grid of squares contains $n^2$ ants, one ant per square.\n\nAll ants decide to move simultaneously to an adjacent square (usually 4 possibilities, except for ants on the edge of the grid or at the corners).\n\nWe define $f(n)$ to be the number of ways this can happen without any ants ending on the same square and without any two ants crossing the same edge between two squares.\n\nYou are given that $f(4) = 88$.\n\nFind $f(10)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function migratingAnts() {\n\n  return true;\n}\n\nmigratingAnts();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`migratingAnts()` should return `112398351350823100`.",
          "testCode": "assert.strictEqual(migratingAnts(), 112398351350823100);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302058,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-393-migrating-ants.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f71000cf542c510009",
      "title": "Problem 394: Eating pie",
      "challengeType": 1,
      "dashedName": "problem-394-eating-pie",
      "description": "Jeff eats a pie in an unusual way.\n\nThe pie is circular. He starts with slicing an initial cut in the pie along a radius.\n\nWhile there is at least a given fraction $F$ of pie left, he performs the following procedure:\n\n- He makes two slices from the pie center to any point of what is remaining of the pie border, any point on the remaining pie border equally likely. This will divide the remaining pie into three pieces.\n- Going counterclockwise from the initial cut, he takes the first two pie pieces and eats them.\n\nWhen less than a fraction $F$ of pie remains, he does not repeat this procedure. Instead, he eats all of the remaining pie.\n\n<img alt=\"animation of pie slicing procedure\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/eating-pie.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFor $x ≥ 1$, let $E(x)$ be the expected number of times Jeff repeats the procedure above with $F = \\frac{1}{x}$. It can be verified that $E(1) = 1$, $E(2) ≈ 1.2676536759$, and $E(7.5) ≈ 2.1215732071$.\n\nFind $E(40)$ rounded to 10 decimal places behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function eatingPie() {\n\n  return true;\n}\n\neatingPie();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`eatingPie()` should return `3.2370342194`.",
          "testCode": "assert.strictEqual(eatingPie(), 3.2370342194);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302059,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-394-eating-pie.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f71000cf542c51000a",
      "title": "Problem 395: Pythagorean tree",
      "challengeType": 1,
      "dashedName": "problem-395-pythagorean-tree",
      "description": "The Pythagorean tree is a fractal generated by the following procedure:\n\nStart with a unit square. Then, calling one of the sides its base (in the animation, the bottom side is the base):\n\n1. Attach a right triangle to the side opposite the base, with the hypotenuse coinciding with that side and with the sides in a 3-4-5 ratio. Note that the smaller side of the triangle must be on the 'right' side with respect to the base (see animation).\n2. Attach a square to each leg of the right triangle, with one of its sides coinciding with that leg.\n3. Repeat this procedure for both squares, considering as their bases the sides touching the triangle.\n\nThe resulting figure, after an infinite number of iterations, is the Pythagorean tree.\n\n<img alt=\"animation showing 8 iterations of the procedure\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/pythagorean-tree.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIt can be shown that there exists at least one rectangle, whose sides are parallel to the largest square of the Pythagorean tree, which encloses the Pythagorean tree completely.\n\nFind the smallest area possible for such a bounding rectangle, and give your answer rounded to 10 decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function pythagoreanTree() {\n\n  return true;\n}\n\npythagoreanTree();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`pythagoreanTree()` should return `28.2453753155`.",
          "testCode": "assert.strictEqual(pythagoreanTree(), 28.2453753155);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302060,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-395-pythagorean-tree.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f81000cf542c51000b",
      "title": "Problem 396: Weak Goodstein sequence",
      "challengeType": 1,
      "dashedName": "problem-396-weak-goodstein-sequence",
      "description": "For any positive integer $n$, the $n$th weak Goodstein sequence $\\\\{g1, g2, g3, \\ldots\\\\}$ is defined as:\n\n- $g_1 = n$\n- for $k > 1$, $g_k$ is obtained by writing $g_{k - 1}$ in base $k$, interpreting it as a base $k + 1$ number, and subtracting 1.\n\nThe sequence terminates when $g_k$ becomes 0.\n\nFor example, the $6$th weak Goodstein sequence is $\\\\{6, 11, 17, 25, \\ldots\\\\}$:\n\n- $g_1 = 6$.\n- $g_2 = 11$ since $6 = 110_2$, $110_3 = 12$, and $12 - 1 = 11$.\n- $g_3 = 17$ since $11 = 102_3$, $102_4 = 18$, and $18 - 1 = 17$.\n- $g_4 = 25$ since $17 = 101_4$, $101_5 = 26$, and $26 - 1 = 25$.\n\nand so on.\n\nIt can be shown that every weak Goodstein sequence terminates.\n\nLet $G(n)$ be the number of nonzero elements in the $n$th weak Goodstein sequence.\n\nIt can be verified that $G(2) = 3$, $G(4) = 21$ and $G(6) = 381$.\n\nIt can also be verified that $\\sum G(n) = 2517$ for $1 ≤ n &lt; 8$.\n\nFind the last 9 digits of $\\sum G(n)$ for $1 ≤ n &lt; 16$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function weakGoodsteinSequence() {\n\n  return true;\n}\n\nweakGoodsteinSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`weakGoodsteinSequence()` should return `173214653`.",
          "testCode": "assert.strictEqual(weakGoodsteinSequence(), 173214653);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302061,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-396-weak-goodstein-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4f91000cf542c51000c",
      "title": "Problem 397: Triangle on parabola",
      "challengeType": 1,
      "dashedName": "problem-397-triangle-on-parabola",
      "description": "On the parabola $y = \\frac{x^2}{k}$, three points $A(a, \\frac{a^2}{k})$, $B(b, \\frac{b^2}{k})$ and $C(c, \\frac{c^2}{k})$ are chosen.\n\nLet $F(K, X)$ be the number of the integer quadruplets $(k, a, b, c)$ such that at least one angle of the triangle $ABC$ is 45°, with $1 ≤ k ≤ K$ and $-X ≤ a &lt; b &lt; c ≤ X$.\n\nFor example, $F(1, 10) = 41$ and $F(10, 100) = 12\\\\,492$.\n\nFind $F({10}^6, {10}^9)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function triangleOnParabola() {\n\n  return true;\n}\n\ntriangleOnParabola();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`triangleOnParabola()` should return `141630459461893730`.",
          "testCode": "assert.strictEqual(triangleOnParabola(), 141630459461893730);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302062,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-397-triangle-on-parabola.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4fa1000cf542c51000d",
      "title": "Problem 398: Cutting rope",
      "challengeType": 1,
      "dashedName": "problem-398-cutting-rope",
      "description": "Inside a rope of length $n$, $n - 1$ points are placed with distance 1 from each other and from the endpoints. Among these points, we choose $m - 1$ points at random and cut the rope at these points to create $m$ segments.\n\nLet $E(n, m)$ be the expected length of the second-shortest segment. For example, $E(3, 2) = 2$ and $E(8, 3) = \\frac{16}{7}$. Note that if multiple segments have the same shortest length the length of the second-shortest segment is defined as the same as the shortest length.\n\nFind $E({10}^7, 100)$. Give your answer rounded to 5 decimal places behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function cuttingRope() {\n\n  return true;\n}\n\ncuttingRope();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`cuttingRope()` should return `2010.59096`.",
          "testCode": "assert.strictEqual(cuttingRope(), 2010.59096);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302063,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-398-cutting-rope.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4fc1000cf542c51000e",
      "title": "Problem 399: Squarefree Fibonacci Numbers",
      "challengeType": 1,
      "dashedName": "problem-399-squarefree-fibonacci-numbers",
      "description": "The first 15 fibonacci numbers are:\n\n$$1,1,2,3,5,8,13,21,34,55,89,144,233,377,610.$$\n\nIt can be seen that 8 and 144 are not squarefree: 8 is divisible by 4 and 144 is divisible by 4 and by 9.\n\nSo the first 13 squarefree fibonacci numbers are:\n\n$$1,1,2,3,5,13,21,34,55,89,233,377 \\text{ and } 610.$$\n\nThe $200$th squarefree fibonacci number is: 971183874599339129547649988289594072811608739584170445. The last sixteen digits of this number are: 1608739584170445 and in scientific notation this number can be written as `9.7e53`.\n\nFind the $100\\\\,000\\\\,000$th squarefree fibonacci number. Give as your answer as a string with its last sixteen digits followed by a comma followed by the number in scientific notation (rounded to one digit after the decimal point). For the $200$th squarefree number the answer would have been: `1608739584170445,9.7e53`\n\n**Note:** For this problem, assume that for every prime $p$, the first fibonacci number divisible by $p$ is not divisible by $p^2$ (this is part of Wall's conjecture). This has been verified for primes $≤ 3 \\times {10}^{15}$, but has not been proven in general.\n\nIf it happens that the conjecture is false, then the accepted answer to this problem isn't guaranteed to be the $100\\\\,000\\\\,000$th squarefree fibonacci number, rather it represents only a lower bound for that number.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squarefreeFibonacciNumbers() {\n\n  return true;\n}\n\nsquarefreeFibonacciNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`squarefreeFibonacciNumbers()` should return a string.",
          "testCode": "asset.isString(squarefreeFibonacciNumbers());"
        },
        {
          "text": "`squarefreeFibonacciNumbers()` should return the string `1508395636674243,6.5e27330467`.",
          "testCode": "assert.strictEqual(squarefreeFibonacciNumbers(), '1508395636674243,6.5e27330467');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302064,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-399-squarefree-fibonacci-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4fe1000cf542c510010",
      "title": "Problem 400: Fibonacci tree game",
      "challengeType": 1,
      "dashedName": "problem-400-fibonacci-tree-game",
      "description": "A Fibonacci tree is a binary tree recursively defined as:\n\n- $T(0)$ is the empty tree.\n- $T(1)$ is the binary tree with only one node.\n- $T(k)$ consists of a root node that has $T(k - 1)$ and $T(k - 2)$ as children.\n\nOn such a tree two players play a take-away game. On each turn a player selects a node and removes that node along with the subtree rooted at that node. The player who is forced to take the root node of the entire tree loses.\n\nHere are the winning moves of the first player on the first turn for $T(k)$ from $k = 1$ to $k = 6$.\n\n<img alt=\"winning moves of first player, on the first turn for k = 1 to k = 6\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/fibonacci-tree-game.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $f(k)$ be the number of winning moves of the first player (i.e. the moves for which the second player has no winning strategy) on the first turn of the game when this game is played on $T(k)$.\n\nFor example, $f(5) = 1$ and $f(10) = 17$.\n\nFind $f(10000)$. Give the last 18 digits of your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function fibonacciTreeGame() {\n\n  return true;\n}\n\nfibonacciTreeGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`fibonacciTreeGame()` should return `438505383468410600`.",
          "testCode": "assert.strictEqual(fibonacciTreeGame(), 438505383468410600);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302067,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-301-to-400\\problem-400-fibonacci-tree-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-301-to-400",
        "name": "Project Euler Problems 301 To 400"
      }
    },
    {
      "id": "5900f4fd1000cf542c51000f",
      "title": "Problem 401: Sum of squares of divisors",
      "challengeType": 1,
      "dashedName": "problem-401-sum-of-squares-of-divisors",
      "description": "The divisors of 6 are 1, 2, 3 and 6.\n\nThe sum of the squares of these numbers is $1 + 4 + 9 + 36 = 50$.\n\nLet $\\sigma_2(n)$ represent the sum of the squares of the divisors of $n$. Thus $\\sigma_2(6) = 50$.\n\nLet $\\Sigma_2$ represent the summatory function of $\\sigma_2$, that is $\\Sigma_2(n) = \\sum \\sigma_2(i)$ for $i=1$ to $n$. The first 6 values of $\\Sigma_2$ are: 1, 6, 16, 37, 63 and 113.\n\nFind $\\Sigma_2({10}^{15})$ modulo ${10}^9$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumOfSquaresDivisors() {\n\n  return true;\n}\n\nsumOfSquaresDivisors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumOfSquaresDivisors()` should return `281632621`.",
          "testCode": "assert.strictEqual(sumOfSquaresDivisors(), 281632621);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302069,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-401-sum-of-squares-of-divisors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f4ff1000cf542c510011",
      "title": "Problem 402: Integer-valued polynomials",
      "challengeType": 1,
      "dashedName": "problem-402-integer-valued-polynomials",
      "description": "It can be shown that the polynomial $n^4 + 4n^3 + 2n^2 + 5n$ is a multiple of 6 for every integer $n$. It can also be shown that 6 is the largest integer satisfying this property.\n\nDefine $M(a, b, c)$ as the maximum $m$ such that $n^4 + an^3 + bn^2 + cn$ is a multiple of $m$ for all integers $n$. For example, $M(4, 2, 5) = 6$.\n\nAlso, define $S(N)$ as the sum of $M(a, b, c)$ for all $0 &lt; a, b, c ≤ N$.\n\nWe can verify that $S(10) = 1\\\\,972$ and $S(10\\\\,000) = 2\\\\,024\\\\,258\\\\,331\\\\,114$.\n\nLet $F_k$ be the Fibonacci sequence:\n\n- $F_0 = 0$, $F_1 = 1$ and\n- $F_k = F_{k - 1} + F_{k - 2}$ for $k ≥ 2$.\n\nFind the last 9 digits of $\\sum S(F_k)$ for $2 ≤ k ≤ 1\\\\,234\\\\,567\\\\,890\\\\,123$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function integerValuedPolynomials() {\n\n  return true;\n}\n\nintegerValuedPolynomials();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`integerValuedPolynomials()` should return `356019862`.",
          "testCode": "assert.strictEqual(integerValuedPolynomials(), 356019862);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302070,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-402-integer-valued-polynomials.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5001000cf542c510013",
      "title": "Problem 403: Lattice points enclosed by parabola and line",
      "challengeType": 1,
      "dashedName": "problem-403-lattice-points-enclosed-by-parabola-and-line",
      "description": "For integers $a$ and $b$, we define $D(a, b)$ as the domain enclosed by the parabola $y = x^2$ and the line $y = ax + b: D(a, b) = \\\\{ (x, y) | x^2 ≤ y ≤ ax + b \\\\}$.\n\n$L(a, b)$ is defined as the number of lattice points contained in $D(a, b)$. For example, $L(1, 2) = 8$ and $L(2, -1) = 1$.\n\nWe also define $S(N)$ as the sum of $L(a, b)$ for all the pairs ($a$, $b$) such that the area of $D(a, b)$ is a rational number and $|a|,|b| ≤ N$.\n\nWe can verify that $S(5) = 344$ and $S(100) = 26\\\\,709\\\\,528$.\n\nFind $S({10}^{12})$. Give your answer $\\bmod {10}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function latticePoints() {\n\n  return true;\n}\n\nlatticePoints();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`latticePoints()` should return `18224771`.",
          "testCode": "assert.strictEqual(latticePoints(), 18224771);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302071,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-403-lattice-points-enclosed-by-parabola-and-line.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5001000cf542c510012",
      "title": "Problem 404: Crisscross Ellipses",
      "challengeType": 1,
      "dashedName": "problem-404-crisscross-ellipses",
      "description": "$E_a$ is an ellipse with an equation of the form $x^2 + 4y^2 = 4a^2$.\n\n$E_a'$ is the rotated image of $E_a$ by $θ$ degrees counterclockwise around the origin $O(0, 0)$ for $0° &lt; θ &lt; 90°$.\n\n<img alt=\"ellipse E_a and ellipse rotated by θ degrees E_a'\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/crisscross-ellipses.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\n$b$ is the distance to the origin of the two intersection points closest to the origin and $c$ is the distance of the two other intersection points.\n\nWe call an ordered triplet ($a$, $b$, $c$) a canonical ellipsoidal triplet if $a$, $b$ and $c$ are positive integers.\n\nFor example, (209, 247, 286) is a canonical ellipsoidal triplet.\n\nLet $C(N)$ be the number of distinct canonical ellipsoidal triplets ($a$, $b$, $c$) for $a ≤ N$.\n\nIt can be verified that $C({10}^3) = 7$, $C({10}^4) = 106$ and $C({10}^6) = 11\\\\,845$.\n\nFind $C({10}^{17})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function crisscrossEllipses() {\n\n  return true;\n}\n\ncrisscrossEllipses();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`crisscrossEllipses()` should return `1199215615081353`.",
          "testCode": "assert.strictEqual(crisscrossEllipses(), 1199215615081353);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302072,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-404-crisscross-ellipses.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5021000cf542c510014",
      "title": "Problem 405: A rectangular tiling",
      "challengeType": 1,
      "dashedName": "problem-405-a-rectangular-tiling",
      "description": "We wish to tile a rectangle whose length is twice its width.\n\nLet $T(0)$ be the tiling consisting of a single rectangle.\n\nFor $n > 0$, let $T(n)$ be obtained from $T( n- 1)$ by replacing all tiles in the following manner:\n\n<img alt=\"obtaining T(n) from T(n - 1)\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/a-rectangular-tiling-1.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe following animation demonstrates the tilings $T(n)$ for $n$ from 0 to 5:\n\n<img alt=\"animation with tilings T(n) for n from 0 to 5\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/a-rectangular-tiling-2.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $f(n)$ be the number of points where four tiles meet in $T(n)$. For example, $f(1) = 0$, $f(4) = 82$ and $f({10}^9)\\bmod {17}^7 = 126\\\\,897\\\\,180$.\n\nFind $f({10}^k)$ for $k = {10}^{18}$, give your answer modulo ${17}^7$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rectangularTiling() {\n\n  return true;\n}\n\nrectangularTiling();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`rectangularTiling()` should return `237696125`.",
          "testCode": "assert.strictEqual(rectangularTiling(), 237696125);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302073,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-405-a-rectangular-tiling.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5021000cf542c510015",
      "title": "Problem 406: Guessing Game",
      "challengeType": 1,
      "dashedName": "problem-406-guessing-game",
      "description": "We are trying to find a hidden number selected from the set of integers {1, 2, ..., $n$} by asking questions. Each number (question) we ask, we get one of three possible answers:\n\n- \"Your guess is lower than the hidden number\" (and you incur a cost of a), or\n- \"Your guess is higher than the hidden number\" (and you incur a cost of b), or\n- \"Yes, that's it!\" (and the game ends).\n\nGiven the value of $n$, $a$, and $b$, an optimal strategy minimizes the total cost <u>for the worst possible case</u>.\n\nFor example, if $n = 5$, $a = 2$, and $b = 3$, then we may begin by asking \"<strong>2</strong>\" as our first question.\n\nIf we are told that 2 is higher than the hidden number (for a cost of $b = 3$), then we are sure that \"<strong>1</strong>\" is the hidden number (for a total cost of <strong><span style=\"color: blue;\">3</span></strong>).\n\nIf we are told that 2 is lower than the hidden number (for a cost of $a = 2$), then our next question will be \"<strong>4</strong>\".\n\nIf we are told that 4 is higher than the hidden number (for a cost of $b = 3$), then we are sure that \"<strong>3</strong>\" is the hidden number (for a total cost of $2 + 3 = \\color{blue}{\\mathbf{5}}$).\n\nIf we are told that 4 is lower than the hidden number (for a cost of $a = 2$), then we are sure that \"<strong>5</strong>\" is the hidden number (for a total cost of $2 + 2 = \\color{blue}{\\mathbf{4}}$).\n\nThus, the worst-case cost achieved by this strategy is <strong><span style=\"color: red\">5</span></strong>. It can also be shown that this is the lowest worst-case cost that can be achieved. So, in fact, we have just described an optimal strategy for the given values of $n$, $a$, and $b$.\n\nLet $C(n, a, b)$ be the worst-case cost achieved by an optimal strategy for the given values of $n$, $a$, and $b$.\n\nHere are a few examples:\n\n$$\\begin{align}\n  & C(5, 2, 3) = 5 \\\\\\\\\n  & C(500, \\sqrt{2}, \\sqrt{3}) = 13.220\\\\,731\\\\,97\\ldots \\\\\\\\\n  & C(20\\\\,000, 5, 7) = 82 \\\\\\\\\n  & C(2\\\\,000\\\\,000, √5, √7) = 49.637\\\\,559\\\\,55\\ldots \\\\\\\\\n\\end{align}$$\n\nLet $F_k$ be the Fibonacci numbers: $F_k = F_{k - 1} + F_{k - 2}$ with base cases $F_1 = F_2 = 1$.\n\nFind $\\displaystyle\\sum_{k = 1}^{30} C({10}^{12}, \\sqrt{k}, \\sqrt{F_k})$, and give your answer rounded to 8 decimal places behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function guessingGame() {\n\n  return true;\n}\n\nguessingGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`guessingGame()` should return `36813.12757207`.",
          "testCode": "assert.strictEqual(guessingGame(), 36813.12757207);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302074,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-406-guessing-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5041000cf542c510016",
      "title": "Problem 407: Idempotents",
      "challengeType": 1,
      "dashedName": "problem-407-idempotents",
      "description": "If we calculate $a^2\\bmod 6$ for $0 ≤ a ≤ 5$ we get: 0, 1, 4, 3, 4, 1.\n\nThe largest value of a such that $a^2 ≡ a\\bmod 6$ is $4$.\n\nLet's call $M(n)$ the largest value of $a &lt; n$ such that $a^2 ≡ a (\\text{mod } n)$. So $M(6) = 4$.\n\nFind $\\sum M(n)$ for $1 ≤ n ≤ {10}^7$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function idempotents() {\n\n  return true;\n}\n\nidempotents();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`idempotents()` should return `39782849136421`.",
          "testCode": "assert.strictEqual(idempotents(), 39782849136421);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302075,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-407-idempotents.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5091000cf542c51001b",
      "title": "Problem 408: Admissible paths through a grid",
      "challengeType": 1,
      "dashedName": "problem-408-admissible-paths-through-a-grid",
      "description": "Let's call a lattice point ($x$, $y$) inadmissible if $x$, $y$ and $x + y$ are all positive perfect squares.\n\nFor example, (9, 16) is inadmissible, while (0, 4), (3, 1) and (9, 4) are not.\n\nConsider a path from point ($x_1$, $y_1$) to point ($x_2$, $y_2$) using only unit steps north or east. Let's call such a path admissible if none of its intermediate points are inadmissible.\n\nLet $P(n)$ be the number of admissible paths from (0, 0) to ($n$, $n$). It can be verified that $P(5) = 252$, $P(16) = 596\\\\,994\\\\,440$ and $P(1\\\\,000)\\bmod 1\\\\,000\\\\,000\\\\,007 = 341\\\\,920\\\\,854$.\n\nFind $P(10\\\\,000\\\\,000)\\bmod 1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function admissiblePaths() {\n\n  return true;\n}\n\nadmissiblePaths();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`admissiblePaths()` should return `299742733`.",
          "testCode": "assert.strictEqual(admissiblePaths(), 299742733);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302076,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-408-admissible-paths-through-a-grid.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5061000cf542c510017",
      "title": "Problem 409: Nim Extreme",
      "challengeType": 1,
      "dashedName": "problem-409-nim-extreme",
      "description": "Let $n$ be a positive integer. Consider nim positions where:\n\n- There are $n$ non-empty piles.\n- Each pile has size less than $2^n$.\n- No two piles have the same size.\n\nLet $W(n)$ be the number of winning nim positions satisfying the above conditions (a position is winning if the first player has a winning strategy).\n\nFor example, $W(1) = 1$, $W(2) = 6$, $W(3) = 168$, $W(5) = 19\\\\,764\\\\,360$ and $W(100)\\bmod 1\\\\,000\\\\,000\\\\,007 = 384\\\\,777\\\\,056$.\n\nFind $W(10\\\\,000\\\\,000)\\bmod 1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nimExtreme() {\n\n  return true;\n}\n\nnimExtreme();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`nimExtreme()` should return `253223948`.",
          "testCode": "assert.strictEqual(nimExtreme(), 253223948);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302077,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-409-nim-extreme.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5071000cf542c510018",
      "title": "Problem 410: Circle and tangent line",
      "challengeType": 1,
      "dashedName": "problem-410-circle-and-tangent-line",
      "description": "Let $C$ be the circle with radius $r$, $x^2 + y^2 = r^2$. We choose two points $P(a, b)$ and $Q(-a, c)$ so that the line passing through $P$ and $Q$ is tangent to $C$.\n\nFor example, the quadruplet $(r, a, b, c) = (2, 6, 2, -7)$ satisfies this property.\n\nLet $F(R, X)$ be the number of the integer quadruplets $(r, a, b, c)$ with this property, and with $0 &lt; r ≤ R$ and $0 &lt; a ≤ X$.\n\nWe can verify that $F(1, 5) = 10$, $F(2, 10) = 52$ and $F(10, 100) = 3384$.\n\nFind $F({10}^8, {10}^9) + F({10}^9, {10}^8)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function circleAndTangentLine() {\n\n  return true;\n}\n\ncircleAndTangentLine();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`circleAndTangentLine()` should return `799999783589946600`.",
          "testCode": "assert.strictEqual(circleAndTangentLine(), 799999783589946600);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302079,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-410-circle-and-tangent-line.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5081000cf542c510019",
      "title": "Problem 411: Uphill paths",
      "challengeType": 1,
      "dashedName": "problem-411-uphill-paths",
      "description": "Let $n$ be a positive integer. Suppose there are stations at the coordinates $(x, y) = (2^i\\bmod n, 3^i\\bmod n)$ for $0 ≤ i ≤ 2n$. We will consider stations with the same coordinates as the same station.\n\nWe wish to form a path from (0, 0) to ($n$, $n$) such that the $x$ and $y$ coordinates never decrease.\n\nLet $S(n)$ be the maximum number of stations such a path can pass through.\n\nFor example, if $n = 22$, there are 11 distinct stations, and a valid path can pass through at most 5 stations. Therefore, $S(22) = 5$. The case is illustrated below, with an example of an optimal path:\n\n<img alt=\"valid path passing through 5 stations, for n = 22, with 11 distinct stations\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/uphill-paths.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIt can also be verified that $S(123) = 14$ and $S(10\\\\,000) = 48$.\n\nFind $\\sum S(k^5)$ for $1 ≤ k ≤ 30$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function uphillPaths() {\n\n  return true;\n}\n\nuphillPaths();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`uphillPaths()` should return `9936352`.",
          "testCode": "assert.strictEqual(uphillPaths(), 9936352);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302080,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-411-uphill-paths.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5081000cf542c51001a",
      "title": "Problem 412: Gnomon numbering",
      "challengeType": 1,
      "dashedName": "problem-412-gnomon-numbering",
      "description": "For integers $m$, $n$ ($0 ≤ n &lt; m$), let $L(m, n)$ be an $m×m$ grid with the top-right $n×n$ grid removed.\n\nFor example, $L(5, 3)$ looks like this:\n\n<img alt=\"5x5 grid, with removed 3x3 grid from the top-right\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/gnomon-numbering-1.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWe want to number each cell of $L(m, n)$ with consecutive integers 1, 2, 3, ... such that the number in every cell is smaller than the number below it and to the left of it.\n\nFor example, here are two valid numberings of $L(5, 3)$:\n\n<img alt=\"two valid numberings of L(5, 3)\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/gnomon-numbering-2.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $LC(m, n)$ be the number of valid numberings of $L(m, n)$. It can be verified that $LC(3, 0) = 42$, $LC(5, 3) = 250\\\\,250$, $LC(6, 3) = 406\\\\,029\\\\,023\\\\,400$ and $LC(10, 5)\\bmod 76\\\\,543\\\\,217 = 61\\\\,251\\\\,715$.\n\nFind $LC(10\\\\,000, 5\\\\,000)\\bmod 76\\\\,543\\\\,217$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function gnomonNumbering() {\n\n  return true;\n}\n\ngnomonNumbering();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`gnomonNumbering()` should return `38788800`.",
          "testCode": "assert.strictEqual(gnomonNumbering(), 38788800);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302081,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-412-gnomon-numbering.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f50a1000cf542c51001c",
      "title": "Problem 413: One-child Numbers",
      "challengeType": 1,
      "dashedName": "problem-413-one-child-numbers",
      "description": "We say that a $d$-digit positive number (no leading zeros) is a one-child number if exactly one of its sub-strings is divisible by $d$.\n\nFor example, 5671 is a 4-digit one-child number. Among all its sub-strings 5, 6, 7, 1, 56, 67, 71, 567, 671 and 5671, only 56 is divisible by 4.\n\nSimilarly, 104 is a 3-digit one-child number because only 0 is divisible by 3. 1132451 is a 7-digit one-child number because only 245 is divisible by 7.\n\nLet $F(N)$ be the number of the one-child numbers less than $N$. We can verify that $F(10) = 9$, $F({10}^3) = 389$ and $F({10}^7) = 277\\\\,674$.\n\nFind $F({10}^{19})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function oneChildNumbers() {\n\n  return true;\n}\n\noneChildNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`oneChildNumbers()` should return `3079418648040719`.",
          "testCode": "assert.strictEqual(oneChildNumbers(), 3079418648040719);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302082,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-413-one-child-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f50b1000cf542c51001d",
      "title": "Problem 414: Kaprekar constant",
      "challengeType": 1,
      "dashedName": "problem-414-kaprekar-constant",
      "description": "6174 is a remarkable number; if we sort its digits in increasing order and subtract that number from the number you get when you sort the digits in decreasing order, we get $7641 - 1467 = 6174$.\n\nEven more remarkable is that if we start from any 4 digit number and repeat this process of sorting and subtracting, we'll eventually end up with 6174 or immediately with 0 if all digits are equal.\n\nThis also works with numbers that have less than 4 digits if we pad the number with leading zeroes until we have 4 digits.\n\nE.g. let's start with the number 0837:\n\n$$\\begin{align}\n  & 8730 - 0378 = 8352 \\\\\\\\\n  & 8532 - 2358 = 6174\n\\end{align}$$\n\n6174 is called the Kaprekar constant. The process of sorting and subtracting and repeating this until either 0 or the Kaprekar constant is reached is called the Kaprekar routine.\n\nWe can consider the Kaprekar routine for other bases and number of digits. Unfortunately, it is not guaranteed a Kaprekar constant exists in all cases; either the routine can end up in a cycle for some input numbers or the constant the routine arrives at can be different for different input numbers. However, it can be shown that for 5 digits and a base $b = 6t + 3 ≠ 9$, a Kaprekar constant exists.\n\nE.g.\nbase 15: ${(10, 4, 14, 9, 5)}\\_{15}$\nbase 21: $(14, 6, 20, 13, 7)\\_{21}$\n\nDefine $C_b$ to be the Kaprekar constant in base $b$ for 5 digits. Define the function $sb(i)$ to be:\n\n- 0 if $i = C_b$ or if $i$ written in base $b$ consists of 5 identical digits\n- the number of iterations it takes the Kaprekar routine in base $b$ to arrive at $C_b$, otherwise\n\nNote that we can define $sb(i)$ for all integers $i &lt; b^5$. If $i$ written in base $b$ takes less than 5 digits, the number is padded with leading zero digits until we have 5 digits before applying the Kaprekar routine.\n\nDefine $S(b)$ as the sum of $sb(i)$ for $0 &lt; i &lt; b^5$. E.g. $S(15) = 5\\\\,274\\\\,369$ $S(111) = 400\\\\,668\\\\,930\\\\,299$\n\nFind the sum of $S(6k + 3)$ for $2 ≤ k ≤ 300$. Give the last 18 digits as your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function kaprekarConstant() {\n\n  return true;\n}\n\nkaprekarConstant();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`kaprekarConstant()` should return `552506775824935500`.",
          "testCode": "assert.strictEqual(kaprekarConstant(), 552506775824935500);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302083,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-414-kaprekar-constant.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f50c1000cf542c51001e",
      "title": "Problem 415: Titanic sets",
      "challengeType": 1,
      "dashedName": "problem-415-titanic-sets",
      "description": "A set of lattice points $S$ is called a titanic set if there exists a line passing through exactly two points in $S$.\n\nAn example of a titanic set is $S = \\\\{(0, 0), (0, 1), (0, 2), (1, 1), (2, 0), (1, 0)\\\\}$, where the line passing through (0, 1) and (2, 0) does not pass through any other point in $S$.\n\nOn the other hand, the set {(0, 0), (1, 1), (2, 2), (4, 4)} is not a titanic set since the line passing through any two points in the set also passes through the other two.\n\nFor any positive integer $N$, let $T(N)$ be the number of titanic sets $S$ whose every point ($x$, $y$) satisfies $0 ≤ x$, $y ≤ N$. It can be verified that $T(1) = 11$, $T(2) = 494$, $T(4) = 33\\\\,554\\\\,178$, $T(111)\\bmod {10}^8 = 13\\\\,500\\\\,401$ and $T({10}^5)\\bmod {10}^8 = 63\\\\,259\\\\,062$.\n\nFind $T({10}^{11})\\bmod {10}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function titanicSets() {\n\n  return true;\n}\n\ntitanicSets();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`titanicSets()` should return `55859742`.",
          "testCode": "assert.strictEqual(titanicSets(), 55859742);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302084,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-415-titanic-sets.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f50e1000cf542c510020",
      "title": "Problem 416: A frog''s trip",
      "challengeType": 1,
      "dashedName": "problem-416-a-frogs-trip",
      "description": "A row of $n$ squares contains a frog in the leftmost square. By successive jumps the frog goes to the rightmost square and then back to the leftmost square. On the outward trip he jumps one, two or three squares to the right, and on the homeward trip he jumps to the left in a similar manner. He cannot jump outside the squares. He repeats the round-trip travel $m$ times.\n\nLet $F(m, n)$ be the number of the ways the frog can travel so that at most one square remains unvisited.\n\nFor example, $F(1, 3) = 4$, $F(1, 4) = 15$, $F(1, 5) = 46$, $F(2, 3) = 16$ and $F(2, 100)\\bmod {10}^9 = 429\\\\,619\\\\,151$.\n\nFind the last 9 digits of $F(10, {10}^{12})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function frogsTrip() {\n\n  return true;\n}\n\nfrogsTrip();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`frogsTrip()` should return `898082747`.",
          "testCode": "assert.strictEqual(frogsTrip(), 898082747);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302085,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-416-a-frogs-trip.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f50d1000cf542c51001f",
      "title": "Problem 417: Reciprocal cycles II",
      "challengeType": 1,
      "dashedName": "problem-417-reciprocal-cycles-ii",
      "description": "A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:\n\n$$\\begin{align}\n  & \\frac{1}{2}  = 0.5 \\\\\\\\\n  & \\frac{1}{3}  = 0.(3) \\\\\\\\\n  & \\frac{1}{4}  = 0.25 \\\\\\\\\n  & \\frac{1}{5}  = 0.2 \\\\\\\\\n  & \\frac{1}{6}  = 0.1(6) \\\\\\\\\n  & \\frac{1}{7}  = 0.(142857) \\\\\\\\\n  & \\frac{1}{8}  = 0.125 \\\\\\\\\n  & \\frac{1}{9}  = 0.(1) \\\\\\\\\n  & \\frac{1}{10} = 0.1 \\\\\\\\\n\\end{align}$$\n\nWhere $0.1(6)$ means $0.166666\\ldots$, and has a 1-digit recurring cycle. It can be seen that $\\frac{1}{7}$ has a 6-digit recurring cycle.\n\nUnit fractions whose denominator has no other prime factors than 2 and/or 5 are not considered to have a recurring cycle. We define the length of the recurring cycle of those unit fractions as 0.\n\nLet $L(n)$ denote the length of the recurring cycle of $\\frac{1}{n}$. You are given that $\\sum L(n)$ for $3 ≤ n ≤ 1\\\\,000\\\\,000$ equals $55\\\\,535\\\\,191\\\\,115$.\n\nFind $\\sum L(n)$ for $3 ≤ n ≤ 100\\\\,000\\\\,000$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function reciprocalCyclesTwo() {\n\n  return true;\n}\n\nreciprocalCyclesTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`reciprocalCyclesTwo()` should return `446572970925740`.",
          "testCode": "assert.strictEqual(reciprocalCyclesTwo(), 446572970925740);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302086,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-417-reciprocal-cycles-ii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f50f1000cf542c510021",
      "title": "Problem 418: Factorisation triples",
      "challengeType": 1,
      "dashedName": "problem-418-factorisation-triples",
      "description": "Let $n$ be a positive integer. An integer triple ($a$, $b$, $c$) is called a factorisation triple of $n$ if:\n\n- $1 ≤ a ≤ b ≤ c$\n- $a \\times b \\times c = n$.\n\nDefine $f(n)$ to be $a + b + c$ for the factorisation triple ($a$, $b$, $c$) of $n$ which minimises $\\frac{c}{a}$. One can show that this triple is unique.\n\nFor example, $f(165) = 19$, $f(100\\\\,100) = 142$ and $f(20!) = 4\\\\,034\\\\,872$.\n\nFind $f(43!)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function factorisationTriples() {\n\n  return true;\n}\n\nfactorisationTriples();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`factorisationTriples()` should return `1177163565297340400`.",
          "testCode": "assert.strictEqual(factorisationTriples(), 1177163565297340400);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302087,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-418-factorisation-triples.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5101000cf542c510022",
      "title": "Problem 419: Look and say sequence",
      "challengeType": 1,
      "dashedName": "problem-419-look-and-say-sequence",
      "description": "The look and say sequence goes 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, ...\n\nThe sequence starts with 1 and all other members are obtained by describing the previous member in terms of consecutive digits.\n\nIt helps to do this out loud:\n\n1 is 'one one' $→ 11$\n\n11 is 'two ones' $→ 21$\n\n21 is 'one two and one one' $→ 1211$\n\n1211 is 'one one, one two and two ones' $→ 111221$\n\n111221 is 'three ones, two twos and one one' $→ 312211$\n\n...\n\nDefine $A(n)$, $B(n)$ and $C(n)$ as the number of ones, twos and threes in the $n$'th element of the sequence respectively. One can verify that $A(40) = 31\\\\,254$, $B(40) = 20\\\\,259$ and $C(40) = 11\\\\,625$.\n\nFind $A(n)$, $B(n)$ and $C(n)$ for $n = {10}^{12}$. Give your answer modulo $2^{30}$ as a string and separate your values for $A$, $B$ and $C$ by a comma. E.g. for $n = 40$ the answer would be `31254,20259,11625`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function lookAndSaySequence() {\n\n  return true;\n}\n\nlookAndSaySequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`lookAndSaySequence()` should return a string.",
          "testCode": "assert.isString(lookAndSaySequence());"
        },
        {
          "text": "`lookAndSaySequence()` should return the string `998567458,1046245404,43363922`.",
          "testCode": "assert.strictEqual(lookAndSaySequence(), '998567458,1046245404,43363922');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302088,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-419-look-and-say-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5111000cf542c510023",
      "title": "Problem 420: 2x2 positive integer matrix",
      "challengeType": 1,
      "dashedName": "problem-420-2x2-positive-integer-matrix",
      "description": "A positive integer matrix is a matrix whose elements are all positive integers.\n\nSome positive integer matrices can be expressed as a square of a positive integer matrix in two different ways. Here is an example:\n\n$$\\begin{pmatrix}\n  40 & 12 \\\\\\\\\n  48 & 40\n\\end{pmatrix} =\n{\\begin{pmatrix}\n  2 & 3 \\\\\\\\\n 12 & 2\n\\end{pmatrix}}^2 =\n{\\begin{pmatrix}\n  6 & 1 \\\\\\\\\n  4 & 6\n\\end{pmatrix}}^2$$\n\nWe define $F(N)$ as the number of the 2x2 positive integer matrices which have a trace less than N and which can be expressed as a square of a positive integer matrix in two different ways.\n\nWe can verify that $F(50) = 7$ and $F(1000) = 1019$.\n\nFind $F({10}^7)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function positiveIntegerMatrix() {\n\n  return true;\n}\n\npositiveIntegerMatrix();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`positiveIntegerMatrix()` should return `145159332`.",
          "testCode": "assert.strictEqual(positiveIntegerMatrix(), 145159332);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302090,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-420-2x2-positive-integer-matrix.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5131000cf542c510024",
      "title": "Problem 421: Prime factors of n^15+1",
      "challengeType": 1,
      "dashedName": "problem-421-prime-factors-of-n151",
      "description": "Numbers of the form $n^{15} + 1$ are composite for every integer $n > 1$.\n\nFor positive integers $n$ and $m$ let $s(n, m)$ be defined as the sum of the distinct prime factors of $n^{15} + 1$ not exceeding $m$.\n\nE.g. $2^{15} + 1 = 3 × 3 × 11 × 331$.\n\nSo $s(2, 10) = 3$ and $s(2, 1000) = 3 + 11 + 331 = 345$.\n\nAlso ${10}^{15} + 1 = 7 × 11 × 13 × 211 × 241 × 2161 × 9091$.\n\nSo $s(10, 100) = 31$ and $s(10, 1000) = 483$.\n\nFind $\\sum s(n, {10}^8)$ for $1 ≤ n ≤ {10}^{11}$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeFactorsOfN15Plus1() {\n\n  return true;\n}\n\nprimeFactorsOfN15Plus1();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeFactorsOfN15Plus1()` should return `2304215802083466200`.",
          "testCode": "assert.strictEqual(primeFactorsOfN15Plus1(), 2304215802083466200);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302091,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-421-prime-factors-of-n151.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5131000cf542c510025",
      "title": "Problem 422: Sequence of points on a hyperbola",
      "challengeType": 1,
      "dashedName": "problem-422-sequence-of-points-on-a-hyperbola",
      "description": "Let $H$ be the hyperbola defined by the equation $12x^2 + 7xy - 12y^2 = 625$.\n\nNext, define $X$ as the point (7, 1). It can be seen that $X$ is in $H$.\n\nNow we define a sequence of points in $H, \\\\{P_i : i ≥ 1\\\\}$, as:\n\n- $P_1 = (13, \\frac{61}{4})$.\n- $P_2 = (\\frac{-43}{6}, -4)$.\n- For $i > 2$, $P_i$ is the unique point in $H$ that is different from $P_{i - 1}$ and such that line $P_iP_{i - 1}$ is parallel to line $P_{i - 2}X$. It can be shown that $P_i$ is well-defined, and that its coordinates are always rational.\n\n<img alt=\"animation showing defining points P_1 to P_6\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/sequence-of-points-on-a-hyperbola.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nYou are given that $P_3 = (\\frac{-19}{2}, \\frac{-229}{24})$, $P_4 = (\\frac{1267}{144}, \\frac{-37}{12})$ and $P_7 = (\\frac{17\\\\,194\\\\,218\\\\,091}{143\\\\,327\\\\,232}, \\frac{274\\\\,748\\\\,766\\\\,781}{1\\\\,719\\\\,926\\\\,784})$.\n\nFind $P_n$ for $n = {11}^{14}$ in the following format: If $P_n = (\\frac{a}{b}, \\frac{c}{d})$ where the fractions are in lowest terms and the denominators are positive, then the answer is $(a + b + c + d)\\bmod 1\\\\,000\\\\,000\\\\,007$.\n\nFor $n = 7$, the answer would have been: $806\\\\,236\\\\,837$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sequenceOfPointsOnHyperbola() {\n\n  return true;\n}\n\nsequenceOfPointsOnHyperbola();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sequenceOfPointsOnHyperbola()` should return `92060460`.",
          "testCode": "assert.strictEqual(sequenceOfPointsOnHyperbola(), 92060460);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302092,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-422-sequence-of-points-on-a-hyperbola.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5141000cf542c510027",
      "title": "Problem 423: Consecutive die throws",
      "challengeType": 1,
      "dashedName": "problem-423-consecutive-die-throws",
      "description": "Let $n$ be a positive integer.\n\nA 6-sided die is thrown $n$ times. Let $c$ be the number of pairs of consecutive throws that give the same value.\n\nFor example, if $n = 7$ and the values of the die throws are (1, 1, 5, 6, 6, 6, 3), then the following pairs of consecutive throws give the same value:\n\n$$\\begin{align}\n  & (\\underline{1}, \\underline{1}, 5, 6, 6, 6, 3) \\\\\\\\\n  & (1, 1, 5, \\underline{6}, \\underline{6}, 6, 3) \\\\\\\\\n  & (1, 1, 5, 6, \\underline{6}, \\underline{6}, 3)\n\\end{align}$$\n\nTherefore, $c = 3$ for (1, 1, 5, 6, 6, 6, 3).\n\nDefine $C(n)$ as the number of outcomes of throwing a 6-sided die $n$ times such that $c$ does not exceed $π(n)$.<sup>1</sup>\n\nFor example, $C(3) = 216$, $C(4) = 1290$, $C(11) = 361\\\\,912\\\\,500$ and $C(24) = 4\\\\,727\\\\,547\\\\,363\\\\,281\\\\,250\\\\,000$.\n\nDefine $S(L)$ as $\\sum C(n)$ for $1 ≤ n ≤ L$.\n\nFor example, $S(50)\\bmod 1\\\\,000\\\\,000\\\\,007 = 832\\\\,833\\\\,871$.\n\nFind $S(50\\\\,000\\\\,000)\\bmod 1\\\\,000\\\\,000\\\\,007$.\n\n<sup>1</sup> $π$ denotes the prime-counting function, i.e. $π(n)$ is the number of primes $≤ n$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function consecutiveDieThrows() {\n\n  return true;\n}\n\nconsecutiveDieThrows();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`consecutiveDieThrows()` should return `653972374`.",
          "testCode": "assert.strictEqual(consecutiveDieThrows(), 653972374);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302093,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-423-consecutive-die-throws.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5141000cf542c510026",
      "title": "Problem 424: Kakuro",
      "challengeType": 1,
      "dashedName": "problem-424-kakuro",
      "description": "<img alt=\"kakuro example\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/kakuro.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nThe above is an example of a cryptic kakuro (also known as cross sums, or even sums cross) puzzle, with its final solution on the right. (The common rules of kakuro puzzles can be found easily on numerous internet sites. Other related information can also be currently found at krazydad.com whose author has provided the puzzle data for this challenge.)\n\nThe `testPuzzles` array contains the description of 200 such puzzles, a mix of 5x5 and 6x6 types. The first puzzle in the file is the above example which is coded as string as follows:\n\n`6,X,X,(vCC),(vI),X,X,X,(hH),B,O,(vCA),(vJE),X,(hFE,vD),O,O,O,O,(hA),O,I,(hJC,vB),O,O,(hJC),H,O,O,O,X,X,X,(hJE),O,O,X`\n\nThe first character is a numerical digit indicating the size of the information grid. It would be either a 6 (for a 5x5 kakuro puzzle) or a 7 (for a 6x6 puzzle) followed by a comma (,). The extra top line and left column are needed to insert information.\n\nThe content of each cell is then described and followed by a comma, going left to right and starting with the top line.\n\n`X` = Gray cell, not required to be filled by a digit.\n\n`O` (upper case letter)= White empty cell to be filled by a digit.\n\n`A` = Or any one of the upper case letters from A to J to be replaced by its equivalent digit in the solved puzzle.\n\n`( )` = Location of the encrypted sums. Horizontal sums are preceded by a lower case \"h\" and vertical sums are preceded by a lower case \"v\". Those are followed by one or two upper case letters depending if the sum is a single digit or double digit one. For double digit sums, the first letter would be for the \"tens\" and the second one for the \"units\". When the cell must contain information for both a horizontal and a vertical sum, the first one is always for the horizontal sum and the two are separated by a comma within the same set of brackets, ex.: (hFE,vD). Each set of brackets is also immediately followed by a comma.\n\nThe description of the last cell is followed by a Carriage Return/Line Feed (CRLF) instead of a comma.\n\nThe required answer to each puzzle is based on the value of each letter necessary to arrive at the solution and according to the alphabetical order. As indicated under the example puzzle, its answer would be 8426039571. At least 9 out of the 10 encrypting letters are always part of the problem description. When only 9 are given, the missing one must be assigned the remaining digit.\n\nYou are given that the sum of the answers for the first 10 puzzles in `testPuzzles` is 64414157580.\n\nFind the sum of the answers for `puzzles` array.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function kakuro(puzzles) {\n\n  return true;\n}\n\nconst testPuzzles = [\n  '6,X,X,(vCC),(vI),X,X,X,(hH),B,O,(vCA),(vJE),X,(hFE,vD),O,O,O,O,(hA),O,I,(hJC,vB),O,O,(hJC),H,O,O,O,X,X,X,(hJE),O,O,X','7,X,X,X,X,(vJJ),(vCD),X,X,X,X,(hCG),O,O,(vCE),X,X,X,(hCI,vJB),C,O,O,X,(vB),(hJF,vJF),O,F,O,O,(hJA),F,G,O,O,X,X,(hCA),O,A,O,X,X,X,X,(hCF),O,O,X,X,X','7,X,X,X,(vE),(vCB),X,X,X,X,(hJ),O,O,(vCA),X,X,(vCH),(hCG,vCJ),O,O,O,(vJ),(hCE),O,O,O,(hJ,vGG),O,O,(hD),I,O,(hCD,vCB),H,O,O,X,(hCE),O,O,E,X,X,X,X,(hCE),O,O,X,X','6,X,X,X,(vEA),(vJF),X,X,X,(hI),O,O,(vJA),X,(vA),(hEI,vEB),O,O,O,(hIG),C,O,J,O,D,(hJD),O,O,O,X,X,X,(hJD),O,O,X,X','7,X,(vH),(vG),X,X,(vI),(vDH),(hG),B,O,(vDI),(hDB,vDE),O,O,(hBC),I,O,F,O,O,J,X,X,(hG),O,O,X,X,X,(vDG),(hH,vDD),O,O,(vDJ),(vC),(hBI),O,O,O,O,O,O,(hDJ),O,O,X,(hA),O,O','6,X,(vID),(vIJ),X,X,X,(hH),F,I,(vF),(vIA),X,(hIA),G,B,O,C,X,X,(hID),O,O,O,(vIF),X,(hIA),E,O,I,O,X,X,X,(hII),O,G','6,X,X,(vAF),(vAI),X,X,X,(hJ,vAC),O,B,(vGJ),X,(hGH),J,O,O,O,(vAF),(hAG),O,O,(hH,vF),A,D,X,(hGF),O,E,O,O,X,X,(hD),O,O,X','7,X,X,X,X,(vCE),(vGB),X,X,(vJG),(vCI),(hCD,vCJ),O,O,X,(hCI),O,O,O,O,B,(vJB),(hCF),O,O,O,(hCA,vH),O,O,(hCJ),O,O,(hJB,vCJ),O,O,O,X,(hJD),O,O,O,O,O,X,(hF),I,O,X,X,X','7,X,(vBB),(vBD),X,X,X,X,(hBB),C,E,(vEE),(vEC),X,X,(hBC),O,O,O,O,X,X,X,(hEF),H,O,A,(vJ),X,X,X,(hBD),O,O,O,(vI),X,X,(hBE),F,O,O,O,X,X,X,X,(hG),O,O','7,X,X,(vGG),(vGD),X,(vI),(vGI),X,(hGB),O,O,(hGH,vIC),O,O,X,(hGA),O,O,O,J,O,X,X,(hGI),O,O,X,X,X,(vGD),(hE,vE),O,O,(vGF),X,(hIH),O,O,O,O,O,X,(hE),A,O,(hGF),O,O,X','6,X,(vIJ),(vIE),X,X,X,(hF),O,C,(vIA),X,X,(hCA),O,O,D,(vIH),X,X,(hIB),E,O,O,(vF),X,X,(hD),O,A,O,X,X,X,(hID),O,G','6,X,(vAD),(vGI),(vI),X,X,(hB),O,O,O,(vAF),X,(hGC),O,O,O,O,(vGA),(hGE),O,O,(hJ,vB),O,O,X,(hGD),D,O,E,O,X,X,(hAI),O,C,O','6,X,X,X,(vAB),(vFA),X,X,X,(hHI),O,O,(vHJ),X,(vA),(hFJ,vHE),I,D,O,(hFH),O,O,O,O,O,(hHJ),O,O,O,X,X,X,(hC),O,J,X,X','7,X,X,X,(vJ),(vEF),X,X,X,X,(hI,vGD),C,E,(vEF),(vA),X,(hEH),O,O,O,O,O,X,(hH,vJ),O,O,(hJ,vEJ),O,O,(hD),O,A,(hEF,vEB),O,O,X,(hCC),O,O,A,O,O,X,X,X,(hH),O,O,X,X','7,X,X,X,(vAG),(vAJ),(vFH),X,X,X,(hFD),O,O,O,X,X,(vH),(hAJ,vAB),O,O,O,(vB),(hAH),O,H,O,(hC,vAI),O,O,(hE),O,O,(hAI,vAE),O,O,O,X,(hJ),O,O,O,X,X,X,(hFG),E,O,O,X,X','7,X,(vAI),(vHB),X,X,(vJE),(vAA),(hD),O,O,X,(hG),O,O,(hAJ),O,O,(vE),(hAA,vAI),O,O,X,(hHF),O,O,O,O,X,X,(hJF,vAE),O,O,O,J,(vH),(hAI),D,O,X,(hB),O,O,(hAG),O,O,X,(hAA),O,O','7,X,X,(vHJ),(vC),(vAF),X,X,X,(hHF),O,O,O,(vHI),(vHD),X,(hHB,vAB),O,O,O,O,E,(hAI),O,O,X,(hAB),O,O,(hD),O,O,(vAB),(hAI,vE),J,O,(hHH),O,O,O,B,O,X,X,X,(hG),O,A,O,X','6,X,X,(vDF),(vHE),X,X,X,(hHJ,vE),C,O,X,X,(hHI),O,O,O,(vDF),(vHH),(hFA),A,O,B,O,O,X,X,(hE),O,I,O,X,X,(hHH),O,O,X','6,X,(vA),(vA),X,X,X,(hE),O,O,(vCJ),X,X,(hG),O,O,O,(vHI),X,X,(hHC),O,O,H,(vB),X,X,(hCE),O,O,D,X,X,X,(hE),O,O','6,X,X,X,X,(vEH),(vEC),X,X,X,(hEB,vEJ),O,O,X,X,(hEC,vEF),O,O,B,X,(hDD,vEI),O,B,C,X,(hB),O,D,A,X,X,(hEC),O,O,X,X,X','6,X,X,X,X,(vIF),(vH),X,X,X,(hIJ,vGJ),B,I,X,X,(hIB,vIC),O,O,G,X,(hIA,vC),O,O,O,X,(hE),O,O,O,X,X,(hIA),E,O,X,X,X','7,X,(vC),(vFB),X,X,X,X,(hFH),O,O,(vFA),(vFJ),(vC),X,(hFJ),O,O,O,O,O,X,X,X,(hA,vJ),O,O,O,X,X,(hG),D,O,O,(vC),(vFC),X,(hBH),A,O,O,O,E,X,X,X,X,(hFH),O,I','6,X,X,(vFD),(vC),X,X,X,(hDH),E,F,(vDG),(vDD),X,(hDF,vDI),O,O,A,O,(hDG),O,O,(hDG,vDG),O,O,(hDJ),O,D,J,O,X,X,X,(hJ),E,O,X','6,X,X,X,(vE),(vGH),(vIC),X,X,(hD,vIG),O,O,A,X,(hIF,vJ),O,J,E,O,(hJ),O,D,(hGG,vGH),O,O,(hGG),O,O,O,O,X,(hIC),O,O,O,X,X','7,X,X,X,X,(vAG),(vJA),(vH),X,X,X,(hAJ,vDJ),O,O,O,X,X,(hJF),O,O,O,O,X,X,(hG),D,O,X,X,X,(vJH),(hJE,vJD),C,I,X,X,(hAE),B,O,O,O,X,X,(hAJ),O,O,E,X,X,X','7,X,X,X,X,(vGG),(vIA),(vGF),X,X,X,(hGF),O,O,D,X,X,X,(hGJ,vIB),O,O,O,X,X,(hGH,vGD),O,O,O,X,X,(hII,vC),O,J,O,X,X,(hIH),J,O,O,X,X,X,(hGE),O,I,O,X,X,X','6,X,X,(vFA),(vEC),X,X,X,(hI,vFI),F,O,X,X,(hDE),O,O,O,(vFF),(vFF),(hDI),G,J,O,F,O,X,X,(hFJ),O,D,O,X,X,(hFH),J,A,X','7,X,X,X,X,X,(vID),(vBB),X,X,X,X,(hBC),O,I,X,X,(vIH),(vBH),(hBF,vF),O,O,X,(hIE,vD),O,O,I,O,O,(hAG),O,O,O,O,F,X,(hA),O,O,X,X,X,X,(hD),O,O,X,X,X,X','7,X,(vCD),(vCC),X,X,X,X,(hE),B,C,(vCE),X,X,X,(hCD),O,O,O,(vE),(vCG),X,X,(hCH),O,O,O,O,X,X,(hFC),B,J,G,O,(vCC),X,X,X,(hCI),O,O,O,X,X,X,X,(hG),O,O','7,X,X,X,(vID),(vD),(vFB),X,X,X,(hIB,vID),O,O,O,X,X,(hJE,vIA),J,C,O,D,(vF),(hIB),O,O,X,(hIG),O,O,(hIJ),O,O,(vD),(hA,vID),O,O,X,(hJF),O,O,O,O,X,X,(hIE),O,O,O,X,X','7,X,X,(vAC),(vAH),X,X,X,X,(hD),O,O,(vAD),X,X,X,(hCH,vAD),O,O,O,(vAA),(vF),(hAC),O,H,(hAB,vAJ),O,O,A,(hAE),O,O,O,(hD,vAD),O,O,X,X,(hAC),O,O,O,X,X,X,X,(hG),O,O,X','6,X,X,(vBB),(vBE),X,X,X,(hBH),O,I,(vBG),(vBB),X,(hHE,vBD),H,D,O,O,(hBA),C,O,(hA,vG),O,O,(hBF),I,O,O,O,X,X,X,(hG),O,O,X','6,X,X,(vEC),(vD),X,X,X,(hD,vH),O,O,(vIB),X,(hIA),O,O,O,O,(vE),(hII),O,F,(hII,vIG),O,O,X,(hIH),O,O,O,O,X,X,(hIA),O,D,X','6,X,X,X,X,(vEH),(vEG),X,X,X,(hEB,vEF),O,O,X,X,(hAC,vG),O,B,O,X,(hEE,vEC),O,D,O,X,(hEE),O,O,O,X,X,(hEJ),D,O,X,X,X','6,X,(vD),(vB),X,X,X,(hA),O,O,(vE),X,X,(hE),A,O,O,(vCJ),X,X,(hCH),O,A,O,(vCI),X,X,(hB),O,D,O,X,X,X,(hCB),G,O','7,X,X,X,X,(vHJ),(vIF),(vIB),X,X,X,(hIH,vJI),O,O,J,X,X,(hIA),O,O,O,F,X,X,(hIG),O,C,X,X,X,(vD),(hA,vIB),O,J,X,X,(hHB),O,O,O,O,X,X,(hHB),O,O,O,X,X,X','7,X,X,X,(vBJ),(vIB),X,X,X,(vIF),(hBB,vBB),O,O,(vBA),X,(hIC),O,O,O,O,O,(vBA),(hBD),O,O,(hC,vC),O,O,O,(hBJ),E,O,O,(hBC,vBI),G,H,X,(hBA),O,O,O,O,O,X,X,(hBF),O,O,X,X','7,X,(vHI),(vHE),X,X,X,X,(hA),O,O,X,X,X,X,(hHG),O,O,(vHH),(vHE),(vIJ),X,(hHA),O,O,O,O,O,(vHI),X,(hID),H,O,O,B,I,X,X,X,X,(hHB),F,O,X,X,X,X,(hHE),O,H','6,X,X,(vAJ),(vAJ),X,X,X,(hAF,vAA),G,A,X,X,(hDA),O,O,O,(vDE),(vAH),(hAJ),O,O,O,O,I,X,X,(hAG),D,C,O,X,X,(hAI),O,O,X','6,X,X,X,X,(vDH),(vDA),X,X,X,(hG,vDG),O,E,X,X,(hBJ,vBC),O,O,O,X,(hBI,vE),O,E,O,X,(hE),O,O,O,X,X,(hDH),O,E,X,X,X','6,X,X,X,X,(vHJ),(vHH),X,X,X,(hHE,vCC),O,O,X,X,(hF,vG),A,O,O,X,(hHC,vHJ),O,B,O,X,(hHH),O,O,O,X,X,(hHI),O,O,X,X,X','7,X,(vJ),(vDG),X,X,(vDF),(vEF),(hC),E,B,X,(hEA),O,O,(hEE),C,O,(vH),(hED,vEF),A,O,X,(hEC),O,O,O,O,X,X,(hDD,vEF),O,O,O,O,(vEA),(hEJ),O,F,X,(hJ),O,O,(hEF),O,O,X,(hEF),O,O','7,X,X,X,(vCC),(vD),X,X,X,(vJE),(hI,vCH),O,O,(vBF),X,(hCC),O,O,O,O,A,(vJB),(hCB),G,O,O,(hJA,vJF),O,O,(hJA),O,O,(hG,vH),O,O,O,X,(hCE),O,O,O,O,O,X,X,(hH),O,O,X,X','7,X,X,(vEI),(vEB),(vG),X,X,X,(hEF),E,O,O,(vHE),X,X,(hEF,vH),O,O,O,O,(vEI),(hH),O,O,X,(hEH),O,B,(hG),O,O,(vG),(hEI,vED),O,O,X,(hAG),C,O,O,O,X,X,X,(hEE),O,O,O,X','6,X,X,X,X,(vJE),(vF),X,X,X,(hI,vJJ),O,O,X,X,(hEC,vJJ),H,O,O,X,(hF,vJB),O,O,O,X,(hJI),A,C,E,X,X,(hJD),O,J,X,X,X','6,X,X,X,(vH),(vAE),X,X,X,(hCB,vCJ),O,O,(vCB),X,(hCA,vD),O,O,O,O,(hD),C,O,(hCC,vJ),O,O,(hAB),A,O,F,O,X,X,(hB),G,O,X,X','6,X,X,(vEC),(vEG),X,X,X,(hEF),O,O,(vFC),(vEI),X,(hHJ,vJ),E,O,O,A,(hJ),O,O,(hEA,vEA),O,O,(hHH),O,O,O,B,X,X,X,(hEF),O,O,X','7,X,(vEI),(vEC),X,X,X,X,(hH),O,O,X,X,X,X,(hED),O,O,(vEB),(vEG),(vGB),X,(hEJ),O,O,O,O,O,(vD),X,(hIA),O,O,O,O,C,X,X,X,X,(hA),O,I,X,X,X,X,(hEB),A,O','7,X,X,X,(vF),(vG),(vIB),X,X,(vG),(hBA,vIH),J,I,D,X,(hBG),O,O,O,O,O,(vBG),(hA),O,O,X,(hE),O,O,(hBB),O,C,(vA),(hBI,vBE),O,O,X,(hBA),O,O,O,O,O,X,(hBF),O,O,O,X,X','7,X,X,(vEF),(vDI),X,X,X,X,(hDG),O,O,(vDA),X,X,X,(hEA,vG),O,O,O,(vEJ),(vJ),(hF),O,G,(hDH,vDI),O,O,F,(hED),O,O,O,(hDD,vB),O,O,X,X,(hDB),O,O,A,X,X,X,X,(hH),O,O,X','7,X,X,X,X,(vJH),(vD),(vAJ),X,X,X,(hAC,vDH),O,O,O,X,X,(hAA),O,O,O,O,X,X,(hC),F,O,X,X,X,(vC),(hAJ,vAA),I,H,X,X,(hJA),O,D,O,G,X,X,(hJB),O,C,O,X,X,X','6,X,X,X,(vDC),(vG),X,X,X,(hA),O,O,(vCH),X,(vCI),(hCB,vB),O,O,O,(hDF),O,H,O,O,O,(hH),O,O,O,X,X,X,(hH),J,O,X,X','6,X,X,(vCG),(vGA),X,X,X,(hE),O,O,(vGG),(vGB),X,(hCI,vF),O,O,O,I,(hGI),O,O,(hI,vD),O,A,(hGH),O,B,O,O,X,X,X,(hA),O,O,X','6,X,X,X,(vJ),(vHF),X,X,(vF),(hHG,vHD),O,A,X,(hHI),A,O,O,O,(vHE),(hB),G,O,(hD,vHE),O,F,X,(hGJ),O,O,O,O,X,(hHD),O,O,X,X','6,X,X,X,X,(vBD),(vD),X,X,X,(hD,vBB),O,O,X,X,(hI,vHD),O,O,O,X,(hHD,vBE),O,O,A,X,(hHF),C,O,G,X,X,(hBI),O,O,X,X,X','7,X,(vJ),(vFB),(vDB),X,X,X,(hFC),O,O,O,(vFE),X,X,(hFB),O,O,O,O,X,X,X,X,(hG),I,O,X,X,X,X,(hA),O,O,(vFG),(vE),X,X,(hDD),O,O,O,A,X,X,X,(hFD),D,E,J','6,X,X,X,(vAD),(vAH),X,X,(vB),(hF,vEB),O,O,X,(hED),O,O,O,O,(vD),(hD),O,O,(hJ,vI),O,O,X,(hEH),O,A,O,C,X,(hB),G,O,X,X','6,X,X,X,X,(vFG),(vFB),X,X,X,(hFD,vB),O,O,X,X,(hFG,vFG),O,O,O,X,(hI,vH),O,O,C,X,(hGA),E,H,O,X,X,(hD),O,G,X,X,X','7,X,X,X,(vBH),(vBB),X,X,X,X,(hBJ,vBJ),I,O,(vHE),(vI),X,(hBF,vBA),O,O,O,O,O,(hBE),O,D,X,(hA),O,O,(hBC),O,O,(vA),(hBB,vBH),O,O,(hDA),B,H,O,O,O,X,X,X,(hI),O,O,X,X','7,X,X,X,(vEC),(vD),X,X,X,(vJ),(hEB,vEJ),O,O,X,X,(hFC),O,O,O,F,(vEG),X,(hG),O,O,(hH,vFI),O,E,(vEH),X,(hEB),A,O,(hED,vJ),O,O,X,X,(hFI),O,O,O,O,X,X,(hED),O,O,X,X','6,X,(vGH),(vGG),X,X,X,(hGE),O,O,(vFI),(vGJ),X,(hGF),O,O,D,O,X,X,(hGB),O,C,O,(vGG),X,(hFG),O,O,O,O,X,X,X,(hE),O,I','7,X,X,X,(vF),(vGI),X,X,X,(vJ),(hB,vGA),H,G,X,X,(hHF),O,O,O,A,(vHH),X,(hB),O,O,(hGB,vGA),C,O,(vC),X,(hGC),O,O,(hGI,vGF),O,O,X,X,(hHB),O,E,O,O,X,X,(hA),O,O,X,X','7,X,X,X,X,X,(vED),(vIG),X,X,X,X,(hEC),O,O,X,X,(vAC),(vA),(hH,vEG),O,O,X,(hAE,vB),O,O,H,O,O,(hIJ),O,O,O,B,O,X,(hEC),O,O,X,X,X,X,(hEI),O,O,X,X,X,X','7,X,X,(vAI),(vAA),X,X,X,X,(hAD,vAG),O,O,(vAE),X,X,(hAH),O,O,O,O,(vBH),(vD),(hG),O,O,(hI,vE),O,O,O,(hAI),O,O,O,(hG,vAC),D,F,X,X,(hAH),O,O,O,O,X,X,X,(hAJ),O,O,X','7,X,X,(vGD),(vFB),(vJ),X,X,X,(hGD),O,O,O,(vFA),(vGG),X,(hFA),O,O,O,O,O,X,(hGE,vGF),O,O,(hH,vFB),O,O,(hH),O,G,(hGC,vD),O,G,X,(hEB),O,O,O,O,O,X,X,X,(hGC),O,A,O,X','6,X,X,(vAD),(vEE),X,X,X,(hEC),G,O,(vAJ),(vH),X,(hEC,vEG),O,A,O,O,(hEG),F,O,(hEG,vEG),O,O,(hAB),O,E,F,A,X,X,X,(hEG),O,O,X','6,X,X,X,X,(vIB),(vJ),X,X,X,(hB,vIJ),O,O,X,X,(hE,vIF),O,O,C,X,(hFC,vIF),O,A,O,X,(hG),O,O,H,X,X,(hIJ),O,O,X,X,X','6,X,X,X,(vIB),(vEB),X,X,X,(hD,vAE),O,O,(vE),X,(hIJ,vE),O,O,O,O,(hII),O,O,(hJ,vC),H,O,(hAE),O,O,G,J,X,X,(hC),O,O,X,X','6,X,X,(vFF),(vB),X,X,X,(hC,vI),O,J,(vJE),X,(hJJ),O,O,I,G,(vA),(hJJ),O,O,(hJD,vJE),O,O,X,(hJB),O,O,F,O,X,X,(hJH),C,J,X','7,X,X,X,(vEI),(vJI),X,X,X,X,(hJA),O,O,(vJE),(vJJ),X,X,(hJI,vJB),O,E,O,D,X,(hJI,vC),O,H,(hJB,vJE),O,O,(hB),O,O,(hF,vD),O,O,X,(hJB),O,O,O,O,X,X,X,X,(hJE),O,O,X,X','7,X,(vJB),(vFD),X,X,(vFE),(vH),(hJF),O,O,X,(hH),O,O,(hJC),O,O,(vH),(hJF,vJF),O,O,X,(hJI),H,O,O,O,X,X,(hFJ,vJJ),J,O,O,O,(vJA),(hA),G,O,X,(hJF),O,C,(hJC),O,O,X,(hD),O,O','7,X,(vI),(vDH),X,X,X,X,(hB),O,I,X,X,X,X,(hC),O,O,(vA),(vI),(vDJ),X,(hDH),O,B,O,O,O,(vDH),X,(hGG),O,O,O,J,O,X,X,X,X,(hHH),B,O,X,X,X,X,(hHE),O,O','6,X,X,(vDI),(vE),X,X,X,(hA,vDA),E,O,(vHI),X,(hHI),F,A,O,O,(vDF),(hDD),O,O,(hDJ,vDJ),O,O,X,(hDG),O,O,H,O,X,X,(hB),O,D,X','6,X,(vJ),(vDH),X,X,X,(hDA),G,O,(vDA),(vDB),X,(hDB),O,O,I,F,X,X,(hG),O,F,O,(vDI),X,(hED),G,O,O,F,X,X,X,(hDE),O,H','6,X,X,(vCJ),(vD),X,X,X,(hG),O,O,(vAD),(vAE),X,(hCC,vI),O,O,A,O,(hJ),O,F,(hAD,vAD),I,H,(hCD),O,O,O,F,X,X,X,(hAJ),O,G,X','7,X,X,X,X,(vEF),(vEC),(vF),X,X,X,(hED,vEB),O,O,O,X,X,(hEB),O,O,O,O,X,X,(hC),O,D,X,X,X,(vI),(hB,vEE),O,O,X,X,(hEB),E,H,D,O,X,X,(hHJ),O,G,O,X,X,X','7,X,X,X,X,(vJF),(vIC),X,X,X,(vIA),(hD,vJE),O,O,X,X,(hIJ,vD),J,O,O,D,(vG),(hJC),I,O,O,(hJA,vC),O,O,(hJF),J,C,(hJF,vJE),O,O,O,X,(hIB),O,O,O,O,X,X,(hJF),O,O,X,X,X','6,X,(vH),(vJE),X,X,X,(hC),J,O,(vJJ),(vJC),X,(hJJ),A,I,O,H,X,X,(hD),O,O,A,(vC),X,(hAI),F,B,O,O,X,X,X,(hC),J,O','7,X,(vA),(vEE),X,X,(vD),(vF),(hEC),O,O,(vIH),(hI,vEB),O,O,(hBD),O,O,O,O,F,O,X,X,(hA),O,O,X,X,X,(vJ),(hEJ,vEG),F,O,(vA),(vG),(hBG),O,O,O,O,O,O,(hEH),O,O,X,(hG),O,O','6,X,X,X,(vFG),(vFC),X,X,(vE),(hFE,vFF),A,O,X,(hBF),O,O,O,O,(vH),(hE),O,O,(hD,vFF),I,O,X,(hFF),O,O,E,D,X,(hFI),O,O,X,X','6,X,X,(vHA),(vFH),X,X,X,(hFF),O,O,(vFH),(vE),X,(hDI,vFG),O,O,O,O,(hFG),B,O,(hC,vFB),O,O,(hDC),O,G,O,F,X,X,X,(hFF),O,O,X','7,X,X,(vBE),(vBB),(vA),X,X,X,(hH),O,O,O,(vBA),(vH),X,(hGI,vBB),O,J,O,O,O,(hBG),O,O,X,(hI),O,O,(hC),O,O,(vBG),(hE,vBD),H,C,(hBI),O,O,O,O,O,X,X,X,(hGG),O,O,O,X','7,X,X,X,X,X,(vHC),(vF),X,X,X,X,(hF,vC),O,E,X,X,(vEJ),(hEF,vEG),F,O,H,X,(hHD),C,O,O,O,X,X,(hHC,vI),A,O,O,O,X,(hJ),D,O,O,X,X,X,(hF),O,O,X,X,X,X','6,X,X,(vH),(vDC),X,X,X,(hCI,vCD),O,O,X,X,(hH),O,O,O,(vCA),(vCB),(hCJ),O,I,O,D,E,X,X,(hDI),E,H,O,X,X,(hG),O,O,X','7,X,X,X,X,(vJ),(vHE),X,X,X,X,(hHA,vHF),O,B,(vHE),X,X,(hEC,vHG),O,O,O,O,X,(hHE,vHG),O,O,(hA,vHB),O,O,(hJ),O,O,(hHE,vJ),O,O,X,(hED),O,J,O,O,X,X,X,(hB),O,O,X,X,X','6,X,X,(vJG),(vA),X,X,X,(hI),B,O,(vJC),(vJH),X,(hJH,vJC),O,E,O,O,(hB),O,O,(hJJ,vF),O,O,(hCE),O,O,D,I,X,X,X,(hB),O,H,X','6,X,X,X,X,(vDG),(vHH),X,X,(vDH),(hJ,vHB),O,O,X,(hJF),O,O,O,O,X,(hHF,vE),O,O,O,X,(hDJ),H,O,O,I,X,(hHC),G,O,X,X,X','7,X,(vAI),(vHC),X,X,X,X,(hD),O,G,X,X,(vHI),(vG),(hAJ),O,O,(vB),(hH,vAH),O,O,X,(hHF,vH),O,O,F,O,O,(hCA),O,O,O,O,O,(vF),(hH),O,O,X,(hG),O,O,X,X,X,X,(hAH),O,O','7,X,X,X,X,(vFG),(vFI),X,X,X,X,(hFI,vFB),O,O,(vFJ),X,(vFA),(hFG,vGA),O,B,O,O,(hIB),O,O,O,(hH,vJ),O,O,(hJ),O,O,(hFD,vD),O,C,O,(hII),O,O,O,O,X,X,X,(hE),O,O,X,X,X','7,X,X,X,(vI),(vEG),(vFD),X,X,(vED),(hA,vEB),O,O,O,X,(hJC),O,O,A,O,O,X,(hEG),O,O,(hEG,vEC),O,O,(vB),X,(hH),O,O,(hJ,vEB),O,O,X,(hEI),O,O,O,O,J,X,(hFF),O,H,O,X,X','6,X,X,(vEI),(vEB),X,X,X,(hEC,vB),O,O,(vEB),X,(hHC),J,O,O,F,(vEC),(hH),O,O,(hB,vEC),O,O,X,(hEH),O,O,O,O,X,X,(hEA),D,O,X','6,X,X,(vAF),(vBF),X,X,X,(hBI),O,G,(vAD),(vBD),X,(hBI,vF),O,J,O,E,(hBB),A,G,(hBI,vBI),O,H,(hAJ),B,O,O,O,X,X,X,(hBA),O,O,X','6,X,(vCB),(vJ),X,X,X,(hCE),A,O,(vCI),X,X,(hCG),D,O,O,(vCC),X,X,(hCA),O,O,O,(vB),X,X,(hB),O,E,G,X,X,X,(hG),O,H','7,X,X,X,X,X,(vFI),(vHG),X,X,X,X,(hHJ,vHH),O,O,X,X,(vHC),(hHD,vHG),O,O,O,X,(hHH),O,O,O,O,X,X,(hFE,vHC),O,O,O,D,X,(hHE),H,O,O,X,X,X,(hHE),I,A,X,X,X,X','7,X,X,(vFA),(vC),X,X,X,X,(hE),O,B,(vAC),(vGJ),X,X,(hFF,vG),O,O,O,O,(vAI),(hAA),O,D,(hAB,vAC),O,O,O,(hAH),O,O,O,(hAB,vAB),O,O,X,(hFJ),O,O,O,O,X,X,X,X,(hAH),O,J,X','7,X,X,X,(vIF),(vIB),X,X,X,X,(hID),O,O,(vC),X,X,(vIF),(hIH,vEE),O,O,O,(vII),(hEB),O,O,O,(hIB,vIF),D,J,(hIF),O,O,(hII,vIE),O,O,O,X,(hJ),O,G,O,X,X,X,X,(hIF),O,O,X,X','7,X,(vDJ),(vDB),X,X,X,X,(hDJ),O,O,(vDF),(vCE),(vI),X,(hCH),O,O,O,O,O,X,X,X,(hDC,vDB),O,A,G,X,X,(hFE),O,O,O,(vDJ),(vI),X,(hCF),O,O,O,O,O,X,X,X,X,(hDE),O,O','6,X,X,(vCI),(vJ),X,X,X,(hA),O,E,(vEG),(vCC),X,(hEG,vCF),O,O,D,O,(hJ),C,G,(hB,vCC),C,O,(hED),O,O,A,O,X,X,X,(hCD),O,O,X','6,X,X,X,(vG),(vFE),X,X,X,(hG,vBC),O,O,(vBC),X,(hFJ,vC),O,E,O,I,(hG),O,O,(hBF,vBC),O,O,(hEJ),O,O,O,O,X,X,(hBA),D,O,X,X','6,X,X,(vAJ),(vE),X,X,X,(hFH,vH),O,O,(vFA),X,(hFH),O,O,O,O,(vFI),(hI),O,C,(hFI,vFD),O,O,X,(hAC),O,O,I,G,X,X,(hC),O,O,X','6,X,X,X,(vE),(vCJ),X,X,(vFF),(hA,vHJ),C,O,X,(hFC),O,O,O,F,(vD),(hFI),O,O,(hFE,vFJ),O,O,X,(hFG),O,O,O,O,X,(hFD),O,O,X,X','7,X,X,X,(vBJ),(vBI),X,X,X,X,(hA),O,O,(vCH),(vBJ),X,(vCJ),(hCB,vG),H,O,I,B,(hBA),O,O,O,(hBE,vG),O,O,(hBB),F,O,(hBE,vBI),O,O,O,(hBI),O,O,O,O,X,X,X,X,(hBC),O,O,X,X','6,X,X,(vCJ),(vD),X,X,X,(hH),O,O,(vBD),(vJ),X,(hCI,vCH),O,J,F,O,(hCG),O,E,(hA,vCD),O,F,(hBF),O,O,O,O,X,X,X,(hCG),O,O,X','6,X,X,X,X,(vJB),(vG),X,X,X,(hA,vH),I,O,X,X,(hCD,vCG),O,O,B,X,(hCF,vCD),O,O,O,X,(hJD),O,H,O,X,X,(hB),O,O,X,X,X','7,X,(vI),(vEH),X,X,(vCC),(vF),(hG),O,O,X,(hH),O,C,(hJ),O,O,(vAD),(hAG,vG),O,O,X,(hEI),F,O,O,O,X,X,(hAD,vAB),O,O,I,O,(vI),(hG),O,O,X,(hC),O,O,(hAJ),O,O,X,(hAA),O,O','7,X,X,X,X,X,(vEC),(vEA),X,X,X,X,(hB),O,O,X,X,(vDF),(vEH),(hEC,vH),H,O,X,(hEA,vI),O,B,E,O,O,(hDB),E,J,O,D,O,X,(hEH),O,A,X,X,X,X,(hI),O,O,X,X,X,X','6,X,X,X,(vBC),(vBC),X,X,X,(hBJ,vEC),H,O,(vBB),X,(hBE,vA),D,J,O,O,(hC),O,O,(hBE,vBG),O,O,(hEG),H,O,B,O,X,X,(hBI),O,O,X,X','7,X,(vE),(vCF),X,X,X,X,(hJ),O,O,(vFB),X,X,X,(hCJ),O,O,A,(vFE),(vCA),X,X,(hIH),O,O,O,O,X,X,(hFF),O,O,O,B,(vFA),X,X,X,(hCI),O,O,O,X,X,X,X,(hFG),O,O','7,X,X,X,X,(vBH),(vH),X,X,X,X,(hI),O,O,(vE),X,X,X,(hJG,vBF),O,O,O,X,(vH),(hBA,vJE),O,O,O,O,(hDG),O,O,O,O,X,X,(hBG),O,F,O,X,X,X,X,(hA),J,O,X,X,X','7,X,X,X,X,X,(vIC),(vA),X,X,X,(vII),(hG,vIH),F,I,X,X,(hIG),O,O,O,D,X,X,(hC,vC),O,O,J,X,X,(hIF,vE),O,G,A,X,X,(hIH),O,O,O,O,X,X,(hJ),F,D,X,X,X,X','7,X,X,X,(vH),(vCJ),X,X,X,(vCG),(hCB,vEG),O,O,X,X,(hEF),O,I,O,O,(vCI),X,(hCD),O,J,(hCB,vCJ),E,O,(vCC),X,(hCE),O,O,(hCI,vH),O,O,X,X,(hEB),O,O,O,O,X,X,(hD),O,O,X,X','6,X,(vGA),(vBE),X,X,X,(hGC),H,O,(vGF),X,X,(hGG),O,O,O,(vGD),X,X,(hBG),O,J,O,(vGD),X,X,(hGD),O,O,E,X,X,X,(hGH),O,O','6,X,X,(vEE),(vEJ),X,X,X,(hI,vEF),O,O,(vEH),X,(hEA),O,O,O,E,(vB),(hEE),O,O,(hB,vB),O,O,X,(hEG),A,O,I,O,X,X,(hA),D,B,X','6,X,(vJ),(vHA),X,X,X,(hHH),D,O,(vHG),X,X,(hI),O,O,F,(vDG),X,X,(hDJ),O,O,O,(vHF),X,X,(hHF),O,O,E,X,X,X,(hHE),B,O','6,X,X,X,X,(vFI),(vE),X,X,X,(hH,vA),J,I,X,X,(hGF,vD),O,O,F,X,(hGF,vC),O,O,A,X,(hD),O,O,O,X,X,(hD),O,O,X,X,X','7,X,X,(vHG),(vE),X,X,X,X,(hGD),O,O,(vGA),(vHC),(vAJ),X,(hGD,vAC),O,O,O,O,O,(hGC),O,O,(hAA,vGC),O,O,O,(hAC),O,O,F,(hGD,vD),O,O,(hHB),O,O,O,O,O,X,X,X,X,(hI),O,D,X','7,X,X,(vBG),(vBJ),X,(vBD),(vE),X,(hC),O,O,(hBB,vAG),O,C,X,(hBE),O,O,O,O,D,X,(hBG),O,O,O,(vBE),X,X,(vE),(hBI,vJ),O,O,O,X,(hCG),F,G,O,O,O,X,(hC),O,O,(hBJ),O,O,X','7,X,X,X,X,X,(vEA),(vJJ),X,X,(vED),(vJI),(hF),O,O,X,(hB),O,O,(hJH,vB),O,O,X,(hED),O,B,O,O,X,X,(hJI,vJI),O,O,C,O,X,(hJH),O,O,(hJJ),O,O,X,(hF),J,E,X,X,X,X','6,X,(vF),(vED),X,X,X,(hEI),O,O,(vEA),X,X,(hEJ),O,O,J,(vB),X,X,(hB),O,O,O,(vG),X,X,(hJ),B,O,C,X,X,X,(hF),O,E','6,X,X,X,X,(vCH),(vCD),X,X,X,(hG,vCH),O,O,X,X,(hCH,vCI),O,O,O,X,(hFA,vCE),O,O,J,X,(hFF),O,O,O,X,X,(hI),F,C,X,X,X','6,X,X,(vCH),(vA),X,X,X,(hE,vE),D,O,(vAG),(vHC),(hHB),O,O,C,O,I,(hHA),O,O,(hE,vJ),O,O,(hCH),A,O,O,O,O,X,X,(hHD),O,O,X','7,X,(vF),(vDG),(vGD),X,X,X,(hA),O,D,O,(vI),(vGE),X,(hDG),O,C,O,O,O,X,(hGC),H,O,(hH,vA),O,O,(vGF),X,(hH),O,O,(hGB,vGD),O,O,X,(hDH),O,D,O,O,O,X,X,X,(hA),O,O,G','7,X,X,X,X,(vIG),(vIG),X,X,X,X,(hCJ),O,O,(vCE),X,X,X,(hIE,vEA),O,O,O,X,(vJ),(hEA,vIE),O,O,O,O,(hCH),O,F,O,O,X,X,(hCH),I,B,O,X,X,X,X,(hCH),O,O,X,X,X','7,X,X,X,X,(vJ),(vDB),X,X,X,X,(hDG,vH),O,O,X,X,(vB),(hJ,vEB),E,O,O,(vG),(hDJ),O,F,D,(hI,vDC),O,O,(hA),O,O,(hJ,vA),O,O,I,X,(hDA),O,O,O,X,X,X,(hDH),O,O,X,X,X','6,X,X,X,(vEE),(vJA),(vEI),X,X,(hD,vEE),O,F,O,X,(hED,vEC),O,O,O,O,(hJ),O,O,(hEH,vEI),O,O,(hIB),O,O,O,O,X,(hII),O,O,O,X,X','6,X,(vE),(vGH),X,X,X,(hC),O,J,(vFJ),X,X,(hGH),O,O,O,(vJ),X,X,(hFA),B,O,I,(vFF),X,X,(hFG),O,O,O,X,X,X,(hB),F,G','6,X,X,(vIF),(vIJ),X,X,X,(hD,vIC),O,O,X,X,(hIB),O,O,O,(vIG),(vA),(hBF),O,O,F,I,O,X,X,(hE),D,O,F,X,X,(hIF),O,C,X','7,X,(vCD),(vB),X,X,X,X,(hII),O,D,(vA),X,X,X,(hIJ),O,O,O,(vII),X,X,(hID),O,O,O,O,(vIJ),(vCJ),X,X,(hCA),H,O,F,O,X,X,X,(hA),O,O,G,X,X,X,X,(hII),J,O','7,X,(vC),(vFF),X,X,(vHF),(vD),(hFD),O,O,(vHG),(hA,vFJ),O,O,(hHF),O,O,O,O,O,O,X,X,(hFG,vFH),O,O,O,X,X,(hFB,vI),O,O,O,(vFB),(vB),(hIG),O,O,O,O,D,J,(hG),O,I,X,(hFE),O,O','7,X,(vHJ),(vDE),X,X,(vDI),(vHH),(hHG),O,J,(vHJ),(hJ),O,O,(hHE),O,O,O,(hHJ,vB),O,O,X,(hHH),O,O,O,O,X,X,(hDJ,vHA),D,O,E,O,(vF),(hHJ),O,O,(hA),O,O,E,(hHA),O,O,X,(hI),O,O','7,X,(vEH),(vFA),X,X,X,X,(hEB),O,O,(vFA),X,X,X,(hFD),O,O,O,(vEE),(vID),X,X,(hFB),O,O,O,O,X,X,(hFJ),O,O,O,O,(vEE),X,X,X,(hJ),O,B,O,X,X,X,X,(hEH),C,O','6,X,(vJ),(vE),X,X,X,(hA),B,C,(vCJ),X,X,(hCG),O,O,O,(vCD),X,X,(hHF),O,O,O,(vJ),X,X,(hE),O,O,H,X,X,X,(hCE),O,O','6,X,(vGC),(vGH),X,X,X,(hGG),O,O,(vGB),X,X,(hGI),E,O,I,(vGG),X,X,(hIJ),O,C,O,(vA),X,X,(hD),G,O,O,X,X,X,(hD),O,O','6,X,X,X,X,(vIG),(vII),X,X,X,(hE,vIA),I,G,X,X,(hGJ,vGF),O,C,O,X,(hIE,vII),D,O,O,X,(hGJ),O,B,O,X,X,(hA),O,J,X,X,X','6,X,X,X,X,(vIA),(vE),X,X,(vJB),(hB,vII),I,J,X,(hIF),O,O,O,H,X,(hIB,vG),D,J,O,X,(hJG),C,O,O,F,X,(hB),O,O,X,X,X','7,X,X,X,(vDB),(vGG),X,X,X,X,(hGH),O,O,(vGA),(vGA),X,X,(hGF,vGA),O,O,O,O,X,(hGA,vGE),B,O,(hGD,vI),O,O,(hJ),O,I,(hGE,vGG),O,O,X,(hDA),O,D,O,O,X,X,X,X,(hF),O,O,X,X','6,X,X,X,(vFB),(vI),X,X,X,(hGF),O,O,(vGA),X,(vH),(hGA,vFD),O,O,O,(hFF),O,A,O,O,C,(hGG),O,J,O,X,X,X,(hGH),O,D,X,X','6,X,X,(vGA),(vA),X,X,X,(hB,vGE),O,O,(vHJ),X,(hBD),O,O,O,O,(vGH),(hGC),O,O,(hGJ,vGE),O,O,X,(hGG),O,F,O,O,X,X,(hGC),O,O,X','7,X,X,(vCE),(vG),(vI),X,X,X,(hEE),A,O,E,(vCD),(vCH),X,(hEG,vCD),O,O,O,O,O,(hA),G,C,X,(hEH),O,O,(hEE),O,O,(vI),(hA,vD),O,O,(hCF),O,O,O,O,O,X,X,X,(hED),O,O,B,X','7,X,(vG),(vDC),X,(vBA),(vDG),X,(hJ),O,G,(hDA,vBA),O,O,X,(hBC),O,O,G,O,O,X,X,(hDH),O,O,O,(vG),X,X,X,(hG,vDI),O,O,O,(vJ),X,(hBB),E,O,O,O,O,X,(hH),O,J,(hB),O,O','6,X,X,X,(vJG),(vCG),X,X,(vJG),(hJB,vJH),O,O,X,(hJH),I,B,O,O,(vD),(hJB),O,O,(hA,vJG),O,O,X,(hJB),O,B,O,O,X,(hF),I,C,X,X','7,X,(vA),(vE),X,X,(vD),(vB),(hF),O,O,(vJJ),(hI,vGD),O,O,(hGD),O,O,O,O,I,O,X,X,(hJI),O,O,X,X,X,(vJE),(hA,vF),I,O,(vD),(vJJ),(hGA),O,O,O,J,O,O,(hH),O,O,X,(hI),O,O','7,X,X,(vEH),(vEF),X,X,X,X,(hEI,vIH),O,O,(vEI),X,X,(hEI),O,O,O,O,(vIE),(vEJ),(hD),O,O,(hEH,vH),O,O,O,(hEC),O,O,O,(hD,vC),H,G,X,X,(hIA),O,O,O,O,X,X,X,(hD),E,O,X','7,X,X,X,X,X,(vEA),(vCJ),X,X,X,X,(hCD,vCC),O,O,X,X,(vCI),(hCJ,vEH),O,O,O,X,(hDH),O,J,B,O,X,X,(hCH,vD),O,O,O,O,X,(hCJ),O,O,O,X,X,X,(hJ),O,G,X,X,X,X','7,X,(vB),(vFF),X,(vEI),(vFE),X,(hH),O,O,(hFC,vIB),G,O,X,(hFC),O,O,O,O,O,X,X,X,(hFH),O,D,X,X,X,X,(hFF,vFG),O,O,(vFE),(vFH),X,(hEE),O,O,J,O,O,X,(hFG),O,O,(hFG),O,O','6,X,(vHE),(vII),X,X,X,(hHB),O,O,(vHF),(vHJ),X,(hHD),B,O,O,O,X,X,(hG),H,O,O,(vHE),X,(hCA),O,O,E,B,X,X,X,(hHB),O,G','6,X,(vH),(vAF),X,X,X,(hAC),O,O,(vAD),X,X,(hDI),J,O,O,(vAH),X,X,(hAC),O,O,O,(vAI),X,X,(hH),O,O,B,X,X,X,(hAH),O,E','6,X,(vC),(vHA),X,X,X,(hC),O,J,(vHA),X,X,(hF),J,O,O,(vHC),X,X,(hI),O,J,O,(vF),X,X,(hEJ),O,O,B,X,X,X,(hG),O,O','6,X,X,X,(vFJ),(vJC),X,X,(vFF),(hFF,vJE),O,O,X,(hFH),O,F,O,O,(vD),(hFI),O,C,(hE,vH),D,O,X,(hJC),O,O,O,A,X,(hFG),O,J,X,X','7,X,X,X,X,X,(vDE),(vBB),X,(vC),(vDF),X,(hBF),O,O,(hH),O,O,(vE),(hH,vBI),B,O,(hDF),O,O,O,O,D,(vE),X,(hDI,vBE),O,O,C,O,B,(hBF),O,A,X,(hG),E,D,(hG),O,O,X,X,X,X','7,X,(vJ),(vFH),X,X,X,X,(hHH),F,A,X,X,(vGE),(vA),(hI),O,O,(vC),(hF,vD),O,O,X,(hHC,vF),H,O,O,O,O,(hGJ),O,O,O,O,O,(vE),(hE),O,O,X,(hHI),O,O,X,X,X,X,(hA),O,O','7,X,X,(vCD),(vCB),(vF),X,X,X,(hCA,vCJ),O,O,O,(vFH),X,(hCD),O,O,O,O,O,(vCB),(hH),O,O,X,(hI),O,O,(hCE),O,B,(vCE),(hCH,vCI),O,G,X,(hFA),O,G,O,O,O,X,X,(hBC),H,O,O,X','6,X,X,X,X,(vHD),(vHH),X,X,X,(hA,vHH),H,I,X,X,(hHJ,vIG),O,C,O,X,(hHC,vE),O,O,O,X,(hIG),J,O,O,X,X,(hHF),O,O,X,X,X','6,X,X,(vFD),(vJB),X,X,X,(hH,vH),O,O,(vJD),X,(hFH),O,O,O,O,(vJI),(hJD),O,O,(hJD,vG),J,E,X,(hJD),O,O,O,O,X,X,(hB),A,O,X','6,X,X,X,(vC),(vDC),X,X,(vF),(hHB,vDI),O,O,(vDJ),(hDG),O,O,E,O,O,(hHA),O,O,(hHD,vG),O,O,(hEJ),O,O,F,O,O,X,(hJ),O,O,X,X','7,X,X,X,X,X,(vEJ),(vG),X,X,X,X,(hD,vI),C,O,X,X,(vEG),(hFE,vFE),O,O,O,X,(hFD),O,O,O,O,X,X,(hEC,vFI),O,O,O,O,X,(hEC),B,O,H,X,X,X,(hJ),O,O,X,X,X,X','7,X,(vI),(vAC),X,X,(vAI),(vCG),(hB),O,I,X,(hCB,vCD),O,O,(hH),A,D,(hCD,vAF),O,O,O,X,(hAC),O,O,O,O,X,X,(hCF,vCC),O,O,O,O,(vB),(hCB),O,O,O,(hCF),O,O,(hCB),O,J,X,(hB),O,O','6,X,X,X,(vJB),(vIG),X,X,(vA),(hJI,vJC),O,F,X,(hJB),O,O,O,O,(vJE),(hJD),B,O,(hJB,vD),O,H,X,(hJG),O,I,O,O,X,(hA),O,E,X,X','7,X,X,X,X,(vCD),(vCC),(vB),X,X,X,(hCC,vEC),O,I,O,X,X,(hCH),C,O,O,O,X,X,(hCA),F,O,X,X,X,(vA),(hCH,vCE),O,E,X,X,(hGA),C,O,O,O,X,X,(hCE),O,O,O,X,X,X','6,X,X,X,X,(vJI),(vA),X,X,(vJH),(hJE,vJI),O,G,X,(hJE),F,O,O,D,X,(hC,vB),O,E,O,X,(hJH),O,O,O,O,X,(hJD),O,E,X,X,X','6,X,X,X,X,(vAJ),(vAJ),X,X,X,(hAF,vGB),O,O,X,X,(hAE,vD),O,O,O,X,(hAJ,vF),O,J,O,X,(hAF),O,O,H,X,X,(hB),O,I,X,X,X','7,X,X,X,X,(vH),(vIE),X,X,X,X,(hA,vA),O,O,X,X,(vID),(hF,vCH),O,O,A,(vIE),(hIH),O,O,O,(hIA,vIH),O,O,(hIE),O,O,(hIG,vIA),B,O,O,X,(hIF),O,G,A,X,X,X,(hIE),O,D,X,X,X','7,X,(vEF),(vB),(vFC),X,X,X,(hH),O,O,O,(vEA),X,X,(hED),C,O,O,O,X,X,X,X,(hEG),O,F,X,X,X,X,(hEI),O,O,(vEH),(vI),X,X,(hFH),O,O,O,O,X,X,X,(hEE),O,I,O','6,X,(vHI),(vDG),X,X,X,(hHE),J,O,(vDG),X,X,(hHC),H,O,O,(vHA),X,X,(hDH),F,O,G,(vHE),X,X,(hHC),O,O,O,X,X,X,(hHE),O,O','6,X,X,(vAD),(vAE),X,X,X,(hAA),O,O,(vAD),(vAA),X,(hAI,vI),O,F,D,J,(hC),A,O,(hB,vJ),A,E,(hAB),O,I,C,J,X,X,X,(hI),O,H,X','6,X,X,(vDA),(vE),X,X,X,(hJ,vDE),O,F,(vGG),X,(hDJ),O,O,O,O,(vC),(hDD),O,O,(hJ,vI),O,O,X,(hGG),O,D,O,O,X,X,(hDA),G,B,X','7,X,X,(vJD),(vG),(vI),X,X,X,(hG),O,O,H,(vEB),(vEF),X,(hEB),O,O,B,O,J,X,(hEJ,vA),O,H,(hEE,vEA),O,O,(hA),O,O,(hEJ,vG),O,O,X,(hJF),O,O,O,O,O,X,X,X,(hG),F,O,O,X','6,X,X,X,X,(vEJ),(vG),X,X,X,(hDE,vF),O,O,X,X,(hDJ,vF),O,O,O,X,(hA,vDA),O,O,O,X,(hDI),B,O,O,X,X,(hDE),C,O,X,X,X','6,X,X,(vAC),(vD),X,X,X,(hD,vEI),O,O,(vBC),X,(hBA),O,O,O,O,(vH),(hEF),O,O,(hEI,vF),O,O,X,(hEF),O,O,A,O,X,X,(hEE),G,D,X','6,X,X,(vGB),(vD),X,X,X,(hGG),A,C,(vGJ),(vC),X,(hGG,vGC),O,O,O,J,(hGH),O,O,(hE,vI),G,H,(hHF),O,H,O,O,X,X,X,(hE),O,O,X','6,X,X,(vIJ),(vCD),X,X,X,(hCD),O,O,(vCI),(vCG),X,(hIH,vCC),G,O,O,O,(hCE),O,I,(hCH,vCD),G,O,(hIC),B,D,O,O,X,X,X,(hA),O,O,X','7,X,(vII),(vDH),(vID),X,X,X,(hIG),O,O,O,X,X,X,(hDA),O,C,J,(vII),X,X,X,(hID),F,O,O,(vDH),X,X,X,(hID),O,O,O,(vID),X,X,X,(hIE),A,O,O,X,X,X,(hDD),O,O,O','7,X,(vEB),(vF),X,X,X,X,(hED),O,O,(vAJ),(vED),(vD),X,(hIB),O,O,O,G,O,X,X,X,(hF,vA),O,O,O,X,X,(hED),O,O,F,(vA),(vEB),X,(hIE),O,H,O,O,O,X,X,X,X,(hEE),O,O','7,X,X,X,X,(vCA),(vCE),(vB),X,X,X,(hF),O,O,O,X,X,X,(hJG,vCD),I,O,O,X,X,(hF,vB),O,O,O,X,X,(hJI,vCI),O,F,O,X,X,(hD),O,O,O,X,X,X,(hCI),O,O,O,X,X,X','6,X,(vJI),(vI),X,X,X,(hH),O,O,(vD),X,X,(hJA),F,O,O,(vJH),X,X,(hJI),C,G,O,(vJJ),X,X,(hD),O,O,O,X,X,X,(hJE),O,O','6,X,X,X,(vDC),(vAE),X,X,X,(hI),O,B,(vI),X,(vC),(hJ,vDE),O,O,O,(hAF),A,D,O,O,O,(hI),O,O,G,X,X,X,(hDA),H,O,X,X','7,X,X,X,(vFD),(vAF),X,X,X,(vFD),(hFE,vFA),B,O,X,X,(hHI),O,O,O,O,(vFF),X,(hFI),O,O,(hC,vG),O,H,(vFA),X,(hE),O,O,(hFB,vC),O,O,X,X,(hFJ),O,G,O,O,X,X,(hH),O,O,X,X','7,X,X,X,X,(vD),(vHD),X,X,X,(vDH),(hA,vJJ),O,O,(vE),X,(hHB,vJH),O,O,O,E,J,(hJE),H,O,O,(hD,vF),O,O,(hJG),E,O,(hJE,vJG),C,O,O,(hHH),J,O,O,O,O,X,X,(hJJ),O,O,X,X,X','7,X,X,X,X,(vBA),(vEB),X,X,X,(vBG),(hC,vBB),O,O,X,X,(hBD,vBA),O,O,O,O,(vBJ),(hBC),O,O,O,(hBG,vBD),A,O,(hBB),O,O,(hEE,vBF),O,O,D,X,(hBJ),O,O,O,I,X,X,(hBD),O,O,X,X,X','7,X,X,X,X,X,(vDG),(vC),X,(vB),(vFH),X,(hC),E,O,(hA),O,O,(vDD),(hH,vDB),O,O,(hDA),C,O,O,O,O,(vE),X,(hFH,vDE),O,O,H,O,F,(hDH),O,O,X,(hDI),O,O,(hJ),O,O,X,X,X,X','6,X,(vB),(vE),X,X,X,(hA),D,O,(vA),X,X,(hH),O,C,O,(vIG),X,X,(hDI),O,O,O,(vDF),X,X,(hIF),O,O,O,X,X,X,(hH),O,O','7,X,(vHF),(vC),X,X,(vC),(vHF),(hC),O,O,(vBC),(hA,vBF),O,O,(hBE),O,O,O,O,O,O,X,X,(hHD),A,O,X,X,X,(vD),(hJ,vHA),O,O,(vHI),(vC),(hCH),J,O,O,O,O,B,(hHH),O,O,X,(hE),O,O','6,X,X,X,(vJ),(vDA),X,X,(vFD),(hB,vFE),O,O,(vDA),(hDJ),O,O,O,O,O,(hDE),O,O,(hDA,vC),O,H,(hBA),O,I,O,G,O,X,(hJ),E,O,X,X','6,X,(vGA),(vA),X,X,X,(hGE),O,O,(vGD),X,X,(hGA),O,G,A,(vED),X,X,(hGE),O,O,O,(vGD),X,X,(hEB),C,H,F,X,X,X,(hGE),A,I','6,X,(vIC),(vFD),X,X,X,(hIG),O,C,(vIB),X,X,(hFJ),O,O,O,(vII),X,X,(hIE),O,O,F,(vIA),X,X,(hIJ),F,I,O,X,X,X,(hIC),O,O','6,X,X,X,(vJG),(vHH),X,X,X,(hHA),O,O,(vHD),X,(vE),(hJF,vHJ),O,O,O,(hHB),F,O,D,O,O,(hE),O,J,O,X,X,X,(hHE),I,O,X,X','7,X,X,X,(vGG),(vI),(vEC),X,X,(vBH),(hJ,vBI),O,O,O,X,(hBJ),O,O,O,O,O,(vJ),(hGJ),O,O,X,(hA),O,O,(hGC),O,O,(vC),(hGB,vGJ),O,O,X,(hBF),O,O,O,O,B,X,(hBH),O,O,O,X,X','7,X,X,X,X,X,(vD),(vHB),X,X,(vG),(vFC),(hHA,vAI),O,O,X,(hAB),O,O,O,O,O,X,(hAD),O,O,O,(vHB),X,X,(vF),(hAF,vHI),O,O,O,X,(hAB),O,O,O,O,O,X,(hB),O,E,X,X,X,X','6,X,(vBC),(vDF),X,X,X,(hBE),O,O,(vDB),X,X,(hDG),O,J,O,(vC),X,X,(hBI),O,O,O,(vBB),X,X,(hBA),O,O,D,X,X,X,(hBG),F,O','6,X,X,X,(vH),(vDC),(vGA),X,X,(hA,vIE),O,O,O,X,(hIG,vGG),O,O,O,O,(hF),O,O,(hGF,vJ),J,O,(hGA),O,O,O,O,X,(hIE),O,O,O,X,X','6,X,(vHC),(vHJ),X,X,X,(hHC),A,B,(vA),X,X,(hHI),O,O,O,(vHA),X,X,(hD),F,O,O,(vB),X,X,(hII),G,O,O,X,X,X,(hB),O,O','7,X,(vH),(vJA),X,X,(vIE),(vJI),(hJC),O,O,(vDG),(hJE,vIG),O,O,(hDD),I,O,O,O,O,O,X,X,(hII,vIG),O,O,O,X,X,(hIE,vJA),O,O,O,(vB),(vJI),(hDG),C,O,O,O,O,O,(hJF),O,O,X,(hH),O,O','7,X,(vHH),(vBE),X,X,X,X,(hE),B,O,X,(vHF),(vBJ),X,(hHI),C,O,(hJ,vHI),O,O,X,X,(hBC),D,O,O,O,X,X,(hHH),O,O,D,O,(vHF),X,(hHD),F,O,(hHD),G,O,X,X,X,X,(hHE),O,O','7,X,X,X,X,X,(vIF),(vI),X,X,X,X,(hB,vGF),O,O,X,X,(vEG),(hGG,vB),O,O,O,X,(hGJ),O,O,O,H,X,X,(hGA,vA),O,O,O,O,X,(hGC),I,H,O,X,X,X,(hH),G,J,X,X,X,X','7,X,X,X,X,X,(vJF),(vJF),X,X,X,X,(hJD),A,O,X,X,(vBG),(vJB),(hI,vI),O,O,X,(hBD,vJF),F,O,O,E,O,(hIB),O,O,O,O,C,X,(hJG),O,B,X,X,X,X,(hI),O,J,X,X,X,X','6,X,X,(vEI),(vC),X,X,X,(hH,vGG),O,O,(vGD),X,(hBJ),O,O,O,O,(vD),(hGI),O,O,(hD,vD),E,G,X,(hBG),O,O,A,O,X,X,(hJ),O,O,X','7,X,X,X,X,(vFI),(vJF),X,X,X,X,(hJH),O,O,(vJC),X,X,X,(hEE,vEC),O,O,O,X,(vJE),(hED,vEF),O,O,O,G,(hJB),O,O,O,O,X,X,(hEH),O,O,G,X,X,X,X,(hJG),O,O,X,X,X','7,X,X,X,(vJ),(vEI),X,X,X,X,(hJ,vEC),O,A,(vBD),X,X,(hHC,vEA),O,O,O,I,(vF),(hEE),O,O,(hEE,vHD),B,J,O,(hHE),O,O,O,(hG,vED),O,O,X,(hHD),O,O,O,O,X,X,X,(hEA),O,O,X,X','7,X,X,X,X,X,(vFH),(vED),X,X,X,X,(hEC,vEA),O,O,X,X,(vED),(hFI,vEH),O,O,O,X,(hEE),O,O,A,D,X,X,(hFB,vJ),O,O,O,J,X,(hFI),O,O,O,X,X,X,(hI),O,A,X,X,X,X','6,X,(vB),(vHI),X,X,X,(hHH),O,O,(vHJ),(vGA),X,(hHH),O,O,O,I,X,X,(hGE),O,A,O,(vHE),X,(hHJ),H,B,F,D,X,X,X,(hHJ),O,C'\n]\n\nkakuro(testPuzzles);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`kakuro(testPuzzles)` should return `1059760019628`.",
          "testCode": "assert.strictEqual(kakuro(_testPuzzles), 1059760019628);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302094,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-424-kakuro.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _testPuzzles = [\n  '6,X,X,(vCC),(vI),X,X,X,(hH),B,O,(vCA),(vJE),X,(hFE,vD),O,O,O,O,(hA),O,I,(hJC,vB),O,O,(hJC),H,O,O,O,X,X,X,(hJE),O,O,X','7,X,X,X,X,(vJJ),(vCD),X,X,X,X,(hCG),O,O,(vCE),X,X,X,(hCI,vJB),C,O,O,X,(vB),(hJF,vJF),O,F,O,O,(hJA),F,G,O,O,X,X,(hCA),O,A,O,X,X,X,X,(hCF),O,O,X,X,X','7,X,X,X,(vE),(vCB),X,X,X,X,(hJ),O,O,(vCA),X,X,(vCH),(hCG,vCJ),O,O,O,(vJ),(hCE),O,O,O,(hJ,vGG),O,O,(hD),I,O,(hCD,vCB),H,O,O,X,(hCE),O,O,E,X,X,X,X,(hCE),O,O,X,X','6,X,X,X,(vEA),(vJF),X,X,X,(hI),O,O,(vJA),X,(vA),(hEI,vEB),O,O,O,(hIG),C,O,J,O,D,(hJD),O,O,O,X,X,X,(hJD),O,O,X,X','7,X,(vH),(vG),X,X,(vI),(vDH),(hG),B,O,(vDI),(hDB,vDE),O,O,(hBC),I,O,F,O,O,J,X,X,(hG),O,O,X,X,X,(vDG),(hH,vDD),O,O,(vDJ),(vC),(hBI),O,O,O,O,O,O,(hDJ),O,O,X,(hA),O,O','6,X,(vID),(vIJ),X,X,X,(hH),F,I,(vF),(vIA),X,(hIA),G,B,O,C,X,X,(hID),O,O,O,(vIF),X,(hIA),E,O,I,O,X,X,X,(hII),O,G','6,X,X,(vAF),(vAI),X,X,X,(hJ,vAC),O,B,(vGJ),X,(hGH),J,O,O,O,(vAF),(hAG),O,O,(hH,vF),A,D,X,(hGF),O,E,O,O,X,X,(hD),O,O,X','7,X,X,X,X,(vCE),(vGB),X,X,(vJG),(vCI),(hCD,vCJ),O,O,X,(hCI),O,O,O,O,B,(vJB),(hCF),O,O,O,(hCA,vH),O,O,(hCJ),O,O,(hJB,vCJ),O,O,O,X,(hJD),O,O,O,O,O,X,(hF),I,O,X,X,X','7,X,(vBB),(vBD),X,X,X,X,(hBB),C,E,(vEE),(vEC),X,X,(hBC),O,O,O,O,X,X,X,(hEF),H,O,A,(vJ),X,X,X,(hBD),O,O,O,(vI),X,X,(hBE),F,O,O,O,X,X,X,X,(hG),O,O','7,X,X,(vGG),(vGD),X,(vI),(vGI),X,(hGB),O,O,(hGH,vIC),O,O,X,(hGA),O,O,O,J,O,X,X,(hGI),O,O,X,X,X,(vGD),(hE,vE),O,O,(vGF),X,(hIH),O,O,O,O,O,X,(hE),A,O,(hGF),O,O,X','6,X,(vIJ),(vIE),X,X,X,(hF),O,C,(vIA),X,X,(hCA),O,O,D,(vIH),X,X,(hIB),E,O,O,(vF),X,X,(hD),O,A,O,X,X,X,(hID),O,G','6,X,(vAD),(vGI),(vI),X,X,(hB),O,O,O,(vAF),X,(hGC),O,O,O,O,(vGA),(hGE),O,O,(hJ,vB),O,O,X,(hGD),D,O,E,O,X,X,(hAI),O,C,O','6,X,X,X,(vAB),(vFA),X,X,X,(hHI),O,O,(vHJ),X,(vA),(hFJ,vHE),I,D,O,(hFH),O,O,O,O,O,(hHJ),O,O,O,X,X,X,(hC),O,J,X,X','7,X,X,X,(vJ),(vEF),X,X,X,X,(hI,vGD),C,E,(vEF),(vA),X,(hEH),O,O,O,O,O,X,(hH,vJ),O,O,(hJ,vEJ),O,O,(hD),O,A,(hEF,vEB),O,O,X,(hCC),O,O,A,O,O,X,X,X,(hH),O,O,X,X','7,X,X,X,(vAG),(vAJ),(vFH),X,X,X,(hFD),O,O,O,X,X,(vH),(hAJ,vAB),O,O,O,(vB),(hAH),O,H,O,(hC,vAI),O,O,(hE),O,O,(hAI,vAE),O,O,O,X,(hJ),O,O,O,X,X,X,(hFG),E,O,O,X,X','7,X,(vAI),(vHB),X,X,(vJE),(vAA),(hD),O,O,X,(hG),O,O,(hAJ),O,O,(vE),(hAA,vAI),O,O,X,(hHF),O,O,O,O,X,X,(hJF,vAE),O,O,O,J,(vH),(hAI),D,O,X,(hB),O,O,(hAG),O,O,X,(hAA),O,O','7,X,X,(vHJ),(vC),(vAF),X,X,X,(hHF),O,O,O,(vHI),(vHD),X,(hHB,vAB),O,O,O,O,E,(hAI),O,O,X,(hAB),O,O,(hD),O,O,(vAB),(hAI,vE),J,O,(hHH),O,O,O,B,O,X,X,X,(hG),O,A,O,X','6,X,X,(vDF),(vHE),X,X,X,(hHJ,vE),C,O,X,X,(hHI),O,O,O,(vDF),(vHH),(hFA),A,O,B,O,O,X,X,(hE),O,I,O,X,X,(hHH),O,O,X','6,X,(vA),(vA),X,X,X,(hE),O,O,(vCJ),X,X,(hG),O,O,O,(vHI),X,X,(hHC),O,O,H,(vB),X,X,(hCE),O,O,D,X,X,X,(hE),O,O','6,X,X,X,X,(vEH),(vEC),X,X,X,(hEB,vEJ),O,O,X,X,(hEC,vEF),O,O,B,X,(hDD,vEI),O,B,C,X,(hB),O,D,A,X,X,(hEC),O,O,X,X,X','6,X,X,X,X,(vIF),(vH),X,X,X,(hIJ,vGJ),B,I,X,X,(hIB,vIC),O,O,G,X,(hIA,vC),O,O,O,X,(hE),O,O,O,X,X,(hIA),E,O,X,X,X','7,X,(vC),(vFB),X,X,X,X,(hFH),O,O,(vFA),(vFJ),(vC),X,(hFJ),O,O,O,O,O,X,X,X,(hA,vJ),O,O,O,X,X,(hG),D,O,O,(vC),(vFC),X,(hBH),A,O,O,O,E,X,X,X,X,(hFH),O,I','6,X,X,(vFD),(vC),X,X,X,(hDH),E,F,(vDG),(vDD),X,(hDF,vDI),O,O,A,O,(hDG),O,O,(hDG,vDG),O,O,(hDJ),O,D,J,O,X,X,X,(hJ),E,O,X','6,X,X,X,(vE),(vGH),(vIC),X,X,(hD,vIG),O,O,A,X,(hIF,vJ),O,J,E,O,(hJ),O,D,(hGG,vGH),O,O,(hGG),O,O,O,O,X,(hIC),O,O,O,X,X','7,X,X,X,X,(vAG),(vJA),(vH),X,X,X,(hAJ,vDJ),O,O,O,X,X,(hJF),O,O,O,O,X,X,(hG),D,O,X,X,X,(vJH),(hJE,vJD),C,I,X,X,(hAE),B,O,O,O,X,X,(hAJ),O,O,E,X,X,X','7,X,X,X,X,(vGG),(vIA),(vGF),X,X,X,(hGF),O,O,D,X,X,X,(hGJ,vIB),O,O,O,X,X,(hGH,vGD),O,O,O,X,X,(hII,vC),O,J,O,X,X,(hIH),J,O,O,X,X,X,(hGE),O,I,O,X,X,X','6,X,X,(vFA),(vEC),X,X,X,(hI,vFI),F,O,X,X,(hDE),O,O,O,(vFF),(vFF),(hDI),G,J,O,F,O,X,X,(hFJ),O,D,O,X,X,(hFH),J,A,X','7,X,X,X,X,X,(vID),(vBB),X,X,X,X,(hBC),O,I,X,X,(vIH),(vBH),(hBF,vF),O,O,X,(hIE,vD),O,O,I,O,O,(hAG),O,O,O,O,F,X,(hA),O,O,X,X,X,X,(hD),O,O,X,X,X,X','7,X,(vCD),(vCC),X,X,X,X,(hE),B,C,(vCE),X,X,X,(hCD),O,O,O,(vE),(vCG),X,X,(hCH),O,O,O,O,X,X,(hFC),B,J,G,O,(vCC),X,X,X,(hCI),O,O,O,X,X,X,X,(hG),O,O','7,X,X,X,(vID),(vD),(vFB),X,X,X,(hIB,vID),O,O,O,X,X,(hJE,vIA),J,C,O,D,(vF),(hIB),O,O,X,(hIG),O,O,(hIJ),O,O,(vD),(hA,vID),O,O,X,(hJF),O,O,O,O,X,X,(hIE),O,O,O,X,X','7,X,X,(vAC),(vAH),X,X,X,X,(hD),O,O,(vAD),X,X,X,(hCH,vAD),O,O,O,(vAA),(vF),(hAC),O,H,(hAB,vAJ),O,O,A,(hAE),O,O,O,(hD,vAD),O,O,X,X,(hAC),O,O,O,X,X,X,X,(hG),O,O,X','6,X,X,(vBB),(vBE),X,X,X,(hBH),O,I,(vBG),(vBB),X,(hHE,vBD),H,D,O,O,(hBA),C,O,(hA,vG),O,O,(hBF),I,O,O,O,X,X,X,(hG),O,O,X','6,X,X,(vEC),(vD),X,X,X,(hD,vH),O,O,(vIB),X,(hIA),O,O,O,O,(vE),(hII),O,F,(hII,vIG),O,O,X,(hIH),O,O,O,O,X,X,(hIA),O,D,X','6,X,X,X,X,(vEH),(vEG),X,X,X,(hEB,vEF),O,O,X,X,(hAC,vG),O,B,O,X,(hEE,vEC),O,D,O,X,(hEE),O,O,O,X,X,(hEJ),D,O,X,X,X','6,X,(vD),(vB),X,X,X,(hA),O,O,(vE),X,X,(hE),A,O,O,(vCJ),X,X,(hCH),O,A,O,(vCI),X,X,(hB),O,D,O,X,X,X,(hCB),G,O','7,X,X,X,X,(vHJ),(vIF),(vIB),X,X,X,(hIH,vJI),O,O,J,X,X,(hIA),O,O,O,F,X,X,(hIG),O,C,X,X,X,(vD),(hA,vIB),O,J,X,X,(hHB),O,O,O,O,X,X,(hHB),O,O,O,X,X,X','7,X,X,X,(vBJ),(vIB),X,X,X,(vIF),(hBB,vBB),O,O,(vBA),X,(hIC),O,O,O,O,O,(vBA),(hBD),O,O,(hC,vC),O,O,O,(hBJ),E,O,O,(hBC,vBI),G,H,X,(hBA),O,O,O,O,O,X,X,(hBF),O,O,X,X','7,X,(vHI),(vHE),X,X,X,X,(hA),O,O,X,X,X,X,(hHG),O,O,(vHH),(vHE),(vIJ),X,(hHA),O,O,O,O,O,(vHI),X,(hID),H,O,O,B,I,X,X,X,X,(hHB),F,O,X,X,X,X,(hHE),O,H','6,X,X,(vAJ),(vAJ),X,X,X,(hAF,vAA),G,A,X,X,(hDA),O,O,O,(vDE),(vAH),(hAJ),O,O,O,O,I,X,X,(hAG),D,C,O,X,X,(hAI),O,O,X','6,X,X,X,X,(vDH),(vDA),X,X,X,(hG,vDG),O,E,X,X,(hBJ,vBC),O,O,O,X,(hBI,vE),O,E,O,X,(hE),O,O,O,X,X,(hDH),O,E,X,X,X','6,X,X,X,X,(vHJ),(vHH),X,X,X,(hHE,vCC),O,O,X,X,(hF,vG),A,O,O,X,(hHC,vHJ),O,B,O,X,(hHH),O,O,O,X,X,(hHI),O,O,X,X,X','7,X,(vJ),(vDG),X,X,(vDF),(vEF),(hC),E,B,X,(hEA),O,O,(hEE),C,O,(vH),(hED,vEF),A,O,X,(hEC),O,O,O,O,X,X,(hDD,vEF),O,O,O,O,(vEA),(hEJ),O,F,X,(hJ),O,O,(hEF),O,O,X,(hEF),O,O','7,X,X,X,(vCC),(vD),X,X,X,(vJE),(hI,vCH),O,O,(vBF),X,(hCC),O,O,O,O,A,(vJB),(hCB),G,O,O,(hJA,vJF),O,O,(hJA),O,O,(hG,vH),O,O,O,X,(hCE),O,O,O,O,O,X,X,(hH),O,O,X,X','7,X,X,(vEI),(vEB),(vG),X,X,X,(hEF),E,O,O,(vHE),X,X,(hEF,vH),O,O,O,O,(vEI),(hH),O,O,X,(hEH),O,B,(hG),O,O,(vG),(hEI,vED),O,O,X,(hAG),C,O,O,O,X,X,X,(hEE),O,O,O,X','6,X,X,X,X,(vJE),(vF),X,X,X,(hI,vJJ),O,O,X,X,(hEC,vJJ),H,O,O,X,(hF,vJB),O,O,O,X,(hJI),A,C,E,X,X,(hJD),O,J,X,X,X','6,X,X,X,(vH),(vAE),X,X,X,(hCB,vCJ),O,O,(vCB),X,(hCA,vD),O,O,O,O,(hD),C,O,(hCC,vJ),O,O,(hAB),A,O,F,O,X,X,(hB),G,O,X,X','6,X,X,(vEC),(vEG),X,X,X,(hEF),O,O,(vFC),(vEI),X,(hHJ,vJ),E,O,O,A,(hJ),O,O,(hEA,vEA),O,O,(hHH),O,O,O,B,X,X,X,(hEF),O,O,X','7,X,(vEI),(vEC),X,X,X,X,(hH),O,O,X,X,X,X,(hED),O,O,(vEB),(vEG),(vGB),X,(hEJ),O,O,O,O,O,(vD),X,(hIA),O,O,O,O,C,X,X,X,X,(hA),O,I,X,X,X,X,(hEB),A,O','7,X,X,X,(vF),(vG),(vIB),X,X,(vG),(hBA,vIH),J,I,D,X,(hBG),O,O,O,O,O,(vBG),(hA),O,O,X,(hE),O,O,(hBB),O,C,(vA),(hBI,vBE),O,O,X,(hBA),O,O,O,O,O,X,(hBF),O,O,O,X,X','7,X,X,(vEF),(vDI),X,X,X,X,(hDG),O,O,(vDA),X,X,X,(hEA,vG),O,O,O,(vEJ),(vJ),(hF),O,G,(hDH,vDI),O,O,F,(hED),O,O,O,(hDD,vB),O,O,X,X,(hDB),O,O,A,X,X,X,X,(hH),O,O,X','7,X,X,X,X,(vJH),(vD),(vAJ),X,X,X,(hAC,vDH),O,O,O,X,X,(hAA),O,O,O,O,X,X,(hC),F,O,X,X,X,(vC),(hAJ,vAA),I,H,X,X,(hJA),O,D,O,G,X,X,(hJB),O,C,O,X,X,X','6,X,X,X,(vDC),(vG),X,X,X,(hA),O,O,(vCH),X,(vCI),(hCB,vB),O,O,O,(hDF),O,H,O,O,O,(hH),O,O,O,X,X,X,(hH),J,O,X,X','6,X,X,(vCG),(vGA),X,X,X,(hE),O,O,(vGG),(vGB),X,(hCI,vF),O,O,O,I,(hGI),O,O,(hI,vD),O,A,(hGH),O,B,O,O,X,X,X,(hA),O,O,X','6,X,X,X,(vJ),(vHF),X,X,(vF),(hHG,vHD),O,A,X,(hHI),A,O,O,O,(vHE),(hB),G,O,(hD,vHE),O,F,X,(hGJ),O,O,O,O,X,(hHD),O,O,X,X','6,X,X,X,X,(vBD),(vD),X,X,X,(hD,vBB),O,O,X,X,(hI,vHD),O,O,O,X,(hHD,vBE),O,O,A,X,(hHF),C,O,G,X,X,(hBI),O,O,X,X,X','7,X,(vJ),(vFB),(vDB),X,X,X,(hFC),O,O,O,(vFE),X,X,(hFB),O,O,O,O,X,X,X,X,(hG),I,O,X,X,X,X,(hA),O,O,(vFG),(vE),X,X,(hDD),O,O,O,A,X,X,X,(hFD),D,E,J','6,X,X,X,(vAD),(vAH),X,X,(vB),(hF,vEB),O,O,X,(hED),O,O,O,O,(vD),(hD),O,O,(hJ,vI),O,O,X,(hEH),O,A,O,C,X,(hB),G,O,X,X','6,X,X,X,X,(vFG),(vFB),X,X,X,(hFD,vB),O,O,X,X,(hFG,vFG),O,O,O,X,(hI,vH),O,O,C,X,(hGA),E,H,O,X,X,(hD),O,G,X,X,X','7,X,X,X,(vBH),(vBB),X,X,X,X,(hBJ,vBJ),I,O,(vHE),(vI),X,(hBF,vBA),O,O,O,O,O,(hBE),O,D,X,(hA),O,O,(hBC),O,O,(vA),(hBB,vBH),O,O,(hDA),B,H,O,O,O,X,X,X,(hI),O,O,X,X','7,X,X,X,(vEC),(vD),X,X,X,(vJ),(hEB,vEJ),O,O,X,X,(hFC),O,O,O,F,(vEG),X,(hG),O,O,(hH,vFI),O,E,(vEH),X,(hEB),A,O,(hED,vJ),O,O,X,X,(hFI),O,O,O,O,X,X,(hED),O,O,X,X','6,X,(vGH),(vGG),X,X,X,(hGE),O,O,(vFI),(vGJ),X,(hGF),O,O,D,O,X,X,(hGB),O,C,O,(vGG),X,(hFG),O,O,O,O,X,X,X,(hE),O,I','7,X,X,X,(vF),(vGI),X,X,X,(vJ),(hB,vGA),H,G,X,X,(hHF),O,O,O,A,(vHH),X,(hB),O,O,(hGB,vGA),C,O,(vC),X,(hGC),O,O,(hGI,vGF),O,O,X,X,(hHB),O,E,O,O,X,X,(hA),O,O,X,X','7,X,X,X,X,X,(vED),(vIG),X,X,X,X,(hEC),O,O,X,X,(vAC),(vA),(hH,vEG),O,O,X,(hAE,vB),O,O,H,O,O,(hIJ),O,O,O,B,O,X,(hEC),O,O,X,X,X,X,(hEI),O,O,X,X,X,X','7,X,X,(vAI),(vAA),X,X,X,X,(hAD,vAG),O,O,(vAE),X,X,(hAH),O,O,O,O,(vBH),(vD),(hG),O,O,(hI,vE),O,O,O,(hAI),O,O,O,(hG,vAC),D,F,X,X,(hAH),O,O,O,O,X,X,X,(hAJ),O,O,X','7,X,X,(vGD),(vFB),(vJ),X,X,X,(hGD),O,O,O,(vFA),(vGG),X,(hFA),O,O,O,O,O,X,(hGE,vGF),O,O,(hH,vFB),O,O,(hH),O,G,(hGC,vD),O,G,X,(hEB),O,O,O,O,O,X,X,X,(hGC),O,A,O,X','6,X,X,(vAD),(vEE),X,X,X,(hEC),G,O,(vAJ),(vH),X,(hEC,vEG),O,A,O,O,(hEG),F,O,(hEG,vEG),O,O,(hAB),O,E,F,A,X,X,X,(hEG),O,O,X','6,X,X,X,X,(vIB),(vJ),X,X,X,(hB,vIJ),O,O,X,X,(hE,vIF),O,O,C,X,(hFC,vIF),O,A,O,X,(hG),O,O,H,X,X,(hIJ),O,O,X,X,X','6,X,X,X,(vIB),(vEB),X,X,X,(hD,vAE),O,O,(vE),X,(hIJ,vE),O,O,O,O,(hII),O,O,(hJ,vC),H,O,(hAE),O,O,G,J,X,X,(hC),O,O,X,X','6,X,X,(vFF),(vB),X,X,X,(hC,vI),O,J,(vJE),X,(hJJ),O,O,I,G,(vA),(hJJ),O,O,(hJD,vJE),O,O,X,(hJB),O,O,F,O,X,X,(hJH),C,J,X','7,X,X,X,(vEI),(vJI),X,X,X,X,(hJA),O,O,(vJE),(vJJ),X,X,(hJI,vJB),O,E,O,D,X,(hJI,vC),O,H,(hJB,vJE),O,O,(hB),O,O,(hF,vD),O,O,X,(hJB),O,O,O,O,X,X,X,X,(hJE),O,O,X,X','7,X,(vJB),(vFD),X,X,(vFE),(vH),(hJF),O,O,X,(hH),O,O,(hJC),O,O,(vH),(hJF,vJF),O,O,X,(hJI),H,O,O,O,X,X,(hFJ,vJJ),J,O,O,O,(vJA),(hA),G,O,X,(hJF),O,C,(hJC),O,O,X,(hD),O,O','7,X,(vI),(vDH),X,X,X,X,(hB),O,I,X,X,X,X,(hC),O,O,(vA),(vI),(vDJ),X,(hDH),O,B,O,O,O,(vDH),X,(hGG),O,O,O,J,O,X,X,X,X,(hHH),B,O,X,X,X,X,(hHE),O,O','6,X,X,(vDI),(vE),X,X,X,(hA,vDA),E,O,(vHI),X,(hHI),F,A,O,O,(vDF),(hDD),O,O,(hDJ,vDJ),O,O,X,(hDG),O,O,H,O,X,X,(hB),O,D,X','6,X,(vJ),(vDH),X,X,X,(hDA),G,O,(vDA),(vDB),X,(hDB),O,O,I,F,X,X,(hG),O,F,O,(vDI),X,(hED),G,O,O,F,X,X,X,(hDE),O,H','6,X,X,(vCJ),(vD),X,X,X,(hG),O,O,(vAD),(vAE),X,(hCC,vI),O,O,A,O,(hJ),O,F,(hAD,vAD),I,H,(hCD),O,O,O,F,X,X,X,(hAJ),O,G,X','7,X,X,X,X,(vEF),(vEC),(vF),X,X,X,(hED,vEB),O,O,O,X,X,(hEB),O,O,O,O,X,X,(hC),O,D,X,X,X,(vI),(hB,vEE),O,O,X,X,(hEB),E,H,D,O,X,X,(hHJ),O,G,O,X,X,X','7,X,X,X,X,(vJF),(vIC),X,X,X,(vIA),(hD,vJE),O,O,X,X,(hIJ,vD),J,O,O,D,(vG),(hJC),I,O,O,(hJA,vC),O,O,(hJF),J,C,(hJF,vJE),O,O,O,X,(hIB),O,O,O,O,X,X,(hJF),O,O,X,X,X','6,X,(vH),(vJE),X,X,X,(hC),J,O,(vJJ),(vJC),X,(hJJ),A,I,O,H,X,X,(hD),O,O,A,(vC),X,(hAI),F,B,O,O,X,X,X,(hC),J,O','7,X,(vA),(vEE),X,X,(vD),(vF),(hEC),O,O,(vIH),(hI,vEB),O,O,(hBD),O,O,O,O,F,O,X,X,(hA),O,O,X,X,X,(vJ),(hEJ,vEG),F,O,(vA),(vG),(hBG),O,O,O,O,O,O,(hEH),O,O,X,(hG),O,O','6,X,X,X,(vFG),(vFC),X,X,(vE),(hFE,vFF),A,O,X,(hBF),O,O,O,O,(vH),(hE),O,O,(hD,vFF),I,O,X,(hFF),O,O,E,D,X,(hFI),O,O,X,X','6,X,X,(vHA),(vFH),X,X,X,(hFF),O,O,(vFH),(vE),X,(hDI,vFG),O,O,O,O,(hFG),B,O,(hC,vFB),O,O,(hDC),O,G,O,F,X,X,X,(hFF),O,O,X','7,X,X,(vBE),(vBB),(vA),X,X,X,(hH),O,O,O,(vBA),(vH),X,(hGI,vBB),O,J,O,O,O,(hBG),O,O,X,(hI),O,O,(hC),O,O,(vBG),(hE,vBD),H,C,(hBI),O,O,O,O,O,X,X,X,(hGG),O,O,O,X','7,X,X,X,X,X,(vHC),(vF),X,X,X,X,(hF,vC),O,E,X,X,(vEJ),(hEF,vEG),F,O,H,X,(hHD),C,O,O,O,X,X,(hHC,vI),A,O,O,O,X,(hJ),D,O,O,X,X,X,(hF),O,O,X,X,X,X','6,X,X,(vH),(vDC),X,X,X,(hCI,vCD),O,O,X,X,(hH),O,O,O,(vCA),(vCB),(hCJ),O,I,O,D,E,X,X,(hDI),E,H,O,X,X,(hG),O,O,X','7,X,X,X,X,(vJ),(vHE),X,X,X,X,(hHA,vHF),O,B,(vHE),X,X,(hEC,vHG),O,O,O,O,X,(hHE,vHG),O,O,(hA,vHB),O,O,(hJ),O,O,(hHE,vJ),O,O,X,(hED),O,J,O,O,X,X,X,(hB),O,O,X,X,X','6,X,X,(vJG),(vA),X,X,X,(hI),B,O,(vJC),(vJH),X,(hJH,vJC),O,E,O,O,(hB),O,O,(hJJ,vF),O,O,(hCE),O,O,D,I,X,X,X,(hB),O,H,X','6,X,X,X,X,(vDG),(vHH),X,X,(vDH),(hJ,vHB),O,O,X,(hJF),O,O,O,O,X,(hHF,vE),O,O,O,X,(hDJ),H,O,O,I,X,(hHC),G,O,X,X,X','7,X,(vAI),(vHC),X,X,X,X,(hD),O,G,X,X,(vHI),(vG),(hAJ),O,O,(vB),(hH,vAH),O,O,X,(hHF,vH),O,O,F,O,O,(hCA),O,O,O,O,O,(vF),(hH),O,O,X,(hG),O,O,X,X,X,X,(hAH),O,O','7,X,X,X,X,(vFG),(vFI),X,X,X,X,(hFI,vFB),O,O,(vFJ),X,(vFA),(hFG,vGA),O,B,O,O,(hIB),O,O,O,(hH,vJ),O,O,(hJ),O,O,(hFD,vD),O,C,O,(hII),O,O,O,O,X,X,X,(hE),O,O,X,X,X','7,X,X,X,(vI),(vEG),(vFD),X,X,(vED),(hA,vEB),O,O,O,X,(hJC),O,O,A,O,O,X,(hEG),O,O,(hEG,vEC),O,O,(vB),X,(hH),O,O,(hJ,vEB),O,O,X,(hEI),O,O,O,O,J,X,(hFF),O,H,O,X,X','6,X,X,(vEI),(vEB),X,X,X,(hEC,vB),O,O,(vEB),X,(hHC),J,O,O,F,(vEC),(hH),O,O,(hB,vEC),O,O,X,(hEH),O,O,O,O,X,X,(hEA),D,O,X','6,X,X,(vAF),(vBF),X,X,X,(hBI),O,G,(vAD),(vBD),X,(hBI,vF),O,J,O,E,(hBB),A,G,(hBI,vBI),O,H,(hAJ),B,O,O,O,X,X,X,(hBA),O,O,X','6,X,(vCB),(vJ),X,X,X,(hCE),A,O,(vCI),X,X,(hCG),D,O,O,(vCC),X,X,(hCA),O,O,O,(vB),X,X,(hB),O,E,G,X,X,X,(hG),O,H','7,X,X,X,X,X,(vFI),(vHG),X,X,X,X,(hHJ,vHH),O,O,X,X,(vHC),(hHD,vHG),O,O,O,X,(hHH),O,O,O,O,X,X,(hFE,vHC),O,O,O,D,X,(hHE),H,O,O,X,X,X,(hHE),I,A,X,X,X,X','7,X,X,(vFA),(vC),X,X,X,X,(hE),O,B,(vAC),(vGJ),X,X,(hFF,vG),O,O,O,O,(vAI),(hAA),O,D,(hAB,vAC),O,O,O,(hAH),O,O,O,(hAB,vAB),O,O,X,(hFJ),O,O,O,O,X,X,X,X,(hAH),O,J,X','7,X,X,X,(vIF),(vIB),X,X,X,X,(hID),O,O,(vC),X,X,(vIF),(hIH,vEE),O,O,O,(vII),(hEB),O,O,O,(hIB,vIF),D,J,(hIF),O,O,(hII,vIE),O,O,O,X,(hJ),O,G,O,X,X,X,X,(hIF),O,O,X,X','7,X,(vDJ),(vDB),X,X,X,X,(hDJ),O,O,(vDF),(vCE),(vI),X,(hCH),O,O,O,O,O,X,X,X,(hDC,vDB),O,A,G,X,X,(hFE),O,O,O,(vDJ),(vI),X,(hCF),O,O,O,O,O,X,X,X,X,(hDE),O,O','6,X,X,(vCI),(vJ),X,X,X,(hA),O,E,(vEG),(vCC),X,(hEG,vCF),O,O,D,O,(hJ),C,G,(hB,vCC),C,O,(hED),O,O,A,O,X,X,X,(hCD),O,O,X','6,X,X,X,(vG),(vFE),X,X,X,(hG,vBC),O,O,(vBC),X,(hFJ,vC),O,E,O,I,(hG),O,O,(hBF,vBC),O,O,(hEJ),O,O,O,O,X,X,(hBA),D,O,X,X','6,X,X,(vAJ),(vE),X,X,X,(hFH,vH),O,O,(vFA),X,(hFH),O,O,O,O,(vFI),(hI),O,C,(hFI,vFD),O,O,X,(hAC),O,O,I,G,X,X,(hC),O,O,X','6,X,X,X,(vE),(vCJ),X,X,(vFF),(hA,vHJ),C,O,X,(hFC),O,O,O,F,(vD),(hFI),O,O,(hFE,vFJ),O,O,X,(hFG),O,O,O,O,X,(hFD),O,O,X,X','7,X,X,X,(vBJ),(vBI),X,X,X,X,(hA),O,O,(vCH),(vBJ),X,(vCJ),(hCB,vG),H,O,I,B,(hBA),O,O,O,(hBE,vG),O,O,(hBB),F,O,(hBE,vBI),O,O,O,(hBI),O,O,O,O,X,X,X,X,(hBC),O,O,X,X','6,X,X,(vCJ),(vD),X,X,X,(hH),O,O,(vBD),(vJ),X,(hCI,vCH),O,J,F,O,(hCG),O,E,(hA,vCD),O,F,(hBF),O,O,O,O,X,X,X,(hCG),O,O,X','6,X,X,X,X,(vJB),(vG),X,X,X,(hA,vH),I,O,X,X,(hCD,vCG),O,O,B,X,(hCF,vCD),O,O,O,X,(hJD),O,H,O,X,X,(hB),O,O,X,X,X','7,X,(vI),(vEH),X,X,(vCC),(vF),(hG),O,O,X,(hH),O,C,(hJ),O,O,(vAD),(hAG,vG),O,O,X,(hEI),F,O,O,O,X,X,(hAD,vAB),O,O,I,O,(vI),(hG),O,O,X,(hC),O,O,(hAJ),O,O,X,(hAA),O,O','7,X,X,X,X,X,(vEC),(vEA),X,X,X,X,(hB),O,O,X,X,(vDF),(vEH),(hEC,vH),H,O,X,(hEA,vI),O,B,E,O,O,(hDB),E,J,O,D,O,X,(hEH),O,A,X,X,X,X,(hI),O,O,X,X,X,X','6,X,X,X,(vBC),(vBC),X,X,X,(hBJ,vEC),H,O,(vBB),X,(hBE,vA),D,J,O,O,(hC),O,O,(hBE,vBG),O,O,(hEG),H,O,B,O,X,X,(hBI),O,O,X,X','7,X,(vE),(vCF),X,X,X,X,(hJ),O,O,(vFB),X,X,X,(hCJ),O,O,A,(vFE),(vCA),X,X,(hIH),O,O,O,O,X,X,(hFF),O,O,O,B,(vFA),X,X,X,(hCI),O,O,O,X,X,X,X,(hFG),O,O','7,X,X,X,X,(vBH),(vH),X,X,X,X,(hI),O,O,(vE),X,X,X,(hJG,vBF),O,O,O,X,(vH),(hBA,vJE),O,O,O,O,(hDG),O,O,O,O,X,X,(hBG),O,F,O,X,X,X,X,(hA),J,O,X,X,X','7,X,X,X,X,X,(vIC),(vA),X,X,X,(vII),(hG,vIH),F,I,X,X,(hIG),O,O,O,D,X,X,(hC,vC),O,O,J,X,X,(hIF,vE),O,G,A,X,X,(hIH),O,O,O,O,X,X,(hJ),F,D,X,X,X,X','7,X,X,X,(vH),(vCJ),X,X,X,(vCG),(hCB,vEG),O,O,X,X,(hEF),O,I,O,O,(vCI),X,(hCD),O,J,(hCB,vCJ),E,O,(vCC),X,(hCE),O,O,(hCI,vH),O,O,X,X,(hEB),O,O,O,O,X,X,(hD),O,O,X,X','6,X,(vGA),(vBE),X,X,X,(hGC),H,O,(vGF),X,X,(hGG),O,O,O,(vGD),X,X,(hBG),O,J,O,(vGD),X,X,(hGD),O,O,E,X,X,X,(hGH),O,O','6,X,X,(vEE),(vEJ),X,X,X,(hI,vEF),O,O,(vEH),X,(hEA),O,O,O,E,(vB),(hEE),O,O,(hB,vB),O,O,X,(hEG),A,O,I,O,X,X,(hA),D,B,X','6,X,(vJ),(vHA),X,X,X,(hHH),D,O,(vHG),X,X,(hI),O,O,F,(vDG),X,X,(hDJ),O,O,O,(vHF),X,X,(hHF),O,O,E,X,X,X,(hHE),B,O','6,X,X,X,X,(vFI),(vE),X,X,X,(hH,vA),J,I,X,X,(hGF,vD),O,O,F,X,(hGF,vC),O,O,A,X,(hD),O,O,O,X,X,(hD),O,O,X,X,X','7,X,X,(vHG),(vE),X,X,X,X,(hGD),O,O,(vGA),(vHC),(vAJ),X,(hGD,vAC),O,O,O,O,O,(hGC),O,O,(hAA,vGC),O,O,O,(hAC),O,O,F,(hGD,vD),O,O,(hHB),O,O,O,O,O,X,X,X,X,(hI),O,D,X','7,X,X,(vBG),(vBJ),X,(vBD),(vE),X,(hC),O,O,(hBB,vAG),O,C,X,(hBE),O,O,O,O,D,X,(hBG),O,O,O,(vBE),X,X,(vE),(hBI,vJ),O,O,O,X,(hCG),F,G,O,O,O,X,(hC),O,O,(hBJ),O,O,X','7,X,X,X,X,X,(vEA),(vJJ),X,X,(vED),(vJI),(hF),O,O,X,(hB),O,O,(hJH,vB),O,O,X,(hED),O,B,O,O,X,X,(hJI,vJI),O,O,C,O,X,(hJH),O,O,(hJJ),O,O,X,(hF),J,E,X,X,X,X','6,X,(vF),(vED),X,X,X,(hEI),O,O,(vEA),X,X,(hEJ),O,O,J,(vB),X,X,(hB),O,O,O,(vG),X,X,(hJ),B,O,C,X,X,X,(hF),O,E','6,X,X,X,X,(vCH),(vCD),X,X,X,(hG,vCH),O,O,X,X,(hCH,vCI),O,O,O,X,(hFA,vCE),O,O,J,X,(hFF),O,O,O,X,X,(hI),F,C,X,X,X','6,X,X,(vCH),(vA),X,X,X,(hE,vE),D,O,(vAG),(vHC),(hHB),O,O,C,O,I,(hHA),O,O,(hE,vJ),O,O,(hCH),A,O,O,O,O,X,X,(hHD),O,O,X','7,X,(vF),(vDG),(vGD),X,X,X,(hA),O,D,O,(vI),(vGE),X,(hDG),O,C,O,O,O,X,(hGC),H,O,(hH,vA),O,O,(vGF),X,(hH),O,O,(hGB,vGD),O,O,X,(hDH),O,D,O,O,O,X,X,X,(hA),O,O,G','7,X,X,X,X,(vIG),(vIG),X,X,X,X,(hCJ),O,O,(vCE),X,X,X,(hIE,vEA),O,O,O,X,(vJ),(hEA,vIE),O,O,O,O,(hCH),O,F,O,O,X,X,(hCH),I,B,O,X,X,X,X,(hCH),O,O,X,X,X','7,X,X,X,X,(vJ),(vDB),X,X,X,X,(hDG,vH),O,O,X,X,(vB),(hJ,vEB),E,O,O,(vG),(hDJ),O,F,D,(hI,vDC),O,O,(hA),O,O,(hJ,vA),O,O,I,X,(hDA),O,O,O,X,X,X,(hDH),O,O,X,X,X','6,X,X,X,(vEE),(vJA),(vEI),X,X,(hD,vEE),O,F,O,X,(hED,vEC),O,O,O,O,(hJ),O,O,(hEH,vEI),O,O,(hIB),O,O,O,O,X,(hII),O,O,O,X,X','6,X,(vE),(vGH),X,X,X,(hC),O,J,(vFJ),X,X,(hGH),O,O,O,(vJ),X,X,(hFA),B,O,I,(vFF),X,X,(hFG),O,O,O,X,X,X,(hB),F,G','6,X,X,(vIF),(vIJ),X,X,X,(hD,vIC),O,O,X,X,(hIB),O,O,O,(vIG),(vA),(hBF),O,O,F,I,O,X,X,(hE),D,O,F,X,X,(hIF),O,C,X','7,X,(vCD),(vB),X,X,X,X,(hII),O,D,(vA),X,X,X,(hIJ),O,O,O,(vII),X,X,(hID),O,O,O,O,(vIJ),(vCJ),X,X,(hCA),H,O,F,O,X,X,X,(hA),O,O,G,X,X,X,X,(hII),J,O','7,X,(vC),(vFF),X,X,(vHF),(vD),(hFD),O,O,(vHG),(hA,vFJ),O,O,(hHF),O,O,O,O,O,O,X,X,(hFG,vFH),O,O,O,X,X,(hFB,vI),O,O,O,(vFB),(vB),(hIG),O,O,O,O,D,J,(hG),O,I,X,(hFE),O,O','7,X,(vHJ),(vDE),X,X,(vDI),(vHH),(hHG),O,J,(vHJ),(hJ),O,O,(hHE),O,O,O,(hHJ,vB),O,O,X,(hHH),O,O,O,O,X,X,(hDJ,vHA),D,O,E,O,(vF),(hHJ),O,O,(hA),O,O,E,(hHA),O,O,X,(hI),O,O','7,X,(vEH),(vFA),X,X,X,X,(hEB),O,O,(vFA),X,X,X,(hFD),O,O,O,(vEE),(vID),X,X,(hFB),O,O,O,O,X,X,(hFJ),O,O,O,O,(vEE),X,X,X,(hJ),O,B,O,X,X,X,X,(hEH),C,O','6,X,(vJ),(vE),X,X,X,(hA),B,C,(vCJ),X,X,(hCG),O,O,O,(vCD),X,X,(hHF),O,O,O,(vJ),X,X,(hE),O,O,H,X,X,X,(hCE),O,O','6,X,(vGC),(vGH),X,X,X,(hGG),O,O,(vGB),X,X,(hGI),E,O,I,(vGG),X,X,(hIJ),O,C,O,(vA),X,X,(hD),G,O,O,X,X,X,(hD),O,O','6,X,X,X,X,(vIG),(vII),X,X,X,(hE,vIA),I,G,X,X,(hGJ,vGF),O,C,O,X,(hIE,vII),D,O,O,X,(hGJ),O,B,O,X,X,(hA),O,J,X,X,X','6,X,X,X,X,(vIA),(vE),X,X,(vJB),(hB,vII),I,J,X,(hIF),O,O,O,H,X,(hIB,vG),D,J,O,X,(hJG),C,O,O,F,X,(hB),O,O,X,X,X','7,X,X,X,(vDB),(vGG),X,X,X,X,(hGH),O,O,(vGA),(vGA),X,X,(hGF,vGA),O,O,O,O,X,(hGA,vGE),B,O,(hGD,vI),O,O,(hJ),O,I,(hGE,vGG),O,O,X,(hDA),O,D,O,O,X,X,X,X,(hF),O,O,X,X','6,X,X,X,(vFB),(vI),X,X,X,(hGF),O,O,(vGA),X,(vH),(hGA,vFD),O,O,O,(hFF),O,A,O,O,C,(hGG),O,J,O,X,X,X,(hGH),O,D,X,X','6,X,X,(vGA),(vA),X,X,X,(hB,vGE),O,O,(vHJ),X,(hBD),O,O,O,O,(vGH),(hGC),O,O,(hGJ,vGE),O,O,X,(hGG),O,F,O,O,X,X,(hGC),O,O,X','7,X,X,(vCE),(vG),(vI),X,X,X,(hEE),A,O,E,(vCD),(vCH),X,(hEG,vCD),O,O,O,O,O,(hA),G,C,X,(hEH),O,O,(hEE),O,O,(vI),(hA,vD),O,O,(hCF),O,O,O,O,O,X,X,X,(hED),O,O,B,X','7,X,(vG),(vDC),X,(vBA),(vDG),X,(hJ),O,G,(hDA,vBA),O,O,X,(hBC),O,O,G,O,O,X,X,(hDH),O,O,O,(vG),X,X,X,(hG,vDI),O,O,O,(vJ),X,(hBB),E,O,O,O,O,X,(hH),O,J,(hB),O,O','6,X,X,X,(vJG),(vCG),X,X,(vJG),(hJB,vJH),O,O,X,(hJH),I,B,O,O,(vD),(hJB),O,O,(hA,vJG),O,O,X,(hJB),O,B,O,O,X,(hF),I,C,X,X','7,X,(vA),(vE),X,X,(vD),(vB),(hF),O,O,(vJJ),(hI,vGD),O,O,(hGD),O,O,O,O,I,O,X,X,(hJI),O,O,X,X,X,(vJE),(hA,vF),I,O,(vD),(vJJ),(hGA),O,O,O,J,O,O,(hH),O,O,X,(hI),O,O','7,X,X,(vEH),(vEF),X,X,X,X,(hEI,vIH),O,O,(vEI),X,X,(hEI),O,O,O,O,(vIE),(vEJ),(hD),O,O,(hEH,vH),O,O,O,(hEC),O,O,O,(hD,vC),H,G,X,X,(hIA),O,O,O,O,X,X,X,(hD),E,O,X','7,X,X,X,X,X,(vEA),(vCJ),X,X,X,X,(hCD,vCC),O,O,X,X,(vCI),(hCJ,vEH),O,O,O,X,(hDH),O,J,B,O,X,X,(hCH,vD),O,O,O,O,X,(hCJ),O,O,O,X,X,X,(hJ),O,G,X,X,X,X','7,X,(vB),(vFF),X,(vEI),(vFE),X,(hH),O,O,(hFC,vIB),G,O,X,(hFC),O,O,O,O,O,X,X,X,(hFH),O,D,X,X,X,X,(hFF,vFG),O,O,(vFE),(vFH),X,(hEE),O,O,J,O,O,X,(hFG),O,O,(hFG),O,O','6,X,(vHE),(vII),X,X,X,(hHB),O,O,(vHF),(vHJ),X,(hHD),B,O,O,O,X,X,(hG),H,O,O,(vHE),X,(hCA),O,O,E,B,X,X,X,(hHB),O,G','6,X,(vH),(vAF),X,X,X,(hAC),O,O,(vAD),X,X,(hDI),J,O,O,(vAH),X,X,(hAC),O,O,O,(vAI),X,X,(hH),O,O,B,X,X,X,(hAH),O,E','6,X,(vC),(vHA),X,X,X,(hC),O,J,(vHA),X,X,(hF),J,O,O,(vHC),X,X,(hI),O,J,O,(vF),X,X,(hEJ),O,O,B,X,X,X,(hG),O,O','6,X,X,X,(vFJ),(vJC),X,X,(vFF),(hFF,vJE),O,O,X,(hFH),O,F,O,O,(vD),(hFI),O,C,(hE,vH),D,O,X,(hJC),O,O,O,A,X,(hFG),O,J,X,X','7,X,X,X,X,X,(vDE),(vBB),X,(vC),(vDF),X,(hBF),O,O,(hH),O,O,(vE),(hH,vBI),B,O,(hDF),O,O,O,O,D,(vE),X,(hDI,vBE),O,O,C,O,B,(hBF),O,A,X,(hG),E,D,(hG),O,O,X,X,X,X','7,X,(vJ),(vFH),X,X,X,X,(hHH),F,A,X,X,(vGE),(vA),(hI),O,O,(vC),(hF,vD),O,O,X,(hHC,vF),H,O,O,O,O,(hGJ),O,O,O,O,O,(vE),(hE),O,O,X,(hHI),O,O,X,X,X,X,(hA),O,O','7,X,X,(vCD),(vCB),(vF),X,X,X,(hCA,vCJ),O,O,O,(vFH),X,(hCD),O,O,O,O,O,(vCB),(hH),O,O,X,(hI),O,O,(hCE),O,B,(vCE),(hCH,vCI),O,G,X,(hFA),O,G,O,O,O,X,X,(hBC),H,O,O,X','6,X,X,X,X,(vHD),(vHH),X,X,X,(hA,vHH),H,I,X,X,(hHJ,vIG),O,C,O,X,(hHC,vE),O,O,O,X,(hIG),J,O,O,X,X,(hHF),O,O,X,X,X','6,X,X,(vFD),(vJB),X,X,X,(hH,vH),O,O,(vJD),X,(hFH),O,O,O,O,(vJI),(hJD),O,O,(hJD,vG),J,E,X,(hJD),O,O,O,O,X,X,(hB),A,O,X','6,X,X,X,(vC),(vDC),X,X,(vF),(hHB,vDI),O,O,(vDJ),(hDG),O,O,E,O,O,(hHA),O,O,(hHD,vG),O,O,(hEJ),O,O,F,O,O,X,(hJ),O,O,X,X','7,X,X,X,X,X,(vEJ),(vG),X,X,X,X,(hD,vI),C,O,X,X,(vEG),(hFE,vFE),O,O,O,X,(hFD),O,O,O,O,X,X,(hEC,vFI),O,O,O,O,X,(hEC),B,O,H,X,X,X,(hJ),O,O,X,X,X,X','7,X,(vI),(vAC),X,X,(vAI),(vCG),(hB),O,I,X,(hCB,vCD),O,O,(hH),A,D,(hCD,vAF),O,O,O,X,(hAC),O,O,O,O,X,X,(hCF,vCC),O,O,O,O,(vB),(hCB),O,O,O,(hCF),O,O,(hCB),O,J,X,(hB),O,O','6,X,X,X,(vJB),(vIG),X,X,(vA),(hJI,vJC),O,F,X,(hJB),O,O,O,O,(vJE),(hJD),B,O,(hJB,vD),O,H,X,(hJG),O,I,O,O,X,(hA),O,E,X,X','7,X,X,X,X,(vCD),(vCC),(vB),X,X,X,(hCC,vEC),O,I,O,X,X,(hCH),C,O,O,O,X,X,(hCA),F,O,X,X,X,(vA),(hCH,vCE),O,E,X,X,(hGA),C,O,O,O,X,X,(hCE),O,O,O,X,X,X','6,X,X,X,X,(vJI),(vA),X,X,(vJH),(hJE,vJI),O,G,X,(hJE),F,O,O,D,X,(hC,vB),O,E,O,X,(hJH),O,O,O,O,X,(hJD),O,E,X,X,X','6,X,X,X,X,(vAJ),(vAJ),X,X,X,(hAF,vGB),O,O,X,X,(hAE,vD),O,O,O,X,(hAJ,vF),O,J,O,X,(hAF),O,O,H,X,X,(hB),O,I,X,X,X','7,X,X,X,X,(vH),(vIE),X,X,X,X,(hA,vA),O,O,X,X,(vID),(hF,vCH),O,O,A,(vIE),(hIH),O,O,O,(hIA,vIH),O,O,(hIE),O,O,(hIG,vIA),B,O,O,X,(hIF),O,G,A,X,X,X,(hIE),O,D,X,X,X','7,X,(vEF),(vB),(vFC),X,X,X,(hH),O,O,O,(vEA),X,X,(hED),C,O,O,O,X,X,X,X,(hEG),O,F,X,X,X,X,(hEI),O,O,(vEH),(vI),X,X,(hFH),O,O,O,O,X,X,X,(hEE),O,I,O','6,X,(vHI),(vDG),X,X,X,(hHE),J,O,(vDG),X,X,(hHC),H,O,O,(vHA),X,X,(hDH),F,O,G,(vHE),X,X,(hHC),O,O,O,X,X,X,(hHE),O,O','6,X,X,(vAD),(vAE),X,X,X,(hAA),O,O,(vAD),(vAA),X,(hAI,vI),O,F,D,J,(hC),A,O,(hB,vJ),A,E,(hAB),O,I,C,J,X,X,X,(hI),O,H,X','6,X,X,(vDA),(vE),X,X,X,(hJ,vDE),O,F,(vGG),X,(hDJ),O,O,O,O,(vC),(hDD),O,O,(hJ,vI),O,O,X,(hGG),O,D,O,O,X,X,(hDA),G,B,X','7,X,X,(vJD),(vG),(vI),X,X,X,(hG),O,O,H,(vEB),(vEF),X,(hEB),O,O,B,O,J,X,(hEJ,vA),O,H,(hEE,vEA),O,O,(hA),O,O,(hEJ,vG),O,O,X,(hJF),O,O,O,O,O,X,X,X,(hG),F,O,O,X','6,X,X,X,X,(vEJ),(vG),X,X,X,(hDE,vF),O,O,X,X,(hDJ,vF),O,O,O,X,(hA,vDA),O,O,O,X,(hDI),B,O,O,X,X,(hDE),C,O,X,X,X','6,X,X,(vAC),(vD),X,X,X,(hD,vEI),O,O,(vBC),X,(hBA),O,O,O,O,(vH),(hEF),O,O,(hEI,vF),O,O,X,(hEF),O,O,A,O,X,X,(hEE),G,D,X','6,X,X,(vGB),(vD),X,X,X,(hGG),A,C,(vGJ),(vC),X,(hGG,vGC),O,O,O,J,(hGH),O,O,(hE,vI),G,H,(hHF),O,H,O,O,X,X,X,(hE),O,O,X','6,X,X,(vIJ),(vCD),X,X,X,(hCD),O,O,(vCI),(vCG),X,(hIH,vCC),G,O,O,O,(hCE),O,I,(hCH,vCD),G,O,(hIC),B,D,O,O,X,X,X,(hA),O,O,X','7,X,(vII),(vDH),(vID),X,X,X,(hIG),O,O,O,X,X,X,(hDA),O,C,J,(vII),X,X,X,(hID),F,O,O,(vDH),X,X,X,(hID),O,O,O,(vID),X,X,X,(hIE),A,O,O,X,X,X,(hDD),O,O,O','7,X,(vEB),(vF),X,X,X,X,(hED),O,O,(vAJ),(vED),(vD),X,(hIB),O,O,O,G,O,X,X,X,(hF,vA),O,O,O,X,X,(hED),O,O,F,(vA),(vEB),X,(hIE),O,H,O,O,O,X,X,X,X,(hEE),O,O','7,X,X,X,X,(vCA),(vCE),(vB),X,X,X,(hF),O,O,O,X,X,X,(hJG,vCD),I,O,O,X,X,(hF,vB),O,O,O,X,X,(hJI,vCI),O,F,O,X,X,(hD),O,O,O,X,X,X,(hCI),O,O,O,X,X,X','6,X,(vJI),(vI),X,X,X,(hH),O,O,(vD),X,X,(hJA),F,O,O,(vJH),X,X,(hJI),C,G,O,(vJJ),X,X,(hD),O,O,O,X,X,X,(hJE),O,O','6,X,X,X,(vDC),(vAE),X,X,X,(hI),O,B,(vI),X,(vC),(hJ,vDE),O,O,O,(hAF),A,D,O,O,O,(hI),O,O,G,X,X,X,(hDA),H,O,X,X','7,X,X,X,(vFD),(vAF),X,X,X,(vFD),(hFE,vFA),B,O,X,X,(hHI),O,O,O,O,(vFF),X,(hFI),O,O,(hC,vG),O,H,(vFA),X,(hE),O,O,(hFB,vC),O,O,X,X,(hFJ),O,G,O,O,X,X,(hH),O,O,X,X','7,X,X,X,X,(vD),(vHD),X,X,X,(vDH),(hA,vJJ),O,O,(vE),X,(hHB,vJH),O,O,O,E,J,(hJE),H,O,O,(hD,vF),O,O,(hJG),E,O,(hJE,vJG),C,O,O,(hHH),J,O,O,O,O,X,X,(hJJ),O,O,X,X,X','7,X,X,X,X,(vBA),(vEB),X,X,X,(vBG),(hC,vBB),O,O,X,X,(hBD,vBA),O,O,O,O,(vBJ),(hBC),O,O,O,(hBG,vBD),A,O,(hBB),O,O,(hEE,vBF),O,O,D,X,(hBJ),O,O,O,I,X,X,(hBD),O,O,X,X,X','7,X,X,X,X,X,(vDG),(vC),X,(vB),(vFH),X,(hC),E,O,(hA),O,O,(vDD),(hH,vDB),O,O,(hDA),C,O,O,O,O,(vE),X,(hFH,vDE),O,O,H,O,F,(hDH),O,O,X,(hDI),O,O,(hJ),O,O,X,X,X,X','6,X,(vB),(vE),X,X,X,(hA),D,O,(vA),X,X,(hH),O,C,O,(vIG),X,X,(hDI),O,O,O,(vDF),X,X,(hIF),O,O,O,X,X,X,(hH),O,O','7,X,(vHF),(vC),X,X,(vC),(vHF),(hC),O,O,(vBC),(hA,vBF),O,O,(hBE),O,O,O,O,O,O,X,X,(hHD),A,O,X,X,X,(vD),(hJ,vHA),O,O,(vHI),(vC),(hCH),J,O,O,O,O,B,(hHH),O,O,X,(hE),O,O','6,X,X,X,(vJ),(vDA),X,X,(vFD),(hB,vFE),O,O,(vDA),(hDJ),O,O,O,O,O,(hDE),O,O,(hDA,vC),O,H,(hBA),O,I,O,G,O,X,(hJ),E,O,X,X','6,X,(vGA),(vA),X,X,X,(hGE),O,O,(vGD),X,X,(hGA),O,G,A,(vED),X,X,(hGE),O,O,O,(vGD),X,X,(hEB),C,H,F,X,X,X,(hGE),A,I','6,X,(vIC),(vFD),X,X,X,(hIG),O,C,(vIB),X,X,(hFJ),O,O,O,(vII),X,X,(hIE),O,O,F,(vIA),X,X,(hIJ),F,I,O,X,X,X,(hIC),O,O','6,X,X,X,(vJG),(vHH),X,X,X,(hHA),O,O,(vHD),X,(vE),(hJF,vHJ),O,O,O,(hHB),F,O,D,O,O,(hE),O,J,O,X,X,X,(hHE),I,O,X,X','7,X,X,X,(vGG),(vI),(vEC),X,X,(vBH),(hJ,vBI),O,O,O,X,(hBJ),O,O,O,O,O,(vJ),(hGJ),O,O,X,(hA),O,O,(hGC),O,O,(vC),(hGB,vGJ),O,O,X,(hBF),O,O,O,O,B,X,(hBH),O,O,O,X,X','7,X,X,X,X,X,(vD),(vHB),X,X,(vG),(vFC),(hHA,vAI),O,O,X,(hAB),O,O,O,O,O,X,(hAD),O,O,O,(vHB),X,X,(vF),(hAF,vHI),O,O,O,X,(hAB),O,O,O,O,O,X,(hB),O,E,X,X,X,X','6,X,(vBC),(vDF),X,X,X,(hBE),O,O,(vDB),X,X,(hDG),O,J,O,(vC),X,X,(hBI),O,O,O,(vBB),X,X,(hBA),O,O,D,X,X,X,(hBG),F,O','6,X,X,X,(vH),(vDC),(vGA),X,X,(hA,vIE),O,O,O,X,(hIG,vGG),O,O,O,O,(hF),O,O,(hGF,vJ),J,O,(hGA),O,O,O,O,X,(hIE),O,O,O,X,X','6,X,(vHC),(vHJ),X,X,X,(hHC),A,B,(vA),X,X,(hHI),O,O,O,(vHA),X,X,(hD),F,O,O,(vB),X,X,(hII),G,O,O,X,X,X,(hB),O,O','7,X,(vH),(vJA),X,X,(vIE),(vJI),(hJC),O,O,(vDG),(hJE,vIG),O,O,(hDD),I,O,O,O,O,O,X,X,(hII,vIG),O,O,O,X,X,(hIE,vJA),O,O,O,(vB),(vJI),(hDG),C,O,O,O,O,O,(hJF),O,O,X,(hH),O,O','7,X,(vHH),(vBE),X,X,X,X,(hE),B,O,X,(vHF),(vBJ),X,(hHI),C,O,(hJ,vHI),O,O,X,X,(hBC),D,O,O,O,X,X,(hHH),O,O,D,O,(vHF),X,(hHD),F,O,(hHD),G,O,X,X,X,X,(hHE),O,O','7,X,X,X,X,X,(vIF),(vI),X,X,X,X,(hB,vGF),O,O,X,X,(vEG),(hGG,vB),O,O,O,X,(hGJ),O,O,O,H,X,X,(hGA,vA),O,O,O,O,X,(hGC),I,H,O,X,X,X,(hH),G,J,X,X,X,X','7,X,X,X,X,X,(vJF),(vJF),X,X,X,X,(hJD),A,O,X,X,(vBG),(vJB),(hI,vI),O,O,X,(hBD,vJF),F,O,O,E,O,(hIB),O,O,O,O,C,X,(hJG),O,B,X,X,X,X,(hI),O,J,X,X,X,X','6,X,X,(vEI),(vC),X,X,X,(hH,vGG),O,O,(vGD),X,(hBJ),O,O,O,O,(vD),(hGI),O,O,(hD,vD),E,G,X,(hBG),O,O,A,O,X,X,(hJ),O,O,X','7,X,X,X,X,(vFI),(vJF),X,X,X,X,(hJH),O,O,(vJC),X,X,X,(hEE,vEC),O,O,O,X,(vJE),(hED,vEF),O,O,O,G,(hJB),O,O,O,O,X,X,(hEH),O,O,G,X,X,X,X,(hJG),O,O,X,X,X','7,X,X,X,(vJ),(vEI),X,X,X,X,(hJ,vEC),O,A,(vBD),X,X,(hHC,vEA),O,O,O,I,(vF),(hEE),O,O,(hEE,vHD),B,J,O,(hHE),O,O,O,(hG,vED),O,O,X,(hHD),O,O,O,O,X,X,X,(hEA),O,O,X,X','7,X,X,X,X,X,(vFH),(vED),X,X,X,X,(hEC,vEA),O,O,X,X,(vED),(hFI,vEH),O,O,O,X,(hEE),O,O,A,D,X,X,(hFB,vJ),O,O,O,J,X,(hFI),O,O,O,X,X,X,(hI),O,A,X,X,X,X','6,X,(vB),(vHI),X,X,X,(hHH),O,O,(vHJ),(vGA),X,(hHH),O,O,O,I,X,X,(hGE),O,A,O,(vHE),X,(hHJ),H,B,F,D,X,X,X,(hHJ),O,C'\n]"
          }
        ]
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5151000cf542c510028",
      "title": "Problem 425: Prime connection",
      "challengeType": 1,
      "dashedName": "problem-425-prime-connection",
      "description": "Two positive numbers $A$ and $B$ are said to be connected (denoted by \"$A ↔ B$\") if one of these conditions holds:\n\n1. $A$ and $B$ have the same length and differ in exactly one digit; for example, $123 ↔ 173$.\n2. Adding one digit to the left of $A$ (or $B$) makes $B$ (or $A$); for example, $23 ↔ 223$ and $123 ↔ 23$.\n\nWe call a prime $P$ a 2's relative if there exists a chain of connected primes between 2 and $P$ and no prime in the chain exceeds $P$.\n\nFor example, 127 is a 2's relative. One of the possible chains is shown below:\n\n$$2 ↔ 3 ↔ 13 ↔ 113 ↔ 103 ↔ 107 ↔ 127$$\n\nHowever, 11 and 103 are not 2's relatives.\n\nLet $F(N)$ be the sum of the primes $≤ N$ which are not 2's relatives. We can verify that $F({10}^3) = 431$ and $F({10}^4) = 78\\\\,728$.\n\nFind $F({10}^7)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function primeConnection() {\n\n  return true;\n}\n\nprimeConnection();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`primeConnection()` should return `46479497324`.",
          "testCode": "assert.strictEqual(primeConnection(), 46479497324);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302095,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-425-prime-connection.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5171000cf542c510029",
      "title": "Problem 426: Box-ball system",
      "challengeType": 1,
      "dashedName": "problem-426-box-ball-system",
      "description": "Consider an infinite row of boxes. Some of the boxes contain a ball. For example, an initial configuration of 2 consecutive occupied boxes followed by 2 empty boxes, 2 occupied boxes, 1 empty box, and 2 occupied boxes can be denoted by the sequence (2, 2, 2, 1, 2), in which the number of consecutive occupied and empty boxes appear alternately.\n\nA turn consists of moving each ball exactly once according to the following rule: Transfer the leftmost ball which has not been moved to the nearest empty box to its right.\n\nAfter one turn the sequence (2, 2, 2, 1, 2) becomes (2, 2, 1, 2, 3) as can be seen below; note that we begin the new sequence starting at the first occupied box.\n\n<img alt=\"animation showing one complete turn from (2, 2, 2, 1, 2) to (2, 2, 1, 2, 3)\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/box-ball-system-1.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nA system like this is called a Box-Ball System or BBS for short.\n\nIt can be shown that after a sufficient number of turns, the system evolves to a state where the consecutive numbers of occupied boxes is invariant. In the example below, the consecutive numbers of occupied boxes evolves to [1, 2, 3]; we shall call this the final state.\n\n<img alt=\"four turns from occupied boxes [2, 2, 2] to final state [1, 2, 3]\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/box-ball-system-2.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWe define the sequence $\\\\{t_i\\\\}$:\n\n$$\\begin{align}\n  & s_0 = 290\\\\,797 \\\\\\\\\n  & s_{k + 1} = {s_k}^2\\bmod 50\\\\,515\\\\,093 \\\\\\\\\n  & t_k = (s_k\\bmod 64) + 1\n\\end{align}$$\n\nStarting from the initial configuration $(t_0, t_1, \\ldots, t_{10})$, the final state becomes [1, 3, 10, 24, 51, 75].\n\nStarting from the initial configuration $(t_0, t_1, \\ldots, t_{10\\\\,000\\\\,000})$, find the final state.\n\nGive as your answer the sum of the squares of the elements of the final state. For example, if the final state is [1, 2, 3] then $14 (= 1^2 + 2^2 + 3^2)$ is your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function boxBallSystem() {\n\n  return true;\n}\n\nboxBallSystem();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`boxBallSystem()` should return `31591886008`.",
          "testCode": "assert.strictEqual(boxBallSystem(), 31591886008);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302096,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-426-box-ball-system.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5181000cf542c51002a",
      "title": "Problem 427: n-sequences",
      "challengeType": 1,
      "dashedName": "problem-427-n-sequences",
      "description": "A sequence of integers $S = \\\\{s_i\\\\}$ is called an $n$-sequence if it has $n$ elements and each element $s_i$ satisfies $1 ≤ s_i ≤ n$. Thus there are $n^n$ distinct $n$-sequences in total.\n\nFor example, the sequence $S = \\\\{1, 5, 5, 10, 7, 7, 7, 2, 3, 7\\\\}$ is a 10-sequence.\n\nFor any sequence $S$, let $L(S)$ be the length of the longest contiguous subsequence of $S$ with the same value. For example, for the given sequence $S$ above, $L(S) = 3$, because of the three consecutive 7's.\n\nLet $f(n) = \\sum L(S)$ for all $n$-sequences $S$.\n\nFor example, $f(3) = 45$, $f(7) = 1\\\\,403\\\\,689$ and $f(11) = 481\\\\,496\\\\,895\\\\,121$.\n\nFind $f(7\\\\,500\\\\,000)\\bmod 1\\\\,000\\\\,000\\\\,009$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function nSequences() {\n\n  return true;\n}\n\nnSequences();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`nSequences()` should return `97138867`.",
          "testCode": "assert.strictEqual(nSequences(), 97138867);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302097,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-427-n-sequences.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5191000cf542c51002b",
      "title": "Problem 428: Necklace of Circles",
      "challengeType": 1,
      "dashedName": "problem-428-necklace-of-circles",
      "description": "Let $a$, $b$ and $c$ be positive numbers.\n\nLet $W$, $X$, $Y$, $Z$ be four collinear points where $|WX| = a$, $|XY| = b$, $|YZ| = c$ and $|WZ| = a + b + c$.\n\nLet $C_{\\text{in}}$ be the circle having the diameter $XY$.\n\nLet $C_{\\text{out}}$ be the circle having the diameter $WZ$.\n\nThe triplet ($a$, $b$, $c$) is called a *necklace triplet* if you can place $k ≥ 3$ distinct circles $C_1, C_2, \\ldots, C_k$ such that:\n\n- $C_i$ has no common interior points with any $C_j$ for $1 ≤ i$, $j ≤ k$ and $i ≠ j$,\n- $C_i$ is tangent to both $C_{\\text{in}}$ and $C_{\\text{out}}$ for $1 ≤ i ≤ k$,\n- $C_i$ is tangent to $C_{i + 1}$ for $1 ≤ i &lt; k$, and\n- $C_k$ is tangent to $C_1$.\n\nFor example, (5, 5, 5) and (4, 3, 21) are necklace triplets, while it can be shown that (2, 2, 5) is not.\n\n<img alt=\"a visual representation of a necklace triplet\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/necklace-of-circles.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $T(n)$ be the number of necklace triplets $(a, b, c)$ such that $a$, $b$ and $c$ are positive integers, and $b ≤ n$. For example, $T(1) = 9$, $T(20) = 732$ and $T(3\\\\,000) = 438\\\\,106$.\n\nFind $T(1\\\\,000\\\\,000\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function necklace(n) {\n\n  return true;\n}\n\nnecklace(1000000000)"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`necklace(1000000000)` should return `747215561862`.",
          "testCode": "assert.strictEqual(necklace(1000000000), 747215561862);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302098,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-428-necklace-of-circles.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5191000cf542c51002c",
      "title": "Problem 429: Sum of squares of unitary divisors",
      "challengeType": 1,
      "dashedName": "problem-429-sum-of-squares-of-unitary-divisors",
      "description": "A unitary divisor $d$ of a number $n$ is a divisor of $n$ that has the property $gcd(d, \\frac{n}{d}) = 1$.\n\nThe unitary divisors of $4! = 24$ are 1, 3, 8 and 24.\n\nThe sum of their squares is $12 + 32 + 82 + 242 = 650$.\n\nLet $S(n)$ represent the sum of the squares of the unitary divisors of $n$. Thus $S(4!) = 650$.\n\nFind $S(100\\\\,000\\\\,000!)$ modulo $1\\\\,000\\\\,000\\\\,009$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumSquaresOfUnitaryDivisors() {\n\n  return true;\n}\n\nsumSquaresOfUnitaryDivisors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumSquaresOfUnitaryDivisors()` should return `98792821`.",
          "testCode": "assert.strictEqual(sumSquaresOfUnitaryDivisors(), 98792821);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302099,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-429-sum-of-squares-of-unitary-divisors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f51a1000cf542c51002d",
      "title": "Problem 430: Range flips",
      "challengeType": 1,
      "dashedName": "problem-430-range-flips",
      "description": "$N$ disks are placed in a row, indexed 1 to $N$ from left to right.\n\nEach disk has a black side and white side. Initially all disks show their white side.\n\nAt each turn, two, not necessarily distinct, integers $A$ and $B$ between 1 and $N$ (inclusive) are chosen uniformly at random. All disks with an index from $A$ to $B$ (inclusive) are flipped.\n\nThe following example shows the case $N = 8$. At the first turn $A = 5$ and $B = 2$, and at the second turn $A = 4$ and $B = 6$.\n\n<img alt=\"example for N = 8, with first turn A = 5 and B = 2, and second turn A = 4 and B = 6\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/range-flips.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $E(N, M)$ be the expected number of disks that show their white side after $M$ turns. We can verify that $E(3, 1) = \\frac{10}{9}$, $E(3, 2) = \\frac{5}{3}$, $E(10, 4) ≈ 5.157$ and $E(100, 10) ≈ 51.893$.\n\nFind $E({10}^{10}, 4000)$. Give your answer rounded to 2 decimal places behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rangeFlips() {\n\n  return true;\n}\n\nrangeFlips();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`rangeFlips()` should return `5000624921.38`.",
          "testCode": "assert.strictEqual(rangeFlips(), 5000624921.38);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302101,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-430-range-flips.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f51b1000cf542c51002e",
      "title": "Problem 431: Square Space Silo",
      "challengeType": 1,
      "dashedName": "problem-431-square-space-silo",
      "description": "Fred the farmer arranges to have a new storage silo installed on his farm and having an obsession for all things square he is absolutely devastated when he discovers that it is circular. Quentin, the representative from the company that installed the silo, explains that they only manufacture cylindrical silos, but he points out that it is resting on a square base. Fred is not amused and insists that it is removed from his property.\n\nQuick thinking Quentin explains that when granular materials are delivered from above a conical slope is formed and the natural angle made with the horizontal is called the angle of repose. For example if the angle of repose, $\\alpha = 30°$, and grain is delivered at the center of the silo then a perfect cone will form towards the top of the cylinder. In the case of this silo, which has a diameter of 6m, the amount of space wasted would be approximately 32.648388556 m<sup>3</sup>. However, if grain is delivered at a point on the top which has a horizontal distance of $x$ metres from the center then a cone with a strangely curved and sloping base is formed. He shows Fred a picture.\n\n<img alt=\"image presenting forming of the perfect cone towards the top of the cylinder\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/square-space-silo.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWe shall let the amount of space wasted in cubic metres be given by $V(x)$. If $x = 1.114\\\\,785\\\\,284$, which happens to have three squared decimal places, then the amount of space wasted, $V(1.114\\\\,785\\\\,284) \\approx 36$. Given the range of possible solutions to this problem there is exactly one other option: $V(2.511\\\\,167\\\\,869) \\approx 49$. It would be like knowing that the square is king of the silo, sitting in splendid glory on top of your grain.\n\nFred's eyes light up with delight at this elegant resolution, but on closer inspection of Quentin's drawings and calculations his happiness turns to despondency once more. Fred points out to Quentin that it's the radius of the silo that is 6 metres, not the diameter, and the angle of repose for his grain is 40­°. However, if Quentin can find a set of solutions for this particular silo then he will be more than happy to keep it.\n\nIf Quick thinking Quentin is to satisfy frustratingly fussy Fred the farmer's appetite for all things square then determine the values of $x$ for all possible square space wastage options and calculate $\\sum x$ correct to 9 decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function squareSpaceSilo() {\n\n  return true;\n}\n\nsquareSpaceSilo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`squareSpaceSilo()` should return `23.386029052`.",
          "testCode": "assert.strictEqual(squareSpaceSilo(), 23.386029052);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302102,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-431-square-space-silo.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f51e1000cf542c510030",
      "title": "Problem 432: Totient sum",
      "challengeType": 1,
      "dashedName": "problem-432-totient-sum",
      "description": "Let $S(n, m) = \\sum φ(n × i)$ for $1 ≤ i ≤ m$. ($φ$ is Euler's totient function)\n\nYou are given that $S(510\\\\,510, {10}^6) = 45\\\\,480\\\\,596\\\\,821\\\\,125\\\\,120$.\n\nFind $S(510\\\\,510, {10}^{11})$. Give the last 9 digits of your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function totientSum() {\n\n  return true;\n}\n\ntotientSum();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`totientSum()` should return `754862080`.",
          "testCode": "assert.strictEqual(totientSum(), 754862080);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302103,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-432-totient-sum.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f51d1000cf542c51002f",
      "title": "Problem 433: Steps in Euclid''s algorithm",
      "challengeType": 1,
      "dashedName": "problem-433-steps-in-euclids-algorithm",
      "description": "Let $E(x_0, y_0)$ be the number of steps it takes to determine the greatest common divisor of $x_0$ and $y_0$ with Euclid's algorithm. More formally:\n\n$$\\begin{align}\n  & x_1 = y_0, y_1 = x_0\\bmod y_0 \\\\\\\\\n  & x_n = y_{n - 1}, y_n = x_{n - 1}\\bmod y_{n - 1}\n\\end{align}$$\n\n$E(x_0, y_0)$ is the smallest $n$ such that $y_n = 0$.\n\nWe have $E(1, 1) = 1$, $E(10, 6) = 3$ and $E(6, 10) = 4$.\n\nDefine $S(N)$ as the sum of $E(x, y)$ for $1 ≤ x$, $y ≤ N$.\n\nWe have $S(1) = 1$, $S(10) = 221$ and $S(100) = 39\\\\,826$.\n\nFind $S(5 \\times {10}^6)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function stepsInEuclidsAlgorithm() {\n\n  return true;\n}\n\nstepsInEuclidsAlgorithm();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`stepsInEuclidsAlgorithm()` should return `326624372659664`.",
          "testCode": "assert.strictEqual(stepsInEuclidsAlgorithm(), 326624372659664);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302104,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-433-steps-in-euclids-algorithm.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f51f1000cf542c510031",
      "title": "Problem 434: Rigid graphs",
      "challengeType": 1,
      "dashedName": "problem-434-rigid-graphs",
      "description": "Recall that a graph is a collection of vertices and edges connecting the vertices, and that two vertices connected by an edge are called adjacent.\n\nGraphs can be embedded in Euclidean space by associating each vertex with a point in the Euclidean space.\n\nA flexible graph is an embedding of a graph where it is possible to move one or more vertices continuously so that the distance between at least two nonadjacent vertices is altered while the distances between each pair of adjacent vertices is kept constant.\n\nA rigid graph is an embedding of a graph which is not flexible.\n\nInformally, a graph is rigid if by replacing the vertices with fully rotating hinges and the edges with rods that are unbending and inelastic, no parts of the graph can be moved independently from the rest of the graph.\n\nThe grid graphs embedded in the Euclidean plane are not rigid, as the following animation demonstrates:\n\n<img alt=\"animation showing grid graphs are not rigid in Euclidean plane\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/rigid-graphs-1.gif\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nHowever, one can make them rigid by adding diagonal edges to the cells. For example, for the 2x3 grid graph, there are 19 ways to make the graph rigid:\n\n<img alt=\"19 ways to make 2x3 grid graph rigid\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/rigid-graphs-2.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nNote that for the purposes of this problem, we do not consider changing the orientation of a diagonal edge or adding both diagonal edges to a cell as a different way of making a grid graph rigid.\n\nLet $R(m, n)$ be the number of ways to make the $m × n$ grid graph rigid.\n\nE.g. $R(2, 3) = 19$ and $R(5, 5) = 23\\\\,679\\\\,901$.\n\nDefine $S(N)$ as $\\sum R(i, j)$ for $1 ≤ i$, $j ≤ N$.\n\nE.g. $S(5) = 25\\\\,021\\\\,721$.\n\nFind $S(100)$, give your answer modulo $1\\\\,000\\\\,000\\\\,033$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rigidGraphs() {\n\n  return true;\n}\n\nrigidGraphs();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`rigidGraphs()` should return `863253606`.",
          "testCode": "assert.strictEqual(rigidGraphs(), 863253606);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302105,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-434-rigid-graphs.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5201000cf542c510032",
      "title": "Problem 435: Polynomials of Fibonacci numbers",
      "challengeType": 1,
      "dashedName": "problem-435-polynomials-of-fibonacci-numbers",
      "description": "The Fibonacci numbers $\\\\{f_n, n ≥ 0\\\\}$ are defined recursively as $f_n = f_{n - 1} + f_{n - 2}$ with base cases $f_0 = 0$ and $f_1 = 1$.\n\nDefine the polynomials $\\\\{F_n, n ≥ 0\\\\}$ as $F_n(x) = \\displaystyle\\sum_{i = 0}^n f_ix^i$.\n\nFor example, $F_7(x) = x + x^2 + 2x^3 + 3x^4 + 5x^5 + 8x^6 + 13x^7$, and $F_7(11) = 268\\\\,357\\\\,683$.\n\nLet $n = {10}^{15}$. Find the sum $\\displaystyle\\sum_{x = 0}^{100} F_n(x)$ and give your answer modulo $1\\\\,307\\\\,674\\\\,368\\\\,000 \\\\, (= 15!)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function polynomialsOfFibonacciNumbers() {\n\n  return true;\n}\n\npolynomialsOfFibonacciNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`polynomialsOfFibonacciNumbers()` should return `252541322550`.",
          "testCode": "assert.strictEqual(polynomialsOfFibonacciNumbers(), 252541322550);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302106,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-435-polynomials-of-fibonacci-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5221000cf542c510033",
      "title": "Problem 436: Unfair wager",
      "challengeType": 1,
      "dashedName": "problem-436-unfair-wager",
      "description": "Julie proposes the following wager to her sister Louise.\n\nShe suggests they play a game of chance to determine who will wash the dishes.\n\nFor this game, they shall use a generator of independent random numbers uniformly distributed between 0 and 1.\n\nThe game starts with $S = 0$.\n\nThe first player, Louise, adds to $S$ different random numbers from the generator until $S > 1$ and records her last random number '$x$'.\n\nThe second player, Julie, continues adding to $S$ different random numbers from the generator until $S > 2$ and records her last random number '$y$'.\n\nThe player with the highest number wins and the loser washes the dishes, i.e. if $y > x$ the second player wins.\n\nFor example, if the first player draws 0.62 and 0.44, the first player turn ends since $0.62 + 0.44 > 1$ and $x = 0.44$. If the second players draws 0.1, 0.27 and 0.91, the second player turn ends since $0.62 + 0.44 + 0.1 + 0.27 + 0.91 > 2$ and $y = 0.91$. Since $y > x$, the second player wins.\n\nLouise thinks about it for a second, and objects: \"That's not fair\".\n\nWhat is the probability that the second player wins? Give your answer rounded to 10 places behind the decimal point in the form 0.abcdefghij",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function unfairWager() {\n\n  return true;\n}\n\nunfairWager();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`unfairWager()` should return `0.5276662759`.",
          "testCode": "assert.strictEqual(unfairWager(), 0.5276662759);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302107,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-436-unfair-wager.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5241000cf542c510036",
      "title": "Problem 437: Fibonacci primitive roots",
      "challengeType": 1,
      "dashedName": "problem-437-fibonacci-primitive-roots",
      "description": "When we calculate $8^n$ modulo 11 for $n = 0$ to 9 we get: 1, 8, 9, 6, 4, 10, 3, 2, 5, 7.\n\nAs we see all possible values from 1 to 10 occur. So 8 is a primitive root of 11.\n\nBut there is more:\n\nIf we take a closer look we see:\n\n$$\\begin{align}\n  & 1 + 8 = 9 \\\\\\\\\n  & 8 + 9 = 17 ≡ 6\\bmod 11 \\\\\\\\\n  & 9 + 6 = 15 ≡ 4\\bmod 11 \\\\\\\\\n  & 6 + 4 = 10 \\\\\\\\\n  & 4 + 10 = 14 ≡ 3\\bmod 11 \\\\\\\\\n  & 10 + 3 = 13 ≡ 2\\bmod 11 \\\\\\\\\n  & 3 + 2 = 5 \\\\\\\\\n  & 2 + 5 = 7 \\\\\\\\\n  & 5 + 7 = 12 ≡ 1\\bmod 11.\n\\end{align}$$\n\nSo the powers of 8 mod 11 are cyclic with period 10, and $8^n + 8^{n + 1} ≡ 8^{n + 2} (\\text{mod } 11)$. 8 is called a Fibonacci primitive root of 11.\n\nNot every prime has a Fibonacci primitive root. There are 323 primes less than 10000 with one or more Fibonacci primitive roots and the sum of these primes is 1480491.\n\nFind the sum of the primes less than $100\\\\,000\\\\,000$ with at least one Fibonacci primitive root.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function fibonacciPrimitiveRoots() {\n\n  return true;\n}\n\nfibonacciPrimitiveRoots();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`fibonacciPrimitiveRoots()` should return `74204709657207`.",
          "testCode": "assert.strictEqual(fibonacciPrimitiveRoots(), 74204709657207);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302108,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-437-fibonacci-primitive-roots.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5231000cf542c510034",
      "title": "Problem 438: Integer part of polynomial equation''s solutions",
      "challengeType": 1,
      "dashedName": "problem-438-integer-part-of-polynomial-equations-solutions",
      "description": "For an $n$-tuple of integers $t = (a_1, \\ldots, a_n)$, let $(x_1, \\ldots, x_n)$ be the solutions of the polynomial equation $x^n + a_1x^{n - 1} + a_2x^{n - 2} + \\ldots + a_{n - 1}x + a_n = 0$.\n\nConsider the following two conditions:\n\n- $x_1, \\ldots, x_n$ are all real.\n- If $x_1, ..., x_n$ are sorted, $⌊x_i⌋ = i$ for $1 ≤ i ≤ n$. ($⌊·⌋:$ floor function.)\n\nIn the case of $n = 4$, there are 12 $n$-tuples of integers which satisfy both conditions.\n\nWe define $S(t)$ as the sum of the absolute values of the integers in $t$.\n\nFor $n = 4$ we can verify that $\\sum S(t) = 2087$ for all $n$-tuples $t$ which satisfy both conditions.\n\nFind $\\sum S(t)$ for $n = 7$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function polynomialIntegerPart() {\n\n  return true;\n}\n\npolynomialIntegerPart();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`polynomialIntegerPart()` should return `2046409616809`.",
          "testCode": "assert.strictEqual(polynomialIntegerPart(), 2046409616809);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302109,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-438-integer-part-of-polynomial-equations-solutions.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5231000cf542c510035",
      "title": "Problem 439: Sum of sum of divisors",
      "challengeType": 1,
      "dashedName": "problem-439-sum-of-sum-of-divisors",
      "description": "Let $d(k)$ be the sum of all divisors of $k$.\n\nWe define the function $S(N) = \\sum_{i = 1}^N \\sum_{j = 1}^N d(i \\times j)$.\n\nFor example, $S(3) = d(1) + d(2) + d(3) + d(2) + d(4) + d(6) + d(3) + d(6) + d(9) = 59$.\n\nYou are given that $S({10}^3) = 563\\\\,576\\\\,517\\\\,282$ and $S({10}^5)\\bmod {10}^9 = 215\\\\,766\\\\,508$.\n\nFind $S({10}^{11})\\bmod {10}^9$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function sumOfSumOfDivisors() {\n\n  return true;\n}\n\nsumOfSumOfDivisors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`sumOfSumOfDivisors()` should return `968697378`.",
          "testCode": "assert.strictEqual(sumOfSumOfDivisors(), 968697378);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302110,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-439-sum-of-sum-of-divisors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5241000cf542c510037",
      "title": "Problem 440: GCD and Tiling",
      "challengeType": 1,
      "dashedName": "problem-440-gcd-and-tiling",
      "description": "We want to tile a board of length $n$ and height 1 completely, with either 1 × 2 blocks or 1 × 1 blocks with a single decimal digit on top:\n\n<img alt=\"ten blocks 1x1 with single decimal digit on top, and 1x2 block\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/gcd-and-tiling-1.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFor example, here are some of the ways to tile a board of length $n = 8$:\n\n<img alt=\"examples of ways to tile a board of length n = 8\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/gcd-and-tiling-2.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $T(n)$ be the number of ways to tile a board of length $n$ as described above.\n\nFor example, $T(1) = 10$ and $T(2) = 101$.\n\nLet $S(L)$ be the triple sum $\\sum_{a, b, c} gcd(T(c^a), T(c^b))$ for $1 ≤ a, b, c ≤ L$.\n\nFor example:\n\n$$\\begin{align}\n  & S(2) = 10\\\\,444 \\\\\\\\\n  & S(3) = 1\\\\,292\\\\,115\\\\,238\\\\,446\\\\,807\\\\,016\\\\,106\\\\,539\\\\,989 \\\\\\\\\n  & S(4)\\bmod 987\\\\,898\\\\,789 = 670\\\\,616\\\\,280.\n\\end{align}$$\n\nFind $S(2000)\\bmod 987\\\\,898\\\\,789$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function gcdAndTiling() {\n\n  return true;\n}\n\ngcdAndTiling();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`gcdAndTiling()` should return `970746056`.",
          "testCode": "assert.strictEqual(gcdAndTiling(), 970746056);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302112,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-440-gcd-and-tiling.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5261000cf542c510038",
      "title": "Problem 441: The inverse summation of coprime couples",
      "challengeType": 1,
      "dashedName": "problem-441-the-inverse-summation-of-coprime-couples",
      "description": "For an integer $M$, we define $R(M)$ as the sum of $\\frac{1}{p·q}$ for all the integer pairs $p$ and $q$ which satisfy all of these conditions:\n\n- $1 ≤ p &lt; q ≤ M$\n- $p + q ≥ M$\n- $p$ and $q$ are coprime.\n\nWe also define $S(N)$ as the sum of $R(i)$ for $2 ≤ i ≤ N$.\n\nWe can verify that $S(2) = R(2) = \\frac{1}{2}$, $S(10) ≈ 6.9147$ and $S(100) ≈ 58.2962$.\n\nFind $S({10}^7)$. Give your answer rounded to four decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function inverseSummationCoprimeCouples() {\n\n  return true;\n}\n\ninverseSummationCoprimeCouples();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`inverseSummationCoprimeCouples()` should return `5000088.8395`.",
          "testCode": "assert.strictEqual(inverseSummationCoprimeCouples(), 5000088.8395);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302113,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-441-the-inverse-summation-of-coprime-couples.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5271000cf542c510039",
      "title": "Problem 442: Eleven-free integers",
      "challengeType": 1,
      "dashedName": "problem-442-eleven-free-integers",
      "description": "An integer is called eleven-free if its decimal expansion does not contain any substring representing a power of 11 except 1.\n\nFor example, 2404 and 13431 are eleven-free, while 911 and 4121331 are not.\n\nLet $E(n)$ be the $n$th positive eleven-free integer. For example, $E(3) = 3$, $E(200) = 213$ and $E(500\\\\,000) = 531\\\\,563$.\n\nFind $E({10}^{18})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function elevenFreeIntegers() {\n\n  return true;\n}\n\nelevenFreeIntegers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`elevenFreeIntegers()` should return `1295552661530920200`.",
          "testCode": "assert.strictEqual(elevenFreeIntegers(), 1295552661530920200);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302114,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-442-eleven-free-integers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5271000cf542c51003a",
      "title": "Problem 443: GCD sequence",
      "challengeType": 1,
      "dashedName": "problem-443-gcd-sequence",
      "description": "Let $g(n)$ be a sequence defined as follows:\n\n$$\\begin{align}\n  & g(4) = 13, \\\\\\\\\n  & g(n) = g(n-1) + gcd(n, g(n - 1)) \\text{ for } n > 4.\n\\end{align}$$\n\nThe first few values are:\n\n$$\\begin{array}{l}\n  n    & 4  & 5  & 6  & 7  & 8  & 9  & 10 & 11 & 12 & 13 & 14 & 15 & 16 & 17 & 18 & 19 & 20 & \\ldots \\\\\\\\\n  g(n) & 13 & 14 & 16 & 17 & 18 & 27 & 28 & 29 & 30 & 31 & 32 & 33 & 34 & 51 & 54 & 55 & 60 & \\ldots\n\\end{array}$$\n\nYou are given that $g(1\\\\,000) = 2\\\\,524$ and $g(1\\\\,000\\\\,000) = 2\\\\,624\\\\,152$.\n\nFind $g({10}^{15})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function gcdSequence() {\n\n  return true;\n}\n\ngcdSequence();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`gcdSequence()` should return `2744233049300770`.",
          "testCode": "assert.strictEqual(gcdSequence(), 2744233049300770);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302115,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-443-gcd-sequence.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f52a1000cf542c51003b",
      "title": "Problem 444: The Roundtable Lottery",
      "challengeType": 1,
      "dashedName": "problem-444-the-roundtable-lottery",
      "description": "A group of $p$ people decide to sit down at a round table and play a lottery-ticket trading game. Each person starts off with a randomly-assigned, unscratched lottery ticket. Each ticket, when scratched, reveals a whole-pound prize ranging anywhere from £1 to £$p$, with no two tickets alike. The goal of the game is for each person to maximize his ticket winnings upon leaving the game.\n\nAn arbitrary person is chosen to be the first player. Going around the table, each player has only one of two options:\n\n1.  The player can scratch his ticket and reveal its worth to everyone at the table.\n2.  The player can trade his unscratched ticket for a previous player's scratched ticket, and then leave the game with that ticket. The previous player then scratches his newly-acquired ticket and reveals its worth to everyone at the table.\n\nThe game ends once all tickets have been scratched. All players still remaining at the table must leave with their currently-held tickets.\n\nAssume that each player uses the optimal strategy for maximizing the expected value of his ticket winnings.\n\nLet $E(p)$ represent the expected number of players left at the table when the game ends in a game consisting of $p$ players (e.g. $E(111) = 5.2912$ when rounded to 5 significant digits).\n\nLet $S_1(N) = \\displaystyle\\sum_{p = 1}^N E(p)$.\n\nLet $S_k(N) = \\displaystyle\\sum_{p = 1}^N S_{k - 1}(p)$ for $k > 1$.\n\nFind $S_{20}({10}^{14})$ and write the answer as a string in scientific notation rounded to 10 significant digits. Use a lowercase `e` to separate mantissa and exponent. For example, the answer for $S_3(100)$ would be `5.983679014e5`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function roundtableLottery() {\n\n  return true;\n}\n\nroundtableLottery();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`roundtableLottery()` should return a string.",
          "testCode": "assert.isString(roundtableLottery());"
        },
        {
          "text": "`roundtableLottery()` should return the string `1.200856722e263`.",
          "testCode": "assert.strictEqual(roundtableLottery(), '1.200856722e263');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302116,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-444-the-roundtable-lottery.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f52a1000cf542c51003c",
      "title": "Problem 445: Retractions A",
      "challengeType": 1,
      "dashedName": "problem-445-retractions-a",
      "description": "For every integer $n > 1$, the family of functions $f_{n, a, b}$ is defined by:\n\n$f_{n, a, b}(x) ≡ ax + b\\bmod n$ for $a, b, x$ integer and $0 \\lt a \\lt n$, $0 \\le b \\lt n$, $0 \\le x \\lt n$.\n\nWe will call $f_{n, a, b}$ a retraction if $f_{n, a, b}(f_{n, a, b}(x)) \\equiv f_{n, a, b}(x)\\bmod n$ for every $0 \\le x \\lt n$.\n\nLet $R(n)$ be the number of retractions for $n$.\n\nYou are given that\n\n$$\\sum_{k = 1}^{99\\\\,999} R(\\displaystyle\\binom{100\\\\,000}{k}) \\equiv 628\\\\,701\\\\,600\\bmod 1\\\\,000\\\\,000\\\\,007$$\n\nFind $$\\sum_{k = 1}^{9\\\\,999\\\\,999} R(\\displaystyle\\binom{10\\\\,000\\\\,000}{k})$$ Give your answer modulo $1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function retractionsA() {\n\n  return true;\n}\n\nretractionsA();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`retractionsA()` should return `659104042`.",
          "testCode": "assert.strictEqual(retractionsA(), 659104042);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302117,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-445-retractions-a.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f52c1000cf542c51003d",
      "title": "Problem 446: Retractions B",
      "challengeType": 1,
      "dashedName": "problem-446-retractions-b",
      "description": "For every integer $n > 1$, the family of functions $f_{n, a, b}$ is defined by:\n\n$f_{n, a, b}(x) ≡ ax + b\\bmod n$ for $a, b, x$ integer and $0 \\lt a \\lt n$, $0 \\le b \\lt n$, $0 \\le x \\lt n$.\n\nWe will call $f_{n, a, b}$ a retraction if $f_{n, a, b}(f_{n, a, b}(x)) \\equiv f_{n, a, b}(x)\\bmod n$ for every $0 \\le x \\lt n$.\n\nLet $R(n)$ be the number of retractions for $n$.\n\n$F(N) = \\displaystyle\\sum_{n = 1}^N R(n^4 + 4)$.\n\n$F(1024) = 77\\\\,532\\\\,377\\\\,300\\\\,600$.\n\nFind $F({10}^7)$. Give your answer modulo $1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function retractionsB() {\n\n  return true;\n}\n\nretractionsB();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`retractionsB()` should return `907803852`.",
          "testCode": "assert.strictEqual(retractionsB(), 907803852);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302118,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-446-retractions-b.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f52c1000cf542c51003e",
      "title": "Problem 447: Retractions C",
      "challengeType": 1,
      "dashedName": "problem-447-retractions-c",
      "description": "For every integer $n > 1$, the family of functions $f_{n, a, b}$ is defined by:\n\n$f_{n, a, b}(x) ≡ ax + b\\bmod n$ for $a, b, x$ integer and $0 \\lt a \\lt n$, $0 \\le b \\lt n$, $0 \\le x \\lt n$.\n\nWe will call $f_{n, a, b}$ a retraction if $f_{n, a, b}(f_{n, a, b}(x)) \\equiv f_{n, a, b}(x)\\bmod n$ for every $0 \\le x \\lt n$.\n\nLet $R(n)$ be the number of retractions for $n$.\n\n$F(N) = \\displaystyle\\sum_{n = 2}^N R(n)$.\n\n$F({10}^7) ≡ 638\\\\,042\\\\,271\\bmod 1\\\\,000\\\\,000\\\\,007$.\n\nFind $F({10}^{14})$. Give your answer modulo $1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function retractionsC() {\n\n  return true;\n}\n\nretractionsC();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`retractionsC()` should return `530553372`.",
          "testCode": "assert.strictEqual(retractionsC(), 530553372);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302119,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-447-retractions-c.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f52c1000cf542c51003f",
      "title": "Problem 448: Average least common multiple",
      "challengeType": 1,
      "dashedName": "problem-448-average-least-common-multiple",
      "description": "The function $lcm(a, b)$ denotes the least common multiple of $a$ and $b$.\n\nLet $A(n)$ be the average of the values of $lcm(n, i)$ for $1 ≤ i ≤ n$.\n\nE.g: $A(2) = \\frac{2 + 2}{2} = 2$ and $A(10) = \\frac{10 + 10 + 30 + 20 + 10 + 30 + 70 + 40 + 90 + 10}{10} = 32$.\n\nLet $S(n) = \\sum A(k)$ for $1 ≤ k ≤ n$.\n\n$S(100) = 122\\\\,726$.\n\nFind $S(99\\\\,999\\\\,999\\\\,019)\\bmod 999\\\\,999\\\\,017$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function averageLCM() {\n\n  return true;\n}\n\naverageLCM();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`averageLCM()` should return `106467648`.",
          "testCode": "assert.strictEqual(averageLCM(), 106467648);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302120,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-448-average-least-common-multiple.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f52d1000cf542c510040",
      "title": "Problem 449: Chocolate covered candy",
      "challengeType": 1,
      "dashedName": "problem-449-chocolate-covered-candy",
      "description": "Phil the confectioner is making a new batch of chocolate covered candy. Each candy center is shaped like an ellipsoid of revolution defined by the equation: $b^2x^2 + b^2y^2 + a^2z^2 = a^2b^2$.\n\nPhil wants to know how much chocolate is needed to cover one candy center with a uniform coat of chocolate one millimeter thick.\n\nIf $a = 1$ mm and $b = 1$ mm, the amount of chocolate required is $\\frac{28}{3} \\pi$ mm<sup>3</sup>\n\nIf $a = 2$ mm and $b = 1$ mm, the amount of chocolate required is approximately 60.35475635 mm<sup>3</sup>.\n\nFind the amount of chocolate in mm<sup>3</sup> required if $a = 3$ mm and $b = 1$ mm. Give your answer as the number rounded to 8 decimal places behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function chocolateCoveredCandy() {\n\n  return true;\n}\n\nchocolateCoveredCandy();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`chocolateCoveredCandy()` should return `103.37870096`.",
          "testCode": "assert.strictEqual(chocolateCoveredCandy(), 103.37870096);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302121,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-449-chocolate-covered-candy.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f52e1000cf542c510041",
      "title": "Problem 450: Hypocycloid and Lattice points",
      "challengeType": 1,
      "dashedName": "problem-450-hypocycloid-and-lattice-points",
      "description": "A hypocycloid is the curve drawn by a point on a small circle rolling inside a larger circle. The parametric equations of a hypocycloid centered at the origin, and starting at the right most point is given by:\n\n$$x(t) = (R - r) \\cos(t) + r \\cos(\\frac{R - r}{r}t)$$\n\n$$y(t) = (R - r) \\sin(t) - r \\sin(\\frac{R - r}{r} t)$$\n\nWhere $R$ is the radius of the large circle and $r$ the radius of the small circle.\n\nLet $C(R, r)$ be the set of distinct points with integer coordinates on the hypocycloid with radius $R$ and $r$ and for which there is a corresponding value of $t$ such that $\\sin(t)$ and $\\cos(t)$ are rational numbers.\n\nLet $S(R, r) = \\sum\\_{(x,y) \\in C(R, r)} |x| + |y|$ be the sum of the absolute values of the $x$ and $y$ coordinates of the points in $C(R, r)$.\n\nLet $T(N) = \\sum_{R = 3}^N \\sum_{r=1}^{\\left\\lfloor \\frac{R - 1}{2} \\right\\rfloor} S(R, r)$ be the sum of $S(R, r)$ for $R$ and $r$ positive integers, $R\\leq N$ and $2r &lt; R$.\n\nYou are given:\n\n$$\\begin{align}\n  C(3, 1) = & \\\\{(3, 0), (-1, 2), (-1,0), (-1,-2)\\\\} \\\\\\\\\n  C(2500, 1000) = & \\\\{(2500, 0), (772, 2376), (772, -2376), (516, 1792), (516, -1792), (500, 0), (68, 504), \\\\\\\\\n                  &(68, -504),(-1356, 1088), (-1356, -1088), (-1500, 1000), (-1500, -1000)\\\\}\n\\end{align}$$\n\n**Note:** (-625, 0) is not an element of $C(2500, 1000)$ because $\\sin(t)$ is not a rational number for the corresponding values of $t$.\n\n$S(3, 1) = (|3| + |0|) + (|-1| + |2|) + (|-1| + |0|) + (|-1| + |-2|) = 10$\n\n$T(3) = 10$; $T(10) = 524$; $T(100) = 580\\\\,442$; $T({10}^3) = 583\\\\,108\\\\,600$.\n\nFind $T({10}^6)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function hypocycloidAndLatticePoints() {\n\n  return true;\n}\n\nhypocycloidAndLatticePoints();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`hypocycloidAndLatticePoints()` should return `583333163984220900`.",
          "testCode": "assert.strictEqual(hypocycloidAndLatticePoints(), 583333163984220900);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302123,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-450-hypocycloid-and-lattice-points.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5311000cf542c510042",
      "title": "Problem 451: Modular inverses",
      "challengeType": 1,
      "dashedName": "problem-451-modular-inverses",
      "description": "Consider the number 15.\n\nThere are eight positive numbers less than 15 which are coprime to 15: 1, 2, 4, 7, 8, 11, 13, 14.\n\nThe modular inverses of these numbers modulo 15 are: 1, 8, 4, 13, 2, 11, 7, 14 because\n\n$$\\begin{align}\n  & 1  \\times 1\\bmod 15 = 1 \\\\\\\\\n  & 2  \\times 8  = 16\\bmod 15 = 1 \\\\\\\\\n  & 4  \\times 4  = 16\\bmod 15 = 1 \\\\\\\\\n  & 7  \\times 13 = 91\\bmod 15 = 1 \\\\\\\\\n  & 11 \\times 11 = 121\\bmod 15 = 1 \\\\\\\\\n  & 14 \\times 14 = 196\\bmod 15 = 1\n\\end{align}$$\n\nLet $I(n)$ be the largest positive number $m$ smaller than $n - 1$ such that the modular inverse of $m$ modulo $n$ equals $m$ itself.\n\nSo $I(15) = 11$.\n\nAlso $I(100) = 51$ and $I(7) = 1$.\n\nFind $\\sum I(n)$ for $3 ≤ n ≤ 2 \\times {10}^7$",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function modularInverses() {\n\n  return true;\n}\n\nmodularInverses();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`modularInverses()` should return `153651073760956`.",
          "testCode": "assert.strictEqual(modularInverses(), 153651073760956);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302124,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-451-modular-inverses.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5311000cf542c510043",
      "title": "Problem 452: Long Products",
      "challengeType": 1,
      "dashedName": "problem-452-long-products",
      "description": "Define $F(m, n)$ as the number of $n$-tuples of positive integers for which the product of the elements doesn't exceed $m$.\n\n$F(10, 10) = 571$.\n\n$F({10}^6, {10}^6)\\bmod 1\\\\,234\\\\,567\\\\,891 = 252\\\\,903\\\\,833$.\n\nFind $F({10}^9, {10}^9)\\bmod 1\\\\,234\\\\,567\\\\,891$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function longProducts() {\n\n  return true;\n}\n\nlongProducts();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`longProducts()` should return `345558983`.",
          "testCode": "assert.strictEqual(longProducts(), 345558983);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302125,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-452-long-products.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5311000cf542c510044",
      "title": "Problem 453: Lattice Quadrilaterals",
      "challengeType": 1,
      "dashedName": "problem-453-lattice-quadrilaterals",
      "description": "A simple quadrilateral is a polygon that has four distinct vertices, has no straight angles and does not self-intersect.\n\nLet $Q(m, n)$ be the number of simple quadrilaterals whose vertices are lattice points with coordinates ($x$, $y$) satisfying $0 ≤ x ≤ m$ and $0 ≤ y ≤ n$.\n\nFor example, $Q(2, 2) = 94$ as can be seen below:\n\n<img alt=\"94 quadrilaterals whose vertices are lattice points with coordinates (x, y) satiffying 0 &le; x &le; m and 0 &le; y &le; n\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/lattice-quadrilaterals.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nIt can also be verified that $Q(3, 7) = 39\\\\,590$, $Q(12, 3) = 309\\\\,000$ and $Q(123, 45) = 70\\\\,542\\\\,215\\\\,894\\\\,646$.\n\nFind $Q(12\\\\,345, 6\\\\,789)\\bmod 135\\\\,707\\\\,531$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function latticeQuadrilaterals() {\n\n  return true;\n}\n\nlatticeQuadrilaterals();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`latticeQuadrilaterals()` should return `104354107`.",
          "testCode": "assert.strictEqual(latticeQuadrilaterals(), 104354107);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302126,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-453-lattice-quadrilaterals.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5331000cf542c510045",
      "title": "Problem 454: Diophantine reciprocals III",
      "challengeType": 1,
      "dashedName": "problem-454-diophantine-reciprocals-iii",
      "description": "In the following equation $x$, $y$, and $n$ are positive integers.\n\n$$\\frac{1}{x} + \\frac{1}{y} = \\frac{1}{n}$$\n\nFor a limit $L$ we define $F(L)$ as the number of solutions which satisfy $x &lt; y ≤ L$.\n\nWe can verify that $F(15) = 4$ and $F(1000) = 1069$.\n\nFind $F({10}^{12})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function diophantineReciprocalsThree() {\n\n  return true;\n}\n\ndiophantineReciprocalsThree();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`diophantineReciprocalsThree()` should return `5435004633092`.",
          "testCode": "assert.strictEqual(diophantineReciprocalsThree(), 5435004633092);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302127,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-454-diophantine-reciprocals-iii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5331000cf542c510046",
      "title": "Problem 455: Powers With Trailing Digits",
      "challengeType": 1,
      "dashedName": "problem-455-powers-with-trailing-digits",
      "description": "Let $f(n)$ be the largest positive integer $x$ less than ${10}^9$ such that the last 9 digits of $n^x$ form the number $x$ (including leading zeros), or zero if no such integer exists.\n\nFor example:\n\n$$\\begin{align}\n  & f(4) = 411\\\\,728\\\\,896 (4^{411\\\\,728\\\\,896} = ...490\\underline{411728896}) \\\\\\\\\n  & f(10) = 0 \\\\\\\\\n  & f(157) = 743\\\\,757 (157^{743\\\\,757} = ...567\\underline{000743757}) \\\\\\\\\n  & Σf(n), 2 ≤ n ≤ 103 = 442\\\\,530\\\\,011\\\\,399\n\\end{align}$$\n\nFind $\\sum f(n)$, $2 ≤ n ≤ {10}^6$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function powersWithTrailingDigits() {\n\n  return true;\n}\n\npowersWithTrailingDigits();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`powersWithTrailingDigits()` should return `450186511399999`.",
          "testCode": "assert.strictEqual(powersWithTrailingDigits(), 450186511399999);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302129,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-455-powers-with-trailing-digits.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5351000cf542c510047",
      "title": "Problem 456: Triangles containing the origin II",
      "challengeType": 1,
      "dashedName": "problem-456-triangles-containing-the-origin-ii",
      "description": "Define:\n\n$$\\begin{align}\n  & x_n = ({1248}^n\\bmod 32323) - 16161 \\\\\\\\\n  & y_n = ({8421}^n\\bmod 30103) - 15051 \\\\\\\\\n  & P_n = \\\\{(x_1, y_1), (x_2, y_2), \\ldots, (x_n, y_n)\\\\}\n\\end{align}$$\n\nFor example,\n$$P_8 = \\\\{(-14913, -6630), (-10161, 5625), (5226, 11896), (8340, -10778), (15852, -5203), (-15165, 11295), (-1427, -14495), (12407, 1060)\\\\}$$\n\nLet $C(n)$ be the number of triangles whose vertices are in $P_n$ which contain the origin in the interior.\n\nExamples:\n\n$$\\begin{align}\n  & C(8) = 20 \\\\\\\\\n  & C(600) = 8\\\\,950\\\\,634 \\\\\\\\\n  & C(40\\\\,000) = 2\\\\,666\\\\,610\\\\,948\\\\,988\n\\end{align}$$\n\nFind $C(2\\\\,000\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function trianglesContainingOriginTwo() {\n\n  return true;\n}\n\ntrianglesContainingOriginTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`trianglesContainingOriginTwo()` should return `333333208685971500`.",
          "testCode": "assert.strictEqual(trianglesContainingOriginTwo(), 333333208685971500);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302130,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-456-triangles-containing-the-origin-ii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5361000cf542c510048",
      "title": "Problem 457: A polynomial modulo the square of a prime",
      "challengeType": 1,
      "dashedName": "problem-457-a-polynomial-modulo-the-square-of-a-prime",
      "description": "Let $f(n) = n^2 - 3n - 1$.\n\nLet $p$ be a prime.\n\nLet $R(p)$ be the smallest positive integer $n$ such that $f(n)\\bmod p^2 = 0$ if such an integer $n$ exists, otherwise $R(p) = 0$.\n\nLet $SR(L)$ be $\\sum R(p)$ for all primes not exceeding $L$.\n\nFind $SR({10}^7)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function polynomialModuloSquareOfPrime() {\n\n  return true;\n}\n\npolynomialModuloSquareOfPrime();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`polynomialModuloSquareOfPrime()` should return `2647787126797397000`.",
          "testCode": "assert.strictEqual(polynomialModuloSquareOfPrime(), 2647787126797397000);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302131,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-457-a-polynomial-modulo-the-square-of-a-prime.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5361000cf542c510049",
      "title": "Problem 458: Permutations of Project",
      "challengeType": 1,
      "dashedName": "problem-458-permutations-of-project",
      "description": "Consider the alphabet $A$ made out of the letters of the word `project`: $A = \\\\{c, e, j, o, p, r, t\\\\}$.\n\nLet $T(n)$ be the number of strings of length $n$ consisting of letters from $A$ that do not have a substring that is one of the 5040 permutations of `project`.\n\n$T(7) = 7^7 - 7! = 818\\\\,503$.\n\nFind $T({10}^{12})$. Give the last 9 digits of your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function permutationsOfProject() {\n\n  return true;\n}\n\npermutationsOfProject();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`permutationsOfProject()` should return `423341841`.",
          "testCode": "assert.strictEqual(permutationsOfProject(), 423341841);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302132,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-458-permutations-of-project.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5371000cf542c51004a",
      "title": "Problem 459: Flipping game",
      "challengeType": 1,
      "dashedName": "problem-459-flipping-game",
      "description": "The flipping game is a two player game played on a $N$ by $N$ square board.\n\nEach square contains a disk with one side white and one side black.\n\nThe game starts with all disks showing their white side.\n\nA turn consists of flipping all disks in a rectangle with the following properties:\n\n- the upper right corner of the rectangle contains a white disk\n- the rectangle width is a perfect square (1, 4, 9, 16, ...)\n- the rectangle height is a triangular number (1, 3, 6, 10, ...)\n\n<img alt=\"flipping all disks in a 4x3 rectangle on a 5x5 board\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/flipping-game-1.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nPlayers alternate turns. A player wins by turning the grid all black.\n\nLet $W(N)$ be the number of winning moves for the first player on a $N$ by $N$ board with all disks white, assuming perfect play.\n\n$W(1) = 1$, $W(2) = 0$, $W(5) = 8$ and $W({10}^2) = 31\\\\,395$.\n\nFor $N = 5$, the first player's eight winning first moves are:\n\n<img alt=\"eight winning first moves for N = 5\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/flipping-game-2.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nFind $W({10}^6)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function flippingGame() {\n\n  return true;\n}\n\nflippingGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`flippingGame()` should return `3996390106631`.",
          "testCode": "assert.strictEqual(flippingGame(), 3996390106631);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302133,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-459-flipping-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5381000cf542c51004b",
      "title": "Problem 460: An ant on the move",
      "challengeType": 1,
      "dashedName": "problem-460-an-ant-on-the-move",
      "description": "On the Euclidean plane, an ant travels from point $A(0, 1)$ to point $B(d, 1)$ for an integer $d$.\n\nIn each step, the ant at point ($x_0$, $y_0$) chooses one of the lattice points ($x_1$, $y_1$) which satisfy $x_1 ≥ 0$ and $y_1 ≥ 1$ and goes straight to ($x_1$, $y_1$) at a constant velocity $v$. The value of $v$ depends on $y_0$ and $y_1$ as follows:\n\n- If $y_0 = y_1$, the value of $v$ equals $y_0$.\n- If $y_0 ≠ y_1$, the value of $v$ equals $\\frac{y_1 - y_0}{\\ln y_1 - \\ln y_0}$.\n\nThe left image is one of the possible paths for $d = 4$. First the ant goes from $A(0, 1)$ to $P_1(1, 3)$ at velocity $\\frac{3 - 1}{\\ln 3 - \\ln 1} ≈ 1.8205$. Then the required time is $\\frac{\\sqrt{5}}{1.820} ≈ 1.2283$.\n\nFrom $P_1(1, 3)$ to $P_2(3, 3)$ the ant travels at velocity 3 so the required time is $\\frac{2}{3} ≈ 0.6667$. From $P_2(3, 3)$ to $B(4, 1)$ the ant travels at velocity $\\frac{1 - 3}{\\ln 1 - \\ln 3} ≈ 1.8205$ so the required time is $\\frac{\\sqrt{5}}{1.8205} ≈ 1.2283$.\n\nThus the total required time is $1.2283 + 0.6667 + 1.2283 = 3.1233$.\n\nThe right image is another path. The total required time is calculated as $0.98026 + 1 + 0.98026 = 2.96052$. It can be shown that this is the quickest path for $d = 4$.\n\n<img alt=\"two possible paths for d = 4\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/an-ant-on-the-move.jpg\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $F(d)$ be the total required time if the ant chooses the quickest path. For example, $F(4) ≈ 2.960\\\\,516\\\\,287$. We can verify that $F(10) ≈ 4.668\\\\,187\\\\,834$ and $F(100) ≈ 9.217\\\\,221\\\\,972$.\n\nFind $F(10\\\\,000)$. Give your answer rounded to nine decimal places.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function antOnTheMove() {\n\n  return true;\n}\n\nantOnTheMove();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`antOnTheMove()` should return `18.420738199`.",
          "testCode": "assert.strictEqual(antOnTheMove(), 18.420738199);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302135,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-460-an-ant-on-the-move.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f53a1000cf542c51004c",
      "title": "Problem 461: Almost Pi",
      "challengeType": 1,
      "dashedName": "problem-461-almost-pi",
      "description": "Let `f(k, n)` = $e^\\frac{k}{n} - 1$, for all non-negative integers `k`.\n\nRemarkably, `f(6, 200) + f(75, 200) + f(89, 200) + f(226, 200)` = 3.1415926… ≈ π.\n\nIn fact, it is the best approximation of π of the form `f(a, 200) + f(b, 200) + f(c, 200) + f(d, 200)`.\n\nLet `almostPi(n)` = a<sup>2</sup> + b<sup>2</sup> + c<sup>2</sup> + d<sup>2</sup> for a, b, c, d that minimize the error: $\\lvert f(a,n) + f(b,n) + f(c,n) + f(d,n) - \\Pi\\rvert$\n\nYou are given `almostPi(200)` = 6<sup>2</sup> + 75<sup>2</sup> + 89<sup>2</sup> + 226<sup>2</sup> = 64658.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function almostPi(n) {\n  \n  return true;\n}"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "function almostPi(n) {\n  const max_k = Math.ceil(n * Math.log(Math.PI + 1)) + 1;\n  const     f = Array(max_k)\n                  .fill(0)\n                  .map((_, i) => Math.exp(i / n) - 1);\n\n  // Pairs of values\n  const pairs     = Array(max_k * (max_k - 1) / 2);\n  let   num_pairs = 0;\n\n  for (let b = 1; b < max_k; b++) {\n    for (let a = 0; a < b; a++) {\n      const value = f[a] + f[b];\n\n      if (value > Math.PI) break;\n      pairs[num_pairs] = {a, b, value};\n      num_pairs++;\n    }\n  }\n  pairs.sort((a, b) => a.value - b.value);\n\n  // Find lowest matching pair for each pair\n  let min_error = Math.PI;\n  let min_abcd  = -1;\n\n  for (let i = 0; i < num_pairs; i++) {\n    const error = Math.PI - pairs[i].value;\n    let start   = i;\n    let stop    = num_pairs - 1;\n\n    // Find best match\n    while (stop - start > 1) {\n      let mid = start + Math.floor((stop - start) / 2);\n\n      if (pairs[mid].value > error) stop = mid - 1;\n      else start = mid + 1;\n    }\n\n    // Compute new best error\n    for (const j of [start, stop]) {\n      const new_error = Math.abs(error - pairs[j].value);\n\n      if (new_error < min_error) {\n        min_error = new_error;\n        min_abcd  = pairs[i].a * pairs[i].a + pairs[i].b * pairs[i].b +\n                    pairs[j].a * pairs[j].a + pairs[j].b * pairs[j].b;\n      }\n    }\n  }\n  return min_abcd;\n}"
        }
      ],
      "tests": [
        {
          "text": "`almostPi` should be a function.",
          "testCode": "assert.isFunction(almostPi);"
        },
        {
          "text": "`almostPi` should return a number.",
          "testCode": "assert.strictEqual(typeof almostPi(10), 'number');"
        },
        {
          "text": "`almostPi(29)` should return `1208`.",
          "testCode": "assert.strictEqual(almostPi(29), 1208);"
        },
        {
          "text": "`almostPi(50)` should return `4152`.",
          "testCode": "assert.strictEqual(almostPi(50), 4152);"
        },
        {
          "text": "`almostPi(200)` should return `64658`.",
          "testCode": "assert.strictEqual(almostPi(200), 64658);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302136,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-461-almost-pi.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f53b1000cf542c51004d",
      "title": "Problem 462: Permutation of 3-smooth numbers",
      "challengeType": 1,
      "dashedName": "problem-462-permutation-of-3-smooth-numbers",
      "description": "A 3-smooth number is an integer which has no prime factor larger than 3. For an integer $N$, we define $S(N)$ as the set of 3-smooth numbers less than or equal to $N$. For example, $S(20) = \\\\{1, 2, 3, 4, 6, 8, 9, 12, 16, 18\\\\}$.\n\nWe define $F(N)$ as the number of permutations of $S(N)$ in which each element comes after all of its proper divisors.\n\nThis is one of the possible permutations for $N = 20$.\n\n-   1, 2, 4, 3, 9, 8, 16, 6, 18, 12.\n\nThis is not a valid permutation because 12 comes before its divisor 6.\n\n-   1, 2, 4, 3, 9, 8, 12, 16, 6, 18.\n\nWe can verify that $F(6) = 5$, $F(8) = 9$, $F(20) = 450$ and $F(1000) ≈ 8.8521816557e\\\\,21$.\n\nFind $F({10}^{18})$. Give your answer as a string in scientific notation rounded to ten digits after the decimal point. When giving your answer, use a lowercase `e` to separate mantissa and exponent. E.g. if the answer is $112\\\\,233\\\\,445\\\\,566\\\\,778\\\\,899$ then the answer format would be `1.1223344557e17`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function permutationOf3SmoothNumbers() {\n\n  return true;\n}\n\npermutationOf3SmoothNumbers();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`permutationOf3SmoothNumbers()` should return a string.",
          "testCode": "assert.strictEqual(typeof permutationOf3SmoothNumbers(), 'string');"
        },
        {
          "text": "`permutationOf3SmoothNumbers()` should return the string `5.5350769703e1512`.",
          "testCode": "assert.strictEqual(permutationOf3SmoothNumbers(), '5.5350769703e1512');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302137,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-462-permutation-of-3-smooth-numbers.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f53c1000cf542c51004e",
      "title": "Problem 463: A weird recurrence relation",
      "challengeType": 1,
      "dashedName": "problem-463-a-weird-recurrence-relation",
      "description": "The function $f$ is defined for all positive integers as follows:\n\n$$\\begin{align}\n  & f(1) = 1 \\\\\\\\\n  & f(3) = 3 \\\\\\\\\n  & f(2n) = f(n) \\\\\\\\\n  & f(4n + 1) = 2f(2n + 1) - f(n) \\\\\\\\\n  & f(4n + 3) = 3f(2n + 1) - 2f(n)\n\\end{align}$$\n\nThe function $S(n)$ is defined as $\\sum_{i=1}^{n} f(i)$.\n\n$S(8) = 22$ and $S(100) = 3604$.\n\nFind $S(3^{37})$. Give the last 9 digits of your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function weirdRecurrenceRelation() {\n\n  return true;\n}\n\nweirdRecurrenceRelation();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`weirdRecurrenceRelation()` should return `808981553`.",
          "testCode": "assert.strictEqual(weirdRecurrenceRelation(), 808981553);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302138,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-463-a-weird-recurrence-relation.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f53d1000cf542c51004f",
      "title": "Problem 464: Möbius function and intervals",
      "challengeType": 1,
      "dashedName": "problem-464-mbius-function-and-intervals",
      "description": "The Möbius function, denoted $μ(n)$, is defined as:\n\n- $μ(n) = (-1)^{ω(n)}$ if $n$ is squarefree (where $ω(n)$ is the number of distinct prime factors of $n$)\n- $μ(n) = 0$ if $n$ is not squarefree.\n\nLet $P(a, b)$ be the number of integers $n$ in the interval $[a, b]$ such that $μ(n) = 1$.\n\nLet $N(a, b)$ be the number of integers $n$ in the interval $[a, b]$ such that $μ(n) = -1$.\n\nFor example, $P(2, 10) = 2$ and $N(2, 10) = 4$.\n\nLet $C(n)$ be the number of integer pairs $(a, b)$ such that:\n\n- $1 ≤ a ≤ b ≤ n$,\n- $99 \\times N(a, b) ≤ 100 \\times P(a, b)$, and\n- $99 \\times P(a, b) ≤ 100 \\times N(a, b)$.\n\nFor example, $C(10) = 13$, $C(500) = 16\\\\,676$ and $C(10\\\\,000) = 20\\\\,155\\\\,319$.\n\nFind $C(20\\\\,000\\\\,000)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function mobiusFunctionAndIntervals() {\n\n  return true;\n}\n\nmobiusFunctionAndIntervals();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`mobiusFunctionAndIntervals()` should return `198775297232878`.",
          "testCode": "assert.strictEqual(mobiusFunctionAndIntervals(), 198775297232878);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302139,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-464-mbius-function-and-intervals.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f53d1000cf542c510050",
      "title": "Problem 465: Polar polygons",
      "challengeType": 1,
      "dashedName": "problem-465-polar-polygons",
      "description": "The kernel of a polygon is defined by the set of points from which the entire polygon's boundary is visible. We define a polar polygon as a polygon for which the origin is strictly contained inside its kernel.\n\nFor this problem, a polygon can have collinear consecutive vertices. However, a polygon still cannot have self-intersection and cannot have zero area.\n\nFor example, only the first of the following is a polar polygon (the kernels of the second, third, and fourth do not strictly contain the origin, and the fifth does not have a kernel at all):\n\n<img alt=\"five example polygons\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/polar-polygons.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nNotice that the first polygon has three consecutive collinear vertices.\n\nLet $P(n)$ be the number of polar polygons such that the vertices $(x, y)$ have integer coordinates whose absolute values are not greater than $n$.\n\nNote that polygons should be counted as different if they have different set of edges, even if they enclose the same area. For example, the polygon with vertices [(0,0), (0,3), (1,1), (3,0)] is distinct from the polygon with vertices [(0,0), (0,3), (1,1), (3,0), (1,0)].\n\nFor example, $P(1) = 131$, $P(2) = 1\\\\,648\\\\,531$, $P(3) = 1\\\\,099\\\\,461\\\\,296\\\\,175$ and $P(343)\\bmod 1\\\\,000\\\\,000\\\\,007 = 937\\\\,293\\\\,740$.\n\nFind $P(7^{13})\\bmod 1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function polarPolygons() {\n\n  return true;\n}\n\npolarPolygons();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`polarPolygons()` should return `585965659`.",
          "testCode": "assert.strictEqual(polarPolygons(), 585965659);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302140,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-465-polar-polygons.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f53e1000cf542c510051",
      "title": "Problem 466: Distinct terms in a multiplication table",
      "challengeType": 1,
      "dashedName": "problem-466-distinct-terms-in-a-multiplication-table",
      "description": "Let $P(m,n)$ be the number of distinct terms in an $m×n$ multiplication table.\n\nFor example, a 3×4 multiplication table looks like this:\n\n$$\\begin{array}{c}\n  ×          & \\mathbf{1} & \\mathbf{2} & \\mathbf{3} & \\mathbf{4}  \\\\\\\\\n  \\mathbf{1} & 1          & 2          & 3          & 4  \\\\\\\\\n  \\mathbf{2} & 2          & 4          & 6          & 8  \\\\\\\\\n  \\mathbf{3} & 3          & 6          & 9          & 12\n\\end{array}$$\n\nThere are 8 distinct terms {1, 2, 3, 4, 6, 8, 9, 12}, therefore $P(3, 4) = 8$.\n\nYou are given that:\n\n$$\\begin{align}\n  & P(64, 64) = 1\\\\,263, \\\\\\\\\n  & P(12, 345) = 1\\\\,998, \\text{ and} \\\\\\\\\n  & P(32, {10}^{15}) = 13\\\\,826\\\\,382\\\\,602\\\\,124\\\\,302. \\\\\\\\\n\\end{align}$$\n\nFind $P(64, {10}^{16})$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function multiplicationTable() {\n\n  return true;\n}\n\nmultiplicationTable();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`multiplicationTable()` should return `258381958195474750`.",
          "testCode": "assert.strictEqual(multiplicationTable(), 258381958195474750);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302141,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-466-distinct-terms-in-a-multiplication-table.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5411000cf542c510052",
      "title": "Problem 467: Superinteger",
      "challengeType": 1,
      "dashedName": "problem-467-superinteger",
      "description": "An integer $s$ is called a superinteger of another integer $n$ if the digits of $n$ form a subsequence of the digits of $s$.\n\nFor example, 2718281828 is a superinteger of 18828, while 314159 is not a superinteger of 151.\n\nLet $p(n)$ be the $n$th prime number, and let $c(n)$ be the $n$th composite number. For example, $p(1) = 2$, $p(10) = 29$, $c(1) = 4$ and $c(10) = 18$.\n\n$$\\begin{align}\n  & \\\\{p(i) : i ≥ 1\\\\} = \\\\{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, \\ldots \\\\} \\\\\\\\\n  & \\\\{c(i) : i ≥ 1\\\\} = \\\\{4, 6, 8, 9, 10, 12, 14, 15, 16, 18, \\ldots \\\\}\n\\end{align}$$\n\nLet $P^D$ the sequence of the digital roots of $\\\\{p(i)\\\\}$ ($C^D$ is defined similarly for $\\\\{c(i)\\\\}$):\n\n$$\\begin{align}\n  & P^D = \\\\{2, 3, 5, 7, 2, 4, 8, 1, 5, 2, \\ldots \\\\} \\\\\\\\\n  & C^D = \\\\{4, 6, 8, 9, 1, 3, 5, 6, 7, 9, \\ldots \\\\}\n\\end{align}$$\n\nLet $P_n$ be the integer formed by concatenating the first $n$ elements of $P^D$ ($C_n$ is defined similarly for $C^D$).\n\n$$\\begin{align}\n  & P_{10} = 2\\\\,357\\\\,248\\\\,152 \\\\\\\\\n  & C_{10} = 4\\\\,689\\\\,135\\\\,679\n\\end{align}$$\n\nLet $f(n)$ be the smallest positive integer that is a common superinteger of $P_n$ and $C_n$. For example, $f(10) = 2\\\\,357\\\\,246\\\\,891\\\\,352\\\\,679$, and $f(100)\\bmod 1\\\\,000\\\\,000\\\\,007 = 771\\\\,661\\\\,825$.\n\nFind $f(10\\\\,000)\\bmod 1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function superinteger() {\n\n  return true;\n}\n\nsuperinteger();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`superinteger()` should return `775181359`.",
          "testCode": "assert.strictEqual(superinteger(), 775181359);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302142,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-467-superinteger.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5411000cf542c510054",
      "title": "Problem 468: Smooth divisors of binomial coefficients",
      "challengeType": 1,
      "dashedName": "problem-468-smooth-divisors-of-binomial-coefficients",
      "description": "An integer is called B-smooth if none of its prime factors is greater than $B$.\n\nLet $SB(n)$ be the largest B-smooth divisor of $n$.\n\nExamples:\n\n$$\\begin{align}\n  & S_1(10) = 1 \\\\\\\\\n  & S_4(2\\\\,100) = 12 \\\\\\\\\n  & S_{17}(2\\\\,496\\\\,144) = 5\\\\,712\n\\end{align}$$\n\nDefine $F(n) = \\displaystyle\\sum_{B = 1}^n \\sum_{r = 0}^n S_B(\\displaystyle\\binom{n}{r})$. Here, $\\displaystyle\\binom{n}{r}$ denotes the binomial coefficient.\n\nExamples:\n\n$$\\begin{align}\n  & F(11) = 3132 \\\\\\\\\n  & F(1\\\\,111)\\bmod 1\\\\,000\\\\,000\\\\,993 = 706\\\\,036\\\\,312 \\\\\\\\\n  & F(111\\\\,111)\\bmod 1\\\\,000\\\\,000\\\\,993 = 22\\\\,156\\\\,169\n\\end{align}$$\n\nFind $F(11\\\\,111\\\\,111)\\bmod 1\\\\,000\\\\,000\\\\,993$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function smoothDivisorsOfBinomialCoefficients() {\n\n  return true;\n}\n\nsmoothDivisorsOfBinomialCoefficients();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`smoothDivisorsOfBinomialCoefficients()` should return `852950321`.",
          "testCode": "assert.strictEqual(smoothDivisorsOfBinomialCoefficients(), 852950321);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302143,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-468-smooth-divisors-of-binomial-coefficients.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5411000cf542c510053",
      "title": "Problem 469: Empty chairs",
      "challengeType": 1,
      "dashedName": "problem-469-empty-chairs",
      "description": "In a room $N$ chairs are placed around a round table.\n\nKnights enter the room one by one and choose at random an available empty chair.\n\nTo have enough elbow room the knights always leave at least one empty chair between each other.\n\nWhen there aren't any suitable chairs left, the fraction $C$ of empty chairs is determined. We also define $E(N)$ as the expected value of $C$.\n\nWe can verify that $E(4) = \\frac{1}{2}$ and $E(6) = \\frac{5}{9}$.\n\nFind $E({10}^{18})$. Give your answer rounded to fourteen decimal places in the form 0.abcdefghijklmn.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function emptyChairs() {\n\n  return true;\n}\n\nemptyChairs();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`emptyChairs()` should return `0.56766764161831`.",
          "testCode": "assert.strictEqual(emptyChairs(), 0.56766764161831);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302144,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-469-empty-chairs.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5431000cf542c510055",
      "title": "Problem 470: Super Ramvok",
      "challengeType": 1,
      "dashedName": "problem-470-super-ramvok",
      "description": "Consider a single game of Ramvok:\n\nLet $t$ represent the maximum number of turns the game lasts. If $t = 0$, then the game ends immediately. Otherwise, on each turn $i$, the player rolls a die. After rolling, if $i &lt; t$ the player can either stop the game and receive a prize equal to the value of the current roll, or discard the roll and try again next turn. If $i = t$, then the roll cannot be discarded and the prize must be accepted. Before the game begins, $t$ is chosen by the player, who must then pay an up-front cost $ct$ for some constant $c$. For $c = 0$, $t$ can be chosen to be infinite (with an up-front cost of 0). Let $R(d, c)$ be the expected profit (i.e. net gain) that the player receives from a single game of optimally-played Ramvok, given a fair $d$-sided die and cost constant $c$. For example, $R(4, 0.2) = 2.65$. Assume that the player has sufficient funds for paying any/all up-front costs.\n\nNow consider a game of Super Ramvok:\n\nIn Super Ramvok, the game of Ramvok is played repeatedly, but with a slight modification. After each game, the die is altered. The alteration process is as follows: The die is rolled once, and if the resulting face has its pips visible, then that face is altered to be blank instead. If the face is already blank, then it is changed back to its original value. After the alteration is made, another game of Ramvok can begin (and during such a game, at each turn, the die is rolled until a face with a value on it appears). The player knows which faces are blank and which are not at all times. The game of Super Ramvok ends once all faces of the die are blank.\n\nLet $S(d, c)$ be the expected profit that the player receives from an optimally-played game of Super Ramvok, given a fair $d$-sided die to start (with all sides visible), and cost constant $c$. For example, $S(6, 1) = 208.3$.\n\nLet $F(n) = \\sum_{4 ≤ d ≤ n} \\sum_{0 ≤ c ≤ n} S(d, c)$.\n\nCalculate $F(20)$, rounded to the nearest integer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function superRamvok() {\n\n  return true;\n}\n\nsuperRamvok();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`superRamvok()` should return `147668794`.",
          "testCode": "assert.strictEqual(superRamvok(), 147668794);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302146,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-470-super-ramvok.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5431000cf542c510056",
      "title": "Problem 471: Triangle inscribed in ellipse",
      "challengeType": 1,
      "dashedName": "problem-471-triangle-inscribed-in-ellipse",
      "description": "The triangle $ΔABC$ is inscribed in an ellipse with equation $\\frac{x^2}{a^2} + \\frac{y^2}{b^2} = 1$, $0 &lt; 2b &lt; a$, $a$ and $b$ integers.\n\nLet $r(a, b)$ be the radius of the incircle of $ΔABC$ when the incircle has center $(2b, 0)$ and $A$ has coordinates $\\left(\\frac{a}{2}, \\frac{\\sqrt{3}}{2}b\\right)$.\n\nFor example, $r(3, 1) = \\frac{1}{2}, r(6, 2) = 1, r(12, 3) = 2$.\n\n<img alt=\"triangle ΔABC inscribed in an ellipse, radius of the incircle of ΔABC r(6, 2) = 1\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/triangle-inscribed-in-ellipse-1.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\n<img alt=\"triangle ΔABC inscribed in an ellipse, radius of the incircle of ΔABC r(12, 3) = 2\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/triangle-inscribed-in-ellipse-2.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nLet $G(n) = \\sum_{a = 3}^n \\sum_{b = 1}^{\\left\\lfloor\\frac{a - 1}{2} \\right\\rfloor} r(a, b)$\n\nYou are given $G(10) = 20.59722222$, $G(100) = 19223.60980$ (rounded to 10 significant digits).\n\nFind $G({10}^{11})$. Give your answer as a string in scientific notation rounded to 10 significant digits. Use a lowercase `e` to separate mantissa and exponent.\n\nFor $G(10)$ the answer would have been `2.059722222e1`",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function triangleInscribedInEllipse() {\n\n  return true;\n}\n\ntriangleInscribedInEllipse();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`triangleInscribedInEllipse()` should return a string.",
          "testCode": "assert.isString(triangleInscribedInEllipse());"
        },
        {
          "text": "`triangleInscribedInEllipse()` should return the string `1.895093981e31`.",
          "testCode": "assert.strictEqual(triangleInscribedInEllipse(), '1.895093981e31');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302148,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-471-triangle-inscribed-in-ellipse.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5451000cf542c510057",
      "title": "Problem 472: Comfortable Distance II",
      "challengeType": 1,
      "dashedName": "problem-472-comfortable-distance-ii",
      "description": "There are $N$ seats in a row. $N$ people come one after another to fill the seats according to the following rules:\n\n1. No person sits beside another.\n1. The first person chooses any seat.\n1. Each subsequent person chooses the seat furthest from anyone else already seated, as long as it does not violate rule 1. If there is more than one choice satisfying this condition, then the person chooses the leftmost choice.\n\nNote that due to rule 1, some seats will surely be left unoccupied, and the maximum number of people that can be seated is less than $N$ (for $N > 1$).\n\nHere are the possible seating arrangements for $N = 15$:\n\n<img alt=\"seating arrangements for N = 15\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/comfortable-distance-ii.png\" style=\"background-color: white; padding: 10px; display: block; margin-right: auto; margin-left: auto; margin-bottom: 1.2rem;\">\n\nWe see that if the first person chooses correctly, the 15 seats can seat up to 7 people. We can also see that the first person has 9 choices to maximize the number of people that may be seated.\n\nLet $f(N)$ be the number of choices the first person has to maximize the number of occupants for $N$ seats in a row. Thus, $f(1) = 1$, $f(15) = 9$, $f(20) = 6$, and $f(500) = 16$.\n\nAlso, $\\sum f(N) = 83$ for $1 ≤ N ≤ 20$ and $\\sum f(N) = 13\\\\,343$ for $1 ≤ N ≤ 500$.\n\nFind $\\sum f(N)$ for $1 ≤ N ≤ {10}^{12}$. Give the last 8 digits of your answer.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function comfortableDistanceTwo() {\n\n  return true;\n}\n\ncomfortableDistanceTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`comfortableDistanceTwo()` should return `73811586`.",
          "testCode": "assert.strictEqual(comfortableDistanceTwo(), 73811586);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302149,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-472-comfortable-distance-ii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5461000cf542c510058",
      "title": "Problem 473: Phigital number base",
      "challengeType": 1,
      "dashedName": "problem-473-phigital-number-base",
      "description": "Let $\\varphi$ be the golden ratio: $\\varphi = \\frac{1+\\sqrt{5}}{2}.$\n\nRemarkably it is possible to write every positive integer as a sum of powers of $\\varphi$ even if we require that every power of $\\varphi$ is used at most once in this sum.\n\nEven then this representation is not unique.\n\nWe can make it unique by requiring that no powers with consecutive exponents are used and that the representation is finite.\n\nE.g:\n\n$2 = \\varphi + \\varphi^{-2}$ and $3 = \\varphi^{2} + \\varphi^{-2}$\n\nTo represent this sum of powers of $\\varphi$ we use a string of 0's and 1's with a point to indicate where the negative exponents start. We call this the representation in the phigital numberbase.\n\nSo $1 = 1_{\\varphi}$, $2 = 10.01_{\\varphi}$, $3 = 100.01_{\\varphi}$ and $14 = 100100.001001_{\\varphi}$. The strings representing 1, 2 and 14 in the phigital number base are palindromic, while the string representing 3 is not (the phigital point is not the middle character).\n\nThe sum of the positive integers not exceeding 1000 whose phigital representation is palindromic is 4345.\n\nFind the sum of the positive integers not exceeding $10^{10}$ whose phigital representation is palindromic.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function phigitalNumberBase() {\n\n  return true;\n}\n\nphigitalNumberBase();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`phigitalNumberBase()` should return `35856681704365`.",
          "testCode": "assert.strictEqual(phigitalNumberBase(), 35856681704365);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302150,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-473-phigital-number-base.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5471000cf542c510059",
      "title": "Problem 474: Last digits of divisors",
      "challengeType": 1,
      "dashedName": "problem-474-last-digits-of-divisors",
      "description": "For a positive integer $n$ and digits $d$, we define $F(n, d)$ as the number of the divisors of $n$ whose last digits equal $d$.\n\nFor example, $F(84, 4) = 3$. Among the divisors of 84 (1, 2, 3, 4, 6, 7, 12, 14, 21, 28, 42, 84), three of them (4, 14, 84) have the last digit 4.\n\nWe can also verify that $F(12!, 12) = 11$ and $F(50!, 123) = 17\\\\,888$.\n\nFind $F({10}^6!, 65\\\\,432) \\text{ modulo } ({10}^{16} + 61)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function lastDigitsOfDivisors() {\n\n  return true;\n}\n\nlastDigitsOfDivisors();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`lastDigitsOfDivisors()` should return `9690646731515010`.",
          "testCode": "assert.strictEqual(lastDigitsOfDivisors(), 9690646731515010);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302151,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-474-last-digits-of-divisors.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5481000cf542c51005a",
      "title": "Problem 475: Music festival",
      "challengeType": 1,
      "dashedName": "problem-475-music-festival",
      "description": "$12n$ musicians participate at a music festival. On the first day, they form $3n$ quartets and practice all day.\n\nIt is a disaster. At the end of the day, all musicians decide they will never again agree to play with any member of their quartet.\n\nOn the second day, they form $4n$ trios, each musician avoiding his previous quartet partners.\n\nLet $f(12n)$ be the number of ways to organize the trios amongst the $12n$ musicians.\n\nYou are given $f(12) = 576$ and $f(24)\\bmod 1\\\\,000\\\\,000\\\\,007 = 509\\\\,089\\\\,824$.\n\nFind $f(600)\\bmod 1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function musicFestival() {\n\n  return true;\n}\n\nmusicFestival();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`musicFestival()` should return `75780067`.",
          "testCode": "assert.strictEqual(musicFestival(), 75780067);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302152,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-475-music-festival.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f5481000cf542c51005b",
      "title": "Problem 476: Circle Packing II",
      "challengeType": 1,
      "dashedName": "problem-476-circle-packing-ii",
      "description": "Let $R(a, b, c)$ be the maximum area covered by three non-overlapping circles inside a triangle with edge lengths $a$, $b$ and $c$.\n\nLet $S(n)$ be the average value of $R(a, b, c)$ over all integer triplets $(a, b, c)$ such that $1 ≤ a ≤ b ≤ c &lt; a + b ≤ n$.\n\nYou are given $S(2) = R(1, 1, 1) ≈ 0.31998$, $S(5) ≈ 1.25899$.\n\nFind $S(1803)$ rounded to 5 decimal places behind the decimal point.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function circlePackingTwo() {\n\n  return true;\n}\n\ncirclePackingTwo();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`circlePackingTwo()` should return `110242.87794`.",
          "testCode": "assert.strictEqual(circlePackingTwo(), 110242.87794);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302153,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-476-circle-packing-ii.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f54a1000cf542c51005c",
      "title": "Problem 477: Number Sequence Game",
      "challengeType": 1,
      "dashedName": "problem-477-number-sequence-game",
      "description": "The number sequence game starts with a sequence $S$ of $N$ numbers written on a line.\n\nTwo players alternate turns. At his turn, a player must select and remove either the first or the last number remaining in the sequence.\n\nThe player score is the sum of all the numbers he has taken. Each player attempts to maximize his own sum.\n\nIf $N = 4$ and $S = \\\\{1, 2, 10, 3\\\\}$, then each player maximizes his score as follows:\n\n- Player 1: removes the first number (1)\n- Player 2: removes the last number from the remaining sequence (3)\n- Player 1: removes the last number from the remaining sequence (10)\n- Player 2: removes the remaining number (2)\n\nPlayer 1 score is $1 + 10 = 11$.\n\nLet $F(N)$ be the score of player 1 if both players follow the optimal strategy for the sequence $S = \\\\{s_1, s_2, \\ldots, s_N\\\\}$ defined as:\n\n- $s_1 = 0$\n- $s_{i + 1} = ({s_i}^2 + 45)$ modulo $1\\\\,000\\\\,000\\\\,007$\n\nThe sequence begins with $S = \\\\{0, 45, 2\\\\,070, 4\\\\,284\\\\,945, 753\\\\,524\\\\,550, 478\\\\,107\\\\,844, 894\\\\,218\\\\,625, \\ldots\\\\}$.\n\nYou are given $F(2) = 45$, $F(4) = 4\\\\,284\\\\,990$, $F(100) = 26\\\\,365\\\\,463\\\\,243$, $F(104) = 2\\\\,495\\\\,838\\\\,522\\\\,951$.\n\nFind $F({10}^8)$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function numberSequenceGame() {\n\n  return true;\n}\n\nnumberSequenceGame();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`numberSequenceGame()` should return `25044905874565164`.",
          "testCode": "assert.strictEqual(numberSequenceGame(), 25044905874565164);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302154,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-477-number-sequence-game.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f54c1000cf542c51005e",
      "title": "Problem 478: Mixtures",
      "challengeType": 1,
      "dashedName": "problem-478-mixtures",
      "description": "Let us consider mixtures of three substances: $A$, $B$ and $C$. A mixture can be described by a ratio of the amounts of $A$, $B$, and $C$ in it, i.e., $(a : b : c)$. For example, a mixture described by the ratio (2 : 3 : 5) contains 20% $A$, 30% $B$ and 50% $C$.\n\nFor the purposes of this problem, we cannot separate the individual components from a mixture. However, we can combine different amounts of different mixtures to form mixtures with new ratios.\n\nFor example, say we have three mixtures with ratios (3 : 0 : 2), (3 : 6 : 11) and (3 : 3 : 4). By mixing 10 units of the first, 20 units of the second and 30 units of the third, we get a new mixture with ratio (6 : 5 : 9), since: ($10 \\times \\frac{3}{5} + 20 \\times \\frac{3}{20} + 30 \\times \\frac{3}{10}$ : $10 \\times \\frac{0}{5} + 20 \\times \\frac{6}{20} + 30 \\times \\frac{3}{10}$ : $10 \\times \\frac{2}{5} + 20 \\times \\frac{11}{20} + 30 \\times \\frac{4}{10}$) = (18 : 15 : 27) = (6 : 5 : 9)\n\nHowever, with the same three mixtures, it is impossible to form the ratio (3 : 2 : 1), since the amount of $B$ is always less than the amount of $C$.\n\nLet $n$ be a positive integer. Suppose that for every triple of integers $(a, b, c)$ with $0 ≤ a, b, c ≤ n$ and $gcd(a, b, c) = 1$, we have a mixture with ratio $(a : b : c)$. Let $M(n)$ be the set of all such mixtures.\n\nFor example, $M(2)$ contains the 19 mixtures with the following ratios:\n\n{(0 : 0 : 1), (0 : 1 : 0), (0 : 1 : 1), (0 : 1 : 2), (0 : 2 : 1), (1 : 0 : 0), (1 : 0 : 1), (1 : 0 : 2), (1 : 1 : 0), (1 : 1 : 1), (1 : 1 : 2), (1 : 2 : 0), (1 : 2 : 1), (1 : 2 : 2), (2 : 0 : 1), (2 : 1 : 0), (2 : 1 : 1), (2 : 1 : 2), (2 : 2 : 1)}.\n\nLet $E(n)$ be the number of subsets of $M(n)$ which can produce the mixture with ratio (1 : 1 : 1), i.e., the mixture with equal parts $A$, $B$ and $C$.\n\nWe can verify that $E(1) = 103$, $E(2) = 520\\\\,447$, $E(10)\\bmod {11}^8 = 82\\\\,608\\\\,406$ and $E(500)\\bmod {11}^8 = 13\\\\,801\\\\,403$.\n\nFind $E(10\\\\,000\\\\,000)\\bmod {11}^8$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function mixtures() {\n\n  return true;\n}\n\nmixtures();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`mixtures()` should return `59510340`.",
          "testCode": "assert.strictEqual(mixtures(), 59510340);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302155,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-478-mixtures.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f54b1000cf542c51005d",
      "title": "Problem 479: Roots on the Rise",
      "challengeType": 1,
      "dashedName": "problem-479-roots-on-the-rise",
      "description": "Let $a_k$, $b_k$, and $c_k$ represent the three solutions (real or complex numbers) to the expression $\\frac{1}{x} = {\\left(\\frac{k}{x} \\right)}^2 (k + x^2) - kx$.\n\nFor instance, for $k = 5$, we see that $\\\\{a_5, b_5, c_5\\\\}$ is approximately $\\\\{5.727244, -0.363622 + 2.057397i, -0.363622 - 2.057397i\\\\}$.\n\nLet $S(n) = \\displaystyle\\sum_{p = 1}^n \\sum_{k = 1}^n {(a_k + b_k)}^p {(b_k + c_k)}^p {(c_k + a_k)}^p$ for all integers $p$, $k$ such that $1 ≤ p, k ≤ n$.\n\nInterestingly, $S(n)$ is always an integer. For example, $S(4) = 51\\\\,160$.\n\nFind $S({10}^6) \\text{ modulo } 1\\\\,000\\\\,000\\\\,007$.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function rootsOnTheRise() {\n\n  return true;\n}\n\nrootsOnTheRise();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`rootsOnTheRise()` should return `191541795`.",
          "testCode": "assert.strictEqual(rootsOnTheRise(), 191541795);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302156,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-479-roots-on-the-rise.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    },
    {
      "id": "5900f54c1000cf542c51005f",
      "title": "Problem 480: The Last Question",
      "challengeType": 1,
      "dashedName": "problem-480-the-last-question",
      "description": "Consider all the words which can be formed by selecting letters, in any order, from the phrase:\n\n$$\\mathbf{\\text{thereisasyetinsufficientdataforameaningfulanswer}}$$\n\nSuppose those with 15 letters or less are listed in alphabetical order and numbered sequentially starting at 1.\n\nThe list would include:\n\n$$\\begin{align}\n  & 1: \\text{a} \\\\\\\\\n  & 2: \\text{aa} \\\\\\\\\n  & 3: \\text{aaa} \\\\\\\\\n  & 4: \\text{aaaa} \\\\\\\\\n  & 5: \\text{aaaaa} \\\\\\\\\n  & 6: \\text{aaaaaa} \\\\\\\\\n  & 7: \\text{aaaaaac} \\\\\\\\\n  & 8: \\text{aaaaaacd} \\\\\\\\\n  & 9: \\text{aaaaaacde} \\\\\\\\\n  & 10: \\text{aaaaaacdee} \\\\\\\\\n  & 11: \\text{aaaaaacdeee} \\\\\\\\\n  & 12: \\text{aaaaaacdeeee} \\\\\\\\\n  & 13: \\text{aaaaaacdeeeee} \\\\\\\\\n  & 14: \\text{aaaaaacdeeeeee} \\\\\\\\\n  & 15: \\text{aaaaaacdeeeeeef} \\\\\\\\\n  & 16: \\text{aaaaaacdeeeeeeg} \\\\\\\\\n  & 17: \\text{aaaaaacdeeeeeeh} \\\\\\\\\n  & \\ldots \\\\\\\\\n  & 28: \\text{aaaaaacdeeeeeey} \\\\\\\\\n  & 29: \\text{aaaaaacdeeeeef} \\\\\\\\\n  & 30: \\text{aaaaaacdeeeeefe} \\\\\\\\\n  & \\ldots \\\\\\\\\n  & 115246685191495242: \\text{euleoywuttttsss} \\\\\\\\\n  & 115246685191495243: \\text{euler} \\\\\\\\\n  & 115246685191495244: \\text{eulera} \\\\\\\\\n  & ... \\\\\\\\\n  & 525069350231428029: \\text{ywuuttttssssrrr} \\\\\\\\\n\\end{align}$$\n\nDefine $P(w)$ as the position of the word $w$.\n\nDefine $W(p)$ as the word in position $p$.\n\nWe can see that $P(w)$ and $W(p)$ are inverses: $P(W(p)) = p$ and $W(P(w)) = w$.\n\nExamples:\n\n$$\\begin{align}\n  & W(10) = \\text{ aaaaaacdee} \\\\\\\\\n  & P(\\text{aaaaaacdee}) = 10 \\\\\\\\\n  & W(115246685191495243) = \\text{ euler} \\\\\\\\\n  & P(\\text{euler}) = 115246685191495243 \\\\\\\\\n\\end{align}$$\n\nFind\n$$W(P(\\text{legionary}) + P(\\text{calorimeters}) - P(\\text{annihilate}) + P(\\text{orchestrated}) - P(\\text{fluttering})).$$\n\nGive your answer using lowercase characters (no punctuation or space).",
      "instructions": "",
      "boilerplate": [
        {
          "language": "js",
          "code": "function euler480() {\n\n  return true;\n}\n\neuler480();"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [
        {
          "text": "`euler480()` should return a string.",
          "testCode": "assert.isString(euler480());"
        },
        {
          "text": "`euler480()` should return the string `turnthestarson`.",
          "testCode": "assert.strictEqual(euler480(), 'turnthestarson');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 302158,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\18-project-euler\\project-euler-problems-401-to-480\\problem-480-the-last-question.md"
      },
      "section": {
        "id": "18-project-euler",
        "name": "18-project-euler"
      },
      "lesson": {
        "id": "project-euler-problems-401-to-480",
        "name": "Project Euler Problems 401 To 480"
      }
    }
  ],
  "metadata": {
    "total_challenges": 480,
    "challenges_with_content": 480
  }
}