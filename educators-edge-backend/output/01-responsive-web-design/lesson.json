{
  "section": {
    "id": "01-responsive-web-design",
    "name": "01-responsive-web-design"
  },
  "challenges": [
    {
      "id": "587d774c367417b2b2512a9c",
      "title": "Add a Text Alternative to Images for Visually Impaired Accessibility",
      "challengeType": 0,
      "dashedName": "add-a-text-alternative-to-images-for-visually-impaired-accessibility",
      "description": "You've likely seen an `alt` attribute on an `img` tag in other challenges. `alt` text describes the image's content and provides a text-alternative for it. An `alt` attribute helps in cases where the image fails to load or can't be seen by a user. Search engines also use it to understand what an image contains to include it in search results. Here's an example:\n\n```html\n<img src=\"importantLogo.jpeg\" alt=\"Company logo\">\n```\n\nPeople with visual impairments rely on screen readers to convert web content to an audio interface. They won't get information if it's only presented visually. For images, screen readers can access the `alt` attribute and read its contents to deliver key information.\n\nGood `alt` text provides the reader a brief description of the image. You should always include an `alt` attribute on your image. Per HTML5 specification, this is now considered mandatory.",
      "instructions": "Camper Cat happens to be both a coding ninja and an actual ninja, who is building a website to share his knowledge. The profile picture he wants to use shows his skills and should be appreciated by all site visitors. Add an `alt` attribute in the `img` tag, that explains Camper Cat is doing karate. (The image `src` doesn't link to an actual file, so you should see the `alt` text in the display.)",
      "boilerplate": [
        {
          "language": "html",
          "code": "<img src=\"doingKarateWow.jpeg\">"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<img src=\"doingKarateWow.jpeg\" alt=\"Someone doing karate\">"
        }
      ],
      "tests": [
        {
          "text": "Your `img` tag should have an `alt` attribute and it should not be empty.",
          "testCode": "assert.isNotEmpty(document.querySelector('img')?.getAttribute('alt'));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cPp7VfD",
        "forumTopicId": 16628,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\add-a-text-alternative-to-images-for-visually-impaired-accessibility.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778b367417b2b2512aa8",
      "title": "Add an Accessible Date Picker",
      "challengeType": 0,
      "dashedName": "add-an-accessible-date-picker",
      "description": "Forms often include the `input` field, which can be used to create several different form controls. The `type` attribute on this element indicates what kind of `input` element will be created.\n\nYou may have noticed the `text` and `submit` input types in prior challenges, and HTML5 introduced an option to specify a `date` field. Depending on browser support, a date picker shows up in the `input` field when it's in focus, which makes filling in a form easier for all users.\n\nFor older browsers, the type will default to `text`, so it helps to show users the expected date format in the `label` or `placeholder` text just in case.\n\nHere's an example:\n\n```html\n<label for=\"input1\">Enter a date:</label>\n<input type=\"date\" id=\"input1\" name=\"input1\">\n```",
      "instructions": "Camper Cat is setting up a Mortal Kombat tournament and wants to ask his competitors to see what date works best. Add an `input` tag with a `type` attribute of `date`, an `id` attribute of `pickdate`, and a `name` attribute of `date`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <main>\n    <section>\n      <h2>Mortal Kombat Tournament Survey</h2>\n      <form>\n        <p>Tell us the best date for the competition</p>\n        <label for=\"pickdate\">Preferred Date:</label>\n\n        <!-- Only change code below this line -->\n\n\n\n        <!-- Only change code above this line -->\n\n        <input type=\"submit\" name=\"submit\" value=\"Submit\">\n      </form>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <main>\n    <section>\n      <h2>Mortal Kombat Tournament Survey</h2>\n      <form>\n        <p>Tell us the best date for the competition</p>\n        <label for=\"pickdate\">Preferred Date:</label>\n        <input type=\"date\" id=\"pickdate\" name=\"date\">\n        <input type=\"submit\" name=\"submit\" value=\"Submit\">\n      </form>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add one `input` tag for the date selector field.",
          "testCode": "assert.lengthOf(document.querySelectorAll('input'), 2);"
        },
        {
          "text": "Your `input` tag should have a `type` attribute with a value of `date`.",
          "testCode": "assert.equal(document.querySelector('input')?.getAttribute('type'), 'date');"
        },
        {
          "text": "Your `input` tag should have an `id` attribute with a value of `pickdate`.",
          "testCode": "assert.equal(document.querySelector('input')?.getAttribute('id'),'pickdate');"
        },
        {
          "text": "Your `input` tag should have a `name` attribute with a value of `date`.",
          "testCode": "assert.equal(document.querySelector('input')?.getAttribute('name'), 'date');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cR3bRbCV",
        "forumTopicId": 301008,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\add-an-accessible-date-picker.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778f367417b2b2512aad",
      "title": ">-",
      "challengeType": 0,
      "dashedName": ">-",
      "description": "There are various forms of colorblindness. These can range from a reduced sensitivity to a certain wavelength of light to the inability to see color at all. The most common form is a reduced sensitivity to detect greens.\n\nFor example, if two similar green colors are the foreground and background color of your content, a colorblind user may not be able to distinguish them. Close colors can be thought of as neighbors on the color wheel, and those combinations should be avoided when conveying important information.\n\n**Note:** Some online color picking tools include visual simulations of how colors appear for different types of colorblindness. These are great resources in addition to online contrast checking calculators.",
      "instructions": "Camper Cat is testing different styles for an important button, but the yellow (`#FFFF33`) `background-color` and the green (`#33FF33`) text `color` are neighboring hues on the color wheel and virtually indistinguishable for some colorblind users. (Their similar lightness also fails the contrast ratio check). Change the text `color` to a dark blue (`#003366`) to solve both problems.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  button {\n    color: #33FF33;\n    background-color: #FFFF33;\n    font-size: 14px;\n    padding: 10px;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Danger!</h1>\n  </header>\n  <button>Delete Internet</button>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n    button {\n      color: #003366;\n      background-color: #FFFF33;\n      font-size: 14px;\n      padding: 10px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Danger!</h1>\n  </header>\n  <button>Delete Internet</button>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should change the text `color` for the `button` to the dark blue.",
          "testCode": "const button = document.querySelector('button');\nconst buttonColor = window.getComputedStyle(button).color; \nassert.equal(buttonColor, 'rgb(0, 51, 102)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c437as3",
        "forumTopicId": 301011,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\avoid-colorblindness-issues-by-carefully-choosing-colors-that-convey-information.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778f367417b2b2512aac",
      "title": "Avoid Colorblindness Issues by Using Sufficient Contrast",
      "challengeType": 0,
      "dashedName": "avoid-colorblindness-issues-by-using-sufficient-contrast",
      "description": "Color is a large part of visual design, but its use introduces two accessibility issues. First, color alone should not be used as the only way to convey important information because screen reader users won't see it. Second, foreground and background colors need sufficient contrast so colorblind users can distinguish them.\n\nPrevious challenges covered having text alternatives to address the first issue. The last challenge introduced contrast checking tools to help with the second. The WCAG-recommended contrast ratio of 4.5:1 applies for color use as well as gray-scale combinations.\n\nColorblind users have trouble distinguishing some colors from others - usually in hue but sometimes lightness as well. You may recall the contrast ratio is calculated using the relative luminance (or lightness) values of the foreground and background colors.\n\nIn practice, the 4.5:1 contrast ratio can be reached by shading (adding black to) the darker color and tinting (adding white to) the lighter color. Darker shades on the color wheel are considered to be shades of blues, violets, magentas, and reds, whereas lighter tinted colors are oranges, yellows, greens, and blue-greens.",
      "instructions": "Camper Cat is experimenting with using color for his blog text and background, but his current combination of a greenish `background-color` with maroon text `color` has a 2.5:1 contrast ratio. You can easily adjust the lightness of the colors since he declared them using the CSS `hsl()` property (which stands for hue, saturation, lightness) by changing the third argument. Increase the `background-color` lightness value from 35% to 55%, and decrease the `color` lightness value from 20% to 15%. This improves the contrast to 5.9:1.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  body {\n    color: hsl(0, 55%, 20%);\n    background-color: hsl(120, 25%, 35%);\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  body {\n    color: hsl(0, 55%, 15%);\n    background-color: hsl(120, 25%, 55%);\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should only change the lightness value for the text `color` property to a value of 15%.",
          "testCode": "assert.match(code ,/color:\\s*?hsl\\(0,\\s*?55%,\\s*?15%\\)/gi);"
        },
        {
          "text": "Your code should only change the lightness value for the `background-color` property to a value of 55%.",
          "testCode": "assert.match(code ,/background-color:\\s*?hsl\\(120,\\s*?25%,\\s*?55%\\)/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cmzMEUw",
        "forumTopicId": 301012,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\avoid-colorblindness-issues-by-using-sufficient-contrast.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778f367417b2b2512aae",
      "title": "Give Links Meaning by Using Descriptive Link Text",
      "challengeType": 0,
      "dashedName": "give-links-meaning-by-using-descriptive-link-text",
      "description": "Screen reader users have various options for what type of content their device reads. These options include skipping to (or over) landmark elements, jumping to the main content, or getting a page summary from the headings. Another option is to only hear the links available on a page.\n\nScreen readers do this by reading the link text, or what's between the anchor (`a`) tags. Having a list of \"click here\" or \"read more\" links isn't helpful. Instead, use brief but descriptive text within the `a` tags to provide more meaning for these users.",
      "instructions": "The link text that Camper Cat is using is not very descriptive without the surrounding context. Move the anchor (`a`) tags so they wrap around the text `information about batteries` instead of `Click here`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near. <a href=\"\">Click here</a> for information about batteries</p>\n  </article>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near. Click here for <a href=\"\">information about batteries</a></p>\n  </article>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should move the anchor `a` tags from around the words `Click here` to wrap around the words `information about batteries`.",
          "testCode": "assert.match(document.querySelector('a')?.textContent, /^(information about batteries)$/g);"
        },
        {
          "text": "The `a` element should have an `href` attribute with a value of an empty string `\"\"`.",
          "testCode": "assert.isEmpty(document.querySelector('a')?.getAttribute('href'));"
        },
        {
          "text": "The `a` element should have a closing tag.",
          "testCode": "assert.isTrue(code.match(/<\\/a>/g)?.length === code.match(/<a href=(''|\"\")>/g)?.length);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c437DcV",
        "forumTopicId": 301013,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\give-links-meaning-by-using-descriptive-link-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d7789367417b2b2512aa4",
      "title": "Improve Accessibility of Audio Content with the audio Element",
      "challengeType": 0,
      "dashedName": "improve-accessibility-of-audio-content-with-the-audio-element",
      "description": "HTML5's `audio` element gives semantic meaning when it wraps sound or audio stream content in your markup. Audio content also needs a text alternative to be accessible to people who are deaf or hard of hearing. This can be done with nearby text on the page or a link to a transcript.\n\nThe `audio` tag supports the `controls` attribute. This shows the browser default play, pause, and other controls, and supports keyboard functionality. This is a boolean attribute, meaning it doesn't need a value, its presence on the tag turns the setting on.\n\nHere's an example:\n\n```html\n<audio id=\"meowClip\" controls>\n  <source src=\"audio/meow.mp3\" type=\"audio/mpeg\">\n  <source src=\"audio/meow.ogg\" type=\"audio/ogg\">\n</audio>\n```\n\n**Note:** Multimedia content usually has both visual and auditory components. It needs synchronized captions and a transcript so users with visual and/or auditory impairments can access it. Generally, a web developer is not responsible for creating the captions or transcript, but needs to know to include them.",
      "instructions": "Time to take a break from Camper Cat and meet fellow camper Zersiax (@zersiax), a champion of accessibility and a screen reader user. To hear a clip of his screen reader in action, add an `audio` element after the `p` element. Include the `controls` attribute. Then place a `source` element inside the `audio` tags with the `src` attribute set to `https://cdn.freecodecamp.org/curriculum/applied-accessibility/screen-reader.mp3` and `type` attribute set to `\"audio/mpeg\"`.\n\n**Note:** The audio clip may sound fast and be difficult to understand, but that is a normal speed for screen reader users.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n\n\n\n  </main>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n    <audio controls>\n      <source src=\"https://cdn.freecodecamp.org/curriculum/applied-accessibility/screen-reader.mp3\" type=\"audio/mpeg\"/>\n    </audio>\n  </main>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have one `audio` tag.",
          "testCode": "assert.lengthOf(document.querySelectorAll('audio'),1);"
        },
        {
          "text": "Your `audio` element should have a closing tag.",
          "testCode": "assert.match(code,/<audio.*>[\\s\\S]*<\\/audio>/g);\nassert.lengthOf(code.match(/<\\/audio>/g),1);"
        },
        {
          "text": "The `audio` tag should have the `controls` attribute.",
          "testCode": "assert.exists(document.querySelector('audio')?.getAttribute('controls'));"
        },
        {
          "text": "Your code should have one `source` tag.",
          "testCode": "assert.lengthOf(document.querySelectorAll('source'), 1);"
        },
        {
          "text": "Your `source` tag should be inside the `audio` tags.",
          "testCode": "const audio = document.querySelector('audio');\nconst children = audio.querySelectorAll(`:scope ${'source'}`);\nassert.lengthOf(children,1);"
        },
        {
          "text": "The value for the `src` attribute on the `source` tag should match the link in the instructions exactly.",
          "testCode": "assert.equal(\n  document.querySelector('source')?.getAttribute('src'),\n  'https://cdn.freecodecamp.org/curriculum/applied-accessibility/screen-reader.mp3'\n);"
        },
        {
          "text": "Your code should include a `type` attribute on the `source` tag with a value of audio/mpeg.",
          "testCode": "assert.equal(document.querySelector('source')?.getAttribute('type'), 'audio/mpeg');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cVJVkcZ",
        "forumTopicId": 301014,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\improve-accessibility-of-audio-content-with-the-audio-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778a367417b2b2512aa5",
      "title": "Improve Chart Accessibility with the figure Element",
      "challengeType": 0,
      "dashedName": "improve-chart-accessibility-with-the-figure-element",
      "description": "HTML5 introduced the `figure` element and the related `figcaption`. Used together, these items wrap a visual representation (like an image, diagram, or chart) along with its caption. Wrapping these elements together gives a two-fold accessibility boost by semantically grouping related content and providing a text alternative explaining the `figure`.\n\nFor data visualizations like charts, the caption can be used to briefly note the trends or conclusions for users with visual impairments. Another challenge covers how to move a table version of the chart's data off-screen (using CSS) for screen reader users.\n\nHere's an example - note that the `figcaption` goes inside the `figure` tags and can be combined with other elements:\n\n```html\n<figure>\n  <img src=\"roundhouseDestruction.jpeg\" alt=\"Photo of Camper Cat executing a roundhouse kick\">\n  <br>\n  <figcaption>\n    Master Camper Cat demonstrates proper form of a roundhouse kick.\n  </figcaption>\n</figure>\n```",
      "instructions": "Camper Cat is hard at work creating a stacked bar chart showing the amount of time per week to spend training in stealth, combat, and weapons. Help him structure his page better by changing the `div` tag he used to a `figure` tag, and the `p` tag that surrounds the caption to a `figcaption` tag.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section>\n\n      <!-- Only change code below this line -->\n      <div>\n        <!-- Stacked bar chart will go here -->\n        <br>\n        <p>Breakdown per week of time to spend training in stealth, combat, and weapons.</p>\n      </div>\n      <!-- Only change code above this line -->\n\n    </section>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section>\n      <figure>\n        <!-- Stacked bar chart will go here -->\n        <br>\n        <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n      </figure>\n    </section>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have one `figure` tag.",
          "testCode": "assert.lengthOf(document.querySelectorAll('figure') , 1);"
        },
        {
          "text": "Your code should have one `figcaption` tag.",
          "testCode": "assert.lengthOf(document.querySelectorAll('figcaption') , 1);"
        },
        {
          "text": "Your code should not have any `div` tags.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div'), 0);"
        },
        {
          "text": "Your code should not have any `p` tags.",
          "testCode": "assert.lengthOf(document.querySelectorAll('p') , 0);"
        },
        {
          "text": "The `figcaption` should be a child of the `figure` tag.",
          "testCode": "const figure = document.querySelector('figure');\nconst children = figure?.querySelectorAll(`:scope ${'figcaption'}`);\nassert.lengthOf(children, 1);"
        },
        {
          "text": "Your `figure` element should have a closing tag.",
          "testCode": "assert.isTrue(\n    code.match(/<\\/figure>/g)?.length === code.match(/<figure>/g)?.length\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cGJMqtE",
        "forumTopicId": 301015,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\improve-chart-accessibility-with-the-figure-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778a367417b2b2512aa6",
      "title": "Improve Form Field Accessibility with the label Element",
      "challengeType": 0,
      "dashedName": "improve-form-field-accessibility-with-the-label-element",
      "description": "Improving accessibility with semantic HTML markup applies to using both appropriate tag names and attributes. The next several challenges cover some important scenarios using attributes in forms.\n\nThe `label` tag wraps the text for a specific form control item, usually the name or label for a choice. This ties meaning to the item and makes the form more readable. The `for` attribute on a `label` tag explicitly associates that `label` with the form control and is used by screen readers.\n\nYou learned about radio buttons and their labels in a lesson in the Basic HTML section. In that lesson, we wrapped the radio button input element inside a `label` element along with the label text in order to make the text clickable. Another way to achieve this is by using the `for` attribute, as explained in this lesson.\n\nThe value of the `for` attribute must be the same as the value of the `id` attribute of the form control. Here's an example:\n\n```html\n<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n</form>\n```",
      "instructions": "Camper Cat expects a lot of interest in his thoughtful blog posts and wants to include an email sign up form. Add a `for` attribute on the email `label` that matches the `id` on its `input` field.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n\n\n      <label>Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n\n\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have a `for` attribute on the `label` tag that is not empty.",
          "testCode": "assert.isNotEmpty(document.querySelector('label')?.getAttribute('for'));"
        },
        {
          "text": "Your `for` attribute value should match the `id` value on the email `input`.",
          "testCode": "assert.equal(document.querySelector('label')?.getAttribute('for'), 'email');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cGJMMAN",
        "forumTopicId": 301016,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\improve-form-field-accessibility-with-the-label-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778e367417b2b2512aab",
      "title": "Improve Readability with High Contrast Text",
      "challengeType": 0,
      "dashedName": "improve-readability-with-high-contrast-text",
      "description": "Low contrast between the foreground and background colors can make text difficult to read. Sufficient contrast improves your content's readability, but what exactly does \"sufficient\" mean?\n\nThe Web Content Accessibility Guidelines (WCAG) recommend at least a 4.5 to 1 contrast ratio for normal text. The ratio is calculated by comparing the relative luminance values of two colors. This ranges from 1:1 for the same color, or no contrast, to 21:1 for white against black, the most substantial contrast. There are many contrast checking tools available online that calculate this ratio for you.",
      "instructions": "Camper Cat's choice of light gray text on a white background for his recent blog post has a 1.5:1 contrast ratio, making it hard to read. Change the `color` of the text from the current gray (`#D3D3D3`) to a darker gray (`#636363`) to improve the contrast ratio to 6:1.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  body {\n    color: #D3D3D3;\n    background-color: #FFF;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  body {\n    color: #636363;\n    background-color: #FFF;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should change the text `color` for the `body` to the darker gray.",
          "testCode": "const body = document.querySelector('body');\nconst bodyColor = window.getComputedStyle(body).color; \nassert(bodyColor == 'rgb(99, 99, 99)');"
        },
        {
          "text": "Your code should not change the `background-color` for the `body`.",
          "testCode": "const body = document.querySelector('body');\nconst backgroundColor = window.getComputedStyle(body).backgroundColor; \nassert.equal(backgroundColor , 'rgb(255, 255, 255)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cKb3nCq",
        "forumTopicId": 301017,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\improve-readability-with-high-contrast-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d774e367417b2b2512a9f",
      "title": "Jump Straight to the Content Using the main Element",
      "challengeType": 0,
      "dashedName": "jump-straight-to-the-content-using-the-main-element",
      "description": "HTML5 introduced several new elements that give developers more options while also incorporating accessibility features. These tags include `main`, `header`, `footer`, `nav`, `article`, and `section`, among others.\n\nBy default, a browser renders these elements similar to the humble `div`. However, using them where appropriate gives additional meaning to your markup. The tag name alone can indicate the type of information it contains, which adds semantic meaning to that content. Assistive technologies can access this information to provide better page summary or navigation options to their users.\n\nThe `main` element is used to wrap (you guessed it) the main content, and there should be only one per page. It's meant to surround the information related to your page's central topic. It's not meant to include items that repeat across pages, like navigation links or banners.\n\nThe `main` tag also has an embedded landmark feature that assistive technology can use to navigate to the main content quickly. If you've ever seen a \"Jump to Main Content\" link at the top of a page, using the `main` tag automatically gives assistive devices that functionality.",
      "instructions": "Camper Cat has some big ideas for his ninja weapons page. Help him set up his markup by adding opening and closing `main` tags between the `header` and `footer` (covered in other challenges). Keep the `main` tags empty for now.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<header>\n  <h1>Weapons of the Ninja</h1>\n</header>\n\n\n\n<footer></footer>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<header>\n  <h1>Weapons of the Ninja</h1>\n</header>\n<main>\n\n</main>\n<footer></footer>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have one `main` tag.",
          "testCode": "assert.lengthOf(document.querySelectorAll('main'),1);"
        },
        {
          "text": "The `main` tags should be between the closing `header` tag and the opening `footer` tag.",
          "testCode": "assert.match(code,/<\\/header>\\s*?<main>\\s*?<\\/main>/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cPp7zuE",
        "forumTopicId": 301018,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\jump-straight-to-the-content-using-the-main-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d774c367417b2b2512a9d",
      "title": "Know When Alt Text Should be Left Blank",
      "challengeType": 0,
      "dashedName": "know-when-alt-text-should-be-left-blank",
      "description": "In the last challenge, you learned that including an `alt` attribute when using `img` tags is mandatory. However, sometimes images are grouped with a caption already describing them, or are used for decoration only. In these cases, `alt` text may seem redundant or unnecessary.\n\nWhen an image is already explained with text content or does not add meaning to a page, the `img` still needs an `alt` attribute, but it can be set to an empty string. Here's an example:\n\n```html\n<img src=\"visualDecoration.jpeg\" alt=\"\">\n```\n\nBackground images usually fall under the 'decorative' label as well. However, they are typically applied with CSS rules, and therefore not part of the markup screen readers process.\n\n**Note:** For images with a caption, you may still want to include `alt` text since it helps search engines catalog the image's content.",
      "instructions": "Camper Cat has coded a skeleton page for the blog part of his website. He's planning to add a visual break between his two articles with a decorative image of a samurai sword. Add an `alt` attribute to the `img` tag and set it to an empty string. (Note that the image `src` doesn't link to an actual file - don't worry that there are no swords showing in the display.)",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h1>Deep Thoughts with Master Camper Cat</h1>\n<article>\n  <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n  <p>To Come...</p>\n</article>\n\n<img src=\"samuraiSwords.jpeg\">\n\n<article>\n  <h2>Is Chuck Norris a Cat Person?</h2>\n  <p>To Come...</p>\n</article>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h1>Deep Thoughts with Master Camper Cat</h1>\n<article>\n  <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n  <p>To Come...</p>\n</article>\n\n<img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n<article>\n  <h2>Is Chuck Norris a Cat Person?</h2>\n  <p>To Come...</p>\n</article>"
        }
      ],
      "tests": [
        {
          "text": "Your `img` tag should have an `alt` attribute.",
          "testCode": "assert.isTrue(document.querySelector('img')?.hasAttribute('alt'));"
        },
        {
          "text": "The `alt` attribute should be set to an empty string.",
          "testCode": "assert.isEmpty(document.querySelector('img')?.getAttribute('alt'));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cM9P4t2",
        "forumTopicId": 301019,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\know-when-alt-text-should-be-left-blank.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778d367417b2b2512aaa",
      "title": "Make Elements Only Visible to a Screen Reader by Using Custom CSS",
      "challengeType": 0,
      "dashedName": "make-elements-only-visible-to-a-screen-reader-by-using-custom-css",
      "description": "Have you noticed that all of the applied accessibility challenges so far haven't used any CSS? This shows the importance of using a logical document outline and semantically meaningful tags around your content before introducing the visual design aspect.\n\nHowever, CSS's magic can also improve accessibility on your page when you want to visually hide content meant only for screen readers. This happens when information is in a visual format (like a chart), but screen reader users need an alternative presentation (like a table) to access the data. CSS is used to position the screen reader-only elements off the visual area of the browser window.\n\nHere's an example of the CSS rules that accomplish this:\n\n```css\n.sr-only {\n  position: absolute;\n  left: -10000px;\n  width: 1px;\n  height: 1px;\n  top: auto;\n  overflow: hidden;\n}\n```\n\n**Note:** The following CSS approaches will NOT do the same thing:\n\n<ul>\n<li><code>display: none;</code> or <code>visibility: hidden;</code> hides content for everyone, including screen reader users</li>\n<li>Zero values for pixel sizes, such as <code>width: 0px; height: 0px;</code> removes that element from the flow of your document, meaning screen readers will ignore it</li>\n</ul>",
      "instructions": "Camper Cat created a really cool stacked bar chart for his training page, and put the data into a table for his visually impaired users. The table already has an `sr-only` class, but the CSS rules aren't filled in yet. Give the `position` an `absolute` value, the `left` a `-10000px` value, and the `width` and `height` both `1px` values.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  .sr-only {\n    position: ;\n    left: ;\n    width: ;\n    height: ;\n    top: auto;\n    overflow: hidden;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <section>\n    <h2>Master Camper Cat's Beginner Three Week Training Program</h2>\n    <figure>\n      <!-- Stacked bar chart of weekly training -->\n      <p>[Stacked bar chart]</p>\n      <br />\n      <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n    </figure>\n    <table class=\"sr-only\">\n      <caption>Hours of Weekly Training in Stealth, Combat, and Weapons</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th scope=\"col\">Stealth &amp; Agility</th>\n          <th scope=\"col\">Combat</th>\n          <th scope=\"col\">Weapons</th>\n          <th scope=\"col\">Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">Week One</th>\n          <td>3</td>\n          <td>5</td>\n          <td>2</td>\n          <td>10</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Two</th>\n          <td>4</td>\n          <td>5</td>\n          <td>3</td>\n          <td>12</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Three</th>\n          <td>4</td>\n          <td>6</td>\n          <td>3</td>\n          <td>13</td>\n        </tr>\n      </tbody>\n    </table>\n  </section>\n  <section id=\"stealth\">\n    <h2>Stealth &amp; Agility Training</h2>\n    <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n    <article><h3>No training is NP-complete without parkour</h3></article>\n  </section>\n  <section id=\"combat\">\n    <h2>Combat Training</h2>\n    <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n    <article><h3>Goodbye, world: 5 proven ways to knock out an opponent</h3></article>\n  </section>\n  <section id=\"weapons\">\n    <h2>Weapons Training</h2>\n    <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n    <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  .sr-only {\n    position: absolute;\n    left: -10000px;\n    width: 1px;\n    height: 1px;\n    top: auto;\n    overflow: hidden;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <section>\n    <h2>Master Camper Cat's Beginner Three Week Training Program</h2>\n    <figure>\n      <!-- Stacked bar chart of weekly training -->\n      <p>[Stacked bar chart]</p>\n      <br />\n      <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n    </figure>\n    <table class=\"sr-only\">\n      <caption>Hours of Weekly Training in Stealth, Combat, and Weapons</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th scope=\"col\">Stealth &amp; Agility</th>\n          <th scope=\"col\">Combat</th>\n          <th scope=\"col\">Weapons</th>\n          <th scope=\"col\">Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">Week One</th>\n          <td>3</td>\n          <td>5</td>\n          <td>2</td>\n          <td>10</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Two</th>\n          <td>4</td>\n          <td>5</td>\n          <td>3</td>\n          <td>12</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Three</th>\n          <td>4</td>\n          <td>6</td>\n          <td>3</td>\n          <td>13</td>\n        </tr>\n      </tbody>\n    </table>\n  </section>\n  <section id=\"stealth\">\n    <h2>Stealth &amp; Agility Training</h2>\n    <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n    <article><h3>No training is NP-complete without parkour</h3></article>\n  </section>\n  <section id=\"combat\">\n    <h2>Combat Training</h2>\n    <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n    <article><h3>Goodbye, world: 5 proven ways to knock out an opponent</h3></article>\n  </section>\n  <section id=\"weapons\">\n    <h2>Weapons Training</h2>\n    <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n    <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should set the `position` property of the `sr-only` class to a value of `absolute`.",
          "testCode": "const srOnly = document.querySelector('.sr-only');\nconst position = window.getComputedStyle(srOnly).position; \nassert.equal(position, 'absolute');"
        },
        {
          "text": "Your code should set the `left` property of the `sr-only` class to a value of `-10000px`.",
          "testCode": "const srOnly = document.querySelector('.sr-only');\nconst left = window.getComputedStyle(srOnly).left;\nassert.equal(left, '-10000px');"
        },
        {
          "text": "Your code should set the `width` property of the `sr-only` class to a value of `1` pixel.",
          "testCode": "assert.match(code , /width:\\s*?1px/gi);"
        },
        {
          "text": "Your code should set the `height` property of the `sr-only` class to a value of `1` pixel.",
          "testCode": "assert.match(code , /height:\\s*?1px/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cJ8QGkhJ",
        "forumTopicId": 301020,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\make-elements-only-visible-to-a-screen-reader-by-using-custom-css.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d7790367417b2b2512aaf",
      "title": "Make Links Navigable with HTML Access Keys",
      "challengeType": 0,
      "dashedName": "make-links-navigable-with-html-access-keys",
      "description": "HTML offers the `accesskey` attribute to specify a shortcut key to activate or bring focus to an element. Adding an `accesskey` attribute can make navigation more efficient for keyboard-only users.\n\nHTML5 allows this attribute to be used on any element, but it's particularly useful when it's used with interactive ones. This includes links, buttons, and form controls.\n\nHere's an example:\n\n```html\n<button accesskey=\"b\">Important Button</button>\n```",
      "instructions": "Camper Cat wants the links around the two blog article titles to have keyboard shortcuts so his site's users can quickly navigate to the full story. Add an `accesskey` attribute to both links and set the first one to `g` (for Garfield) and the second one to `c` (for Chuck Norris).",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n\n\n    <h2><a id=\"first\" href=\"#\">The Garfield Files: Lasagna as Training Fuel?</a></h2>\n\n\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <article>\n\n\n    <h2><a id=\"second\" href=\"#\">Is Chuck Norris a Cat Person?</a></h2>\n\n\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n\n\n    <h2><a id=\"first\" accesskey=\"g\" href=\"#\">The Garfield Files: Lasagna as Training Fuel?</a></h2>\n\n\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <article>\n\n\n    <h2><a id=\"second\" accesskey=\"c\" href=\"#\">Is Chuck Norris a Cat Person?</a></h2>\n\n\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add an `accesskey` attribute to the `a` tag with the `id` of `first`.",
          "testCode": "assert.isTrue(document.querySelector('#first')?.hasAttribute('accesskey'));"
        },
        {
          "text": "Your code should add an `accesskey` attribute to the `a` tag with the `id` of `second`.",
          "testCode": "assert.isTrue(document.querySelector('#second')?.hasAttribute('accesskey'));"
        },
        {
          "text": "Your code should set the `accesskey` attribute on the `a` tag with the `id` of `first` to `g`. Note that case matters.",
          "testCode": "assert.equal(document.querySelector('#first')?.getAttribute('accesskey'), 'g');"
        },
        {
          "text": "Your code should set the `accesskey` attribute on the `a` tag with the `id` of `second` to `c`. Note that case matters.",
          "testCode": "assert.equal(document.querySelector('#second')?.getAttribute('accesskey'), 'c');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cQvmaTp",
        "forumTopicId": 301021,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\make-links-navigable-with-html-access-keys.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d7788367417b2b2512aa3",
      "title": "Make Screen Reader Navigation Easier with the footer Landmark",
      "challengeType": 0,
      "dashedName": "make-screen-reader-navigation-easier-with-the-footer-landmark",
      "description": "Similar to `header` and `nav`, the `footer` element has a built-in landmark feature that allows assistive devices to quickly navigate to it. It's primarily used to contain copyright information or links to related documents that usually sit at the bottom of a page.",
      "instructions": "Camper Cat's training page is making good progress. Change the `div` he used to wrap his copyright information at the bottom of the page to a `footer` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n\n\n  <div>&copy; 2018 Camper Cat</div>\n\n\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n\n\n  <footer>&copy; 2018 Camper Cat</footer>\n\n\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have one `footer` tag.",
          "testCode": "assert.lengthOf(document.querySelectorAll('footer') ,1);"
        },
        {
          "text": "Your code should not have any `div` tags.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div'), 0);"
        },
        {
          "text": "Your code should have an opening and closing `footer` tag.",
          "testCode": "assert.match(code,/<footer>\\s*&copy; 2018 Camper Cat\\s*<\\/footer>/g);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/crVrDh8",
        "forumTopicId": 301022,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\make-screen-reader-navigation-easier-with-the-footer-landmark.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d7787367417b2b2512aa1",
      "title": "Make Screen Reader Navigation Easier with the header Landmark",
      "challengeType": 0,
      "dashedName": "make-screen-reader-navigation-easier-with-the-header-landmark",
      "description": "The next HTML5 element that adds semantic meaning and improves accessibility is the `header` tag. It's used to wrap introductory information or navigation links for its parent tag and works well around content that's repeated at the top on multiple pages.\n\n`header` shares the embedded landmark feature you saw with `main`, allowing assistive technologies to quickly navigate to that content.\n\n**Note:** The `header` is meant for use in the `body` tag of your HTML document. It is different than the `head` element, which contains the page's title, meta information, etc.",
      "instructions": "Camper Cat is writing some great articles about ninja training, and wants to add a page for them to his site. Change the top `div` that currently contains the `h1` to a `header` tag instead.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n\n  <div>\n    <h1>Training with Camper Cat</h1>\n  </div>\n\n\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n\n  <header>\n    <h1>Training with Camper Cat</h1>\n  </header>\n\n\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have one `header` tag.",
          "testCode": "assert.lengthOf(document.querySelectorAll('header'),1);"
        },
        {
          "text": "Your `header` tags should wrap around the `h1`.",
          "testCode": "const header = document.querySelector('header');\nconst children = header?.querySelectorAll(`:scope ${'h1'}`);\nassert.lengthOf(children , 1);"
        },
        {
          "text": "Your code should not have any `div` tags.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div') , 0);"
        },
        {
          "text": "Your `header` element should have a closing tag.",
          "testCode": "assert.isTrue(code.match(/<\\/header>/g)?.length === code.match(/<header>/g)?.length);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cB76vtv",
        "forumTopicId": 301023,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\make-screen-reader-navigation-easier-with-the-header-landmark.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d7788367417b2b2512aa2",
      "title": "Make Screen Reader Navigation Easier with the nav Landmark",
      "challengeType": 0,
      "dashedName": "make-screen-reader-navigation-easier-with-the-nav-landmark",
      "description": "The `nav` element is another HTML5 item with the embedded landmark feature for easy screen reader navigation. This tag is meant to wrap around the main navigation links in your page.\n\nIf there are repeated site links at the bottom of the page, it isn't necessary to markup those with a `nav` tag as well. Using a `footer` (covered in the next challenge) is sufficient.",
      "instructions": "Camper Cat included navigation links at the top of his training page, but wrapped them in a `div`. Change the `div` to a `nav` tag to improve the accessibility on his page.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Training with Camper Cat</h1>\n\n    <div>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </div>\n\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Training with Camper Cat</h1>\n\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have one `nav` tag.",
          "testCode": "assert.lengthOf(document.querySelectorAll('nav') , 1);"
        },
        {
          "text": "Your `nav` tags should wrap around the `ul` and its list items.",
          "testCode": "const nav = document.querySelector('nav');\nconst children = nav?.querySelectorAll(`:scope ${'ul'}`);\nassert.lengthOf(children,1);"
        },
        {
          "text": "Your code should not have any `div` tags.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div') , 0);"
        },
        {
          "text": "Your `nav` element should have a closing tag.",
          "testCode": "assert.isTrue(code.match(/<\\/nav>/g)?.length === code.match(/<nav>/g)?.length);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/czVwWSv",
        "forumTopicId": 301024,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\make-screen-reader-navigation-easier-with-the-nav-landmark.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778c367417b2b2512aa9",
      "title": "Standardize Times with the HTML5 datetime Attribute",
      "challengeType": 0,
      "dashedName": "standardize-times-with-the-html5-datetime-attribute",
      "description": "Continuing with the date theme, HTML5 also introduced the `time` element along with a `datetime` attribute to standardize times. The `time` element is an inline element that can wrap a date or time on a page. A `datetime` attribute holds a valid format of that date. This is the value accessed by assistive devices. It helps avoid confusion by stating a standardized version of a time, even if it's informally or colloquially written in the text.\n\nHere's an example:\n\n```html\n<p>Master Camper Cat officiated the cage match between Goro and Scorpion <time datetime=\"2013-02-13\">last Wednesday</time>, which ended in a draw.</p>\n```",
      "instructions": "Camper Cat's Mortal Kombat survey results are in! Wrap a `time` tag around the text `Thursday, September 15<sup>th</sup>` and add a `datetime` attribute to it set to `2016-09-15`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <article>\n    <h2>Mortal Kombat Tournament Survey Results</h2>\n\n    <!-- Only change code below this line -->\n\n    <p>Thank you to everyone for responding to Master Camper Cat's survey. The best day to host the vaunted Mortal Kombat tournament is Thursday, September 15<sup>th</sup>. May the best ninja win!</p>\n\n    <!-- Only change code above this line -->\n\n    <section>\n      <h3>Comments:</h3>\n      <article>\n        <p>Posted by: Sub-Zero on <time datetime=\"2016-08-13T20:01Z\">August 13<sup>th</sup></time></p>\n        <p>Johnny Cage better be there, I'll finish him!</p>\n      </article>\n      <article>\n        <p>Posted by: Doge on <time datetime=\"2016-08-15T08:12Z\">August 15<sup>th</sup></time></p>\n        <p>Wow, much combat, so mortal.</p>\n      </article>\n      <article>\n        <p>Posted by: The Grim Reaper on <time datetime=\"2016-08-16T00:00Z\">August 16<sup>th</sup></time></p>\n        <p>Looks like I'll be busy that day.</p>\n      </article>\n    </section>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <article>\n    <h2>Mortal Kombat Tournament Survey Results</h2>\n\n    <p>Thank you to everyone for responding to Master Camper Cat's survey. The best day to host the vaunted Mortal Kombat tournament is <time datetime=\"2016-09-15\">Thursday, September 15<sup>th</sup></time>. May the best ninja win!</p>\n\n    <section>\n      <h3>Comments:</h3>\n      <article>\n        <p>Posted by: Sub-Zero on <time datetime=\"2016-08-13T20:01Z\">August 13<sup>th</sup></time></p>\n        <p>Johnny Cage better be there, I'll finish him!</p>\n      </article>\n      <article>\n        <p>Posted by: Doge on <time datetime=\"2016-08-15T08:12Z\">August 15<sup>th</sup></time></p>\n        <p>Wow, much combat, so mortal.</p>\n      </article>\n      <article>\n        <p>Posted by: The Grim Reaper on <time datetime=\"2016-08-16T00:00Z\">August 16<sup>th</sup></time></p>\n        <p>Looks like I'll be busy that day.</p>\n      </article>\n    </section>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have a `p` element which includes the text `Thank you to everyone for responding to Master Camper Cat's survey.` and include a `time` element.",
          "testCode": "assert.exists(getTimeElement());"
        },
        {
          "text": "Your added `time` tags should wrap around the text `Thursday, September 15<sup>th</sup>`.",
          "testCode": "assert.strictEqual(getTimeElement()?.innerHTML?.trim(), 'Thursday, September 15<sup>th</sup>');"
        },
        {
          "text": "Your added `time` tag should have a `datetime` attribute that is not empty.",
          "testCode": "assert(getDatetimeAttr()?.length != 0);"
        },
        {
          "text": "Your added `datetime` attribute should be set to a value of `2016-09-15`.",
          "testCode": "assert.equal(getDatetimeAttr() , '2016-09-15');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cmzMgtz",
        "forumTopicId": 301025,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\standardize-times-with-the-html5-datetime-attribute.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d774d367417b2b2512a9e",
      "title": "Use Headings to Show Hierarchical Relationships of Content",
      "challengeType": 0,
      "dashedName": "use-headings-to-show-hierarchical-relationships-of-content",
      "description": "Headings (`h1` through `h6` elements) are workhorse tags that help provide structure and labeling to your content. Screen readers can be set to read only the headings on a page so the user gets a summary. This means it is important for the heading tags in your markup to have semantic meaning and relate to each other, not be picked merely for their size values.\n\n*Semantic meaning* means that the tag you use around content indicates the type of information it contains.\n\nIf you were writing a paper with an introduction, a body, and a conclusion, it wouldn't make much sense to put the conclusion as a subsection of the body in your outline. It should be its own section. Similarly, the heading tags in a webpage need to go in order and indicate the hierarchical relationships of your content.\n\nHeadings with equal (or higher) rank start new implied sections, headings with lower rank start subsections of the previous one.\n\nAs an example, a page with an `h2` element followed by several subsections labeled with `h4` elements would confuse a screen reader user. With six choices, it's tempting to use a tag because it looks better in a browser, but you can use CSS to edit the relative sizing.\n\nOne final point, each page should always have one (and only one) `h1` element, which is the main subject of your content. This and the other headings are used in part by search engines to understand the topic of the page.",
      "instructions": "Camper Cat wants a page on his site dedicated to becoming a ninja. Help him fix the headings so his markup gives semantic meaning to the content, and shows the proper parent-child relationships of his sections. Change all the `h5` tags to the proper heading level to indicate they are subsections of the `h2` ones. Use `h3` tags for the purpose.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h1>How to Become a Ninja</h1>\n<main>\n  <h2>Learn the Art of Moving Stealthily</h2>\n  <h5>How to Hide in Plain Sight</h5>\n  <h5>How to Climb a Wall</h5>\n\n  <h2>Learn the Art of Battle</h2>\n  <h5>How to Strengthen your Body</h5>\n  <h5>How to Fight like a Ninja</h5>\n\n  <h2>Learn the Art of Living with Honor</h2>\n  <h5>How to Breathe Properly</h5>\n  <h5>How to Simplify your Life</h5>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h1>How to Become a Ninja</h1>\n<main>\n  <h2>Learn the Art of Moving Stealthily</h2>\n  <h3>How to Hide in Plain Sight</h3>\n  <h3>How to Climb a Wall</h3>\n\n  <h2>Learn the Art of Battle</h2>\n  <h3>How to Strengthen your Body</h3>\n  <h3>How to Fight like a Ninja</h3>\n\n  <h2>Learn the Art of Living with Honor</h2>\n  <h3>How to Breathe Properly</h3>\n  <h3>How to Simplify your Life</h3>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have 6 `h3` elements.",
          "testCode": "assert.lengthOf(document.querySelectorAll('h3') , 6);"
        },
        {
          "text": "Your code should have 6 `h3` closing tags.",
          "testCode": "assert.lengthOf((code.match(/\\/h3/g) || []) ,6);"
        },
        {
          "text": "Your code should not have any `h5` elements.",
          "testCode": "assert.isEmpty(document.querySelectorAll('h5'));"
        },
        {
          "text": "Your code should not have any `h5` closing tags.",
          "testCode": "assert.notMatch(code, /\\/h5/);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cqVEktm",
        "forumTopicId": 301026,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\use-headings-to-show-hierarchical-relationships-of-content.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d7790367417b2b2512ab0",
      "title": "Use tabindex to Add Keyboard Focus to an Element",
      "challengeType": 0,
      "dashedName": "use-tabindex-to-add-keyboard-focus-to-an-element",
      "description": "The HTML `tabindex` attribute has three distinct functions relating to an element's keyboard focus. When it's on a tag, it indicates that the element can be focused on. The value (an integer that's positive, negative, or zero) determines the behavior.\n\nCertain elements, such as links and form controls, automatically receive keyboard focus when a user tabs through a page. It's in the same order as the elements come in the HTML source markup. This same functionality can be given to other elements, such as `div`, `span`, and `p`, by placing a `tabindex=\"0\"` attribute on them. Here's an example:\n\n```html\n<div tabindex=\"0\">I need keyboard focus!</div>\n```\n\n**Note:** A negative `tabindex` value (typically -1) indicates that an element is focusable, but is not reachable by the keyboard. This method is generally used to bring focus to content programmatically (like when a `div` used for a pop-up window is activated), and is beyond the scope of these challenges.",
      "instructions": "Camper Cat created a new survey to collect information about his users. He knows input fields automatically get keyboard focus, but he wants to make sure his keyboard users pause at the instructions while tabbing through the items. Add a `tabindex` attribute to the `p` tag and set its value to `0`. Bonus - using `tabindex` also enables the CSS pseudo-class `:focus` to work on the `p` tag.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  p:focus {\n    background-color: yellow;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Ninja Survey</h1>\n  </header>\n  <section>\n    <form>\n\n\n      <p>Instructions: Fill in ALL your information then click <b>Submit</b></p>\n\n\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br>\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">9th Life Master</label>\n      </fieldset>\n      <br>\n      <fieldset>\n      <legend>Select your favorite weapons:</legend>\n      <input id=\"stars\" type=\"checkbox\" name=\"weapons\" value=\"stars\">\n      <label for=\"stars\">Throwing Stars</label><br>\n      <input id=\"nunchucks\" type=\"checkbox\" name=\"weapons\" value=\"nunchucks\">\n      <label for=\"nunchucks\">Nunchucks</label><br>\n      <input id=\"sai\" type=\"checkbox\" name=\"weapons\" value=\"sai\">\n      <label for=\"sai\">Sai Set</label><br>\n      <input id=\"sword\" type=\"checkbox\" name=\"weapons\" value=\"sword\">\n      <label for=\"sword\">Sword</label>\n      </fieldset>\n      <br>\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form><br>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n  p:focus {\n    background-color: yellow;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Ninja Survey</h1>\n  </header>\n  <section>\n    <form>\n\n\n      <p tabindex=\"0\">Instructions: Fill in ALL your information then click <b>Submit</b></p>\n\n\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br>\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">9th Life Master</label>\n      </fieldset>\n      <br>\n      <fieldset>\n      <legend>Select your favorite weapons:</legend>\n      <input id=\"stars\" type=\"checkbox\" name=\"weapons\" value=\"stars\">\n      <label for=\"stars\">Throwing Stars</label><br>\n      <input id=\"nunchucks\" type=\"checkbox\" name=\"weapons\" value=\"nunchucks\">\n      <label for=\"nunchucks\">Nunchucks</label><br>\n      <input id=\"sai\" type=\"checkbox\" name=\"weapons\" value=\"sai\">\n      <label for=\"sai\">Sai Set</label><br>\n      <input id=\"sword\" type=\"checkbox\" name=\"weapons\" value=\"sword\">\n      <label for=\"sword\">Sword</label>\n      </fieldset>\n      <br>\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form><br>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add a `tabindex` attribute to the `p` tag that holds the form instructions.",
          "testCode": "assert.isNotNull(document.querySelector('p')?.getAttribute('tabindex'));"
        },
        {
          "text": "Your code should set the `tabindex` attribute on the `p` tag to a value of 0.",
          "testCode": "assert.equal(document.querySelector('p')?.getAttribute('tabindex'), '0');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cmzMDHW",
        "forumTopicId": 301027,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\use-tabindex-to-add-keyboard-focus-to-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d7790367417b2b2512ab1",
      "title": "Use tabindex to Specify the Order of Keyboard Focus for Several Elements",
      "challengeType": 0,
      "dashedName": "use-tabindex-to-specify-the-order-of-keyboard-focus-for-several-elements",
      "description": "The `tabindex` attribute also specifies the exact tab order of elements. This is achieved when the attribute's value is set to a positive number of 1 or higher.\n\nSetting a `tabindex=\"1\"` will bring keyboard focus to that element first. Then it cycles through the sequence of specified `tabindex` values (2, 3, etc.), before moving to default and `tabindex=\"0\"` items.\n\nIt's important to note that when the tab order is set this way, it overrides the default order (which uses the HTML source). This may confuse users who are expecting to start navigation from the top of the page. This technique may be necessary in some circumstances, but in terms of accessibility, take care before applying it.\n\nHere's an example:\n\n```html\n<div tabindex=\"1\">I get keyboard focus, and I get it first!</div>\n```\n\n```html\n<div tabindex=\"2\">I get keyboard focus, and I get it second!</div>\n```",
      "instructions": "Camper Cat has a search field on his Inspirational Quotes page that he plans to position in the upper right corner with CSS. He wants the search `input` and submit `input` form controls to be the first two items in the tab order. Add a `tabindex` attribute set to `1` to the `search` `input`, and a `tabindex` attribute set to `2` to the `submit` `input`.\n\nAnother thing to note is that some browsers may place you in the middle of your tab order when an element is clicked. An element has been added to the page that ensures you will always start at the beginning of your tab order.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <div tabindex=\"1\" class=\"overlay\"></div>\n  <header>\n    <h1>Even Deeper Thoughts with Master Camper Cat</h1>\n    <nav>\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Blog</a></li>\n        <li><a href=\"\">Training</a></li>\n      </ul>\n    </nav>\n  </header>\n  <form>\n    <label for=\"search\">Search:</label>\n\n\n    <input type=\"search\" name=\"search\" id=\"search\">\n    <input type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\">\n\n\n  </form>\n  <h2>Inspirational Quotes</h2>\n  <blockquote>\n    <p>&ldquo;There's no Theory of Evolution, just a list of creatures I've allowed to live.&rdquo;<br>\n    - Chuck Norris</p>\n  </blockquote>\n  <blockquote>\n    <p>&ldquo;Wise men say forgiveness is divine, but never pay full price for late pizza.&rdquo;<br>\n    - TMNT</p>\n  </blockquote>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>\n<style>\n  body {\n    height: 100%;\n    margin: 0 !important;\n    padding: 8px;\n  }\n  .overlay {\n    margin: -8px;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n</style>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <div tabindex=\"1\" class=\"overlay\"></div>\n  <header>\n    <h1>Even Deeper Thoughts with Master Camper Cat</h1>\n    <nav>\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Blog</a></li>\n        <li><a href=\"\">Training</a></li>\n      </ul>\n    </nav>\n  </header>\n  <form>\n    <label for=\"search\">Search:</label>\n\n\n    <input tabindex=\"1\" type=\"search\" name=\"search\" id=\"search\">\n    <input tabindex=\"2\" type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\">\n\n\n  </form>\n  <h2>Inspirational Quotes</h2>\n  <blockquote>\n    <p>&ldquo;There's no Theory of Evolution, just a list of creatures I've allowed to live.&rdquo;<br>\n    - Chuck Norris</p>\n  </blockquote>\n  <blockquote>\n    <p>&ldquo;Wise men say forgiveness is divine, but never pay full price for late pizza.&rdquo;<br>\n    - TMNT</p>\n  </blockquote>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>\n<style>\n  body {\n    height: 100%;\n    margin: 0 !important;\n    padding: 8px;\n  }\n  .overlay {\n    margin: -8px;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add a `tabindex` attribute to the `search` `input` tag.",
          "testCode": "assert.isNotNull(document.querySelector('#search')?.getAttribute('tabindex'));"
        },
        {
          "text": "Your code should add a `tabindex` attribute to the `submit` `input` tag.",
          "testCode": "assert.isNotNull(document.querySelector('#submit')?.getAttribute('tabindex'));"
        },
        {
          "text": "Your code should set the `tabindex` attribute on the `search` `input` tag to a value of 1.",
          "testCode": "assert.equal(document.querySelector('#search')?.getAttribute('tabindex'), '1');"
        },
        {
          "text": "Your code should set the `tabindex` attribute on the `submit` `input` tag to a value of 2.",
          "testCode": "assert.equal(document.querySelector('#submit')?.getAttribute('tabindex'), '2');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cmzRRcb",
        "forumTopicId": 301028,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\use-tabindex-to-specify-the-order-of-keyboard-focus-for-several-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d774e367417b2b2512aa0",
      "title": "Wrap Content in the article Element",
      "challengeType": 0,
      "dashedName": "wrap-content-in-the-article-element",
      "description": "`article` is another one of the new HTML5 elements that add semantic meaning to your markup. `article` is a sectioning element and is used to wrap independent, self-contained content. The tag works well with blog entries, forum posts, or news articles.\n\nDetermining whether content can stand alone is usually a judgment call, but you can use a couple of simple tests. Ask yourself if you removed all surrounding context, would that content still make sense? Similarly, for text, would the content hold up if it were in an RSS feed?\n\nRemember that folks using assistive technologies rely on organized, semantically meaningful markup to better understand your work.\n\n**Note:** The `section` element is also new with HTML5, and has a slightly different semantic meaning than `article`. An `article` is for standalone content, and a `section` is for grouping thematically related content. They can be used within each other, as needed. For example, if a book is the `article`, then each chapter is a `section`. When there's no relationship between groups of content, then use a `div`.\n\n`<div>` - groups content\n`<section>` - groups related content\n`<article>` - groups independent, self-contained content",
      "instructions": "Camper Cat used `article` tags to wrap the posts on his blog page, but he forgot to use them around the top one. Change the `div` tag to use an `article` tag instead.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h1>Deep Thoughts with Master Camper Cat</h1>\n<main>\n  <div>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </div>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h1>Deep Thoughts with Master Camper Cat</h1>\n<main>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have three `article` tags.",
          "testCode": "assert.lengthOf(document.querySelectorAll('article') ,3);"
        },
        {
          "text": "Your code should not have any `div` tags.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div'), 0);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cPp79S3",
        "forumTopicId": 301029,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\wrap-content-in-the-article-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d778b367417b2b2512aa7",
      "title": "Wrap Radio Buttons in a fieldset Element for Better Accessibility",
      "challengeType": 0,
      "dashedName": "wrap-radio-buttons-in-a-fieldset-element-for-better-accessibility",
      "description": "The next form topic covers the accessibility of radio buttons. Each choice is given a `label` with a `for` attribute tying to the `id` of the corresponding item as covered in the last challenge. Since radio buttons often come in a group where the user must choose one, there's a way to semantically show the choices are part of a set.\n\nThe `fieldset` tag surrounds the entire grouping of radio buttons to achieve this. It often uses a `legend` tag to provide a description for the grouping, which screen readers read for each choice in the `fieldset` element.\n\nThe `fieldset` wrapper and `legend` tag are not necessary when the choices are self-explanatory, like a gender selection. Using a `label` with the `for` attribute for each radio button is sufficient.\n\nHere's an example:\n\n```html\n<form>\n  <fieldset>\n    <legend>Choose one of these three items:</legend>\n    <input id=\"one\" type=\"radio\" name=\"items\" value=\"one\">\n    <label for=\"one\">Choice One</label><br>\n    <input id=\"two\" type=\"radio\" name=\"items\" value=\"two\">\n    <label for=\"two\">Choice Two</label><br>\n    <input id=\"three\" type=\"radio\" name=\"items\" value=\"three\">\n    <label for=\"three\">Choice Three</label>\n  </fieldset>\n</form>\n```",
      "instructions": "Camper Cat wants information about the ninja level of his users when they sign up for his email list. He's added a set of radio buttons and learned from our last lesson to use `label` tags with `for` attributes for each choice. Go Camper Cat! However, his code still needs some help. Change the `div` tag surrounding the radio buttons to a `fieldset` tag, and change the `p` tag inside it to a `legend`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <!-- Only change code below this line -->\n      <div>\n        <p>What level ninja are you?</p>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">Master</label>\n      </div>\n      <!-- Only change code above this line -->\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">Master</label>\n      </fieldset>\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have a `fieldset` tag around the radio button set.",
          "testCode": "assert.lengthOf(document.querySelectorAll('fieldset'),1);"
        },
        {
          "text": "The `fieldset` element should have a closing tag.",
          "testCode": "assert.isTrue(code.match(/<\\/fieldset>/g)?.length === code.match(/<fieldset>/g)?.length);"
        },
        {
          "text": "Your code should have a `legend` tag around the text asking what level ninja a user is.",
          "testCode": "assert.lengthOf(document.querySelectorAll('legend') ,1);"
        },
        {
          "text": "Your code should not have any `div` tags.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div') ,0);"
        },
        {
          "text": "Your code should no longer have a `p` tag around the text asking what level ninja a user is.",
          "testCode": "assert.lengthOf(document.querySelectorAll('p') ,4);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cVJVefw",
        "forumTopicId": 301030,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-accessibility\\wrap-radio-buttons-in-a-fieldset-element-for-better-accessibility.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-accessibility",
        "name": "Applied Accessibility"
      }
    },
    {
      "id": "587d781b367417b2b2512abe",
      "title": "Add a box-shadow to a Card-like Element",
      "challengeType": 0,
      "dashedName": "add-a-box-shadow-to-a-card-like-element",
      "description": "The `box-shadow` property applies one or more shadows to an element.\n\nThe `box-shadow` property takes the following values, in order:\n\n<ul>\n  <li><code>offset-x</code> (how far to push the shadow horizontally from the element)</li>\n  <li><code>offset-y</code> (how far to push the shadow vertically from the element)</li>\n  <li><code>blur-radius</code></li>\n  <li><code>spread-radius</code></li>\n  <li><code>color</code></li>\n</ul>\n\nThe `blur-radius` and `spread-radius` values are optional.\n\nMultiple box-shadows can be created by using commas to separate properties of each `box-shadow` element.\n\nHere's an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:\n\n```css\nbox-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n```",
      "instructions": "The element now has an id of `thumbnail`. With this selector, use the example CSS values above to place a `box-shadow` on the card.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n\n\n\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add a `box-shadow` property for the `thumbnail` id.",
          "testCode": "assert.match(code,(/#thumbnail\\s*?{\\s*?box-shadow/g));"
        },
        {
          "text": "You should use the given CSS for the `box-shadow` value.",
          "testCode": "assert(\n  code.match(\n    /box-shadow:\\s*?0\\s+?10px\\s+?20px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.19\\)\\s*?,\\s*?0\\s+?6px\\s+?6px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.23\\)/gi\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cvVZdUd",
        "forumTopicId": 301031,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\add-a-box-shadow-to-a-card-like-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781b367417b2b2512abc",
      "title": "Adjust the background-color Property of Text",
      "challengeType": 0,
      "dashedName": "adjust-the-background-color-property-of-text",
      "description": "Instead of adjusting your overall background or the color of the text to make the foreground easily readable, you can add a `background-color` to the element holding the text you want to emphasize. This challenge uses `rgba()` instead of `hex` codes or normal `rgb()`.\n\n<blockquote>rgba stands for:<br>  r = red<br>  g = green<br>  b = blue<br>  a = alpha/level of opacity</blockquote>\n\nThe RGB values can range from 0 to 255. The alpha value can range from 1, which is fully opaque or a solid color, to 0, which is fully transparent or clear. `rgba()` is great to use in this case, as it allows you to adjust the opacity. This means you don't have to completely block out the background.\n\nYou'll use `background-color: rgba(45, 45, 45, 0.1)` for this challenge. It produces a dark gray color that is nearly transparent given the low opacity value of 0.1.",
      "instructions": "To make the text stand out more, adjust the `background-color` of the `h4` element to the given `rgba()` value.\n\nAlso for the `h4`, remove the `height` property and add `padding` of 10px.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    padding: 10px;\n    background-color: rgba(45, 45, 45, 0.1);\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add a `background-color` property to the `h4` element set to `rgba(45, 45, 45, 0.1)`.",
          "testCode": "assert(\n  /(background-color|background):rgba\\(45,45,45,0?\\.1\\)(;?}|;)/gi.test(\n    code.replace(/\\s/g, '')\n  )\n);"
        },
        {
          "text": "Your code should add a `padding` property to the `h4` element and set it to 10 pixels.",
          "testCode": "const h4Element = document.querySelector(\"h4\"); \nconst h4style = window.getComputedStyle(h4Element);\nassert.equal(h4style?.paddingTop, \"10px\");\nassert.equal(h4style?.paddingRight, \"10px\");\nassert.equal(h4style?.paddingBottom, \"10px\");\nassert.equal(h4style?.paddingLeft, \"10px\");"
        },
        {
          "text": "The `height` property on the `h4` element should be removed.",
          "testCode": "const h4Element = document.querySelector(\"h4\"); \nconst h4style = window.getComputedStyle(h4Element);\nassert.notEqual(h4style?.height, '25px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cEDqwA6",
        "forumTopicId": 301032,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\adjust-the-background-color-property-of-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a4367417b2b2512ad3",
      "title": "Adjust the Color of Various Elements to Complementary Colors",
      "challengeType": 0,
      "dashedName": "adjust-the-color-of-various-elements-to-complementary-colors",
      "description": "The Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.",
      "instructions": "This page will use a shade of teal (`#09A7A1`) as the dominant color, and its orange (`#FF790E`) complement to visually highlight the sign-up buttons. Change the `background-color` of both the `header` and `footer` from black to the teal color. Then change the `h2` text `color` to teal as well. Finally, change the `background-color` of the `button` to the orange color.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: white;\n  }\n  header {\n    background-color: black;\n    color: white;\n    padding: 0.25em;\n  }\n  h2 {\n    color: black;\n  }\n  button {\n    background-color: white;\n  }\n  footer {\n    background-color: black;\n    color: white;\n    padding: 0.5em;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n</header>\n<main>\n  <article>\n    <h2>Machine Learning in the Kitchen</h2>\n    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>\n    <button>Sign Up</button>\n  </article>\n  <article>\n    <h2>Bisection Vegetable Chopping</h2>\n    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>\n    <button>Sign Up</button>\n  </article>\n</main>\n<br>\n<footer>&copy; 2018 FCC Kitchen</footer>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: white;\n  }\n  header {\n    background-color: #09A7A1;\n    color: white;\n    padding: 0.25em;\n  }\n  h2 {\n    color: #09A7A1;\n  }\n  button {\n    background-color: #FF790E;\n  }\n  footer {\n    background-color: #09A7A1;\n    color: white;\n    padding: 0.5em;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n</header>\n<main>\n  <article>\n    <h2>Machine Learning in the Kitchen</h2>\n    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>\n    <button>Sign Up</button>\n  </article>\n  <article>\n    <h2>Bisection Vegetable Chopping</h2>\n    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>\n    <button>Sign Up</button>\n  </article>\n</main>\n<br>\n<footer>&copy; 2018 FCC Kitchen</footer>"
        }
      ],
      "tests": [
        {
          "text": "The `header` element should have a `background-color` of #09A7A1.",
          "testCode": "const headerElement = document.querySelector('header'); \nconst headerStyle = window.getComputedStyle(headerElement);\nassert.equal(headerStyle?.backgroundColor, 'rgb(9, 167, 161)');"
        },
        {
          "text": "The `footer` element should have a `background-color` of #09A7A1.",
          "testCode": "const footerElement = document.querySelector('footer'); \nconst footerStyle = window.getComputedStyle(footerElement);\nassert.equal(footerStyle?.backgroundColor, 'rgb(9, 167, 161)');"
        },
        {
          "text": "The `h2` element should have a `color` of #09A7A1.",
          "testCode": "const h2Element = document.querySelector('h2'); \nconst h2Style = window.getComputedStyle(h2Element);\nassert.equal(h2Style?.color, 'rgb(9, 167, 161)');"
        },
        {
          "text": "The `button` element should have a `background-color` of #FF790E.",
          "testCode": "const buttonElement = document.querySelector('button'); \nconst buttonStyle = window.getComputedStyle(buttonElement);\nassert.equal(buttonStyle?.backgroundColor, 'rgb(255, 121, 14)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cWmPpud",
        "forumTopicId": 301033,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\adjust-the-color-of-various-elements-to-complementary-colors.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d7791367417b2b2512ab5",
      "title": "Adjust the Height of an Element Using the height Property",
      "challengeType": 0,
      "dashedName": "adjust-the-height-of-an-element-using-the-height-property",
      "description": "You can specify the height of an element using the `height` property in CSS, similar to the `width` property. Here's an example that changes the height of an image to 20px:\n\n```css\nimg {\n  height: 20px;\n}\n```",
      "instructions": "Add a `height` property to the `h4` tag and set it to 25px.\n\n**Note:** You may need to be at 100% zoom to pass the test on this challenge.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should change the `h4` `height` property to a value of 25 pixels.",
          "testCode": "const spaceFreeText = document.querySelector(\"style:not(.fcc-hide-header)\")?.textContent?.replace(/\\s/g, ''); \nconst h4Element = document.querySelector('h4');\nassert.equal(Math.round(h4Element?.getBoundingClientRect()?.height),25);\nassert.match(spaceFreeText,/h4{\\S*height:25px(;\\S*}|})/);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cEDaDTN",
        "forumTopicId": 301034,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\adjust-the-height-of-an-element-using-the-height-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781d367417b2b2512ac8",
      "title": "Adjust the Hover State of an Anchor Tag",
      "challengeType": 0,
      "dashedName": "adjust-the-hover-state-of-an-anchor-tag",
      "description": "This challenge will touch on the usage of pseudo-classes. A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element.\n\nFor example, the styling of an anchor tag can be changed for its hover state using the `:hover` pseudo-class selector. Here's the CSS to change the `color` of the anchor tag to red during its hover state:\n\n```css\na:hover {\n  color: red;\n}\n```",
      "instructions": "The code editor has a CSS rule to style all `a` tags black. Add a rule so that when the user hovers over the `a` tag, the `color` is blue.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  a {\n    color: #000;\n  }\n\n\n\n</style>\n<a href=\"https://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  a {\n    color: #000;\n  }\n  a:hover {\n    color: rgba(0,0,255,1);\n  }\n</style>\n<a href=\"https://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>"
        }
      ],
      "tests": [
        {
          "text": "The anchor tag `color` should remain black, only add CSS rules for the `:hover` state.",
          "testCode": "const anchorElement = document.querySelector(\"a\"); \nconst anchorStyle = window.getComputedStyle(anchorElement);\nassert.equal(anchorStyle?.color, 'rgb(0, 0, 0)');"
        },
        {
          "text": "The anchor tag should have a `color` of blue on hover.",
          "testCode": "assert.match(code,\n    /a:hover\\s*?{\\s*?color:\\s*?(blue|rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?255\\s*?,\\s*?1\\s*?\\)|#00F|rgb\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?255\\s*?\\))\\s*?;\\s*?}/gi\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cakRGcm",
        "forumTopicId": 301035,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\adjust-the-hover-state-of-an-anchor-tag.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a4367417b2b2512ad4",
      "title": "Adjust the Hue of a Color",
      "challengeType": 0,
      "dashedName": "adjust-the-hue-of-a-color",
      "description": "Colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the `hsl()` function as an alternative way to pick a color by directly stating these characteristics.\n\n**Hue** is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In `hsl()`, hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.\n\n**Saturation** is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.\n\n**Lightness** is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.\n\nHere are a few examples of using `hsl()` with fully-saturated, normal lightness colors:\n\n<table><thead><tr><th>Color</th><th>HSL</th></tr></thead><tbody><tr><td>red</td><td>hsl(0, 100%, 50%)</td></tr><tr><td>yellow</td><td>hsl(60, 100%, 50%)</td></tr><tr><td>green</td><td>hsl(120, 100%, 50%)</td></tr><tr><td>cyan</td><td>hsl(180, 100%, 50%)</td></tr><tr><td>blue</td><td>hsl(240, 100%, 50%)</td></tr><tr><td>magenta</td><td>hsl(300, 100%, 50%)</td></tr></tbody></table>",
      "instructions": "Change the `background-color` of each `div` element based on the class names (`green`, `cyan`, or `blue`) using `hsl()`. All three should have full saturation and normal lightness.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .green {\n    background-color: #000000;\n  }\n\n  .cyan {\n    background-color: #000000;\n  }\n\n  .blue {\n    background-color: #000000;\n  }\n\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n\n<div class=\"green\"></div>\n<div class=\"cyan\"></div>\n<div class=\"blue\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .green {\n    background-color: hsl(120, 100%, 50%);\n  }\n\n  .cyan {\n    background-color:   hsl(180, 100%, 50%);\n  }\n\n  .blue {\n    background-color: hsl(240, 100%, 50%);\n  }\n\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"green\"></div>\n<div class=\"cyan\"></div>\n<div class=\"blue\"></div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `hsl()` function to declare the color green.",
          "testCode": "assert.match(code,/\\.green\\s*?{\\s*?background-color\\s*:\\s*?hsl/gi);"
        },
        {
          "text": "Your code should use the `hsl()` function to declare the color cyan.",
          "testCode": "assert.match(code,/\\.cyan\\s*?{\\s*?background-color\\s*:\\s*?hsl/gi);"
        },
        {
          "text": "Your code should use the `hsl()` function to declare the color blue.",
          "testCode": "assert.match(code,/\\.blue\\s*?{\\s*?background-color\\s*:\\s*?hsl/gi);"
        },
        {
          "text": "The `div` element with class `green` should have a `background-color` of green.",
          "testCode": "const greenElement = document.querySelector(\".green\");\nconst greenStyle = window.getComputedStyle(greenElement); \nassert.equal(greenStyle?.backgroundColor, 'rgb(0, 255, 0)');"
        },
        {
          "text": "The `div` element with class `cyan` should have a `background-color` of cyan.",
          "testCode": "const cyanElement = document.querySelector(\".cyan\");\nconst cyanStyle = window.getComputedStyle(cyanElement); \nassert.equal(cyanStyle?.backgroundColor, 'rgb(0, 255, 255)');"
        },
        {
          "text": "The `div` element with class `blue` should have a `background-color` of blue.",
          "testCode": "const blueElement = document.querySelector(\".blue\");\nconst blueStyle = window.getComputedStyle(blueElement); \nassert.equal(blueStyle?.backgroundColor, 'rgb(0, 0, 255)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cPp38TZ",
        "forumTopicId": 301036,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\adjust-the-hue-of-a-color.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781b367417b2b2512abd",
      "title": "Adjust the Size of a Heading Element Versus a Paragraph Element",
      "challengeType": 0,
      "dashedName": "adjust-the-size-of-a-heading-element-versus-a-paragraph-element",
      "description": "The font size of heading elements (`h1` through `h6`) should generally be larger than the font size of paragraph tags. This makes it easier for the user to visually understand the layout and level of importance of everything on the page. You use the `font-size` property to adjust the size of the text in an element.",
      "instructions": "To make the heading significantly larger than the paragraph, change the `font-size` of the `h4` element to 27 pixels.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add a `font-size` property to the `h4` element set to 27 pixels.\n\n```js\n\nconst h4Element =document.querySelector('h4')\nconst h4Style = window.getComputedStyle(h4Element);\nassert.equal(h4Style?.fontSize,'27px');\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c3bRPTz",
        "forumTopicId": 301037,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\adjust-the-size-of-a-heading-element-versus-a-paragraph-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a4367417b2b2512ad5",
      "title": "Adjust the Tone of a Color",
      "challengeType": 0,
      "dashedName": "adjust-the-tone-of-a-color",
      "description": "The `hsl()` option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of `hsl()` stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.",
      "instructions": "All elements have a default `background-color` of `transparent`. Our `nav` element currently appears to have a `cyan` background, because the element behind it has a `background-color` set to `cyan`. Add a `background-color` to the `nav` element so it uses the same `cyan` hue, but has `80%` saturation and `25%` lightness values to change its tone and shade.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  header {\n    background-color: hsl(180, 90%, 35%);\n    color: #FFFFFF;\n  }\n\n  nav {\n\n  }\n\n  h1 {\n    text-indent: 10px;\n    padding-top: 10px;\n  }\n\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n</style>\n\n<header>\n  <h1>Cooking with FCC!</h1>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">Classes</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n</header>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  header {\n    background-color: hsl(180, 90%, 35%);\n    color: #FFFFFF;\n  }\n\n  nav {\n    background-color: hsl(180, 80%, 25%);\n  }\n\n  h1 {\n    text-indent: 10px;\n    padding-top: 10px;\n  }\n\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">Classes</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n</header>"
        }
      ],
      "tests": [
        {
          "text": "The `nav` element should have a `background-color` of the adjusted cyan tone using the `hsl()` property.",
          "testCode": "// Computed style of hsl(180, 80%, 25%) results in rgb(13,115,115)\nassert.equal(\n  new __helpers.CSSHelp(document).getStyle('nav').getPropVal('background-color', true), \n  'rgb(13,115,115)'\n)"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cEDJvT7",
        "forumTopicId": 301038,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\adjust-the-tone-of-a-color.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d7791367417b2b2512ab4",
      "title": "Adjust the Width of an Element Using the width Property",
      "challengeType": 0,
      "dashedName": "adjust-the-width-of-an-element-using-the-width-property",
      "description": "You can specify the width of an element using the `width` property in CSS. Values can be given in relative length units (such as `em`), absolute length units (such as `px`), or as a percentage of its containing parent element. Here's an example that changes the width of an image to 220px:\n\n```css\nimg {\n  width: 220px;\n}\n```",
      "instructions": "Add a `width` property to the entire card and set it to an absolute value of 245px. Use the `fullCard` class to select the element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should change the `width` property of the card to 245 pixels by using the `fullCard` class selector.\n\n```js\nconst fullCard = code.match(/\\.fullCard\\s*{[\\s\\S]+?[^}]}/g);\nconst fullCardElement = document.querySelector('.fullCard');\nconst fullCardStyle = window.getComputedStyle(fullCardElement); \nassert.match(code,/\\.fullCard\\s*{[\\s\\S]+?[^}]}/g);\n\nassert.match(fullCard?.[0],/width\\s*:\\s*245px\\s*(;|})/gi);\nassert.equal(fullCardStyle?.maxWidth, 'none');\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cvVLPtN",
        "forumTopicId": 301039,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\adjust-the-width-of-an-element-using-the-width-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a8367417b2b2512ae5",
      "title": "Animate Elements at Variable Rates",
      "challengeType": 0,
      "dashedName": "animate-elements-at-variable-rates",
      "description": "There are a variety of ways to alter the animation rates of similarly animated elements. So far, this has been achieved by applying an `animation-iteration-count` property and setting `@keyframes` rules.\n\nTo illustrate, the animation on the right consists of two stars that each decrease in size and opacity at the 20% mark in the `@keyframes` rule, which creates the twinkle animation. You can change the `@keyframes` rule for one of the elements so the stars twinkle at different rates.",
      "instructions": "Alter the animation rate for the element with the class name of `star-1` by changing its `@keyframes` rule to 50%.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-name: twinkle-1;\n    animation-duration: 1s;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-name: twinkle-2;\n    animation-duration: 1s;\n  }\n\n  @keyframes twinkle-1 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  @keyframes twinkle-2 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-name: twinkle-1;\n    animation-duration: 1s;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-name: twinkle-2;\n    animation-duration: 1s;\n  }\n\n  @keyframes twinkle-1 {\n    50% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  @keyframes twinkle-2 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `@keyframes` rule for the `star-1` class should be 50%.",
          "testCode": "assert.match(code,/twinkle-1\\s*?{\\s*?50%/g);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cZ89WA4",
        "forumTopicId": 301040,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\animate-elements-at-variable-rates.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a8367417b2b2512ae3",
      "title": "Animate Elements Continually Using an Infinite Animation Count",
      "challengeType": 0,
      "dashedName": "animate-elements-continually-using-an-infinite-animation-count",
      "description": "The previous challenges covered how to use some of the animation properties and the `@keyframes` rule. Another animation property is the `animation-iteration-count`, which allows you to control how many times you would like to loop through the animation. Here's an example:\n\n```css\nanimation-iteration-count: 3;\n```\n\nIn this case the animation will stop after running 3 times, but it's possible to make the animation run continuously by setting that value to `infinite`.",
      "instructions": "To keep the ball bouncing on the right on a continuous loop, change the `animation-iteration-count` property to `infinite`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n\n  #ball {\n    width: 100px;\n    height: 100px;\n    margin: 50px auto;\n    position: relative;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: bounce;\n    animation-duration: 1s;\n    animation-iteration-count: 3;\n  }\n\n  @keyframes bounce{\n    0% {\n      top: 0px;\n    }\n    50% {\n      top: 249px;\n      width: 130px;\n      height: 70px;\n    }\n    100% {\n      top: 0px;\n    }\n  }\n</style>\n<div id=\"ball\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #ball {\n    width: 100px;\n    height: 100px;\n    margin: 50px auto;\n    position: relative;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: bounce;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n\n  @keyframes bounce{\n    0% {\n      top: 0px;\n    }\n    50% {\n      top: 249px;\n      width: 130px;\n      height: 70px;\n    }\n    100% {\n      top: 0px;\n    }\n  }\n</style>\n<div id=\"ball\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `animation-iteration-count` property should have a value of `infinite`.",
          "testCode": "const ballElement = document.querySelector('#ball');\nconst ballStyle = window.getComputedStyle(ballElement); \nassert.equal(ballStyle?.animationIterationCount, 'infinite');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cVJDVfq",
        "forumTopicId": 301041,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\animate-elements-continually-using-an-infinite-animation-count.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a8367417b2b2512ae6",
      "title": "Animate Multiple Elements at Variable Rates",
      "challengeType": 0,
      "dashedName": "animate-multiple-elements-at-variable-rates",
      "description": "In the previous challenge, you changed the animation rates for two similarly animated elements by altering their `@keyframes` rules. You can achieve the same goal by manipulating the `animation-duration` of multiple elements.\n\nIn the animation running in the code editor, there are three stars in the sky that twinkle at the same rate on a continuous loop. To make them twinkle at different rates, you can set the `animation-duration` property to different values for each element.",
      "instructions": "Set the `animation-duration` of the elements with the classes `star-1`, `star-2`, and `star-3` to 1s, 0.9s, and 1.1s, respectively.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-3 {\n    margin-top: 10%;\n    margin-left: 50%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  @keyframes twinkle {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>\n<div class=\"star-3 stars\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-duration: 0.9s;\n    animation-name: twinkle;\n  }\n\n  .star-3 {\n    margin-top: 10%;\n    margin-left: 50%;\n    animation-duration: 1.1s;\n    animation-name: twinkle;\n  }\n\n  @keyframes twinkle {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>\n<div class=\"star-3 stars\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `animation-duration` property for the star with class `star-1` should remain at 1s.",
          "testCode": "const starOne = document.querySelector('.star-1');\nconst starOneStyle = window.getComputedStyle(starOne); \nassert.equal(starOneStyle?.animationDuration, '1s');"
        },
        {
          "text": "The `animation-duration` property for the star with class `star-2` should be 0.9s.",
          "testCode": "const starTwo = document.querySelector('.star-2');\nconst starTwoStyle = window.getComputedStyle(starTwo); \nassert.equal(starTwoStyle?.animationDuration , '0.9s');"
        },
        {
          "text": "The `animation-duration` property for the star with class `star-3` should be 1.1s.",
          "testCode": "const starThree = document.querySelector('.star-3');\nconst starThreeStyle = window.getComputedStyle(starThree); \nassert.equal(starThreeStyle?.animationDuration, '1.1s');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cnpWZc9",
        "forumTopicId": 301042,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\animate-multiple-elements-at-variable-rates.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a3367417b2b2512ad0",
      "title": "Center an Element Horizontally Using the margin Property",
      "challengeType": 0,
      "dashedName": "center-an-element-horizontally-using-the-margin-property",
      "description": "Another positioning technique is to center a block element horizontally. One way to do this is to set its `margin` to a value of auto.\n\nThis method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the `display` property to `block`.",
      "instructions": "Center the `div` on the page by adding a `margin` property with a value of `auto`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    background-color: blue;\n    height: 100px;\n    width: 100px;\n\n  }\n</style>\n<div></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    background-color: blue;\n    height: 100px;\n    width: 100px;\n    margin: auto;\n  }\n</style>\n<div></div>"
        }
      ],
      "tests": [
        {
          "text": "The `div` should have a `margin` set to `auto`.",
          "testCode": "assert.equal(new __helpers.CSSHelp(document).getStyle('div')?.margin ,'auto');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cyLJqU4",
        "forumTopicId": 301043,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\center-an-element-horizontally-using-the-margin-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781e367417b2b2512ac9",
      "title": "Change an Element's Relative Position",
      "challengeType": 0,
      "dashedName": "change-an-elements-relative-position",
      "description": "CSS treats each HTML element as its own box, which is usually referred to as the <dfn>CSS Box Model</dfn>. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the <dfn>normal flow</dfn> of a document, but CSS offers the position property to override it.\n\nWhen the position of an element is set to `relative`, it allows you to specify how CSS should move it *relative* to its current position in the normal flow of the page. It pairs with the CSS offset properties of `left` or `right`, and `top` or `bottom`. These say how many pixels, percentages, or ems to move the item *away* from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:\n\n```css\np {\n  position: relative;\n  bottom: 10px;\n}\n```\n\nChanging an element's position to relative does not remove it from the normal flow - other elements around it still behave as if that item were in its default position.\n\n**Note:** Positioning gives you a lot of flexibility and power over the visual layout of a page. It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.",
      "instructions": "Change the `position` of the `h2` to `relative`, and use a CSS offset to move it 15 pixels away from the `top` of where it sits in the normal flow. Notice there is no impact on the positions of the surrounding h1 and p elements.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h2 {\n\n\n  }\n</style>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h2 {\n    position: relative;\n    top: 15px;\n  }\n</style>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "The `h2` element should have a `position` property set to `relative`.",
          "testCode": "const h2Element =document.querySelector('h2')\nconst h2Style = window.getComputedStyle(h2Element);\nassert.equal(h2Style?.position, 'relative');"
        },
        {
          "text": "Your code should use a CSS offset to relatively position the `h2` 15px away from the `top` of where it normally sits.",
          "testCode": "const h2Element =document.querySelector('h2')\nconst h2Style = window.getComputedStyle(h2Element);\nassert.equal(h2Style?.top, '15px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/czVmMtZ",
        "forumTopicId": 301044,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\change-an-elements-relative-position.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a8367417b2b2512ae7",
      "title": "Change Animation Timing with Keywords",
      "challengeType": 0,
      "dashedName": "change-animation-timing-with-keywords",
      "description": "In CSS animations, the `animation-timing-function` property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your `animation-duration`), the `animation-timing-function` says how the car accelerates and decelerates over the course of the drive.\n\nThere are a number of predefined keywords available for popular options. For example, the default value is `ease`, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include `ease-out`, which is quick in the beginning then slows down, `ease-in`, which is slow in the beginning, then speeds up at the end, or `linear`, which applies a constant animation speed throughout.",
      "instructions": "For the elements with id of `ball1` and `ball2`, add an `animation-timing-function` property to each, and set `#ball1` to `linear`, and `#ball2` to `ease-out`. Notice the difference between how the elements move during the animation but end together, since they share the same `animation-duration` of 2 seconds.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n\n  .balls {\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left:27%;\n\n  }\n  #ball2 {\n    left:56%;\n\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n\n</style>\n\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .balls {\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left:27%;\n    animation-timing-function: linear;\n  }\n  #ball2 {\n    left:56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The value of the `animation-timing-function` property for the element with the id `ball1` should be `linear`.\n\n```js\nconst ballOne =document.querySelector('#ball1'); \nconst ballOneStyle = window.getComputedStyle(ballOne);\n\nconst ball1Animation = __helpers.removeWhiteSpace(ballOneStyle?.animationTimingFunction);\nassert.isTrue(ball1Animation == 'linear' || ball1Animation == 'cubic-bezier(0,0,1,1)');\n```\n\nThe value of the `animation-timing-function` property for the element with the id `ball2` should be `ease-out`.\n\n```js\nconst ballTwo = document.querySelector('#ball2'); \nconst ballTwoStyle = window.getComputedStyle(ballTwo);\n\nconst ball2Animation = __helpers.removeWhiteSpace(ballTwoStyle?.animationTimingFunction);\nassert.isTrue(ball2Animation == 'ease-out' || ball2Animation == 'cubic-bezier(0,0,0.58,1)');\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cJKvwCM",
        "forumTopicId": 301045,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\change-animation-timing-with-keywords.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a3367417b2b2512acf",
      "title": "Change the Position of Overlapping Elements with the z-index Property",
      "challengeType": 0,
      "dashedName": "change-the-position-of-overlapping-elements-with-the-z-index-property",
      "description": "When elements are positioned to overlap (i.e. using `position: absolute | relative | fixed | sticky`), the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the `z-index` property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the `z-index` property of an element move it higher in the stack than those with lower values.",
      "instructions": "Add a `z-index` property to the element with the class name of `first` (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle).",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    width: 60%;\n    height: 200px;\n    margin-top: 20px;\n  }\n\n  .first {\n    background-color: red;\n    position: absolute;\n\n  }\n  .second {\n    background-color: blue;\n    position: absolute;\n    left: 40px;\n    top: 50px;\n    z-index: 1;\n  }\n</style>\n\n<div class=\"first\"></div>\n<div class=\"second\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    width: 60%;\n    height: 200px;\n    margin-top: 20px;\n  }\n\n  .first {\n    background-color: red;\n    position: absolute;\n    z-index: 2;\n  }\n  .second {\n    background-color: blue;\n    position: absolute;\n    left: 40px;\n    top: 50px;\n    z-index: 1;\n  }\n</style>\n<div class=\"first\"></div>\n<div class=\"second\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The element with class `first` should have a `z-index` value of 2.",
          "testCode": "const firstElement = document.querySelector('.first');\nconst firstStyle = window.getComputedStyle(firstElement); \nassert.equal(firstStyle?.zIndex, '2');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cM94aHk",
        "forumTopicId": 301046,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\change-the-position-of-overlapping-elements-with-the-z-index-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a5367417b2b2512ad6",
      "title": "Create a Gradual CSS Linear Gradient",
      "challengeType": 0,
      "dashedName": "create-a-gradual-css-linear-gradient",
      "description": "Applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the `background` property's `linear-gradient()` function. Here is the general syntax:\n\n```css\nbackground: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);\n```\n\nThe first argument specifies the direction from which color transition starts - it can be stated as a degree, where `90deg` makes a horizontal gradient (from left to right) and `45deg` makes a diagonal gradient (from bottom left to top right). The following arguments specify the order of colors used in the gradient.\n\nExample:\n\n```css\nbackground: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));\n```",
      "instructions": "Use a `linear-gradient()` for the `div` element's `background`, and set it from a direction of 35 degrees to change the color from `#CCFFFF` to `#FFCCCC`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin: 50px auto;\n\n  }\n\n</style>\n\n<div></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin: 50px auto;\n    background: linear-gradient(35deg, #CCFFFF, #FFCCCC);\n  }\n</style>\n<div></div>"
        }
      ],
      "tests": [
        {
          "text": "The `div` element should have a `linear-gradient` `background` with the specified direction and colors.",
          "testCode": "const divElement = document.querySelector('div');\nconst divStyle = window.getComputedStyle(divElement); \nassert.match(divStyle?.background, /linear-gradient\\(35deg, rgb\\(204, 255, 255\\), rgb\\(255, 204, 204\\)\\)/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cg4dpt9",
        "forumTopicId": 301047,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\create-a-gradual-css-linear-gradient.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a6367417b2b2512add",
      "title": "Create a Graphic Using CSS",
      "challengeType": 0,
      "dashedName": "create-a-graphic-using-css",
      "description": "By manipulating different selectors and properties, you can make interesting shapes. One of the easier ones to try is a crescent moon shape. For this challenge you need to work with the `box-shadow` property that sets the shadow of an element, along with the `border-radius` property that controls the roundness of the element's corners.\n\nYou will create a round, transparent object with a crisp shadow that is slightly offset to the side - the shadow is actually going to be the moon shape you see.\n\nIn order to create a round object, the `border-radius` property should be set to a value of 50%.\n\nYou may recall from an earlier challenge that the `box-shadow` property takes values for `offset-x`, `offset-y`, `blur-radius`, `spread-radius` and a `color` value in that order. The `blur-radius` and `spread-radius` values are optional.",
      "instructions": "Manipulate the square element in the editor to create the moon shape. First, change the `background-color` to `transparent`, then set the `border-radius` property to 50% to make the circular shape. Finally, change the `box-shadow` property to set the `offset-x` to 25px, the `offset-y` to 10px, `blur-radius` to 0, `spread-radius` to 0, and `color` to `blue`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .center {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100px;\n    height: 100px;\n    background-color: blue;\n    border-radius: 0px;\n    box-shadow: 25px 10px 10px 10px green;\n  }\n\n</style>\n<div class=\"center\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .center {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100px;\n    height: 100px;\n    background-color: transparent;\n    border-radius: 50%;\n    box-shadow: 25px 10px 0 0 blue;\n  }\n</style>\n<div class=\"center\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The value of the `background-color` property should be set to `transparent`.",
          "testCode": "assert.match(code,/background-color:\\s*?transparent;/gi);"
        },
        {
          "text": "The value of the `border-radius` property should be set to `50%`.",
          "testCode": "assert.match(code,/border-radius:\\s*?50%;/gi);"
        },
        {
          "text": "The value of the `box-shadow` property should be set to 25px for `offset-x`, 10px for `offset-y`, 0 for `blur-radius`, 0 for `spread-radius`, and finally `blue` for the `color`.",
          "testCode": "assert.match(code,/box-shadow:\\s*?25px\\s+?10px\\s+?0(px)?\\s+?0(px)?\\s+?blue\\s*?;/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cEDWPs6",
        "forumTopicId": 301048,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\create-a-graphic-using-css.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781b367417b2b2512abb",
      "title": "Create a Horizontal Line Using the hr Element",
      "challengeType": 0,
      "dashedName": "create-a-horizontal-line-using-the-hr-element",
      "description": "You can use the `hr` tag to add a horizontal line across the width of its containing element. This can be used to define a change in topic or to visually separate groups of content.",
      "instructions": "Add an `hr` tag underneath the `h4` which contains the card title.\n\n**Note:** In HTML, `hr` is a void element, and therefore doesn't need a separate closing tag.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s>Alphabet</h4>\n\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add an `hr` tag to the markup.",
          "testCode": "assert.lengthOf(document.querySelectorAll('hr'),1);"
        },
        {
          "text": "The `hr` tag should come between the title and the paragraph.",
          "testCode": "assert.match(code,/<\\/h4>\\s*?<hr(>|\\s*?\\/>)\\s*?<p>/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c3bR8t7",
        "forumTopicId": 301049,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\create-a-horizontal-line-using-the-hr-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a6367417b2b2512ade",
      "title": "Create a More Complex Shape Using CSS and HTML",
      "challengeType": 0,
      "dashedName": "create-a-more-complex-shape-using-css-and-html",
      "description": "One of the most popular shapes in the world is the heart shape, and in this challenge you'll create one using pure CSS. But first, you need to understand the `::before` and `::after` pseudo-elements. `::before` creates a pseudo-element that is the first child of the selected element; `::after` creates a pseudo-element that is the last child of the selected element. In the following example, a `::before` pseudo-element is used to add a rectangle to an element with the class `heart`:\n\n```css\n.heart::before {\n  content: \"\";\n  background-color: yellow;\n  border-radius: 25%;\n  position: absolute;\n  height: 50px;\n  width: 70px;\n  top: -50px;\n  left: 5px;\n}\n```\n\nFor the `::before` and `::after` pseudo-elements to function properly, they must have a defined `content` property. This property is usually used to add things like a photo or text to the selected element. When the `::before` and `::after` pseudo-elements are used to make shapes, the `content` property is still required, but it's set to an empty string. In the above example, the element with the class of `heart` has a `::before` pseudo-element that produces a yellow rectangle with height and width of `50px` and `70px`, respectively. This rectangle has round corners due to its 25% `border-radius` and is positioned absolutely at `5px` from the left and `50px` above the top of the element.",
      "instructions": "Transform the element on the screen to a heart. In the `.heart::after` selector, change the `background-color` to `pink` and the `border-radius` to 50%.\n\nNext, target the element with the class `heart` (just `heart`) and fill in the `transform` property. Use the `rotate()` function with -45 degrees.\n\nFinally, in the `.heart::before` selector, set its `content` property to an empty string.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: ;\n  }\n  .heart::after {\n    background-color: blue;\n    content: \"\";\n    border-radius: 25%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart::before {\n    content: ;\n    background-color: pink;\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n</style>\n<div class=\"heart\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n  }\n  .heart::after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart::before {\n    content: \"\";\n    background-color: pink;\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n</style>\n<div class=\"heart\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `background-color` property of the `.heart::after` selector should be `pink`.",
          "testCode": "const heartAfter = code.match(/\\.heart::after\\s*{[\\s\\S]+?[^\\}]}/g)?.[0];\nassert.match(heartAfter, /({|;)\\s*background-color\\s*:\\s*pink\\s*(;|})/g);"
        },
        {
          "text": "The `border-radius` of the `.heart::after` selector should be 50%.",
          "testCode": "assert.lengthOf(code.match(/border-radius\\s*?:\\s*?50%/gi),2);"
        },
        {
          "text": "The `transform` property for the `heart` class should use a `rotate()` function set to -45 degrees.",
          "testCode": "assert.match(code,/transform\\s*?:\\s*?rotate\\(\\s*?-45deg\\s*?\\)/gi);"
        },
        {
          "text": "The `content` of the `.heart::before` selector should be an empty string.",
          "testCode": "assert.match(code,/\\.heart::before\\s*?{\\s*?content\\s*?:\\s*?(\"|')\\1\\s*?;/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cPpz4fr",
        "forumTopicId": 301050,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\create-a-more-complex-shape-using-css-and-html.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a7367417b2b2512ae1",
      "title": "Create Movement Using CSS Animation",
      "challengeType": 0,
      "dashedName": "create-movement-using-css-animation",
      "description": "When elements have a specified `position`, such as `fixed` or `relative`, the CSS offset properties `right`, `left`, `top`, and `bottom` can be used in animation rules to create movement.\n\nAs shown in the example below, you can push the item downwards then upwards by setting the `top` property of the `50%` keyframe to 50px, but having it set to 0px for the first (`0%`) and the last (`100%`) keyframe.\n\n```css\n@keyframes rainbow {\n  0% {\n    background-color: blue;\n    top: 0px;\n  }\n  50% {\n    background-color: green;\n    top: 50px;\n  }\n  100% {\n    background-color: yellow;\n    top: 0px;\n  }\n}\n```",
      "instructions": "Add a horizontal motion to the `div` animation. Using the `left` offset property, add to the `@keyframes` rule so rainbow starts at 0 pixels at `0%`, moves to 25 pixels at `50%`, and ends at -25 pixels at `100%`. Don't replace the `top` property in the editor - the animation should have both vertical and horizontal motion.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n    position: relative;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n      top: 0px;\n\n    }\n    50% {\n      background-color: green;\n      top: 50px;\n\n    }\n    100% {\n      background-color: yellow;\n      top: 0px;\n\n    }\n  }\n</style>\n\n<div id=\"rect\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n    position: relative;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n      top: 0px;\n      left: 0px;\n    }\n    50% {\n      background-color: green;\n      top: 50px;\n      left: 25px;\n    }\n    100% {\n      background-color: yellow;\n      top: 0px;\n      left: -25px;\n    }\n  }\n</style>\n<div id=\"rect\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `@keyframes` rule for `0%` should use the `left` offset of 0px.",
          "testCode": "assert.match(code,/[^50]0%\\s*?{[\\s\\S]*?left:\\s*?0px(;[\\s\\S]*?|\\s*?)}/gi);"
        },
        {
          "text": "The `@keyframes` rule for `50%` should use the `left` offset of 25px.",
          "testCode": "assert.match(code,/50%\\s*?{[\\s\\S]*?left:\\s*?25px(;[\\s\\S]*?|\\s*?)}/gi);"
        },
        {
          "text": "The `@keyframes` rule for `100%` should use the `left` offset of -25px.",
          "testCode": "assert.match(code,/100%\\s*?{[\\s\\S]*?left:\\s*?-25px(;[\\s\\S]*?|\\s*?)}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c7amZfW",
        "forumTopicId": 301051,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\create-movement-using-css-animation.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a5367417b2b2512ad8",
      "title": "Create Texture by Adding a Subtle Pattern as a Background Image",
      "challengeType": 0,
      "dashedName": "create-texture-by-adding-a-subtle-pattern-as-a-background-image",
      "description": "One way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don't want the background to stand out too much, and take away from the foreground. The `background` property supports the `url()` function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.",
      "instructions": "Using the url of `https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png`, set the `background` of the whole page with the `body` selector.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n\n  }\n</style>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background: url(\"https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png\");\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "Your `body` element should have a `background` property set to a `url()` with the given link.",
          "testCode": "assert.match(code,/background(-image)?:\\s*?url\\(\\s*(\"|'|)https:\\/\\/cdn-media-1\\.freecodecamp\\.org\\/imgr\\/MJAkxbh\\.png\\2\\s*\\)/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cQdwJC8",
        "forumTopicId": 301052,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\create-texture-by-adding-a-subtle-pattern-as-a-background-image.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d7791367417b2b2512ab3",
      "title": "Create Visual Balance Using the text-align Property",
      "challengeType": 0,
      "dashedName": "create-visual-balance-using-the-text-align-property",
      "description": "This section of the curriculum focuses on Applied Visual Design. The first group of challenges build on the given card layout to show a number of core principles.\n\nText is often a large part of web content. CSS has several options for how to align it with the `text-align` property.\n\n`text-align: justify;` spaces the text so that each line has equal width.\n\n`text-align: center;` centers the text\n\n`text-align: right;` right-aligns the text\n\nAnd `text-align: left;` (the default) left-aligns the text.",
      "instructions": "Align the `h4` tag's text, which says \"Google\", to the center. Then justify the paragraph tag which contains information about how Google was founded.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n\n  }\n  p {\n\n  }\n  .links {\n    margin-right: 20px;\n\n  }\n  .fullCard {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n\n  }\n  .fullCard {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the text-align property on the `h4` tag to set it to `center`.",
          "testCode": "const h4Element =document.querySelector('h4')\nconst h4Style = window.getComputedStyle(h4Element);\nassert.equal(h4Style?.textAlign, 'center');"
        },
        {
          "text": "Your code should use the text-align property on the `p` tag to set it to `justify`.",
          "testCode": "const pElement =document.querySelector('p')\nconst pStyle = window.getComputedStyle(pElement);\nassert.equal(pStyle?.textAlign, 'justify');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c3b4EAp",
        "forumTopicId": 301053,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\create-visual-balance-using-the-text-align-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a7367417b2b2512ae2",
      "title": "Create Visual Direction by Fading an Element from Left to Right",
      "challengeType": 0,
      "dashedName": "create-visual-direction-by-fading-an-element-from-left-to-right",
      "description": "For this challenge, you'll change the `opacity` of an animated element so it gradually fades as it reaches the right side of the screen.\n\nIn the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the `@keyframes` rule.",
      "instructions": "Target the element with the id of `ball` and add the `opacity` property set to 0.1 at `50%`, so the element fades as it moves to the right.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n\n  #ball {\n    width: 70px;\n    height: 70px;\n    margin: 50px auto;\n    position: fixed;\n    left: 20%;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: fade;\n    animation-duration: 3s;\n  }\n\n  @keyframes fade {\n    50% {\n      left: 60%;\n\n    }\n  }\n\n</style>\n\n<div id=\"ball\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #ball {\n    width: 70px;\n    height: 70px;\n    margin: 50px auto;\n    position: fixed;\n    left: 20%;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: fade;\n    animation-duration: 3s;\n  }\n\n  @keyframes fade {\n    50% {\n      left: 60%;\n      opacity: 0.1;\n    }\n  }\n</style>\n<div id=\"ball\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `keyframes` rule for fade should set the `opacity` property to 0.1 at 50%.",
          "testCode": "assert.match(code,/@keyframes fade\\s*?{\\s*?50%\\s*?{\\s*?(?:left:\\s*?60%;\\s*?opacity:\\s*?0?\\.1;|opacity:\\s*?0?\\.1;\\s*?left:\\s*?60%;)/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cGJqqAE",
        "forumTopicId": 301054,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\create-visual-direction-by-fading-an-element-from-left-to-right.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781c367417b2b2512abf",
      "title": "Decrease the Opacity of an Element",
      "challengeType": 0,
      "dashedName": "decrease-the-opacity-of-an-element",
      "description": "The `opacity` property in CSS is used to adjust the opacity, or conversely, the transparency for an item.\n\n<blockquote>A value of 1 is opaque, which isn't transparent at all.<br>A value of 0.5 is half see-through.<br>A value of 0 is completely transparent.</blockquote>\n\nThe value given will apply to the entire element, whether that's an image with some transparency, or the foreground and background colors for a block of text.",
      "instructions": "Set the `opacity` of the anchor tags to 0.7 using `links` class to select them.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should set the `opacity` property to 0.7 on the anchor tags by selecting the class of `links`.",
          "testCode": "assert.match(\n  document.querySelector(\"style:not(.fcc-hide-header)\")?.textContent,\n  /\\.links\\s*{([\\s\\S]*?;)*\\s*opacity\\s*:\\s*0*\\.70*\\s*(;[\\s\\S]*?|\\s*)}/\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c7aKqu4",
        "forumTopicId": 301055,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\decrease-the-opacity-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a3367417b2b2512ad1",
      "title": "Learn about Complementary Colors",
      "challengeType": 0,
      "dashedName": "learn-about-complementary-colors",
      "description": "Color theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, color can draw attention to content, evoke emotions, or create visual harmony. Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that works with your content.\n\nThe color wheel is a useful tool to visualize how colors relate to each other - it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they \"cancel\" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.\n\nSome examples of complementary colors with their hex codes are:\n\n<blockquote>red (#FF0000) and cyan (#00FFFF)<br>green (#00FF00) and magenta (#FF00FF)<br>blue (#0000FF) and yellow (#FFFF00)</blockquote>\n\nThis is different than the outdated RYB color model that many of us were taught in school, which has different primary and complementary colors. Modern color theory uses the additive RGB model (like on a computer screen) and the subtractive CMY(K) model (like in printing).\n\nThere are many color picking tools available online that have an option to find the complement of a color.\n\n**Note:** Using color can be a powerful way to add visual interest to a page. However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. This issue will be covered in more detail in the Applied Accessibility challenges.",
      "instructions": "Change the `background-color` property of the `blue` and `yellow` classes to their respective colors. Notice how the colors look different next to each other than they do compared against the white background.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  .blue {\n    background-color: #000000;\n  }\n  .yellow {\n    background-color: #000000;\n  }\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"blue\"></div>\n<div class=\"yellow\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  .blue {\n    background-color: blue;\n  }\n  .yellow {\n    background-color: yellow;\n  }\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"blue\"></div>\n<div class=\"yellow\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `div` element with class `blue` should have a `background-color` of blue.",
          "testCode": "const blueElement = document.querySelector('.blue');\nconst blueStyle = window.getComputedStyle(blueElement); \nassert.equal(blueStyle?.backgroundColor, 'rgb(0, 0, 255)');"
        },
        {
          "text": "The `div` element with class `yellow` should have a `background-color` of yellow.",
          "testCode": "const yellowElement = document.querySelector('.yellow');\nconst yellowStyle = window.getComputedStyle(yellowElement);\nassert.equal(yellowStyle?.backgroundColor, 'rgb(255, 255, 0)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c2MD3Tr",
        "forumTopicId": 301056,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\learn-about-complementary-colors.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a4367417b2b2512ad2",
      "title": "Learn about Tertiary Colors",
      "challengeType": 0,
      "dashedName": "learn-about-tertiary-colors",
      "description": "Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.\n\nTertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, within the RGB color model, red (primary) and yellow (secondary) make orange (tertiary). This adds six more colors to a simple color wheel for a total of twelve.\n\nThere are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.\n\nHere are three colors created using the split-complement scheme:\n\n<table><thead><tr><th>Color</th><th>Hex Code</th></tr></thead><thead></thead><tbody><tr><td>orange</td><td>#FF7F00</td></tr><tr><td>cyan</td><td>#00FFFF</td></tr><tr><td>raspberry</td><td>#FF007F</td></tr></tbody></table>",
      "instructions": "Change the `background-color` property of the `orange`, `cyan`, and `raspberry` classes to their respective colors. Make sure to use the hex codes and not the color names.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .orange {\n    background-color: #000000;\n  }\n\n  .cyan {\n    background-color: #000000;\n  }\n\n  .raspberry {\n    background-color: #000000;\n  }\n\n  div {\n    height: 100px;\n    width: 100px;\n    margin-bottom: 5px;\n  }\n</style>\n\n<div class=\"orange\"></div>\n<div class=\"cyan\"></div>\n<div class=\"raspberry\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .orange {\n    background-color: #FF7F00;\n  }\n\n  .cyan {\n    background-color: #00FFFF;\n  }\n\n  .raspberry {\n    background-color: #FF007F;\n  }\n\n  div {\n    height: 100px;\n    width: 100px;\n    margin-bottom: 5px;\n  }\n</style>\n<div class=\"orange\"></div>\n<div class=\"cyan\"></div>\n<div class=\"raspberry\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `div` element with class `orange` should have a `background-color` of orange.",
          "testCode": "const orangeElement = document.querySelector('.orange');\nconst orangeStyle = window.getComputedStyle(orangeElement);\nassert.equal(orangeStyle?.backgroundColor, 'rgb(255, 127, 0)');"
        },
        {
          "text": "The `div` element with class `cyan` should have a `background-color` of cyan.",
          "testCode": "const cyanElement = document.querySelector('.cyan');\nconst cyanStyle = window.getComputedStyle(cyanElement);\nassert.equal(cyanStyle?.backgroundColor, 'rgb(0, 255, 255)');"
        },
        {
          "text": "The `div` element with class `raspberry` should have a `background-color` of raspberry.",
          "testCode": "const raspberryElement = document.querySelector('.raspberry');\nconst raspberryStyle = window.getComputedStyle(raspberryElement);\nassert.equal(raspberryStyle?.backgroundColor, 'rgb(255, 0, 127)');"
        },
        {
          "text": "All `background-color` values for the color classes should be hex codes and not color names.",
          "testCode": "assert.notMatch(code, /background-color:\\s(orange|cyan|raspberry)/);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301057,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\learn-about-tertiary-colors.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a9367417b2b2512ae8",
      "title": "Learn How Bezier Curves Work",
      "challengeType": 0,
      "dashedName": "learn-how-bezier-curves-work",
      "description": "The last challenge introduced the `animation-timing-function` property and a few keywords that change the speed of an animation over its duration. CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.\n\nIn CSS animations, Bezier curves are used with the `cubic-bezier` function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation.\n\nThe `cubic-bezier` function consists of four main points that sit on this 1 by 1 grid: `p0`, `p1`, `p2`, and `p3`. `p0` and `p3` are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the `p1` and `p2` \"anchor\" points in the form: `(x1, y1, x2, y2)`. Pulling it all together, here's an example of a Bezier curve in CSS code:\n\n```css\nanimation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);\n```\n\nIn the example above, the x and y values are equivalent for each point (x1 = 0.25 = y1 and x2 = 0.75 = y2), which if you remember from geometry class, results in a line that extends from the origin to point (1, 1). This animation is a linear change of an element during the length of an animation, and is the same as using the `linear` keyword. In other words, it changes at a constant speed.",
      "instructions": "For the element with the id of `ball1`, change the value of the `animation-timing-function` property from `linear` to its equivalent `cubic-bezier` function value. Use the point values given in the example above.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n\n  .balls{\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left: 27%;\n    animation-timing-function: linear;\n  }\n  #ball2 {\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n\n</style>\n\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n\n  .balls{\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left: 27%;\n    animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);\n  }\n  #ball2 {\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The value of the `animation-timing-function` property for the element with the id `ball1` should be the linear-equivalent `cubic-bezier` function.",
          "testCode": "const ballOne = document.querySelector('#ball1');\nconst ballOneStyle = window.getComputedStyle(ballOne); \nassert.equal(\n  ballOneStyle?.animationTimingFunction,\n    'cubic-bezier(0.25, 0.25, 0.75, 0.75)'\n);"
        },
        {
          "text": "The value of the `animation-timing-function` property for the element with the id `ball2` should not change.",
          "testCode": "const ballTwoElement = document.querySelector('#ball2');\nconst ballTwoStyle = window.getComputedStyle(ballTwoElement); \nconst ball2Animation = __helpers.removeWhiteSpace(ballTwoStyle?.animationTimingFunction);\nassert.isTrue(\n  ball2Animation == 'ease-out' || ball2Animation == 'cubic-bezier(0,0,0.58,1)'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c9bDrs8",
        "forumTopicId": 301058,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\learn-how-bezier-curves-work.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a7367417b2b2512adf",
      "title": "Learn How the CSS @keyframes and animation Properties Work",
      "challengeType": 0,
      "dashedName": "learn-how-the-css-keyframes-and-animation-properties-work",
      "description": "To animate an element, you need to know about the animation properties and the `@keyframes` rule. The animation properties control how the animation should behave and the `@keyframes` rule controls what happens during that animation. There are eight animation properties in total. This challenge will keep it simple and cover the two most important ones first:\n\n`animation-name` sets the name of the animation, which is later used by `@keyframes` to tell CSS which rules go with which animations.\n\n`animation-duration` sets the length of time for the animation.\n\n`@keyframes` is how to specify exactly what happens within the animation over the duration. This is done by giving CSS properties for specific \"frames\" during the animation, with percentages ranging from 0% to 100%. If you compare this to a movie, the CSS properties for 0% is how the element displays in the opening scene. The CSS properties for 100% is how the element appears at the end, right before the credits roll. Then CSS applies the magic to transition the element over the given duration to act out the scene. Here's an example to illustrate the usage of `@keyframes` and the animation properties:\n\n```css\n#anim {\n  animation-name: colorful;\n  animation-duration: 3s;\n}\n\n@keyframes colorful {\n  0% {\n    background-color: blue;\n  }\n  100% {\n    background-color: yellow;\n  }\n}\n```\n\nFor the element with the `anim` id, the code snippet above sets the `animation-name` to `colorful` and sets the `animation-duration` to 3 seconds. Then the `@keyframes` rule links to the animation properties with the name `colorful`. It sets the color to blue at the beginning of the animation (0%) which will transition to yellow by the end of the animation (100%). You aren't limited to only beginning-end transitions, you can set properties for the element for any percentage between 0% and 100%.",
      "instructions": "Create an animation for the element with the id `rect`, by setting the `animation-name` to `rainbow` and the `animation-duration` to 4 seconds. Next, declare a `@keyframes` rule, and set the `background-color` at the beginning of the animation (`0%`) to blue, the middle of the animation (`50%`) to green, and the end of the animation (`100%`) to yellow.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n  }\n\n  #rect {\n\n\n  }\n\n\n\n\n</style>\n<div id=\"rect\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n    }\n    50% {\n      background-color: green;\n    }\n    100% {\n      background-color: yellow;\n    }\n  }\n</style>\n<div id=\"rect\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The element with id of `rect` should have an `animation-name` property with a value of `rainbow`.",
          "testCode": "const rectElement = document.querySelector('#rect');\nconst rectStyle = window.getComputedStyle(rectElement);\nassert.equal(rectStyle?.animationName, 'rainbow');"
        },
        {
          "text": "The element with id of `rect` should have an `animation-duration` property with a value of 4s.",
          "testCode": "const rectElement = document.querySelector('#rect');\nconst rectStyle = window.getComputedStyle(rectElement);\nassert.equal(rectStyle?.animationDuration, '4s');"
        },
        {
          "text": "The `@keyframes` rule should use the `animation-name` of `rainbow`.",
          "testCode": "assert.match(code ,/@keyframes\\s+?rainbow\\s*?{/g);"
        },
        {
          "text": "The `@keyframes` rule for `rainbow` should use a `background-color` of `blue` at 0%.",
          "testCode": "assert.match(code,/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?}/gi);"
        },
        {
          "text": "The `@keyframes` rule for `rainbow` should use a `background-color` of `green` at 50%.",
          "testCode": "assert.match(code,/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?}/gi);"
        },
        {
          "text": "The `@keyframes` rule for rainbow should use a `background-color` of `yellow` at 100%.",
          "testCode": "assert.match(code,/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cakprhv",
        "forumTopicId": 301059,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\learn-how-the-css-keyframes-and-animation-properties-work.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781e367417b2b2512acb",
      "title": "Lock an Element to its Parent with Absolute Positioning",
      "challengeType": 0,
      "dashedName": "lock-an-element-to-its-parent-with-absolute-positioning",
      "description": "The next option for the CSS `position` property is `absolute`, which locks the element in place relative to its parent container. Unlike the `relative` position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.\n\nOne nuance with absolute positioning is that it will be locked relative to its closest *positioned* ancestor. If you forget to add a position rule to the parent item, (this is typically done using `position: relative;`), the browser will keep looking up the chain and ultimately default to the `body` tag.",
      "instructions": "Lock the `#searchbar` element to the top-right of its `section` parent by declaring its `position` as `absolute`. Give it `top` and `right` offsets of 50 pixels each.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #searchbar {\n\n\n\n  }\n  section {\n    position: relative;\n  }\n</style>\n<body>\n  <h1>Welcome!</h1>\n  <section>\n    <form id=\"searchbar\">\n      <label for=\"search\">Search:</label>\n      <input type=\"search\" id=\"search\" name=\"search\">\n      <input type=\"submit\" name=\"submit\" value=\"Go!\">\n    </form>\n  </section>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #searchbar {\n    position: absolute;\n    top: 50px;\n    right: 50px;\n  }\n  section {\n    position: relative;\n  }\n</style>\n<body>\n  <h1>Welcome!</h1>\n  <section>\n    <form id=\"searchbar\">\n      <label for=\"search\">Search:</label>\n      <input type=\"search\" id=\"search\" name=\"search\">\n      <input type=\"submit\" name=\"submit\" value=\"Go!\">\n    </form>\n  </section>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "The `#searchbar` element should have a `position` set to `absolute`.",
          "testCode": "const searchbarElement = document.querySelector('#searchbar');\nconst searchbarStyle = window.getComputedStyle(searchbarElement);\nassert.equal(searchbarStyle?.position, 'absolute');"
        },
        {
          "text": "Your code should use the `top` CSS offset of 50 pixels on the `#searchbar` element.",
          "testCode": "const searchbarElement = document.querySelector('#searchbar');\nconst searchbarStyle = window.getComputedStyle(searchbarElement);\nassert.equal(searchbarStyle?.top, '50px');"
        },
        {
          "text": "Your code should use the `right` CSS offset of 50 pixels on the `#searchbar` element.",
          "testCode": "const searchbarElement = document.querySelector('#searchbar');\nconst searchbarStyle = window.getComputedStyle(searchbarElement);\nassert.equal(searchbarStyle?.right, '50px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cyLJ7c3",
        "forumTopicId": 301060,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\lock-an-element-to-its-parent-with-absolute-positioning.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781e367417b2b2512acc",
      "title": "Lock an Element to the Browser Window with Fixed Positioning",
      "challengeType": 0,
      "dashedName": "lock-an-element-to-the-browser-window-with-fixed-positioning",
      "description": "The next layout scheme that CSS offers is the `fixed` position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer \"realize\" where it is positioned, which may require some layout adjustments elsewhere.\n\nOne key difference between the `fixed` and `absolute` positions is that an element with a fixed position won't move when the user scrolls.",
      "instructions": "The navigation bar in the code is labeled with an id of `navbar`. Change its `position` to `fixed`, and offset it 0 pixels from the `top` and 0 pixels from the `left`. After you have added the code, scroll the preview window to see how the navigation stays in place.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    min-height: 150vh;\n  }\n  #navbar {\n\n\n\n    width: 100%;\n    background-color: #767676;\n  }\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n  a {\n    text-decoration: none;\n  }\n</style>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n    <nav id=\"navbar\">\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  <p>I shift up when the #navbar is fixed to the browser window.</p>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    min-height: 150vh;\n  }\n  #navbar {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    background-color: #767676;\n  }\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n  a {\n    text-decoration: none;\n  }\n</style>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n    <nav id=\"navbar\">\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  <p>I shift up when the #navbar is fixed to the browser window.</p>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "The `#navbar` element should have a `position` set to `fixed`.",
          "testCode": "const navbarElement = document.querySelector('#navbar');\nconst navbarStyle = window.getComputedStyle(navbarElement);\n assert.equal(navbarStyle?.position, 'fixed');"
        },
        {
          "text": "Your code should use the `top` CSS offset of 0 pixels on the `#navbar` element.",
          "testCode": "const navbarElement = document.querySelector('#navbar');\n const navbarStyle = window.getComputedStyle(navbarElement);\nassert.equal(navbarStyle?.top, '0px');"
        },
        {
          "text": "Your code should use the `left` CSS offset of 0 pixels on the `#navbar` element.",
          "testCode": "const navbarElement = document.querySelector('#navbar');\n const navbarStyle = window.getComputedStyle(navbarElement);\n assert.equal(navbarStyle?.left, '0px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c2MDNUR",
        "forumTopicId": 301061,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\lock-an-element-to-the-browser-window-with-fixed-positioning.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a8367417b2b2512ae4",
      "title": "Make a CSS Heartbeat using an Infinite Animation Count",
      "challengeType": 0,
      "dashedName": "make-a-css-heartbeat-using-an-infinite-animation-count",
      "description": "Here's one more continuous animation example with the `animation-iteration-count` property that uses the heart you designed in a previous challenge.\n\nThe one-second long heartbeat animation consists of two animated pieces. The `heart` elements (including the `:before` and `:after` pieces) are animated to change size using the `transform` property, and the background `div` is animated to change its color using the `background` property.",
      "instructions": "Keep the heart beating by adding the `animation-iteration-count` property for both the `back` class and the `heart` class and setting the value to `infinite`. The `heart:before` and `heart:after` selectors do not need any animation properties.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s;\n\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `animation-iteration-count` property for the `heart` class should have a value of `infinite`.",
          "testCode": "const heartElement = document.querySelector('.heart');\n const heartStyle = window.getComputedStyle(heartElement);\n assert.equal(heartStyle?.animationIterationCount, 'infinite');"
        },
        {
          "text": "The `animation-iteration-count` property for the `back` class should have a value of `infinite`.",
          "testCode": "const backElement = document.querySelector('.back');\n const backStyle = window.getComputedStyle(backElement);\n assert.equal(backStyle?.animationIterationCount, 'infinite');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cDZpDUr",
        "forumTopicId": 301062,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\make-a-css-heartbeat-using-an-infinite-animation-count.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a9367417b2b2512aea",
      "title": "Make Motion More Natural Using a Bezier Curve",
      "challengeType": 0,
      "dashedName": "make-motion-more-natural-using-a-bezier-curve",
      "description": "This challenge animates an element to replicate the movement of a ball being juggled. Prior challenges covered the `linear` and `ease-out` cubic Bezier curves, however neither depicts the juggling movement accurately. You need to customize a Bezier curve for this.\n\nThe `animation-timing-function` automatically loops at every keyframe when the `animation-iteration-count` is set to infinite. Since there is a keyframe rule set in the middle of the animation duration (at `50%`), it results in two identical animation progressions at the upward and downward movement of the ball.\n\nThe following cubic Bezier curve simulates a juggling movement:\n\n```css\ncubic-bezier(0.3, 0.4, 0.5, 1.6);\n```\n\nNotice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on a 1 by 1 coordinate system, and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing movement that is ideal for simulating the juggling ball.",
      "instructions": "Change value of the `animation-timing-function` of the element with the id of `green` to a `cubic-bezier` function with x1, y1, x2, y2 values set respectively to 0.311, 0.441, 0.444, 1.649.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .balls {\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    top: 60%;\n    animation-name: jump;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 25%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 50%;\n    animation-timing-function: ease-out;\n  }\n  #green {\n    background: green;\n    left: 75%;\n    animation-timing-function: cubic-bezier(0.69, 0.1, 1, 0.1);\n  }\n\n  @keyframes jump {\n    50% {\n      top: 10%;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"red\"></div>\n<div class=\"balls\" id=\"blue\"></div>\n<div class=\"balls\" id=\"green\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .balls {\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    top: 60%;\n    animation-name: jump;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 25%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 50%;\n    animation-timing-function: ease-out;\n  }\n  #green {\n    background: green;\n    left: 75%;\n    animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);\n  }\n\n  @keyframes jump {\n    50% {\n      top: 10%;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"red\"></div>\n<div class=\"balls\" id=\"blue\"></div>\n<div class=\"balls\" id=\"green\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The value of the `animation-timing-function` property for the element with the id `green` should be a `cubic-bezier` function with x1, y1, x2, y2 values as specified.",
          "testCode": "const greenElement = document.querySelector('#green');\n const greenStyle = window.getComputedStyle(greenElement);\nassert.equal(greenStyle?.animationTimingFunction, 'cubic-bezier(0.311, 0.441, 0.444, 1.649)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c7akWUv",
        "forumTopicId": 301063,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\make-motion-more-natural-using-a-bezier-curve.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "58a7a6ebf9a6318348e2d5aa",
      "title": "Modify Fill Mode of an Animation",
      "challengeType": 0,
      "dashedName": "modify-fill-mode-of-an-animation",
      "description": "That's great, but it doesn't work right yet. Notice how the animation resets after `500ms` has passed, causing the button to revert back to the original color. You want the button to stay highlighted.\n\nThis can be done by setting the `animation-fill-mode` property to `forwards`. The `animation-fill-mode` specifies the style applied to an element when the animation has finished. You can set it like so:\n\n```css\nanimation-fill-mode: forwards;\n```",
      "instructions": "Set the `animation-fill-mode` property of `button:hover` to `forwards` so the button stays highlighted when a user hovers over it.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n    animation-fill-mode: forwards;\n  }\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>"
        }
      ],
      "tests": [
        {
          "text": "`button:hover` should have a `animation-fill-mode` property with a value of `forwards`.",
          "testCode": "assert.match(code,/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-fill-mode\\s*?:\\s*?forwards\\s*?;[\\s\\S]*}/gi);\nassert.match(code,/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-name\\s*?:\\s*?background-color\\s*?;[\\s\\S]*}/gi);\nassert.match(code,/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-duration\\s*?:\\s*?500ms\\s*?;[\\s\\S]*}/gi );"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cVJDmcE",
        "forumTopicId": 301064,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\modify-fill-mode-of-an-animation.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781e367417b2b2512aca",
      "title": "Move a Relatively Positioned Element with CSS Offsets",
      "challengeType": 0,
      "dashedName": "move-a-relatively-positioned-element-with-css-offsets",
      "description": "The CSS offsets of `top` or `bottom`, and `left` or `right` tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the `top` offset moved the `h2` downwards. Likewise, using a `left` offset moves an item to the right.",
      "instructions": "Use CSS offsets to move the `h2` 15 pixels to the right and 10 pixels up.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<head>\n<style>\n  h2 {\n    position: relative;\n\n\n  }\n</style>\n</head>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<head>\n<style>\n  h2 {\n    position: relative;\n    left: 15px;\n    bottom: 10px;\n  }\n</style>\n</head>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your code should use a CSS offset to relatively position the `h2` 10px upwards. In other words, move it 10px away from the `bottom` of where it normally sits.",
          "testCode": "const h2Element =document.querySelector('h2')\nconst h2Style = window.getComputedStyle(h2Element);\nassert.equal(h2Style?.bottom, '10px');"
        },
        {
          "text": "Your code should use a CSS offset to relatively position the `h2` 15px towards the right. In other words, move it 15px away from the `left` of where it normally sits.",
          "testCode": "const h2Element =document.querySelector('h2')\nconst h2Style = window.getComputedStyle(h2Element);\nassert.equal(h2Style?.left , '15px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c9bQEA4",
        "forumTopicId": 301065,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\move-a-relatively-positioned-element-with-css-offsets.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a3367417b2b2512ace",
      "title": "Push Elements Left or Right with the float Property",
      "challengeType": 0,
      "dashedName": "push-elements-left-or-right-with-the-float-property",
      "description": "The next positioning tool does not actually use `position`, but sets the `float` property of an element. Floating elements are removed from the normal flow of a document and pushed to either the `left` or `right` of their containing parent element. It's commonly used with the `width` property to specify how much horizontal space the floated element requires.",
      "instructions": "The given markup would work well as a two-column layout, with the `section` and `aside` elements next to each other. Give the `#left` item a `float` of `left` and the `#right` item a `float` of `right`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n    #left {\n\n      width: 50%;\n    }\n    #right {\n\n      width: 40%;\n    }\n    aside, section {\n      padding: 2px;\n      background-color: #ccc;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n  </header>\n  <section id=\"left\">\n    <h2>Content</h2>\n    <p>Good stuff</p>\n  </section>\n  <aside id=\"right\">\n    <h2>Sidebar</h2>\n    <p>Links</p>\n  </aside>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<head>\n  <style>\n    #left {\n      float: left;\n      width: 50%;\n    }\n    #right {\n      float: right;\n      width: 40%;\n    }\n    aside, section {\n      padding: 2px;\n      background-color: #ccc;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n  </header>\n  <section id=\"left\">\n    <h2>Content</h2>\n    <p>Good stuff</p>\n  </section>\n  <aside id=\"right\">\n    <h2>Sidebar</h2>\n    <p>Links</p>\n  </aside>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "The element with id `left` should have a `float` value of `left`.",
          "testCode": "const leftElement = document.querySelector('#left');\nconst leftStyle = window.getComputedStyle(leftElement);\nassert.equal(leftStyle?.float, 'left');"
        },
        {
          "text": "The element with id `right` should have a `float` value of `right`.",
          "testCode": "const rightElement = document.querySelector('#right');\nconst rightStyle = window.getComputedStyle(rightElement);\nassert.equal(rightStyle?.float, 'right');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c2MDqu2",
        "forumTopicId": 301066,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\push-elements-left-or-right-with-the-float-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781c367417b2b2512ac2",
      "title": "Set the font-size for Multiple Heading Elements",
      "challengeType": 0,
      "dashedName": "set-the-font-size-for-multiple-heading-elements",
      "description": "The `font-size` property is used to specify how large the text is in a given element. This rule can be used for multiple elements to create visual consistency of text on a page. In this challenge, you'll set the values for all `h1` through `h6` tags to balance the heading sizes.",
      "instructions": "In the `style` tags, set the `font-size` of the:\n\n- `h1` tag to 68px.\n- `h2` tag to 52px.\n- `h3` tag to 40px.\n- `h4` tag to 32px.\n- `h5` tag to 21px.\n- `h6` tag to 14px.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n\n\n\n\n\n\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h1 {\n    font-size: 68px;\n  }\n  h2 {\n    font-size: 52px;\n  }\n  h3 {\n    font-size: 40px;\n  }\n  h4 {\n    font-size: 32px;\n  }\n  h5 {\n    font-size: 21px;\n  }\n  h6 {\n    font-size: 14px;\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>"
        }
      ],
      "tests": [
        {
          "text": "Your code should set the `font-size` property for the `h1` tag to 68 pixels.",
          "testCode": "const fontSizeOfh1 = new __helpers.CSSHelp(document).getStyle('h1')?.getPropertyValue('font-size');\n assert.equal(fontSizeOfh1 ,'68px');"
        },
        {
          "text": "Your code should set the `font-size` property for the `h2` tag to 52 pixels.",
          "testCode": "const fontSizeOfh2 = new __helpers.CSSHelp(document).getStyle('h2')?.getPropertyValue('font-size');\n assert.equal(fontSizeOfh2 ,'52px');"
        },
        {
          "text": "Your code should set the `font-size` property for the `h3` tag to 40 pixels.",
          "testCode": "const fontSizeOfh3 = new __helpers.CSSHelp(document).getStyle('h3')?.getPropertyValue('font-size');\n assert.equal(fontSizeOfh3 ,'40px');"
        },
        {
          "text": "Your code should set the `font-size` property for the `h4` tag to 32 pixels.",
          "testCode": "const fontSizeOfh4 = new __helpers.CSSHelp(document).getStyle('h4')?.getPropertyValue('font-size');\n assert.equal(fontSizeOfh4 , '32px');"
        },
        {
          "text": "Your code should set the `font-size` property for the `h5` tag to 21 pixels.",
          "testCode": "const fontSizeOfh5 = new __helpers.CSSHelp(document).getStyle('h5')?.getPropertyValue('font-size');\n assert.equal(fontSizeOfh5 ,'21px');"
        },
        {
          "text": "Your code should set the `font-size` property for the `h6` tag to 14 pixels.",
          "testCode": "const fontSizeOfh6 = new __helpers.CSSHelp(document).getStyle('h6')?.getPropertyValue('font-size');\n assert.equal(fontSizeOfh6 , '14px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cPpQNT3",
        "forumTopicId": 301067,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\set-the-font-size-for-multiple-heading-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781c367417b2b2512ac4",
      "title": "Set the font-size of Paragraph Text",
      "challengeType": 0,
      "dashedName": "set-the-font-size-of-paragraph-text",
      "description": "The `font-size` property in CSS is not limited to headings, it can be applied to any element containing text.",
      "instructions": "Change the value of the `font-size` property for the paragraph to 16px to make it more visible.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  p {\n    font-size: 10px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  p {\n    font-size: 16px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>"
        }
      ],
      "tests": [
        {
          "text": "Your `p` tag should have a `font-size` of 16 pixels.",
          "testCode": "const pElement =document.querySelector('p')\nconst pStyle = window.getComputedStyle(pElement);\nassert.equal(pStyle?.fontSize, '16px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cVJ36Cr",
        "forumTopicId": 301068,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\set-the-font-size-of-paragraph-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781c367417b2b2512ac3",
      "title": "Set the font-weight for Multiple Heading Elements",
      "challengeType": 0,
      "dashedName": "set-the-font-weight-for-multiple-heading-elements",
      "description": "You set the `font-size` of each heading tag in the last challenge, here you'll adjust the `font-weight`.\n\nThe `font-weight` property sets how thick or thin characters are in a section of text.",
      "instructions": "<ul><li>Set the <code>font-weight</code> of the <code>h1</code> tag to 800.</li><li>Set the <code>font-weight</code> of the <code>h2</code> tag to 600.</li><li>Set the <code>font-weight</code> of the <code>h3</code> tag to 500.</li><li>Set the <code>font-weight</code> of the <code>h4</code> tag to 400.</li><li>Set the <code>font-weight</code> of the <code>h5</code> tag to 300.</li><li>Set the <code>font-weight</code> of the <code>h6</code> tag to 200.</li></ul>",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h1 {\n    font-size: 68px;\n\n  }\n  h2 {\n    font-size: 52px;\n\n  }\n  h3 {\n    font-size: 40px;\n\n  }\n  h4 {\n    font-size: 32px;\n\n  }\n  h5 {\n    font-size: 21px;\n\n  }\n  h6 {\n    font-size: 14px;\n\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h1 {\n    font-size: 68px;\n    font-weight: 800;\n  }\n  h2 {\n    font-size: 52px;\n    font-weight: 600;\n  }\n  h3 {\n    font-size: 40px;\n    font-weight: 500;\n  }\n  h4 {\n    font-size: 32px;\n    font-weight: 400;\n  }\n  h5 {\n    font-size: 21px;\n    font-weight: 300;\n  }\n  h6 {\n    font-size: 14px;\n    font-weight: 200;\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>"
        }
      ],
      "tests": [
        {
          "text": "Your code should set the `font-weight` property for the `h1` tag to 800.",
          "testCode": "const h1Element =document.querySelector('h1')\nconst h1Style = window.getComputedStyle(h1Element);\nassert.equal(h1Style?.fontWeight, '800');"
        },
        {
          "text": "Your code should set the `font-weight` property for the `h2` tag to 600.",
          "testCode": "const h2Element =document.querySelector('h2')\nconst h2Style = window.getComputedStyle(h2Element);\nassert.equal(h2Style?.fontWeight, '600');"
        },
        {
          "text": "Your code should set the `font-weight` property for the `h3` tag to 500.",
          "testCode": "const h3Element =document.querySelector('h3')\nconst h3Style = window.getComputedStyle(h3Element);\nassert.equal(h3Style?.fontWeight, '500');"
        },
        {
          "text": "Your code should set the `font-weight` property for the `h4` tag to 400.",
          "testCode": "const h4Element =document.querySelector('h4')\nconst h4Style = window.getComputedStyle(h4Element);\nassert.equal(h4Style?.fontWeight, '400');"
        },
        {
          "text": "Your code should set the `font-weight` property for the `h5` tag to 300.",
          "testCode": "const h5Element =document.querySelector('h5')\nconst h5Style = window.getComputedStyle(h5Element);\nassert.equal(h5Style?.fontWeight, '300');"
        },
        {
          "text": "Your code should set the `font-weight` property for the `h6` tag to 200.",
          "testCode": "const h6Element =document.querySelector('h6')\nconst h6Style = window.getComputedStyle(h6Element);\nassert.equal(h6Style?.fontWeight, '200');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/crVWRHq",
        "forumTopicId": 301069,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\set-the-font-weight-for-multiple-heading-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781d367417b2b2512ac5",
      "title": "Set the line-height of Paragraphs",
      "challengeType": 0,
      "dashedName": "set-the-line-height-of-paragraphs",
      "description": "CSS offers the `line-height` property to change the height of each line in a block of text. As the name suggests, it changes the amount of vertical space that each line of text gets.",
      "instructions": "Add a `line-height` property to the `p` tag and set it to 25px.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  p {\n    font-size: 16px;\n\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  p {\n    font-size: 16px;\n    line-height: 25px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>"
        }
      ],
      "tests": [
        {
          "text": "Your code should set the `line-height` of the `p` tag to 25 pixels.",
          "testCode": "const pElement =document.querySelector('p')\nconst pStyle = window.getComputedStyle(pElement);\nassert.equal(pStyle?.lineHeight, '25px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/crVWdcv",
        "forumTopicId": 301070,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\set-the-line-height-of-paragraphs.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a9367417b2b2512ae9",
      "title": "Use a Bezier Curve to Move a Graphic",
      "challengeType": 0,
      "dashedName": "use-a-bezier-curve-to-move-a-graphic",
      "description": "A previous challenge discussed the `ease-out` keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the `ease-out` keyword (for the blue element) and `linear` keyword (for the red element) is demonstrated. Similar animation progressions to the `ease-out` keyword can be achieved by using a custom cubic Bezier curve function.\n\nIn general, changing the `p1` and `p2` anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here's an example of a Bezier curve using values to mimic the `ease-out` style:\n\n```css\nanimation-timing-function: cubic-bezier(0, 0, 0.58, 1);\n```\n\nRemember that all `cubic-bezier` functions start with `p0` at (0, 0) and end with `p3` at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to `p1` y value of 0, then goes to `p2` y value of 1) than it moves through the X-axis (0 to start, then 0 for `p1`, up to 0.58 for `p2`). As a result, the change in the animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.",
      "instructions": "To see the effect of this Bezier curve in action, change the `animation-timing-function` of the element with id of `red` to a `cubic-bezier` function with x1, y1, x2, y2 set respectively to `0, 0, 0.58, 1` as the values. This will make both elements progress through the animation similarly.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .balls{\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 27%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id= \"red\"></div>\n<div class=\"balls\" id= \"blue\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .balls{\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 27%;\n    animation-timing-function: cubic-bezier(0, 0, 0.58, 1);\n  }\n  #blue {\n    background: blue;\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id= \"red\"></div>\n<div class=\"balls\" id= \"blue\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The value of the `animation-timing-function` property of the element with the id `red` should be a `cubic-bezier` function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1 .",
          "testCode": "const redElement = document.querySelector('#red');\nconst redStyle = window.getComputedStyle(redElement);\nassert.equal(\n  redStyle?.animationTimingFunction, 'cubic-bezier(0, 0, 0.58, 1)'\n);"
        },
        {
          "text": "The element with the id `red` should no longer have the `animation-timing-function` property of `linear`.",
          "testCode": "const redElement = document.querySelector('#red');\nconst redStyle = window.getComputedStyle(redElement);\nassert.notEqual(redStyle?.animationTimingFunction, 'linear');"
        },
        {
          "text": "The value of the `animation-timing-function` property for the element with the id `blue` should not change.",
          "testCode": "const blueElement = document.querySelector('#blue');\nconst blueStyle = window.getComputedStyle( blueElement);\nconst blueBallAnimation = __helpers.removeWhiteSpace(\n  blueStyle?.animationTimingFunction\n);\nassert.isTrue(\n  blueBallAnimation == 'ease-out' ||\n    blueBallAnimation == 'cubic-bezier(0,0,0.58,1)'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c6bnRCK",
        "forumTopicId": 301071,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-a-bezier-curve-to-move-a-graphic.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a5367417b2b2512ad7",
      "title": "Use a CSS Linear Gradient to Create a Striped Element",
      "challengeType": 0,
      "dashedName": "use-a-css-linear-gradient-to-create-a-striped-element",
      "description": "The `repeating-linear-gradient()` function is very similar to `linear-gradient()` with the major difference that it repeats the specified gradient pattern. `repeating-linear-gradient()` accepts a variety of values, but for simplicity, you'll work with an angle value and color stop values in this challenge.\n\nThe angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels.\n\nIn the example demonstrated in the code editor, the gradient starts with the color `yellow` at 0 pixels which blends into the second color `blue` at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color `green`, which itself blends into the fourth color value `red` as that is 80 pixels away from the beginning of the gradient.\n\nFor this example, it helps to think about the color stops as pairs where every two colors blend together.\n\n```css\n0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px\n```\n\nIf every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.",
      "instructions": "Make stripes by changing the `repeating-linear-gradient()` to use a gradient angle of `45deg`, then set the first two color stops to `yellow`, and finally the second two color stops to `black`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n\n  div{\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin:  50 auto;\n    background: repeating-linear-gradient(\n      90deg,\n      yellow 0px,\n      blue 40px,\n      green 40px,\n      red 80px\n    );\n  }\n\n</style>\n\n<div></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div{\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin:  50 auto;\n    background: repeating-linear-gradient(\n      45deg,\n      yellow 0px,\n      yellow 40px,\n      black 40px,\n      black 80px\n    );\n  }\n</style>\n<div></div>"
        }
      ],
      "tests": [
        {
          "text": "The angle of the `repeating-linear-gradient()` should be 45deg.",
          "testCode": "assert.match(code,/background:\\s*?repeating-linear-gradient\\(\\s*?45deg/gi);"
        },
        {
          "text": "The angle of the `repeating-linear-gradient()` should no longer be 90deg",
          "testCode": "assert.notMatch(code, /90deg/gi);"
        },
        {
          "text": "The color stop at 0 pixels should be `yellow`.",
          "testCode": "assert.match(code, /yellow\\s+?0(px)?/gi);"
        },
        {
          "text": "The first color stop at 40 pixels should be `yellow`.",
          "testCode": "assert.match(code, /yellow\\s+?40px/gi);"
        },
        {
          "text": "The second color stop at 40 pixels should be `black`.",
          "testCode": "assert.match(code, /yellow\\s+?40px,\\s*?black\\s+?40px/gi);"
        },
        {
          "text": "The last color stop at 80 pixels should be `black`.",
          "testCode": "assert.match(code, /black\\s+?80px/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c6bmQh2",
        "forumTopicId": 301072,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-a-css-linear-gradient-to-create-a-striped-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a7367417b2b2512ae0",
      "title": "Use CSS Animation to Change the Hover State of a Button",
      "challengeType": 0,
      "dashedName": "use-css-animation-to-change-the-hover-state-of-a-button",
      "description": "You can use CSS `@keyframes` to change the color of a button in its hover state.\n\nHere's an example of changing the width of an image on hover:\n\n```html\n<style>\n  img {\n    width: 30px;\n  }\n  img:hover {\n    animation-name: width;\n    animation-duration: 500ms;\n  }\n\n  @keyframes width {\n    100% {\n      width: 40px;\n    }\n  }\n</style>\n\n<img src=\"https://cdn.freecodecamp.org/curriculum/applied-visual-design/google-logo.png\" alt=\"Google's Logo\" />\n```",
      "instructions": "Note that `ms` stands for milliseconds, where 1000ms is equal to 1s.\n\nUse CSS `@keyframes` to change the `background-color` of the `button` element so it becomes `#4791d0` when a user hovers over it. The `@keyframes` rule should only have an entry for `100%`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n  }\n\n\n</style>\n\n<button>Register</button>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n  }\n\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>"
        }
      ],
      "tests": [
        {
          "text": "The @keyframes rule should use the `animation-name` background-color.",
          "testCode": "assert.match(code, /@keyframes\\s+?background-color\\s*?{/g);"
        },
        {
          "text": "There should be one rule under `@keyframes` that changes the `background-color` to `#4791d0` at 100%.",
          "testCode": "assert.match(code, /100%\\s*?{\\s*?background-color:\\s*?#4791d0;\\s*?}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cg4vZAa",
        "forumTopicId": 301073,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-css-animation-to-change-the-hover-state-of-a-button.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a6367417b2b2512adb",
      "title": "Use the CSS Transform Property skewX to Skew an Element Along the X-Axis",
      "challengeType": 0,
      "dashedName": "use-the-css-transform-property-skewx-to-skew-an-element-along-the-x-axis",
      "description": "The next function of the `transform` property is `skewX()`, which skews the selected element along its X (horizontal) axis by a given degree.\n\nThe following code skews the paragraph element by -32 degrees along the X-axis.\n\n```css\np {\n  transform: skewX(-32deg);\n}\n```",
      "instructions": "Skew the element with the id of `bottom` by 24 degrees along the X-axis by using the `transform` property.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n  }\n  #top {\n    background-color: red;\n  }\n  #bottom {\n    background-color: blue;\n\n  }\n</style>\n\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n  }\n  #top {\n    background-color: red;\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The element with id `bottom` should be skewed by 24 degrees along its X-axis.",
          "testCode": "assert.match(code, /#bottom\\s*?{\\s*?.*?\\s*?transform:\\s*?skewX\\(24deg\\);/g);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cyLP8Sr",
        "forumTopicId": 301074,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-css-transform-property-skewx-to-skew-an-element-along-the-x-axis.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a6367417b2b2512adc",
      "title": "Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis",
      "challengeType": 0,
      "dashedName": "use-the-css-transform-property-skewy-to-skew-an-element-along-the-y-axis",
      "description": "Given that the `skewX()` function skews the selected element along the X-axis by a given degree, it is no surprise that the `skewY()` property skews an element along the Y (vertical) axis.",
      "instructions": "Skew the element with the id of `top` -10 degrees along the Y-axis by using the `transform` property.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin: 50px auto;\n  }\n  #top {\n    background-color: red;\n\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin: 50px auto;\n  }\n  #top {\n    background-color: red;\n    transform: skewY(-10deg);\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The element with id `top` should be skewed by -10 degrees along its Y-axis.",
          "testCode": "assert.match(code, /#top\\s*?{\\s*?.*?\\s*?transform:\\s*?skewY\\(-10deg\\);/g);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c2MZ2uB",
        "forumTopicId": 301075,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-css-transform-property-skewy-to-skew-an-element-along-the-y-axis.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a5367417b2b2512ad9",
      "title": "Use the CSS Transform scale Property to Change the Size of an Element",
      "challengeType": 0,
      "dashedName": "use-the-css-transform-scale-property-to-change-the-size-of-an-element",
      "description": "To change the scale of an element, CSS has the `transform` property, along with its `scale()` function. The following code example doubles the size of all the paragraph elements on the page:\n\n```css\np {\n  transform: scale(2);\n}\n```",
      "instructions": "Increase the size of the element with the id of `ball2` to 1.5 times its original size.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .ball {\n    width: 40px;\n    height: 40px;\n    margin: 50 auto;\n    position: fixed;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    border-radius: 50%;\n  }\n  #ball1 {\n    left: 20%;\n  }\n  #ball2 {\n    left: 65%;\n\n  }\n\n\n</style>\n\n<div class=\"ball\" id= \"ball1\"></div>\n<div class=\"ball\" id= \"ball2\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .ball {\n    width: 40px;\n    height: 40px;\n    margin: 50 auto;\n    position: fixed;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    border-radius: 50%;\n  }\n  #ball1 {\n    left: 20%;\n  }\n  #ball2 {\n    left: 65%;\n    transform: scale(1.5);\n  }\n</style>\n<div class=\"ball\" id= \"ball1\"></div>\n<div class=\"ball\" id= \"ball2\"></div>"
        }
      ],
      "tests": [
        {
          "text": "The `transform` property for `#ball2` should be set to scale it to 1.5 times its size.",
          "testCode": "assert.match(code,\n    /#ball2\\s*?{\\s*?left:\\s*?65%;\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?}|#ball2\\s*?{\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?left:\\s*?65%;\\s*?}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c2MZVSg",
        "forumTopicId": 301076,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-css-transform-scale-property-to-change-the-size-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d78a5367417b2b2512ada",
      "title": "Use the CSS Transform scale Property to Scale an Element on Hover",
      "challengeType": 0,
      "dashedName": "use-the-css-transform-scale-property-to-scale-an-element-on-hover",
      "description": "The `transform` property has a variety of functions that let you scale, move, rotate, skew, etc., your elements. When used with pseudo-classes such as `:hover` that specify a certain state of an element, the `transform` property can easily add interactivity to your elements.\n\nHere's an example to scale the paragraph elements to 2.1 times their original size when a user hovers over them:\n\n```css\np:hover {\n  transform: scale(2.1);\n}\n```\n\n**Note:** Applying a transform to a `div` element will also affect any child elements contained in the div.",
      "instructions": "Add a CSS rule for the `hover` state of the `div` and use the `transform` property to scale the `div` element to 1.1 times its original size when a user hovers over it.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n    background: linear-gradient(\n      53deg,\n      #ccfffc,\n      #ffcccf\n    );\n  }\n\n\n\n</style>\n\n<div></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n    background: linear-gradient(\n      53deg,\n      #ccfffc,\n      #ffcccf\n    );\n  }\n  div:hover {\n    transform: scale(1.1);\n  }\n</style>\n<div></div>"
        }
      ],
      "tests": [
        {
          "text": "The size of the `div` element should scale 1.1 times when the user hovers over it.",
          "testCode": "assert.match(code, /div:hover\\s*?{\\s*?transform:\\s*?scale\\(1\\.1\\);/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cyLPJuM",
        "forumTopicId": 301077,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-css-transform-scale-property-to-scale-an-element-on-hover.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781a367417b2b2512ab9",
      "title": "Use the em Tag to Italicize Text",
      "challengeType": 0,
      "dashedName": "use-the-em-tag-to-italicize-text",
      "description": "To emphasize text, you can use the `em` tag. This displays text as italicized, as the browser applies the CSS of `font-style: italic;` to the element.",
      "instructions": "Wrap an `em` tag around the contents of the paragraph tag to give it emphasis.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add an `em` tag to the markup.",
          "testCode": "assert.lengthOf(document.querySelectorAll('em'),1);"
        },
        {
          "text": "The `em` tag should wrap around the contents of the `p` tag but not the `p` tag itself.",
          "testCode": "const paragraphElement = document.querySelector('p');\nconst emElement = document.querySelector('em');\nassert.lengthOf(paragraphElement?.children, 1);\nassert.lengthOf(emElement?.children, 2);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cVJRBtp",
        "forumTopicId": 301078,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-em-tag-to-italicize-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781b367417b2b2512aba",
      "title": "Use the s Tag to Strikethrough Text",
      "challengeType": 0,
      "dashedName": "use-the-s-tag-to-strikethrough-text",
      "description": "To strikethrough text, which is when a horizontal line cuts across the characters, you can use the `s` tag. It shows that a section of text is no longer valid. With the `s` tag, the browser applies the CSS of `text-decoration: line-through;` to the element.",
      "instructions": "Wrap the `s` tag around `Google` inside the `h4` tag and then add the word `Alphabet` beside it without the strikethrough formatting.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s> Alphabet</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add one `s` tag to the markup.",
          "testCode": "assert.lengthOf(document.querySelectorAll('s'),1);"
        },
        {
          "text": "A `s` tag should wrap around the `Google` text in the `h4` tag. It should not contain the word `Alphabet`.",
          "testCode": "assert.match(document.querySelector('h4 > s')?.textContent, /Google/gi);\nassert.notMatch(document.querySelector('h4 > s')?.textContent, /Alphabet/gi);"
        },
        {
          "text": "You should include the word `Alphabet` in the `h4` tag, without strikethrough formatting.",
          "testCode": "assert.match(document.querySelector('h4')?.innerHTML, /Alphabet/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301079,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-s-tag-to-strikethrough-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781a367417b2b2512ab7",
      "title": "Use the strong Tag to Make Text Bold",
      "challengeType": 0,
      "dashedName": "use-the-strong-tag-to-make-text-bold",
      "description": "To make text bold, you can use the `strong` tag. This is often used to draw attention to text and symbolize that it is important. With the `strong` tag, the browser applies the CSS of `font-weight: bold;` to the element.",
      "instructions": "Wrap a `strong` tag around the text `Stanford University` inside the `p` tag (do not include the period).",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add one `strong` tag to the markup.",
          "testCode": "assert.lengthOf(document.querySelectorAll('strong'),1);"
        },
        {
          "text": "The `strong` tag should be inside the `p` tag.",
          "testCode": "const paragraphElement = document.querySelector('p');\nconst paragraphChildren = paragraphElement?.querySelectorAll(`:scope ${'strong'}`);\nassert.lengthOf(paragraphChildren, 1);"
        },
        {
          "text": "The `strong` tag should wrap around the words `Stanford University`.",
          "testCode": "assert.match(document.querySelector('strong')?.textContent, /^Stanford University\\.?$/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/ceJNBSb",
        "forumTopicId": 301080,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-strong-tag-to-make-text-bold.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781c367417b2b2512ac0",
      "title": "Use the text-transform Property to Make Text Uppercase",
      "challengeType": 0,
      "dashedName": "use-the-text-transform-property-to-make-text-uppercase",
      "description": "The `text-transform` property in CSS is used to change the appearance of text. It's a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements.\n\nThe following table shows how the different `text-transform`values change the example text \"Transform me\".\n\n<table><thead><tr><th>Value</th><th>Result</th></tr></thead><tbody><tr><td><code>lowercase</code></td><td>\"transform me\"</td></tr><tr><td><code>uppercase</code></td><td>\"TRANSFORM ME\"</td></tr><tr><td><code>capitalize</code></td><td>\"Transform Me\"</td></tr><tr><td><code>initial</code></td><td>Use the default value</td></tr><tr><td><code>inherit</code></td><td>Use the <code>text-transform</code> value from the parent element</td></tr><tr><td><code>none</code></td><td><strong>Default:</strong> Use the original text</td></tr></tbody></table>",
      "instructions": "Transform the text of the `h4` to be uppercase using the `text-transform` property.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n    text-transform: uppercase;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `h4` text should be `uppercase`.",
          "testCode": "const h4Element =document.querySelector('h4')\nconst h4Style = window.getComputedStyle(h4Element);\nassert.equal(h4Style?.textTransform, 'uppercase');"
        },
        {
          "text": "The original text of the h4 should not be changed.",
          "testCode": "assert.notEqual(document.querySelector('h4')?.textContent, document.querySelector('h4')?.textContent?.toUpperCase());"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cvVZQSP",
        "forumTopicId": 301081,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-text-transform-property-to-make-text-uppercase.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "587d781a367417b2b2512ab8",
      "title": "Use the u Tag to Underline Text",
      "challengeType": 0,
      "dashedName": "use-the-u-tag-to-underline-text",
      "description": "To underline text, you can use the `u` tag. This is often used to signify that a section of text is important, or something to remember. With the `u` tag, the browser applies the CSS of `text-decoration: underline;` to the element.",
      "instructions": "Wrap the `u` tag only around the text `Ph.D. students`.\n\n**Note:** Try to avoid using the `u` tag when it could be confused for a link. Anchor tags also have a default underlined formatting.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should add a `u` tag to the markup.",
          "testCode": "assert.lengthOf(document.querySelectorAll('u'), 1);"
        },
        {
          "text": "The `u` tag should wrap around the text `Ph.D. students`.",
          "testCode": "assert.equal(document.querySelector('u')?.textContent , 'Ph.D. students');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cN6aQCL",
        "forumTopicId": 301082,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\applied-visual-design\\use-the-u-tag-to-underline-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "applied-visual-design",
        "name": "Applied Visual Design"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08823",
      "title": "Add a Negative Margin to an Element",
      "challengeType": 0,
      "dashedName": "add-a-negative-margin-to-an-element",
      "description": "An element's `margin` controls the amount of space between an element's `border` and surrounding elements.\n\nIf you set an element's `margin` to a negative value, the element will grow larger.",
      "instructions": "Try to set the `margin` to a negative value like the one for the red box.\n\nChange the `margin` of the blue box to `-15px`, so it fills the entire horizontal width of the yellow box around it.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: -15px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n</style>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: -15px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n    margin-top: -15px;\n  }\n</style>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `blue-box` class should give elements `-15px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginTop = window.getComputedStyle(blueBox)[\"margin-top\"]; \nassert.strictEqual(marginTop, \"-15px\");"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cnpyGs3",
        "forumTopicId": 16166,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\add-a-negative-margin-to-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9bedf08813",
      "title": "Add Borders Around Your Elements",
      "challengeType": 0,
      "dashedName": "add-borders-around-your-elements",
      "description": "CSS borders have properties like `style`, `color` and `width`.\n\nFor example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class:\n\n```html\n<style>\n  .thin-red-border {\n    border-color: red;\n    border-width: 5px;\n    border-style: solid;\n  }\n</style>\n```",
      "instructions": "Create a class called `thick-green-border`. This class should add a 10px, solid, green border around an HTML element. Apply the class to your cat photo.\n\nRemember that you can apply multiple classes to an element using its `class` attribute, by separating each class name with a space. For example:\n\n```html\n<img class=\"class1 class2\">\n```",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .thick-green-border {\n    border-width: 10px;\n    border-color: green;\n    border-style: solid;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `img` element should have the class `smaller-image`.",
          "testCode": "assert.isTrue(document.querySelector('img').classList.contains('smaller-image'));"
        },
        {
          "text": "Your `img` element should have the class `thick-green-border`.",
          "testCode": "assert.isTrue(document.querySelector('img').classList.contains('thick-green-border'));"
        },
        {
          "text": "Your image should have a border width of `10px`.",
          "testCode": "// Note: to any future maintainers, the read width of the border is dependent on \n// the zoom. For example we cannot match 10px exactly because if a campers set the zoom to 110% \n// it will be read as 9~px. \nconst image = document.querySelector('img'); \nconst imageBorderTopWidth = window.getComputedStyle(image)[\"border-top-width\"]; \nconst widthNumber = parseInt(imageBorderTopWidth);\nassert.isAtLeast(widthNumber, 8);\nassert.isAtMost(widthNumber, 12);"
        },
        {
          "text": "Your image should have a border style of `solid`.",
          "testCode": "const image = document.querySelector('img'); \nconst borderRightStyle = window.getComputedStyle(image)[\"border-right-style\"]; \nassert.strictEqual(borderRightStyle, 'solid');"
        },
        {
          "text": "The border around your `img` element should be green.",
          "testCode": "const image = document.querySelector('img'); \nconst borderLeftColor = window.getComputedStyle(image)[\"border-left-color\"]; \nassert.strictEqual(borderLeftColor, 'rgb(0, 128, 0)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c2MvnHZ",
        "forumTopicId": 16630,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\add-borders-around-your-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1248bd9aedf08824",
      "title": "Add Different Margins to Each Side of an Element",
      "challengeType": 0,
      "dashedName": "add-different-margins-to-each-side-of-an-element",
      "description": "Sometimes you will want to customize an element so that it has a different `margin` on each of its sides.\n\nCSS allows you to control the `margin` of all four individual sides of an element with the `margin-top`, `margin-right`, `margin-bottom`, and `margin-left` properties.",
      "instructions": "Give the blue box a `margin` of `40px` on its top and left side, but only `20px` on its bottom and right side.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `blue-box` class should give the top of elements `40px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginTop = window.getComputedStyle(blueBox)['margin-top'];\nassert.strictEqual(marginTop, '40px');"
        },
        {
          "text": "Your `blue-box` class should give the right of elements `20px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginRight = window.getComputedStyle(blueBox)['margin-right'];\nassert.strictEqual(marginRight, '20px');"
        },
        {
          "text": "Your `blue-box` class should give the bottom of elements `20px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginBottom = window.getComputedStyle(blueBox)['margin-bottom'];\nassert.strictEqual(marginBottom, '20px');"
        },
        {
          "text": "Your `blue-box` class should give the left of elements `40px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginLeft = window.getComputedStyle(blueBox)['margin-left'];\nassert.strictEqual(marginLeft,'40px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cg4RWh4",
        "forumTopicId": 16633,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\add-different-margins-to-each-side-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08824",
      "title": "Add Different Padding to Each Side of an Element",
      "challengeType": 0,
      "dashedName": "add-different-padding-to-each-side-of-an-element",
      "description": "Sometimes you will want to customize an element so that it has different amounts of `padding` on each of its sides.\n\nCSS allows you to control the `padding` of all four individual sides of an element with the `padding-top`, `padding-right`, `padding-bottom`, and `padding-left` properties.",
      "instructions": "Give the blue box a `padding` of `40px` on its top and left side, but only `20px` on its bottom and right side.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `blue-box` class should give the top of the elements `40px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingTop = window.getComputedStyle(blueBox)['padding-top'];\nassert.strictEqual(paddingTop, '40px');"
        },
        {
          "text": "Your `blue-box` class should give the right of the elements `20px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingRight = window.getComputedStyle(blueBox)['padding-right'];\nassert.strictEqual(paddingRight, '20px');"
        },
        {
          "text": "Your `blue-box` class should give the bottom of the elements `20px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingBottom = window.getComputedStyle(blueBox)['padding-bottom'];\nassert.strictEqual(paddingBottom, '20px');"
        },
        {
          "text": "Your `blue-box` class should give the left of the elements `40px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingLeft = window.getComputedStyle(blueBox)['padding-left'];\nassert.strictEqual(paddingLeft, '40px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cB7mwUw",
        "forumTopicId": 16634,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\add-different-padding-to-each-side-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08814",
      "title": "Add Rounded Corners with border-radius",
      "challengeType": 0,
      "dashedName": "add-rounded-corners-with-border-radius",
      "description": "Your cat photo currently has sharp corners. We can round out those corners with a CSS property called `border-radius`.",
      "instructions": "You can specify a `border-radius` with pixels. Give your cat photo a `border-radius` of `10px`.\n\n**Note:** This challenge allows for multiple possible solutions. For example, you may add `border-radius` to either the `.thick-green-border` class or the `.smaller-image` class.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n  }\n\n  .smaller-image {\n    width: 100px;\n    border-radius: 10px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your image element should have the class `thick-green-border`.",
          "testCode": "assert.isTrue(document.querySelector('img').classList.contains('thick-green-border'));"
        },
        {
          "text": "Your image should have a border radius of `10px`.\n\n```js\nconst image = document.querySelector('img');\nconst style = window.getComputedStyle(image);  \nconst borderTopLeftRadius = style['border-top-left-radius']; \nconst borderTopRightRadius = style['border-top-right-radius'];\nconst borderBottomLeftRadius = style['border-bottom-left-radius'];\nconst borderBottomRightRadius = style['border-bottom-right-radius'];\n\nassert.strictEqual(borderTopLeftRadius, '10px');\nassert.strictEqual(borderTopRightRadius, '10px');\nassert.strictEqual(borderBottomLeftRadius, '10px');\nassert.strictEqual(borderBottomRightRadius, '10px');\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cbZm2hg",
        "forumTopicId": 16649,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\add-rounded-corners-with-border-radius.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08822",
      "title": "Adjust the Margin of an Element",
      "challengeType": 0,
      "dashedName": "adjust-the-margin-of-an-element",
      "description": "An element's `margin` controls the amount of space between an element's `border` and surrounding elements.\n\nHere, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has a bigger `margin` than the blue box, making it appear smaller.\n\nWhen you increase the blue box's `margin`, it will increase the distance between its border and surrounding elements.",
      "instructions": "Change the `margin` of the blue box to match that of the red box.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 10px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `blue-box` class should give elements `20px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginTop = window.getComputedStyle(blueBox)['margin-top'];\nassert.strictEqual(marginTop, '20px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cVJarHW",
        "forumTopicId": 16654,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\adjust-the-margin-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad88fee1348bd9aedf08825",
      "title": "Adjust the Padding of an Element",
      "challengeType": 0,
      "dashedName": "adjust-the-padding-of-an-element",
      "description": "Now let's put our Cat Photo App away for a little while and learn more about styling HTML.\n\nYou may have already noticed this, but all HTML elements are essentially little rectangles.\n\nThree important properties control the space that surrounds each HTML element: `padding`, `border`, and `margin`.\n\nAn element's `padding` controls the amount of space between the element's content and its `border`.\n\nHere, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has more `padding` than the blue box.\n\nWhen you increase the blue box's `padding`, it will increase the distance (`padding`) between the text and the border around it.",
      "instructions": "Change the `padding` of your blue box to match that of your red box.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 10px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `blue-box` class should give elements `20px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingTop = window.getComputedStyle(blueBox)['padding-top'];\nassert.strictEqual(paddingTop, '20px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cED8ZC2",
        "forumTopicId": 301083,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\adjust-the-padding-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "5a9d7286424fe3d0e10cad13",
      "title": "Attach a Fallback value to a CSS Variable",
      "challengeType": 0,
      "dashedName": "attach-a-fallback-value-to-a-css-variable",
      "description": "When using your variable as a CSS property value, you can attach a fallback value that your browser will revert to if the given variable is invalid.\n\n**Note:** This fallback is not used to increase browser compatibility, and it will not work on IE browsers. Rather, it is used so that the browser has a color to display if it cannot find your variable.\n\nHere's how you do it:\n\n```css\nbackground: var(--penguin-skin, black);\n```\n\nThis will set background to `black` if your variable wasn't set. Note that this can be useful for debugging.",
      "instructions": "It looks like there is a problem with the variables supplied to the `.penguin-top` and `.penguin-bottom` classes. Rather than fix the typo, add a fallback value of `black` to the `background` property of the `.penguin-top` and `.penguin-bottom` classes.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .penguin {\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n\n    /* Change code below this line */\n    background: var(--pengiun-skin);\n    /* Change code above this line */\n\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n\n    /* Change code below this line */\n    background: var(--pengiun-skin);\n    /* Change code above this line */\n\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background: #c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .penguin-top {\n    background: var(--pengiun-skin, black);\n  }\n  .penguin-bottom {\n    background: var(--pengiun-skin, black);\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "The fallback value of `black` should be used in the `background` property of the `penguin-top` class.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi);"
        },
        {
          "text": "The fallback value of `black` should be used in `background` property of the `penguin-bottom` class.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c6bDNfp",
        "forumTopicId": 301084,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\attach-a-fallback-value-to-a-css-variable.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "5a9d72a1424fe3d0e10cad15",
      "title": "Change a variable for a specific area",
      "challengeType": 0,
      "dashedName": "change-a-variable-for-a-specific-area",
      "description": "When you create your variables in `:root` they will set the value of that variable for the whole page.\n\nYou can then overwrite these variables by setting them again within a specific selector.",
      "instructions": "Change the value of `--penguin-belly` to `white` in the `penguin` class.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  :root {\n    --penguin-skin: gray;\n    --penguin-belly: pink;\n    --penguin-beak: orange;\n  }\n\n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n\n  .penguin {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, pink);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n.penguin {--penguin-belly: white;}\n</style>"
        }
      ],
      "tests": [
        {
          "text": "The `penguin` class should reassign the `--penguin-belly` variable to `white`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi);"
        },
        {
          "text": "The `penguin` class should not contain the `background-color` property.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /^((?!background-color\\s*?:\\s*?)[\\s\\S])*$/g);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cdRwbuW",
        "forumTopicId": 301085,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\change-a-variable-for-a-specific-area.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08803",
      "title": "Change the Color of Text",
      "challengeType": 0,
      "dashedName": "change-the-color-of-text",
      "description": "Now let's change the color of some of our text.\n\nWe can do this by changing the `style` of your `h2` element.\n\nThe property that is responsible for the color of an element's text is the `color` style property.\n\nHere's how you would set your `h2` element's text color to blue:\n\n```html\n<h2 style=\"color: blue;\">CatPhotoApp</h2>\n```\n\nNote that it is a good practice to end inline `style` declarations with a `;` .",
      "instructions": "Change your `h2` element's style so that its text color is red.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2 style=\"color: red;\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `h2` element should have a `style` declaration.",
          "testCode": "assert.exists(document.querySelector('h2').getAttribute('style'));"
        },
        {
          "text": "Your `h2` element should have color set to `red`.",
          "testCode": "assert.strictEqual(document.querySelector('h2').style.color, 'red');"
        },
        {
          "text": "Your `style` declaration should end with a `;` .",
          "testCode": "assert.isTrue(document.querySelector('h2').getAttribute('style').endsWith(';'));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cRkVmSm",
        "forumTopicId": 16775,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\change-the-color-of-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08806",
      "title": "Change the Font Size of an Element",
      "challengeType": 0,
      "dashedName": "change-the-font-size-of-an-element",
      "description": "Font size is controlled by the `font-size` CSS property, like this:\n\n```css\nh1 {\n  font-size: 30px;\n}\n```",
      "instructions": "Inside the same `<style>` tag that contains your `red-text` class, create an entry for `p` elements and set the `font-size` to 16 pixels (`16px`).",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: red;\n  }\n  p {\n    font-size: 16px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Between the `style` tags, give the `p` elements `font-size` of `16px`. Browser and Text zoom should be at 100%.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /p\\s*{\\s*font-size\\s*:\\s*16\\s*px\\s*;\\s*}/i);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c3bvDc8",
        "forumTopicId": 16777,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\change-the-font-size-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "5a9d726c424fe3d0e10cad11",
      "title": "Create a custom CSS Variable",
      "challengeType": 0,
      "dashedName": "create-a-custom-css-variable",
      "description": "To create a CSS variable, you just need to give it a name with two hyphens in front of it and assign it a value like this:\n\n```css\n--penguin-skin: gray;\n```\n\nThis will create a variable named `--penguin-skin` and assign it the value of `gray`. Now you can use that variable elsewhere in your CSS to change the value of other properties to gray.",
      "instructions": "In the `penguin` class, create a variable name `--penguin-skin` and give it a value of `gray`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .penguin {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: black;\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: black;\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: black;\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: black;\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: white;\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: orange;\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: orange;\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>.penguin {--penguin-skin: gray;}</style>"
        }
      ],
      "tests": [
        {
          "text": "`penguin` class should declare the `--penguin-skin` variable and assign it to `gray`.",
          "testCode": "assert.match(__helpers.removeHtmlComments(code), /\\.penguin\\s*\\{[^{}]*?--penguin-skin\\s*:\\s*gr[ae]y\\s*;[^{}]*?\\}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cQd27Hr",
        "forumTopicId": 301086,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\create-a-custom-css-variable.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fed1348bd9aede07836",
      "title": "Give a Background Color to a div Element",
      "challengeType": 0,
      "dashedName": "give-a-background-color-to-a-div-element",
      "description": "You can set an element's background color with the `background-color` property.\n\nFor example, if you wanted an element's background color to be `green`, you'd put this within your `style` element:\n\n```css\n.green-background {\n  background-color: green;\n}\n```",
      "instructions": "Create a class called `silver-background` with the `background-color` of `silver`. Assign this class to your `div` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `div` element should have the class `silver-background`.",
          "testCode": "assert.isTrue(document.querySelector('div').classList.contains('silver-background'));"
        },
        {
          "text": "Your `div` element should have a silver background.",
          "testCode": "const div = document.querySelector('div');\nconst backgroundColor = window.getComputedStyle(div)['background-color']; \nassert.strictEqual(backgroundColor, 'rgb(192, 192, 192)');"
        },
        {
          "text": "A class named `silver-background` should be defined within the `style` element and the value of `silver` should be assigned to the `background-color` property.",
          "testCode": "assert.match(__helpers.removeHtmlComments(code), /\\.silver-background\\s*{\\s*background-color\\s*:\\s*silver\\s*;?\\s*}/);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cdRKMCk",
        "forumTopicId": 18190,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\give-a-background-color-to-a-div-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08807",
      "title": "Import a Google Font",
      "challengeType": 0,
      "dashedName": "import-a-google-font",
      "description": "In addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. There are many sources for web fonts on the Internet. For this example we will focus on the Google Fonts library.\n\nGoogle Fonts is a free library of web fonts that you can use in your CSS by referencing the font's URL.\n\nSo, let's go ahead and import and apply a Google font (note that if Google is blocked in your country, you will need to skip this challenge).\n\nTo import a Google Font, you can copy the font's URL from the Google Fonts library and then paste it in your HTML. For this challenge, we'll import the `Lobster` font. To do this, copy the following code snippet and paste it into the top of your code editor (before the opening `style` element):\n\n```html\n<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n```\n\nNow you can use the `Lobster` font in your CSS by using `Lobster` as the FAMILY_NAME as in the following example:\n\n```css\nfont-family: FAMILY_NAME, GENERIC_NAME;\n```\n\nThe GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available. This is covered in the next challenge.\n\nFamily names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the `\"Open Sans\"` font, but not to use the `Lobster` font.",
      "instructions": "Import the `Lobster` font to your web page. Then, use an element selector to set `Lobster` as the `font-family` for your `h2` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  h2 {\n    font-family: Lobster;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "You should import the `Lobster` font.",
          "testCode": "assert.exists(document.querySelector('link[href*=\"googleapis\" i]'));"
        },
        {
          "text": "Your `h2` element should use the font `Lobster`.",
          "testCode": "const h2 = document.querySelector('h2'); \nconst fontFamily = window.getComputedStyle(h2)['font-family']; \nassert.match(fontFamily, /lobster/i);"
        },
        {
          "text": "You should only use an `h2` element selector to change the font.",
          "testCode": "assert.match(__helpers.removeHtmlComments(code), /\\s*[^\\.]h2\\s*\\{\\s*font-family\\s*:\\s*('|\"|)Lobster\\1\\s*(,\\s*('|\"|)[a-z -]+\\3\\s*)?(;\\s*\\}|\\})/gi);"
        },
        {
          "text": "Your `p` element should still use the font `monospace`.",
          "testCode": "const paragraphElement = document.querySelector('p');\nconst fontFamily = window.getComputedStyle(paragraphElement)['font-family']; \nassert.match(fontFamily, /monospace/i);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cM9MRsJ",
        "forumTopicId": 18200,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\import-a-google-font.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "5b7d72c338cd7e35b63f3e14",
      "title": "Improve Compatibility with Browser Fallbacks",
      "challengeType": 0,
      "dashedName": "improve-compatibility-with-browser-fallbacks",
      "description": "When working with CSS you will likely run into browser compatibility issues at some point. This is why it's important to provide browser fallbacks to avoid potential problems.\n\nWhen your browser parses the CSS of a webpage, it ignores any properties that it doesn't recognize or support. For example, if you use a CSS variable to assign a background color on a site, Internet Explorer will ignore the background color because it does not support CSS variables. In that case, the browser will use whatever value it has for that property. If it can't find any other value set for that property, it will revert to the default value, which is typically not ideal.\n\nThis means that if you do want to provide a browser fallback, it's as easy as providing another more widely supported value immediately before your declaration. That way an older browser will have something to fall back on, while a newer browser will just interpret whatever declaration comes later in the cascade.",
      "instructions": "It looks like a variable is being used to set the background color of the `.red-box` class. Let's improve our browser compatibility by adding another `background` declaration right before the existing declaration and set its value to `red`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  :root {\n    --red-color: red;\n  }\n  .red-box {\n\n    background: var(--red-color);\n    height: 200px;\n    width:200px;\n  }\n</style>\n<div class=\"red-box\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  :root {\n    --red-color: red;\n  }\n  .red-box {\n    background: red;\n    background: var(--red-color);\n    height: 200px;\n    width:200px;\n  }\n</style>\n<div class=\"red-box\"></div>"
        }
      ],
      "tests": [
        {
          "text": "Your `.red-box` rule should include a fallback with the `background` set to `red` immediately before the existing `background` declaration.",
          "testCode": "const spacelessCode = __helpers.removeWhiteSpace(__helpers.removeCssComments(code));\nassert.match(\n  spacelessCode,\n  /\\.red-box{background:(red|#ff0000|#f00|rgb\\(255,0,0\\)|rgb\\(100%,0%,0%\\)|hsl\\(0,100%,50%\\));background:var\\(--red-color\\);height:200px;width:200px;}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301087,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\improve-compatibility-with-browser-fallbacks.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "5a9d7295424fe3d0e10cad14",
      "title": "Inherit CSS Variables",
      "challengeType": 0,
      "dashedName": "inherit-css-variables",
      "description": "When you create a variable, it is available for you to use inside the selector in which you create it. It also is available in any of that selector's descendants. This happens because CSS variables are inherited, just like ordinary properties.\n\nTo make use of inheritance, CSS variables are often defined in the <dfn>:root</dfn> element.\n\n`:root` is a <dfn>pseudo-class</dfn> selector that matches the root element of the document, usually the `html` element. By creating your variables in `:root`, they will be available globally and can be accessed from any other selector in the style sheet.",
      "instructions": "Define a variable named `--penguin-belly` in the `:root` selector and give it the value of `pink`. You can then see that the variable is inherited and that all the child elements which use it get pink backgrounds.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  :root {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n\n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n\n  .penguin {\n    --penguin-skin: gray;\n    --penguin-beak: orange;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>:root {--penguin-belly: pink;}</style>"
        }
      ],
      "tests": [
        {
          "text": "The `--penguin-belly` variable should be declared in the `:root` and assigned the value `pink`.",
          "testCode": "assert.match(\n  __helpers.removeCssComments(code),\n  /:root\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?pink\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cyLZZhZ",
        "forumTopicId": 301088,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\inherit-css-variables.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08746",
      "title": "Inherit Styles from the Body Element",
      "challengeType": 0,
      "dashedName": "inherit-styles-from-the-body-element",
      "description": "Now we've proven that every HTML page has a `body` element, and that its `body` element can also be styled with CSS.\n\nRemember, you can style your `body` element just like any other HTML element, and all your other elements will inherit your `body` element's styles.",
      "instructions": "First, create an `h1` element with the text `Hello World`.\n\nThen, let's give all elements on your page the color of `green` by adding `color: green;` to your `body` element's style declaration.\n\nFinally, give your `body` element the font-family of `monospace` by adding `font-family: monospace;` to your `body` element's style declaration.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n  }\n\n</style>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n\n</style>\n<h1>Hello World!</h1>"
        }
      ],
      "tests": [
        {
          "text": "You should create an `h1` element.",
          "testCode": "assert.isNotEmpty(document.querySelectorAll('h1'));"
        },
        {
          "text": "Your `h1` element should have the text `Hello World`.",
          "testCode": "assert.match(\n  document.querySelector('h1').textContent,\n  /hello world/i\n);"
        },
        {
          "text": "Your `h1` element should have a closing tag.",
          "testCode": "const commentlessCode = __helpers.removeHtmlComments(code);\nassert.match(commentlessCode, /<\\/h1>/g);\nassert.match(commentlessCode, /<h1/g);\nassert.lengthOf(commentlessCode.match(/<\\/h1>/g), commentlessCode.match(/<h1/g).length);"
        },
        {
          "text": "Your `body` element should have the `color` property of `green`.",
          "testCode": "const bodyElement = document.querySelector('body');\nconst color = window.getComputedStyle(bodyElement)['color']; \nassert.strictEqual(color, 'rgb(0, 128, 0)');"
        },
        {
          "text": "Your `body` element should have the `font-family` property of `monospace`.",
          "testCode": "const bodyElement = document.querySelector('body');\nconst fontFamily = window.getComputedStyle(bodyElement)['font-family'];\nassert.include(fontFamily.toLowerCase(), \"monospace\");"
        },
        {
          "text": "Your `h1` element should inherit the font `monospace` from your `body` element.",
          "testCode": "const h1Element = document.querySelector('h1');\nconst fontFamily = window.getComputedStyle(h1Element)['font-family'];\nassert.include(fontFamily.toLowerCase(), \"monospace\");"
        },
        {
          "text": "Your `h1` element should inherit the color `green` from your `body` element.",
          "testCode": "const h1Element = document.querySelector('h1');\nconst color = window.getComputedStyle(h1Element)['color'];\nassert.strictEqual(color, 'rgb(0, 128, 0)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c9bmdtR",
        "forumTopicId": 18204,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\inherit-styles-from-the-body-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08815",
      "title": "Make Circular Images with a border-radius",
      "challengeType": 0,
      "dashedName": "make-circular-images-with-a-border-radius",
      "description": "In addition to pixels, you can also specify the `border-radius` using a percentage.",
      "instructions": "Give your cat photo a `border-radius` of `50%`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 10px;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 10px;\n  }\n\n  .smaller-image {\n    width: 100px;\n    border-radius: 50%;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your image should have a border radius of `50%`, making it perfectly circular.",
          "testCode": "const image = document.querySelector('img');\nconst borderTopLeftRadius = window.getComputedStyle(image)['border-top-left-radius'];\nassert.strictEqual(parseInt(borderTopLeftRadius), 50);"
        },
        {
          "text": "The `border-radius` value should use a percentage value of `50%`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /50%/g);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c2MvrcB",
        "forumTopicId": 18229,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\make-circular-images-with-a-border-radius.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf07756",
      "title": "Override All Other Styles by using Important",
      "challengeType": 0,
      "dashedName": "override-all-other-styles-by-using-important",
      "description": "Yay! We just proved that inline styles will override all the CSS declarations in your `style` element.\n\nBut wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS.\n\nIn many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use `!important`.\n\nLet's go all the way back to our `pink-text` class declaration. Remember that our `pink-text` class was overridden by subsequent class declarations, id declarations, and inline styles.",
      "instructions": "Let's add the keyword `!important` to your pink-text element's color declaration to make 100% sure that your `h1` element will be pink.\n\nAn example of how to do this is:\n\n```css\ncolor: red !important;\n```",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink !important;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should have the class `pink-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('pink-text'));"
        },
        {
          "text": "Your `h1` element should have the class `blue-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('blue-text'));"
        },
        {
          "text": "Your `h1` element should have the `id` of `orange-text`.",
          "testCode": "assert.strictEqual(document.querySelector('h1').getAttribute('id'), 'orange-text');"
        },
        {
          "text": "Your `h1` element should have the inline style of `color: white`.",
          "testCode": "const commentessCode = __helpers.removeHtmlComments(code);\nassert.match(commentessCode, /<h1.*style/gi);\nassert.match(commentessCode, /<h1.*style.*color\\s*?:/gi);"
        },
        {
          "text": "Your `pink-text` class declaration should have the `!important` keyword to override all other declarations.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.pink-text\\s*?\\{[\\s\\S]*?color:.*pink.*!important\\s*;?[^\\.]*\\}/g);"
        },
        {
          "text": "Your `h1` element should be pink.",
          "testCode": "const h1Element = document.querySelector('h1');\nconst color = window.getComputedStyle(h1Element)['color'];\nassert.strictEqual(color, 'rgb(255, 192, 203)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cm24rcp",
        "forumTopicId": 18249,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\override-all-other-styles-by-using-important.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd8aedf06756",
      "title": "Override Class Declarations by Styling ID Attributes",
      "challengeType": 0,
      "dashedName": "override-class-declarations-by-styling-id-attributes",
      "description": "We just proved that browsers read CSS from top to bottom in order of their declaration. That means that, in the event of a conflict, the browser will use whichever CSS declaration came last. Notice that if we even had put `blue-text` before `pink-text` in our `h1` element's classes, it would still look at the declaration order and not the order of their use!\n\nBut we're not done yet. There are other ways that you can override CSS. Do you remember id attributes?\n\nLet's override your `pink-text` and `blue-text` classes, and make your `h1` element orange, by giving the `h1` element an id and then styling that id.",
      "instructions": "Give your `h1` element the `id` attribute of `orange-text`. Remember, id styles look like this:\n\n```html\n<h1 id=\"orange-text\">\n```\n\nLeave the `blue-text` and `pink-text` classes on your `h1` element.\n\nCreate a CSS declaration for your `orange-text` id in your `style` element. Here's an example of what this looks like:\n\n```css\n#brown-text {\n  color: brown;\n}\n```\n\n**Note:** It doesn't matter whether you declare this CSS above or below `pink-text` class, since the `id` attribute will always take precedence.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 class=\"pink-text blue-text\">Hello World!</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n  #orange-text {\n    color: orange;\n  }  \n</style>\n<h1 id=\"orange-text\"  class=\"pink-text blue-text\">Hello World!</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should have the class `pink-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('pink-text'));"
        },
        {
          "text": "Your `h1` element should have the class `blue-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('blue-text'));"
        },
        {
          "text": "Your `h1` element should have the id of `orange-text`.",
          "testCode": "assert.strictEqual(document.querySelector('h1').getAttribute('id'),'orange-text');"
        },
        {
          "text": "There should be only one `h1` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('h1'), 1);"
        },
        {
          "text": "Your `orange-text` id should have a CSS declaration.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /#orange-text\\s*{/gi);"
        },
        {
          "text": "Your `h1` should not have any `style` attributes.",
          "testCode": "assert.notMatch(__helpers.removeHtmlComments(code), /<h1.*style.*>/gi);"
        },
        {
          "text": "Your `h1` element should be orange.",
          "testCode": "const h1Element = document.querySelector('h1');\nconst color = window.getComputedStyle(h1Element)['color']; \nassert.strictEqual(color, 'rgb(255, 165, 0)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cRkpDhB",
        "forumTopicId": 18251,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\override-class-declarations-by-styling-id-attributes.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf06756",
      "title": "Override Class Declarations with Inline Styles",
      "challengeType": 0,
      "dashedName": "override-class-declarations-with-inline-styles",
      "description": "So we've proven that id declarations override class declarations, regardless of where they are declared in your `style` element CSS.\n\nThere are other ways that you can override CSS. Do you remember inline styles?",
      "instructions": "Use an inline style to try to make our `h1` element white. Remember, inline styles look like this:\n\n```html\n<h1 style=\"color: green;\">\n```\n\nLeave the `blue-text` and `pink-text` classes on your `h1` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\">Hello World!</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should have the class `pink-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('pink-text'));"
        },
        {
          "text": "Your `h1` element should have the class `blue-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('blue-text'));"
        },
        {
          "text": "Your `h1` element should have the id of `orange-text`.",
          "testCode": "assert.strictEqual(document.querySelector('h1').getAttribute('id'), 'orange-text');"
        },
        {
          "text": "Your `h1` element should have an inline style.",
          "testCode": "assert.exists(document.querySelector('h1[style]'));"
        },
        {
          "text": "Your `h1` element should be white.",
          "testCode": "const h1Element = document.querySelector('h1');\nconst color = window.getComputedStyle(h1Element)['color']; \nassert.strictEqual(color, 'rgb(255, 255, 255)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cGJDRha",
        "forumTopicId": 18252,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\override-class-declarations-with-inline-styles.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf04756",
      "title": "Override Styles in Subsequent CSS",
      "challengeType": 0,
      "dashedName": "override-styles-in-subsequent-css",
      "description": "Our `pink-text` class overrode our `body` element's CSS declaration!\n\nWe just proved that our classes will override the `body` element's CSS. So the next logical question is, what can we do to override our `pink-text` class?",
      "instructions": "Create an additional CSS class called `blue-text` that gives an element the color blue. Make sure it's below your `pink-text` class declaration.\n\nApply the `blue-text` class to your `h1` element in addition to your `pink-text` class, and let's see which one wins.\n\nApplying multiple class attributes to an HTML element is done with a space between them like this:\n\n```html\nclass=\"class1 class2\"\n```\n\n**Note:** It doesn't matter which order the classes are listed in the HTML element.\n\nHowever, the order of the `class` declarations in the `<style>` section is what is important. The second declaration will always take precedence over the first. Because `.blue-text` is declared second, it overrides the attributes of `.pink-text`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n</style>\n<h1 class=\"pink-text\">Hello World!</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n\n  .blue-text {\n    color: blue;\n  }  \n</style>\n<h1 class=\"pink-text blue-text\">Hello World!</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should have the class `pink-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('pink-text'));"
        },
        {
          "text": "Your `h1` element should have the class `blue-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('blue-text'));"
        },
        {
          "text": "Both `blue-text` and `pink-text` should belong to the same `h1` element.",
          "testCode": "assert.isTrue(document.querySelector('.pink-text').classList.contains('blue-text'));"
        },
        {
          "text": "Your `h1` element should be blue.",
          "testCode": "const h1Element = document.querySelector('h1');\nconst color = window.getComputedStyle(h1Element)['color']; \nassert.strictEqual(color, 'rgb(0, 0, 255)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cGJDQug",
        "forumTopicId": 18253,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\override-styles-in-subsequent-css.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08756",
      "title": "Prioritize One Style Over Another",
      "challengeType": 0,
      "dashedName": "prioritize-one-style-over-another",
      "description": "Sometimes your HTML elements will receive multiple styles that conflict with one another.\n\nFor example, your `h1` element can't be both green and pink at the same time.\n\nLet's see what happens when we create a class that makes text pink, then apply it to an element. Will our class *override* the `body` element's `color: green;` CSS property?",
      "instructions": "Create a CSS class called `pink-text` that gives an element the color pink.\n\nGive your `h1` element the class of `pink-text`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n</style>\n<h1>Hello World!</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n</style>\n<h1 class=\"pink-text\">Hello World!</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should have the class `pink-text`.",
          "testCode": "assert.isTrue(document.querySelector('h1').classList.contains('pink-text'));"
        },
        {
          "text": "Your `<style>` should have a `pink-text` CSS class that changes the `color`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.pink-text\\s*\\{\\s*color\\s*:\\s*.+\\s*;?\\s*\\}/g);"
        },
        {
          "text": "Your `h1` element should be pink.",
          "testCode": "const h1Element = document.querySelector('h1');\nconst color = window.getComputedStyle(h1Element)['color']; \nassert.strictEqual(color, 'rgb(255, 192, 203)');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cZ8wnHv",
        "forumTopicId": 18258,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\prioritize-one-style-over-another.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aede08807",
      "title": "Set the Font Family of an Element",
      "challengeType": 0,
      "dashedName": "set-the-font-family-of-an-element",
      "description": "You can set which font an element should use, by using the `font-family` property.\n\nFor example, if you wanted to set your `h2` element's font to `sans-serif`, you would use the following CSS:\n\n```css\nh2 {\n  font-family: sans-serif;\n}\n```",
      "instructions": "Make all of your `p` elements use the `monospace` font.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `p` elements should use the font `monospace`.",
          "testCode": "const notRed = document.querySelector('p:not(.red-text)');\nconst fontFamily = window.getComputedStyle(notRed)['font-family']; \nassert.match(fontFamily, /monospace/i);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c3bvpCg",
        "forumTopicId": 18278,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\set-the-font-family-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87eee1348bd9aede07836",
      "title": "Set the id of an Element",
      "challengeType": 0,
      "dashedName": "set-the-id-of-an-element",
      "description": "In addition to classes, each HTML element can also have an `id` attribute.\n\nThere are several benefits to using `id` attributes: You can use an `id` to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.\n\n`id` attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same `id` attribute.\n\nHere's an example of how you give your `h2` element the id of `cat-photo-app`:\n\n```html\n<h2 id=\"cat-photo-app\">\n```",
      "instructions": "Give your `form` element the id `cat-photo-form`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `form` element should have the id of `cat-photo-form`.",
          "testCode": "assert.strictEqual(document.querySelector('form').getAttribute('id'), 'cat-photo-form');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cN6MEc2",
        "forumTopicId": 18279,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\set-the-id-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9acdf08812",
      "title": "Size Your Images",
      "challengeType": 0,
      "dashedName": "size-your-images",
      "description": "CSS has a property called `width` that controls an element's width. Just like with fonts, we'll use `px` (pixels) to specify the image's width.\n\nFor example, if we wanted to create a CSS class called `larger-image` that gave HTML elements a width of 500 pixels, we'd use:\n\n```html\n<style>\n  .larger-image {\n    width: 500px;\n  }\n</style>\n```",
      "instructions": "Create a class called `smaller-image` and use it to resize the image so that it's only 100 pixels wide.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `img` element should have the class `smaller-image`.",
          "testCode": "const relaxingCatImage = document.querySelector(\"img[src='https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg']\");\nconst catImageClass = relaxingCatImage.getAttribute('class').trim().split(/\\s+/g);\nassert.include(catImageClass, 'smaller-image');"
        },
        {
          "text": "Your image should be 100 pixels wide.",
          "testCode": "const image = document.querySelector('img');\nconst width = image.getBoundingClientRect().width;\nassert.isBelow(width, 200); \nassert.match(__helpers.removeCssComments(code), /\\.smaller-image\\s*{\\s*width\\s*:\\s*100px\\s*(;\\s*}|})/i);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18282,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\size-your-images.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08808",
      "title": "Specify How Fonts Should Degrade",
      "challengeType": 0,
      "dashedName": "specify-how-fonts-should-degrade",
      "description": "There are several default fonts that are available in all browsers. These generic font families include `monospace`, `serif` and `sans-serif`.\n\nWhen one font isn't available, you can tell the browser to \"degrade\" to another font.\n\nFor example, if you wanted an element to use the `Helvetica` font, but degrade to the `sans-serif` font when `Helvetica` isn't available, you will specify it as follows:\n\n```css\np {\n  font-family: Helvetica, sans-serif;\n}\n```\n\nGeneric font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.",
      "instructions": "To begin, apply the `monospace` font to the `h2` element, so that it now has two fonts - `Lobster` and `monospace`.\n\nIn the last challenge, you imported the `Lobster` font using the `link` tag. Now comment out that import of the `Lobster` font (using the HTML comments you learned before) from Google Fonts so that it isn't available anymore. Notice how your `h2` element degrades to the `monospace` font.\n\n**Note:** If you have the `Lobster` font installed on your computer, you won't see the degradation because your browser is able to find the font.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!--<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">-->\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your h2 element should use the font `Lobster`.",
          "testCode": "const h2Element = document.querySelector('h2');\nconst fontFamily = window.getComputedStyle(h2Element)['font-family']; \nassert.match(fontFamily, /^\"?lobster/i);"
        },
        {
          "text": "Your h2 element should degrade to the font `monospace` when `Lobster` is not available.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\s*h2\\s*\\{\\s*font-family\\s*\\:\\s*(\\'|\"|)Lobster\\1\\s*,\\s*monospace\\s*;?\\s*\\}/gi);"
        },
        {
          "text": "You should comment out your call to Google for the `Lobster` font by putting `<!--` in front of it.",
          "testCode": "assert.match(code, /<!--[^fc]/gi);"
        },
        {
          "text": "You should close your comment by adding `-->`.",
          "testCode": "assert.match(code, /[^fc]-->/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cpVKBfQ",
        "forumTopicId": 18304,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\specify-how-fonts-should-degrade.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aefe08806",
      "title": "Style Multiple Elements with a CSS Class",
      "challengeType": 0,
      "dashedName": "style-multiple-elements-with-a-css-class",
      "description": "Classes allow you to use the same CSS styles on multiple HTML elements. You can see this by applying your `red-text` class to the first `p` element.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `h2` element should be red.",
          "testCode": "const h2Element = document.querySelector('h2');\nconst color = window.getComputedStyle(h2Element)['color']; \nassert.strictEqual(color, 'rgb(255, 0, 0)');"
        },
        {
          "text": "Your `h2` element should have the class `red-text`.",
          "testCode": "assert.isTrue(document.querySelector('h2').classList.contains('red-text'));"
        },
        {
          "text": "Your first `p` element should be red.",
          "testCode": "const paragraph = document.querySelectorAll('p')[0];\nconst color = window.getComputedStyle(paragraph )['color'];\nassert.strictEqual(color, 'rgb(255, 0, 0)');"
        },
        {
          "text": "Your second and third `p` elements should not be red.\n\n```js\nconst paragraph2 = document.querySelectorAll('p')[1];\nconst paragraph3 = document.querySelectorAll('p')[2];\n\nconst color2 = window.getComputedStyle(paragraph2)['color'];\nconst color3 = window.getComputedStyle(paragraph3)['color'];\n\nassert.notStrictEqual(color2, 'rgb(255, 0, 0)');\nassert.notStrictEqual(color3, 'rgb(255, 0, 0)');\n```\n\nYour first `p` element should have the class `red-text`.",
          "testCode": "assert.isTrue(document.querySelectorAll('p')[0].classList.contains('red-text'));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cRkVbsQ",
        "forumTopicId": 18311,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\style-multiple-elements-with-a-css-class.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08736",
      "title": "Style the HTML Body Element",
      "challengeType": 0,
      "dashedName": "style-the-html-body-element",
      "description": "Now let's start fresh and talk about CSS inheritance.\n\nEvery HTML page has a `body` element.",
      "instructions": "We can prove that the `body` element exists here by giving it a `background-color` of black.\n\nWe can do this by adding the following to our `style` element:\n\n```css\nbody {\n  background-color: black;\n}\n```",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n\n</style>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\nbody {\n  background-color: black;\n}\n</style>"
        }
      ],
      "tests": [
        {
          "text": "Your `body` element should have the `background-color` of black.\n\n```js\nconst body = document.querySelector('body');\nconst backgroundColor = window.getComputedStyle(body)['background-color'];\n\nassert.strictEqual(backgroundColor, 'rgb(0, 0, 0)');\n```\n\nYour CSS rule should be properly formatted with both opening and closing curly brackets.",
          "testCode": "assert.match(code, /<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i);"
        },
        {
          "text": "Your CSS rule should end with a semicolon.",
          "testCode": "assert.match(code, /<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cB77PHW",
        "forumTopicId": 18313,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\style-the-html-body-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad82fee1322bd9aedf08721",
      "title": "Understand Absolute versus Relative Units",
      "challengeType": 0,
      "dashedName": "understand-absolute-versus-relative-units",
      "description": "The last several challenges all set an element's margin or padding with pixels (`px`). Pixels are a type of length unit, which is what tells the browser how to size or space an item. In addition to `px`, CSS has a number of different length unit options that you can use.\n\nThe two main types of length units are absolute and relative. Absolute units tie to physical units of length. For example, `in` and `mm` refer to inches and millimeters, respectively. Absolute length units approximate the actual measurement on a screen, but there are some differences depending on a screen's resolution.\n\nRelative units, such as `em` or `rem`, are relative to another length value. For example, `em` is based on the size of an element's font. If you use it to set the `font-size` property itself, it's relative to the parent's `font-size`.\n\n**Note:** There are several relative unit options that are tied to the size of the viewport. They are covered in the Responsive Web Design Principles section.",
      "instructions": "Add a `padding` property to the element with class `red-box` and set it to `1.5em`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: red;\n    margin: 20px 40px 20px 40px;\n\n  }\n\n  .green-box {\n    background-color: green;\n    margin: 20px 40px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box green-box\">padding</h5>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: red;\n    margin: 20px 40px 20px 40px;\n    padding: 1.5em;\n  }\n\n  .green-box {\n    background-color: green;\n    margin: 20px 40px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box green-box\">padding</h5>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `red-box` class should have a `padding` property.\n\n```js\nconst redBox =document.querySelector('.red-box'); \nconst style = window.getComputedStyle(redBox);\n\nassert.notEqual(style['padding-top'], '0px');\nassert.notEqual(style['padding-right'], '0px');\nassert.notEqual(style['padding-bottom'], '0px');\nassert.notEqual(style['padding-left'], '0px');\n```\n\nYour `red-box` class should give elements 1.5em of `padding`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.red-box\\s*?{[\\s\\S]*padding\\s*:\\s*?1\\.5em/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cN66JSL",
        "forumTopicId": 301089,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\understand-absolute-versus-relative-units.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aecf08806",
      "title": "Use a CSS Class to Style an Element",
      "challengeType": 0,
      "dashedName": "use-a-css-class-to-style-an-element",
      "description": "Classes are reusable styles that can be added to HTML elements.\n\nHere's an example CSS class declaration:\n\n```html\n<style>\n  .blue-text {\n    color: blue;\n  }\n</style>\n```\n\nYou can see that we've created a CSS class called `blue-text` within the `<style>` tag. You can apply a class to an HTML element like this: `<h2 class=\"blue-text\">CatPhotoApp</h2>`. Note that in your CSS `style` element, class names start with a period. In your HTML elements' class attribute, the class name does not include the period.",
      "instructions": "Inside your `style` element, change the `h2` selector to `.red-text` and update the color's value from `blue` to `red`.\n\nGive your `h2` element the `class` attribute with a value of `red-text`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  h2 {\n    color: blue;\n  }\n</style>\n\n<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `h2` element should be red.",
          "testCode": "const h2Element = document.querySelector('h2'); \nconst color = window.getComputedStyle(h2Element)['color']; \nassert.strictEqual(color, 'rgb(255, 0, 0)');"
        },
        {
          "text": "Your `h2` element should have the class `red-text`.",
          "testCode": "assert.isTrue(document.querySelector('h2').classList.contains('red-text'));"
        },
        {
          "text": "Your stylesheet should declare a `red-text` class and have its color set to `red`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.red-text\\s*\\{\\s*color\\s*:\\s*red;?\\s*\\}/g);"
        },
        {
          "text": "You should not use inline style declarations like `style=\"color: red\"` in your `h2` element.",
          "testCode": "assert.notExists(document.querySelector('h2').getAttribute('style'));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c2MvDtV",
        "forumTopicId": 18337,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-a-css-class-to-style-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "5a9d727a424fe3d0e10cad12",
      "title": "Use a custom CSS Variable",
      "challengeType": 0,
      "dashedName": "use-a-custom-css-variable",
      "description": "After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it.\n\n```css\nbackground: var(--penguin-skin);\n```\n\nThis will change the background of whatever element you are targeting to gray because that is the value of the `--penguin-skin` variable. Note that styles will not be applied unless the variable names are an exact match.",
      "instructions": "Apply the `--penguin-skin` variable to the `background` property of the `penguin-top`, `penguin-bottom`, `right-hand` and `left-hand` classes.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .penguin {\n    --penguin-skin: gray;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: white;\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: orange;\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: orange;\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>.penguin-top {background: var(--penguin-skin);} .penguin-bottom {background: var(--penguin-skin);} .right-hand {background: var(--penguin-skin);} .left-hand {background: var(--penguin-skin);}</style>"
        }
      ],
      "tests": [
        {
          "text": "The `--penguin-skin` variable should be applied to the `background` property of the `penguin-top` class.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi);"
        },
        {
          "text": "The `--penguin-skin` variable should be applied to the `background` property of the `penguin-bottom` class.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.right-hand\\s{/gi);"
        },
        {
          "text": "The `--penguin-skin` variable should be applied to the `background` property of the `right-hand` class.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /.right-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.left-hand\\s{/gi);"
        },
        {
          "text": "The `--penguin-skin` variable should be applied to the `background` property of the `left-hand` class.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /.left-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cM989ck",
        "forumTopicId": 301090,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-a-custom-css-variable.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "5a9d72ad424fe3d0e10cad16",
      "title": "Use a media query to change a variable",
      "challengeType": 0,
      "dashedName": "use-a-media-query-to-change-a-variable",
      "description": "CSS Variables can simplify the way you use media queries.\n\nFor instance, when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used.",
      "instructions": "In the `:root` selector of the media query, change it so `--penguin-size` is redefined and given a value of `200px`. Also, redefine `--penguin-skin` and give it a value of `black`. Then resize the preview to see this change in action.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  :root {\n    --penguin-size: 300px;\n    --penguin-skin: gray;\n    --penguin-belly: white;\n    --penguin-beak: orange;\n  }\n\n  @media (max-width: 350px) {\n    :root {\n      /* Only change code below this line */\n\n      /* Only change code above this line */\n    }\n  }\n\n  .penguin {\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: var(--penguin-size, 300px);\n    height: var(--penguin-size, 300px);\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 5%;\n    left: 25%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(130deg);\n    z-index: -1;\n    animation-duration: 3s;\n    animation-name: wave;\n    animation-iteration-count: infinite;\n    transform-origin:0% 0%;\n    animation-timing-function: linear;\n  }\n\n  @keyframes wave {\n      10% {\n        transform: rotate(110deg);\n      }\n      20% {\n        transform: rotate(130deg);\n      }\n      30% {\n        transform: rotate(110deg);\n      }\n      40% {\n        transform: rotate(130deg);\n      }\n    }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left:-23%;\n    background: white;\n    width: 150%;\n    height: 100%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>@media (max-width: 350px) {:root {--penguin-size: 200px; --penguin-skin: black;}}</style>"
        }
      ],
      "tests": [
        {
          "text": "`:root` should reassign the `--penguin-size` variable to `200px`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-size\\s*?:\\s*?200px\\s*?;[\\s\\S]*}[\\s\\S]*}/gi);"
        },
        {
          "text": "`:root` should reassign the `--penguin-skin` variable to `black`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?black\\s*?;[\\s\\S]*}[\\s\\S]*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cWmL8UP",
        "forumTopicId": 301091,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-a-media-query-to-change-a-variable.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08719",
      "title": "Use Abbreviated Hex Code",
      "challengeType": 0,
      "dashedName": "use-abbreviated-hex-code",
      "description": "Many people feel overwhelmed by the possibilities of more than 16 million colors. And it's difficult to remember hex code. Fortunately, you can shorten it.\n\nFor example, red's hex code `#FF0000` can be shortened to `#F00`. This shortened form gives one digit for red, one digit for green, and one digit for blue.\n\nThis reduces the total number of possible colors to around 4,000. But browsers will interpret `#FF0000` and `#F00` as exactly the same color.",
      "instructions": "Go ahead, try using the abbreviated hex codes to color the correct elements.\n\n<table><tbody><tr><th>Color</th><th>Short Hex Code</th></tr><tr><td>Cyan</td><td><code>#0FF</code></td></tr><tr><td>Green</td><td><code>#0F0</code></td></tr><tr><td>Red</td><td><code>#F00</code></td></tr><tr><td>Fuchsia</td><td><code>#F0F</code></td></tr></tbody></table>",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: #000000;\n  }\n  .fuchsia-text {\n    color: #000000;\n  }\n  .cyan-text {\n    color: #000000;\n  }\n  .green-text {\n    color: #000000;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"fuchsia-text\">I am fuchsia!</h1>\n\n<h1 class=\"cyan-text\">I am cyan!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: #F00;\n  }\n  .fuchsia-text {\n    color: #F0F;\n  }\n  .cyan-text {\n    color: #0FF;\n  }\n  .green-text {\n    color: #0F0;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"fuchsia-text\">I am fuchsia!</h1>\n\n<h1 class=\"cyan-text\">I am cyan!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element with the text `I am red!` should be given the `color` red.",
          "testCode": "const redText = document.querySelector('.red-text');\nconst color = window.getComputedStyle(redText)['color']; \nassert.strictEqual(color, 'rgb(255, 0, 0)');"
        },
        {
          "text": "The abbreviated hex code for the color red should be used instead of the hex code `#FF0000`.",
          "testCode": "assert.match(code,/\\.red-text\\s*?{\\s*?color\\s*:\\s*?#F00\\s*?;?\\s*?}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am green!` should be given the `color` green.",
          "testCode": "const greenText = document.querySelector('.green-text');\nconst color = window.getComputedStyle(greenText)['color']; \nassert.strictEqual(color, 'rgb(0, 255, 0)');"
        },
        {
          "text": "The abbreviated hex code for the color green should be used instead of the hex code `#00FF00`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.green-text\\s*?{\\s*?color\\s*:\\s*?#0F0\\s*?;?\\s*?}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am cyan!` should be given the `color` cyan.",
          "testCode": "const cyanText = document.querySelector('.cyan-text');\nconst color = window.getComputedStyle(cyanText)['color']; \nassert.strictEqual(color, 'rgb(0, 255, 255)');"
        },
        {
          "text": "The abbreviated hex code for the color cyan should be used instead of the hex code `#00FFFF`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.cyan-text\\s*?{\\s*?color\\s*:\\s*?#0FF\\s*?;?\\s*?}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am fuchsia!` should be given the `color` fuchsia.",
          "testCode": "const fuchsiaText = document.querySelector('.fuchsia-text');\nconst color = window.getComputedStyle(fuchsiaText)['color']; \nassert.strictEqual(color,'rgb(255, 0, 255)');"
        },
        {
          "text": "The abbreviated hex code for the color fuchsia should be used instead of the hex code `#FF00FF`.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.fuchsia-text\\s*?{\\s*?color\\s*:\\s*?#F0F\\s*?;?\\s*?}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cRkpKAm",
        "forumTopicId": 18338,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-abbreviated-hex-code.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87dee1348bd9aede07836",
      "title": "Use an id Attribute to Style an Element",
      "challengeType": 0,
      "dashedName": "use-an-id-attribute-to-style-an-element",
      "description": "One cool thing about `id` attributes is that, like classes, you can style them using CSS.\n\nHowever, an `id` is not reusable and should only be applied to one element. An `id` also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the `id` will be applied.\n\nHere's an example of how you can take your element with the `id` attribute of `cat-photo-element` and give it the background color of green. In your `style` element:\n\n```css\n#cat-photo-element {\n  background-color: green;\n}\n```\n\nNote that inside your `style` element, you always reference classes by putting a `.` in front of their names. You always reference ids by putting a `#` in front of their names.",
      "instructions": "Try giving your form, which now has the `id` attribute of `cat-photo-form`, a green background.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n\n  #cat-photo-form {\n    background-color: green;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `form` element should have the id of `cat-photo-form`.",
          "testCode": "assert.strictEqual(document.querySelector('form').getAttribute('id'), 'cat-photo-form');"
        },
        {
          "text": "Your `form` element should have the `background-color` of green.",
          "testCode": "const catPhotoForm = document.querySelector('#cat-photo-form');\nconst backgroundColor = window.getComputedStyle(catPhotoForm)['background-color'];\nassert.strictEqual(backgroundColor, 'rgb(0, 128, 0)');"
        },
        {
          "text": "Your `form` element should have an `id` attribute.",
          "testCode": "assert.match(__helpers.removeHtmlComments(code), /<form.*cat-photo-form.*>/gi);\nassert.lengthOf(__helpers.removeHtmlComments(code).match(/<form.*cat-photo-form.*>/gi), 1)"
        },
        {
          "text": "You should not give your `form` any `class` or `style` attributes.",
          "testCode": "assert.notMatch(__helpers.removeHtmlComments(code), /<form.*style.*>/gi);\nassert.notMatch(__helpers.removeHtmlComments(code), /<form.*class.*>/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cakyZfL",
        "forumTopicId": 18339,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-an-id-attribute-to-style-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "58c383d33e2e3259241f3076",
      "title": "Use Attribute Selectors to Style Elements",
      "challengeType": 0,
      "dashedName": "use-attribute-selectors-to-style-elements",
      "description": "You have been adding `id` or `class` attributes to elements that you wish to specifically style. These are known as ID and class selectors. There are other CSS Selectors you can use to select custom groups of elements to style.\n\nLet's bring out CatPhotoApp again to practice using CSS Selectors.\n\nFor this challenge, you will use the `[attr=value]` attribute selector to style the checkboxes in CatPhotoApp. This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute `type` and a corresponding value of `radio`:\n\n```css\n[type='radio'] {\n  margin: 20px 0px 20px 0px;\n}\n```",
      "instructions": "Using the `type` attribute selector, try to give the checkboxes in CatPhotoApp a top margin of 10px and a bottom margin of 15px.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n  [type='checkbox'] {\n    margin-top: 10px;\n    margin-bottom: 15px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "The `type` attribute selector should be used to select the checkboxes.",
          "testCode": "assert.match(__helpers.removeHtmlComments(code), /<style>[\\s\\S]*?\\[\\s*?type\\s*?=\\s*?(\"|')checkbox\\1\\s*?\\]\\s*?{[\\s\\S]*?}[\\s\\S]*?<\\/style>/gi);"
        },
        {
          "text": "The top margins of the checkboxes should be 10px.",
          "testCode": "const checkboxes = document.querySelectorAll(\"[type='checkbox']\");\nassert.isNotEmpty(checkboxes);\ncheckboxes.forEach(function(checkbox) {\n  const marginTop = window.getComputedStyle(checkbox)['margin-top']; \n  assert.strictEqual(marginTop, '10px');\n});"
        },
        {
          "text": "The bottom margins of the checkboxes should be 15px.",
          "testCode": "const checkboxes = document.querySelectorAll(\"[type='checkbox']\");\nassert.isNotEmpty(checkboxes);\ncheckboxes.forEach(function(checkbox) {\n  const marginBottom = window.getComputedStyle(checkbox)['margin-bottom']; \n  assert.strictEqual(marginBottom, '15px');\n});"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cnpymfJ",
        "forumTopicId": 301092,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-attribute-selectors-to-style-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9afdf08726",
      "title": "Use Clockwise Notation to Specify the Margin of an Element",
      "challengeType": 0,
      "dashedName": "use-clockwise-notation-to-specify-the-margin-of-an-element",
      "description": "Let's try this again, but with `margin` this time.\n\nInstead of specifying an element's `margin-top`, `margin-right`, `margin-bottom`, and `margin-left` properties individually, you can specify them all in one line, like this:\n\n```css\nmargin: 10px 20px 10px 20px;\n```\n\nThese four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions.",
      "instructions": "Use Clockwise Notation to give the element with the `blue-box` class a margin of `40px` on its top and left side, but only `20px` on its bottom and right side.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    margin: 40px 20px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `blue-box` class should give the top of elements `40px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginTop = window.getComputedStyle(blueBox)['margin-top'];\nassert.strictEqual(marginTop, '40px');"
        },
        {
          "text": "Your `blue-box` class should give the right of elements `20px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginRight = window.getComputedStyle(blueBox)['margin-right'];\nassert.strictEqual(marginRight, '20px');"
        },
        {
          "text": "Your `blue-box` class should give the bottom of elements `20px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginBottom = window.getComputedStyle(blueBox)['margin-bottom'];\nassert.strictEqual(marginBottom, '20px');"
        },
        {
          "text": "Your `blue-box` class should give the left of elements `40px` of `margin`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst marginLeft = window.getComputedStyle(blueBox)['margin-left'];\nassert.strictEqual(marginLeft, '40px');"
        },
        {
          "text": "You should use the clockwise notation to set the margin of `blue-box` class.",
          "testCode": "const cssCode = __helpers.removeCssComments(document.querySelector('style:not(.fcc-hide-header)').textContent);\nassert.match(cssCode, /\\.blue-box\\s*{[\\s\\S]*margin[\\s]*:\\s*\\d+px\\s+\\d+px\\s+\\d+px\\s+\\d+px(;\\s*[^}]+\\s*}|;?\\s*})/);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cnpybAd",
        "forumTopicId": 18345,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-clockwise-notation-to-specify-the-margin-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08826",
      "title": "Use Clockwise Notation to Specify the Padding of an Element",
      "challengeType": 0,
      "dashedName": "use-clockwise-notation-to-specify-the-padding-of-an-element",
      "description": "Instead of specifying an element's `padding-top`, `padding-right`, `padding-bottom`, and `padding-left` properties individually, you can specify them all in one line, like this:\n\n```css\npadding: 10px 20px 10px 20px;\n```\n\nThese four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions.",
      "instructions": "Use Clockwise Notation to give the `.blue-box` class a `padding` of `40px` on its top and left side, but only `20px` on its bottom and right side.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 40px 20px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `blue-box` class should give the top of elements `40px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingTop = window.getComputedStyle(blueBox)['padding-top'];\nassert.strictEqual(paddingTop, '40px');"
        },
        {
          "text": "Your `blue-box` class should give the right of elements `20px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingRight = window.getComputedStyle(blueBox)['padding-right'];\nassert.strictEqual(paddingRight, '20px');"
        },
        {
          "text": "Your `blue-box` class should give the bottom of elements `20px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingBottom = window.getComputedStyle(blueBox)['padding-bottom'];\nassert.strictEqual(paddingBottom, '20px');"
        },
        {
          "text": "Your `blue-box` class should give the left of elements `40px` of `padding`.",
          "testCode": "const blueBox = document.querySelector('.blue-box');\nconst paddingLeft = window.getComputedStyle(blueBox)['padding-left'];\nassert.strictEqual(paddingLeft, '40px');"
        },
        {
          "text": "You should use the clockwise notation to set the padding of `blue-box` class.",
          "testCode": "const css =  __helpers.removeCssComments(document.querySelector('style:not(.fcc-hide-header)').textContent);\nassert.match(css, /\\.blue-box\\s*{[\\s\\S]*padding\\s*:\\s*\\d+px\\s+\\d+px\\s+\\d+px\\s+\\d+px(;\\s*[^}]+\\s*}|;?\\s*})/);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cB7mBS9",
        "forumTopicId": 18346,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-clockwise-notation-to-specify-the-padding-of-an-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08805",
      "title": "Use CSS Selectors to Style Elements",
      "challengeType": 0,
      "dashedName": "use-css-selectors-to-style-elements",
      "description": "With CSS, there are hundreds of CSS properties that you can use to change the way an element looks on your page.\n\nWhen you entered `<h2 style=\"color: red;\">CatPhotoApp</h2>`, you were styling that individual `h2` element with inline CSS, which stands for Cascading Style Sheets.\n\nThat's one way to specify the style of an element, but there's a better way to apply CSS.\n\nAt the top of your code, create a `style` block like this:\n\n```html\n<style>\n</style>\n```\n\nInside that style block, you can create a <dfn>CSS selector</dfn> for all `h2` elements. For example, if you wanted all `h2` elements to be red, you would add a style rule that looks like this:\n\n```html\n<style>\n  h2 {\n    color: red;\n  }\n</style>\n```\n\nNote that it's important to have both opening and closing curly braces (`{` and `}`) around each element's style rule(s). You also need to make sure that your element's style definition is between the opening and closing style tags. Finally, be sure to add a semicolon to the end of each of your element's style rules.",
      "instructions": "Delete your `h2` element's style attribute, and instead create a CSS `style` block. Add the necessary CSS to turn all `h2` elements blue.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2 style=\"color: red;\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h2 {\n    color: blue;\n  }\n</style>\n<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "The `style` attribute should be removed from your `h2` element.",
          "testCode": "assert.notExists(document.querySelector('h2').getAttribute('style'));"
        },
        {
          "text": "You should create a `style` element.",
          "testCode": "assert.exists(document.querySelector('style:not(.fcc-hide-header)'));\nassert.isAtLeast(document.querySelectorAll('style:not(.fcc-hide-header)').length, 1);"
        },
        {
          "text": "Your `h2` element should be blue.",
          "testCode": "const h2Element = document.querySelector('h2');\nconst color = window.getComputedStyle(h2Element)['color']; \nassert.strictEqual(color, 'rgb(0, 0, 255)');"
        },
        {
          "text": "Your stylesheet `h2` declaration should be valid with a semicolon and closing brace.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /h2\\s*\\{\\s*color\\s*:.*;\\s*\\}/g);"
        },
        {
          "text": "All your `style` elements should be valid and have closing tags.\n\n```js\nassert.match(__helpers.removeHtmlComments(code), /<\\/style>/g);\n\nconst closingElementLength = __helpers.removeHtmlComments(code).match(/<\\/style>/g).length;\nconst openingElementsLength = __helpers.removeHtmlComments(code).match(/<style((\\s)*((type|media|scoped|title|disabled)=\"[^\"]*\")?(\\s)*)*>/g).length;\nassert.strictEqual(closingElementLength, openingElementsLength);\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cJKMBT2",
        "forumTopicId": 18349,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-css-selectors-to-style-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "5a9d725e424fe3d0e10cad10",
      "title": "Use CSS Variables to change several elements at once",
      "challengeType": 0,
      "dashedName": "use-css-variables-to-change-several-elements-at-once",
      "description": "<dfn>CSS Variables</dfn> are a powerful way to change many CSS style properties at once by changing only one value.\n\nFollow the instructions below to see how changing just three values can change the styling of many elements.",
      "instructions": "In the `penguin` class, change the `black` value to `gray`, the `gray` value to `white`, and the `yellow` value to `orange`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .penguin {\n\n    /* Only change code below this line */\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    /* Only change code above this line */\n\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>.penguin {--penguin-skin: gray; --penguin-belly: white; --penguin-beak: orange;}</style>"
        }
      ],
      "tests": [
        {
          "text": "`penguin` class should declare the `--penguin-skin` variable and assign it to `gray`.",
          "testCode": "assert.match(__helpers.removeHtmlComments(code), /.penguin\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?gray\\s*?;[\\s\\S]*}/gi);"
        },
        {
          "text": "`penguin` class should declare the `--penguin-belly` variable and assign it to `white`.",
          "testCode": "assert.match(code, /.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi);"
        },
        {
          "text": "`penguin` class should declare the `--penguin-beak` variable and assign it to `orange`.",
          "testCode": "assert.match(code, /.penguin\\s*?{[\\s\\S]*--penguin-beak\\s*?:\\s*?orange\\s*?;[\\s\\S]*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c6bDECm",
        "forumTopicId": 301093,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-css-variables-to-change-several-elements-at-once.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08726",
      "title": "Use Hex Code for Specific Colors",
      "challengeType": 0,
      "dashedName": "use-hex-code-for-specific-colors",
      "description": "Did you know there are other ways to represent colors in CSS? One of these ways is called hexadecimal code, or hex code for short.\n\nWe usually use <dfn>decimals</dfn>, or base 10 numbers, which use the symbols 0 to 9 for each digit. <dfn>Hexadecimals</dfn> (or <dfn>hex</dfn>) are base 16 numbers. This means it uses sixteen distinct symbols. Like decimals, the symbols 0-9 represent the values zero to nine. Then A,B,C,D,E,F represent the values ten to fifteen. Altogether, 0 to F can represent a digit in hexadecimal, giving us 16 total possible values. You can find more information about <a href=\"https://www.freecodecamp.org/news/hexadecimal-number-system/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">hexadecimal numbers here</a>.\n\nIn CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, `#000000` is black and is also the lowest possible value. You can find more information about the <a href=\"https://www.freecodecamp.org/news/rgb-color-html-and-css-guide/#whatisthergbcolormodel\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">RGB color system here</a>.\n\n```css\nbody {\n  color: #000000;\n}\n```",
      "instructions": "Replace the word `black` in our `body` element's background-color with its hex code representation, `#000000`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: black;\n  }\n</style>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: #000000;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "Your `body` element should have the `background-color` of black.",
          "testCode": "const body = document.querySelector('body');\nconst backgroundColor = window.getComputedStyle(body)['background-color']; \nassert.strictEqual(backgroundColor, 'rgb(0, 0, 0)');"
        },
        {
          "text": "The hex code for the color black should be used instead of the word `black`.",
          "testCode": "assert.match(code, /body\\s*{(([\\s\\S]*;\\s*?)|\\s*?)background.*\\s*:\\s*?#000(000)?((\\s*})|(;[\\s\\S]*?}))/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/c8W9mHM",
        "forumTopicId": 18350,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-hex-code-for-specific-colors.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08721",
      "title": "Use Hex Code to Mix Colors",
      "challengeType": 0,
      "dashedName": "use-hex-code-to-mix-colors",
      "description": "To review, hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components.\n\nFrom these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors!\n\nFor example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being `#FFA500`.\n\nThe digit `0` is the lowest number in hex code, and represents a complete absence of color.\n\nThe digit `F` is the highest number in hex code, and represents the maximum possible brightness.",
      "instructions": "Replace the color words in our `style` element with their correct hex codes.\n\n<table><tbody><tr><th>Color</th><th>Hex Code</th></tr><tr><td>Dodger Blue</td><td><code>#1E90FF</code></td></tr><tr><td>Green</td><td><code>#00FF00</code></td></tr><tr><td>Orange</td><td><code>#FFA500</code></td></tr><tr><td>Red</td><td><code>#FF0000</code></td></tr></tbody></table>",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: black;\n  }\n  .green-text {\n    color: black;\n  }\n  .dodger-blue-text {\n    color: black;\n  }\n  .orange-text {\n    color: black;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>\n\n<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>\n\n<h1 class=\"orange-text\">I am orange!</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: #FF0000;\n  }\n  .green-text {\n    color: #00FF00;\n  }\n  .dodger-blue-text {\n    color: #1E90FF;\n  }\n  .orange-text {\n    color: #FFA500;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>\n\n<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>\n\n<h1 class=\"orange-text\">I am orange!</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element with the text `I am red!` should be given the `color` red.",
          "testCode": "const redText = document.querySelector('.red-text');\nconst color = window.getComputedStyle(redText)['color']; \nassert.strictEqual(color, 'rgb(255, 0, 0)');"
        },
        {
          "text": "The `hex code` for the color red should be used instead of the word `red`.",
          "testCode": "assert.match(code, /\\.red-text\\s*?{\\s*?color\\s*:\\s*?(#FF0000|#F00)\\s*?;?\\s*?}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am green!` should be given the `color` green.",
          "testCode": "const greenText = document.querySelector('.green-text');\nconst color = window.getComputedStyle(greenText)['color']; \nassert.strictEqual(color, 'rgb(0, 255, 0)');"
        },
        {
          "text": "The `hex code` for the color green should be used instead of the word `green`.",
          "testCode": "assert.match(code, /\\.green-text\\s*?{\\s*?color\\s*:\\s*?(#00FF00|#0F0)\\s*?;?\\s*?}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am dodger blue!` should be given the `color` dodger blue.",
          "testCode": "const blueText = document.querySelector('.dodger-blue-text');\nconst color = window.getComputedStyle(blueText)['color']; \nassert.strictEqual(color, 'rgb(30, 144, 255)');"
        },
        {
          "text": "The `hex code` for the color dodger blue should be used instead of the word `dodgerblue`.",
          "testCode": "assert.match(code, /\\.dodger-blue-text\\s*?{\\s*?color\\s*:\\s*?#1E90FF\\s*?;?\\s*?}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am orange!` should be given the `color` orange.\n\n```js\nconst orangeText = document.querySelector('.orange-text');\nconst color = window.getComputedStyle(orangeText)['color'];\n\nassert.strictEqual(color, 'rgb(255, 165, 0)');\n```\n\nThe `hex code` for the color orange should be used instead of the word `orange`.",
          "testCode": "assert.match(code, /\\.orange-text\\s*?{\\s*?color\\s*:\\s*?#FFA500\\s*?;?\\s*?}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cK89PhP",
        "forumTopicId": 18359,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-hex-code-to-mix-colors.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad82fee1348bd9aedf08721",
      "title": "Use RGB to Mix Colors",
      "challengeType": 0,
      "dashedName": "use-rgb-to-mix-colors",
      "description": "Just like with hex code, you can mix colors in RGB by using combinations of different values.",
      "instructions": "Replace the hex codes in our `style` element with their correct RGB values.\n\n<table><tbody><tr><th>Color</th><th>RGB</th></tr><tr><td>Blue</td><td><code>rgb(0, 0, 255)</code></td></tr><tr><td>Red</td><td><code>rgb(255, 0, 0)</code></td></tr><tr><td>Orchid</td><td><code>rgb(218, 112, 214)</code></td></tr><tr><td>Sienna</td><td><code>rgb(160, 82, 45)</code></td></tr></tbody></table>",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: #000000;\n  }\n  .orchid-text {\n    color: #000000;\n  }\n  .sienna-text {\n    color: #000000;\n  }\n  .blue-text {\n    color: #000000;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"orchid-text\">I am orchid!</h1>\n\n<h1 class=\"sienna-text\">I am sienna!</h1>\n\n<h1 class=\"blue-text\">I am blue!</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .red-text {\n    color: rgb(255, 0, 0);\n  }\n  .orchid-text {\n    color: rgb(218, 112, 214);\n  }\n  .sienna-text {\n    color: rgb(160, 82, 45);\n  }\n  .blue-text {\n    color:rgb(0, 0, 255);\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"orchid-text\">I am orchid!</h1>\n\n<h1 class=\"sienna-text\">I am sienna!</h1>\n\n<h1 class=\"blue-text\">I am blue!</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element with the text `I am red!` should have the `color` red.",
          "testCode": "const redText = document.querySelector('.red-text');\nconst color = window.getComputedStyle(redText)['color']; \nassert.strictEqual(color, 'rgb(255, 0, 0)');"
        },
        {
          "text": "You should use `rgb` for the color red.",
          "testCode": "assert.match(code, /\\.red-text\\s*{\\s*color\\s*:\\s*rgb\\(\\s*255\\s*,\\s*0\\s*,\\s*0\\s*\\)\\s*;?\\s*}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am orchid!` should have the `color` orchid.",
          "testCode": "const orchidText = document.querySelector('.orchid-text');\nconst color = window.getComputedStyle(orchidText)['color']; \nassert.strictEqual(color, 'rgb(218, 112, 214)');"
        },
        {
          "text": "You should use `rgb` for the color orchid.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.orchid-text\\s*{\\s*color\\s*:\\s*rgb\\(\\s*218\\s*,\\s*112\\s*,\\s*214\\s*\\)\\s*;?\\s*}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am blue!` should have the `color` blue.",
          "testCode": "const blueText = document.querySelector('.blue-text');\nconst color = window.getComputedStyle(blueText)['color']; \nassert.strictEqual(color, 'rgb(0, 0, 255)');"
        },
        {
          "text": "You should use `rgb` for the color blue.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.blue-text\\s*{\\s*color\\s*:\\s*rgb\\(\\s*0\\s*,\\s*0\\s*,\\s*255\\s*\\)\\s*;?\\s*}/gi);"
        },
        {
          "text": "Your `h1` element with the text `I am sienna!` should have the `color` sienna.",
          "testCode": "const siennaText = document.querySelector('.sienna-text');\nconst color = window.getComputedStyle(siennaText)['color']; \nassert.strictEqual(color, 'rgb(160, 82, 45)');"
        },
        {
          "text": "You should use `rgb` for the color sienna.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /\\.sienna-text\\s*{\\s*color\\s*:\\s*rgb\\(\\s*160\\s*,\\s*82\\s*,\\s*45\\s*\\)\\s*;?\\s*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cm24JU6",
        "forumTopicId": 18368,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-rgb-to-mix-colors.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aede08718",
      "title": "Use RGB values to Color Elements",
      "challengeType": 0,
      "dashedName": "use-rgb-values-to-color-elements",
      "description": "Another way you can represent colors in CSS is by using `RGB` values.\n\nThe `RGB` value for black looks like this:\n\n```css\nrgb(0, 0, 0)\n```\n\nThe `RGB` value for white looks like this:\n\n```css\nrgb(255, 255, 255)\n```\n\nInstead of using six hexadecimal digits like you do with hex code, with `RGB` you specify the brightness of each color with a number between 0 and 255.\n\nIf you do the math, the two digits for one color equal 16 times 16, which gives us 256 total values. So `RGB`, which starts counting from zero, has the exact same number of possible values as hex code.\n\nHere's an example of how you'd change the `body` background to orange using its RGB code.\n\n```css\nbody {\n  background-color: rgb(255, 165, 0);\n}\n```",
      "instructions": "Let's replace the hex code in our `body` element's background color with the RGB value for black: `rgb(0, 0, 0)`",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: #F00;\n  }\n</style>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    background-color: rgb(0, 0, 0);\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "Your `body` element should have a black background.",
          "testCode": "const body = document.querySelector('body');\nconst backgroundColor = window.getComputedStyle(body)['background-color']; \nassert.strictEqual(backgroundColor, 'rgb(0, 0, 0)');"
        },
        {
          "text": "You should use `rgb` to give your `body` element a background of black.",
          "testCode": "assert.match(__helpers.removeCssComments(code), /rgb\\s*\\(\\s*0\\s*,\\s*0\\s*,\\s*0\\s*\\)/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/c/cRkp2fr",
        "forumTopicId": 18369,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-css\\use-rgb-values-to-color-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-css",
        "name": "Basic Css"
      }
    },
    {
      "id": "bad87fee1348bd9aedd08830",
      "title": "Add a Submit Button to a Form",
      "challengeType": 0,
      "dashedName": "add-a-submit-button-to-a-form",
      "description": "Let's add a `submit` button to your form. Clicking this button will send the data from your form to the URL you specified with your form's `action` attribute.\n\nHere's an example submit button:\n\n```html\n<button type=\"submit\">this button submits the form</button>\n```",
      "instructions": "Add a button as the last element of your `form` element with a type of `submit`, and `Submit` as its text.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `form` should have a `button` inside it.",
          "testCode": "const form = document.querySelector('form');\nconst children = form.querySelectorAll(`:scope ${\"button\"}`); \nassert.isNotEmpty(children);"
        },
        {
          "text": "Your submit button should have the attribute `type` set to `submit`.",
          "testCode": "assert.strictEqual(document.querySelector('button').getAttribute('type'), 'submit');"
        },
        {
          "text": "Your submit button should only have the text `Submit`.",
          "testCode": "const text = document.querySelector('button').textContent;\nassert.match(text,/^\\s*submit\\s*$/gi);"
        },
        {
          "text": "Your `button` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.strictEqual(code.match(/<\\/button>/g).length,code.match(/<button/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cp2Nkhz",
        "forumTopicId": 16627,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\add-a-submit-button-to-a-form.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08812",
      "title": "Add Images to Your Website",
      "challengeType": 0,
      "dashedName": "add-images-to-your-website",
      "description": "You can add images to your website by using the `img` element, and point to a specific image's URL using the `src` attribute.\n\nAn example of this would be:\n\n```html\n<img src=\"https://www.freecatphotoapp.com/your-image.jpg\">\n```\n\nNote that `img` is a void element.\n\nAll `img` elements **must** have an `alt` attribute. The text inside an `alt` attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.\n\n**Note:** If the image is purely decorative, using an empty `alt` attribute is a best practice.\n\nIdeally the `alt` attribute should not contain special characters unless needed.\n\nLet's add an `alt` attribute to our `img` example above:\n\n```html\n<img src=\"https://www.freecatphotoapp.com/your-image.jpg\" alt=\"freeCodeCamp logo\">\n```",
      "instructions": "Let's try to add an image to our website:\n\nWithin the existing `main` element, insert an `img` element before the existing `p` elements.\n\nNow set the `src` attribute so that it points to the url `https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg`\n\nFinally, don't forget to give your `img` element an `alt` attribute with applicable text.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your page should have an image element.",
          "testCode": "assert.exists(document.querySelector('img'));"
        },
        {
          "text": "Your image should have a `src` attribute that points to the kitten image.",
          "testCode": "const url = document.querySelector('img').getAttribute('src');\nassert.match(url,/^https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/cat-photo-app\\/relaxing-cat\\.jpg$/i);"
        },
        {
          "text": "Your image element's `alt` attribute should not be empty.",
          "testCode": "assert.exists(document.querySelector('img').getAttribute('alt'));\nassert.isNotEmpty(document.querySelector('img').getAttribute('alt'));\nassert.match(__helpers.removeWhiteSpace(code),/<(?:img|IMG)\\S*alt=(['\"])(?!\\1|>)\\S+\\1\\S*\\/?>/)"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16640,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\add-images-to-your-website.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08830",
      "title": "Add Placeholder Text to a Text Field",
      "challengeType": 0,
      "dashedName": "add-placeholder-text-to-a-text-field",
      "description": "Placeholder text is what is displayed in your `input` element before your user has inputted anything.\n\nYou can create placeholder text like so:\n\n```html\n<input type=\"text\" placeholder=\"this is placeholder text\">\n```\n\n**Note:** Remember that `input` is a void element.",
      "instructions": "Set the `placeholder` value of your text `input` to \"cat photo URL\".",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\">\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\" placeholder=\"cat photo URL\">\n</main>"
        }
      ],
      "tests": [
        {
          "text": "You should add a `placeholder` attribute to the existing text `input` element.",
          "testCode": "assert.notEmpty(document.querySelectorAll('input[placeholder]'));"
        },
        {
          "text": "You should set the value of your `placeholder` attribute to `cat photo URL`.",
          "testCode": "assert.exists(document.querySelector('input'));\nassert.exists(document.querySelector('input').getAttribute('placeholder'));\nconst placeholder = document.querySelector('input').getAttribute('placeholder');\nassert.match(placeholder,/cat\\s+photo\\s+URL/gi);"
        },
        {
          "text": "The finished `input` element should not have a closing tag.",
          "testCode": "assert.notMatch(code,/<input.*\\/?>.*<\\/input>/gi);"
        },
        {
          "text": "The finished `input` element should have valid syntax.",
          "testCode": "assert.notEmpty(document.querySelectorAll('input[type=text]'));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cKdJDhg",
        "forumTopicId": 16647,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\add-placeholder-text-to-a-text-field.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedd08835",
      "title": "Check Radio Buttons and Checkboxes by Default",
      "challengeType": 0,
      "dashedName": "check-radio-buttons-and-checkboxes-by-default",
      "description": "You can set a checkbox or radio button to be checked by default using the `checked` attribute.\n\nTo do this, just add the word `checked` to the inside of an `input` element. For example:\n\n```html\n<input type=\"radio\" name=\"test-name\" checked>\n```",
      "instructions": "Set the first of your radio buttons and the first of your checkboxes to both be checked by default.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your first radio button on your form should be checked by default.",
          "testCode": "assert.isTrue(document.querySelector('input[type=\"radio\"]').checked);"
        },
        {
          "text": "Your first checkbox on your form should be checked by default.",
          "testCode": "assert.isTrue(document.querySelector('input[type=\"checkbox\"]').checked);"
        },
        {
          "text": "You should not change the inner text of the `Indoor` label.",
          "testCode": "assert.equal(document.querySelector('label[for=\"indoor\"]')?.innerText?.trim(), 'Indoor');"
        },
        {
          "text": "You should not change the inner text of the `Loving` label.",
          "testCode": "assert.equal(document.querySelector('label[for=\"loving\"]')?.innerText?.trim(), 'Loving');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cWk3Qh6",
        "forumTopicId": 301094,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\check-radio-buttons-and-checkboxes-by-default.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08804",
      "title": "Comment out HTML",
      "challengeType": 0,
      "dashedName": "comment-out-html",
      "description": "Remember that in order to start a comment, you need to use `<!--` and to end a comment, you need to use `-->`\n\nHere you'll need to end the comment before your `h2` element begins.",
      "instructions": "Comment out your `h1` element and your `p` element, but not your `h2` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<!--\n<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n-->"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!--<h1>Hello World</h1>-->\n<h2>CatPhotoApp</h2> \n<!--<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p> -->"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should be commented out so that it is not visible on the page.",
          "testCode": "assert.isEmpty(document.querySelectorAll('h1'));"
        },
        {
          "text": "Your `h2` element should not be commented out so that it is visible on the page.",
          "testCode": "assert.isNotEmpty(document.querySelectorAll('h2'));"
        },
        {
          "text": "Your `p` element should be commented out so that it is not visible on the page.",
          "testCode": "assert.isEmpty(document.querySelectorAll('p'));"
        },
        {
          "text": "Each of your comments should be closed with `-->`.",
          "testCode": "assert.isAbove(code.match(/[^fc]-->/g).length, 1);"
        },
        {
          "text": "You should not change the order of the `h1`, `h2`, or `p` elements in the code.",
          "testCode": "assert.strictEqual(code.match(/<([a-z0-9]){1,2}>/g)[0],'<h1>');\nassert.strictEqual(code.match(/<([a-z0-9]){1,2}>/g)[1],'<h2>');\nassert.strictEqual(code.match(/<([a-z0-9]){1,2}>/g)[2],'<p>');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cGyGbca",
        "forumTopicId": 16782,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\comment-out-html.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08827",
      "title": "Create a Bulleted Unordered List",
      "challengeType": 0,
      "dashedName": "create-a-bulleted-unordered-list",
      "description": "HTML has a special element for creating <dfn>unordered lists</dfn>, or bullet point style lists.\n\nUnordered lists start with an opening `<ul>` element, followed by any number of `<li>` elements. Finally, unordered lists close with a `</ul>`.\n\nFor example:\n\n```html\n<ul>\n  <li>milk</li>\n  <li>cheese</li>\n</ul>\n```\n\nwould create a bullet point style list of `milk` and `cheese`.",
      "instructions": "Remove the last two `p` elements and create an unordered list of three things that cats love at the bottom of the page.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <ul>\n    <li>milk</li>\n    <li>mice</li>\n    <li>catnip</li>\n  </ul>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Create a `ul` element.",
          "testCode": "assert.isNotEmpty(document.querySelectorAll('ul'));"
        },
        {
          "text": "You should have three `li` elements within your `ul` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('ul li'),3);"
        },
        {
          "text": "Your `ul` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/ul>/gi);\nassert.match(code,/<ul/gi);\nassert.strictEqual(code.match(/<\\/ul>/gi).length,code.match(/<ul/gi).length);"
        },
        {
          "text": "Your `li` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/li>/gi);\nassert.match(code,/<li[\\s>]/gi);\nassert.strictEqual(code.match(/<\\/li>/gi).length,code.match(/<li[\\s>]/gi).length);"
        },
        {
          "text": "Your `li` elements should not contain an empty string or only white-space.",
          "testCode": "assert.isEmpty([...document.querySelectorAll('ul li')].filter((item) => item.textContent.trim() === \"\"));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cDKVPuv",
        "forumTopicId": 16814,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\create-a-bulleted-unordered-list.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aede08830",
      "title": "Create a Form Element",
      "challengeType": 0,
      "dashedName": "create-a-form-element",
      "description": "You can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an `action` attribute on your `form` element.\n\nFor example:\n\n```html\n<form action=\"url-where-you-want-to-submit-form-data\">\n  <input>\n</form>\n```",
      "instructions": "Nest the existing `input` element inside a `form` element and assign `\"https://www.freecatphotoapp.com/submit-cat-photo\"` to the `action` attribute of the `form` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\" placeholder=\"cat photo URL\">\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "The existing `input` element should be nested within a `form` element.",
          "testCode": "const inputElem = document.querySelector('form input');\nassert.strictEqual(inputElem.getAttribute('type'),'text'); \nassert.strictEqual(inputElem.getAttribute('placeholder'),'cat photo URL');"
        },
        {
          "text": "Your `form` should have an `action` attribute which is set to `https://www.freecatphotoapp.com/submit-cat-photo`.",
          "testCode": "const action = document.querySelector('form').getAttribute('action');\nassert.match(action,/^https:\\/\\/(www\\.)?freecatphotoapp\\.com\\/submit-cat-photo$/i);"
        },
        {
          "text": "Your `form` element should have well-formed open and close tags.",
          "testCode": "assert.match(code,/<\\/form>/g);\nassert.match(code,/<form [^<]*>/g);\nassert.strictEqual(code.match(/<\\/form>/g).length,code.match(/<form [^<]*>/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16817,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\create-a-form-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08835",
      "title": "Create a Set of Checkboxes",
      "challengeType": 0,
      "dashedName": "create-a-set-of-checkboxes",
      "description": "Forms commonly use <dfn>checkboxes</dfn> for questions that may have more than one answer.\n\nCheckboxes are a type of `input`.\n\nEach of your checkboxes can be nested within its own `label` element. By wrapping an `input` element inside of a `label` element it will automatically associate the checkbox input with the label element surrounding it.\n\nAll related checkbox inputs should have the same `name` attribute.\n\nIt is considered best practice to explicitly define the relationship between a checkbox `input` and its corresponding `label` by setting the `for` attribute on the `label` element to match the `id` attribute of the associated `input` element.\n\nHere's an example of a checkbox:\n\n```html\n<label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\"> Loving</label>\n```",
      "instructions": "Add to your form a set of three checkboxes. Each checkbox should be nested within its own `label` element. All three should share the `name` attribute of `personality`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label for=\"playful\"><input id=\"playful\" type=\"checkbox\" name=\"personality\">Playful</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" \nname=\"personality\">Lazy</label>\n    <label for=\"evil\"><input id=\"evil\" type=\"checkbox\" \nname=\"personality\">Evil</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your page should have three checkbox elements.",
          "testCode": "assert.lengthOf(document.querySelectorAll('input[type=\"checkbox\"]'),3);"
        },
        {
          "text": "Each of your three checkbox elements should be nested in its own `label` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('label > input[type=\"checkbox\"]:only-child'),3);"
        },
        {
          "text": "Make sure each of your `label` elements has a closing tag.",
          "testCode": "assert.match(code,/<\\/label>/g);\nassert.match(code,/<label/g);\nassert.strictEqual(code.match(/<\\/label>/g).length,code.match(/<label/g).length)"
        },
        {
          "text": "Your checkboxes should be given the `name` attribute of `personality`.",
          "testCode": "assert.lengthOf([...document.querySelectorAll('label > input[type=\"checkbox\"]')].filter(x => x.name === \"personality\"),3);"
        },
        {
          "text": "Each of your checkboxes should be added within the `form` tag.",
          "testCode": "assert.strictEqual(document.querySelector('label').parentNode.tagName,'FORM');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cqrkJsp",
        "forumTopicId": 16821,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\create-a-set-of-checkboxes.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08834",
      "title": "Create a Set of Radio Buttons",
      "challengeType": 0,
      "dashedName": "create-a-set-of-radio-buttons",
      "description": "You can use <dfn>radio buttons</dfn> for questions where you want the user to only give you one answer out of multiple options.\n\nRadio buttons are a type of `input`.\n\nEach of your radio buttons can be nested within its own `label` element. By wrapping an `input` element inside of a `label` element it will automatically associate the radio button input with the label element surrounding it.\n\nAll related radio buttons should have the same `name` attribute to create a radio button group. By creating a radio group, selecting any single radio button will automatically deselect the other buttons within the same group ensuring only one answer is provided by the user.\n\nHere's an example of a radio button:\n\n```html\n<label> \n  <input type=\"radio\" name=\"indoor-outdoor\">Indoor \n</label>\n```\n\nIt is considered best practice to set a `for` attribute on the `label` element, with a value that matches the value of the `id` attribute of the `input` element. This allows assistive technologies to create a linked relationship between the label and the related `input` element. For example:\n\n```html\n<input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\">\n<label for=\"indoor\">Indoor</label>\n```\n\nWe can also nest the `input` element within the `label` tags:\n\n```html\n<label for=\"indoor\"> \n  <input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\">Indoor \n</label>\n```",
      "instructions": "Add a pair of radio buttons to your form, each nested in its own `label` element. One should have the option of `indoor` and the other should have the option of `outdoor`. Both should share the `name` attribute of `indoor-outdoor` to create a radio group.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n   <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your page should have two `radio` button elements.",
          "testCode": "assert.lengthOf(document.querySelectorAll('input[type=\"radio\"]'),2);"
        },
        {
          "text": "Your radio buttons should be given the `name` attribute of `indoor-outdoor`.",
          "testCode": "assert.lengthOf([...document.querySelectorAll('input[type=\"radio\"]')].filter(input => input.name === \"indoor-outdoor\"),2);"
        },
        {
          "text": "Each of your two radio button elements should be nested in its own `label` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('label > input[type=\"radio\"]:only-child'),2);"
        },
        {
          "text": "Each of your `label` elements should have a closing tag.",
          "testCode": "assert.match(code,/<\\/label>/g);\nassert.match(code,/<label/g);\nassert.strictEqual(code.match(/<\\/label>/g).length,code.match(/<label/g).length);"
        },
        {
          "text": "One of your radio buttons should have the label `indoor`.",
          "testCode": "const labelTexts = [...document.querySelectorAll('label')].map(label => label.textContent);\nconst hasMatch = labelTexts.some(label =>  label.match(/indoor/gi));\nassert.isTrue(hasMatch);"
        },
        {
          "text": "One of your radio buttons should have the label `outdoor`.",
          "testCode": "const labelTexts = [...document.querySelectorAll('label')].map(label => label.textContent);\nconst hasMatch = labelTexts.some(label => label.match(/outdoor/gi));\nassert.isTrue(hasMatch);"
        },
        {
          "text": "Each of your radio button elements should be added within the `form` tag.",
          "testCode": "const labelParent = document.querySelector('label').parentNode;\nassert.strictEqual(labelParent.tagName,'FORM');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16822,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\create-a-set-of-radio-buttons.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08829",
      "title": "Create a Text Field",
      "challengeType": 0,
      "dashedName": "create-a-text-field",
      "description": "Now let's create a web form.\n\n`input` elements are a convenient way to get input from your user.\n\nYou can create a text input like this:\n\n```html\n<input type=\"text\">\n```\n\nNote that `input` is a void element.",
      "instructions": "Create an `input` element of type `text` below your lists.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n\n\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form>\n    <input type=\"text\">\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your app should have an `input` element of type `text`.",
          "testCode": "assert.isNotEmpty(document.querySelectorAll('input[type=text]'));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/c2EVnf6",
        "forumTopicId": 16823,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\create-a-text-field.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08828",
      "title": "Create an Ordered List",
      "challengeType": 0,
      "dashedName": "create-an-ordered-list",
      "description": "HTML has another special element for creating <dfn>ordered lists</dfn>, or numbered lists.\n\nOrdered lists start with an opening `<ol>` element, followed by any number of `<li>` elements. Finally, ordered lists are closed with the `</ol>` tag.\n\nFor example:\n\n```html\n<ol>\n  <li>Garfield</li>\n  <li>Sylvester</li>\n</ol>\n```\n\nwould create a numbered list of `Garfield` and `Sylvester`.",
      "instructions": "Create an ordered list of the top 3 things cats hate the most.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>hate 1</li>\n    <li>hate 2</li>\n    <li>hate 3</li>\n  </ol>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "You should have an ordered list for `Top 3 things cats hate:`",
          "testCode": "const previousElement = document.querySelector('ol').previousElementSibling; \nassert.match(previousElement.textContent,/Top 3 things cats hate:/i);"
        },
        {
          "text": "You should have an unordered list for `Things cats love:`",
          "testCode": "const previousElement = document.querySelector('ul').previousElementSibling; \nassert.match(previousElement.textContent,/Things cats love:/i);"
        },
        {
          "text": "You should have only one `ul` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('ul'), 1);"
        },
        {
          "text": "You should have only one `ol` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('ol'), 1);"
        },
        {
          "text": "You should have three `li` elements within your `ul` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('ul li'), 3);"
        },
        {
          "text": "You should have three `li` elements within your `ol` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('ol li'), 3);"
        },
        {
          "text": "Your `ul` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/ul>/g);\nassert.strictEqual(code.match(/<\\/ul>/g).length ,code.match(/<ul>/g).length);"
        },
        {
          "text": "Your `ol` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/ol>/g);\nassert.strictEqual(code.match(/<\\/ol>/g).length ,code.match(/<ol>/g).length);"
        },
        {
          "text": "Your `li` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/li>/g);\nassert.match(code,/<li>/g);\nassert.strictEqual(code.match(/<\\/li>/g).length ,code.match(/<li>/g).length);"
        },
        {
          "text": "The `li` elements in your unordered list should not be empty.",
          "testCode": "[...document.querySelectorAll('ul li')].forEach((val) =>\n  assert.isNotEmpty(__helpers.removeWhiteSpace(val.textContent))\n);"
        },
        {
          "text": "The `li` elements in your ordered list should not be empty.",
          "testCode": "[...document.querySelectorAll('ol li')].forEach((val) =>\n  assert.isNotEmpty(__helpers.removeWhiteSpace(val.textContent))\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cQ3B8TM",
        "forumTopicId": 16824,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\create-an-ordered-list.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "587d78aa367417b2b2512aed",
      "title": "Declare the Doctype of an HTML Document",
      "challengeType": 0,
      "dashedName": "declare-the-doctype-of-an-html-document",
      "description": "The challenges so far have covered specific HTML elements and their uses. However, there are a few elements that give overall structure to your page, and should be included in every HTML document.\n\nAt the top of your document, you need to tell the browser which version of HTML your page is using. HTML is an evolving language, and is updated regularly. Most major browsers support the latest specification, which is HTML5. However, older web pages may use previous versions of the language.\n\nYou tell the browser this information by adding the `<!DOCTYPE ...>` tag on the first line, where the `...` part is the version of HTML. For HTML5, you use `<!DOCTYPE html>`.\n\nThe `!` and uppercase `DOCTYPE` is important, especially for older browsers. The `html` is not case sensitive.\n\nNext, the rest of your HTML code needs to be wrapped in `html` tags. The opening `<html>` goes directly below the `<!DOCTYPE html>` line, and the closing `</html>` goes at the end of the page.\n\nHere's an example of the page structure. Your HTML code would go in the space between the two `html` tags.\n\n```html\n<!DOCTYPE html>\n<html>\n\n</html>\n```",
      "instructions": "Add a `DOCTYPE` tag for HTML5 to the top of the blank HTML document in the code editor. Under it, add opening and closing `html` tags, which wrap around an `h1` element. The heading can include any text.",
      "boilerplate": [
        {
          "language": "html",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html>\n  <h1> Hello world </h1>\n</html>"
        }
      ],
      "tests": [
        {
          "text": "Your code should include a `<!DOCTYPE html>` tag.",
          "testCode": "assert.match(code,/<!DOCTYPE\\s+?html\\s*?>/gi);"
        },
        {
          "text": "There should be one `html` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('html'), 1);"
        },
        {
          "text": "The `html` tags should wrap around one `h1` element.",
          "testCode": "assert.match(code,/<html>\\s*?<h1>\\s*?.*?\\s*?<\\/h1>\\s*?<\\/html>/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cra98AJ",
        "forumTopicId": 301095,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\declare-the-doctype-of-an-html-document.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "587d78aa367417b2b2512aec",
      "title": "Define the Head and Body of an HTML Document",
      "challengeType": 0,
      "dashedName": "define-the-head-and-body-of-an-html-document",
      "description": "You can add another level of organization in your HTML document within the `html` tags with the `head` and `body` elements. Any markup with information about your page would go into the `head` tag. Then any markup with the content of the page (what displays for a user) would go into the `body` tag.\n\nMetadata elements, such as `link`, `meta`, `title`, and `style`, typically go inside the `head` element.\n\nHere's an example of a page's layout:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n   <meta charset=\"utf-8\">\n   <title>Example title</title>\n  </head>\n  <body>\n    <div>\n    </div>\n  </body>\n</html>\n```",
      "instructions": "Edit the markup so there's a `head` and a `body`. The `head` element should only include the `title`, and the `body` element should only include the `h1` and `p`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html>\n  <title>The best page ever</title>\n\n  <h1>The best page ever</h1>\n  <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn't want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner's face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n\n</html>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!DOCTYPE html>\n<html>\n <head>\n  <title>The best page ever</title>\n </head>\n <body>\n  <h1>The best page ever</h1>\n  <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn't want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner's face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n </body>\n</html>"
        }
      ],
      "tests": [
        {
          "text": "There should be only one `head` element on the page.",
          "testCode": "const headElems = code.replace(/\\n/g, '').match(/\\<head\\s*>.*?\\<\\/head\\s*>/g);\nassert.exists(headElems); \nassert.lengthOf(headElems,1);"
        },
        {
          "text": "There should be only one `body` element on the page.",
          "testCode": "const bodyElems = code.replace(/\\n/g, '').match(/<body\\s*>.*?<\\/body\\s*>/g);\nassert.exists(bodyElems); \nassert.lengthOf(bodyElems,1);"
        },
        {
          "text": "The `head` element should be a child of the `html` element.\n\n```js\nconst htmlChildren = code\n  .replace(/\\n/g, '')\n  .match(/<html\\s*>(?<children>.*)<\\/html\\s*>/);\nlet foundHead;\nif (htmlChildren) {\n  const { children } = htmlChildren.groups;\n\nfoundHead = children.match(/<head\\s*>.*<\\/head\\s*>/);\n}\nassert.exists(foundHead);\n```\n\nThe `body` element should be a child of the `html` element.",
          "testCode": "const htmlChildren = code\n  .replace(/\\n/g, '')\n  .match(/<html\\s*>(?<children>.*?)<\\/html\\s*>/);\nlet foundBody;\nif (htmlChildren) {\n  const { children } = htmlChildren.groups;\n  foundBody = children.match(/<body\\s*>.*<\\/body\\s*>/);\n}\nassert.exists(foundBody);"
        },
        {
          "text": "The `head` element should wrap around the `title` element.",
          "testCode": "const headChildren = code\n  .replace(/\\n/g, '')\n  .match(/<head\\s*>(?<children>.*?)<\\/head\\s*>/);\nlet foundTitle;\nif (headChildren) {\n  const { children } = headChildren.groups;\n  foundTitle = children.match(/<title\\s*>.*?<\\/title\\s*>/);\n}\nassert.exists(foundTitle);"
        },
        {
          "text": "The `body` element should wrap around both the `h1` and `p` elements.",
          "testCode": "const bodyChildren = code\n  .replace(/\\n/g, '')\n  .match(/<body\\s*>(?<children>.*?)<\\/body\\s*>/);\nlet foundElems;\nif (bodyChildren) {\n  const { children } = bodyChildren.groups;\n  const h1s = children.match(/<h1\\s*>.*<\\/h1\\s*>/g);\n  const ps = children.match(/<p\\s*>.*<\\/p\\s*>/g);\n  const numH1s = h1s ? h1s.length : 0;\n  const numPs = ps ? ps.length : 0;\n  foundElems = numH1s === 1 && numPs === 1;\n}\nassert.exists(foundElems);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cra9bfP",
        "forumTopicId": 301096,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\define-the-head-and-body-of-an-html-document.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fed1348bd9aedf08833",
      "title": "Delete HTML Elements",
      "challengeType": 0,
      "dashedName": "delete-html-elements",
      "description": "Our phone doesn't have much vertical space.\n\nLet's remove the unnecessary elements so we can start building our CatPhotoApp.",
      "instructions": "Delete your `h1` element so we can simplify our view.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2><p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should be deleted.",
          "testCode": "assert.notMatch(code,/<h1>/gi);\nassert.notMatch(code,/<\\/h1>/gi);"
        },
        {
          "text": "Your `h2` element should be on the page.",
          "testCode": "assert.match(code,/<h2>[\\w\\W]*<\\/h2>/gi);"
        },
        {
          "text": "Your `p` element should be on the page.",
          "testCode": "assert.match(code,/<p>[\\w\\W]*<\\/p>/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/ckK73C9",
        "forumTopicId": 17559,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\delete-html-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08833",
      "title": "Fill in the Blank with Placeholder Text",
      "challengeType": 0,
      "dashedName": "fill-in-the-blank-with-placeholder-text",
      "description": "Web developers traditionally use <dfn>lorem ipsum text</dfn> as placeholder text. The lorem ipsum text is randomly scraped from a famous passage by Cicero of Ancient Rome.\n\nLorem ipsum text has been used as placeholder text by typesetters since the 16th century, and this tradition continues on the web.\n\nWell, 5 centuries is long enough. Since we're building a CatPhotoApp, let's use something called \"kitty ipsum\" text.",
      "instructions": "Replace the text inside your `p` element with the first few words of this kitty ipsum text: `Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.`",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Hello Paragraph</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff</p>"
        }
      ],
      "tests": [
        {
          "text": "Your `p` element should contain the first few words of the provided \"kitty ipsum\" text.",
          "testCode": "assert.match(document.querySelector('p').textContent,/Kitty(\\s)+ipsum/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cgR7Dc7",
        "forumTopicId": 18178,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\fill-in-the-blank-with-placeholder-text.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf0887a",
      "title": "Headline with the h2 Element",
      "challengeType": 0,
      "dashedName": "headline-with-the-h2-element",
      "description": "Over the next few lessons, we'll build an HTML5 cat photo web app piece-by-piece.\n\nThe `h2` element you will be adding in this step will add a level two heading to the web page.\n\nThis element tells the browser about the structure of your website. `h1` elements are often used for main headings, while `h2` elements are generally used for subheadings. There are also `h3`, `h4`, `h5` and `h6` elements to indicate different levels of subheadings.",
      "instructions": "Add an `h2` tag that says \"CatPhotoApp\" to create a second HTML element below your \"Hello World\" `h1` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>"
        }
      ],
      "tests": [
        {
          "text": "You should create an `h2` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('h2'),1);"
        },
        {
          "text": "Your `h2` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/h2>/g);\nassert.strictEqual(code.match(/<\\/h2>/g).length,code.match(/<h2>/g).length);"
        },
        {
          "text": "Your `h2` element should have the text `CatPhotoApp`.",
          "testCode": "assert.match(document.querySelector('h2').textContent,/cat(\\s)?photo(\\s)?app/gi);"
        },
        {
          "text": "Your `h1` element should have the text `Hello World`.",
          "testCode": "assert.match(document.querySelector('h1').textContent,/hello(\\s)+world/gi);"
        },
        {
          "text": "Your `h1` element should be before your `h2` element.",
          "testCode": "assert.match(code,/<h1>\\s*?.*?\\s*?<\\/h1>\\s*<h2>\\s*?.*?\\s*?<\\/h2>/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cE8Gqf3",
        "forumTopicId": 18196,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\headline-with-the-h2-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08801",
      "title": "Inform with the Paragraph Element",
      "challengeType": 0,
      "dashedName": "inform-with-the-paragraph-element",
      "description": "The `p` element is the preferred element for paragraph text on websites. `p` is short for \"paragraph\".\n\nYou can create a paragraph element like this:\n\n```html\n<p>I'm a p tag!</p>\n```",
      "instructions": "Create a `p` element below your `h2` element, and give it the text `Hello Paragraph`.\n\n**Note:** As a convention, all HTML tags are written in lowercase, for example `<p></p>` and not `<P></P>`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>\n<p>Hello Paragraph</p>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have a valid `p` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('p'),1);"
        },
        {
          "text": "Your `p` element should have the text `Hello Paragraph`.",
          "testCode": "assert.match(document.querySelector('p').textContent,/hello(\\s)+paragraph/gi);"
        },
        {
          "text": "Your `p` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/p>/g);\nassert.strictEqual(code.match(/<\\/p>/g).length,code.match(/<p/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/ceZ7DtN",
        "forumTopicId": 18202,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\inform-with-the-paragraph-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aecf08801",
      "title": "Introduction to HTML5 Elements",
      "challengeType": 0,
      "dashedName": "introduction-to-html5-elements",
      "description": "HTML5 introduces more descriptive HTML tags. These include `main`, `header`, `footer`, `nav`, `video`, `article`, `section` and others.\n\nThese tags give a descriptive structure to your HTML, make your HTML easier to read, and help with Search Engine Optimization (SEO) and accessibility. The `main` HTML5 tag helps search engines and other developers find the main content of your page.\n\nExample usage, a `main` element with two child elements nested inside it:\n\n```html\n<main> \n  <h1>Hello World</h1>\n  <p>Hello Paragraph</p>\n</main>\n```\n\n**Note:** Many of the new HTML5 tags and their benefits are covered in the Applied Accessibility section.",
      "instructions": "Create a second `p` element with the following kitty ipsum text: `Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.`\n\nThen, create a `main` element and nest only the two `p` elements inside the `main` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "You should have 2 `p` elements with Kitty Ipsum text.",
          "testCode": "assert.lengthOf(document.querySelectorAll('p'),2);"
        },
        {
          "text": "Each of your `p` elements should have a closing tag.",
          "testCode": "assert.match(code,/<\\/p>/g);\nassert.strictEqual(code.match(/<\\/p>/g).length,code.match(/<p/g).length);"
        },
        {
          "text": "Your `p` element should contain the first few words of the provided additional `kitty ipsum` text.",
          "testCode": "assert.match(document.querySelectorAll('p')[1].textContent,/Purr\\s+jump\\s+eat/gi);"
        },
        {
          "text": "Your code should have one `main` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('main'),1);"
        },
        {
          "text": "The `main` element should have two paragraph elements as children.",
          "testCode": "const main = document.querySelector('main');\nconst children = main.querySelectorAll(\"p\"); \nassert.lengthOf(children,2);"
        },
        {
          "text": "The opening `main` tag should come before the first paragraph tag.",
          "testCode": "assert.match(code,(/<main>\\s*?<p>/g));"
        },
        {
          "text": "The closing `main` tag should come after the second closing paragraph tag.",
          "testCode": "assert.match(code,(/<\\/p>\\s*?<\\/main>/g));"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cBkZGpt7",
        "forumTopicId": 301097,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\introduction-to-html5-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08816",
      "title": "Link to External Pages with Anchor Elements",
      "challengeType": 0,
      "dashedName": "link-to-external-pages-with-anchor-elements",
      "description": "You can use `a` (*anchor*) elements to link to content outside of your web page.\n\n`a` elements need a destination web address called an `href` attribute. They also need anchor text. Here's an example:\n\n```html\n<a href=\"https://www.freecodecamp.org\">this links to freecodecamp.org</a>\n```\n\nThen your browser will display the text `this links to freecodecamp.org` as a link you can click. And that link will take you to the web address `https://www.freecodecamp.org`.",
      "instructions": "Create an `a` element that links to `https://www.freecatphotoapp.com` and has \"cat photos\" as its anchor text.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n\n\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  \n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n  \n  <a href=\"https://www.freecatphotoapp.com\">cat photos</a>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `a` element should have the anchor text of `cat photos`.",
          "testCode": "assert.match(document.querySelector('a').textContent,/cat photos/gi);"
        },
        {
          "text": "You need an `a` element that links to `https://www.freecatphotoapp.com`",
          "testCode": "assert.match(document.querySelector('a').getAttribute('href'),/^https?:\\/\\/(www\\.)?freecatphotoapp\\.com\\/?$/i);"
        },
        {
          "text": "Your `a` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/a>/g);\nassert.strictEqual(code.match(/<\\/a>/g).length,code.match(/<a/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/c8EkncB",
        "forumTopicId": 18226,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\link-to-external-pages-with-anchor-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad88fee1348bd9aedf08816",
      "title": "Link to Internal Sections of a Page with Anchor Elements",
      "challengeType": 0,
      "dashedName": "link-to-internal-sections-of-a-page-with-anchor-elements",
      "description": "`a` (*anchor*) elements can also be used to create internal links to jump to different sections within a webpage.\n\nTo create an internal link, you assign a link's `href` attribute to a hash symbol `#` plus the value of the `id` attribute for the element that you want to internally link to, usually further down the page. You then need to add the same `id` attribute to the element you are linking to. An `id` is an attribute that uniquely describes an element.\n\nBelow is an example of an internal anchor link and its target element:\n\n```html\n<a href=\"#contacts-header\">Contacts</a>\n...\n<h2 id=\"contacts-header\">Contacts</h2>\n```\n\nWhen users click the `Contacts` link, they'll be taken to the section of the webpage with the **Contacts** heading element.",
      "instructions": "Change your external link to an internal link by changing the `href` attribute to `#footer` and the text from `cat photos` to `Jump to Bottom`.\n\nRemove the `target=\"_blank\"` attribute from the anchor tag since this causes the linked document to open in a new window tab.\n\nThen add an `id` attribute with a value of `footer` to the `<footer>` element at the bottom of the page.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n  <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you're using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>\n  <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>\n\n</main>\n\n<footer>Copyright Cat Photo App</footer>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"#footer\">Jump to Bottom</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n  <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you're using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>\n  <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>\n\n</main>\n\n<footer id=\"footer\">Copyright Cat Photo App</footer>"
        }
      ],
      "tests": [
        {
          "text": "There should be only one anchor tag on your page.",
          "testCode": "assert.lengthOf(document.querySelectorAll('a'), 1);"
        },
        {
          "text": "There should be only one `footer` tag on your page.",
          "testCode": "assert.lengthOf(document.querySelectorAll('footer'),1);"
        },
        {
          "text": "The `a` tag should have an `href` attribute set to \"#footer\".",
          "testCode": "assert.strictEqual(document.querySelector('a').getAttribute('href'), '#footer');"
        },
        {
          "text": "The `a` tag should not have a `target` attribute.",
          "testCode": "assert.notExists(document.querySelector('a').getAttribute('target'));"
        },
        {
          "text": "The `a` text should be \"Jump to Bottom\".",
          "testCode": "assert.match(document.querySelector('a').textContent,/Jump to Bottom/gi);"
        },
        {
          "text": "The `footer` tag should have an `id` attribute set to \"footer\".",
          "testCode": "assert.strictEqual(document.querySelector('footer').getAttribute('id'),'footer');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cyrDRUL",
        "forumTopicId": 301098,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\link-to-internal-sections-of-a-page-with-anchor-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08817",
      "title": "Make Dead Links Using the Hash Symbol",
      "challengeType": 0,
      "dashedName": "make-dead-links-using-the-hash-symbol",
      "description": "Sometimes you want to add `a` elements to your website before you know where they will link.\n\nThis is also handy when you're changing the behavior of a link using `JavaScript`, which we'll learn about later.",
      "instructions": "The current value of the `href` attribute is a link that points to \"`https://www.freecatphotoapp.com`\". Replace the `href` attribute value with a `#`, also known as a hash symbol, to create a dead link.\n\nFor example: `href=\"#\"`",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>.</p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\" target=\"_blank\">cat photos</a>.</p>\n  \n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `a` element should be a dead link with the value of the `href` attribute set to \"#\".",
          "testCode": "assert.strictEqual(document.querySelector('a').getAttribute('href'),'#');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cMdkytL",
        "forumTopicId": 18230,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\make-dead-links-using-the-hash-symbol.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aede08817",
      "title": "Nest an Anchor Element within a Paragraph",
      "challengeType": 0,
      "dashedName": "nest-an-anchor-element-within-a-paragraph",
      "description": "You can nest links within other text elements.\n\n```html\n<p>\n  Here's a <a target=\"_blank\" href=\"https://www.freecodecamp.org\"> link to www.freecodecamp.org</a> for you to follow.\n</p>\n```\n\nLet's break down the example. Normal text is wrapped in the `p` element:\n\n```html\n<p> Here's a ... for you to follow. </p>\n```\n\nNext is the *anchor* element `<a>` (which requires a closing tag `</a>`):  \n\n```html\n<a> ... </a>\n```\n\n`target` is an anchor tag attribute that specifies where to open the link. The value `_blank` specifies to open the link in a new tab. The `href` is an anchor tag attribute that contains the URL address of the link:  \n\n```html\n<a href=\"https://www.freecodecamp.org\" target=\"_blank\"> ... </a>\n```\n\nThe text, `link to www.freecodecamp.org`, within the `a` element is called <dfn>anchor text</dfn>, and will display the link to click:\n\n```html\n<a href=\" ... \" target=\"...\">link to freecodecamp.org</a>\n```\n\nThe final output of the example will look like this:  \n\nHere's a <a href=\"https://www.freecodecamp.org\" target=\"_blank\">link to www.freecodecamp.org</a> for you to follow.",
      "instructions": "Nest the existing `a` element within a new `p` element. Do not create a new anchor tag. The new paragraph should have text that says `View more cat photos`, where `cat photos` is a link, and the rest is plain text.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>View more <a target=\"_blank\" href=\"https://www.freecatphotoapp.com\">cat photos</a></p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "You should only have one `a` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('a'), 1 );"
        },
        {
          "text": "The `a` element should link to \"`https://www.freecatphotoapp.com`\".",
          "testCode": "assert.lengthOf(document.querySelectorAll('a[href=\"https://www.freecatphotoapp.com\"]'),1);"
        },
        {
          "text": "Your `a` element should have the anchor text of `cat photos`",
          "testCode": "assert.match(document.querySelector('a').textContent,/cat\\sphotos/gi)"
        },
        {
          "text": "You should create a new `p` element. There should be at least 3 total `p` tags in your HTML code.",
          "testCode": "assert.lengthOf(document.querySelectorAll('p'),3)"
        },
        {
          "text": "Your `a` element should be nested within your new `p` element.",
          "testCode": "const anchorParent = document.querySelector('a[href=\"https://www.freecatphotoapp.com\"]').parentNode;\nassert.strictEqual(anchorParent.tagName,\"P\")"
        },
        {
          "text": "Your `p` element should have the text `View more ` (with a space after it).",
          "testCode": "const textContent = document.querySelector('a[href=\"https://www.freecatphotoapp.com\"]').parentNode.textContent;\nassert.match(textContent,/View\\smore\\s/gi);"
        },
        {
          "text": "Your `a` element should <em>not</em> have the text `View more`.",
          "testCode": "assert.notMatch(document.querySelector('a').textContent,/View\\smore/gi);"
        },
        {
          "text": "Each of your `p` elements should have a closing tag.",
          "testCode": "assert.match(code,/<\\/p>/g);\nassert.match(code,/<p/g);\nassert.strictEqual(code.match(/<\\/p>/g).length,code.match(/<p/g).length);"
        },
        {
          "text": "Each of your `a` elements should have a closing tag.",
          "testCode": "assert.match(code,/<\\/a>/g);\nassert.match(code,/<a/g);\nassert.strictEqual(code.match(/<\\/a>/g).length,code.match(/<a/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18244,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\nest-an-anchor-element-within-a-paragraph.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aede08835",
      "title": "Nest Many Elements within a Single div Element",
      "challengeType": 0,
      "dashedName": "nest-many-elements-within-a-single-div-element",
      "description": "The `div` element, also known as a division element, is a general purpose container for other elements.\n\nThe `div` element is probably the most commonly used HTML element of all.\n\nJust like any other non-self-closing element, you can open a `div` element with `<div>` and close it on another line with `</div>`.",
      "instructions": "Nest your \"Things cats love\" and \"Top 3 things cats hate\" lists all within a single `div` element.\n\nHint: Try putting your opening `div` tag above your \"Things cats love\" `p` element and your closing `div` tag after your closing `ol` tag so that both of your lists are within one `div`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>catnip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your `p` elements should be nested inside your `div` element.",
          "testCode": "const div = document.querySelector('div');\nconst children = div.querySelectorAll('p');\nassert.isAbove(children.length,1);"
        },
        {
          "text": "Your `ul` element should be nested inside your `div` element.",
          "testCode": "const div = document.querySelector('div');\nconst children = div.querySelectorAll('ul');\nassert.notEmpty(children);"
        },
        {
          "text": "Your `ol` element should be nested inside your `div` element.",
          "testCode": "const div = document.querySelector('div');\nconst children = div.querySelectorAll('ol');\nassert.notEmpty(children);"
        },
        {
          "text": "Your `div` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/div>/g);\nassert.strictEqual(code.match(/<\\/div>/g).length,code.match(/<div>/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cNW4kC3",
        "forumTopicId": 18246,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\nest-many-elements-within-a-single-div-element.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bd7123c8c441eddfaeb5bdef",
      "title": "Say Hello to HTML Elements",
      "challengeType": 0,
      "dashedName": "say-hello-to-html-elements",
      "description": "Welcome to freeCodeCamp's HTML coding challenges. These will walk you through web development step-by-step.\n\nFirst, you'll start by building a simple web page using HTML. You can edit code in your code editor, which is embedded into this web page.\n\nDo you see the code in your code editor that says `<h1>Hello</h1>`? That's an HTML element.\n\nMost HTML elements have an opening tag and a closing tag.\n\nOpening tags look like this:\n\n```html\n<h1>\n```\n\nClosing tags look like this:\n\n```html\n</h1>\n```\n\nThe only difference between opening and closing tags is the forward slash after the opening bracket of a closing tag.\n\nEach challenge has tests you can run at any time by clicking the \"Run tests\" button. When you pass all tests, you'll be prompted to submit your solution and go to the next coding challenge.",
      "instructions": "To pass the test on this challenge, change your `h1` element's text to say `Hello World`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h1>Hello</h1>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should have the text `Hello World`.",
          "testCode": "assert.match(document.querySelector('h1').textContent,/hello(\\s)+world/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cE8Gpt2",
        "forumTopicId": 18276,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\say-hello-to-html-elements.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08820",
      "title": "Turn an Image into a Link",
      "challengeType": 0,
      "dashedName": "turn-an-image-into-a-link",
      "description": "You can make elements into links by nesting them within an `a` element.\n\nNest your image within an `a` element. Here's an example:\n\n```html\n<a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"Three kittens running towards the camera.\"></a>\n```\n\nRemember to use `#` as your `a` element's `href` property in order to turn it into a dead link.",
      "instructions": "Place the existing image element within an `a` (*anchor*) element.\n\nOnce you've done this, hover over your image with your cursor. Your cursor's normal pointer should become the link clicking pointer. The photo is now a link.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "The existing `img` element should be nested within an `a` element.",
          "testCode": "const anchor = document.querySelectorAll('a')[1];\nconst children = anchor.querySelectorAll(\"img\");\nassert.notEmpty(children);"
        },
        {
          "text": "Your `a` element should be a dead link with an `href` attribute set to `#`.",
          "testCode": "const anchor = document.querySelectorAll('a')[1];\nconst parentHREF = anchor.querySelector(\"img\").parentNode.getAttribute('href');\nassert.match(parentHREF,new RegExp('#'));"
        },
        {
          "text": "Each of your `a` elements should have a closing tag.",
          "testCode": "assert.match(code,/<\\/a>/g);\nassert.match(code,/<a/g);\nassert.strictEqual(code.match(/<\\/a>/g).length, code.match(/<a/g).length)"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cRdBnUr",
        "forumTopicId": 18327,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\turn-an-image-into-a-link.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08802",
      "title": "Uncomment HTML",
      "challengeType": 0,
      "dashedName": "uncomment-html",
      "description": "Commenting is a way that you can leave comments for other developers within your code without affecting the resulting output that is displayed to the end user.\n\nCommenting is also a convenient way to make code inactive without having to delete it entirely.\n\nComments in HTML start with `<!--` and end with a `-->`",
      "instructions": "Uncomment your `h1`, `h2` and `p` elements.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<!--\n<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n-->"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"
        }
      ],
      "tests": [
        {
          "text": "Your `h1` element should be visible on the page by uncommenting it.",
          "testCode": "assert.notEmpty(document.querySelectorAll('h1'));"
        },
        {
          "text": "Your `h2` element should be visible on the page by uncommenting it.",
          "testCode": "assert.notEmpty(document.querySelectorAll('h2'));"
        },
        {
          "text": "Your `p` element should be visible on the page by uncommenting it.",
          "testCode": "assert.notEmpty(document.querySelectorAll('p'));"
        },
        {
          "text": "No trailing comment tags should be visible on the page (i.e. `-->`).",
          "testCode": "const elements = document.querySelectorAll('*');\nconst potentialComments = Array.from(elements).filter(el => el.textContent.includes('-->'));\nassert.notExists(potentialComments[1])"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cBmG9T7",
        "forumTopicId": 18329,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\uncomment-html.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "bad87fee1348bd9aedc08830",
      "title": "Use HTML5 to Require a Field",
      "challengeType": 0,
      "dashedName": "use-html5-to-require-a-field",
      "description": "You can require specific form fields so that your user will not be able to submit your form until he or she has filled them out.\n\nFor example, if you wanted to make a text input field required, you can just add the attribute `required` within your `input` element, like this: `<input type=\"text\" required>`",
      "instructions": "Make your text `input` a `required` field, so that your user can't submit the form without completing this field.\n\nThen try to submit the form without inputting any text. See how your HTML5 form notifies you that the field is required?",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" required placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "Your text `input` element should have the `required` attribute.",
          "testCode": "assert.isTrue(document.querySelector('input').required);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVMPUv/cMd4EcQ",
        "forumTopicId": 18360,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\use-html5-to-require-a-field.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "5c6c06847491271903d37cfd",
      "title": "Use the value attribute with Radio Buttons and Checkboxes",
      "challengeType": 0,
      "dashedName": "use-the-value-attribute-with-radio-buttons-and-checkboxes",
      "description": "When a form gets submitted, the data is sent to the server and includes entries for the options selected. Inputs of type `radio` and `checkbox` report their values from the `value` attribute.\n\nFor example:\n\n```html\n<label for=\"indoor\">\n  <input id=\"indoor\" value=\"indoor\" type=\"radio\" name=\"indoor-outdoor\">Indoor\n</label>\n<label for=\"outdoor\">\n  <input id=\"outdoor\" value=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\">Outdoor\n</label>\n```\n\nHere, you have two `radio` inputs. When the user submits the form with the `indoor` option selected, the form data will include the line: `indoor-outdoor=indoor`. This is from the `name` and `value` attributes of the \"indoor\" input.\n\nIf you omit the `value` attribute, the submitted form data uses the default value, which is `on`. In this scenario, if the user clicked the \"indoor\" option and submitted the form, the resulting form data would be `indoor-outdoor=on`, which is not useful. So the `value` attribute needs to be set to something to identify the option.",
      "instructions": "Give each of the existing `radio` and `checkbox` inputs the `value` attribute. Do not create any new radio or checkbox elements. Use the input label text, in lowercase, as the value for the attribute.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"
        }
      ],
      "tests": [
        {
          "text": "One of your radio buttons should have the `value` attribute of `indoor`.",
          "testCode": "const indoorRadioButton = [...document.querySelectorAll('label > input[type=\"radio\"]')].filter(x => x.value === \"indoor\");\nassert.notEmpty(indoorRadioButton)"
        },
        {
          "text": "One of your radio buttons should have the `value` attribute of `outdoor`.",
          "testCode": "const outdoorRadioButton = [...document.querySelectorAll('label > input[type=\"radio\"]')].filter(x => x.value === \"outdoor\");\nassert.notEmpty(outdoorRadioButton);"
        },
        {
          "text": "One of your checkboxes should have the `value` attribute of `loving`.",
          "testCode": "const lovingCheckbox = [...document.querySelectorAll('label > input[type=\"checkbox\"]')].filter(x => x.value === \"loving\");\nassert.notEmpty(lovingCheckbox);"
        },
        {
          "text": "One of your checkboxes should have the `value` attribute of `lazy`.",
          "testCode": "const lazyCheckbox = [...document.querySelectorAll('label > input[type=\"checkbox\"]')].filter(x => x.value === \"lazy\");\nassert.notEmpty(lazyCheckbox);"
        },
        {
          "text": "One of your checkboxes should have the `value` attribute of `energetic`.",
          "testCode": "const energeticCheckbox =  [...document.querySelectorAll('label > input[type=\"checkbox\"]')].filter(x => x.value === \"energetic\");\nassert.notEmpty(energeticCheckbox);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301099,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\basic-html-and-html5\\use-the-value-attribute-with-radio-buttons-and-checkboxes.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "basic-html-and-html5",
        "name": "Basic Html And Html5"
      }
    },
    {
      "id": "587d78ab367417b2b2512af1",
      "title": "Add Flex Superpowers to the Tweet Embed",
      "challengeType": 0,
      "dashedName": "add-flex-superpowers-to-the-tweet-embed",
      "description": "To the right is the tweet embed that will be used as a practical example. Some of the elements would look better with a different layout. The last challenge demonstrated `display: flex`. Here you'll add it to several components in the tweet embed to start adjusting their positioning.",
      "instructions": "Add the CSS property `display: flex` to all of the following items - note that the selectors are already set up in the CSS:\n\n`header`, the header's `.profile-name`, the header's `.follow-btn`, the header's `h3` and `h4`, the `footer`, and the footer's `.stats`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n\n  }\n  footer .stats {\n\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    display: flex;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "tests": [
        {
          "text": "Your `.follow-btn` should be rendered on the page. Be sure to turn off any extensions such as ad blockers.",
          "testCode": "const followButton = document.querySelector('.follow-btn');\nconst displayStyle = window.getComputedStyle(followButton)['display'];\nassert.isNotNull(followButton);\nassert.notStrictEqual(displayStyle, 'none');"
        },
        {
          "text": "Your `header` should have a `display` property set to `flex`.",
          "testCode": "const header = document.querySelector('header');\nconst displayStyle = window.getComputedStyle(header)['display'];\nassert.strictEqual(displayStyle, 'flex');"
        },
        {
          "text": "Your `footer` should have a `display` property set to `flex`.",
          "testCode": "const footer = document.querySelector('footer');\nconst displayStyle = window.getComputedStyle(footer)['display'];\nassert.strictEqual(displayStyle, 'flex');"
        },
        {
          "text": "Your `h3` should have a `display` property set to `flex`.",
          "testCode": "const h3Element = document.querySelector('h3');\nconst displayStyle = window.getComputedStyle(h3Element)['display'];\nassert.strictEqual(displayStyle, 'flex');"
        },
        {
          "text": "Your `h4` should have a `display` property set to `flex`.",
          "testCode": "const h4Element = document.querySelector('h4');\nconst displayStyle = window.getComputedStyle(h4Element)['display'];\nassert.strictEqual(displayStyle, 'flex');"
        },
        {
          "text": "Your `.profile-name` should have a `display` property set to `flex`.",
          "testCode": "const profileName = document.querySelector('.profile-name');\nconst displayStyle = window.getComputedStyle(profileName)['display'];\nassert.strictEqual(displayStyle, 'flex');"
        },
        {
          "text": "Your `.follow-btn` should have a `display` property set to `flex`.",
          "testCode": "const followButton = document.querySelector('.follow-btn');\nconst displayStyle = window.getComputedStyle(followButton)['display'];\nassert.strictEqual(displayStyle, 'flex');"
        },
        {
          "text": "Your `.stats` should have a `display` property set to `flex`.",
          "testCode": "const stats = document.querySelector('.stats');\nconst displayStyle = window.getComputedStyle(stats)['display'];\nassert.strictEqual(displayStyle, 'flex');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/c9W7MhM",
        "forumTopicId": 301100,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\add-flex-superpowers-to-the-tweet-embed.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ad367417b2b2512af8",
      "title": "Align Elements Using the align-items Property",
      "challengeType": 0,
      "dashedName": "align-elements-using-the-align-items-property",
      "description": "The `align-items` property is similar to `justify-content`. Recall that the `justify-content` property aligned flex items along the main axis. For rows, the main axis is a horizontal line and for columns it is a vertical line.\n\nFlex containers also have a **cross axis** which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal.\n\nCSS offers the `align-items` property to align flex items along the cross axis. For a row, it tells CSS how to push the items in the entire row up or down within the container. And for a column, how to push all the items left or right within the container.\n\nThe different values available for `align-items` include:\n\n<ul><li><code>flex-start</code>: aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.</li><li><code>flex-end</code>: aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.</li><li><code>center</code>: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).</li><li><code>stretch</code>: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom. This is the default value if no <code>align-items</code> value is specified.</li><li><code>baseline</code>: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.</li></ul>",
      "instructions": "An example helps show this property in action. Add the CSS property `align-items` to the `#box-container` element, and give it a value of `center`.\n\n**Bonus**  \nTry the other options for the `align-items` property in the code editor to see their differences. But note that a value of `center` is the only one that will pass this challenge.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 200px;\n    font-size: 24px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 200px;\n    font-size: 18px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"><p>Hello</p></div>\n  <div id=\"box-2\"><p>Goodbye</p></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n    align-items: center;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 200px;\n    font-size: 24px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 200px;\n    font-size: 18px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"><p>Hello</p></div>\n  <div id=\"box-2\"><p>Goodbye</p></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-container` element should have an `align-items` property set to a value of `center`.",
          "testCode": "const boxContainer = document.querySelector('#box-container');\nconst alignment = window.getComputedStyle(boxContainer)['align-items'];\nassert.strictEqual(alignment, 'center');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/c8aggtk",
        "forumTopicId": 301101,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\align-elements-using-the-align-items-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ac367417b2b2512af6",
      "title": "Align Elements Using the justify-content Property",
      "challengeType": 0,
      "dashedName": "align-elements-using-the-justify-content-property",
      "description": "Sometimes the flex items within a flex container do not fill all the space in the container. It is common to want to tell CSS how to align and space out the flex items a certain way. Fortunately, the `justify-content` property has several options to do this. But first, there is some important terminology to understand before reviewing those options.\n\n<a href=\"https://www.freecodecamp.org/news/flexbox-the-ultimate-css-flex-cheatsheet/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">For more info about flex-box properties read here</a>\n\nRecall that setting a flex container as a row places the flex items side-by-side from left-to-right. A flex container set as a column places the flex items in a vertical stack from top-to-bottom. For each, the direction the flex items are arranged is called the **main axis**. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items.\n\nThere are several options for how to space the flex items along the line that is the main axis. One of the most commonly used is `justify-content: center;`, which aligns all the flex items to the center inside the flex container. Other options include:\n\n<ul><li><code>flex-start</code>: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container. This is the default alignment if no <code>justify-content</code> is specified.</li><li><code>flex-end</code>: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.</li><li><code>space-between</code>: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the remaining space is distributed evenly among the other items.</li><li><code>space-around</code>: similar to <code>space-between</code> but the first and last items are not locked to the edges of the container, the space is distributed around all the items with a half space on either end of the flex container.</li><li><code>space-evenly</code>: Distributes space evenly between the flex items with a full space at either end of the flex container.</li></ul>",
      "instructions": "An example helps show this property in action. Add the CSS property `justify-content` to the `#box-container` element, and give it a value of `center`.\n\n**Bonus**  \nTry the other options for the `justify-content` property in the code editor to see their differences. But note that a value of `center` is the only one that will pass this challenge.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 100%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 100%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n    justify-content: center;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 100%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 100%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-container` element should have a `justify-content` property set to a value of `center`.",
          "testCode": "const boxContainer = document.querySelector('#box-container');\nconst justifyDirection =\n  window.getComputedStyle(boxContainer)['justify-content'];\nassert.strictEqual(justifyDirection, 'center');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/c43gnHm",
        "forumTopicId": 301102,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\align-elements-using-the-justify-content-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ac367417b2b2512af5",
      "title": "Apply the flex-direction Property to Create a Column in the Tweet Embed",
      "challengeType": 0,
      "dashedName": "apply-the-flex-direction-property-to-create-a-column-in-the-tweet-embed",
      "description": "The tweet embed `header` and `footer` used the `flex-direction` property earlier with a row value. Similarly, the items inside the `.profile-name` element would work well stacked as a column.",
      "instructions": "Add the CSS property `flex-direction` to the header's `.profile-name` element and set the value to `column`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header,\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header,\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "tests": [
        {
          "text": "Your `.follow-btn` should be rendered on the page. Be sure to turn off any extensions such as ad blockers.",
          "testCode": "const followButton = document.querySelector('.follow-btn');\nconst displayStyle = window.getComputedStyle(followButton)['display'];\nassert.isNotNull(followButton);\nassert.notStrictEqual(displayStyle, 'none');"
        },
        {
          "text": "The `.profile-name` element should have a `flex-direction` property set to `column`.",
          "testCode": "const profileName = document.querySelector('.profile-name');\nconst flexDirection = window.getComputedStyle(profileName)['flex-direction'];\nassert.strictEqual(flexDirection, 'column');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cnzdVC9",
        "forumTopicId": 301103,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\apply-the-flex-direction-property-to-create-a-column-in-the-tweet-embed.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ab367417b2b2512af3",
      "title": "Apply the flex-direction Property to Create Rows in the Tweet Embed",
      "challengeType": 0,
      "dashedName": "apply-the-flex-direction-property-to-create-rows-in-the-tweet-embed",
      "description": "The `header` and `footer` in the tweet embed example have child items that could be arranged as rows using the `flex-direction` property. This tells CSS to align the children horizontally.",
      "instructions": "Add the CSS property `flex-direction` to both the `header` and `footer` and set the value to `row`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    display: flex;\n\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "tests": [
        {
          "text": "Your `.follow-btn` should be rendered on the page. Be sure to turn off any extensions such as ad blockers.",
          "testCode": "const followButton = document.querySelector('.follow-btn');\nconst displayStyle = window.getComputedStyle(followButton)['display'];\nassert.isNotNull(followButton);\nassert.notStrictEqual(displayStyle, 'none');"
        },
        {
          "text": "The `header` should have a `flex-direction` property set to `row`.",
          "testCode": "assert.match(code, /header\\s*?{[^}]*?flex-direction:\\s*?row;/g);"
        },
        {
          "text": "The `footer` should have a `flex-direction` property set to `row`.",
          "testCode": "assert.match(code, /footer\\s*?{[^}]*?flex-direction:\\s*?row;/g);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cJb8yuq",
        "forumTopicId": 301104,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\apply-the-flex-direction-property-to-create-rows-in-the-tweet-embed.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ab367417b2b2512af0",
      "title": "Use display: flex to Position Two Boxes",
      "challengeType": 0,
      "dashedName": "use-display-flex-to-position-two-boxes",
      "description": "This section uses alternating challenge styles to show how to use CSS to position elements in a flexible way. First, a challenge will explain theory, then a practical challenge using a simple tweet component will apply the flexbox concept.\n\nPlacing the CSS property `display: flex;` on an element allows you to use other flex properties to build a responsive page.",
      "instructions": "Add the CSS property `display` to `#box-container` and set its value to `flex`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    height: 500px;\n\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    height: 500px;\n    display: flex;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "`#box-container` should have the `display` property set to a value of `flex`.",
          "testCode": "const boxContainer = document.querySelector('#box-container');\nconst displayStyle = window.getComputedStyle(boxContainer)['display'];\nassert.strictEqual(displayStyle, 'flex');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cgz3QS7",
        "forumTopicId": 301105,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-display-flex-to-position-two-boxes.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ad367417b2b2512af9",
      "title": "Use the align-items Property in the Tweet Embed",
      "challengeType": 0,
      "dashedName": "use-the-align-items-property-in-the-tweet-embed",
      "description": "The last challenge introduced the `align-items` property and gave an example. This property can be applied to a few tweet embed elements to align the flex items inside them.",
      "instructions": "Add the CSS property `align-items` to the header's `.follow-btn` element. Set the value to `center`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header,\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header,\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    align-items: center;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "tests": [
        {
          "text": "Your `.follow-btn` should be rendered on the page. Be sure to turn off any extensions such as ad blockers.",
          "testCode": "const followButton = document.querySelector('.follow-btn');\nconst displayStyle = window.getComputedStyle(followButton)['display'];\nassert.isNotNull(followButton);\nassert.notStrictEqual(displayStyle, 'none');"
        },
        {
          "text": "The `.follow-btn` element should have the `align-items` property set to a value of `center`.",
          "testCode": "const followButton = document.querySelector('.follow-btn');\nconst alignItems = window.getComputedStyle(followButton)['align-items'];\nassert.strictEqual(alignItems, 'center');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cd3PNfq",
        "forumTopicId": 301106,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-align-items-property-in-the-tweet-embed.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78af367417b2b2512b00",
      "title": "Use the align-self Property",
      "challengeType": 0,
      "dashedName": "use-the-align-self-property",
      "description": "The final property for flex items is `align-self`. This property allows you to adjust each item's alignment individually, instead of setting them all at once. This is useful since other common adjustment techniques using the CSS properties `float`, `clear`, and `vertical-align` do not work on flex items.\n\n`align-self` accepts the same values as `align-items` and will override any value set by the `align-items` property.",
      "instructions": "Add the CSS property `align-self` to both `#box-1` and `#box-2`. Give `#box-1` a value of `center` and give `#box-2` a value of `flex-end`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    align-self: center;\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    align-self: flex-end;\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-1` element should have the `align-self` property set to a value of `center`.",
          "testCode": "const boxOne = document.querySelector('#box-1');\nconst alignment = window.getComputedStyle(boxOne)['align-self'];\nassert.strictEqual(alignment, 'center');"
        },
        {
          "text": "The `#box-2` element should have the `align-self` property set to a value of `flex-end`.",
          "testCode": "const boxTwo = document.querySelector('#box-2');\nconst alignment = window.getComputedStyle(boxTwo)['align-self'];\nassert.strictEqual(alignment, 'flex-end');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cMbvzfv",
        "forumTopicId": 301107,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-align-self-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ae367417b2b2512afd",
      "title": "Use the flex-basis Property to Set the Initial Size of an Item",
      "challengeType": 0,
      "dashedName": "use-the-flex-basis-property-to-set-the-initial-size-of-an-item",
      "description": "The `flex-basis` property specifies the initial size of the item before CSS makes adjustments with `flex-shrink` or `flex-grow`.\n\nThe units used by the `flex-basis` property are the same as other size properties (`px`, `em`, `%`, etc.). The value `auto` sizes items based on the content.",
      "instructions": "Set the initial size of the boxes using `flex-basis`. Add the CSS property `flex-basis` to both `#box-1` and `#box-2`. Give `#box-1` a value of `10em` and `#box-2` a value of `20em`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    flex-basis: 10em;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n    flex-basis: 20em;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-1` element should have the `flex-basis` property.",
          "testCode": "const boxOne = document.querySelector('#box-1');\nconst flexBasis = window.getComputedStyle(boxOne)['flex-basis'];\nassert.notStrictEqual(flexBasis, 'auto');"
        },
        {
          "text": "The `#box-1` element should have a `flex-basis` value of `10em`.",
          "testCode": "assert.match(code, /#box-1\\s*?{\\s*?.*?\\s*?.*?\\s*?flex-basis:\\s*?10em;/g);"
        },
        {
          "text": "The `#box-2` element should have the `flex-basis` property.",
          "testCode": "const boxTwo = document.querySelector('#box-2');\nconst flexBasis = window.getComputedStyle(boxTwo)['flex-basis'];\nassert.notStrictEqual(flexBasis, 'auto');"
        },
        {
          "text": "The `#box-2` element should have a `flex-basis` value of `20em`.",
          "testCode": "assert.match(code, /#box-2\\s*?{\\s*?.*?\\s*?.*?\\s*?flex-basis:\\s*?20em;/g);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/c3d9nCa",
        "forumTopicId": 301108,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-flex-basis-property-to-set-the-initial-size-of-an-item.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ac367417b2b2512af4",
      "title": "Use the flex-direction Property to Make a Column",
      "challengeType": 0,
      "dashedName": "use-the-flex-direction-property-to-make-a-column",
      "description": "The last two challenges used the `flex-direction` property set to `row`. This property can also create a column by vertically stacking the children of a flex container.",
      "instructions": "Add the CSS property `flex-direction` to the `#box-container` element, and give it a value of `column`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n    flex-direction: column;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-container` element should have a `flex-direction` property set to `column`.",
          "testCode": "const boxContainer = document.querySelector('#box-container');\nconst flexDirection = window.getComputedStyle(boxContainer)['flex-direction'];\nassert.strictEqual(flexDirection, 'column');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cZmWeA4",
        "forumTopicId": 301109,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-flex-direction-property-to-make-a-column.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ab367417b2b2512af2",
      "title": "Use the flex-direction Property to Make a Row",
      "challengeType": 0,
      "dashedName": "use-the-flex-direction-property-to-make-a-row",
      "description": "Adding `display: flex` to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns. You do this by adding the `flex-direction` property to the parent item and setting it to row or column. Creating a row will align the children horizontally, and creating a column will align the children vertically.\n\nOther options for `flex-direction` are `row-reverse` and `column-reverse`.\n\n**Note:** The default value for the `flex-direction` property is `row`.",
      "instructions": "Add the CSS property `flex-direction` to the `#box-container` element, and give it a value of `row-reverse`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n    flex-direction: row-reverse;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-container` element should have a `flex-direction` property set to `row-reverse`.",
          "testCode": "const boxContainer = document.querySelector('#box-container');\nconst flexDirection = window.getComputedStyle(boxContainer)['flex-direction'];\nassert.strictEqual(flexDirection, 'row-reverse');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cBEkbfJ",
        "forumTopicId": 301110,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-flex-direction-property-to-make-a-row.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ae367417b2b2512afc",
      "title": "Use the flex-grow Property to Expand Items",
      "challengeType": 0,
      "dashedName": "use-the-flex-grow-property-to-expand-items",
      "description": "The opposite of `flex-shrink` is the `flex-grow` property. Recall that `flex-shrink` controls the size of the items when the container shrinks. The `flex-grow` property controls the size of items when the parent container expands.\n\nUsing a similar example from the last challenge, if one item has a `flex-grow` value of `1` and the other has a `flex-grow` value of `3`, the one with the value of `3` will grow three times as much as the other.",
      "instructions": "Add the CSS property `flex-grow` to both `#box-1` and `#box-2`. Give `#box-1` a value of `1` and `#box-2` a value of `2`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    flex-grow: 1;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n    flex-grow: 2;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-1` element should have the `flex-grow` property set to a value of `1`.",
          "testCode": "const boxOne = document.querySelector('#box-1');\nconst flexGrow = window.getComputedStyle(boxOne)['flex-grow'];\nassert.equal(flexGrow, '1');"
        },
        {
          "text": "The `#box-2` element should have the `flex-grow` property set to a value of `2`.",
          "testCode": "const boxTwo = document.querySelector('#box-2');\nconst flexGrow = window.getComputedStyle(boxTwo)['flex-grow'];\nassert.equal(flexGrow, '2');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/c2p78cg",
        "forumTopicId": 301111,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-flex-grow-property-to-expand-items.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ae367417b2b2512afe",
      "title": "Use the flex Shorthand Property",
      "challengeType": 0,
      "dashedName": "use-the-flex-shorthand-property",
      "description": "There is a shortcut available to set several flex properties at once. The `flex-grow`, `flex-shrink`, and `flex-basis` properties can all be set together by using the `flex` property.\n\nFor example, `flex: 1 0 10px;` will set the item to `flex-grow: 1;`, `flex-shrink: 0;`, and `flex-basis: 10px;`.\n\nThe default property settings are `flex: 0 1 auto;`.",
      "instructions": "Add the CSS property `flex` to both `#box-1` and `#box-2`. Give `#box-1` the values so its `flex-grow` is `2`, its `flex-shrink` is `2`, and its `flex-basis` is `150px`. Give `#box-2` the values so its `flex-grow` is `1`, its `flex-shrink` is `1`, and its `flex-basis` is `150px`.\n\nThese values will cause `#box-1` to grow to fill the extra space at twice the rate of `#box-2` when the container is greater than 300px and shrink at twice the rate of `#box-2` when the container is less than 300px. 300px is the combined size of the `flex-basis` values of the two boxes.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    flex: 2 2 150px;\n    height: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    flex: 1 1 150px;\n    height: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-1` element should have the `flex` property set to a value of `2 2 150px`.\n\n```js\nconst boxOne = document.querySelector('#box-1');\nconst flexGrow = window.getComputedStyle(boxOne)['flex-grow'];\nconst flexShrink = window.getComputedStyle(boxOne)['flex-shrink'];\nconst flexBasis = window.getComputedStyle(boxOne)['flex-basis'];\n\nassert.equal(flexGrow, '2');\nassert.equal(flexShrink, '2');\nassert.equal(flexBasis, '150px');\n```\n\nThe `#box-2` element should have the `flex` property set to a value of `1 1 150px`.\n\n```js\nconst boxTwo = document.querySelector('#box-2');\nconst flexGrow = window.getComputedStyle(boxTwo)['flex-grow'];\nconst flexShrink = window.getComputedStyle(boxTwo)['flex-shrink'];\nconst flexBasis = window.getComputedStyle(boxTwo)['flex-basis'];\n\nassert.equal(flexGrow, '1');\nassert.equal(flexShrink, '1');\nassert.equal(flexBasis, '150px');\n```\n\nYour code should use the `flex` property for `#box-1` and `#box-2`.",
          "testCode": "assert.lengthOf(code.match(/flex:\\s*?\\d\\s+?\\d\\s+?150px;/g), 2);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cbpW2tE",
        "forumTopicId": 301112,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-flex-shorthand-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ad367417b2b2512afb",
      "title": "Use the flex-shrink Property to Shrink Items",
      "challengeType": 0,
      "dashedName": "use-the-flex-shrink-property-to-shrink-items",
      "description": "So far, all the properties in the challenges apply to the flex container (the parent of the flex items). However, there are several useful properties for the flex items.\n\nThe first is the `flex-shrink` property. When it's used, it allows an item to shrink if the flex container is too small. Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it.\n\nThe `flex-shrink` property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a `flex-shrink` value of `1` and the other has a `flex-shrink` value of `3`, the one with the value of `3` will shrink three times as much as the other.",
      "instructions": "Add the CSS property `flex-shrink` to both `#box-1` and `#box-2`. Give `#box-1` a value of `1` and `#box-2` a value of `2`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 100%;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 100%;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 100%;\n    height: 200px;\n    flex-shrink: 1;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 100%;\n    height: 200px;\n    flex-shrink: 2;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-1` element should have the `flex-shrink` property set to a value of `1`.",
          "testCode": "const boxOne = document.querySelector('#box-1');\nconst flexShrink = window.getComputedStyle(boxOne)['flex-shrink'];\nassert.equal(flexShrink, '1');"
        },
        {
          "text": "The `#box-2` element should have the `flex-shrink` property set to a value of `2`.",
          "testCode": "const boxTwo = document.querySelector('#box-2');\nconst flexShrink = window.getComputedStyle(boxTwo)['flex-shrink'];\nassert.equal(flexShrink, '2');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cd3PBfr",
        "forumTopicId": 301113,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-flex-shrink-property-to-shrink-items.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ad367417b2b2512afa",
      "title": "Use the flex-wrap Property to Wrap a Row or Column",
      "challengeType": 0,
      "dashedName": "use-the-flex-wrap-property-to-wrap-a-row-or-column",
      "description": "CSS flexbox has a feature to split a flex container into multiple rows (or columns). By default, a flex container will fit all flex items together. For example, a row will all be on one line.\n\nHowever, using the `flex-wrap` property tells CSS to wrap items. This means extra items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container.\n\nCSS also has options for the direction of the wrap:\n\n<ul><li><code>nowrap</code>: this is the default setting, and does not wrap items.</li><li><code>wrap</code>: wraps items onto multiple lines from top-to-bottom if they are in rows and left-to-right if they are in columns.</li><li><code>wrap-reverse</code>: wraps items onto multiple lines from bottom-to-top if they are in rows and right-to-left if they are in columns.</li></ul>",
      "instructions": "The current layout has too many boxes for one row. Add the CSS property `flex-wrap` to the `#box-container` element, and give it a value of `wrap`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 100%;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 50%;\n  }\n  #box-3 {\n    background-color: violet;\n    width: 25%;\n    height: 50%;\n  }\n  #box-4 {\n    background-color: yellow;\n    width: 25%;\n    height: 50%;\n  }\n  #box-5 {\n    background-color: green;\n    width: 25%;\n    height: 50%;\n  }\n  #box-6 {\n    background-color: black;\n    width: 25%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n  <div id=\"box-3\"></div>\n  <div id=\"box-4\"></div>\n  <div id=\"box-5\"></div>\n  <div id=\"box-6\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 100%;\n    flex-wrap: wrap;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 50%;\n  }\n  #box-3 {\n    background-color: violet;\n    width: 25%;\n    height: 50%;\n  }\n  #box-4 {\n    background-color: yellow;\n    width: 25%;\n    height: 50%;\n  }\n  #box-5 {\n    background-color: green;\n    width: 25%;\n    height: 50%;\n  }\n  #box-6 {\n    background-color: black;\n    width: 25%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n  <div id=\"box-3\"></div>\n  <div id=\"box-4\"></div>\n  <div id=\"box-5\"></div>\n  <div id=\"box-6\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-container` element should have the `flex-wrap` property set to a value of `wrap`.",
          "testCode": "const boxContainer = document.querySelector('#box-container');\nconst flexWrap = window.getComputedStyle(boxContainer)['flex-wrap'];\nassert.strictEqual(flexWrap, 'wrap');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cQv9ZtG",
        "forumTopicId": 301114,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-flex-wrap-property-to-wrap-a-row-or-column.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ac367417b2b2512af7",
      "title": "Use the justify-content Property in the Tweet Embed",
      "challengeType": 0,
      "dashedName": "use-the-justify-content-property-in-the-tweet-embed",
      "description": "The last challenge showed an example of the `justify-content` property. For the tweet embed, this property can be applied to align the items in the `.profile-name` element.",
      "instructions": "Add the CSS property `justify-content` to the header's `.profile-name` element and set the value to any of the options from the last challenge.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header,\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header,\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3,\n  header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img\n    src=\"https://cdn.freecodecamp.org/curriculum/legacy-css-flexbox/quincy-twitter-photo.jpg\"\n    alt=\"Quincy Larson's profile picture\"\n    class=\"profile-thumbnail\"\n  />\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>\n    I meet so many people who are in search of that one trick that will help\n    them work smart. Even if you work smart, you still have to work hard.\n  </p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr />\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\"><strong>107</strong> Retweets</div>\n    <div class=\"likes\"><strong>431</strong> Likes</div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"
        }
      ],
      "tests": [
        {
          "text": "Your `.follow-btn` should be rendered on the page. Be sure to turn off any extensions such as ad blockers.",
          "testCode": "const followButton = document.querySelector('.follow-btn');\nconst displayStyle = window.getComputedStyle(followButton)['display'];\nassert.isNotNull(followButton);\nassert.notStrictEqual(displayStyle, 'none');"
        },
        {
          "text": "The `.profile-name` element should have the `justify-content` property set to any of these values: `center`, `flex-start`, `flex-end`, `space-between`, `space-around`, or `space-evenly`.",
          "testCode": "assert.match(\n  code,\n  /header\\s.profile-name\\s*{\\s*?.*?\\s*?.*?\\s*?\\s*?.*?\\s*?justify-content\\s*:\\s*(center|flex-start|flex-end|space-between|space-around|space-evenly)\\s*;/g\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/c43GgTa",
        "forumTopicId": 301115,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-justify-content-property-in-the-tweet-embed.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "587d78ae367417b2b2512aff",
      "title": "Use the order Property to Rearrange Items",
      "challengeType": 0,
      "dashedName": "use-the-order-property-to-rearrange-items",
      "description": "The `order` property is used to tell CSS the order of how flex items appear in the flex container. By default, items will appear in the same order they come in the source HTML. The property takes numbers as values, and negative numbers can be used.",
      "instructions": "Add the CSS property `order` to both `#box-1` and `#box-2`. Give `#box-1` a value of `2` and give `#box-2` a value of `1`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    order: 2;\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    order: 1;\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `#box-1` element should have the `order` property set to a value of `2`.",
          "testCode": "const boxOne = document.querySelector('#box-1');\nconst order = window.getComputedStyle(boxOne)['order'];\nassert.strictEqual(order, '2');"
        },
        {
          "text": "The `#box-2` element should have the `order` property set to a value of `1`.",
          "testCode": "const boxTwo = document.querySelector('#box-2');\nconst order = window.getComputedStyle(boxTwo)['order'];\nassert.strictEqual(order, '1');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pVaDAv/cMbvNAG",
        "forumTopicId": 301116,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-flexbox\\use-the-order-property-to-rearrange-items.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-flexbox",
        "name": "Css Flexbox"
      }
    },
    {
      "id": "5a9036d038fddaf9a66b5d32",
      "title": "Add Columns with grid-template-columns",
      "challengeType": 0,
      "dashedName": "add-columns-with-grid-template-columns",
      "description": "Simply creating a grid element doesn't get you very far. You need to define the structure of the grid as well. To add some columns to the grid, use the `grid-template-columns` property on a grid container as demonstrated below:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 50px 50px;\n}\n```\n\nThis will give your grid two columns that are each 50px wide. The number of parameters given to the `grid-template-columns` property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.",
      "instructions": "Give the grid container three columns that are each `100px` wide.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .d1 {\n    background: LightSkyBlue;\n  }\n  .d2 {\n    background: LightSalmon;\n  }\n  .d3 {\n    background: PaleTurquoise;\n  }\n  .d4 {\n    background: LightPink;\n  }\n  .d5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-template-columns: 100px 100px 100px;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-template-columns` property with three units of `100px`.",
          "testCode": "const templateColumns = new __helpers.CSSHelp(document).getStyle(\n  '.container'\n)?.gridTemplateColumns;\nassert.strictEqual(templateColumns, '100px 100px 100px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/c7NzDHv",
        "forumTopicId": 301117,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\add-columns-with-grid-template-columns.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a9036ee38fddaf9a66b5d37",
      "title": "Add Gaps Faster with grid-gap",
      "challengeType": 0,
      "dashedName": "add-gaps-faster-with-grid-gap",
      "description": "`grid-gap` is a shorthand property for `grid-row-gap` and `grid-column-gap` from the previous two challenges that's more convenient to use. If `grid-gap` has one value, it will create a gap between all rows and columns. However, if there are two values, it will use the first one to set the gap between the rows and the second value for the columns.",
      "instructions": "Use `grid-gap` to introduce a `10px` gap between the rows and `20px` gap between the columns.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .d1 {\n    background: LightSkyBlue;\n  }\n  .d2 {\n    background: LightSalmon;\n  }\n  .d3 {\n    background: PaleTurquoise;\n  }\n  .d4 {\n    background: LightPink;\n  }\n  .d5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-gap: 10px 20px;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-gap` property that introduces a `10px` gap between the rows and a `20px` gap between the columns.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*grid-gap\\s*?:\\s*?10px\\s+?20px\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/ca2qVtv",
        "forumTopicId": 301118,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\add-gaps-faster-with-grid-gap.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a9036e138fddaf9a66b5d33",
      "title": "Add Rows with grid-template-rows",
      "challengeType": 0,
      "dashedName": "add-rows-with-grid-template-rows",
      "description": "The grid you created in the last challenge will set the number of rows automatically. To adjust the rows manually, use the `grid-template-rows` property in the same way you used `grid-template-columns` in the previous challenge.",
      "instructions": "Add two rows to the grid that are `50px` tall each.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .d1 {\n    background: LightSkyBlue;\n  }\n  .d2 {\n    background: LightSalmon;\n  }\n  .d3 {\n    background: PaleTurquoise;\n  }\n  .d4 {\n    background: LightPink;\n  }\n  .d5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-template-rows: 50px 50px;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-template-rows` property with two units of `50px`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*grid-template-rows\\s*?:\\s*?50px\\s*?50px\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cbp9Pua",
        "forumTopicId": 301119,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\add-rows-with-grid-template-rows.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a90376038fddaf9a66b5d3c",
      "title": "Align All Items Horizontally using justify-items",
      "challengeType": 0,
      "dashedName": "align-all-items-horizontally-using-justify-items",
      "description": "Sometimes you want all the items in your CSS Grid to share the same alignment. You can use the previously learned properties and align them individually, or you can align them all at once horizontally by using `justify-items` on your grid container. This property can accept all the same values you learned about in the previous two challenges, the difference being that it will move **all** the items in our grid to the desired alignment.",
      "instructions": "Use this property to center all our items horizontally.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    justify-items: center;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `justify-items` property that has the value of `center`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*justify-items\\s*?:\\s*?center\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cJbpECn",
        "forumTopicId": 301120,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\align-all-items-horizontally-using-justify-items.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fdf869fb03452672e45b",
      "title": "Align All Items Vertically using align-items",
      "challengeType": 0,
      "dashedName": "align-all-items-vertically-using-align-items",
      "description": "Using the `align-items` property on a grid container will set the vertical alignment for all the items in our grid.",
      "instructions": "Use it now to move all the items to the end of each cell.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    align-items: end;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `align-items` property that has the value of `end`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*align-items\\s*?:\\s*?end\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/ckzPeUv",
        "forumTopicId": 301121,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\align-all-items-vertically-using-align-items.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a90374338fddaf9a66b5d3a",
      "title": "Align an Item Horizontally using justify-self",
      "challengeType": 0,
      "dashedName": "align-an-item-horizontally-using-justify-self",
      "description": "In CSS Grid, the content of each item is located in a box which is referred to as a <dfn>cell</dfn>. You can align the content's position within its cell horizontally using the `justify-self` property on a grid item. By default, this property has a value of `stretch`, which will make the content fill the whole width of the cell. This CSS Grid property accepts other values as well:\n\n`start`: aligns the content at the left of the cell,\n\n`center`: aligns the content in the center of the cell,\n\n`end`: aligns the content at the right of the cell.",
      "instructions": "Use the `justify-self` property to center the item with the class `item2`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item2 {\n    justify-self: center;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`item2` class should have a `justify-self` property that has the value of `center`.",
          "testCode": "assert.match(\n  code,\n  /.item2\\s*?{[\\s\\S]*justify-self\\s*?:\\s*?center\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cJbpKHq",
        "forumTopicId": 301122,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\align-an-item-horizontally-using-justify-self.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a90375238fddaf9a66b5d3b",
      "title": "Align an Item Vertically using align-self",
      "challengeType": 0,
      "dashedName": "align-an-item-vertically-using-align-self",
      "description": "Just as you can align an item horizontally, there's a way to align an item vertically as well. To do this, you use the `align-self` property on an item. This property accepts all of the same values as `justify-self` from the last challenge.",
      "instructions": "Align the item with the class `item3` vertically at the `end`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item3 {\n    align-self: end;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`item3` class should have a `align-self` property that has the value of `end`.",
          "testCode": "assert.match(code, /.item3\\s*?{[\\s\\S]*align-self\\s*?:\\s*?end\\s*?;[\\s\\S]*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cmzd4fz",
        "forumTopicId": 301123,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\align-an-item-vertically-using-align-self.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a9036ee38fddaf9a66b5d35",
      "title": "Create a Column Gap Using grid-column-gap",
      "challengeType": 0,
      "dashedName": "create-a-column-gap-using-grid-column-gap",
      "description": "So far in the grids you have created, the columns have all been tight up against each other. Sometimes you want a gap in between the columns. To add a gap between the columns, use the `grid-column-gap` property like this:\n\n```css\ngrid-column-gap: 10px;\n```\n\nThis creates 10px of empty space between all of our columns.",
      "instructions": "Give the columns in the grid a `20px` gap.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .d1 {\n    background: LightSkyBlue;\n  }\n  .d2 {\n    background: LightSalmon;\n  }\n  .d3 {\n    background: PaleTurquoise;\n  }\n  .d4 {\n    background: LightPink;\n  }\n  .d5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n   \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-column-gap: 20px;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-column-gap` property that has the value of `20px`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*grid-column-gap\\s*?:\\s*?20px\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cVZ8vfD",
        "forumTopicId": 301124,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\create-a-column-gap-using-grid-column-gap.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a9036ee38fddaf9a66b5d36",
      "title": "Create a Row Gap using grid-row-gap",
      "challengeType": 0,
      "dashedName": "create-a-row-gap-using-grid-row-gap",
      "description": "You can add a gap in between the rows of a grid using `grid-row-gap` in the same way that you added a gap in between columns in the previous challenge.",
      "instructions": "Create a gap for the rows that is `5px` tall.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .d1 {\n    background: LightSkyBlue;\n  }\n  .d2 {\n    background: LightSalmon;\n  }\n  .d3 {\n    background: PaleTurquoise;\n  }\n  .d4 {\n    background: LightPink;\n  }\n  .d5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-row-gap: 5px;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-row-gap` property that has the value of `5px`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*grid-row-gap\\s*?:\\s*?5px\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cPbJ2Cv",
        "forumTopicId": 301125,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\create-a-row-gap-using-grid-row-gap.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe5469fb03452672e461",
      "title": "Create Flexible Layouts Using auto-fill",
      "challengeType": 0,
      "dashedName": "create-flexible-layouts-using-auto-fill",
      "description": "The repeat function comes with an option called <dfn>auto-fill</dfn>. This allows you to automatically insert as many rows or columns of your desired size as possible depending on the size of the container. You can create flexible layouts when combining `auto-fill` with `minmax`, like this:\n\n```css\nrepeat(auto-fill, minmax(60px, 1fr));\n```\n\nWhen the container changes size, this setup keeps inserting 60px columns and stretching them until it can insert another one. **Note:** If your container can't fit all your items on one row, it will move them down to a new one.",
      "instructions": "In the first grid, use `auto-fill` with `repeat` to fill the grid with columns that have a minimum width of `60px` and maximum of `1fr`. Then resize the preview to see auto-fill in action.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n\n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n\n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-template-columns` property with `repeat` and `auto-fill` that will fill the grid with columns that have a minimum width of `60px` and maximum of `1fr`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?auto-fill\\s*?,\\s*?minmax\\s*?\\(\\s*?60px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cmzdycW",
        "forumTopicId": 301126,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\create-flexible-layouts-using-auto-fill.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe6269fb03452672e462",
      "title": "Create Flexible Layouts Using auto-fit",
      "challengeType": 0,
      "dashedName": "create-flexible-layouts-using-auto-fit",
      "description": "`auto-fit` works almost identically to `auto-fill`. The only difference is that when the container's size exceeds the size of all the items combined, `auto-fill` keeps inserting empty rows or columns and pushes your items to the side, while `auto-fit` collapses those empty rows or columns and stretches your items to fit the size of the container.\n\n**Note:** If your container can't fit all your items on one row, it will move them down to a new one.",
      "instructions": "In the second grid, use `auto-fit` with `repeat` to fill the grid with columns that have a minimum width of `60px` and maximum of `1fr`. Then resize the preview to see the difference.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n\n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n  }\n  .container2 {\n    grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container2` class should have a `grid-template-columns` property with `repeat` and `auto-fit` that will fill the grid with columns that have a minimum width of `60px` and a maximum of `1fr`.",
          "testCode": "assert.match(\n  code,\n  /.container2\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?auto-fit\\s*?,\\s*?minmax\\s*?\\(\\s*?60px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/c3dPph8",
        "forumTopicId": 301127,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\create-flexible-layouts-using-auto-fit.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe8569fb03452672e464",
      "title": "Create Grids within Grids",
      "challengeType": 0,
      "dashedName": "create-grids-within-grids",
      "description": "Turning an element into a grid only affects the behavior of its direct descendants. So by turning a direct descendant into a grid, you have a grid within a grid.\n\nFor example, by setting the `display` and `grid-template-columns` properties of the element with the `item3` class, you create a grid within your grid.",
      "instructions": "Turn the element with the `item3` class into a grid with two columns with a width of `auto` and `1fr` using `display` and `grid-template-columns`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      'advert header'\n      'advert content'\n      'advert footer';\n  }\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .itemOne {\n    background: PaleGreen;\n  }\n\n  .itemTwo {\n    background: BlanchedAlmond;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">\n    <div class=\"itemOne\">paragraph1</div>\n    <div class=\"itemTwo\">paragraph2</div>\n  </div>\n  <div class=\"item4\">footer</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item3 {\n    grid-template-columns: auto 1fr;\n    display: grid;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`item3` class should have a `grid-template-columns` property with `auto` and `1fr` as values.",
          "testCode": "assert.match(\n  code,\n  /.item3\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?auto\\s*?1fr\\s*?;[\\s\\S]*}/gi\n);"
        },
        {
          "text": "`item3` class should have a `display` property with the value of `grid`.",
          "testCode": "assert.match(code, /.item3\\s*?{[\\s\\S]*display\\s*?:\\s*?grid\\s*?;[\\s\\S]*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301128,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\create-grids-within-grids.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a858944d96184f06fd60d61",
      "title": "Create Your First CSS Grid",
      "challengeType": 0,
      "dashedName": "create-your-first-css-grid",
      "description": "Turn any HTML element into a grid container by setting its `display` property to `grid`. This gives you the ability to use all the other properties associated with CSS Grid.\n\n**Note:** In CSS Grid, the parent element is referred to as the <dfn>container</dfn> and its children are called <dfn>items</dfn>.",
      "instructions": "Change the display of the div with the `container` class to `grid`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .d1 {\n    background: LightSkyBlue;\n  }\n  .d2 {\n    background: LightSalmon;\n  }\n  .d3 {\n    background: PaleTurquoise;\n  }\n  .d4 {\n    background: LightPink;\n  }\n  .d5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    display: grid;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `display` property with a value of `grid`.",
          "testCode": "assert.match(code, /.container\\s*?{[\\s\\S]*display\\s*?:\\s*?grid\\s*?;[\\s\\S]*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cqwREC4",
        "forumTopicId": 301129,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\create-your-first-css-grid.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe0569fb03452672e45c",
      "title": "Divide the Grid Into an Area Template",
      "challengeType": 0,
      "dashedName": "divide-the-grid-into-an-area-template",
      "description": "You can group cells of your grid together into an <dfn>area</dfn> and give the area a custom name. Do this by using `grid-template-areas` on the container like this:\n\n```css\ngrid-template-areas:\n  'header header header'\n  'advert content content'\n  'advert footer footer';\n```\n\nThe code above groups the cells of the grid into four areas: `header`, `advert`, `content`, and `footer`. Every word represents a cell and every pair of quotation marks represent a row.",
      "instructions": "Change the template so the `footer` area spans the entire bottom row. Defining the areas won't have any visual effect right now. Later, you will make an item use an area to see how it works.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    grid-template-areas:\n    /* Only change code below this line */\n      'header header header'\n      'advert content content'\n      'advert footer footer';\n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n\n    grid-template-areas:\n      'header header header'\n      'advert content content'\n      'footer footer footer';\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-template-areas` property similar to the example but with the `footer` area spanning the whole bottom row.",
          "testCode": "assert.match(\n  __helpers.removeCssComments(code),\n  /.container\\s*?{[\\s\\S]*grid-template-areas\\s*?:\\s*?[\"|']\\s*?header\\s*?header\\s*?header\\s*?[\"|']\\s*?[\"|']\\s*?advert\\s*?content\\s*?content\\s*?[\"|']\\s*?[\"|']\\s*?footer\\s*?footer\\s*?footer\\s*?[\"|']\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301130,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\divide-the-grid-into-an-area-template.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe4469fb03452672e460",
      "title": "Limit Item Size Using the minmax Function",
      "challengeType": 0,
      "dashedName": "limit-item-size-using-the-minmax-function",
      "description": "There's another built-in function to use with `grid-template-columns` and `grid-template-rows` called `minmax`. It's used to limit the size of items when the grid container changes size. To do this you need to specify the acceptable size range for your item. Here is an example:\n\n```css\ngrid-template-columns: 100px minmax(50px, 200px);\n```\n\nIn the code above, `grid-template-columns` is set to create two columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px.",
      "instructions": "Using the `minmax` function, replace the `1fr` in the `repeat` function with a column size that has the minimum width of `90px` and the maximum width of `1fr`, and resize the preview panel to see the effect.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, 1fr);\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-template-columns: repeat(3, minmax(90px, 1fr));\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-template-columns` property that is set to repeat 3 columns with the minimum width of `90px` and maximum width of `1fr`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?3\\s*?,\\s*?minmax\\s*?\\(\\s*?90px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cD97RTv",
        "forumTopicId": 301131,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\limit-item-size-using-the-minmax-function.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe1369fb03452672e45d",
      "title": "Place Items in Grid Areas Using the grid-area Property",
      "challengeType": 0,
      "dashedName": "place-items-in-grid-areas-using-the-grid-area-property",
      "description": "After creating an area template for your grid container, as shown in the previous challenge, you can place an item in your custom area by referencing the name you gave it. To do this, you use the `grid-area` property on an item like this:\n\n```css\n.item1 {\n  grid-area: header;\n}\n```\n\nThis lets the grid know that you want the `item1` class to go in the area named `header`. In this case, the item will use the entire top row because that whole row is named as the `header` area.",
      "instructions": "Place an element with the `item5` class in the `footer` area using the `grid-area` property.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    grid-template-areas:\n      'header header header'\n      'advert content content'\n      'footer footer footer';\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item5 {\n    grid-area: footer;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`item5` class should have a `grid-area` property that has the value of `footer`.",
          "testCode": "assert.match(\n  __helpers.removeCssComments(code),\n  /.item5\\s*?{[\\s\\S]*grid-area\\s*?:\\s*?footer\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cRrqmtV",
        "forumTopicId": 301132,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\place-items-in-grid-areas-using-the-grid-area-property.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe3669fb03452672e45f",
      "title": "Reduce Repetition Using the repeat Function",
      "challengeType": 0,
      "dashedName": "reduce-repetition-using-the-repeat-function",
      "description": "When you used `grid-template-columns` and `grid-template-rows` to define the structure of a grid, you entered a value for each row or column you created.\n\nLet's say you want a grid with 100 rows of the same height. It isn't very practical to insert 100 values individually. Fortunately, there's a better way - by using the `repeat` function to specify the number of times you want your column or row to be repeated, followed by a comma and the value you want to repeat.\n\nHere's an example that would create the 100 row grid, each row at 50px tall.\n\n```css\ngrid-template-rows: repeat(100, 50px);\n```\n\nYou can also repeat multiple values with the repeat function and insert the function amongst other values when defining a grid structure. Here's what that looks like:\n\n```css\ngrid-template-columns: repeat(2, 1fr 50px) 20px;\n```\n\nThis translates to:\n\n```css\ngrid-template-columns: 1fr 50px 1fr 50px 20px;\n```\n\n**Note:** The `1fr 50px` is repeated twice followed by 20px.",
      "instructions": "Use `repeat` to remove repetition from the `grid-template-columns` property.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n  .item5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: 1fr 1fr 1fr;\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-template-columns: repeat(3, 1fr);\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "`container` class should have a `grid-template-columns` property that is set to repeat 3 columns with the width of `1fr`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?3\\s*?,\\s*?1fr\\s*?\\)\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cQvqyHR",
        "forumTopicId": 301133,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\reduce-repetition-using-the-repeat-function.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a9036ee38fddaf9a66b5d34",
      "title": "Use CSS Grid units to Change the Size of Columns and Rows",
      "challengeType": 0,
      "dashedName": "use-css-grid-units-to-change-the-size-of-columns-and-rows",
      "description": "You can use absolute and relative units like `px` and `em` in CSS Grid to define the size of rows and columns. You can use these as well:\n\n`fr`: sets the column or row to a fraction of the available space,\n\n`auto`: sets the column or row to the width or height of its content automatically,\n\n`%`: adjusts the column or row to the percent width of its container.\n\nHere's the code that generates the output in the preview:\n\n```css\ngrid-template-columns: auto 50px 10% 2fr 1fr;\n```\n\nThis snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.",
      "instructions": "Make a grid with three columns whose widths are as follows: 1fr, 100px, and 2fr.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .d1 {\n    background: LightSkyBlue;\n  }\n  .d2 {\n    background: LightSalmon;\n  }\n  .d3 {\n    background: PaleTurquoise;\n  }\n  .d4 {\n    background: LightPink;\n  }\n  .d5 {\n    background: PaleGreen;\n  }\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: auto 50px 10% 2fr 1fr;\n\n    /* Only change code above this line */\n    grid-template-rows: 50px 50px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .container {\n    grid-template-columns: 1fr 100px 2fr;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "Your `container` class should have a `grid-template-columns` property that has three columns with the following widths: `1fr`, `100px`, and `2fr`.",
          "testCode": "assert.match(\n  code,\n  /.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?1fr\\s*?100px\\s*?2fr\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cvE8phd",
        "forumTopicId": 301134,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\use-css-grid-units-to-change-the-size-of-columns-and-rows.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe2669fb03452672e45e",
      "title": "Use grid-area Without Creating an Areas Template",
      "challengeType": 0,
      "dashedName": "use-grid-area-without-creating-an-areas-template",
      "description": "The `grid-area` property you learned in the last challenge can be used in another way. If your grid doesn't have an areas template to reference, you can create an area on the fly for an item to be placed like this:\n\n```css\nitem1 {\n  grid-area: 1/1/2/4;\n}\n```\n\nThis is using the line numbers you learned about earlier to define where the area for this item will be. The numbers in the example above represent these values:\n\n```css\ngrid-area: horizontal line to start at / vertical line to start at / horizontal\n  line to end at / vertical line to end at;\n```\n\nSo the item in the example will consume the rows between lines 1 and 2, and the columns between lines 1 and 4.",
      "instructions": "Using the `grid-area` property, place the element with `item5` class between the third and fourth horizontal lines and between the first and fourth vertical lines.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item5 {\n    grid-area: 3/1/4/4;\n  }\n</style>"
        }
      ],
      "tests": [
        {
          "text": "The `item5` class should have a `grid-area` property to make it fill the whole area between the third and fourth horizontal lines, and first and fourth vertical lines.",
          "testCode": "assert.match(\n  code,\n  /.item5\\s*?{[\\s\\S]*grid-area\\s*?:\\s*?3\\s*?\\/\\s*?1\\s*?\\/\\s*?4\\s*?\\/\\s*?4\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/c6N7VhK",
        "forumTopicId": 301135,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\use-grid-area-without-creating-an-areas-template.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a90372638fddaf9a66b5d38",
      "title": "Use grid-column to Control Spacing",
      "challengeType": 0,
      "dashedName": "use-grid-column-to-control-spacing",
      "description": "Up to this point, all the properties that have been discussed are for grid containers. The `grid-column` property is the first one for use on the grid items themselves.\n\nThe hypothetical horizontal and vertical lines that create the grid are referred to as <dfn>lines</dfn>. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward.\n\nThis is what the lines look like for a 3x3 grid:\n\n<div style='position:relative;margin:auto;background:Gainsboro;display:block;margin-top:100px;margin-bottom:50px;width:200px;height:200px;'><p style='left:25%;top:-30%;font-size:130%;position:absolute;color:RoyalBlue;'>column lines</p><p style='left:0%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;'>1</p><p style='left:30%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;'>2</p><p style='left:63%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;'>3</p><p style='left:95%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;'>4</p><p style='left:-40%;top:45%;font-size:130%;transform:rotateZ(-90deg);position:absolute;'>row lines</p><p style='left:-10%;top:-10%;font-size:130%;position:absolute;'>1</p><p style='left:-10%;top:21%;font-size:130%;position:absolute;'>2</p><p style='left:-10%;top:53%;font-size:130%;position:absolute;'>3</p><p style='left:-10%;top:85%;font-size:130%;position:absolute;'>4</p><div style='left:0%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;'></div><div style='left:31%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;'></div><div style='left:63%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;'></div><div style='left:95%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;'></div><div style='left:0%;top:0%;width:100%;height:5%;background:black;position:absolute;'></div><div style='left:0%;top:31%;width:100%;height:5%;background:black;position:absolute;'></div><div style='left:0%;top:63%;width:100%;height:5%;background:black;position:absolute;'></div><div style='left:0%;top:95%;width:100%;height:5%;background:black;position:absolute;'></div></div>\n\nTo control the number of columns an item will consume, you can use the `grid-column` property in conjunction with the line numbers you want the item to start and stop at.\n\nHere's an example:\n\n```css\ngrid-column: 1 / 3;\n```\n\nThis will make the item start at the first vertical line of the grid on the left and span to the 3rd line of the grid, consuming two columns.",
      "instructions": "Make the item with the class `item5` consume the last two columns of the grid.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "`item5` class should have a `grid-column` property.",
          "testCode": "const styleElement = document.querySelector('style:not(.fcc-hide-header)');\nassert.match(\n  __helpers.removeWhiteSpace(styleElement.textContent),\n  /\\.item5{.*grid-column:.*}/g\n);"
        },
        {
          "text": "`item5` class should have a `grid-column` property which results in it consuming the last two columns of the grid.",
          "testCode": "const itemFive = document.querySelector('.item5');\nconst colStart = getComputedStyle(itemFive).gridColumnStart;\nconst colEnd = getComputedStyle(itemFive).gridColumnEnd;\nconst result = colStart.toString() + colEnd.toString();\nconst correctResults = [\n  '24',\n  '2-1',\n  '2span 2',\n  '2span2',\n  'span 2-1',\n  '-12',\n  'span 2span 2',\n  'span 2auto',\n  'autospan 2'\n];\nassert.include(correctResults, result);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cnzkDSr",
        "forumTopicId": 301136,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\use-grid-column-to-control-spacing.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a90373638fddaf9a66b5d39",
      "title": "Use grid-row to Control Spacing",
      "challengeType": 0,
      "dashedName": "use-grid-row-to-control-spacing",
      "description": "Of course, you can make items consume multiple rows just like you can with columns. You define the horizontal lines you want an item to start and stop at using the `grid-row` property on a grid item.",
      "instructions": "Make the element with the `item5` class consume the last two rows.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n  }\n  .item2 {\n    background: LightSalmon;\n  }\n  .item3 {\n    background: PaleTurquoise;\n  }\n  .item4 {\n    background: LightPink;\n  }\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n    grid-row: 2 / 4;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "`item5` class should have a `grid-row` property.",
          "testCode": "const styleElement = document.querySelector('style:not(.fcc-hide-header)');\nassert.match(\n  __helpers.removeWhiteSpace(styleElement.textContent),\n  /\\.item5{.*grid-row:.*}/g\n);"
        },
        {
          "text": "`item5` class should have a `grid-row` property which results in it consuming the last two rows of the grid.",
          "testCode": "const itemFive = document.querySelector('.item5');\nconst rowStart = getComputedStyle(itemFive).gridRowStart;\nconst rowEnd = getComputedStyle(itemFive).gridRowEnd;\nconst result = rowStart.toString() + rowEnd.toString();\nconst correctResults = [\n  '24',\n  '2-1',\n  '2span 2',\n  '2span2',\n  'span 2-1',\n  '-12',\n  'span 2span 2',\n  'span 2auto',\n  'autospan 2'\n];\nassert.include(correctResults, result);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/c9WBLU4",
        "forumTopicId": 301137,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\use-grid-row-to-control-spacing.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "5a94fe7769fb03452672e463",
      "title": "Use Media Queries to Create Responsive Layouts",
      "challengeType": 0,
      "dashedName": "use-media-queries-to-create-responsive-layouts",
      "description": "CSS Grid can be an easy way to make your site more responsive by using media queries to rearrange grid areas, change dimensions of a grid, and rearrange the placement of items.\n\nIn the preview, when the viewport width is 300px or more, the number of columns changes from 1 to 2. The advertisement area then occupies the left column completely.",
      "instructions": "When the viewport width is `400px` or more, make the header area occupy the top row completely and the footer area occupy the bottom row completely.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 50px auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      'header'\n      'advert'\n      'content'\n      'footer';\n  }\n\n  @media (min-width: 300px) {\n    .container {\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n        'advert header'\n        'advert content'\n        'advert footer';\n    }\n  }\n\n  @media (min-width: 400px) {\n    .container {\n      grid-template-areas:\n      /* Only change code below this line */\n        'advert header'\n        'advert content'\n        'advert footer';\n      /* Only change code above this line */\n    }\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">content</div>\n  <div class=\"item4\">footer</div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 50px auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      'header'\n      'advert'\n      'content'\n      'footer';\n  }\n\n  @media (min-width: 300px) {\n    .container {\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n        'advert header'\n        'advert content'\n        'advert footer';\n    }\n  }\n\n  @media (min-width: 400px) {\n    .container {\n      grid-template-areas:\n        'header header'\n        'advert content'\n        'footer footer';\n    }\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">content</div>\n  <div class=\"item4\">footer</div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "When the viewport is `400px` or more, `container` class should have a `grid-template-areas` property in which the header and footer areas occupy the top and bottom rows respectively and advert and content occupy the left and right columns of the middle row.",
          "testCode": "assert.match(\n  __helpers.removeCssComments(code),\n  /@media\\s*?\\(\\s*?min-width\\s*?:\\s*?400px\\s*?\\)[\\s\\S]*.container\\s*?{[\\s\\S]*grid-template-areas\\s*?:\\s*?[\"|']\\s*?header\\s*?header\\s*?[\"|']\\s*?[\"|']\\s*?advert\\s*?content\\s*?[\"|']\\s*?[\"|']\\s*?footer\\s*?footer\\s*?[\"|']\\s*?;[\\s\\S]*}/gi\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pByETK/cMbqeHk",
        "forumTopicId": 301138,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\css-grid\\use-media-queries-to-create-responsive-layouts.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "css-grid",
        "name": "Css Grid"
      }
    },
    {
      "id": "587d78b0367417b2b2512b08",
      "title": "Create a Media Query",
      "challengeType": 0,
      "dashedName": "create-a-media-query",
      "description": "Media Queries are a new technique introduced in CSS3 that change the presentation of content based on different viewport sizes. The viewport is a user's visible area of a web page, and is different depending on the device used to access the site.\n\nMedia Queries consist of a media type, and if that media type matches the type of device the document is displayed on, the styles are applied. You can have as many selectors and styles inside your media query as you want.\n\nHere's an example of a media query that returns the content when the device's width is less than or equal to `100px`:\n\n```css\n@media (max-width: 100px) {\n  /* CSS Rules */\n}\n```\n\nand the following media query returns the content when the device's height is more than or equal to `350px`:\n\n```css\n@media (min-height: 350px) {\n  /* CSS Rules */\n}\n```\n\nRemember, the CSS inside the media query is applied only if the media type matches that of the device being used.",
      "instructions": "Add a media query, so that the `p` tag has a `font-size` of `10px` when the device's height is less than or equal to `800px`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n  p {\n    font-size: 20px;\n  }\n\n  /* Only change code below this line */\n\n  /* Only change code above this line */\n</style>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus\n  massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet\n  lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac\n  habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem.\n  Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida\n  consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.\n</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  p {\n    font-size: 20px;\n  }\n\n  @media (max-height: 800px) {\n    p {\n      font-size: 10px;\n    }\n  }\n</style>\n\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus\n  massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet\n  lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac\n  habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem.\n  Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida\n  consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.\n</p>"
        }
      ],
      "tests": [
        {
          "text": "You should declare a `@media` query for devices with a `height` less than or equal to `800px`.",
          "testCode": "const media = new __helpers.CSSHelp(document).getCSSRules('media');\nassert.isTrue(\n  media.some(x => x.media?.mediaText?.includes('(max-height: 800px)'))\n);"
        },
        {
          "text": "Your `p` element should have a `font-size` of `10px` when the device `height` is less than or equal to `800px`.",
          "testCode": "const rules = new __helpers.CSSHelp(document).getRuleListsWithinMedia(\n  '(max-height: 800px)'\n);\nassert.strictEqual(\n  rules?.find(x => x.selectorText === 'p')?.style?.fontSize,\n  '10px'\n);"
        },
        {
          "text": "Your `p` element should have an initial `font-size` of `20px` when the device `height` is more than `800px`.",
          "testCode": "const ifPFirst = new __helpers.CSSHelp(document)\n  .getCSSRules()\n  ?.find(x => x?.selectorText === 'p' || x?.media);\nassert.strictEqual(ifPFirst?.style?.fontSize, '20px');"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pzrPu4/cqwKrtm",
        "forumTopicId": 301139,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\responsive-web-design-principles\\create-a-media-query.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "responsive-web-design-principles",
        "name": "Responsive Web Design Principles"
      }
    },
    {
      "id": "587d78b1367417b2b2512b09",
      "title": "Make an Image Responsive",
      "challengeType": 0,
      "dashedName": "make-an-image-responsive",
      "description": "Making images responsive with CSS is actually very simple. You just need to add these properties to an image:\n\n```css\nimg {\n  max-width: 100%;\n  height: auto;\n}\n```\n\nThe `max-width` of `100%` will make sure the image is never wider than the container it is in, and the `height` of `auto` will make the image keep its original aspect ratio.",
      "instructions": "Add the style rules to the `responsive-img` class to make it responsive. It should never be wider than its container (in this case, it's the preview window) and it should keep its original aspect ratio. After you have added your code, resize the preview to see how your images behave.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n.responsive-img {\n\n\n}\n\nimg {\n  width: 600px;\n}\n</style>\n\n<img\n  class=\"responsive-img\"\n  src=\"https://cdn.freecodecamp.org/curriculum/responsive-web-design-principles/FCCStickerPack.jpg\"\n  alt=\"freeCodeCamp stickers set\"\n/>\n<img\n  src=\"https://cdn.freecodecamp.org/curriculum/responsive-web-design-principles/FCCStickerPack.jpg\"\n  alt=\"freeCodeCamp stickers set\"\n/>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  .responsive-img {\n    max-width: 100%;\n    height: auto;\n  }\n\n  img {\n    width: 600px;\n  }\n</style>\n\n<img\n  class=\"responsive-img\"\n  src=\"https://cdn.freecodecamp.org/curriculum/responsive-web-design-principles/FCCStickerPack.jpg\"\n  alt=\"freeCodeCamp stickers set\"\n/>\n<img\n  src=\"https://cdn.freecodecamp.org/curriculum/responsive-web-design-principles/FCCStickerPack.jpg\"\n  alt=\"freeCodeCamp stickers set\"\n/>"
        }
      ],
      "tests": [
        {
          "text": "Your `responsive-img` class should have a `max-width` set to `100%`.",
          "testCode": "assert.strictEqual(getComputedStyle(document.querySelector('.responsive-img')).maxWidth, '100%');"
        },
        {
          "text": "Your `responsive-img` class should have a `height` set to `auto`.",
          "testCode": "assert.match(code, /height:\\s*?auto;/g);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301140,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\responsive-web-design-principles\\make-an-image-responsive.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "responsive-web-design-principles",
        "name": "Responsive Web Design Principles"
      }
    },
    {
      "id": "587d78b1367417b2b2512b0c",
      "title": "Make Typography Responsive",
      "challengeType": 0,
      "dashedName": "make-typography-responsive",
      "description": "Instead of using `em` or `px` to size text, you can use viewport units for responsive typography. Viewport units, like percentages, are relative units, but they are based off different items. Viewport units are relative to the viewport dimensions (width or height) of a device, and percentages are relative to the size of the parent container element.\n\nThe four different viewport units are:\n\n<ul><li><code>vw</code> (viewport width): <code>10vw</code> would be 10% of the viewport's width.</li><li><code>vh</code> (viewport height): <code>3vh</code> would be 3% of the viewport's height.</li><li><code>vmin</code> (viewport minimum): <code>70vmin</code> would be 70% of the viewport's smaller dimension (height or width).</li><li><code>vmax</code> (viewport maximum): <code>100vmax</code> would be 100% of the viewport's bigger dimension (height or width).</li></ul>\n\nHere is an example that sets a `body` tag to 30% of the viewport's width.\n\n```css\nbody {\n  width: 30vw;\n}\n```",
      "instructions": "Set the `width` of the `h2` tag to 80% of the viewport's width and the `width` of the paragraph as 75% of the viewport's smaller dimension.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style>\n\n</style>\n\n<h2>Importantus Ipsum</h2>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus\n  massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet\n  lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac\n  habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem.\n  Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida\n  consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.\n</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  h2 {\n    width: 80vw;\n  }\n  p {\n    width: 75vmin;\n  }\n</style>\n\n<h2>Importantus Ipsum</h2>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus\n  massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet\n  lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac\n  habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem.\n  Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida\n  consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.\n</p>"
        }
      ],
      "tests": [
        {
          "text": "Your `h2` tag should have a `width` of 80vw.",
          "testCode": "assert.match(\n  __helpers.removeCssComments(code),\n  /h2\\s*?{\\s*?width:\\s*?80vw;\\s*?}/g\n);"
        },
        {
          "text": "Your `p` tag should have a `width` of 75vmin.",
          "testCode": "assert.match(\n  __helpers.removeCssComments(code),\n  /p\\s*?{\\s*?width:\\s*?75vmin;\\s*?}/g\n);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pzrPu4/crzN7T8",
        "forumTopicId": 301141,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\responsive-web-design-principles\\make-typography-responsive.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "responsive-web-design-principles",
        "name": "Responsive Web Design Principles"
      }
    },
    {
      "id": "587d78b1367417b2b2512b0a",
      "title": "Use a Retina Image for Higher Resolution Displays",
      "challengeType": 0,
      "dashedName": "use-a-retina-image-for-higher-resolution-displays",
      "description": "With the increase of internet connected devices, their sizes and specifications vary, and the displays they use could be different externally and internally. Pixel density is an aspect that could be different on one device from others and this density is known as Pixel Per Inch(PPI) or Dots Per Inch(DPI). The most famous such display is the one known as a \"Retina Display\" on the latest Apple MacBook Pro notebooks, and recently iMac computers. Due to the difference in pixel density between a \"Retina\" and \"Non-Retina\" displays, some images that have not been made with a High-Resolution Display in mind could look \"pixelated\" when rendered on a High-Resolution display.\n\nThe simplest way to make your images properly appear on High-Resolution Displays, such as the MacBook Pros \"retina display\" is to define their `width` and `height` values as only half of what the original file is. Here is an example of an image that is only using half of the original height and width:\n\n```html\n<style>\n  img {\n    height: 250px;\n    width: 250px;\n  }\n</style>\n<img src=\"coolPic500x500\" alt=\"A most excellent picture\" />\n```",
      "instructions": "Set the `width` and `height` of the `img` tag to half of their original values. In this case, both the original `height` and the original `width` are `200px`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style></style>\n\n<img\n  src=\"https://cdn.freecodecamp.org/curriculum/responsive-web-design-principles/FCCStickers-CamperBot200x200.jpg\"\n  alt=\"freeCodeCamp sticker that says 'Because CamperBot Cares'\"\n/>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style>\n  img {\n    height: 100px;\n    width: 100px;\n  }\n</style>\n\n<img\n  src=\"https://cdn.freecodecamp.org/curriculum/responsive-web-design-principles/FCCStickers-CamperBot200x200.jpg\"\n  alt=\"freeCodeCamp sticker that says 'Because CamperBot Cares'\"\n/>"
        }
      ],
      "tests": [
        {
          "text": "Your `img` tag should have a `width` of 100 pixels.",
          "testCode": "assert.strictEqual(document.querySelector('img').width, 100);"
        },
        {
          "text": "Your `img` tag should have a `height` of 100 pixels.",
          "testCode": "assert.strictEqual(document.querySelector('img').height, 100);"
        }
      ],
      "metadata": {
        "videoUrl": "https://scrimba.com/p/pzrPu4/cVZ4Rfp",
        "forumTopicId": 301142,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\01-responsive-web-design\\responsive-web-design-principles\\use-a-retina-image-for-higher-resolution-displays.md"
      },
      "section": {
        "id": "01-responsive-web-design",
        "name": "01-responsive-web-design"
      },
      "lesson": {
        "id": "responsive-web-design-principles",
        "name": "Responsive Web Design Principles"
      }
    }
  ],
  "metadata": {
    "total_challenges": 189,
    "challenges_with_content": 189
  }
}