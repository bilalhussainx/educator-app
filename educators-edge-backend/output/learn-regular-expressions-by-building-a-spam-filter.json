{
  "title": "Learn Regular Expressions By Building A Spam Filter",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Step 1",
      "description": "To begin the project, use the `.getElementById()` method to retrieve the `#message-input`, `#result`, and `#check-message-btn` elements from the HTML document, and assign them to the variables `messageInput`, `result`, and `checkMessageButton`, respectively.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `const` to declare a `messageInput` variable.\n\n```js\nassert.match(code, /const\\s+messageInput\\s*=/);\n```\n\nYour `messageInput` variable should have the value of `document.getElementById(\"message-input\")`.\n\n```js\nassert.deepEqual(messageInput, document.getElementById('message-input'));\n```\n\nYou should use `const` to declare a `result` variable.\n\n```js\nassert.match(code, /const\\s+result\\s*=/);\n```\n\nYour `result` variable should have the value of `document.getElementById(\"result\")`.\n\n```js\nassert.match(code, /const\\s+result\\s*=\\s*document\\.getElementById\\(\\s*('|\")result\\1\\s*\\)/);\n```\n\nYou should use `const` to declare a `checkMessageButton` variable.\n\n```js\nassert.match(code, /const\\s+checkMessageButton\\s*=/);\n```\n\nYour `checkMessageButton` variable should have the value of `document.getElementById(\"check-message-btn\")`.\n\n```js\nassert.deepEqual(checkMessageButton, document.getElementById('check-message-btn'));\n```"
    },
    {
      "title": "Step 2",
      "description": "Attach an event listener to your `checkMessageButton`, listening for the `click` event. Give it an empty callback function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call `.addEventListener()` on your `checkMessageButton` element.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(/);\n```\n\nYour `.addEventListener()` method should have a `\"click\"` event type.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,/);\n```\n\nYour `.addEventListener()` method should have an empty callback function.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*(\\(\\s*\\)\\s*=>\\s*\\{\\s*\\}|function\\s*\\(\\s*\\)\\s*\\{\\s*\\})\\s*\\)/);\n```"
    },
    {
      "title": "Step 3",
      "description": "If the `messageInput` is empty, display an alert to the user with the message `\"Please enter a message.\"`.\n\nThen, exit the function execution.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\n--fcc-editable-region--\ncheckMessageButton.addEventListener(\"click\", () => {\n\n});\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your callback function should have an `if` statement.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(/)\n```\n\nYour `if` statement should check if the `value` of `messageInput` is an empty string.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*(?:messageInput\\.value\\s*===?\\s*('|\"|`)\\2|('|\"|`)\\3\\s*===?\\s*messageInput\\.value)\\s*\\)/)\n```\n\nYour `if` statement should display an alert to the user with the message `\"Please enter a message.\"`.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*(?:messageInput\\.value\\s*===?\\s*('|\"|`)\\2|('|\"|`)\\3\\s*===?\\s*messageInput\\.value)\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(\\s*('|\"|`)Please enter a message\\.\\4\\s*\\)/) \n```\n\nYour `if` statement should exit the function execution.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*(['\"`])click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*(?:messageInput\\.value\\s*===?\\s*(['\"`])\\2|(['\"`])\\3\\s*===?\\s*messageInput\\.value)\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(\\s*(['\"`])Please enter a message\\.\\4\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*\\}/) \n```"
    },
    {
      "title": "Step 4",
      "description": "Create an `isSpam` function using the `const` keyword and arrow syntax. The function should take a single parameter `msg` and implicitly return `false` for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n});"
        }
      ],
      "testCode": "You should use `const` to declare an `isSpam` variable.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=/);\n```\n\nYou should use arrow syntax to assign `isSpam` a function.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\n```\n\nYour `isSpam` function should have a single `msg` parameter.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)/);\n```\n\nYour `isSpam` function should implicitly return `false`.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*false\\s*;?/);\n```"
    },
    {
      "title": "Step 5",
      "description": "Back in your event listener, you need to update the text of the `result` element. You can use a ternary operator to achieve this task.\n\nHere is an example of assigning the result of a ternary operator to an element's text content:\n\n```js\nel.textContent = condition ? \"Use this text if the condition is true\" : \"Use this text if the condition is false\";\n```\n\nAfter the `if` statement, use a ternary operator to check the truthiness of calling `isSpam()` with `messageInput.value` as the argument. If true, set the `textContent` property on the `result` element to `\"Oh no! This looks like a spam message.\"`. Otherwise, set it to `\"This message does not seem to contain any spam.\"`\n\nThen set the `messageInput` element's `value` property to an empty string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst isSpam = (msg) => false;\n\n--fcc-editable-region--\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n\n});\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the assignment operator to set the `textContent` property of the `result` element.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\.value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(\\s*('|\"|`)Please enter a message\\.\\3\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*result\\.textContent\\s*\\=\\s*/)\n```\n\nYou should call the `isSpam()` function after the assignment operator `=` and before the `?` ternary operator.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\.value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(\\s*('|\"|`)Please enter a message\\.\\3\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*result\\.textContent\\s*\\=\\s*isSpam\\(.*\\)\\s*\\?/)\n```\n\nYou should use ternary syntax to check the truthiness of `isSpam(messageInput.value)`.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\.value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(\\s*('|\"|`)Please enter a message\\.\\3\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*result\\.textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\.value\\s*\\)\\s*\\?/)\n```\n\nThe truthy expression of your ternary should set the `textContent` property of the `result` element to `\"Oh no! This looks like a spam message.\"`.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\.value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(\\s*('|\"|`)Please enter a message\\.\\3\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*result\\.textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\.value\\s*\\)\\s*\\?\\s*('|\"|`)Oh no! This looks like a spam message.\\4\\s*:/);\n```\n\nThe falsy expression of your ternary should set the `textContent` property of the `result` element to `\"This message does not seem to contain any spam.\"`.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\.value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(\\s*('|\"|`)Please enter a message\\.\\3\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*result\\.textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\.value\\s*\\)\\s*\\?\\s*('|\"|`)Oh no! This looks like a spam message.\\4\\s*:\\s*('|\"|`)This message does not seem to contain any spam.\\5\\s*;?\\s*/);\n```\n\nAfter your ternary, set the `value` property on the `messageInput` element to an empty string.\n\n```js\nassert.match(code, /checkMessageButton\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*if\\s*\\(\\s*messageInput\\.value\\s*===\\s*('|\"|`)\\2\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(\\s*('|\"|`)Please enter a message\\.\\3\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*result\\.textContent\\s*\\=\\s*isSpam\\(\\s*messageInput\\.value\\s*\\)\\s*\\?\\s*('|\"|`)Oh no! This looks like a spam message.\\4\\s*:\\s*('|\"|`)This message does not seem to contain any spam.\\5\\s*;?\\s*messageInput\\.value\\s*=\\s*('|\"|`)\\6\\s*;?\\s*\\}/)\n```"
    },
    {
      "title": "Step 6",
      "description": "Your first regular expression will be used to catch help requests. Declare a `helpRegex` variable, and assign it a regular expression that matches the string `please help`.\n\nAs a refresher, here is a regular expression to match the string `hello world`:\n\n```js\nconst regex = /hello world/;\n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst isSpam = (msg) => false;\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "You should use `const` to declare a `helpRegex` variable.\n\n```js\nassert.match(code, /const\\s+helpRegex\\s*=/);\n```\n\nYour `helpRegex` variable should be a regular expression.\n\n```js\nassert.instanceOf(helpRegex, RegExp);\n```\n\nYour `helpRegex` variable should match the string `please help`.\n\n```js\nassert.match('please help', helpRegex);\n```"
    },
    {
      "title": "Step 7",
      "description": "Regular expressions can take <dfn>flags</dfn> to modify their behavior. For instance, the `i` flag can be used to make the expression ignore case, causing it to match `hello`, `HELLO`, and `Hello` for the expression `/hello/`.\n\nFlags are added after the trailing slash. Add the `i` flag to your `helpRegex`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\n--fcc-editable-region--\nconst helpRegex = /please help/;\n--fcc-editable-region--\n\nconst isSpam = (msg) => false;\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `helpRegex` should have the case-insensitive `i` flag.\n\n```js\nassert.include(helpRegex.flags, 'i');\n```"
    },
    {
      "title": "Step 8",
      "description": "Strings have a `.match()` method, which accepts a regular expression as an argument and determines if the string matches that expression.\n\nUpdate your `isSpam()` function to implicitly return the result of calling the `.match()` method on `msg`, passing `helpRegex` as the argument.\n\nThen, try entering some messages on your page and see the result.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help/i;\n\n--fcc-editable-region--\nconst isSpam = (msg) => false;\n--fcc-editable-region--\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `isSpam()` function should implicitly return the result of `msg.match(helpRegex)`.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*msg\\.match\\(\\s*helpRegex\\s*\\)/);\n```"
    },
    {
      "title": "Step 9",
      "description": "Instead of using the `.match()` method, you can use the `.test()` method of a regular expression to test if a string matches the pattern. Unlike `.match()`, `.test()` returns a boolean value indicating whether or not the string matches the pattern.\n\nUpdate your `isSpam()` function to use the `.test()` method of `helpRegex` to test if `msg` is a match.\n\nThen, try entering some messages on your page and see the result.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help/i;\n\n--fcc-editable-region--\nconst isSpam = (msg) => msg.match(helpRegex);\n--fcc-editable-region--\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `isSpam()` function should implicitly return the result of `helpRegex.test(msg)`.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*helpRegex\\.test\\(\\s*msg\\s*\\)/);\n```"
    },
    {
      "title": "Step 10",
      "description": "The <dfn>alternate sequence</dfn> `|` can be used to match either the text on the left or the text on the right of the `|`. For example, the regular expression `/yes|no/` will match either `yes` or `no`.\n\nUpdate your `helpRegex` to match either `please help` or `assist me`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\n--fcc-editable-region--\nconst helpRegex = /please help/i;\n--fcc-editable-region--\n\nconst isSpam = (msg) => helpRegex.test(msg);\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `helpRegex` should use the `|` alternate sequence.\n\n```js\nassert.match(helpRegex.toString(), /\\|/);\n```\n\nYour `helpRegex` should match the string `please help`.\n\n```js\nassert.match('please help', helpRegex);\nconst splitRegex = helpRegex.toString().split(/[\\/|]/);\nassert.include(splitRegex, 'please help');\n```\n\nYour `helpRegex` should match the string `assist me`.\n\n```js\nassert.match('assist me', helpRegex);\nconst splitRegex = helpRegex.toString().split(/[\\/|]/);\nassert.include(splitRegex, 'assist me');\n```"
    },
    {
      "title": "Step 11",
      "description": "Before you start creating additional regular expressions, you need to update your application to check more than one regular expression.\n\nStart by declaring a `denyList` variable. Assign it an array containing your `helpRegex`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst isSpam = (msg) => helpRegex.test(msg);\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "You should use `const` to declare a `denyList` variable.\n\n```js\nassert.match(code, /const\\s+denyList\\s*=/);\n```\n\nYour `denyList` variable should be an array.\n\n```js\nassert.isArray(denyList);\n```\n\nYour `denyList` array should have `helpRegex` as its only element.\n\n```js\nassert.deepEqual(denyList, [helpRegex]);\n```"
    },
    {
      "title": "Step 12",
      "description": "Arrays have a `.some()` method. Like the `.filter()` method, `.some()` accepts a callback function which should take an element of the array as the argument. The `.some()` method will return `true` if the callback function returns `true` for at least one element in the array.\n\nHere is an example of a `.some()` method call to check if any element in the array is an uppercase letter.\n\n```js\nconst arr = [\"A\", \"b\", \"C\"];\narr.some(letter => letter === letter.toUpperCase());\n```\n\nUse the `.some()` method to check if testing your `msg` on any of your `denyList` regular expressions returns `true`.\n\nUse `regex` as the parameter for the callback function, for clarity.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n\nconst denyList = [helpRegex];\n\n--fcc-editable-region--\nconst isSpam = (msg) => helpRegex.test(msg);\n--fcc-editable-region--\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `isSpam` function should implicitly return the result of `denyList.some()`.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\.some\\(\\s*[\\s\\S]*\\)/)\n```\n\nYour `.some()` method should use arrow syntax for the callback.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\.some\\(\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\n```\n\nYour `.some()` callback should take `regex` as the parameter.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\.some\\(\\s*(\\(\\s*regex\\s*\\)|regex)\\s*=>/);\n```\n\nYour `.some()` callback should implicitly return the result of testing `msg` on `regex`.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*denyList\\.some\\(\\s*(\\(\\s*regex\\s*\\)|regex)\\s*=>\\s*regex\\.test\\(\\s*msg\\s*\\)\\s*\\)/);\n```"
    },
    {
      "title": "Step 13",
      "description": "The next regular expression you will work on is one that matches mentions of dollar amounts.\n\nStart by declaring a `dollarRegex` variable, and assign it a case-insensitive regular expression that matches the text `dollars`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst denyList = [helpRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "You should use `const` to declare a `dollarRegex` variable.\n\n```js\nassert.match(code, /const\\s+dollarRegex\\s*=/);\n```\n\nYour `dollarRegex` variable should be a regular expression.\n\n```js\nassert.instanceOf(dollarRegex, RegExp);\n```\n\nYour `dollarRegex` should match `dollars`.\n\n```js\nassert.match('dollars', dollarRegex);\n```\n\nYour `dollarRegex` should be case-insensitive.\n\n```js\nassert.include(dollarRegex.flags, 'i');\n```"
    },
    {
      "title": "Step 14",
      "description": "Add your `dollarRegex` to the `denyList` array so that you can test the regular expression.\n\nThen try entering a message in your app.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /dollars/i;\n\n--fcc-editable-region--\nconst denyList = [helpRegex];\n--fcc-editable-region--\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `denyList` array should include `dollarRegex`.\n\n```js\nassert.deepInclude(denyList, dollarRegex);\n```\n\nYour `denyList` array should still include `helpRegex`.\n\n```js\nassert.deepInclude(denyList, helpRegex);\n```"
    },
    {
      "title": "Step 15",
      "description": "You need to match a number before the text `dollars`. While you could write out `0|1|2` and so on, regular expressions have a feature that makes this easier.\n\nA <dfn>character class</dfn> is defined by square brackets, and matches any character within the brackets. For example, `[aeiou]` matches any character in the list `aeiou`. You can also define a range of characters to match using a hyphen. For example, `[a-z]` matches any character from `a` to `z`.\n\nAdd a character class to match the digits `0` through `9` to your `dollarRegex` expression - remember the digit must come before the word `dollars`, and there should be a space between the digit and the word.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /dollars/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `dollarRegex` should use a character class.\n\n```js\nassert.match(dollarRegex.source, /\\[.*\\]/);\n```\n\nYour character class should be `0-9`.\n\n```js\nassert.match(dollarRegex.source, /\\[0-9\\] dollars/);\n```\n\nYour `dollarRegex` should still match `\"1 dollars\"`.\n\n```js\nassert.match('1 dollars', dollarRegex);\n```"
    },
    {
      "title": "Step 16",
      "description": "The dollar value may be more than one digit. To match this, the `+` quantifier can be used - this matches one or more consecutive occurrences. For example, the regular expression `/a+/` matches one or more consecutive `a` characters.\n\nUpdate your regular expression to match one or more consecutive digits.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9] dollars/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `dollarRegex` should use the `+` quantifier.\n\n```js\nassert.match(dollarRegex.source, /\\+/);\n```\n\nYour `dollarRegex` should use the `+` quantifier on your `[0-9]` character class.\n\n```js\nassert.match(dollarRegex.source, /\\[0-9\\]\\+/);\n```\n\nYour `dollarRegex` should still match `\"100 dollars\"`.\n\n```js\nassert.match('100 dollars', dollarRegex);\n```\n\nYour `dollarRegex` should still match `\"3 dollars\"`.\n\n```js\nassert.match('3 dollars', dollarRegex);\n```"
    },
    {
      "title": "Step 17",
      "description": "Between your digits and your `dollars` text, you want to catch place values.\n\nUse the `|` token to allow `hundred`, `thousand`, `million`, or `billion` between your digits and `dollars`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+ dollars/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `dollarRegex` should use the `|` token.\n\n```js\nassert.match(dollarRegex.source, /\\|/);\n```\n\nYour `dollarRegex` should have three `|` tokens.\n\n```js\nassert.lengthOf(dollarRegex.source.match(/\\|/g), 3);\n```\n\nYour `dollarRegex` should use the `|` token to match `hundred`, `thousand`, `million`, or `billion`.\n\n```js\nconst placeValues = dollarRegex.source.replace(\"[0-9]+ \", \"\").replace(\" dollars\", \"\").split('|');\nassert.include(placeValues, 'hundred');\nassert.include(placeValues, 'thousand');\nassert.include(placeValues, 'million');\nassert.include(placeValues, 'billion');\n```\n\nYour `dollarRegex` should match `1 hundred dollars`.\n\n```js\nassert.match('1 hundred dollars', dollarRegex);\n```\n\nYour `dollarRegex` should match `1 thousand dollars`.\n\n```js\nassert.match('1 thousand dollars', dollarRegex);\n```\n\nYour `dollarRegex` should match `1 million dollars`.\n\n```js\nassert.match('1 million dollars', dollarRegex);\n```\n\nYour `dollarRegex` should match `1 billion dollars`.\n\n```js\nassert.match('1 billion dollars', dollarRegex);\n```"
    },
    {
      "title": "Step 18",
      "description": "A <dfn>capture group</dfn> is a way to define a part of the expression that should be captured and saved for later reference. You can define a capture group by wrapping a part of your expression in parentheses. For example, `/h(i|ey) camper/` would match either `hi camper` or `hey camper`, and would capture `i` or `ey` in a group.\n\nTurn your place values into a capture group.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+ hundred|thousand|million|billion dollars/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "You should not change your `helpRegex` regular expression.\n\n```js\nassert.match(helpRegex.source, /please help|assist me/);\n```\n\nYour `dollarRegex` should use a capture group.\n\n```js\nassert.match(dollarRegex.source, /\\(.*\\)/)\n```\n\nYour `hundred|thousand|million|billion` pattern should be a capture group.\n\n```js\nassert.match(dollarRegex.source, /\\(hundred\\|thousand\\|million\\|billion\\)/)\n```"
    },
    {
      "title": "Step 19",
      "description": "Now that you have your capture group, you can mark the entire pattern as an optional match. The `?` quantifier matches zero or one occurrence of the preceding character or group. For example, the regular expression `/colou?r/` matches both `color` and `colour`, because the `u` is optional.\n\nMark your capture group as optional.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+ (hundred|thousand|million|billion) dollars/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `dollarRegex` should use the `?` quantifier.\n\n```js\nassert.match(dollarRegex.source, /\\?/);\n```\n\nYour `(hundred|thousand|million|billion)` capture group should be optional.\n\n```js\nassert.match(dollarRegex.source, /\\(hundred\\|thousand\\|million\\|billion\\)\\?/);\n```"
    },
    {
      "title": "Step 21",
      "description": "One last thing with this expression. You don't actually need the match value from your capture group, so you can turn it into a <dfn>non-capturing group</dfn>. This will allow you to group the characters together without preserving the result.\n\nTo create a non-capturing group in a regular expression, you can add `?:` after the opening parenthesis of a group. For instance, `(?:a|b)` will match either `a` or `b`, but it will not capture the result.\n\nUpdate your regular expression to use a non-capturing group.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+\\s*(hundred|thousand|million|billion)?\\s+dollars/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `dollarRegex` should use `?:`.\n\n```js\nassert.match(dollarRegex.source, /\\?:/);\n```\n\nYour `dollarRegex` should use a non-capturing group.\n\n```js\nassert.match(dollarRegex.source, /\\(\\?:.*\\)/);\n```\n\nYour `(hundred|thousand|million|billion)` should be a non-capturing group.\n\n```js\nassert.match(dollarRegex.source, /\\(\\?:hundred\\|thousand\\|million\\|billion\\)/);\n```\n\nYour `(hundred|thousand|million|billion)` group should still be optional.\n\n```js\nassert.match(dollarRegex.source, /\\(\\?:hundred\\|thousand\\|million\\|billion\\)\\?/);\n```"
    },
    {
      "title": "Step 22",
      "description": "Your next regular expression will look for strings like `free money`. Start by declaring a `freeRegex` variable and assigning it a regular expression that will match the string `free money`. Remember to make it case-insensitive.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "You should declare a `freeRegex` variable using `const`.\n\n```js\nassert.match(code, /const\\s+freeRegex\\s*=/);\n```\n\nYour `freeRegex` variable should be a regular expression.\n\n```js\nassert.instanceOf(freeRegex, RegExp);\n```\n\nYour `freeRegex` should match `free money`.\n\n```js\nassert.match('free money', freeRegex);\n```\n\nYour `freeRegex` should be case-insensitive.\n\n```js\nassert.include(freeRegex.flags, 'i');\n```"
    },
    {
      "title": "Step 23",
      "description": "Add your new regular expression to your `denyList` array so you can test it.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /free money/i;\n\n--fcc-editable-region--\nconst denyList = [helpRegex, dollarRegex];\n--fcc-editable-region--\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `denyList` array should include your `freeRegex` variable.\n\n```js\nassert.deepInclude(denyList, freeRegex);\n```\n\nYour `denyList` array should include your `dollarRegex` variable.\n\n```js\nassert.deepInclude(denyList, dollarRegex);\n```\n\nYour `denyList` array should include your `helpRegex` variable.\n\n```js\nassert.deepInclude(denyList, helpRegex);\n```"
    },
    {
      "title": "Step 24",
      "description": "Spam messages often use numbers instead of letters to bypass filters. Your regular expression should catch these.\n\nReplace the `e` characters in your regular expression with character classes that match `e` and `3`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /free money/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `freeRegex` should use a character class.\n\n```js\nassert.match(freeRegex.source, /\\[.*\\]/);\n```\n\nYour `freeRegex` should use a character class to match `e` and `3`.\n\n```js\nassert.match(freeRegex.source, /\\[(e3|3e)\\]/);\n```\n\nYour `freeRegex` should use three character classes to match `e` and `3`.\n\n```js\nassert.lengthOf(freeRegex.source.match(/\\[(e3|3e)\\]/g), 3);\n```\n\nYour `freeRegex` should match `free money`.\n\n```js\nassert.equal(\"free money\".match(freeRegex)?.[0], \"free money\");\n```\n\nYour `freeRegex` should match `fr33 mon3y`.\n\n```js\nassert.equal(\"fr33 mon3y\".match(freeRegex)?.[0], \"fr33 mon3y\");\n```"
    },
    {
      "title": "Step 25",
      "description": "Now update your `o` character to match `o` and `0` (the digit).",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /fr[e3][e3] mon[e3]y/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `freeRegex` should use a character class to match `o` and `0`.\n\n```js\nassert.match(freeRegex.source, /\\[(o0|0o)\\]/);\n```\n\nYour `freeRegex` should match `free money`.\n\n```js\nassert.match('free money', freeRegex);\n```\n\nYour `freeRegex` should match `fr33 m0n3y`.\n\n```js\nassert.match('fr33 m0n3y', freeRegex);\n```"
    },
    {
      "title": "Step 26",
      "description": "Your regex should match whole words, not partial words. That is, you do not want to match `hands-free money management`.\n\nTo do this, start by checking for spaces before and after your pattern. You can do this by using the meta character `\\s`, which will match spaces, tabs, and line breaks.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /fr[e3][e3] m[o0]n[e3]y/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `freeRegex` should use the `\\s` token.\n\n```js\nassert.match(freeRegex.source, /\\\\s/);\n```\n\nYour `freeRegex` should look for spaces at the beginning and end of your pattern.\n\n```js\nassert.isTrue(freeRegex.source.startsWith('\\\\s'));\nassert.isTrue(freeRegex.source.endsWith('\\\\s'));\n```"
    },
    {
      "title": "Step 27",
      "description": "If you try entering the message `free money`, you'll notice it doesn't match your expression! This is because `\\s` doesn't match the beginning or end of the text.\n\nTo match the beginning of the text, you can use the `^` anchor. This asserts that your pattern match starts at the beginning of the full string.\n\nReplace your first `\\s` character with a non-capturing group that matches `\\s` or `^`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /\\sfr[e3][e3] m[o0]n[e3]y\\s/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `freeRegex` should use a non-capturing group.\n\n```js\nassert.match(freeRegex.source, /\\(\\?:/);\n```\n\nYour `freeRegex` should use a non-capturing group to match `\\s` or `^`.\n\n```js\nassert.match(freeRegex.source, /\\(\\?:(\\^\\|\\\\s|\\\\s\\|\\^)\\)/);\n```\n\nYour `freeRegex` should match `it's free money time`.\n\n```js\nassert.match(\"it's free money time\", freeRegex);\n```\n\nYour `freeRegex` should match `free money time`.\n\n```js\nassert.match('free money time', freeRegex);\n```\n\nYour `freeRegex` should not match `hands-free money time`.\n\n```js\nassert.notMatch('hands-free money', freeRegex);\n```"
    },
    {
      "title": "Step 28",
      "description": "You still aren't matching `free money` yet, because you need to match the end of the string as well.\n\nLike the `^` anchor, you can use the `$` anchor to match the end of the string.\n\nUpdate your regular expression to match either the end of the string or a space, like you did for the beginning of the string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\n--fcc-editable-region--\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y\\s/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `freeRegex` should use a second non-capturing group.\n\n```js\nassert.lengthOf(freeRegex.source.match(/\\(\\?:/g), 2);\n```\n\nYour `freeRegex` should use a non-capturing group to match `\\s` or `$`.\n\n```js\nassert.match(freeRegex.source, /\\(\\?:(\\$\\|\\\\s|\\\\s\\|\\$)\\)/);\n```\n\nYour `freeRegex` should match `it's free money time`.\n\n```js\nassert.match(\"it's free money time\", freeRegex);\n```\n\nYour `freeRegex` should match `free money time`.\n\n```js\nassert.match('free money time', freeRegex);\n```\n\nYour `freeRegex` should match `it's free money`.\n\n```js\nassert.match(\"it's free money\", freeRegex);\n```\n\nYour `freeRegex` should match `free money`.\n\n```js\nassert.match('free money', freeRegex);\n```\n\nYour `freeRegex` should not match `hands-free money time`.\n\n```js\nassert.notMatch('hands-free money', freeRegex);\n```\n\nYour `freeRegex` should not match `free money-management`.\n\n```js\nassert.notMatch('free money-management', freeRegex);\n```"
    },
    {
      "title": "Step 29",
      "description": "Your next regular expression will match strings like `stock alert`. Declare a `stockRegex` variable and assign it a regular expression that will match the string `stock alert`. Remember to make it case insensitive.\n\nAdd it to your `denyList` array as well.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\n--fcc-editable-region--\n\n\nconst denyList = [helpRegex, dollarRegex, freeRegex];\n--fcc-editable-region--\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "You should use `const` to declare your `stockRegex` variable.\n\n```js\nassert.match(code, /const\\s+stockRegex\\s*=/);\n```\n\nYour `stockRegex` variable should be assigned a regular expression.\n\n```js\nassert.instanceOf(stockRegex, RegExp);\n```\n\nYour `stockRegex` should match `stock alert`.\n\n```js\nassert.match('stock alert', stockRegex);\n```\n\nYour `stockRegex` should be case-insensitive.\n\n```js\nassert.include(stockRegex.flags, 'i');\n```\n\nYour `denyList` array should contain `stockRegex`.\n\n```js\nassert.deepInclude(denyList, stockRegex);\n```\n\nYour `denyList` array should contain `freeRegex`.\n\n```js\nassert.deepInclude(denyList, freeRegex);\n```\n\nYour `denyList` array should contain `dollarRegex`.\n\n```js\nassert.deepInclude(denyList, dollarRegex);\n```\n\nYour `denyList` array should contain `helpRegex`.\n\n```js\nassert.deepInclude(denyList, helpRegex);\n```"
    },
    {
      "title": "Step 30",
      "description": "Like your `freeRegex`, update your `stockRegex` to replace the `e` and `o` characters with character classes to match the letter and the corresponding number.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /stock alert/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `stockRegex` should use a character class to match the letter `e` and the number `3`.\n\n```js\nassert.match(stockRegex.source, /\\[(e3|3e)\\]/);\n```\n\nYour `stockRegex` should use a character class to match the letter `o` and the number `0`.\n\n```js\nassert.match(stockRegex.source, /\\[(o0|0o)\\]/);\n```\n\nYour `stockRegex` should match `stock alert`.\n\n```js\nassert.match('stock alert', stockRegex);\n```\n\nYour `stockRegex` should match `st0ck al3rt`.\n\n```js\nassert.match('st0ck al3rt', stockRegex);\n```"
    },
    {
      "title": "Step 31",
      "description": "Next update your `s` and `t` characters to also match `5` and `7` respectively.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /st[o0]ck al[e3]rt/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `stockRegex` should use a character class to match the letter `s` and the number `5`.\n\n```js\nassert.match(stockRegex.source, /\\[(s5|5s)\\]/);\n```\n\nYour `stockRegex` should use a character class to match the letter `t` and the number `7`.\n\n```js\nassert.match(stockRegex.source, /\\[(t7|7t)\\]/);\n```\n\nYour `stockRegex` should match `stock alert`.\n\n```js\nassert.match('stock alert', stockRegex);\n```\n\nYour `stockRegex` should match `570ck al3r7`.\n\n```js\nassert.match('570ck al3r7', stockRegex);\n```"
    },
    {
      "title": "Step 32",
      "description": "Character classes can take more than two characters. Replace your `a` character with a character class that matches `a`, `@`, and `4`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /[s5][t7][o0]ck al[e3]r[t7]/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `stockRegex` should use a character class to match `a`, `@`, and `4`.\n\n```js\nassert.match(stockRegex.source, /\\[(a@4|a4@|4@a|4a@|@a4|@4a)]/);\n```\n\nYour `stockRegex` should match `stock alert`.\n\n```js\nassert.match('stock alert', stockRegex);\n```\n\nYour `stockRegex` should match `stock @lert`.\n\n```js\nassert.match('stock @lert', stockRegex);\n```\n\nYour `stockRegex` should match `stock 4lert`.\n\n```js\nassert.match('stock 4lert', stockRegex);\n```\n\nYour `stockRegex` should match `570ck 4l3r7`.\n\n```js\nassert.match('570ck 4l3r7', stockRegex);\n```"
    },
    {
      "title": "Step 33",
      "description": "Using the same syntax, update `c` to match `c`, `{`, `[`, and `(`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /[s5][t7][o0]ck [a@4]l[e3]r[t7]/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `stockRegex` should use a character class to match `c`, `{`, `[`, and `(`.\n\n```js\nassert.match(stockRegex.source, /\\[(c\\{\\[\\(|\\{c\\[\\(|\\[c\\{\\(|c\\[\\{\\(|\\{\\[c\\(|\\[\\{c\\(|\\[\\{\\(c|\\{\\[\\(c|\\(\\[\\{c|\\[\\(\\{c|\\{\\(\\[c|\\(\\{\\[c|\\(c\\[\\{|c\\(\\[\\{|\\[\\(c\\{|\\(\\[c\\{|c\\[\\(\\{|\\[c\\(\\{|\\{c\\(\\[|c\\{\\(\\[|\\(\\{c\\[|\\{\\(c\\[|c\\(\\{\\[|\\(c\\{\\[)\\]/);\n```\n\nYour `stockRegex` should match `stock alert`.\n\n```js\nassert.match('stock alert', stockRegex);\n```\n\nYour `stockRegex` should match `570(k 4l3r7`.\n\n```js\nassert.match('570(k 4l3r7', stockRegex);\n```\n\nYour `stockRegex` should match `sto{k alert`.\n\n```js\nassert.match('sto{k alert', stockRegex);\n```\n\nYour `stockRegex` should match `sto[k alert`.\n\n```js\nassert.match('sto[k alert', stockRegex);\n```"
    },
    {
      "title": "Step 34",
      "description": "Finally, allow your regex to match whole words (like you did with `freeRegex`).",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\n--fcc-editable-region--\nconst stockRegex = /[s5][t7][o0][c{[(]k [a@4]l[e3]r[t7]/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `stockRegex` should use a non-capturing group.\n\n```js\nassert.match(stockRegex.source, /\\(\\?:/);\n```\n\nYour `stockRegex` should use a non-capturing group to match `\\s` or `^`.\n\n```js\nassert.match(stockRegex.source, /\\(\\?:(\\^\\|\\\\s|\\\\s\\|\\^)\\)/);\n```\n\nYour `stockRegex` should use a second non-capturing group.\n\n```js\nassert.lengthOf(stockRegex.source.match(/\\(\\?:/g), 2);\n```\n\nYour `stockRegex` should use a non-capturing group to match `\\s` or `$`.\n\n```js\nassert.match(stockRegex.source, /\\(\\?:(\\$\\|\\\\s|\\\\s\\|\\$)\\)/);\n```\n\nYour `stockRegex` should match `it's stock alert time`.\n\n```js\nassert.match(\"it's stock alert time\", stockRegex);\n```\n\nYour `stockRegex` should match `stock alert time`.\n\n```js\nassert.match('stock alert time', stockRegex);\n```\n\nYour `stockRegex` should match `it's stock alert`.\n\n```js\nassert.match(\"it's stock alert\", stockRegex);\n```\n\nYour `stockRegex` should match `stock alert`.\n\n```js\nassert.match('stock alert', stockRegex);\n```\n\nYour `stockRegex` should not match `hands-stock alert time`.\n\n```js\nassert.notMatch('hands-stock alert', stockRegex);\n```\n\nYour `stockRegex` should not match `stock alert-management`.\n\n```js\nassert.notMatch('stock alert-management', stockRegex);\n```"
    },
    {
      "title": "Step 35",
      "description": "Your final regular expression will look for strings like `dear friend`. Declare a `dearRegex` and assign it a regular expression that will match the string `dear friend`. Remember to make it case insensitive, and add it to your `denyList` array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\nconst stockRegex = /(?:^|\\s)[s5][t7][o0][c{[(]k [a@4]l[e3]r[t7](?:$|\\s)/i;\n--fcc-editable-region--\n\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex];\n--fcc-editable-region--\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "You should use `const` to declare your `dearRegex` variable.\n\n```js\nassert.match(code, /const\\s+dearRegex\\s*=/);\n```\n\nYour `dearRegex` variable should be assigned a regular expression.\n\n```js\nassert.instanceOf(dearRegex, RegExp);\n```\n\nYour `dearRegex` should match `dear friend`.\n\n```js\nassert.match('dear friend', dearRegex);\n```\n\nYour `dearRegex` should be case-insensitive.\n\n```js\nassert.include(dearRegex.flags, 'i');\n```\n\nYour `denyList` array should contain `dearRegex`.\n\n```js\nassert.deepInclude(denyList, dearRegex);\n```\n\nYour `denyList` array should contain `stockRegex`.\n\n```js\nassert.deepInclude(denyList, stockRegex);\n```\n\nYour `denyList` array should contain `freeRegex`.\n\n```js\nassert.deepInclude(denyList, freeRegex);\n```\n\nYour `denyList` array should contain `dollarRegex`.\n\n```js\nassert.deepInclude(denyList, dollarRegex);\n```\n\nYour `denyList` array should contain `helpRegex`.\n\n```js\nassert.deepInclude(denyList, helpRegex);\n```"
    },
    {
      "title": "Step 36",
      "description": "To put everything you have learned together, update your `dearRegex` to map the vowels to the corresponding numbers (note that `i` should match `1`, and also match the pipe symbol `|`), and to match whole words.\n\nWith that, your spam filter project is complete.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+\\s*(?:hundred|thousand|million|billion)?\\s+dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\nconst stockRegex = /(?:^|\\s)[s5][t7][o0][c{[(]k [a@4]l[e3]r[t7](?:$|\\s)/i;\n--fcc-editable-region--\nconst dearRegex = /dear friend/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex, dearRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `dearRegex` should use a character class to match `e` or `3`.\n\n```js\nassert.match(dearRegex.source, /\\[(e3|3e)\\]/);\n```\n\nYour `dearRegex` should use a character class to match `a`, `@`, or `4`.\n\n```js\nassert.match(dearRegex.source, /\\[(a@4|a4@|4a@|4@a|@a4|@4a)\\]/);\n```\n\nYour `dearRegex` should use a character class to match `i`, `1`, or `|`.\n\n```js\nassert.match(dearRegex.source, /\\[(i1\\||i\\|1|1i\\||1\\|i|\\|1i|\\|i1)\\]/);\n```\n\nYour `dearRegex` should use a non-capturing group.\n\n```js\nassert.match(dearRegex.source, /\\(\\?:/);\n```\n\nYour `dearRegex` should use a non-capturing group to match `\\s` or `^`.\n\n```js\nassert.match(dearRegex.source, /\\(\\?:(\\^\\|\\\\s|\\\\s\\|\\^)\\)/);\n```\n\nYour `dearRegex` should use a second non-capturing group.\n\n```js\nassert.lengthOf(dearRegex.source.match(/\\(\\?:/g), 2);\n```\n\nYour `dearRegex` should use a non-capturing group to match `\\s` or `$`.\n\n```js\nassert.match(dearRegex.source, /\\(\\?:(\\$\\|\\\\s|\\\\s\\|\\$)\\)/);\n```\n\nYour `dearRegex` should match `dear friend`.\n\n```js\nassert.match('dear friend', dearRegex);\n```\n\nYour `dearRegex` should match `d34r fr13nd`.\n\n```js\nassert.match('d34r fr13nd', dearRegex);\n```\n\nYour `dearRegex` should match `d3@r fr|3nd`.\n\n```js\nassert.match('d3@r fr|3nd', dearRegex);\n```\n\nYour `dearRegex` should match `my dear friend Naomi`.\n\n```js\nassert.match('my dear friend Naomi', dearRegex);\n```\n\nYour `dearRegex` should match `dear friend Naomi`.\n\n```js\nassert.match('dear friend Naomi', dearRegex);\n```\n\nYour `dearRegex` should match `my dear friend`.\n\n```js\nassert.match('my dear friend', dearRegex);\n```\n\nYour `dearRegex` should not match `non-dear friend`.\n\n```js\nassert.notMatch('non-dear friend', dearRegex);\n```\n\nYour `dearRegex` should not match `dear friend-o`.\n\n```js\nassert.notMatch('dear friend-o', dearRegex);\n```"
    },
    {
      "title": "Step 20",
      "description": "While this expression does match `1 hundred dollars`, it will not match `1  hundred  dollars`, or `10 dollars`.\n\nSpam messages can and will find a way to exploit flaws in your detection. Time to improve your regex.\n\nReplace the first literal space with the `\\s*` expression. The `\\s` character class matches whitespace, such as spaces, tabs, and new lines. The `*` quantifier means \"match the previous character 0 or more times\".\n\nReplace the second literal space with `\\s+`. The `+` quantifier means \"match the previous character at least one time\".",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\n--fcc-editable-region--\nconst dollarRegex = /[0-9]+ (hundred|thousand|million|billion)? dollars/i;\n--fcc-editable-region--\n\nconst denyList = [helpRegex, dollarRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});"
        }
      ],
      "testCode": "Your `dollarRegex` must not use literal spaces. \n\n```js\nassert.notMatch(dollarRegex.source, / /);\n```\n\nYour `dollarRegex` must allow any number of spaces before the dollar quantity, and one or more spaces after.\n\n```js\nassert.match(dollarRegex.source, /\\\\s\\*\\(hundred\\|thousand\\|million\\|billion\\)\\?\\\\s\\+/);\n```"
    }
  ]
}