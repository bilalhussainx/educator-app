{
  "section": {
    "id": "03-front-end-development-libraries",
    "name": "03-front-end-development-libraries"
  },
  "challenges": [
    {
      "id": "bad87fee1348bd9aec908849",
      "title": "Add Elements within Your Bootstrap Wells",
      "challengeType": 0,
      "dashedName": "add-elements-within-your-bootstrap-wells",
      "description": "Now we're several `div` elements deep on each column of our row. This is as deep as we'll need to go. Now we can add our `button` elements.\n\nNest three `button` elements within each of your `div` elements having the class name `well`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n\n\n\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n\n\n\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Three `button` elements should be nested within each of your `div` elements with class `well`.\n\n```js\nconst buttonOne = document.querySelectorAll('div.well')?.[0];\nconst buttonOneChildren = buttonOne?.querySelectorAll(`:scope ${'button'}`);\nassert.lengthOf(buttonOneChildren,3);\n\nconst buttonTwo = document.querySelectorAll('div.well')?.[1]\nconst buttonTwoChildren = buttonTwo?.querySelectorAll(`:scope ${'button'}`);\nassert.lengthOf(buttonTwoChildren,3);\n```\n\nYou should have a total of 6 `button` elements.",
          "testCode": "assert.lengthOf(document.querySelectorAll('button'), 6);"
        },
        {
          "text": "All of your `button` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length,code.match(/<button/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16636,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-elements-within-your-bootstrap-wells.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aedc08845",
      "title": "Add Font Awesome Icons to all of our Buttons",
      "challengeType": 0,
      "dashedName": "add-font-awesome-icons-to-all-of-our-buttons",
      "description": "Font Awesome is a convenient library of icons. These icons can be web fonts or vector graphics. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.",
      "instructions": "Use Font Awesome to add an `info-circle` icon to your info button and a `trash` icon to your delete button.\n\n**Note:** You can use either `i` or `span` elements to complete this challenge.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fas fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fas fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should add a `<i class=\"fas fa-info-circle\"></i>` within your `info` button element.",
          "testCode": "assert.isTrue(\n  document.querySelector('.btn-info > i')?.classList?.value === 'fas fa-info-circle' ||\n    document.querySelector('.btn-info > span')?.classList?.value === 'fas fa-info-circle'\n);"
        },
        {
          "text": "You should add a `<i class=\"fas fa-trash\"></i>` within your `delete` button element.",
          "testCode": "assert.isTrue(\n  document.querySelector('.btn-danger > i')?.classList?.value === 'fas fa-trash' ||\n    document.querySelector('.btn-danger > span')?.classList?.value === 'fas fa-trash'\n);"
        },
        {
          "text": "Each of your `i` elements should have a closing tag and `<i class=\"fas fa-thumbs-up\"></i>` is in your `like` button element.",
          "testCode": "assert.match(code,/<\\/i>|<\\/span/g);\nassert.lengthOf(code.match(/<\\/i|<\\/span>/g),4)\nassert.isTrue(\n    document.querySelector('.btn-primary > i')?.classList?.value === 'fas fa-thumbs-up' ||\n      document.querySelector('.btn-primary > span')?.classList?.value === 'fas fa-thumbs-up'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16637,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-all-of-our-buttons.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aedd08845",
      "title": "Add Font Awesome Icons to our Buttons",
      "challengeType": 0,
      "dashedName": "add-font-awesome-icons-to-our-buttons",
      "description": "Font Awesome is a convenient library of icons. These icons can be webfonts or vector graphics. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.\n\nYou can include Font Awesome in any app by adding the following code to the top of your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\" integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\" crossorigin=\"anonymous\">\n```\n\nIn this case, we've already added it for you to this page behind the scenes.\n\nThe `i` element was originally used to make other elements italic, but is now commonly used for icons. You can add the Font Awesome classes to the `i` element to turn it into an icon, for example:\n\n```html\n<i class=\"fas fa-info-circle\"></i>\n```\n\nNote that the `span` element is also acceptable for use with icons.",
      "instructions": "Use Font Awesome to add a `thumbs-up` icon to your like button by giving it an `i` element with the classes `fas` and `fa-thumbs-up`. Make sure to keep the text `Like` next to the icon.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should add an `i` element with the classes `fas` and `fa-thumbs-up`.",
          "testCode": "assert.isTrue(document.querySelector('i')?.classList?.value === 'fas fa-thumbs-up' || document.querySelector('span')?.classList?.value === 'fas fa-thumbs-up');"
        },
        {
          "text": "Your `fa-thumbs-up` icon should be located within the Like button.",
          "testCode": "const iconTextContent = document.querySelector('i.fa-thumbs-up')?.parentNode?.textContent;  \nconst spanTextContent = document.querySelector('span.fa-thumbs-up')?.parentNode?.textContent;  \nassert.isTrue(\n  (iconTextContent?.match(/Like/gi) &&\n    document.querySelector('.btn-primary > i') === document.querySelector('.fas.fa-thumbs-up')) ||\n    (spanTextContent?.match(/Like/gi) &&\n      document.querySelector('.btn-primary > span') === document.querySelector('.fas.fa-thumbs-up')));"
        },
        {
          "text": "Your `i` element should be nested within your `button` element.",
          "testCode": "const button = document.querySelector('button'); \nconst i = button?.querySelectorAll(\"i\");\nconst span =  button?.querySelectorAll(\"span\");\nassert(i.length > 0 ||span.length > 0);"
        },
        {
          "text": "Your icon element should have a closing tag.",
          "testCode": "assert.match(code, /(<\\/i>|<\\/span>)\\s*Like\\s*<\\/button>/g);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16638,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-font-awesome-icons-to-our-buttons.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908853",
      "title": "Add id Attributes to Bootstrap Elements",
      "challengeType": 0,
      "dashedName": "add-id-attributes-to-bootstrap-elements",
      "description": "Recall that in addition to class attributes, you can give each of your elements an `id` attribute.\n\nEach id must be unique to a specific element and used only once per page.\n\nLet's give a unique id to each of our `div` elements of class `well`.\n\nRemember that you can give an element an id like this:\n\n```html\n<div class=\"well\" id=\"center-well\">\n```\n\nGive the well on the left the id of `left-well`. Give the well on the right the id of `right-well`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your left `well` should have the id of `left-well`.",
          "testCode": "const column = document.querySelectorAll('.col-xs-6')[0];\nconst leftWall = column?.querySelectorAll(`:scope ${'#left-well'}`);\nassert.lengthOf(leftWall,1)"
        },
        {
          "text": "Your right `well` should have the id of `right-well`.",
          "testCode": "const column = document.querySelectorAll('.col-xs-6')[1];\nconst rightWall = column?.querySelectorAll(`:scope ${'#right-well'}`);\nassert.lengthOf(rightWall,1)"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16639,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\add-id-attributes-to-bootstrap-elements.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908850",
      "title": "Apply the Default Bootstrap Button Style",
      "challengeType": 0,
      "dashedName": "apply-the-default-bootstrap-button-style",
      "description": "Bootstrap has another button class called `btn-default`.\n\nApply both the `btn` and `btn-default` classes to each of your `button` elements.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should apply the `btn` class to each of your `button` elements.",
          "testCode": "assert.lengthOf(document.querySelectorAll('.btn'),6);"
        },
        {
          "text": "You should apply the `btn-default` class to each of your `button` elements.",
          "testCode": "assert.lengthOf(document.querySelectorAll('.btn-default'), 6);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16657,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\apply-the-default-bootstrap-button-style.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348cd8acef08813",
      "title": "Call out Optional Actions with btn-info",
      "challengeType": 0,
      "dashedName": "call-out-optional-actions-with-btn-info",
      "description": "Bootstrap comes with several pre-defined colors for buttons. The `btn-info` class is used to call attention to optional actions that the user can take.\n\nCreate a new block-level Bootstrap button below your `Like` button with the text `Info`, and add Bootstrap's `btn-info` class to it.\n\nNote that these buttons still need the `btn` and `btn-block` classes.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should create a new `button` element with the text `Info`.",
          "testCode": "const infoButton = document.querySelectorAll('button')?.[1]; \nassert.match(infoButton.textContent,/info/gi);"
        },
        {
          "text": "Both of your Bootstrap buttons should have the `btn` and `btn-block` classes.",
          "testCode": "assert.lengthOf(document.querySelectorAll('button.btn-block.btn'),2);"
        },
        {
          "text": "Your new button should have the class `btn-info`.",
          "testCode": "const infoButton = [...document.querySelectorAll('button')].at(1);\nassert.isTrue(infoButton?.classList?.contains('btn-info'));"
        },
        {
          "text": "All of your `button` elements should have closing tags.\n\n```js\nassert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\n\nassert.equal(code.match(/<\\/button>/g)?.length,code.match(/<button/g)?.length);\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16770,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\call-out-optional-actions-with-btn-info.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd8acde08812",
      "title": "Center Text with Bootstrap",
      "challengeType": 0,
      "dashedName": "center-text-with-bootstrap",
      "description": "Now that we're using Bootstrap, we can center our heading element to make it look better. All we need to do is add the class `text-center` to our `h2` element.\n\nRemember that you can add several classes to the same element by separating each of them with a space, like this:\n\n```html\n<h2 class=\"red-text text-center\">your text</h2>\n```",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `h2` element should be centered by applying the class `text-center`",
          "testCode": "assert.isTrue(document.querySelector('h2')?.classList?.contains('text-center'));"
        },
        {
          "text": "Your `h2` element should still have the class `red-text`",
          "testCode": "assert.isTrue(document.querySelector('h2')?.classList?.contains('red-text'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16771,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\center-text-with-bootstrap.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348cd8acef08812",
      "title": "Create a Block Element Bootstrap Button",
      "challengeType": 0,
      "dashedName": "create-a-block-element-bootstrap-button",
      "description": "Normally, your `button` elements with the `btn` and `btn-default` classes are only as wide as the text that they contain. For example:\n\n```html\n<button class=\"btn btn-default\">Submit</button>\n```\n\nThis button would only be as wide as the word `Submit`.\n\n<button class='btn btn-default'>Submit</button>\n\nBy making them block elements with the additional class of `btn-block`, your button will stretch to fill your page's entire horizontal space and any elements following it will flow onto a \"new line\" below the block.\n\n```html\n<button class=\"btn btn-default btn-block\">Submit</button>\n```\n\nThis button would take up 100% of the available width.\n\n<button class='btn btn-default btn-block'>Submit</button>\n\nNote that these buttons still need the `btn` class.\n\nAdd Bootstrap's `btn-block` class to your Bootstrap button.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-default\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-default\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your button should still have the `btn` and `btn-default` classes.",
          "testCode": "assert.isTrue(document.querySelector('button')?.classList?.contains('btn'));\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn-default'));"
        },
        {
          "text": "Your button should have the class `btn-block`.",
          "testCode": "assert.isTrue(document.querySelector('button')?.classList?.contains('btn-block'));"
        },
        {
          "text": "All of your `button` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length, code.match(/<button/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16810,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-block-element-bootstrap-button.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348cd8acdf08812",
      "title": "Create a Bootstrap Button",
      "challengeType": 0,
      "dashedName": "create-a-bootstrap-button",
      "description": "Bootstrap has its own styles for `button` elements, which look much better than the plain HTML ones.\n\nCreate a new `button` element below your large kitten photo. Give it the `btn` and `btn-default` classes, as well as the text of `Like`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n</head>\n<body>\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n\n   <!-- ADD Bootstrap Styled Button -->\n  <button class=\"btn btn-default\">Like</button> \n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>\n</html>"
        }
      ],
      "tests": [
        {
          "text": "You should create a new `button` element with the text `Like`.",
          "testCode": "assert.match(document.querySelector('button')?.textContent, /like/gi);\nassert.lengthOf(document.querySelectorAll('img.img-responsive + button.btn'),1)"
        },
        {
          "text": "Your new button should have two classes: `btn` and `btn-default`.",
          "testCode": "assert.isTrue(document.querySelector('button')?.classList?.contains('btn') )\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn-default'));"
        },
        {
          "text": "All of your `button` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length ,code.match(/<button/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16811,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-button.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908846",
      "title": "Create a Bootstrap Headline",
      "challengeType": 0,
      "dashedName": "create-a-bootstrap-headline",
      "description": "Now let's build something from scratch to practice our HTML, CSS and Bootstrap skills.\n\nWe'll build a jQuery playground, which we'll soon put to use in our jQuery challenges.\n\nTo start with, create an `h3` element, with the text `jQuery Playground`.\n\nColor your `h3` element with the `text-primary` Bootstrap class, and center it with the `text-center` Bootstrap class.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<h3 class=\"text-primary text-center\">jQuery Playground</h3>"
        }
      ],
      "tests": [
        {
          "text": "You should add an `h3` element to your page.",
          "testCode": "assert.lengthOf(document.querySelectorAll('h3'),1);"
        },
        {
          "text": "Your `h3` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/h3>/g);\nassert.match(code,/<h3/g);\nassert.equal( code.match(/<\\/h3>/g).length , code.match(/<h3/g).length);"
        },
        {
          "text": "Your `h3` element should be colored by applying the class `text-primary`",
          "testCode": "assert.isTrue(document.querySelector('h3')?.classList?.contains('text-primary'));"
        },
        {
          "text": "Your `h3` element should be centered by applying the class `text-center`",
          "testCode": "assert.isTrue(document.querySelector('h3')?.classList?.contains('text-center'));"
        },
        {
          "text": "Your `h3` element should have the text `jQuery Playground`.",
          "testCode": "assert.match(document.querySelector('h3')?.textContent, /jquery(\\s)+playground/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16812,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-headline.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9bec908846",
      "title": "Create a Bootstrap Row",
      "challengeType": 0,
      "dashedName": "create-a-bootstrap-row",
      "description": "Now we'll create a Bootstrap row for our inline elements.\n\nCreate a `div` element below the `h3` tag, with a class of `row`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\"></div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should add a `div` element below your `h3` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div'),2);\nassert.lengthOf(document.querySelectorAll('div.row h3.text-primary'),0);\nassert.lengthOf(document.querySelectorAll('div.row + h3.text-primary'),0)\nassert.lengthOf(document.querySelectorAll('h3.text-primary + div.row'),1);"
        },
        {
          "text": "Your `div` element should have the class `row`",
          "testCode": "const newDiv = document.querySelectorAll('div')?.[1]; \nassert.isTrue(newDiv?.classList?.contains('row'));"
        },
        {
          "text": "Your `row div` should be nested inside the `container-fluid div`",
          "testCode": "assert.lengthOf(document.querySelectorAll('div.container-fluid div.row'),1);"
        },
        {
          "text": "Your `div` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length ,code.match(/<div/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16813,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-bootstrap-row.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908852",
      "title": "Create a Class to Target with jQuery Selectors",
      "challengeType": 0,
      "dashedName": "create-a-class-to-target-with-jquery-selectors",
      "description": "Not every class needs to have corresponding CSS. Sometimes we create classes just for the purpose of selecting these elements more easily using jQuery.\n\nGive each of your `button` elements the class `target`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should apply the `target` class to each of your `button` elements.",
          "testCode": "assert.lengthOf(document.querySelectorAll('.target'),6);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16815,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-class-to-target-with-jquery-selectors.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aede08845",
      "title": "Create a Custom Heading",
      "challengeType": 0,
      "dashedName": "create-a-custom-heading",
      "description": "We will make a simple heading for our Cat Photo App by putting the title and relaxing cat image in the same row.\n\nRemember, Bootstrap uses a responsive grid system, which makes it easy to put elements into rows and specify each element's relative width. Most of Bootstrap's classes can be applied to a `div` element.\n\nNest your first image and your `h2` element within a single `<div class=\"row\">` element. Nest your `h2` element within a `<div class=\"col-xs-8\">` and your image in a `<div class=\"col-xs-4\">` so that they are on the same line.\n\nNotice how the image is now just the right size to fit along the text?",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary  text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n        <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `h2` element and topmost `img` element should both be nested together within a `div` element with the class `row`.",
          "testCode": "const row = document.querySelector('div.row');\nconst h2 = row?.querySelectorAll(`:scope ${'h2'}`)\nconst image = row?.querySelectorAll(`:scope ${'img'}`)\nassert.lengthOf(h2,1);\nassert.lengthOf(image ,1);"
        },
        {
          "text": "Your topmost `img` element should be nested within a `div` with the class `col-xs-4`.",
          "testCode": "const column = document.querySelector('div.col-xs-4');\nconst div = column?.querySelectorAll(`:scope ${'div'}`);\nconst img = column?.querySelectorAll(`:scope ${'img'}`)\nassert.isEmpty(div);\nassert.lengthOf(img,1)"
        },
        {
          "text": "Your `h2` element should be nested within a `div` with the class `col-xs-8`.\n\n```js\nconst column = document.querySelector('div.col-xs-8');\nconst div = column?.querySelectorAll(`:scope ${'div'}`);\nconst h2 = column?.querySelectorAll(`:scope ${'h2'}`)\n\nassert.isEmpty(div);\nassert.lengthOf(h2, 1);\n```\n\nAll of your `div` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length,code.match(/<div/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16816,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-a-custom-heading.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908848",
      "title": "Create Bootstrap Wells",
      "challengeType": 0,
      "dashedName": "create-bootstrap-wells",
      "description": "Bootstrap has a class called `well` that can create a visual sense of depth for your columns.\n\nNest one `div` element with the class `well` within each of your `col-xs-6` `div` elements.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n\n    </div>\n    <div class=\"col-xs-6\">\n\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\"></div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\"></div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should add a `div` element with the class `well` inside each of your `div` elements with the class `col-xs-6`",
          "testCode": "const wells = document.querySelectorAll('div.col-xs-6 > div.well');\nassert.lengthOf( wells,2 );"
        },
        {
          "text": "Both of your `div` elements with the class `col-xs-6` should be nested within your `div` element with the class `row`.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div.row > div.col-xs-6'),2);"
        },
        {
          "text": "All your `div` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g)?.length , code.match(/<div/g)?.length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16825,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\create-bootstrap-wells.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1347bd9aedf08845",
      "title": "Ditch Custom CSS for Bootstrap",
      "challengeType": 0,
      "dashedName": "ditch-custom-css-for-bootstrap",
      "description": "We can clean up our code and make our Cat Photo App look more conventional by using Bootstrap's built-in styles instead of the custom styles we created earlier.\n\nDon't worry - there will be plenty of time to customize our CSS later.\n\nDelete the `.red-text`, `p`, and `.smaller-image` CSS declarations from your `style` element so that the only declarations left in your `style` element are `h2` and `thick-green-border`.\n\nThen delete the `p` element that contains a dead link. Then remove the `red-text` class from your `h2` element and replace it with the `text-primary` Bootstrap class.\n\nFinally, remove the `smaller-image` class from your first `img` element and replace it with the `img-responsive` class.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `h2` element should no longer have the class `red-text`.",
          "testCode": "assert.isFalse(document.querySelector('h2')?.classList?.contains('red-text'));"
        },
        {
          "text": "Your `h2` element should now have the class `text-primary`.",
          "testCode": "assert.isTrue(document.querySelector('h2')?.classList?.contains('text-primary'));"
        },
        {
          "text": "Your paragraph elements should no longer use the font `Monospace`.",
          "testCode": "const paragraphElement = document.querySelector('p');\nconst paragraphFontFamily = window.getComputedStyle(paragraphElement)[\"font-family\"]; \nassert.notMatch(paragraphFontFamily,/monospace/i);"
        },
        {
          "text": "The `smaller-image` class should be removed from your top image.",
          "testCode": "assert.isFalse(document.querySelector('img')?.classList?.contains('smaller-image'));"
        },
        {
          "text": "You should add the `img-responsive` class to your top image.",
          "testCode": "assert.lengthOf(document.querySelectorAll('.img-responsive'),2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17565,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\ditch-custom-css-for-bootstrap.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908855",
      "title": "Give Each Element a Unique id",
      "challengeType": 0,
      "dashedName": "give-each-element-a-unique-id",
      "description": "We will also want to be able to use jQuery to target each button by its unique id.\n\nGive each of your buttons a unique id, starting with `target1` and ending with `target6`.\n\nMake sure that `target1` to `target3` are in `#left-well`, and `target4` to `target6` are in `#right-well`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\"></button>\n        <button class=\"btn btn-default target\" id=\"target2\"></button>\n        <button class=\"btn btn-default target\" id=\"target3\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\"></button>\n        <button class=\"btn btn-default target\" id=\"target5\"></button>\n        <button class=\"btn btn-default target\" id=\"target6\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "One `button` element should have the id `target1`.",
          "testCode": "const leftWall = document.querySelector('#left-well'); \nconst targetOne = leftWall?.querySelectorAll(`:scope ${'#target1'}`)\nassert.lengthOf(targetOne,1);"
        },
        {
          "text": "One `button` element should have the id `target2`.",
          "testCode": "const leftWall = document.querySelector('#left-well'); \nconst targetTwo = leftWall?.querySelectorAll(`:scope ${'#target2'}`)\nassert.lengthOf(targetTwo,1);"
        },
        {
          "text": "One `button` element should have the id `target3`.",
          "testCode": "const leftWall = document.querySelector('#left-well'); \nconst targetThree = leftWall?.querySelectorAll(`:scope ${'#target3'}`)\nassert.lengthOf(targetThree,1);"
        },
        {
          "text": "One `button` element should have the id `target4`.",
          "testCode": "const leftWall = document.querySelector('#right-well'); \nconst targetFour = leftWall?.querySelectorAll(`:scope ${'#target4'}`)\nassert.lengthOf(targetFour,1);"
        },
        {
          "text": "One `button` element should have the id `target5`.",
          "testCode": "const leftWall = document.querySelector('#right-well'); \nconst targetFive = leftWall?.querySelectorAll(`:scope ${'#target5'}`)\nassert.lengthOf(targetFive,1);"
        },
        {
          "text": "One `button` element should have the id `target6`.",
          "testCode": "const leftWall = document.querySelector('#right-well'); \nconst targetSix = leftWall?.querySelectorAll(`:scope ${'#target6'}`)\nassert.lengthOf(targetSix,1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18191,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\give-each-element-a-unique-id.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908746",
      "title": "House our page within a Bootstrap container-fluid div",
      "challengeType": 0,
      "dashedName": "house-our-page-within-a-bootstrap-container-fluid-div",
      "description": "Now let's make sure all the content on your page is mobile-responsive.\n\nLet's nest your `h3` element within a `div` element with the class `container-fluid`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<h3 class=\"text-primary text-center\">jQuery Playground</h3>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n    <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `div` element should have the class `container-fluid`.",
          "testCode": "assert.isTrue(document.querySelector('div')?.classList?.contains('container-fluid'));"
        },
        {
          "text": "Each of your `div` elements should have closing tags.\n\n```js\nassert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\n\nassert.equal(code.match(/<\\/div>/g).length ,code.match(/<div/g).length);\n```\n\nYour `h3` element should be nested inside a `div` element.",
          "testCode": "const divElement = document.querySelector('div');\nconst divChildren = divElement?.querySelectorAll(`:scope ${'h3'}`)\nassert.lengthOf(divChildren,1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18198,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\house-our-page-within-a-bootstrap-container-fluid-div.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908856",
      "title": "Label Bootstrap Buttons",
      "challengeType": 0,
      "dashedName": "label-bootstrap-buttons",
      "description": "Just like we labeled our wells, we want to label our buttons.\n\nGive each of your `button` elements text that corresponds to its id selector.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\"></button>\n        <button class=\"btn btn-default target\" id=\"target2\"></button>\n        <button class=\"btn btn-default target\" id=\"target3\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\"></button>\n        <button class=\"btn btn-default target\" id=\"target5\"></button>\n        <button class=\"btn btn-default target\" id=\"target6\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `button` element with the id `target1` should have the text `#target1`.",
          "testCode": "assert.match(document.querySelector('#target1')?.textContent,/#target1/gi)"
        },
        {
          "text": "Your `button` element with the id `target2` should have the text `#target2`.",
          "testCode": "assert.match(document.querySelector('#target2')?.textContent,/#target2/gi)"
        },
        {
          "text": "Your `button` element with the id `target3` should have the text `#target3`.",
          "testCode": "assert.match(document.querySelector('#target3')?.textContent,/#target3/gi)"
        },
        {
          "text": "Your `button` element with the id `target4` should have the text `#target4`.",
          "testCode": "assert.match(document.querySelector('#target4')?.textContent,/#target4/gi)"
        },
        {
          "text": "Your `button` element with the id `target5` should have the text `#target5`.",
          "testCode": "assert.match(document.querySelector('#target5')?.textContent,/#target5/gi)"
        },
        {
          "text": "Your `button` element with the id `target6` should have the text `#target6`.",
          "testCode": "assert.match(document.querySelector('#target6')?.textContent,/#target6/gi)"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18222,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\label-bootstrap-buttons.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908854",
      "title": "Label Bootstrap Wells",
      "challengeType": 0,
      "dashedName": "label-bootstrap-wells",
      "description": "For the sake of clarity, let's label both of our wells with their ids.\n\nAbove your left-well, inside its `col-xs-6` `div` element, add an `h4` element with the text `#left-well`.\n\nAbove your right-well, inside its `col-xs-6` `div` element, add an `h4` element with the text `#right-well`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should add an `h4` element to each of your `<div class=\"col-xs-6\">` elements.\n\n```js\nconst columnSixes = document.querySelectorAll('.col-xs-6');\nconst columnSixOneChildren = columnSixes?.[0]?.querySelectorAll(`:scope ${'h4'}`);\nassert.lengthOf(columnSixOneChildren,1);\n\nconst columnSixTwoChildren = columnSixes?.[1]?.querySelectorAll(`:scope ${'h4'}`);\nassert.lengthOf(columnSixTwoChildren,1); \n```\n\nOne `h4` element should have the text `#left-well`.",
          "testCode": "const firstH4 = document.querySelectorAll('h4')?.[0]; \nassert.match(firstH4?.textContent,/#left-well/gi);"
        },
        {
          "text": "One `h4` element should have the text `#right-well`.",
          "testCode": "const secondH4 = document.querySelectorAll('h4')?.[1]; \nassert.match(secondH4?.textContent,/#right-well/gi);"
        },
        {
          "text": "All of your `h4` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/h4>/g);\nassert.match(code,/<h4/g);\nassert.equal(code.match(/<\\/h4>/g).length , code.match(/<h4/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18223,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\label-bootstrap-wells.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908845",
      "title": "Line up Form Elements Responsively with Bootstrap",
      "challengeType": 0,
      "dashedName": "line-up-form-elements-responsively-with-bootstrap",
      "description": "Now let's get your form `input` and your submission `button` on the same line. We'll do this the same way we have previously: by using a `div` element with the class `row`, and other `div` elements within it using the `col-xs-*` class.\n\nNest both your form's text `input` and submit `button` within a `div` with the class `row`. Nest your form's text `input` within a div with the class of `col-xs-7`. Nest your form's submit `button` in a `div` with the class `col-xs-5`.\n\nThis is the last challenge we'll do for our Cat Photo App for now. We hope you've enjoyed learning Font Awesome, Bootstrap, and responsive design!",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-7\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n      </div>\n      <div class=\"col-xs-5\">\n        <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>\n      </div>\n    </div>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your form submission button and text input should be nested in a div with class `row`.",
          "testCode": "const textInput = document.querySelectorAll('div.row input[type=\"text\"]'); \nconst submitInput = document.querySelectorAll('div.row button[type=\"submit\"]');\nassert.lengthOf(textInput,1);\nassert.lengthOf(submitInput, 1);"
        },
        {
          "text": "Your form text input should be nested in a div with the class `col-xs-7`.",
          "testCode": "const textInput = document.querySelectorAll('div.col-xs-7 input[type=\"text\"]'); \nassert.lengthOf(textInput ,1);"
        },
        {
          "text": "Your form submission button should be nested in a div with the class `col-xs-5`.",
          "testCode": "const submitInput  = document.querySelectorAll('div.col-xs-5 button[type=\"submit\"]'); \nassert.lengthOf(submitInput ,1);"
        },
        {
          "text": "All of your `div` elements should have closing tags.\n\n```js\nassert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\n\nassert.equal(code.match(/<\\/div>/g).length,code.match(/<div/g).length);\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18225,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\line-up-form-elements-responsively-with-bootstrap.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9acde08812",
      "title": "Make Images Mobile Responsive",
      "challengeType": 0,
      "dashedName": "make-images-mobile-responsive",
      "description": "First, add a new image below the existing one. Set its `src` attribute to `https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg`.\n\nIt would be great if this image could be exactly the width of our phone's screen.\n\nFortunately, with Bootstrap, all we need to do is add the `img-responsive` class to your image. Do this, and the image should perfectly fit the width of your page.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\">\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should have a total of two images.",
          "testCode": "assert.lengthOf(document.querySelectorAll('img'), 2);"
        },
        {
          "text": "Your new image should be below your old one and have the class `img-responsive`.",
          "testCode": "assert.isTrue(document.querySelectorAll('img')?.[1]?.classList?.contains('img-responsive'));"
        },
        {
          "text": "Your new image should not have the class `smaller-image`.",
          "testCode": "assert.isFalse(document.querySelectorAll('img')?.[1]?.classList?.contains('smaller-image'));"
        },
        {
          "text": "Your new image should have a `src` of `https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg`.",
          "testCode": "assert.equal(document.querySelectorAll('img')?.[1]?.getAttribute('src') , 'https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg');"
        },
        {
          "text": "Your new `img` element should have a closing angle bracket.",
          "testCode": "assert.match(code,/<img/g);\nassert.lengthOf(code.match(/<img[^<]*>/g), 2);\nassert.lengthOf(code.match(/<img/g), 2);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18232,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\make-images-mobile-responsive.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aeda08845",
      "title": "Responsively Style Checkboxes",
      "challengeType": 0,
      "dashedName": "responsively-style-checkboxes",
      "description": "Since Bootstrap's `col-xs-*` classes are applicable to all `form` elements, you can use them on your checkboxes too! This way, the checkboxes will be evenly spread out across the page, regardless of how wide the screen resolution is.",
      "instructions": "Nest all three of your checkboxes in a `<div class=\"row\">` element. Then nest each of them in a `<div class=\"col-xs-4\">` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>   \n      </div>\n      <div class=\"col-xs-4\">\n         <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n         <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "All of your checkboxes should be nested inside one `div` with the class `row`.",
          "testCode": "const checkboxes = document.querySelectorAll(`div.row input[type=\"checkbox\"]`); \nassert.lengthOf(checkboxes,3);"
        },
        {
          "text": "Each of your checkboxes should be nested inside its own `div` with the class `col-xs-4`.",
          "testCode": "const checkboxes = document.querySelectorAll(`div.col-xs-4 input[type=\"checkbox\"]`); \nassert.lengthOf(checkboxes,3);"
        },
        {
          "text": "All of your `div` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length ,code.match(/<div/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18269,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\responsively-style-checkboxes.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aedb08845",
      "title": "Responsively Style Radio Buttons",
      "challengeType": 0,
      "dashedName": "responsively-style-radio-buttons",
      "description": "You can use Bootstrap's `col-xs-*` classes on `form` elements, too! This way, our radio buttons will be evenly spread out across the page, regardless of how wide the screen resolution is.\n\nNest both your radio buttons within a `<div class=\"row\">` element. Then nest each of them within a `<div class=\"col-xs-6\">` element.\n\n**Note:** As a reminder, radio buttons are `input` elements of type `radio`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "All of your radio buttons should be nested inside one `div` with the class `row`.",
          "testCode": "const radioButtons = document.querySelectorAll(`div.row input[type=radio]`); \nassert.lengthOf(radioButtons , 2);"
        },
        {
          "text": "Each of your radio buttons should be nested inside its own `div` with the class `col-xs-6`.",
          "testCode": "const radioButtons = document.querySelectorAll(`div.col-xs-6 input[type=radio]`); \nassert.lengthOf(radioButtons , 2);"
        },
        {
          "text": "All of your `div` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/div>/);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length,code.match(/<div/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18270,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\responsively-style-radio-buttons.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908847",
      "title": "Split Your Bootstrap Row",
      "challengeType": 0,
      "dashedName": "split-your-bootstrap-row",
      "description": "Now that we have a Bootstrap Row, let's split it into two columns to house our elements.\n\nCreate two `div` elements within your row, both with the class `col-xs-6`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n\n\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\"></div>\n    <div class=\"col-xs-6\"></div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Two `div class=\"col-xs-6\"` elements should be nested within your `div class=\"row\"` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('div.row > div.col-xs-6'),2);"
        },
        {
          "text": "All your `div` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length , code.match(/<div/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18306,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\split-your-bootstrap-row.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aed908845",
      "title": "Style Text Inputs as Form Controls",
      "challengeType": 0,
      "dashedName": "style-text-inputs-as-form-controls",
      "description": "You can add the `fa-paper-plane` Font Awesome icon by adding `<i class=\"fa fa-paper-plane\"></i>` within your submit `button` element.\n\nGive your form's text input field a class of `form-control`. Give your form's submit button the classes `btn btn-primary`. Also give this button the Font Awesome icon of `fa-paper-plane`.\n\nAll textual `<input>`, `<textarea>`, and `<select>` elements with the class `.form-control` have a width of 100%.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i>Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The submit button in your form should have the classes `btn btn-primary`.",
          "testCode": "assert.isTrue(document.querySelector('button[type=\"submit\"]')?.classList?.contains('btn'));\nassert.isTrue(document.querySelector('button[type=\"submit\"]')?.classList?.contains('btn-primary'));"
        },
        {
          "text": "You should add a `<i class=\"fa fa-paper-plane\"></i>` within your submit `button` element.\n\n```js\nconst submitButton = document.querySelector('button[type=\"submit\"]');\nconst fontIcon = submitButton?.querySelectorAll('i.fa.fa-paper-plane');\n\nassert.lengthOf(fontIcon ,1);\n```\n\nThe text `input` in your form should have the class `form-control`.",
          "testCode": "assert.isTrue(document.querySelector('input[type=\"text\"]')?.classList?.contains('form-control'));"
        },
        {
          "text": "Each of your `i` elements should have a closing tag.",
          "testCode": "assert.match(code,/<\\/i>/g);\nassert.lengthOf(code.match(/<\\/i/g),4);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18312,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\style-text-inputs-as-form-controls.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348cd8acef08811",
      "title": "Taste the Bootstrap Button Color Rainbow",
      "challengeType": 0,
      "dashedName": "taste-the-bootstrap-button-color-rainbow",
      "description": "The `btn-primary` class is the main color you'll use in your app. It is useful for highlighting actions you want your user to take.\n\nReplace Bootstrap's `btn-default` class with `btn-primary` in your button.\n\nNote that this button will still need the `btn` and `btn-block` classes.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-default btn-block\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-primary btn-block\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your button should have the class `btn-primary`.",
          "testCode": "assert.isTrue(document.querySelector('button')?.classList?.contains('btn-primary'));"
        },
        {
          "text": "Your button should still have the `btn` and `btn-block` classes.",
          "testCode": "assert.isTrue(document.querySelector('button')?.classList?.contains('btn-block'));\nassert.isTrue(document.querySelector('button')?.classList?.contains('btn'));"
        },
        {
          "text": "All your `button` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length , code.match(/<button/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18323,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\taste-the-bootstrap-button-color-rainbow.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aedf08845",
      "title": "Use a span to Target Inline Elements",
      "challengeType": 0,
      "dashedName": "use-a-span-to-target-inline-elements",
      "description": "You can use spans to create inline elements. Remember when we used the `btn-block` class to make the button fill the entire row?\n\n<button class='btn' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>normal button</button>\n\n<button class='btn btn-block' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>btn-block button</button>\n\nThat illustrates the difference between an \"inline\" element and a \"block\" element.\n\nBy using the inline `span` element, you can put several elements on the same line, and even style different parts of the same line differently.\n\nUsing a `span` element, nest the word `love` inside the `p` element that currently has the text `Things cats love`. Then give the `span` the class `text-danger` to make the text red.\n\nHere's how you would do this for the `p` element that has the text `Top 3 things cats hate`:\n\n```html\n<p>Top 3 things cats <span class=\"text-danger\">hate:</span></p>\n```",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love</span>:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `span` element should be inside your `p` element.",
          "testCode": "assert.lengthOf(document.querySelectorAll('p span'),1);"
        },
        {
          "text": "Your `span` element should have just the text `love`.",
          "testCode": "assert.match(document.querySelector('p span')?.textContent,/love/i);\nassert.notMatch(document.querySelector('p span')?.textContent, /Things cats/i);"
        },
        {
          "text": "Your `span` element should have class `text-danger`.",
          "testCode": "assert.isTrue(document.querySelector('span')?.classList?.contains('text-danger'));"
        },
        {
          "text": "Your `span` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/span>/g);\nassert.match(code,/<span/g);\nassert.equal(code.match(/<\\/span>/g).length,code.match(/<span/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18370,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-a-span-to-target-inline-elements.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9aec908857",
      "title": "Use Comments to Clarify Code",
      "challengeType": 0,
      "dashedName": "use-comments-to-clarify-code",
      "description": "When we start using jQuery, we will modify HTML elements without needing to actually change them in HTML.\n\nLet's make sure that everyone knows they shouldn't actually modify any of this code directly.\n\nRemember that you can start a comment with `<!--` and end a comment with `-->`\n\nAdd a comment at the top of your HTML that says `Code below this line should not be changed`",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<!-- Code below this line should not be changed -->\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should start a comment with `<!--` at the top of your HTML.",
          "testCode": "assert.match(code,(/^\\s*<!--/));"
        },
        {
          "text": "Your comment should have the text `Code below this line should not be changed`.",
          "testCode": "assert.match(code,(/<!--(?!(>|->|.*-->.*this line))\\s*.*this line.*\\s*-->/gi));"
        },
        {
          "text": "You should close your comment with `-->`.",
          "testCode": "assert.match(code,(/-->.*\\n+.+/g));"
        },
        {
          "text": "You should have the same number of comment openers and closers.",
          "testCode": "assert.equal(code.match(/<!--/g).length,code.match(/-->/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18347,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-comments-to-clarify-code.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348bd9acde08712",
      "title": "Use Responsive Design with Bootstrap Fluid Containers",
      "challengeType": 0,
      "dashedName": "use-responsive-design-with-bootstrap-fluid-containers",
      "description": "In the HTML5 and CSS section of freeCodeCamp we built a Cat Photo App. Now let's go back to it. This time, we'll style it using the popular Bootstrap responsive CSS framework.\n\nBootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name <dfn>responsive design</dfn>.\n\nWith responsive design, there is no need to design a mobile version of your website. It will look good on devices with screens of any width.\n\nYou can add Bootstrap to any app by adding the following code to the top of your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"/>\n```\n\nIn this case, we've already added it for you to this page behind the scenes. Note that using either `>` or `/>` to close the `link` tag is acceptable.\n\nTo get started, we should nest all of our HTML (except the `link` tag and the `style` element) in a `div` element with the class `container-fluid`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n\n<p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n<a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n<p>Things cats love:</p>\n<ul>\n  <li>catnip</li>\n  <li>laser pointers</li>\n  <li>lasagna</li>\n</ul>\n<p>Top 3 things cats hate:</p>\n<ol>\n  <li>flea treatment</li>\n  <li>thunder</li>\n  <li>other cats</li>\n</ol>\n<form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n  <input type=\"text\" placeholder=\"cat photo URL\" required>\n  <button type=\"submit\">Submit</button>\n</form>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n<p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n<a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n<p>Things cats love:</p>\n<ul>\n  <li>catnip</li>\n  <li>laser pointers</li>\n  <li>lasagna</li>\n</ul>\n<p>Top 3 things cats hate:</p>\n<ol>\n  <li>flea treatment</li>\n  <li>thunder</li>\n  <li>other cats</li>\n</ol>\n<form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n  <input type=\"text\" placeholder=\"cat photo URL\" required>\n  <button type=\"submit\">Submit</button>\n</form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `div` element should have the class `container-fluid`.",
          "testCode": "assert.isTrue(document.querySelector('div')?.classList?.contains('container-fluid'));"
        },
        {
          "text": "Your `div` element should have a closing tag.",
          "testCode": "assert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length ,code.match(/<div/g).length);"
        },
        {
          "text": "All HTML elements after the closing `style` tag should be nested in `.container-fluid`.\n\n```js\nconst fluidContainer = document.querySelector('.container-fluid');\nconst possibleStyleElements = fluidContainer?.querySelectorAll(`:scope ${'style'}`);\nconst possibleLinkElements = fluidContainer?.querySelectorAll(`:scope ${'link'}`);\n\nassert.lengthOf(fluidContainer?.children,8);\nassert.isEmpty(possibleStyleElements);\nassert.isEmpty(possibleLinkElements);\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18362,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-responsive-design-with-bootstrap-fluid-containers.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad88fee1348ce8acef08815",
      "title": "Use the Bootstrap Grid to Put Elements Side By Side",
      "challengeType": 0,
      "dashedName": "use-the-bootstrap-grid-to-put-elements-side-by-side",
      "description": "Bootstrap uses a responsive 12-column grid system, which makes it easy to put elements into rows and specify each element's relative width. Most of Bootstrap's classes can be applied to a `div` element.\n\nBootstrap has different column width attributes that it uses depending on how wide the user's screen is. For example, phones have narrow screens, and laptops have wider screens.\n\nTake for example Bootstrap's `col-md-*` class. Here, `md` means medium, and `*` is a number specifying how many columns wide the element should be. In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified.\n\nIn the Cat Photo App that we're building, we'll use `col-xs-*`, where `xs` means extra small (like an extra-small mobile phone screen), and `*` is the number of columns specifying how many columns wide the element should be.\n\nPut the `Like`, `Info` and `Delete` buttons side-by-side by nesting all three of them within one `<div class=\"row\">` element, then each of them within a `<div class=\"col-xs-4\">` element.\n\nThe `row` class is applied to a `div`, and the buttons themselves can be nested within it.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <button class=\"btn btn-block btn-danger\">Delete</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your buttons should all be nested within the same `div` element with the class `row`.",
          "testCode": "const row = document.querySelector('div.row');\nconst rowChildren = row?.querySelectorAll(`:scope ${'button'}`); \nassert.lengthOf(rowChildren, 3);"
        },
        {
          "text": "Each of your Bootstrap buttons should be nested within its own `div` element with the class `col-xs-4`.\n\n```js\nconst columns = document.querySelectorAll('div.col-xs-4');\n\nconst firstButton = columns?.[0]?.querySelectorAll(`:scope ${'button'}`)\nassert.lengthOf(firstButton,1);\n\nconst secondButton = columns?.[1]?.querySelectorAll(`:scope ${'button'}`)\nassert.lengthOf(secondButton,1);\n\nconst thirdButton = columns?.[2]?.querySelectorAll(`:scope ${'button'}`)\nassert.lengthOf(thirdButton,1);\n\n```\n\nEach of your `button` elements should have a closing tag.",
          "testCode": "assert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length , code.match(/<button/g).length);"
        },
        {
          "text": "Each of your `div` elements should have a closing tag.",
          "testCode": "assert.match(code,/<\\/div>/g);\nassert.match(code,/<div/g);\nassert.equal(code.match(/<\\/div>/g).length , code.match(/<div/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18371,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\use-the-bootstrap-grid-to-put-elements-side-by-side.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bad87fee1348ce8acef08814",
      "title": "Warn Your Users of a Dangerous Action with btn-danger",
      "challengeType": 0,
      "dashedName": "warn-your-users-of-a-dangerous-action-with-btn-danger",
      "description": "Bootstrap comes with several pre-defined colors for buttons. The `btn-danger` class is the button color you'll use to notify users that the button performs a destructive action, such as deleting a cat photo.\n\nCreate a button with the text `Delete` and give it the class `btn-danger`.\n\nNote that these buttons still need the `btn` and `btn-block` classes.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <button class=\"btn btn-block btn-danger\">Delete</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>catnip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should create a new `button` element with the text `Delete`.",
          "testCode": "const deleteButton = document.querySelectorAll('button')?.[2]; \nassert.match(deleteButton?.textContent ,/delete/gi);"
        },
        {
          "text": "All of your Bootstrap buttons should have the `btn` and `btn-block` classes.",
          "testCode": "assert.lengthOf(document.querySelectorAll('button.btn-block.btn'),3);"
        },
        {
          "text": "Your new button should have the class `btn-danger`.",
          "testCode": "const deleteButton = document.querySelectorAll('button')?.[2]; \nassert.isTrue(deleteButton?.classList?.contains('btn-danger'));"
        },
        {
          "text": "All of your `button` elements should have closing tags.",
          "testCode": "assert.match(code,/<\\/button>/g);\nassert.match(code,/<button/g);\nassert.equal(code.match(/<\\/button>/g).length,code.match(/<button/g).length);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18375,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\bootstrap\\warn-your-users-of-a-dangerous-action-with-btn-danger.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "bootstrap",
        "name": "Bootstrap"
      }
    },
    {
      "id": "bd7158d8c442eddfaeb5bd0f",
      "title": "Build a 25 + 5 Clock",
      "challengeType": 3,
      "dashedName": "build-a-25--5-clock",
      "description": "**Note:** **React 18 has known incompatibilities with the tests for this project (see [issue](https://github.com/freeCodeCamp/freeCodeCamp/issues/45922))**\n\n**Objective:** Build an app that is functionally similar to this: <a href=\"https://25--5-clock.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://25--5-clock.freecodecamp.rocks</a>.\n\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\n\nYou can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n\n**User Story #1:** I can see an element with `id=\"break-label\"` that contains a string (e.g. \"Break Length\").\n\n**User Story #2:** I can see an element with `id=\"session-label\"` that contains a string (e.g. \"Session Length\").\n\n**User Story #3:** I can see two clickable elements with corresponding IDs: `id=\"break-decrement\"` and `id=\"session-decrement\"`.\n\n**User Story #4:** I can see two clickable elements with corresponding IDs: `id=\"break-increment\"` and `id=\"session-increment\"`.\n\n**User Story #5:** I can see an element with a corresponding `id=\"break-length\"`, which by default (on load) displays a value of 5.\n\n**User Story #6:** I can see an element with a corresponding `id=\"session-length\"`, which by default displays a value of 25.\n\n**User Story #7:** I can see an element with a corresponding `id=\"timer-label\"`, that contains a string indicating a session is initialized (e.g. \"Session\").\n\n**User Story #8:** I can see an element with corresponding `id=\"time-left\"`. NOTE: Paused or running, the value in this field should always be displayed in `mm:ss` format (i.e. 25:00).\n\n**User Story #9:** I can see a clickable element with a corresponding `id=\"start_stop\"`.\n\n**User Story #10:** I can see a clickable element with a corresponding `id=\"reset\"`.\n\n**User Story #11:** When I click the element with the id of `reset`, any running timer should be stopped, the value within `id=\"break-length\"` should return to `5`, the value within `id=\"session-length\"` should return to 25, and the element with `id=\"time-left\"` should reset to its default state.\n\n**User Story #12:** When I click the element with the id of `break-decrement`, the value within `id=\"break-length\"` decrements by a value of 1, and I can see the updated value.\n\n**User Story #13:** When I click the element with the id of `break-increment`, the value within `id=\"break-length\"` increments by a value of 1, and I can see the updated value.\n\n**User Story #14:** When I click the element with the id of `session-decrement`, the value within `id=\"session-length\"` decrements by a value of 1, and I can see the updated value.\n\n**User Story #15:** When I click the element with the id of `session-increment`, the value within `id=\"session-length\"` increments by a value of 1, and I can see the updated value.\n\n**User Story #16:** I should not be able to set a session or break length to &lt;= 0.\n\n**User Story #17:** I should not be able to set a session or break length to > 60.\n\n**User Story #18:** When I first click the element with `id=\"start_stop\"`, the timer should begin running from the value currently displayed in `id=\"session-length\"`, even if the value has been incremented or decremented from the original value of 25.\n\n**User Story #19:** If the timer is running, the element with the id of `time-left` should display the remaining time in `mm:ss` format (decrementing by a value of 1 and updating the display every 1000ms).\n\n**User Story #20:** If the timer is running and I click the element with `id=\"start_stop\"`, the countdown should pause.\n\n**User Story #21:** If the timer is paused and I click the element with `id=\"start_stop\"`, the countdown should resume running from the point at which it was paused.\n\n**User Story #22:** When a session countdown reaches zero (NOTE: timer MUST reach 00:00), and a new countdown begins, the element with the id of `timer-label` should display a string indicating a break has begun.\n\n**User Story #23:** When a session countdown reaches zero (NOTE: timer MUST reach 00:00), a new break countdown should begin, counting down from the value currently displayed in the `id=\"break-length\"` element.\n\n**User Story #24:** When a break countdown reaches zero (NOTE: timer MUST reach 00:00), and a new countdown begins, the element with the id of `timer-label` should display a string indicating a session has begun.\n\n**User Story #25:** When a break countdown reaches zero (NOTE: timer MUST reach 00:00), a new session countdown should begin, counting down from the value currently displayed in the `id=\"session-length\"` element.\n\n**User Story #26:** When a countdown reaches zero (NOTE: timer MUST reach 00:00), a sound indicating that time is up should play. This should utilize an HTML5 `audio` tag and have a corresponding `id=\"beep\"`.\n\n**User Story #27:** The audio element with `id=\"beep\"` must be 1 second or longer.\n\n**User Story #28:** The audio element with id of `beep` must stop playing and be rewound to the beginning when the element with the id of `reset` is clicked.\n\nYou can build your project by <a href='https://codepen.io/pen?template=MJjpwO' target='_blank' rel=\"noopener noreferrer nofollow\">using this CodePen template</a> and clicking `Save` to create your own pen. If you prefer to use another environment, then put this `<script>` tag into the body of your `index.html` file: `<script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>`\n\nOnce you're done, submit the URL to your working project with all its tests passing.",
      "instructions": "",
      "boilerplate": [],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301373,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-25-5-clock.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "front-end-development-libraries-projects",
        "name": "Front End Development Libraries Projects"
      }
    },
    {
      "id": "587d7dbc367417b2b2512bae",
      "title": "Build a Drum Machine",
      "challengeType": 3,
      "dashedName": "build-a-drum-machine",
      "description": "**Note:** **React 18 has known incompatibilities with the tests for this project (see [issue](https://github.com/freeCodeCamp/freeCodeCamp/issues/45922))**\n\n**Objective:** Build an app that is functionally similar to this: <a href=\"https://drum-machine.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://drum-machine.freecodecamp.rocks/</a>.\n\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\n\nYou can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n\n**User Story #1:** I should be able to see an outer container with a corresponding `id=\"drum-machine\"` that contains all other elements.\n\n**User Story #2:** Within `#drum-machine` I can see an element with a corresponding `id=\"display\"`.\n\n**User Story #3:** Within `#drum-machine` I can see 9 clickable drum pad elements, each with a class name of `drum-pad`, a unique id that describes the audio clip the drum pad will be set up to trigger, and an inner text that corresponds to one of the following keys on the keyboard: `Q`, `W`, `E`, `A`, `S`, `D`, `Z`, `X`, `C`. The drum pads MUST be in this order.\n\n**User Story #4:** Within each `.drum-pad`, there should be an HTML5 `audio` element which has a `src` attribute pointing to an audio clip, a class name of `clip`, and an id corresponding to the inner text of its parent `.drum-pad` (e.g. `id=\"Q\"`, `id=\"W\"`, `id=\"E\"` etc.).\n\n**User Story #5:** When I click on a `.drum-pad` element, the audio clip contained in its child `audio` element should be triggered.\n\n**User Story #6:** When I press the trigger key associated with each `.drum-pad`, the audio clip contained in its child `audio` element should be triggered (e.g. pressing the `Q` key should trigger the drum pad which contains the string `Q`, pressing the `W` key should trigger the drum pad which contains the string `W`, etc.).\n\n**User Story #7:** When a `.drum-pad` is triggered, a string describing the associated audio clip is displayed as the inner text of the `#display` element (each string must be unique).\n\nHere are some audio samples you can use for your drum machine:\n\n- [Heater 1](https://cdn.freecodecamp.org/testable-projects-fcc/audio/Heater-1.mp3)\n- [Heater 2](https://cdn.freecodecamp.org/testable-projects-fcc/audio/Heater-2.mp3)\n- [Heater 3](https://cdn.freecodecamp.org/testable-projects-fcc/audio/Heater-3.mp3)\n- [Heater 4](https://cdn.freecodecamp.org/testable-projects-fcc/audio/Heater-4_1.mp3)\n- [Clap](https://cdn.freecodecamp.org/testable-projects-fcc/audio/Heater-6.mp3)\n- [Open-HH](https://cdn.freecodecamp.org/testable-projects-fcc/audio/Dsc_Oh.mp3)\n- [Kick-n'-Hat](https://cdn.freecodecamp.org/testable-projects-fcc/audio/Kick_n_Hat.mp3)\n- [Kick](https://cdn.freecodecamp.org/testable-projects-fcc/audio/RP4_KICK_1.mp3)\n- [Closed-HH](https://cdn.freecodecamp.org/testable-projects-fcc/audio/Cev_H2.mp3)\n\nYou can build your project by <a href='https://codepen.io/pen?template=MJjpwO' target='_blank' rel=\"noopener noreferrer nofollow\">using this CodePen template</a> and clicking `Save` to create your own pen. If you prefer to use another environment, then put this `<script>` tag into the body of your `index.html` file: `<script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>`\n\nOnce you're done, submit the URL to your working project with all its tests passing.",
      "instructions": "",
      "boilerplate": [],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301370,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-drum-machine.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "front-end-development-libraries-projects",
        "name": "Front End Development Libraries Projects"
      }
    },
    {
      "id": "bd7158d8c442eddfaeb5bd17",
      "title": "Build a JavaScript Calculator",
      "challengeType": 3,
      "dashedName": "build-a-javascript-calculator",
      "description": "**Note:** **React 18 has known incompatibilities with the tests for this project (see [issue](https://github.com/freeCodeCamp/freeCodeCamp/issues/45922))**\n\n**Objective:** Build an app that is functionally similar to this: <a href=\"https://javascript-calculator.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://javascript-calculator.freecodecamp.rocks/</a>.\n\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\n\nYou can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n\n**User Story #1:** My calculator should contain a clickable element containing an `=` (equal sign) with a corresponding `id=\"equals\"`.\n\n**User Story #2:** My calculator should contain 10 clickable elements containing one number each from 0-9, with the following corresponding IDs: `id=\"zero\"`, `id=\"one\"`, `id=\"two\"`, `id=\"three\"`, `id=\"four\"`, `id=\"five\"`, `id=\"six\"`, `id=\"seven\"`, `id=\"eight\"`, and `id=\"nine\"`.\n\n**User Story #3:** My calculator should contain 4 clickable elements each containing one of the 4 primary mathematical operators with the following corresponding IDs: `id=\"add\"`, `id=\"subtract\"`, `id=\"multiply\"`, `id=\"divide\"`.\n\n**User Story #4:** My calculator should contain a clickable element containing a `.` (decimal point) symbol with a corresponding `id=\"decimal\"`.\n\n**User Story #5:** My calculator should contain a clickable element with an `id=\"clear\"`.\n\n**User Story #6:** My calculator should contain an element to display values with a corresponding `id=\"display\"`.\n\n**User Story #7:** At any time, pressing the `clear` button clears the input and output values, and returns the calculator to its initialized state; 0 should be shown in the element with the id of `display`.\n\n**User Story #8:** As I input numbers, I should be able to see my input in the element with the id of `display`.\n\n**User Story #9:** In any order, I should be able to add, subtract, multiply and divide a chain of numbers of any length, and when I hit `=`, the correct result should be shown in the element with the id of `display`.\n\n**User Story #10:** When inputting numbers, my calculator should not allow a number to begin with multiple zeros.\n\n**User Story #11:** When the decimal element is clicked, a `.` should append to the currently displayed value; two `.` in one number should not be accepted.\n\n**User Story #12:** I should be able to perform any operation (`+`, `-`, `*`, `/`) on numbers containing decimal points.\n\n**User Story #13:** If 2 or more operators are entered consecutively, the operation performed should be the last operator entered (excluding the negative (`-`) sign). For example, if `5 + * 7 =` is entered, the result should be `35` (i.e. `5 * 7`); if `5 * - 5 =` is entered, the result should be `-25` (i.e. `5 * (-5)`).\n\n**User Story #14:** Pressing an operator immediately following `=` should start a new calculation that operates on the result of the previous evaluation.\n\n**User Story #15:** My calculator should have several decimal places of precision when it comes to rounding (note that there is no exact standard, but you should be able to handle calculations like `2 / 7` with reasonable precision to at least 4 decimal places).\n\n**Note On Calculator Logic:** It should be noted that there are two main schools of thought on calculator input logic: <dfn>immediate execution logic</dfn> and <dfn>formula logic</dfn>. Our example utilizes formula logic and observes order of operation precedence, immediate execution does not. Either is acceptable, but please note that depending on which you choose, your calculator may yield different results than ours for certain equations (see below example). As long as your math can be verified by another production calculator, please do not consider this a bug.\n\n**EXAMPLE:** `3 + 5 x 6 - 2 / 4 =`  \n\n-   **Immediate Execution Logic:** `11.5`\n-   **Formula/Expression Logic:** `32.5`\n\nYou can build your project by <a href='https://codepen.io/pen?template=MJjpwO' target='_blank' rel=\"noopener noreferrer nofollow\">using this CodePen template</a> and clicking `Save` to create your own pen. If you prefer to use another environment, then put this `<script>` tag into the body of your `index.html` file: `<script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>`\n\nOnce you're done, submit the URL to your working project with all its tests passing.",
      "instructions": "",
      "boilerplate": [],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301371,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-javascript-calculator.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "front-end-development-libraries-projects",
        "name": "Front End Development Libraries Projects"
      }
    },
    {
      "id": "bd7157d8c242eddfaeb5bd13",
      "title": "Build a Markdown Previewer",
      "challengeType": 3,
      "dashedName": "build-a-markdown-previewer",
      "description": "**Note:** **React 18 has known incompatibilities with the tests for this project (see [issue](https://github.com/freeCodeCamp/freeCodeCamp/issues/45922))**\n\n**Objective:** Build an app that is functionally similar to this: <a href=\"https://markdown-previewer.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://markdown-previewer.freecodecamp.rocks/</a>.\n\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\n\nYou can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n\n**User Story #1:** I can see a `textarea` element with a corresponding `id=\"editor\"`.\n\n**User Story #2:** I can see an element with a corresponding `id=\"preview\"`.\n\n**User Story #3:** When I enter text into the `#editor` element, the `#preview` element is updated as I type to display the content of the textarea.\n\n**User Story #4:** When I enter GitHub flavored markdown into the `#editor` element, the text is rendered as HTML in the `#preview` element as I type (HINT: You don't need to parse Markdown yourself - you can import the Marked library for this: <https://cdnjs.com/libraries/marked>).\n\n**User Story #5:** When my markdown previewer first loads, the default text in the `#editor` field should contain valid markdown that represents at least one of each of the following elements: a heading element (H1 size), a sub heading element (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text.\n\n**User Story #6:** When my markdown previewer first loads, the default markdown in the `#editor` field should be rendered as HTML in the `#preview` element.\n\n**Optional Bonus (you do not need to make this test pass):** My markdown previewer interprets carriage returns and renders them as `br` (line break) elements.\n\nYou can build your project by <a href='https://codepen.io/pen?template=MJjpwO' target='_blank' rel=\"noopener noreferrer nofollow\">using this CodePen template</a> and clicking `Save` to create your own pen. If you prefer to use another environment, then put this `<script>` tag into the body of your `index.html` file: `<script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>`\n\nOnce you're done, submit the URL to your working project with all its tests passing.",
      "instructions": "",
      "boilerplate": [],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301372,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-markdown-previewer.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "front-end-development-libraries-projects",
        "name": "Front End Development Libraries Projects"
      }
    },
    {
      "id": "bd7158d8c442eddfaeb5bd13",
      "title": "Build a Random Quote Machine",
      "challengeType": 3,
      "dashedName": "build-a-random-quote-machine",
      "description": "**Note:** **React 18 has known incompatibilities with the tests for this project (see [issue](https://github.com/freeCodeCamp/freeCodeCamp/issues/45922))**\n\n**Objective:** Build an app that is functionally similar to this: <a href=\"https://random-quote-machine.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://random-quote-machine.freecodecamp.rocks/</a>.\n\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\n\nYou can use any mix of HTML, JavaScript, CSS, Bootstrap, SASS, React, Redux, and jQuery to complete this project. You should use a frontend framework (like React for example) because this section is about learning frontend frameworks. Additional technologies not listed above are not recommended and using them is at your own risk. We are looking at supporting other frontend frameworks like Angular and Vue, but they are not currently supported. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n\n**User Story #1:** I can see a wrapper element with a corresponding `id=\"quote-box\"`.\n\n**User Story #2:** Within `#quote-box`, I can see an element with a corresponding `id=\"text\"`.\n\n**User Story #3:** Within `#quote-box`, I can see an element with a corresponding `id=\"author\"`.\n\n**User Story #4:** Within `#quote-box`, I can see a clickable element with a corresponding `id=\"new-quote\"`.\n\n**User Story #5:** Within `#quote-box`, I can see a clickable `a` element with a corresponding `id=\"tweet-quote\"`.\n\n**User Story #6:** On first load, my quote machine displays a random quote in the element with `id=\"text\"`.\n\n**User Story #7:** On first load, my quote machine displays the random quote's author in the element with `id=\"author\"`.\n\n**User Story #8:** When the `#new-quote` button is clicked, my quote machine should fetch a new quote and display it in the `#text` element.\n\n**User Story #9:** My quote machine should fetch the new quote's author when the `#new-quote` button is clicked and display it in the `#author` element.\n\n**User Story #10:** I can tweet the current quote by clicking on the `#tweet-quote` `a` element. This `a` element should include the `\"twitter.com/intent/tweet\"` path in its `href` attribute to tweet the current quote.\n\n**User Story #11:** The `#quote-box` wrapper element should be horizontally centered. Please run tests with browser's zoom level at 100% and page maximized.\n\nYou can build your project by <a href='https://codepen.io/pen?template=MJjpwO' target='_blank' rel=\"noopener noreferrer nofollow\">using this CodePen template</a> and clicking `Save` to create your own pen. If you prefer to use another environment, then put this `<script>` tag into the body of your `index.html` file: `<script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>`\n\nOnce you're done, submit the URL to your working project with all its tests passing.\n\n**Note:** Twitter does not allow links to be loaded in an iframe. Try using the `target=\"_blank\"` or `target=\"_top\"` attribute on the `#tweet-quote` element if your tweet won't load. `target=\"_top\"` will replace the current tab so make sure your work is saved.",
      "instructions": "",
      "boilerplate": [],
      "solution": [
        {
          "language": "js",
          "code": "// solution required"
        }
      ],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301374,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\front-end-development-libraries-projects\\build-a-random-quote-machine.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "front-end-development-libraries-projects",
        "name": "Front End Development Libraries Projects"
      }
    },
    {
      "id": "564944c91be2204b269d51e3",
      "title": "Change Text Inside an Element Using jQuery",
      "challengeType": 6,
      "dashedName": "change-text-inside-an-element-using-jquery",
      "description": "Using jQuery, you can change the text between the start and end tags of an element. You can even change HTML markup.\n\njQuery has a function called `.html()` that lets you add HTML tags and text within an element. Any content previously within the element will be completely replaced with the content you provide using this function.\n\nHere's how you would rewrite and emphasize the text of our heading:\n\n```js\n$(\"h3\").html(\"<em>jQuery Playground</em>\");\n```\n\njQuery also has a similar function called `.text()` that only alters text without adding tags. In other words, this function will not evaluate any HTML tags passed to it, but will instead treat it as the text you want to replace the existing content with.\n\nChange the button with id `target4` by emphasizing its text.\n\n<a href=\"https://www.freecodecamp.org/news/html-elements-explained-what-are-html-tags/#em-element\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">View our news article for &lt;em&gt;</a> to learn the difference between `<i>` and `<em>` and their uses.\n\nNote that while the `<i>` tag has traditionally been used to emphasize text, it has since been adopted for use as a tag for icons. The `<em>` tag is now widely accepted as the tag for emphasis. Either will work for this challenge.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target4\").html('<em>#target4</em>');\n  });\n</script>\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should emphasize the text in your `target4` button by adding HTML tags.",
          "testCode": "assert.isTrue(\n  /<em>|<i>\\s*#target4\\s*<\\/em>|<\\/i>/gi.test($('#target4').html())\n);"
        },
        {
          "text": "The text should otherwise remain unchanged.",
          "testCode": "assert($('#target4') && $('#target4').text().trim() === '#target4');"
        },
        {
          "text": "You should not alter any other text.",
          "testCode": "assert.isFalse(/<em>|<i>/gi.test($('h3').html()));"
        },
        {
          "text": "You should be using `.html()` and not `.text()`.",
          "testCode": "assert(code.match(/\\.html\\(/g));"
        },
        {
          "text": "You should select `button id=\"target4\"` with jQuery.",
          "testCode": "assert(code.match(/\\$\\(\\s*?(\\\"|\\')#target4(\\\"|\\')\\s*?\\)\\.html\\(/));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16773,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\change-text-inside-an-element-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed908826",
      "title": "Change the CSS of an Element Using jQuery",
      "challengeType": 6,
      "dashedName": "change-the-css-of-an-element-using-jquery",
      "description": "We can also change the CSS of an HTML element directly with jQuery.\n\njQuery has a function called `.css()` that allows you to change the CSS of an element.\n\nHere's how we would change its color to blue:\n\n```js\n$(\"#target1\").css(\"color\", \"blue\");\n```\n\nThis is slightly different from a normal CSS declaration, because the CSS property and its value are in quotes, and separated with a comma instead of a colon.\n\nDelete your jQuery selectors, leaving an empty `document ready function`.\n\nSelect `target1` and change its color to red.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n    $(\"button\").removeClass(\"btn-default\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n    $(\"button\").removeClass(\"btn-default\");\n    $(\"#target1\").css(\"color\", \"red\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `target1` element should have red text.",
          "testCode": "assert($('#target1').css('color') === 'rgb(255, 0, 0)');"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(!code.match(/class.*animated/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16776,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\change-the-css-of-an-element-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed508826",
      "title": "Clone an Element Using jQuery",
      "challengeType": 6,
      "dashedName": "clone-an-element-using-jquery",
      "description": "In addition to moving elements, you can also copy them from one place to another.\n\njQuery has a function called `clone()` that makes a copy of an element.\n\nFor example, if we wanted to copy `target2` from our `left-well` to our `right-well`, we would use:\n\n```js\n$(\"#target2\").clone().appendTo(\"#right-well\");\n```\n\nDid you notice this involves sticking two jQuery functions together? This is called <dfn>function chaining</dfn> and it's a convenient way to get things done with jQuery.\n\nClone your `target5` element and append it to your `left-well`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `target5` element should be inside your `right-well`.",
          "testCode": "assert($('#right-well').children('#target5').length > 0);"
        },
        {
          "text": "A copy of your `target5` element should also be inside your `left-well`.",
          "testCode": "assert($('#left-well').children('#target5').length > 0);"
        },
        {
          "text": "You should only use jQuery to move these elements.",
          "testCode": "assert(!code.match(/class.*animated/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 16780,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\clone-an-element-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aeda08726",
      "title": "Delete Your jQuery Functions",
      "challengeType": 6,
      "dashedName": "delete-your-jquery-functions",
      "description": "These animations were cool at first, but now they're getting kind of distracting.\n\nDelete all three of these jQuery functions from your `document ready function`, but leave your `document ready function` itself intact.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "All three of your jQuery functions should be deleted from your `document ready function`.",
          "testCode": "assert(code.match(/\\{\\s*\\}\\);/g));"
        },
        {
          "text": "You should leave your `script` element intact.",
          "testCode": "assert(code.match(/<script>/g));"
        },
        {
          "text": "You should leave your `$(document).ready(function() {` at the beginning of your `script` element.",
          "testCode": "assert(code.match(/\\$\\(document\\)\\.ready\\(function\\(\\)\\s?\\{/g));"
        },
        {
          "text": "You should leave the `document.ready` function's closing `})` intact.",
          "testCode": "assert(code.match(/.*\\s*\\}\\);/g));"
        },
        {
          "text": "You should leave your `script` element closing tag intact.",
          "testCode": "assert(\n  code.match(/<\\/script>/g) &&\n    code.match(/<script/g) &&\n    code.match(/<\\/script>/g).length === code.match(/<script/g).length\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17561,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\delete-your-jquery-functions.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed808826",
      "title": "Disable an Element Using jQuery",
      "challengeType": 6,
      "dashedName": "disable-an-element-using-jquery",
      "description": "You can also change the non-CSS properties of HTML elements with jQuery. For example, you can disable buttons.\n\nWhen you disable a button, it will become grayed-out and can no longer be clicked.\n\njQuery has a function called `.prop()` that allows you to adjust the properties of elements.\n\nHere's how you would disable all buttons:\n\n```js\n$(\"button\").prop(\"disabled\", true);\n```\n\nDisable only the `target1` button.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `target1` button should be disabled.",
          "testCode": "assert(\n  $('#target1') &&\n    $('#target1').prop('disabled') &&\n    code.match(/[\"']disabled[\"'],( true|true)/g)\n);"
        },
        {
          "text": "No other buttons should be disabled.",
          "testCode": "assert($('#target2') && !$('#target2').prop('disabled'));"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(!code.match(/disabled[^<]*>/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 17563,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\disable-an-element-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9acdd08826",
      "title": "Learn How Script Tags and Document Ready Work",
      "challengeType": 6,
      "dashedName": "learn-how-script-tags-and-document-ready-work",
      "description": "Now we're ready to learn jQuery, the most popular JavaScript tool of all time.\n\nBefore we can start using jQuery, we need to add some things to our HTML.\n\nFirst, add a `script` element at the top of your page. Be sure to close it on the following line.\n\nYour browser will run any JavaScript inside a `script` element, including jQuery.\n\nInside your `script` element, add this code: `$(document).ready(function() {` to your `script`. Then close it on the following line (still inside your `script` element) with: `});`\n\nWe'll learn more about `functions` later. The important thing to know is that code you put inside this `function` will run as soon as your browser has loaded your page.\n\nThis is important because without your `document ready function`, your code may run before your HTML is rendered, which would cause bugs.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n  });\n</script>\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should create a `script` element making sure it is valid and has a closing tag.",
          "testCode": "assert(\n  code.match(/<\\/script\\s*>/g) &&\n    code.match(\n      /<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\\"]+[^\"\\\"]*[\"\\\"]+)*(\\sasync|\\sdefer)*\\s*>/g\n    ) &&\n    code.match(/<\\/script\\s*>/g).length ===\n      code.match(\n        /<script(\\sasync|\\sdefer)*(\\s(charset|src|type)\\s*=\\s*[\"\\\"]+[^\"\\\"]*[\"\\\"]+)*(\\sasync|\\sdefer)*\\s*>/g\n      ).length\n);"
        },
        {
          "text": "You should add `$(document).ready(function() {` to the beginning of your `script` element.",
          "testCode": "assert(\n  code.match(\n    /\\$\\s*?\\(\\s*?document\\s*?\\)\\.ready\\s*?\\(\\s*?function\\s*?\\(\\s*?\\)\\s*?\\{/g\n  )\n);"
        },
        {
          "text": "You should close your `$(document).ready(function() {` function with `});`",
          "testCode": "assert(code.match(/\\n*?\\s*?\\}\\s*?\\);/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18224,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\learn-how-script-tags-and-document-ready-work.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed708826",
      "title": "Remove an Element Using jQuery",
      "challengeType": 6,
      "dashedName": "remove-an-element-using-jquery",
      "description": "Now let's remove an HTML element from your page using jQuery.\n\njQuery has a function called `.remove()` that will remove an HTML element entirely.\n\nRemove the `#target4` element from the page by using the `.remove()` function.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should use jQuery to remove your `target4` element from your page.",
          "testCode": "assert(\n  $('#target4').length === 0 && code.match(/\\$\\([\"']#target4[\"']\\).remove\\(\\)/g)\n);"
        },
        {
          "text": "You should only use jQuery to remove this element.",
          "testCode": "assert(\n  code.match(/id=\"target4/g) &&\n    !code.match(/<!--.*id=\"target4\".*-->/g) &&\n    $('#right-well').length > 0\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18262,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\remove-an-element-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed918626",
      "title": "Remove Classes from an Element with jQuery",
      "challengeType": 6,
      "dashedName": "remove-classes-from-an-element-with-jquery",
      "description": "In the same way you can add classes to an element with jQuery's `addClass()` function, you can remove them with jQuery's `removeClass()` function.\n\nHere's how you would do this for a specific button:\n\n```js\n$(\"#target2\").removeClass(\"btn-default\");\n```\n\nLet's remove the `btn-default` class from all of our `button` elements.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n    $(\"button\").removeClass(\"btn-default\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The `btn-default` class should be removed from all of your `button` elements.",
          "testCode": "assert($('.btn-default').length === 0);"
        },
        {
          "text": "You should only use jQuery to remove this class from the element.",
          "testCode": "assert(code.match(/btn btn-default/g));"
        },
        {
          "text": "You should only remove the `btn-default` class.",
          "testCode": "assert(\n  code.match(\n    /\\.[\\v\\s]*removeClass[\\s\\v]*\\([\\s\\v]*('|\")\\s*btn-default\\s*('|\")[\\s\\v]*\\)/gm\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18264,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\remove-classes-from-an-element-with-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed108826",
      "title": "Target a Specific Child of an Element Using jQuery",
      "challengeType": 6,
      "dashedName": "target-a-specific-child-of-an-element-using-jquery",
      "description": "You've seen why id attributes are so convenient for targeting with jQuery selectors. But you won't always have such neat ids to work with.\n\nFortunately, jQuery has some other tricks for targeting the right elements.\n\njQuery uses CSS Selectors to target elements. The `target:nth-child(n)` CSS selector allows you to select all the nth elements with the target class or element type.\n\nHere's how you would give the third element in each well the bounce class:\n\n```js\n$(\".target:nth-child(3)\").addClass(\"animated bounce\");\n```\n\nMake the second child in each of your well elements bounce. You must select the elements' children with the `target` class.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n    $(\".target:nth-child(2)\").addClass(\"animated bounce\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "The second element in your `target` elements should bounce.",
          "testCode": "assert(\n  $('.target:nth-child(2)').hasClass('animated') &&\n    $('.target:nth-child(2)').hasClass('bounce')\n);"
        },
        {
          "text": "Only two elements should bounce.",
          "testCode": "assert($('.animated.bounce').length === 2);"
        },
        {
          "text": "You should use the `:nth-child()` selector to modify these elements.",
          "testCode": "assert(code.match(/\\:nth-child\\(/g));"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(\n  code.match(/\\$\\(\".target:nth-child\\(2\\)\"\\)/g) ||\n    code.match(/\\$\\('.target:nth-child\\(2\\)'\\)/g) ||\n    code.match(/\\$\\(\".target\"\\).filter\\(\":nth-child\\(2\\)\"\\)/g) ||\n    code.match(/\\$\\('.target'\\).filter\\(':nth-child\\(2\\)'\\)/g)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18315,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-a-specific-child-of-an-element-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aedc08826",
      "title": "Target Elements by Class Using jQuery",
      "challengeType": 6,
      "dashedName": "target-elements-by-class-using-jquery",
      "description": "You see how we made all of your `button` elements bounce? We selected them with `$(\"button\")`, then we added some CSS classes to them with `.addClass(\"animated bounce\");`.\n\nYou just used jQuery's `.addClass()` function, which allows you to add classes to elements.\n\nFirst, let's target your `div` elements with the class `well` by using the `$(\".well\")` selector.\n\nNote that, just like with CSS declarations, you type a `.` before the class's name.\n\nThen use jQuery's `.addClass()` function to add the classes `animated` and `shake`.\n\nFor example, you could make all the elements with the class `text-primary` shake by adding the following to your `document ready function`:\n\n```js\n$(\".text-primary\").addClass(\"animated shake\");\n```",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should use the jQuery `addClass()` function to give the classes `animated` and `shake` to all your elements with the class `well`.",
          "testCode": "assert($('.well').hasClass('animated') && $('.well').hasClass('shake'));"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(!code.match(/class\\.\\*animated/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18316,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-elements-by-class-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aeda08826",
      "title": "Target Elements by id Using jQuery",
      "challengeType": 6,
      "dashedName": "target-elements-by-id-using-jquery",
      "description": "You can also target elements by their id attributes.\n\nFirst target your `button` element with the id `target3` by using the `$(\"#target3\")` selector.\n\nNote that, just like with CSS declarations, you type a `#` before the id's name.\n\nThen use jQuery's `.addClass()` function to add the classes `animated` and `fadeOut`.\n\nHere's how you'd make the `button` element with the id `target6` fade out:\n\n```js\n$(\"#target6\").addClass(\"animated fadeOut\");\n```",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n    $(\".well\").addClass(\"animated shake\");\n    $(\"#target3\").addClass(\"animated fadeOut\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should select the `button` element with the `id` of `target3` and use the jQuery `addClass()` function to give it the class of `animated`.",
          "testCode": "assert($('#target3').hasClass('animated'));"
        },
        {
          "text": "You should target the element with the id `target3` and use the jQuery `addClass()` function to give it the class `fadeOut`.",
          "testCode": "assert(\n  ($('#target3').hasClass('fadeOut') || $('#target3').hasClass('fadeout')) &&\n    code.match(/\\$\\(\\s*.#target3.\\s*\\)/g)\n);"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(!code.match(/class.*animated/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18317,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-elements-by-id-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed008826",
      "title": "Target Even Elements Using jQuery",
      "challengeType": 6,
      "dashedName": "target-even-elements-using-jquery",
      "description": "You can also target elements based on their positions using `:odd` or `:even` selectors.\n\nNote that jQuery is zero-indexed which means the first element in a selection has a position of 0. This can be a little confusing as, counter-intuitively, `:odd` selects the second element (position 1), fourth element (position 3), and so on.\n\nHere's how you would target all the odd elements with class `target` and give them classes:\n\n```js\n$(\".target:odd\").addClass(\"animated shake\");\n```\n\nTry selecting all the even `target` elements and giving them the classes of `animated` and `shake`. Remember that **even** refers to the position of elements with a zero-based system in mind.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n    $(\"#left-well\").children().css(\"color\", \"green\");\n    $(\".target:nth-child(2)\").addClass(\"animated bounce\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n    $(\"#left-well\").children().css(\"color\", \"green\");\n    $(\".target:nth-child(2)\").addClass(\"animated bounce\");\n    $(\".target:even\").addClass(\"animated shake\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "All of the `target` elements that jQuery considers to be even should shake.",
          "testCode": "assert(\n  $('.target:even').hasClass('animated') && $('.target:even').hasClass('shake')\n);"
        },
        {
          "text": "You should use the `:even` selector to modify these elements.",
          "testCode": "assert(code.match(/\\:even/g));"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(\n  code.match(/\\$\\(\".target:even\"\\)/g) ||\n    code.match(/\\$\\('.target:even'\\)/g) ||\n    code.match(/\\$\\(\".target\"\\).filter\\(\":even\"\\)/g) ||\n    code.match(/\\$\\('.target'\\).filter\\(':even'\\)/g)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18318,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-even-elements-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9bedc08826",
      "title": "Target HTML Elements with Selectors Using jQuery",
      "challengeType": 6,
      "dashedName": "target-html-elements-with-selectors-using-jquery",
      "description": "Now we have a `document ready` function.\n\nNow let's write our first jQuery statement. All jQuery functions start with a `$`, usually referred to as a dollar sign operator, or as bling.\n\njQuery often selects an HTML element with a <dfn>selector</dfn>, then does something to that element.\n\nFor example, let's make all of your `button` elements bounce. Just add this code inside your document ready function:\n\n```js\n$(\"button\").addClass(\"animated bounce\");\n```\n\nNote that we've already included both the jQuery library and the Animate.css library in the background so that you can use them in the editor. So you are using jQuery to apply the Animate.css `bounce` class to your `button` elements.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated bounce\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should use the jQuery `addClass()` function to give the classes `animated` and `bounce` to your `button` elements.",
          "testCode": "assert($('button').hasClass('animated') && $('button').hasClass('bounce'));"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(!code.match(/class.*animated/g));"
        },
        {
          "text": "Your jQuery code should be within the `$(document).ready();` function.",
          "testCode": "assert(\n  code.replace(/\\s/g, '').match(/\\$\\(document\\)\\.ready\\(function\\(\\)\\{\\$/g)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18319,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-html-elements-with-selectors-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed208826",
      "title": "Target the Children of an Element Using jQuery",
      "challengeType": 6,
      "dashedName": "target-the-children-of-an-element-using-jquery",
      "description": "When HTML elements are placed one level below another they are called <dfn>children</dfn> of that element. For example, the button elements in this challenge with the text `#target1`, `#target2`, and `#target3` are all children of the `<div class=\"well\" id=\"left-well\">` element.\n\njQuery has a function called `children()` that allows you to access the children of whichever element you've selected.\n\nHere's an example of how you would use the `children()` function to give the children of your `left-well` element the color `blue`:\n\n```js\n$(\"#left-well\").children().css(\"color\", \"blue\")\n```",
      "instructions": "Give all the children of your `right-well` element the color orange.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "All children of `#right-well` should have orange text.",
          "testCode": "assert($('#right-well').children().css('color') === 'rgb(255, 165, 0)');"
        },
        {
          "text": "You should use the `children()` function to modify these elements.",
          "testCode": "assert(code.match(/\\.children\\(\\)\\.css/g));"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(code.match(/<div class=\"well\" id=\"right-well\">/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18320,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-children-of-an-element-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed308826",
      "title": "Target the Parent of an Element Using jQuery",
      "challengeType": 6,
      "dashedName": "target-the-parent-of-an-element-using-jquery",
      "description": "Every HTML element has a `parent` element from which it `inherits` properties.\n\nFor example, the `h3` element in your `jQuery Playground` has the parent element of `<div class=\"container-fluid\">`, which itself has the parent element of `body`.\n\njQuery has a function called `parent()` that allows you to access the parent of whichever element you've selected.\n\nHere's an example of how you would use the `parent()` function if you wanted to give the parent element of the `left-well` element a background color of blue:\n\n```js\n$(\"#left-well\").parent().css(\"background-color\", \"blue\")\n```\n\nGive the parent of the `#target1` element a background-color of red.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<body>\n  <div class=\"container-fluid\">\n    <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <h4>#left-well</h4>\n        <div class=\"well\" id=\"left-well\">\n          <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n          <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n          <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n        </div>\n      </div>\n      <div class=\"col-xs-6\">\n        <h4>#right-well</h4>\n        <div class=\"well\" id=\"right-well\">\n          <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n          <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n          <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<body>\n  <div class=\"container-fluid\">\n    <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <h4>#left-well</h4>\n        <div class=\"well\" id=\"left-well\">\n          <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n          <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n          <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n        </div>\n      </div>\n      <div class=\"col-xs-6\">\n        <h4>#right-well</h4>\n        <div class=\"well\" id=\"right-well\">\n          <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n          <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n          <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>"
        }
      ],
      "tests": [
        {
          "text": "Your `left-well` element should have a red background.",
          "testCode": "assert(\n  $('#left-well').css('background-color') === 'red' ||\n    $('#left-well').css('background-color') === 'rgb(255, 0, 0)' ||\n    $('#left-well').css('background-color').toLowerCase() === '#ff0000' ||\n    $('#left-well').css('background-color').toLowerCase() === '#f00'\n);"
        },
        {
          "text": "You should use the `.parent()` function to modify this element.",
          "testCode": "assert(code.match(/\\.parent\\s*\\(\\s*\\)\\s*\\.css/g));"
        },
        {
          "text": "The `.parent()` method should be called on the `#target1` element.",
          "testCode": "assert(\n  code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?#target1\\s*?(?:'|\")\\s*?\\)\\s*?\\.parent/gi)\n);"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(code.match(/<div class=\"well\" id=\"left-well\">/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18321,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-parent-of-an-element-using-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed908626",
      "title": "Target the Same Element with Multiple jQuery Selectors",
      "challengeType": 6,
      "dashedName": "target-the-same-element-with-multiple-jquery-selectors",
      "description": "Now you know three ways of targeting elements: by type: `$(\"button\")`, by class: `$(\".btn\")`, and by id `$(\"#target1\")`.\n\nAlthough it is possible to add multiple classes in a single `.addClass()` call, let's add them to the same element in *three separate ways*.\n\nUsing `.addClass()`, add only one class at a time to the same element, three different ways:\n\nAdd the `animated` class to all elements with type `button`.\n\nAdd the `shake` class to all the buttons with class `.btn`.\n\nAdd the `btn-primary` class to the button with id `#target1`.\n\n**Note:** You should only be targeting one element and adding only one class at a time. Altogether, your three individual selectors will end up adding the three classes `shake`, `animated`, and `btn-primary` to `#target1`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"button\").addClass(\"animated\");\n    $(\".btn\").addClass(\"shake\");\n    $(\"#target1\").addClass(\"btn-primary\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `$(\"button\")` selector.",
          "testCode": "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?button\\s*?(?:'|\")/gi));"
        },
        {
          "text": "Your code should use the `$(\".btn\")` selector.",
          "testCode": "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.btn\\s*?(?:'|\")/gi));"
        },
        {
          "text": "Your code should use the `$(\"#target1\")` selector.",
          "testCode": "assert(code.match(/\\$\\s*?\\(\\s*?(?:'|\")\\s*?#target1\\s*?(?:'|\")/gi));"
        },
        {
          "text": "You should only add one class with each of your three selectors.",
          "testCode": "assert(\n  code.match(/addClass/g) &&\n    code.match(/addClass\\s*?\\(\\s*?('|\")\\s*?[\\w-]+\\s*?\\1\\s*?\\)/g).length > 2\n);"
        },
        {
          "text": "Your `#target1` element should have the classes `animated`‚ `shake` and `btn-primary`.",
          "testCode": "assert(\n  $('#target1').hasClass('animated') &&\n    $('#target1').hasClass('shake') &&\n    $('#target1').hasClass('btn-primary')\n);"
        },
        {
          "text": "You should only use jQuery to add these classes to the element.",
          "testCode": "assert(!code.match(/class.*animated/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18322,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\target-the-same-element-with-multiple-jquery-selectors.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aed608826",
      "title": "Use appendTo to Move Elements with jQuery",
      "challengeType": 6,
      "dashedName": "use-appendto-to-move-elements-with-jquery",
      "description": "Now let's try moving elements from one `div` to another.\n\njQuery has a function called `appendTo()` that allows you to select HTML elements and append them to another element.\n\nFor example, if we wanted to move `target4` from our right well to our left well, we would use:\n\n```js\n$(\"#target4\").appendTo(\"#left-well\");\n```\n\nMove your `target2` element from your `left-well` to your `right-well`.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `target2` element should not be inside your `left-well`.",
          "testCode": "assert($('#left-well').children('#target2').length === 0);"
        },
        {
          "text": "Your `target2` element should be inside your `right-well`.",
          "testCode": "assert($('#right-well').children('#target2').length > 0);"
        },
        {
          "text": "You should only use jQuery to move these elements.",
          "testCode": "assert(!code.match(/class.*animated/g));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18340,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\use-appendto-to-move-elements-with-jquery.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "bad87fee1348bd9aecb08826",
      "title": "Use jQuery to Modify the Entire Page",
      "challengeType": 6,
      "dashedName": "use-jquery-to-modify-the-entire-page",
      "description": "We're done playing with our jQuery playground. Let's tear it down!\n\njQuery can target the `body` element as well.\n\nHere's how we would make the entire body fade out: `$(\"body\").addClass(\"animated fadeOut\");`\n\nBut let's do something more dramatic. Add the classes `animated` and `hinge` to your `body` element.",
      "instructions": "",
      "boilerplate": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n    $(\"#left-well\").children().css(\"color\", \"green\");\n    $(\".target:nth-child(2)\").addClass(\"animated bounce\");\n    $(\".target:even\").addClass(\"animated shake\");\n\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<script>\n  $(document).ready(function() {\n    $(\"#target1\").css(\"color\", \"red\");\n    $(\"#target1\").prop(\"disabled\", true);\n    $(\"#target4\").remove();\n    $(\"#target2\").appendTo(\"#right-well\");\n    $(\"#target5\").clone().appendTo(\"#left-well\");\n    $(\"#target1\").parent().css(\"background-color\", \"red\");\n    $(\"#right-well\").children().css(\"color\", \"orange\");\n    $(\"#left-well\").children().css(\"color\", \"green\");\n    $(\".target:nth-child(2)\").addClass(\"animated bounce\");\n    $(\".target:even\").addClass(\"animated shake\");\n    $(\"body\").addClass(\"animated hinge\");\n  });\n</script>\n\n<!-- Only change code above this line -->\n\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "You should add the classes `animated` and `hinge` to your `body` element.",
          "testCode": "assert($('body').hasClass('animated') && $('body').hasClass('hinge'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 18361,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\jquery\\use-jquery-to-modify-the-entire-page.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "jquery",
        "name": "Jquery"
      }
    },
    {
      "id": "5a24c314108439a4d403616e",
      "title": "Access Props Using this.props",
      "challengeType": 6,
      "dashedName": "access-props-using-this-props",
      "description": "The last several challenges covered the basic ways to pass props to child components. But what if the child component that you're passing a prop to is an ES6 class component, rather than a stateless functional component? The ES6 class component uses a slightly different convention to access props.\n\nAnytime you refer to a class component within itself, you use the `this` keyword. To access props within a class component, you preface the code that you use to access it with `this`. For example, if an ES6 class component has a prop called `data`, you write `{this.props.data}` in JSX.",
      "instructions": "Render an instance of the `Welcome` component in the parent component `App`. Here, give `Welcome` a prop of `name` and assign it a value of a string. Within the child, `Welcome`, access the `name` prop within the `strong` tags.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n            { /* Change code below this line */ }\n            <Welcome />\n            { /* Change code above this line */ }\n        </div>\n    );\n  }\n};\n\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n          { /* Change code below this line */ }\n          <p>Hello, <strong></strong>!</p>\n          { /* Change code above this line */ }\n        </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n          { /* Change code below this line */ }\n          <p>Hello, <strong>{this.props.name}</strong>!</p>\n          { /* Change code above this line */ }\n        </div>\n    );\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n            { /* Change code below this line */ }\n            <Welcome name=\"Quincy\"/>\n            { /* Change code above this line */ }\n        </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `App` component should return a single `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(App));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"
        },
        {
          "text": "The child of `App` should be the `Welcome` component.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(App));\n    return (\n      mockedComponent.children().childAt(0).name() === 'Welcome'\n    );\n  })()\n);"
        },
        {
          "text": "The `Welcome` component should have a prop called `name`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(App));\n    return mockedComponent.find('Welcome').props().name;\n  })()\n);"
        },
        {
          "text": "The `Welcome` component should display the string you pass as the `name` prop within `strong` tags.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(App));\n    return (\n      mockedComponent.find('strong').text() ===\n      mockedComponent.find('Welcome').props().name\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301375,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\access-props-using-this.props.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<App />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24bbe0dba28a8d3cbd4c5e",
      "title": "Add Comments in JSX",
      "challengeType": 6,
      "dashedName": "add-comments-in-jsx",
      "description": "JSX is a syntax that gets compiled into valid JavaScript. Sometimes, for readability, you might need to add comments to your code. Like most programming languages, JSX has its own way to do this.\n\nTo put comments inside JSX, you use the syntax `{/* */}` to wrap around the comment text.",
      "instructions": "The code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided `div` element, without modifying the existing `h1` or `p` elements.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const JSX = (\n  <div>\n    <h1>This is a block of JSX</h1>\n    <p>Here's a subtitle</p>\n  </div>\n);"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const JSX = (\n<div>\n  <h1>This is a block of JSX</h1>\n  { /* this is a JSX comment */ }\n  <p>Here's a subtitle</p>\n</div>);"
        }
      ],
      "tests": [
        {
          "text": "The constant `JSX` should return a `div` element.",
          "testCode": "assert(JSX.type === 'div');"
        },
        {
          "text": "The `div` should contain an `h1` tag as the first element.",
          "testCode": "assert(JSX.props.children[0].type === 'h1');"
        },
        {
          "text": "The `div` should contain a `p` tag as the second element.",
          "testCode": "assert(JSX.props.children[1].type === 'p');"
        },
        {
          "text": "The existing `h1` and `p` elements should not be modified.",
          "testCode": "assert(\n  JSX.props.children[0].props.children === 'This is a block of JSX' &&\n    JSX.props.children[1].props.children === \"Here's a subtitle\"\n);"
        },
        {
          "text": "The `JSX` should use valid comment syntax.",
          "testCode": "assert(/<div>[\\s\\S]*{\\s*\\/\\*[\\s\\S]*\\*\\/\\s*}[\\s\\S]*<\\/div>/.test(code));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301376,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-comments-in-jsx.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(JSX, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403617e",
      "title": "Add Event Listeners",
      "challengeType": 6,
      "dashedName": "add-event-listeners",
      "description": "The `componentDidMount()` method is also the best place to attach any event listeners you need to add for specific functionality. React provides a synthetic event system which wraps the native event system present in browsers. This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if the native events may behave differently between different browsers.\n\nYou've already been using some of these synthetic event handlers such as `onClick()`. React's synthetic event system is great to use for most interactions you'll manage on DOM elements. However, if you want to attach an event handler to the document or window objects, you have to do this directly.",
      "instructions": "Attach an event listener in the `componentDidMount()` method for `keydown` events and have these events trigger the callback `handleKeyPress()`. You can use `document.addEventListener()` which takes the event (in quotes) as the first argument and the callback as the second argument.\n\nThen, in `componentWillUnmount()`, remove this same event listener. You can pass the same arguments to `document.removeEventListener()`. It's good practice to use this lifecycle method to do any clean up on React components before they are unmounted and destroyed. Removing event listeners is an example of one such clean up action.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  // Change code below this line\n  componentDidMount() {\n\n  }\n  componentWillUnmount() {\n\n  }\n  // Change code above this line\n  handleEnter() {\n    this.setState((state) => ({\n      message: state.message + 'You pressed the enter key! '\n    }));\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);  }\n  componentDidMount() {\n    // Change code below this line\n    document.addEventListener('keydown', this.handleKeyPress);\n    // Change code above this line\n  }\n  componentWillUnmount() {\n    // Change code below this line\n    document.removeEventListener('keydown', this.handleKeyPress);\n    // Change code above this line\n  }\n  handleEnter() {\n    this.setState((state) => ({\n      message: state.message + 'You pressed the enter key! '\n    }));\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should render a `div` element which wraps an `h1` tag.",
          "testCode": "assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('div').children().find('h1').length === 1;\n  })()\n);"
        },
        {
          "text": "A `keydown` listener should be attached to the document in `componentDidMount`.",
          "testCode": "assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    const didMountString = mockedComponent\n      .instance()\n      .componentDidMount.toString();\n    return new RegExp(\n      'document.addEventListener(.|\\n|\\r)+keydown(.|\\n|\\r)+this.handleKeyPress'\n    ).test(didMountString);\n  })()\n);"
        },
        {
          "text": "The `keydown` listener should be removed from the document in `componentWillUnmount`.",
          "testCode": "assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    const willUnmountString = mockedComponent\n      .instance()\n      .componentWillUnmount.toString();\n    return new RegExp(\n      'document.removeEventListener(.|\\n|\\r)+keydown(.|\\n|\\r)+this.handleKeyPress'\n    ).test(willUnmountString);\n  })()\n);"
        },
        {
          "text": "Once the component has mounted, pressing `enter` should update its state and the rendered `h1` tag.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const beforeState = mockedComponent.state('message');\n  const beforeText = mockedComponent.find('h1').text();\n  const pressEnterKey = () => {\n    mockedComponent.instance().handleKeyPress({ keyCode: 13 });\n    return waitForIt(() => {\n      mockedComponent.update();\n      return {\n        state: mockedComponent.state('message'),\n        text: mockedComponent.find('h1').text()\n      };\n    });\n  };\n  const afterKeyPress = await pressEnterKey();\n  assert(\n    beforeState !== afterKeyPress.state && beforeText !== afterKeyPress.text\n  );\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301377,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-event-listeners.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036182",
      "title": "Add Inline Styles in React",
      "challengeType": 6,
      "dashedName": "add-inline-styles-in-react",
      "description": "You may have noticed in the last challenge that there were several other syntax differences from HTML inline styles in addition to the `style` attribute set to a JavaScript object. First, the names of certain CSS style properties use camel case. For example, the last challenge set the size of the font with `fontSize` instead of `font-size`. Hyphenated words like `font-size` are invalid syntax for JavaScript object properties, so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX.\n\nAll property value length units (like `height`, `width`, and `fontSize`) are assumed to be in `px` unless otherwise specified. If you want to use `em`, for example, you wrap the value and the units in quotes, like `{fontSize: \"4em\"}`. Other than the length values that default to `px`, all other property values should be wrapped in quotes.",
      "instructions": "If you have a large set of styles, you can assign a style `object` to a constant to keep your code organized. Declare your styles constant as a global variable at the top of the file. Initialize `styles` constant and assign an `object` with three style properties and their values to it. Give the `div` a color of `purple`, a font-size of `40`, and a border of `2px solid purple`. Then set the `style` attribute equal to the `styles` constant.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={{color: \"yellow\", fontSize: 24}}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const styles = {\n  color: \"purple\",\n  fontSize: 40,\n  border: \"2px solid purple\"\n};\n// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={styles}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `styles` variable should be an `object` with three properties.",
          "testCode": "assert(Object.keys(styles).length === 3);"
        },
        {
          "text": "The `styles` variable should have a `color` property set to a value of `purple`.",
          "testCode": "assert(styles.color === 'purple');"
        },
        {
          "text": "The `styles` variable should have a `fontSize` property set to a value of `40`.",
          "testCode": "assert(styles.fontSize == 40);"
        },
        {
          "text": "The `styles` variable should have a `border` property set to a value of `2px solid purple`.",
          "testCode": "assert(styles.border === '2px solid purple');"
        },
        {
          "text": "The component should render a `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.shallow(React.createElement(Colorful));\n    return mockedComponent.type() === 'div';\n  })()\n);"
        },
        {
          "text": "The `div` element should have its styles defined by the `styles` object.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.shallow(React.createElement(Colorful));\n    return (\n      mockedComponent.props().style.color === 'purple' &&\n      mockedComponent.props().style.fontSize == 40 &&\n      mockedComponent.props().style.border === '2px solid purple'\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301378,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\add-inline-styles-in-react.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<Colorful />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036174",
      "title": "Bind 'this' to a Class Method",
      "challengeType": 6,
      "dashedName": "bind-this-to-a-class-method",
      "description": "In addition to setting and updating `state`, you can also define methods for your component class. A class method typically needs to use the `this` keyword so it can access properties on the class (such as `state` and `props`) inside the scope of the method. There are a few ways to allow your class methods to access `this`.\n\nOne common way is to explicitly bind `this` in the constructor so `this` becomes bound to the class methods when the component is initialized. You may have noticed the last challenge used `this.handleClick = this.handleClick.bind(this)` for its `handleClick` method in the constructor. Then, when you call a function like `this.setState()` within your class method, `this` refers to the class and will not be `undefined`.\n\n**Note:** The `this` keyword is one of the most confusing aspects of JavaScript but it plays an important role in React. Although its behavior here is totally normal, these lessons aren't the place for an in-depth review of `this` so please refer to other lessons if the above is confusing!",
      "instructions": "The code editor has a component with a `state` that keeps track of the text. It also has a method which allows you to set the text to `You clicked!`. However, the method doesn't work because it's using the `this` keyword that is undefined. Fix it by explicitly binding `this` to the `handleClick()` method in the component's constructor.\n\nNext, add a click handler to the `button` element in the render method. It should trigger the `handleClick()` method when the button receives a click event. Remember that the method you pass to the `onClick` handler needs curly braces because it should be interpreted directly as JavaScript.\n\nOnce you complete the above steps you should be able to click the button and see `You clicked!`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello\"\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  handleClick() {\n    this.setState({\n      text: \"You clicked!\"\n    });\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <button>Click Me</button>\n        { /* Change code above this line */ }\n        <h1>{this.state.text}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      text: \"You clicked!\"\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick = {this.handleClick}>Click Me</button>\n        <h1>{this.state.text}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should return a `div` element which wraps two elements, a button and an `h1` element, in that order.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(MyComponent)).find('div').length === 1 &&\n    Enzyme.mount(React.createElement(MyComponent))\n      .find('div')\n      .childAt(0)\n      .type() === 'button' &&\n    Enzyme.mount(React.createElement(MyComponent))\n      .find('div')\n      .childAt(1)\n      .type() === 'h1'\n);"
        },
        {
          "text": "The state of `MyComponent` should initialize with the key value pair `{ text: \"Hello\" }`.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('text') === 'Hello'\n);"
        },
        {
          "text": "Clicking the `button` element should run the `handleClick` method and set the state `text` to `You clicked!`.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ text: 'Hello' });\n    return waitForIt(() => mockedComponent.state('text'));\n  };\n  const second = () => {\n    mockedComponent.find('button').simulate('click');\n    return waitForIt(() => mockedComponent.state('text'));\n  };\n  const firstValue = await first();\n  const secondValue = await second();\n  assert(firstValue === 'Hello' && secondValue === 'You clicked!');\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301379,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\bind-this-to-a-class-method.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036189",
      "title": "Change Inline CSS Conditionally Based on Component State",
      "challengeType": 6,
      "dashedName": "change-inline-css-conditionally-based-on-component-state",
      "description": "At this point, you've seen several applications of conditional rendering and the use of inline styles. Here's one more example that combines both of these topics. You can also render CSS conditionally based on the state of a React component. To do this, you check for a condition, and if that condition is met, you modify the styles object that's assigned to the JSX elements in the render method.\n\nThis paradigm is important to understand because it is a dramatic shift from the more traditional approach of applying styles by modifying DOM elements directly (which is very common with jQuery, for example). In that approach, you must keep track of when elements change and also handle the actual manipulation directly. It can become difficult to keep track of changes, potentially making your UI unpredictable. When you set a style object based on a condition, you describe how the UI should look as a function of the application's state. There is a clear flow of information that only moves in one direction. This is the preferred method when writing applications with React.",
      "instructions": "The code editor has a simple controlled input component with a styled border. You want to style this border red if the user types more than 15 characters of text in the input box. Add a condition to check for this and, if the condition is valid, set the input border style to `3px solid red`. You can try it out by entering text in the input.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    // Change code below this line\n\n    // Change code above this line\n    return (\n      <div>\n        <h3>Don't Type Too Much:</h3>\n        <input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} />\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    if (this.state.input.length > 15) {\n      inputStyle.border = '3px solid red';\n    };\n    return (\n      <div>\n        <h3>Don't Type Too Much:</h3>\n        <input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} />\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `GateKeeper` component should render a `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n    return mockedComponent.find('div').length === 1;\n  })()\n);"
        },
        {
          "text": "The `GateKeeper` component should be initialized with a state key `input` set to an empty string.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n    return mockedComponent.state().input === '';\n  })()\n);"
        },
        {
          "text": "The `GateKeeper` component should render an `h3` tag and an `input` tag.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n    return (\n      mockedComponent.find('h3').length === 1 &&\n      mockedComponent.find('input').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The `input` tag should initially have a style of `1px solid black` for the `border` property.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n    return (\n      mockedComponent.find('input').props().style.border === '1px solid black'\n    );\n  })()\n);"
        },
        {
          "text": "The `input` tag should be styled with a border of `3px solid red` if the input value in state is longer than 15 characters.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\n  const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n  const simulateChange = (el, value) =>\n    el.simulate('change', { target: { value } });\n  let initialStyle = mockedComponent.find('input').props().style.border;\n  const state_1 = () => {\n    mockedComponent.setState({ input: 'this is 15 char' });\n    return waitForIt(() => mockedComponent.find('input').props().style.border);\n  };\n  const state_2 = () => {\n    mockedComponent.setState({\n      input: 'A very long string longer than 15 characters.'\n    });\n    return waitForIt(() => mockedComponent.find('input').props().style.border);\n  };\n  const style_1 = await state_1();\n  const style_2 = await state_2();\n  assert(\n    initialStyle === '1px solid black' &&\n      style_1 === '1px solid black' &&\n      style_2 === '3px solid red'\n  );\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301380,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\change-inline-css-conditionally-based-on-component-state.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<GateKeeper />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036166",
      "title": "Compose React Components",
      "challengeType": 6,
      "dashedName": "compose-react-components",
      "description": "As the challenges continue to use more complex compositions with React components and JSX, there is one important point to note. Rendering ES6 style class components within other components is no different than rendering the simple components you used in the last few challenges. You can render JSX elements, stateless functional components, and ES6 class components within other components.",
      "instructions": "In the code editor, the `TypesOfFood` component is already rendering a component called `Vegetables`. Also, there is the `Fruits` component from the last challenge.\n\nNest two components inside of `Fruits` — first `NonCitrus`, and then `Citrus`. Both of these components are provided for you behind the scenes. Next, nest the `Fruits` class component into the `TypesOfFood` component, below the `h1` heading element and above `Vegetables`. The result should be a series of nested components, which uses two different component types.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n        <Vegetables />\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n        <NonCitrus />\n        <Citrus />\n        { /* Change code above this line */ }\n      </div>\n    )\n  }\n}\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n    render() {\n      return (\n        <div>\n        <h1>Types of Food:</h1>\n          { /* Change code below this line */ }\n          <Fruits />\n          { /* Change code above this line */ }\n          <Vegetables />\n        </div>\n      );\n    }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `TypesOfFood` component should return a single `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"
        },
        {
          "text": "The `TypesOfFood` component should return the `Fruits` component.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(1).name() === 'Fruits';\n  })()\n);"
        },
        {
          "text": "The `Fruits` component should return the `NonCitrus` component and the `Citrus` component.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return (\n      mockedComponent.find('Fruits').children().find('NonCitrus').length ===\n        1 &&\n      mockedComponent.find('Fruits').children().find('Citrus').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The `TypesOfFood` component should return the `Vegetables` component below the `Fruits` component.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(2).name() === 'Vegetables';\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301381,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\compose-react-components.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "jsx",
            "code": "class NonCitrus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h4>Non-Citrus:</h4>\n        <ul>\n          <li>Apples</li>\n          <li>Blueberries</li>\n          <li>Strawberries</li>\n          <li>Bananas</li>\n        </ul>\n      </div>\n    );\n  }\n};\nclass Citrus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h4>Citrus:</h4>\n        <ul>\n          <li>Lemon</li>\n          <li>Lime</li>\n          <li>Orange</li>\n          <li>Grapefruit</li>\n        </ul>\n      </div>\n    );\n  }\n};\nclass Vegetables extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>Vegetables:</h2>\n        <ul>\n          <li>Brussel Sprouts</li>\n          <li>Broccoli</li>\n          <li>Squash</li>\n        </ul>\n      </div>\n    );\n     }\n};"
          }
        ],
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<TypesOfFood />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24bbe0dba28a8d3cbd4c5d",
      "title": "Create a Complex JSX Element",
      "challengeType": 6,
      "dashedName": "create-a-complex-jsx-element",
      "description": "The last challenge was a simple example of JSX, but JSX can represent more complex HTML as well.\n\nOne important thing to know about nested JSX is that it must return a single element.\n\nThis one parent element would wrap all of the other levels of nested elements.\n\nFor instance, several JSX elements written as siblings with no parent wrapper element will not transpile.\n\nHere's an example:\n\n**Valid JSX:**\n\n```jsx\n<div>\n  <p>Paragraph One</p>\n  <p>Paragraph Two</p>\n  <p>Paragraph Three</p>\n</div>\n```\n\n**Invalid JSX:**\n\n```jsx\n<p>Paragraph One</p>\n<p>Paragraph Two</p>\n<p>Paragraph Three</p>\n```",
      "instructions": "Define a new constant `JSX` that renders a `div` which contains the following elements in order:\n\nAn `h1`, a `p`, and an unordered list that contains three `li` items. You can include any text you want within each element.\n\n**Note:** When rendering multiple elements like this, you can wrap them all in parentheses, but it's not strictly required. Also notice this challenge uses a `div` tag to wrap all the child elements within a single parent element. If you remove the `div`, the JSX will no longer transpile. Keep this in mind, since it will also apply when you return JSX elements in React components.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": ""
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const JSX = (\n<div>\n  <h1>Hello JSX!</h1>\n  <p>Some info</p>\n  <ul>\n    <li>An item</li>\n    <li>Another item</li>\n    <li>A third item</li>\n  </ul>\n</div>);"
        }
      ],
      "tests": [
        {
          "text": "The constant `JSX` should return a `div` element.",
          "testCode": "assert(JSX.type === 'div');"
        },
        {
          "text": "The `div` should contain an `h1` tag as the first element.",
          "testCode": "assert(JSX.props.children[0].type === 'h1');"
        },
        {
          "text": "The `div` should contain a `p` tag as the second element.",
          "testCode": "assert(JSX.props.children[1].type === 'p');"
        },
        {
          "text": "The `div` should contain a `ul` tag as the third element.",
          "testCode": "assert(JSX.props.children[2].type === 'ul');"
        },
        {
          "text": "The `ul` should contain three `li` elements.",
          "testCode": "assert(\n  JSX.props.children\n    .filter((ele) => ele.type === 'ul')[0]\n    .props.children.filter((ele) => ele.type === 'li').length === 3\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301382,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-complex-jsx-element.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(JSX, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036164",
      "title": "Create a Component with Composition",
      "challengeType": 6,
      "dashedName": "create-a-component-with-composition",
      "description": "Now we will look at how we can compose multiple React components together. Imagine you are building an app and have created three components: a `Navbar`, `Dashboard`, and `Footer`.\n\nTo compose these components together, you could create an `App` *parent* component which renders each of these three components as *children*. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX. For example, in the `render` method you could write:\n\n```jsx\nreturn (\n <App>\n  <Navbar />\n  <Dashboard />\n  <Footer />\n </App>\n)\n```\n\nWhen React encounters a custom HTML tag that references another component (a component name wrapped in `< />` like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the `App` component and the `Navbar`, `Dashboard`, and `Footer`.",
      "instructions": "In the code editor, there is a simple functional component called `ChildComponent` and a class component called `ParentComponent`. Compose the two together by rendering the `ChildComponent` within the `ParentComponent`. Make sure to close the `ChildComponent` tag with a forward slash.\n\n**Note:** `ChildComponent` is defined with an ES6 arrow function because this is a very common practice when using React.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n        <ChildComponent />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The React component should return a single `div` element.",
          "testCode": "assert(\n  (function () {\n    var shallowRender = Enzyme.shallow(React.createElement(ParentComponent));\n    return shallowRender.type() === 'div';\n  })()\n);"
        },
        {
          "text": "The component should return two nested elements.",
          "testCode": "assert(\n  (function () {\n    var shallowRender = Enzyme.shallow(React.createElement(ParentComponent));\n    return shallowRender.children().length === 2;\n  })()\n);"
        },
        {
          "text": "The component should return the `ChildComponent` as its second child.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ParentComponent));\n    return (\n      mockedComponent.find('ParentComponent').find('ChildComponent').length ===\n      1\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301383,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-component-with-composition.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<ParentComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036179",
      "title": "Create a Controlled Form",
      "challengeType": 6,
      "dashedName": "create-a-controlled-form",
      "description": "The last challenge showed that React can control the internal state for certain elements like `input` and `textarea`, which makes them controlled components. This applies to other form elements as well, including the regular HTML `form` element.",
      "instructions": "The `MyForm` component is set up with an empty `form` with a submit handler. The submit handler will be called when the form is submitted.\n\nWe've added a button which submits the form. You can see it has the `type` set to `submit` indicating it is the button controlling the form. Add the `input` element in the `form` and set its `value` and `onChange()` attributes like the last challenge. You should then complete the `handleSubmit` method so that it sets the component state property `submit` to the current input value in the local `state`.\n\n**Note:** You also must call `event.preventDefault()` in the submit handler, to prevent the default form submit behavior which will refresh the web page. For camper convenience, the default behavior has been disabled here to prevent refreshes from resetting challenge code.\n\nFinally, create an `h1` tag after the `form` which renders the `submit` value from the component's `state`. You can then type in the form and click the button (or press enter), and you should see your input rendered to the page.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          {/* Change code below this line */}\n\n          {/* Change code above this line */}\n          <button type='submit'>Submit!</button>\n        </form>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState(state => ({\n      submit: state.input\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input value={this.state.input} onChange={this.handleChange} />\n          <button type='submit'>Submit!</button>\n        </form>\n        <h1>{this.state.submit}</h1>\n      </div>\n    );\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`MyForm` should return a `div` element which contains a `form` and an `h1` tag. The form should include an `input` and a `button`.",
          "testCode": "assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyForm));\n    return (\n      mockedComponent.find('div').children().find('form').length === 1 &&\n      mockedComponent.find('div').children().find('h1').length === 1 &&\n      mockedComponent.find('form').children().find('input').length === 1 &&\n      mockedComponent.find('form').children().find('button').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The state of `MyForm` should initialize with `input` and `submit` properties, both set to empty strings.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(MyForm)).state('input') === '' &&\n    Enzyme.mount(React.createElement(MyForm)).state('submit') === ''\n);"
        },
        {
          "text": "Typing in the `input` element should update the `input` property of the component's state.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyForm));\n  const _1 = () => {\n    mockedComponent.setState({ input: '' });\n    return mockedComponent.state('input');\n  };\n  const _2 = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'TestInput' } });\n    return {\n      state: mockedComponent.state('input'),\n      inputVal: mockedComponent.find('input').props().value\n    };\n  };\n  const before = _1();\n  const after = _2();\n  assert(\n    before === '' &&\n      after.state === 'TestInput' &&\n      after.inputVal === 'TestInput'\n  );\n})();"
        },
        {
          "text": "Submitting the form should run `handleSubmit` which should set the `submit` property in state equal to the current input.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyForm));\n  const _1 = () => {\n    mockedComponent.setState({ input: '' });\n    mockedComponent.setState({ submit: '' });\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'SubmitInput' } });\n    return mockedComponent.state('submit');\n  };\n  const _2 = () => {\n    mockedComponent.find('form').simulate('submit');\n    return mockedComponent.state('submit');\n  };\n  const before = _1();\n  const after = _2();\n  assert(before === '' && after === 'SubmitInput');\n})();"
        },
        {
          "text": "`handleSubmit` should call `event.preventDefault`",
          "testCode": "assert(\n  __helpers.isCalledWithNoArgs(\n    'event.preventDefault',\n    MyForm.prototype.handleSubmit.toString()\n  )\n);"
        },
        {
          "text": "The `h1` heading element should render the value of the `submit` field from the component's state.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyForm));\n  const _1 = () => {\n    mockedComponent.setState({ input: '' });\n    mockedComponent.setState({ submit: '' });\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'TestInput' } });\n    return mockedComponent.find('h1').text();\n  };\n  const _2 = () => {\n    mockedComponent.find('form').simulate('submit');\n    return mockedComponent.find('h1').text();\n  };\n  const before = _1();\n  const after = _2();\n  assert(before === '' && after === 'TestInput');\n})();"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301384,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-form.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyForm />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036178",
      "title": "Create a Controlled Input",
      "challengeType": 6,
      "dashedName": "create-a-controlled-input",
      "description": "Your application may have more complex interactions between `state` and the rendered UI. For example, form control elements for text input, such as `input` and `textarea`, maintain their own state in the DOM as the user types. With React, you can move this mutable state into a React component's `state`. The user's input becomes part of the application `state`, so React controls the value of that input field. Typically, if you have React components with input fields the user can type into, it will be a controlled input form.",
      "instructions": "The code editor has the skeleton of a component called `ControlledInput` to create a controlled `input` element. The component's `state` is already initialized with an `input` property that holds an empty string. This value represents the text a user types into the `input` field.\n\nFirst, create a method called `handleChange()` that has a parameter called `event`. When the method is called, it receives an `event` object that contains a string of text from the `input` element. You can access this string with `event.target.value` inside the method. Update the `input` property of the component's `state` with this new string.\n\nIn the `render` method, create the `input` element above the `h4` tag. Add a `value` attribute which is equal to the `input` property of the component's `state`. Then add an `onChange` property set to the `handleChange()` event handler method.\n\nWhen you type in the input box, that text is processed by the `handleChange()` method, set as the `input` property in the local `state`, and rendered as the value in the `input` box on the page. The component `state` is the single source of truth regarding the input data.\n\nLast but not least, don't forget to add the necessary bindings in the constructor.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */}\n\n        { /* Change code above this line */}\n        <h4>Controlled Input:</h4>\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  render() {\n    return (\n      <div>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange} />\n        <h4>Controlled Input:</h4>\n\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`ControlledInput` should return a `div` element which contains an `input` and a `p` tag.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(ControlledInput))\n    .find('div')\n    .children()\n    .find('input').length === 1 &&\n    Enzyme.mount(React.createElement(ControlledInput))\n      .find('div')\n      .children()\n      .find('p').length === 1\n);"
        },
        {
          "text": "The state of `ControlledInput` should initialize with an `input` property set to an empty string.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(ControlledInput)).state('input'),\n  ''\n);"
        },
        {
          "text": "Typing in the input element should update the state and the value of the input, and the `p` element should render this state as you type.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(ControlledInput));\n  const _1 = () => {\n    mockedComponent.setState({ input: '' });\n    return waitForIt(() => mockedComponent.state('input'));\n  };\n  const _2 = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'TestInput' } });\n    return waitForIt(() => ({\n      state: mockedComponent.state('input'),\n      text: mockedComponent.find('p').text(),\n      inputVal: mockedComponent.find('input').props().value\n    }));\n  };\n  const before = await _1();\n  const after = await _2();\n  assert(\n    before === '' &&\n      after.state === 'TestInput' &&\n      after.text === 'TestInput' &&\n      after.inputVal === 'TestInput'\n  );\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301385,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-controlled-input.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<ControlledInput />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036163",
      "title": "Create a React Component",
      "challengeType": 6,
      "dashedName": "create-a-react-component",
      "description": "The other way to define a React component is with the ES6 `class` syntax. In the following example, `Kitten` extends `React.Component`:\n\n```jsx\nclass Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <h1>Hi</h1>\n    );\n  }\n}\n```\n\nThis creates an ES6 class `Kitten` which extends the `React.Component` class. So the `Kitten` class now has access to many useful React features, such as local state and lifecycle hooks. Don't worry if you aren't familiar with these terms yet, they will be covered in greater detail in later challenges. Also notice the `Kitten` class has a `constructor` defined within it that calls `super()`. It uses `super()` to call the constructor of the parent class, in this case `React.Component`. The constructor is a special method used during the initialization of objects that are created with the `class` keyword. It is best practice to call a component's `constructor` with `super`, and pass `props` to both. This makes sure the component is initialized properly. For now, know that it is standard for this code to be included. Soon you will see other uses for the constructor as well as `props`.",
      "instructions": "`MyComponent` is defined in the code editor using class syntax. Finish writing the `render` method so it returns a `div` element that contains an `h1` with the text `Hello React!`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n\n\n\n    // Change code above this line\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n    return (\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n    );\n    // Change code above this line\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The React component should return a `div` element.",
          "testCode": "assert(Enzyme.shallow(React.createElement(MyComponent)).type() === 'div');"
        },
        {
          "text": "The returned `div` should render an `h1` heading element within it.",
          "testCode": "assert(\n  /<div><h1>.*<\\/h1><\\/div>/.test(\n    Enzyme.shallow(React.createElement(MyComponent)).html()\n  )\n);"
        },
        {
          "text": "The `h1` heading element should contain the string `Hello React!`.",
          "testCode": "assert(\n  Enzyme.shallow(React.createElement(MyComponent)).html() ===\n    '<div><h1>Hello React!</h1></div>'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301386,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-react-component.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "587d7dbc367417b2b2512bb1",
      "title": "Create a Simple JSX Element",
      "challengeType": 6,
      "dashedName": "create-a-simple-jsx-element",
      "description": "React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.\n\nReact uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.\n\nFor instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: `{ 'this is treated as JavaScript code' }`. Keep this in mind, since it's used in several future challenges.\n\nHowever, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail.\n\nIt's worth noting that under the hood the challenges are calling `ReactDOM.render(JSX, document.getElementById('root'))`. This function call is what places your JSX into React's own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM.",
      "instructions": "The current code uses JSX to assign a `div` element to the constant `JSX`. Replace the `div` with an `h1` element and add the text `Hello JSX!` inside it.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const JSX = <div></div>;"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const JSX = <h1>Hello JSX!</h1>;"
        }
      ],
      "tests": [
        {
          "text": "The constant `JSX` should return an `h1` element.",
          "testCode": "assert(JSX.type === 'h1');"
        },
        {
          "text": "The `h1` tag should include the text `Hello JSX!`",
          "testCode": "assert(Enzyme.shallow(JSX).contains('Hello JSX!'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301390,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-simple-jsx-element.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(JSX, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036170",
      "title": "Create a Stateful Component",
      "challengeType": 6,
      "dashedName": "create-a-stateful-component",
      "description": "One of the most important topics in React is `state`. State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications.\n\nYou create state in a React component by declaring a `state` property on the component class in its `constructor`. This initializes the component with `state` when it is created. The `state` property must be set to a JavaScript `object`. Declaring it looks like this:\n\n```jsx\nthis.state = {\n\n}\n```\n\nYou have access to the `state` object throughout the life of your component. You can update it, render it in your UI, and pass it as props to child components. The `state` object can be as complex or as simple as you need it to be. Note that you must create a class component by extending `React.Component` in order to create `state` like this.",
      "instructions": "There is a component in the code editor that is trying to render a `firstName` property from its `state`. However, there is no `state` defined. Initialize the component with `state` in the `constructor` and assign your name to a property of `firstName`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // Only change code below this line\n\n    // Only change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.firstName}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: 'freeCodeCamp!'\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.firstName}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`StatefulComponent` should exist and render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(StatefulComponent)\n    );\n    return mockedComponent.find('StatefulComponent').length === 1;\n  })()\n);"
        },
        {
          "text": "`StatefulComponent` should render a `div` and an `h1` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(StatefulComponent)\n    );\n    return (\n      mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('h1').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The state of `StatefulComponent` should be initialized with a property `firstName` set to a string.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(StatefulComponent)\n    );\n    const initialState = mockedComponent.state();\n    return (\n      typeof initialState === 'object' && typeof initialState.firstName === 'string'\n    );\n  })()\n);"
        },
        {
          "text": "The property `firstName` in the state of `StatefulComponent` should render in the `h1` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(StatefulComponent)\n    );\n    const initialState = mockedComponent.state();\n    return mockedComponent.find('h1').text() === initialState.firstName;\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301391,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateful-component.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<StatefulComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036162",
      "title": "Create a Stateless Functional Component",
      "challengeType": 6,
      "dashedName": "create-a-stateless-functional-component",
      "description": "Components are the core of React. Everything in React is a component and here you will learn how to create one.\n\nThere are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a *stateless functional component*. The concept of state in an application will be covered in later challenges. For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data. (We'll cover the second way to create a React component in the next challenge.)\n\nTo create a component with a function, you simply write a JavaScript function that returns either JSX or `null`. One important thing to note is that React requires your function name to begin with a capital letter. Here's an example of a stateless functional component that assigns an HTML class in JSX:\n\n```jsx\nconst DemoComponent = function() {\n  return (\n    <div className='customClass' />\n  );\n};\n```\n\nAfter being transpiled, the `<div>` will have a CSS class of `customClass`.\n\nBecause a JSX component represents HTML, you could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces.",
      "instructions": "The code editor has a function called `MyComponent`. Complete this function so it returns a single `div` element which contains some string of text.\n\n**Note:** The text is considered a child of the `div` element, so you will not be able to use a self-closing tag.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const MyComponent = function() {\n  // Change code below this line\n\n\n\n  // Change code above this line\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const MyComponent = function() {\n  // Change code below this line\n  return (\n    <div>\n      Demo Solution\n    </div>\n  );\n  // Change code above this line\n}"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should return JSX.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.length === 1;\n  })()\n);"
        },
        {
          "text": "`MyComponent` should return a `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"
        },
        {
          "text": "The `div` element should contain a string of text.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('div').text() !== '';\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301392,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\create-a-stateless-functional-component.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036160",
      "title": "Define an HTML Class in JSX",
      "challengeType": 6,
      "dashedName": "define-an-html-class-in-jsx",
      "description": "Now that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.\n\nSo far, it may seem that HTML and JSX are exactly the same.\n\nOne key difference in JSX is that you can no longer use the word `class` to define HTML classes. This is because `class` is a reserved word in JavaScript. Instead, JSX uses `className`.\n\nIn fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is `onClick`, instead of `onclick`. Likewise, `onchange` becomes `onChange`. While this is a subtle difference, it is an important one to keep in mind moving forward.",
      "instructions": "Apply a class of `myDiv` to the `div` provided in the JSX code.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const JSX = (\n  <div>\n    <h1>Add a class to this div</h1>\n  </div>\n);"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const JSX = (\n<div className = 'myDiv'>\n  <h1>Add a class to this div</h1>\n</div>);"
        }
      ],
      "tests": [
        {
          "text": "The constant `JSX` should return a `div` element.",
          "testCode": "assert.strictEqual(JSX.type, 'div');"
        },
        {
          "text": "The `div` should have a class of `myDiv`.",
          "testCode": "assert.strictEqual(JSX.props.className, 'myDiv');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301393,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\define-an-html-class-in-jsx.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(JSX, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403618b",
      "title": "Give Sibling Elements a Unique Key Attribute",
      "challengeType": 6,
      "dashedName": "give-sibling-elements-a-unique-key-attribute",
      "description": "The last challenge showed how the `map` method is used to dynamically render a number of elements based on user input. However, there was an important piece missing from that example. When you create an array of elements, each one needs a `key` attribute set to a unique value. React uses these keys to keep track of which items are added, changed, or removed. This helps make the re-rendering process more efficient when the list is modified in any way.  \n\n**Note:** Keys only need to be unique between sibling elements, they don't need to be globally unique in your application.",
      "instructions": "The code editor has an array with some front end frameworks and a stateless functional component named `Frameworks()`. `Frameworks()` needs to map the array to an unordered list, much like in the last challenge. Finish writing the `map` callback to return an `li` element for each framework in the `frontEndFrameworks` array. This time, make sure to give each `li` a `key` attribute, set to a unique value. The `li` elements should also contain text from `frontEndFrameworks`.\n\nNormally, you want to make the key something that uniquely identifies the element being rendered. As a last resort the array index may be used, but typically you should try to use a unique identification.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = null; // Change this line\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = frontEndFrameworks.map((fw, i) => <li key={i}>{fw}</li>);\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};"
        }
      ],
      "tests": [
        {
          "text": "The `Frameworks` component should exist and render to the page.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(Frameworks)).find('Frameworks').length === 1\n);"
        },
        {
          "text": "`Frameworks` should render an `h1` element.",
          "testCode": "assert(Enzyme.mount(React.createElement(Frameworks)).find('h1').length === 1);"
        },
        {
          "text": "`Frameworks` should render a `ul` element.",
          "testCode": "assert(Enzyme.mount(React.createElement(Frameworks)).find('ul').length === 1);"
        },
        {
          "text": "The `ul` tag should render 6 child `li` elements.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(Frameworks)).find('ul').children().length ===\n    6 &&\n    Enzyme.mount(React.createElement(Frameworks))\n      .find('ul')\n      .childAt(0)\n      .name() === 'li' &&\n    Enzyme.mount(React.createElement(Frameworks)).find('li').length === 6\n);"
        },
        {
          "text": "Each list item element should have a unique `key` attribute.",
          "testCode": "assert(\n  (() => {\n    const ul = Enzyme.mount(React.createElement(Frameworks)).find('ul');\n    const keys = new Set([\n      ul.childAt(0).key(),\n      ul.childAt(1).key(),\n      ul.childAt(2).key(),\n      ul.childAt(3).key(),\n      ul.childAt(4).key(),\n      ul.childAt(5).key()\n    ]);\n    return keys.size === 6;\n  })()\n);"
        },
        {
          "text": "Each list item element should contain text from `frontEndFrameworks`.",
          "testCode": "assert(\n  (() => {\n    const li = Enzyme.mount(React.createElement(Frameworks))\n      .find('ul')\n      .children();\n    return [...Array(5)].every((_, i) =>\n      frontEndFrameworks.includes(li.at(i).text())\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301394,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\give-sibling-elements-a-unique-key-attribute.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<Frameworks />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036181",
      "title": "Introducing Inline Styles",
      "challengeType": 6,
      "dashedName": "introducing-inline-styles",
      "description": "There are other complex concepts that add powerful capabilities to your React code. But you may be wondering about the more simple problem of how to style those JSX elements you create in React. You likely know that it won't be exactly the same as working with HTML because of <a href=\"/learn/front-end-development-libraries/react/define-an-html-class-in-jsx\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">the way you apply classes to JSX elements</a>.\n\nIf you import styles from a stylesheet, it isn't much different at all. You apply a class to your JSX element using the `className` attribute, and apply styles to the class in your stylesheet. Another option is to apply inline styles, which are very common in ReactJS development.\n\nYou apply inline styles to JSX elements similar to how you do it in HTML, but with a few JSX differences. Here's an example of an inline style in HTML:\n\n```jsx\n<div style=\"color: yellow; font-size: 16px\">Mellow Yellow</div>\n```\n\nJSX elements use the `style` attribute, but because of the way JSX is transpiled, you can't set the value to a `string`. Instead, you set it equal to a JavaScript `object`. Here's an example:\n\n```jsx\n<div style={{color: \"yellow\", fontSize: 16}}>Mellow Yellow</div>\n```\n\nNotice how we camelCase the `fontSize` property? This is because React will not accept kebab-case keys in the style object. React will apply the correct property name for us in the HTML.",
      "instructions": "Add a `style` attribute to the `div` in the code editor to give the text a color of red and font size of `72px`.\n\nNote that you can optionally set the font size to be a number, omitting the units `px`, or write it as `\"72px\"`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class Colorful extends React.Component {\n  render() {\n    return (\n      <div>Big Red</div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class Colorful extends React.Component {\n  render() {\n    return (\n      <div style={{color: \"red\", fontSize: 72}}>Big Red</div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The component should render a `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Colorful));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"
        },
        {
          "text": "The `div` element should have a color of `red`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Colorful));\n    return mockedComponent.children().props().style.color === 'red';\n  })()\n);"
        },
        {
          "text": "The `div` element should have a font size of `72px`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Colorful));\n    return (\n      mockedComponent.children().props().style.fontSize === 72 ||\n      mockedComponent.children().props().style.fontSize === '72' ||\n      mockedComponent.children().props().style.fontSize === '72px'\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301395,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\introducing-inline-styles.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<Colorful />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036161",
      "title": "Learn About Self-Closing JSX Tags",
      "challengeType": 6,
      "dashedName": "learn-about-self-closing-jsx-tags",
      "description": "So far, you’ve seen how JSX differs from HTML in a key way with the use of `className` vs. `class` for defining HTML classes.\n\nAnother important way in which JSX differs from HTML is in the idea of the self-closing tag.\n\nIn HTML, almost all tags have both an opening and closing tag: `<div></div>`; the closing tag always has a forward slash before the tag name that you are closing. However, there are special instances in HTML called <dfn>void elements</dfn>, or elements that don’t require both an opening and closing tag before another element can start.\n\nFor example the line-break tag can be written as `<br>` or as `<br />`, but should never be written as `<br></br>`, since it doesn't contain any content.\n\nIn JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed. The line-break tag, for example, must always be written as `<br />` in order to be valid JSX that can be transpiled. A `<div>`, on the other hand, can be written as `<div />` or `<div></div>`. The difference is that in the first syntax version there is no way to include anything in the `<div />`. You will see in later challenges that this syntax is useful when rendering React components.",
      "instructions": "Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don't change any of the content - you only need to close tags where they are needed.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const JSX = (\n  <div>\n    <h2>Welcome to React!</h2> <br >\n    <p>Be sure to close all tags!</p>\n    <hr >\n  </div>\n);"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const JSX = (\n<div>\n  <h2>Welcome to React!</h2> <br />\n  <p>Be sure to close all tags!</p>\n  <hr />\n</div>\n);"
        }
      ],
      "tests": [
        {
          "text": "The constant `JSX` should return a `div` element.",
          "testCode": "assert.strictEqual(JSX.type, 'div');"
        },
        {
          "text": "The `div` should contain a `br` tag.",
          "testCode": "assert(Enzyme.shallow(JSX).find('br').length === 1);"
        },
        {
          "text": "The `div` should contain an `hr` tag.",
          "testCode": "assert(Enzyme.shallow(JSX).find('hr').length === 1);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301396,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\learn-about-self-closing-jsx-tags.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(JSX, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036180",
      "title": "Optimize Re-Renders with shouldComponentUpdate",
      "challengeType": 6,
      "dashedName": "optimize-re-renders-with-shouldcomponentupdate",
      "description": "So far, if any component receives new `state` or new `props`, it re-renders itself and all its children. This is usually okay. But React provides a lifecycle method you can call when child components receive new `state` or `props`, and declare specifically if the components should update or not. The method is `shouldComponentUpdate()`, and it takes `nextProps` and `nextState` as parameters.\n\nThis method is a useful way to optimize performance. For example, the default behavior is that your component re-renders when it receives new `props`, even if the `props` haven't changed. You can use `shouldComponentUpdate()` to prevent this by comparing the `props`. The method must return a `boolean` value that tells React whether or not to update the component. You can compare the current props (`this.props`) to the next props (`nextProps`) to determine if you need to update or not, and return `true` or `false` accordingly.",
      "instructions": "The `shouldComponentUpdate()` method is added in a component called `OnlyEvens`. Currently, this method returns `true` so `OnlyEvens` re-renders every time it receives new `props`. Modify the method so `OnlyEvens` updates only if the `value` of its new props is even. Click the `Add` button and watch the order of events in your browser's console as the lifecycle hooks are triggered.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n    // Change code below this line\n    return true;\n    // Change code above this line\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return <h1>{this.props.value}</h1>;\n  }\n}\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState(state => ({\n      value: state.value + 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value} />\n      </div>\n    );\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n    // Change code below this line\n    return nextProps.value % 2 === 0;\n    // Change code above this line\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return <h1>{this.props.value}</h1>;\n  }\n}\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState(state => ({\n      value: state.value + 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value} />\n      </div>\n    );\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "The `Controller` component should render the `OnlyEvens` component as a child.",
          "testCode": "assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(Controller));\n    return (\n      mockedComponent.find('Controller').length === 1 &&\n      mockedComponent.find('OnlyEvens').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The `shouldComponentUpdate` method should be defined on the `OnlyEvens` component.",
          "testCode": "assert(\n  (() => {\n    const child = React.createElement(OnlyEvens)\n      .type.prototype.shouldComponentUpdate.toString()\n      .replace(/s/g, '');\n    return child !== 'undefined';\n  })()\n);"
        },
        {
          "text": "The `OnlyEvens` component should return an `h1` tag which renders the value of `this.props.value`.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(Controller));\n  const first = () => {\n    mockedComponent.setState({ value: 1000 });\n    return mockedComponent.find('h1').html();\n  };\n  const second = () => {\n    mockedComponent.setState({ value: 10 });\n    return mockedComponent.find('h1').html();\n  };\n  const firstValue = first();\n  const secondValue = second();\n  assert(firstValue === '<h1>1000</h1>' && secondValue === '<h1>10</h1>');\n})();"
        },
        {
          "text": "`OnlyEvens` should re-render only when `nextProps.value` is even.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(Controller));\n  const first = () => {\n    mockedComponent.setState({ value: 8 });\n    return mockedComponent.find('h1').text();\n  };\n  const second = () => {\n    mockedComponent.setState({ value: 7 });\n    return mockedComponent.find('h1').text();\n  };\n  const third = () => {\n    mockedComponent.setState({ value: 42 });\n    return mockedComponent.find('h1').text();\n  };\n  const firstValue = first();\n  const secondValue = second();\n  const thirdValue = third();\n  assert(firstValue === '8' && secondValue === '8' && thirdValue === '42');\n})();"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301398,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\optimize-re-renders-with-shouldcomponentupdate.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<Controller />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403616c",
      "title": "Override Default Props",
      "challengeType": 6,
      "dashedName": "override-default-props",
      "description": "The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component.",
      "instructions": "The `ShoppingCart` component now renders a child component `Items`. This `Items` component has a default prop `quantity` set to the integer `0`. Override the default prop by passing in a value of `10` for `quantity`.\n\n**Note:** Remember that the syntax to add a prop to a component looks similar to how you add HTML attributes. However, since the value for `quantity` is an integer, it won't go in quotes but it should be wrapped in curly braces. For example, `{100}`. This syntax tells JSX to interpret the value within the braces directly as JavaScript.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items />\n    { /* Change code above this line */ }\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items quantity = {10} />\n    { /* Change code above this line */ }\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The component `ShoppingCart` should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('ShoppingCart').length === 1;\n  })()\n);"
        },
        {
          "text": "The component `Items` should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('Items').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Items` component should have a prop of `{ quantity: 10 }` passed from the `ShoppingCart` component.",
          "testCode": "() =>\n  assert(\n    (function () {\n      const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n      return (\n        mockedComponent.find('Items').props().quantity == 10 &&\n        code.replace(/ /g, '')\n          .includes('<Itemsquantity={10}/>')\n      );\n    })()\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301399,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\override-default-props.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<ShoppingCart />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403617b",
      "title": "Pass a Callback as Props",
      "challengeType": 6,
      "dashedName": "pass-a-callback-as-props",
      "description": "You can pass `state` as props to child components, but you're not limited to passing data. You can also pass handler functions or any method that's defined on a React component to a child component. This is how you allow child components to interact with their parent components. You pass methods to a child just like a regular prop. It's assigned a name and you have access to that method name under `this.props` in the child component.",
      "instructions": "There are three components outlined in the code editor. The `MyApp` component is the parent that will render the `GetInput` and `RenderInput` child components. Add the `GetInput` component to the render method in `MyApp`, then pass it a prop called `input` assigned to `inputValue` from `MyApp`'s `state`. Also create a prop called `handleChange` and pass the input handler `handleChange` to it.\n\nNext, add `RenderInput` to the render method in `MyApp`, then create a prop called `input` and pass the `inputValue` from `state` to it. Once you are finished you will be able to type in the `input` field in the `GetInput` component, which then calls the handler method in its parent via props. This updates the input in the `state` of the parent, which is passed as props to both children. Observe how the data flows between the components and how the single source of truth remains the `state` of the parent component. Admittedly, this example is a bit contrived, but should serve to illustrate how data and callbacks can be passed between React components.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n       </div>\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        <input\n          value={this.props.input}\n          onChange={this.props.handleChange}/>\n      </div>\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n  this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       <div>\n         <GetInput\n           input={this.state.inputValue}\n           handleChange={this.handleChange}/>\n         <RenderInput\n           input={this.state.inputValue}/>\n       </div>\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        <input\n          value={this.props.input}\n          onChange={this.props.handleChange}/>\n      </div>\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `MyApp` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n    return mockedComponent.find('MyApp').length === 1;\n  })()\n);"
        },
        {
          "text": "The `GetInput` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n    return mockedComponent.find('GetInput').length === 1;\n  })()\n);"
        },
        {
          "text": "The `RenderInput` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n    return mockedComponent.find('RenderInput').length === 1;\n  })()\n);"
        },
        {
          "text": "The `GetInput` component should receive the `MyApp` state property `inputValue` as props and contain an `input` element which modifies `MyApp` state.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n  const state_1 = () => {\n    mockedComponent.setState({ inputValue: '' });\n    return waitForIt(() => mockedComponent.state());\n  };\n  const state_2 = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'TestInput' } });\n    return waitForIt(() => mockedComponent.state());\n  };\n  const updated_1 = await state_1();\n  const updated_2 = await state_2();\n  assert(updated_1.inputValue === '' && updated_2.inputValue === 'TestInput');\n};"
        },
        {
          "text": "The `RenderInput` component should receive the `MyApp` state property `inputValue` as props.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n  const state_1 = () => {\n    mockedComponent.setState({ inputValue: 'TestName' });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated_1 = await state_1();\n  assert(updated_1.find('p').text().includes('TestName'));\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301400,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-a-callback-as-props.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyApp />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403616a",
      "title": "Pass an Array as Props",
      "challengeType": 6,
      "dashedName": "pass-an-array-as-props",
      "description": "The last challenge demonstrated how to pass information from a parent component to a child component as `props` or properties. This challenge looks at how arrays can be passed as `props`. To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.\n\n```jsx\n<ParentComponent>\n  <ChildComponent colors={[\"green\", \"blue\", \"red\"]} />\n</ParentComponent>\n```\n\nThe child component then has access to the array property `colors`. Array methods such as `join()` can be used when accessing the property. \n\n```jsx\nconst ChildComponent = (props) => <p>{props.colors.join(', ')}</p>\n``` \n\nThis will join all `colors` array items into a comma separated string and produce: `<p>green, blue, red</p>`. Later, we will learn about other common methods to render arrays of data in React.",
      "instructions": "There are `List` and `ToDo` components in the code editor. When rendering each `List` from the `ToDo` component, pass in a `tasks` property assigned to an array of to-do tasks, for example `[\"walk dog\", \"workout\"]`. Then access this `tasks` array in the `List` component, showing its value within the `p` element. Use `join(\", \")` to display the `props.tasks` array in the `p` element as a comma-separated list. Today's list should have at least 2 tasks and tomorrow's should have at least 3 tasks.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const List = (props) => {\n  { /* Change code below this line */ }\n  return <p>{}</p>\n  { /* Change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        { /* Change code below this line */ }\n        <List/>\n        <h2>Tomorrow</h2>\n        <List/>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const List= (props) => {\n  return <p>{props.tasks.join(', ')}</p>\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        <List tasks={['study', 'exercise']} />\n        <h2>Tomorrow</h2>\n        <List tasks={['call Sam', 'grocery shopping', 'order tickets']} />\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `ToDo` component should return a single outer `div`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().type() === 'div';\n  })()\n);"
        },
        {
          "text": "The third child of the `ToDo` component should be an instance of the `List` component.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().childAt(2).name() === 'List';\n  })()\n);"
        },
        {
          "text": "The fifth child of the `ToDo` component should be an instance of the `List` component.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().childAt(4).name() === 'List';\n  })()\n);"
        },
        {
          "text": "Both instances of the `List` component should have a property called `tasks` and `tasks` should be of type array.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return (\n      Array.isArray(mockedComponent.find('List').get(0).props.tasks) &&\n      Array.isArray(mockedComponent.find('List').get(1).props.tasks)\n    );\n  })()\n);"
        },
        {
          "text": "The first `List` component representing the tasks for today should have 2 or more items.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.find('List').get(0).props.tasks.length >= 2;\n  })()\n);"
        },
        {
          "text": "The second `List` component representing the tasks for tomorrow should have 3 or more items.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.find('List').get(1).props.tasks.length >= 3;\n  })()\n);"
        },
        {
          "text": "The `List` component should render the value from the `tasks` prop in the `p` tag.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return (\n      mockedComponent\n        .find('p')\n        .get(0)\n        .props.children.replace(/\\s*,\\s*/g, ',') ===\n        mockedComponent\n          .find('List')\n          .get(0)\n          .props.tasks.join(',')\n          .replace(/\\s*,\\s*/g, ',') &&\n      mockedComponent\n        .find('p')\n        .get(1)\n        .props.children.replace(/\\s*,\\s*/g, ',') ===\n        mockedComponent\n          .find('List')\n          .get(1)\n          .props.tasks.join(',')\n          .replace(/\\s*,\\s*/g, ',')\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301401,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-an-array-as-props.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<ToDo />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036169",
      "title": "Pass Props to a Stateless Functional Component",
      "challengeType": 6,
      "dashedName": "pass-props-to-a-stateless-functional-component",
      "description": "The previous challenges covered a lot about creating and composing JSX elements, functional components, and ES6 style class components in React. With this foundation, it's time to look at another feature very common in React: **props**. In React, you can pass props, or properties, to child components. Say you have an `App` component which renders a child component called `Welcome` which is a stateless functional component. You can pass `Welcome` a `user` property by writing:\n\n```jsx\n<App>\n  <Welcome user='Mark' />\n</App>\n```\n\nYou use **custom HTML attributes** created by you and supported by React to be passed to the component. In this case, the created property `user` is passed to the component `Welcome`. Since `Welcome` is a stateless functional component, it has access to this value like so:\n\n```jsx\nconst Welcome = (props) => <h1>Hello, {props.user}!</h1>\n```\n\nIt is standard to call this value `props` and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX. You can access the value of the argument in the function body. With class components, you will see this is a little different.",
      "instructions": "There are `Calendar` and `CurrentDate` components in the code editor. When rendering `CurrentDate` from the `Calendar` component, pass in a property of `date` assigned to the current date from JavaScript's `Date` object. Then access this `prop` in the `CurrentDate` component, showing its value within the `p` tags. Note that for `prop` values to be evaluated as JavaScript, they must be enclosed in curly brackets, for instance `date={Date()}`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const CurrentDate = (props) => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n      <p>The current date is: </p>\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* Change code below this line */ }\n        <CurrentDate />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const CurrentDate = (props) => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n      <p>The current date is: {props.date}</p>\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* Change code below this line */ }\n        <CurrentDate date={Date()} />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `Calendar` component should return a single `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"
        },
        {
          "text": "The second child of the `Calendar` component should be the `CurrentDate` component.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().childAt(1).name() === 'CurrentDate';\n  })()\n);"
        },
        {
          "text": "The `CurrentDate` component should have a prop called `date`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().childAt(1).props().date;\n  })()\n);"
        },
        {
          "text": "The `date` prop of the `CurrentDate` should contain a string of text.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    const prop = mockedComponent.children().childAt(1).props().date;\n    return typeof prop === 'string' && prop.length > 0;\n  })()\n);"
        },
        {
          "text": "The `date` prop should be generated by calling `Date()`",
          "testCode": "assert(/<CurrentDatedate={Date\\(\\)}\\/>/.test(__helpers.removeWhiteSpace(code)));"
        },
        {
          "text": "The `CurrentDate` component should render the value from the `date` prop in the `p` tag.",
          "testCode": "let date = 'dummy date';\nassert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(CurrentDate, { date })\n    );\n    return mockedComponent.find('p').html().includes(date);\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301402,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-props-to-a-stateless-functional-component.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<Calendar />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403617a",
      "title": "Pass State as Props to Child Components",
      "challengeType": 6,
      "dashedName": "pass-state-as-props-to-child-components",
      "description": "You saw a lot of examples that passed props to child JSX elements and child React components in previous challenges. You may be wondering where those props come from. A common pattern is to have a stateful component containing the `state` important to your app, that then renders child components. You want these components to have access to some pieces of that `state`, which are passed in as props.\n\nFor example, maybe you have an `App` component that renders a `Navbar`, among other components. In your `App`, you have `state` that contains a lot of user information, but the `Navbar` only needs access to the user's username so it can display it. You pass that piece of `state` to the `Navbar` component as a prop.\n\nThis pattern illustrates some important paradigms in React. The first is *unidirectional data flow*. State flows in one direction down the tree of your application's components, from the stateful parent component to child components. The child components only receive the state data they need. The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. The rest of your components simply receive state from the parent as props, and render a UI from that state. It begins to create a separation where state management is handled in one part of code and UI rendering in another. This principle of separating state logic from UI logic is one of React's key principles. When it's used correctly, it makes the design of complex, stateful applications much easier to manage.",
      "instructions": "The `MyApp` component is stateful and renders a `Navbar` component as a child. Pass the `name` property in its `state` down to the child component, then show the `name` in the `h1` tag that's part of the `Navbar` render method. `name` should appear after the text `Hello, my name is:`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       <div>\n         {/* Change code below this line */}\n         <Navbar />\n         {/* Change code above this line */}\n       </div>\n    );\n  }\n};\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <div>\n      {/* Change code below this line */}\n      <h1>Hello, my name is: </h1>\n      {/* Change code above this line */}\n    </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       <div>\n         <Navbar name={this.state.name}/>\n       </div>\n    );\n  }\n};\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <div>\n      <h1>Hello, my name is: {this.props.name}</h1>\n    </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `MyApp` component should render with a `Navbar` component inside.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n    return (\n      mockedComponent.find('MyApp').length === 1 &&\n      mockedComponent.find('Navbar').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The `Navbar` component should receive the `MyApp` state property `name` as props.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n  const setState = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.find('Navbar').props());\n  };\n  const navProps = await setState();\n  assert(navProps.name === 'TestName');\n};"
        },
        {
          "text": "The `h1` element in `Navbar` should render the `name` prop.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n  const navH1Before = mockedComponent.find('Navbar').find('h1').text();\n  const setState = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.find('Navbar').find('h1').text());\n  };\n  const navH1After = await setState();\n  assert(new RegExp('TestName').test(navH1After) && navH1After !== navH1Before);\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301403,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\pass-state-as-props-to-child-components.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyApp />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036167",
      "title": "Render a Class Component to the DOM",
      "challengeType": 6,
      "dashedName": "render-a-class-component-to-the-dom",
      "description": "You may remember using the ReactDOM API in an earlier challenge to render JSX elements to the DOM. The process for rendering React components will look very similar. The past few challenges focused on components and composition, so the rendering was done for you behind the scenes. However, none of the React code you write will render to the DOM without making a call to the ReactDOM API.\n\nHere's a refresher on the syntax: `ReactDOM.render(componentToRender, targetNode)`. The first argument is the React component that you want to render. The second argument is the DOM node that you want to render that component within.\n\nReact components are passed into `ReactDOM.render()` a little differently than JSX elements. For JSX elements, you pass in the name of the element that you want to render. However, for React components, you need to use the same syntax as if you were rendering a nested component, for example `ReactDOM.render(<ComponentToRender />, targetNode)`. You use this syntax for both ES6 class components and functional components.",
      "instructions": "Both the `Fruits` and `Vegetables` components are defined for you behind the scenes. Render both components as children of the `TypesOfFood` component, then render `TypesOfFood` to the DOM. There is a `div` with `id='challenge-node'` available for you to use.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n};\n\n// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        {/* Change code below this line */}\n          <Fruits />\n           <Vegetables />\n         {/* Change code above this line */}\n      </div>\n    );\n  }\n};\n\n// Change code below this line\nReactDOM.render(<TypesOfFood />, document.getElementById('challenge-node'));"
        }
      ],
      "tests": [
        {
          "text": "The `TypesOfFood` component should return a single `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"
        },
        {
          "text": "The `TypesOfFood` component should render the `Fruits` component after the `h1` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(1).name() === 'Fruits';\n  })()\n);"
        },
        {
          "text": "The `TypesOfFood` component should render the `Vegetables` component after `Fruits`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(2).name() === 'Vegetables';\n  })()\n);"
        },
        {
          "text": "The `TypesOfFood` component should render to the DOM within the `div` with the id `challenge-node`.",
          "testCode": "assert(\n  (function () {\n    const html = document.getElementById('challenge-node').childNodes[0]\n      .innerHTML;\n    return (\n      html.includes(\n        '<div><h2>Fruits:</h2><h4>Non-Citrus:</h4><ul><li>Apples</li><li>Blueberries</li><li>Strawberries</li><li>Bananas</li></ul><h4>Citrus:</h4><ul><li>Lemon</li><li>Lime</li><li>Orange</li><li>Grapefruit</li></ul></div>'\n      ) &&\n      html.includes(\n        '<div><h2>Vegetables:</h2><ul><li>Brussel Sprouts</li><li>Broccoli</li><li>Squash</li></ul></div>'\n      )\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301404,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-a-class-component-to-the-dom.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "jsx",
            "code": "const Fruits = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <h4>Non-Citrus:</h4>\n        <ul>\n          <li>Apples</li>\n          <li>Blueberries</li>\n          <li>Strawberries</li>\n          <li>Bananas</li>\n        </ul>\n      <h4>Citrus:</h4>\n        <ul>\n          <li>Lemon</li>\n          <li>Lime</li>\n          <li>Orange</li>\n          <li>Grapefruit</li>\n        </ul>\n    </div>\n  );\n};\nconst Vegetables = () => {\n  return (\n    <div>\n      <h2>Vegetables:</h2>\n      <ul>\n        <li>Brussel Sprouts</li>\n        <li>Broccoli</li>\n        <li>Squash</li>\n      </ul>\n    </div>\n  );\n};"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036188",
      "title": "Render Conditionally from Props",
      "challengeType": 6,
      "dashedName": "render-conditionally-from-props",
      "description": "So far, you've seen how to use `if/else`, `&&`, and the ternary operator (`condition ? expressionIfTrue : expressionIfFalse`) to make conditional decisions about what to render and when. However, there's one important topic left to discuss that lets you combine any or all of these concepts with another powerful React feature: props. Using props to conditionally render code is very common with React developers — that is, they use the value of a given prop to automatically make decisions about what to render.\n\nIn this challenge, you'll set up a child component to make rendering decisions based on props. You'll also use the ternary operator, but you can see how several of the other concepts that were covered in the last few challenges might be just as useful in this context.",
      "instructions": "The code editor has two components that are partially defined for you: a parent called `GameOfChance`, and a child called `Results`. They are used to create a simple game where the user presses a button to see if they win or lose.\n\nFirst, you'll need a simple expression that randomly returns a different value every time it is run. You can use `Math.random()`. This method returns a value between `0` (inclusive) and `1` (exclusive) each time it is called. So for 50/50 odds, use `Math.random() >= .5` in your expression. Statistically speaking, this expression will return `true` 50% of the time, and `false` the other 50%. In the render method, replace `null` with the above expression to complete the variable declaration.\n\nNow you have an expression that you can use to make a randomized decision in the code. Next you need to implement this. Render the `Results` component as a child of `GameOfChance`, and pass in `expression` as a prop called `fiftyFifty`. In the `Results` component, write a ternary expression to render the `h1` element with the text `You Win!` or `You Lose!` based on the `fiftyFifty` prop that's being passed in from `GameOfChance`. Finally, make sure the `handleClick()` method is correctly counting each turn so the user knows how many times they've played. This also serves to let the user know the component has actually updated in case they win or lose twice in a row.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    {/* Change code below this line */}\n    return <h1></h1>;\n    {/* Change code above this line */}\n  }\n}\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState(prevState => {\n      // Complete the return statement:\n      return {\n        counter: prevState\n      }\n    });\n  }\n  render() {\n    const expression = null; // Change this line\n    return (\n      <div>\n        <button onClick={this.handleClick}>Play Again</button>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n        <p>{'Turn: ' + this.state.counter}</p>\n      </div>\n    );\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "// We want this to be deterministic for testing purposes.\nconst randomSequence = [true, false, false, true, true, false, false, true, true, false];\nlet index = 0;\nconst fiftyFifty = () => randomSequence[index++ % randomSequence.length];\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <h1>{this.props.fiftyFifty ? 'You Win!' : 'You Lose!'}</h1>;\n  }\n}\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState(prevState => {\n      return {\n        counter: prevState.counter + 1\n      }\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Play Again</button>\n        <Results fiftyFifty={fiftyFifty()} />\n        <p>{'Turn: ' + this.state.counter}</p>\n      </div>\n    );\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "The `GameOfChance` component should exist and render to the page.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(GameOfChance)).find('GameOfChance').length,\n  1\n);"
        },
        {
          "text": "`GameOfChance` should return a single `button` element.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(GameOfChance)).find('button').length,\n  1\n);"
        },
        {
          "text": "`GameOfChance` should return a single instance of the `Results` component, which has a prop called `fiftyFifty`.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(GameOfChance)).find('Results').length ===\n    1 &&\n    Enzyme.mount(React.createElement(GameOfChance))\n      .find('Results')\n      .props()\n      .hasOwnProperty('fiftyFifty') === true\n);"
        },
        {
          "text": "`GameOfChance` state should be initialized with a property of `counter` set to a value of `1`.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(GameOfChance)).state().counter,\n  1\n);"
        },
        {
          "text": "When the `GameOfChance` component is first rendered to the DOM, a `p` element should be returned with the inner text of `Turn: 1`.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(GameOfChance)).find('p').text(),\n  'Turn: 1'\n);"
        },
        {
          "text": "Each time the button is clicked, the counter state should be incremented by a value of 1, and a single `p` element should be rendered to the DOM that contains the text `Turn: N`, where `N` is the value of the counter state.",
          "testCode": "(() => {\n  const comp = Enzyme.mount(React.createElement(GameOfChance));\n  const simulate = () => {\n    comp.find('button').simulate('click');\n  };\n  const result = () => ({\n    count: comp.state('counter'),\n    text: comp.find('p').text()\n  });\n  const _1 = () => {\n    simulate();\n    return result();\n  };\n  const _2 = () => {\n    simulate();\n    return result();\n  };\n  const _3 = () => {\n    simulate();\n    return result();\n  };\n  const _4 = () => {\n    simulate();\n    return result();\n  };\n  const _5 = () => {\n    simulate();\n    return result();\n  };\n  const _1_val = _1();\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  const _5_val = _5();\n  assert(\n    _1_val.count === 2 &&\n      _1_val.text === 'Turn: 2' &&\n      _2_val.count === 3 &&\n      _2_val.text === 'Turn: 3' &&\n      _3_val.count === 4 &&\n      _3_val.text === 'Turn: 4' &&\n      _4_val.count === 5 &&\n      _4_val.text === 'Turn: 5' &&\n      _5_val.count === 6 &&\n      _5_val.text === 'Turn: 6'\n  );\n})();"
        },
        {
          "text": "When the `GameOfChance` component is first mounted to the DOM and each time the button is clicked thereafter, a single `h1` element should be returned that randomly renders either `You Win!` or `You Lose!`. Note: this can fail randomly. If that happens, please try again.",
          "testCode": "(() => {\n  const comp = Enzyme.mount(React.createElement(GameOfChance));\n  const simulate = () => {\n    comp.find('button').simulate('click');\n  };\n  const result = () => ({\n    h1: comp.find('h1').length,\n    text: comp.find('h1').text()\n  });\n  const _1 = result();\n  const _2 = () => {\n    simulate();\n    return result();\n  };\n  const _3 = () => {\n    simulate();\n    return result();\n  };\n  const _4 = () => {\n    simulate();\n    return result();\n  };\n  const _5 = () => {\n    simulate();\n    return result();\n  };\n  const _6 = () => {\n    simulate();\n    return result();\n  };\n  const _7 = () => {\n    simulate();\n    return result();\n  };\n  const _8 = () => {\n    simulate();\n    return result();\n  };\n  const _9 = () => {\n    simulate();\n    return result();\n  };\n  const _10 = () => {\n    simulate();\n    return result();\n  };\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  const _5_val = _5();\n  const _6_val = _6();\n  const _7_val = _7();\n  const _8_val = _8();\n  const _9_val = _9();\n  const _10_val = _10();\n  const __text = new Set([\n    _1.text,\n    _2_val.text,\n    _3_val.text,\n    _4_val.text,\n    _5_val.text,\n    _6_val.text,\n    _7_val.text,\n    _8_val.text,\n    _9_val.text,\n    _10_val.text\n  ]);\n  const __h1 = new Set([\n    _1.h1,\n    _2_val.h1,\n    _3_val.h1,\n    _4_val.h1,\n    _5_val.h1,\n    _6_val.h1,\n    _7_val.h1,\n    _8_val.h1,\n    _9_val.h1,\n    _10_val.h1\n  ]);\n  assert(__text.size === 2 && __h1.size === 1);\n})();"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301405,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-conditionally-from-props.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<GameOfChance />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24bbe0dba28a8d3cbd4c5f",
      "title": "Render HTML Elements to the DOM",
      "challengeType": 6,
      "dashedName": "render-html-elements-to-the-dom",
      "description": "So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.\n\nReactDOM offers a simple method to render React elements to the DOM which looks like this: `ReactDOM.render(componentToRender, targetNode)`, where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.\n\nAs you would expect, `ReactDOM.render()` must be called after the JSX element declarations, just like how you must declare variables before using them.",
      "instructions": "The code editor has a simple JSX component. Use the `ReactDOM.render()` method to render this component to the page. You can pass defined JSX elements directly in as the first argument and use `document.getElementById()` to select the DOM node to render them to. There is a `div` with `id='challenge-node'` available for you to use. Make sure you don't change the `JSX` constant.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const JSX = (\n  <div>\n    <h1>Hello World</h1>\n    <p>Lets render this to the DOM</p>\n  </div>\n);\n// Add your code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const JSX = (\n<div>\n  <h1>Hello World</h1>\n  <p>Lets render this to the DOM</p>\n</div>\n);\n// Add your code below this line\nReactDOM.render(JSX, document.getElementById('challenge-node'));"
        }
      ],
      "tests": [
        {
          "text": "The constant `JSX` should return a `div` element.",
          "testCode": "assert(JSX.type === 'div');"
        },
        {
          "text": "The `div` should contain an `h1` tag as the first element.",
          "testCode": "assert(JSX.props.children[0].type === 'h1');"
        },
        {
          "text": "The `div` should contain a `p` tag as the second element.",
          "testCode": "assert(JSX.props.children[1].type === 'p');"
        },
        {
          "text": "The provided JSX element should render to the DOM node with id `challenge-node`.",
          "testCode": "assert(\n  document.getElementById('challenge-node').childNodes[0].innerHTML ===\n    '<h1>Hello World</h1><p>Lets render this to the DOM</p>'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301406,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-html-elements-to-the-dom.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403618d",
      "title": "Render React on the Server with renderToString",
      "challengeType": 6,
      "dashedName": "render-react-on-the-server-with-rendertostring",
      "description": "So far, you have been rendering React components on the client. Normally, this is what you will always do. However, there are some use cases where it makes sense to render a React component on the server. Since React is a JavaScript view library and you can run JavaScript on the server with Node, this is possible. In fact, React provides a `renderToString()` method you can use for this purpose.\n\nThere are two key reasons why rendering on the server may be used in a real world app. First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser. This may not be ideal for search engines that are trying to index the content of your pages so people can find you. If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of the page's markup which can be crawled by search engines. Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app. React will still be able to recognize your app and manage it after the initial load.",
      "instructions": "The `renderToString()` method is provided on `ReactDOMServer`, which is available here as a global object. The method takes one argument which is a React element. Use this to render `App` to a string.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);"
        }
      ],
      "tests": [
        {
          "text": "The `App` component should render to a string using `ReactDOMServer.renderToString`.",
          "testCode": "() =>\n  assert(\n    code.replace(/ /g, '')\n      .includes('ReactDOMServer.renderToString(<App/>)') &&\n      Enzyme.mount(React.createElement(App)).children().name() === 'div'\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301407,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-react-on-the-server-with-rendertostring.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "jsx",
            "code": "var ReactDOMServer = { renderToString(x) { return null; } };"
          }
        ],
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<App />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036172",
      "title": "Render State in the User Interface Another Way",
      "challengeType": 6,
      "dashedName": "render-state-in-the-user-interface-another-way",
      "description": "There is another way to access `state` in a component. In the `render()` method, before the `return` statement, you can write JavaScript directly. For example, you could declare functions, access data from `state` or `props`, perform computations on this data, and so on. Then, you can assign any data to variables, which you have access to in the `return` statement.",
      "instructions": "In the `MyComponent` render method, define a `const` called `name` and set it equal to the name value in the component's `state`. Because you can write JavaScript directly in this part of the code, you don't have to enclose this reference in curly braces.\n\nNext, in the return statement, render this value in an `h1` tag using the variable `name`. Remember, you need to use the JSX syntax (curly braces for JavaScript) in the return statement.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n    return (\n      <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    // Change code below this line\n    const name = this.state.name;\n    // Change code above this line\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <h1>{name}</h1>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should have a key `name` with value `freeCodeCamp` stored in its state.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'freeCodeCamp'\n);"
        },
        {
          "text": "`MyComponent` should render an `h1` heading element enclosed in a single `div`.",
          "testCode": "assert(\n  /<div><h1>.*<\\/h1><\\/div>/.test(\n    Enzyme.mount(React.createElement(MyComponent)).html()\n  )\n);"
        },
        {
          "text": "The rendered `h1` tag should include a reference to `{name}`.",
          "testCode": "assert(/<h1>\\n*\\s*\\{\\s*name\\s*\\}\\s*\\n*<\\/h1>/.test(code));"
        },
        {
          "text": "The rendered `h1` heading element should contain text rendered from the component's state.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  assert(firstValue === '<div><h1>TestName</h1></div>');\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301408,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface-another-way.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036171",
      "title": "Render State in the User Interface",
      "challengeType": 6,
      "dashedName": "render-state-in-the-user-interface",
      "description": "Once you define a component's initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in `state` in its `render()` method. You can access the data with `this.state`.\n\nIf you want to access a state value within the `return` of the render method, you have to enclose the value in curly braces.\n\n`state` is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.\n\nNote that if you make a component stateful, no other components are aware of its `state`. Its `state` is completely encapsulated, or local to that component, unless you pass state data to a child component as `props`. This notion of encapsulated `state` is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code.",
      "instructions": "In the code editor, `MyComponent` is already stateful. Define an `h1` tag in the component's render method which renders the value of `name` from the component's state.\n\n**Note:** The `h1` should only render the value from `state` and nothing else. In JSX, any code you write with curly braces `{ }` will be treated as JavaScript. So to access the value from `state` just enclose the reference in curly braces.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <h1>{this.state.name}</h1>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should have a key `name` with value `freeCodeCamp` stored in its state.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'freeCodeCamp'\n);"
        },
        {
          "text": "`MyComponent` should render an `h1` heading element enclosed in a single `div`.",
          "testCode": "assert(\n  /<div><h1>.*<\\/h1><\\/div>/.test(\n    Enzyme.mount(React.createElement(MyComponent)).html()\n  )\n);"
        },
        {
          "text": "The rendered `h1` heading element should only contain text rendered from the component's state.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  const getValue = firstValue.replace(/\\s/g, '');\n  assert(getValue === '<div><h1>TestName</h1></div>');\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301409,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-state-in-the-user-interface.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036184",
      "title": "Render with an If-Else Condition",
      "challengeType": 6,
      "dashedName": "render-with-an-if-else-condition",
      "description": "Another application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition. When the condition is true, one view renders. When it's false, it's a different view. You can do this with a standard `if/else` statement in the `render()` method of a React component.",
      "instructions": "MyComponent contains a `boolean` in its state which tracks whether you want to display some element in the UI or not. The `button` toggles the state of this value. Currently, it renders the same UI every time. Rewrite the `render()` method with an `if/else` statement so that if `display` is `true`, you return the current markup. Otherwise, return the markup without the `h1` element.\n\n**Note:** You must write an `if/else` to pass the tests. Use of the ternary operator will not pass here.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState((state) => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n }\n  toggleDisplay() {\n    this.setState((state) => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    if (this.state.display) {\n      return (\n         <div>\n           <button onClick={this.toggleDisplay}>Toggle Display</button>\n           <h1>Displayed!</h1>\n         </div>\n      );\n    } else {\n      return (\n        <div>\n           <button onClick={this.toggleDisplay}>Toggle Display</button>\n         </div>\n      );\n    }\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should exist and render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('MyComponent').length === 1;\n  })()\n);"
        },
        {
          "text": "When `display` is set to `true`, a `div`, `button`, and `h1` should render.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: true });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('div').children().length === 2 &&\n      mockedComponent.find('button').length === 1 &&\n      mockedComponent.find('h1').length === 1\n  );\n};"
        },
        {
          "text": "When `display` is set to `false`, only a `div` and `button` should render.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: false });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('div').children().length === 1 &&\n      mockedComponent.find('button').length === 1 &&\n      mockedComponent.find('h1').length === 0\n  );\n};"
        },
        {
          "text": "The render method should use an `if/else` statement to check the condition of `this.state.display`.",
          "testCode": "assert(code.includes('if') && code.includes('else'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301410,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\render-with-an-if-else-condition.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403616f",
      "title": "Review Using Props with Stateless Functional Components",
      "challengeType": 6,
      "dashedName": "review-using-props-with-stateless-functional-components",
      "description": "Except for the last challenge, you've been passing props to stateless functional components. These components act like pure functions. They accept props as input and return the same view every time they are passed the same props. You may be wondering what state is, and the next challenge will cover it in more detail. Before that, here's a review of the terminology for components.\n\nA *stateless functional component* is any function you write which accepts props and returns JSX. A *stateless component*, on the other hand, is a class that extends `React.Component`, but does not use internal state (covered in the next challenge). Finally, a *stateful component* is a class component that does maintain its own internal state. You may see stateful components referred to simply as components or React components.\n\nA common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. This helps contain your state management to a specific area of your application. In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.",
      "instructions": "The code editor has a `CampSite` component that renders a `Camper` component as a child. Define the `Camper` component and assign it default props of `{ name: 'CamperBot' }`. Inside the `Camper` component, render any code that you want, but make sure to have one `p` element that includes only the `name` value that is passed in as a `prop`. Finally, define `propTypes` on the `Camper` component to require `name` to be provided as a prop and verify that it is of type `string`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Camper/>\n      </div>\n    );\n  }\n};\n// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Camper/>\n      </div>\n    );\n  }\n};\n// Change code below this line\n\nconst Camper = (props) => {\n   return (\n     <div>\n       <p>{props.name}</p>\n     </div>\n   );\n};\n\nCamper.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nCamper.defaultProps = {\n  name: 'CamperBot'\n};"
        }
      ],
      "tests": [
        {
          "text": "The `CampSite` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(CampSite));\n    return mockedComponent.find('CampSite').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Camper` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(CampSite));\n    return mockedComponent.find('Camper').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Camper` component should include default props which assign the string `CamperBot` to the key `name`.",
          "testCode": "assert(\n  /Camper.defaultProps={name:(['\"`])CamperBot\\1,?}/.test(\n    __helpers.removeWhiteSpace(code)\n  )\n);"
        },
        {
          "text": "The `Camper` component should include prop types which require the `name` prop to be of type `string`.",
          "testCode": "assert(\n  /Camper.propTypes={name:PropTypes.string.isRequired,?}/.test(\n    __helpers.removeWhiteSpace(code)\n  )\n);"
        },
        {
          "text": "The `Camper` component should contain a `p` element with only the text from the `name` prop.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(CampSite));\n    return (\n      mockedComponent.find('p').text() ===\n      mockedComponent.find('Camper').props().name\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301411,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\review-using-props-with-stateless-functional-components.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "jsx",
            "code": "var PropTypes = {\n   string: { isRequired: true }\n};"
          }
        ],
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<CampSite />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036173",
      "title": "Set State with this.setState",
      "challengeType": 6,
      "dashedName": "set-state-with-this-setstate",
      "description": "The previous challenges covered component `state` and how to initialize state in the `constructor`. There is also a way to change the component's `state`. React provides a method for updating component `state` called `setState`. You call the `setState` method within your component class like so: `this.setState()`, passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. For instance, if we were storing a `username` in state and wanted to update it, it would look like this:\n\n```jsx\nthis.setState({\n  username: 'Lewis'\n});\n```\n\nReact expects you to never modify `state` directly, instead always use `this.setState()` when state changes occur. Also, you should note that React may batch multiple state updates in order to improve performance. What this means is that state updates through the `setState` method can be asynchronous. There is an alternative syntax for the `setState` method which provides a way around this problem. This is rarely needed but it's good to keep it in mind! Please consult our <a href=\"https://www.freecodecamp.org/news/what-is-state-in-react-explained-with-examples/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">React article</a> for further details.",
      "instructions": "There is a `button` element in the code editor which has an `onClick()` handler. This handler is triggered when the `button` receives a click event in the browser, and runs the `handleClick` method defined on `MyComponent`. Within the `handleClick` method, update the component `state` using `this.setState()`. Set the `name` property in `state` to equal the string `React Rocks!`.\n\nClick the button and watch the rendered state update. Don't worry if you don't fully understand how the click handler code works at this point. It's covered in upcoming challenges.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n     // Change code below this line\n    this.setState({\n      name: 'React Rocks!'\n    });\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick = {this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The state of `MyComponent` should initialize with the key value pair `{ name: Initial State }`.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'Initial State'\n);"
        },
        {
          "text": "`MyComponent` should render an `h1` heading element.",
          "testCode": "assert(Enzyme.mount(React.createElement(MyComponent)).find('h1').length === 1);"
        },
        {
          "text": "The rendered `h1` heading element should contain text rendered from the component's state.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  assert(/<h1>TestName<\\/h1>/.test(firstValue));\n};"
        },
        {
          "text": "Calling the `handleClick` method on `MyComponent` should set the name property in state to equal `React Rocks!`.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'Before' });\n    return waitForIt(() => mockedComponent.state('name'));\n  };\n  const second = () => {\n    mockedComponent.instance().handleClick();\n    return waitForIt(() => mockedComponent.state('name'));\n  };\n  const firstValue = await first();\n  const secondValue = await second();\n  assert(firstValue === 'Before' && secondValue === 'React Rocks!');\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301412,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\set-state-with-this.setstate.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036185",
      "title": "Use && for a More Concise Conditional",
      "challengeType": 6,
      "dashedName": "use--for-a-more-concise-conditional",
      "description": "The `if/else` statements worked in the last challenge, but there's a more concise way to achieve the same result. Imagine that you are tracking several conditions in a component and you want different elements to render depending on each of these conditions. If you write a lot of `else if` statements to return slightly different UIs, you may repeat code which leaves room for error. Instead, you can use the `&&` logical operator to perform conditional logic in a more concise way. This is possible because you want to check if a condition is `true`, and if it is, return some markup. Here's an example:\n\n```jsx\n{condition && <p>markup</p>}\n```\n\nIf the `condition` is `true`, the markup will be returned. If the condition is `false`, the operation will immediately return `false` after evaluating the `condition` and return nothing. You can include these statements directly in your JSX and string multiple conditions together by writing `&&` after each one. This allows you to handle more complex conditional logic in your `render()` method without repeating a lot of code.",
      "instructions": "Solve the previous example again, so the `h1` only renders if `display` is `true`, but use the `&&` logical operator instead of an `if/else` statement.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         {this.state.display && <h1>Displayed!</h1>}\n       </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should exist and render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('MyComponent').length;\n  })()\n);"
        },
        {
          "text": "When `display` is set to `true`, a `div`, `button`, and `h1` should render.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: true });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    updated.find('div').length === 1 &&\n      updated.find('div').children().length === 2 &&\n      updated.find('button').length === 1 &&\n      updated.find('h1').length === 1\n  );\n};"
        },
        {
          "text": "When `display` is set to `false`, only a `div` and `button` should render.",
          "testCode": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: false });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    updated.find('div').length === 1 &&\n      updated.find('div').children().length === 1 &&\n      updated.find('button').length === 1 &&\n      updated.find('h1').length === 0\n  );\n};"
        },
        {
          "text": "The render method should use the `&&` logical operator to check the condition of `this.state.display`.",
          "testCode": "assert(code.includes('&&'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301413,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use--for-a-more-concise-conditional.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036187",
      "title": "Use a Ternary Expression for Conditional Rendering",
      "challengeType": 6,
      "dashedName": "use-a-ternary-expression-for-conditional-rendering",
      "description": "Before moving on to dynamic rendering techniques, there's one last way to use built-in JavaScript conditionals to render what you want: the <dfn>ternary operator</dfn>. The ternary operator is often utilized as a shortcut for `if/else` statements in JavaScript. They're not quite as robust as traditional `if/else` statements, but they are very popular among React developers. One reason for this is because of how JSX is compiled, `if/else` statements can't be inserted directly into JSX code. You might have noticed this a couple challenges ago — when an `if/else` statement was required, it was always *outside* the `return` statement. Ternary expressions can be an excellent alternative if you want to implement conditional logic within your JSX. Recall that a ternary operator has three parts, but you can combine several ternary expressions together. Here's the basic syntax:\n\n```jsx\ncondition ? expressionIfTrue : expressionIfFalse;\n```",
      "instructions": "The code editor has three constants defined within the `CheckUserAge` component's `render()` method. They are called `buttonOne`, `buttonTwo`, and `buttonThree`. Each of these is assigned a simple JSX expression representing a button element. First, initialize the state of `CheckUserAge` with `input` and `userAge` both set to values of an empty string.\n\nOnce the component is rendering information to the page, users should have a way to interact with it. Within the component's `return` statement, set up a ternary expression that implements the following logic: when the page first loads, render the submit button, `buttonOne`, to the page. Then, when a user enters their age and clicks the button, render a different button based on the age. If a user enters a number less than `18`, render `buttonThree`. If a user enters a number greater than or equal to `18`, render `buttonTwo`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n\n    // Change code above this line\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAge: '',\n      input: ''\n    };\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {this.state.userAge === ''\n          ? buttonOne\n          : this.state.userAge >= 18\n          ? buttonTwo\n          : buttonThree}\n      </div>\n    );\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "The `CheckUserAge` component should render with a single `input` element and a single `button` element.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('input')\n    .length === 1 &&\n    Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('button')\n      .length === 1\n);"
        },
        {
          "text": "The `CheckUserAge` component's state should be initialized with a property of `userAge` and a property of `input`, both set to a value of an empty string.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).state().input === '' &&\n    Enzyme.mount(React.createElement(CheckUserAge)).state().userAge === ''\n);"
        },
        {
          "text": "When the `CheckUserAge` component is first rendered to the DOM, the `button`'s inner text should be Submit.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).find('button').text() ===\n    'Submit'\n);"
        },
        {
          "text": "When a number of less than 18 is entered into the `input` element and the `button` is clicked, the `button`'s inner text should read `You Shall Not Pass`.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const initialButton = mockedComponent.find('button').text();\n  const enter3AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '3' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter17AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '17' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge3 = enter3AndClickButton();\n  const userAge17 = enter17AndClickButton();\n  assert(\n    initialButton === 'Submit' &&\n      userAge3 === 'You Shall Not Pass' &&\n      userAge17 === 'You Shall Not Pass'\n  );\n})();"
        },
        {
          "text": "When a number greater than or equal to 18 is entered into the `input` element and the `button` is clicked, the `button`'s inner text should read `You May Enter`.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const initialButton = mockedComponent.find('button').text();\n  const enter18AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '18' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter35AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '35' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge18 = enter18AndClickButton();\n  const userAge35 = enter35AndClickButton();\n  assert(\n    initialButton === 'Submit' &&\n      userAge18 === 'You May Enter' &&\n      userAge35 === 'You May Enter'\n  );\n})();"
        },
        {
          "text": "Once a number has been submitted, and the value of the `input` is once again changed, the `button` should return to reading `Submit`.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const enter18AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '18' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const changeInputDontClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '5' } });\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter10AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '10' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge18 = enter18AndClickButton();\n  const changeInput1 = changeInputDontClickButton();\n  const userAge10 = enter10AndClickButton();\n  const changeInput2 = changeInputDontClickButton();\n  assert(\n    userAge18 === 'You May Enter' &&\n      changeInput1 === 'Submit' &&\n      userAge10 === 'You Shall Not Pass' &&\n      changeInput2 === 'Submit'\n  );\n})();"
        },
        {
          "text": "Your code should not contain any `if/else` statements.",
          "testCode": "assert(\n  new RegExp(/(\\s|;)if(\\s|\\()/).test(\n    code\n  ) === false\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301414,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-a-ternary-expression-for-conditional-rendering.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<CheckUserAge />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036183",
      "title": "Use Advanced JavaScript in React Render Method",
      "challengeType": 6,
      "dashedName": "use-advanced-javascript-in-react-render-method",
      "description": "In previous challenges, you learned how to inject JavaScript code into JSX code using curly braces, `{ }`, for tasks like accessing props, passing props, accessing state, inserting comments into your code, and most recently, styling your components. These are all common use cases to put JavaScript in JSX, but they aren't the only way that you can utilize JavaScript code in your React components.\n\nYou can also write JavaScript directly in your `render` methods, before the `return` statement, ***without*** inserting it inside of curly braces. This is because it is not yet within the JSX code. When you want to use a variable later in the JSX code *inside* the `return` statement, you place the variable name inside curly braces.",
      "instructions": "In the code provided, the `render` method has an array that contains 20 phrases to represent the answers found in the classic 1980's Magic Eight Ball toy. The button click event is bound to the `ask` method, so each time the button is clicked a random number will be generated and stored as the `randomIndex` in state. On line 52, delete the string `change me!` and reassign the `answer` const so your code randomly accesses a different index of the `possibleAnswers` array each time the component updates. Finally, insert the `answer` const inside the `p` tags.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    };\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n      'It is decidedly so',\n      'Without a doubt',\n      'Yes, definitely',\n      'You may rely on it',\n      'As I see it, yes',\n      'Outlook good',\n      'Yes',\n      'Signs point to yes',\n      'Reply hazy try again',\n      'Ask again later',\n      'Better not tell you now',\n      'Cannot predict now',\n      'Concentrate and ask again',\n      \"Don't count on it\",\n      'My reply is no',\n      'My sources say no',\n      'Most likely',\n      'Outlook not so good',\n      'Very doubtful'\n    ];\n    const answer = 'change me!'; // Change this line\n    return (\n      <div>\n        <input\n          type='text'\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle}\n        />\n        <br />\n        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>\n        <br />\n        <h3>Answer:</h3>\n        <p>\n          {/* Change code below this line */}\n\n          {/* Change code above this line */}\n        </p>\n      </div>\n    );\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    };\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n      'It is decidedly so',\n      'Without a doubt',\n      'Yes, definitely',\n      'You may rely on it',\n      'As I see it, yes',\n      'Outlook good',\n      'Yes',\n      'Signs point to yes',\n      'Reply hazy try again',\n      'Ask again later',\n      'Better not tell you now',\n      'Cannot predict now',\n      'Concentrate and ask again',\n      \"Don't count on it\",\n      'My reply is no',\n      'My sources say no',\n      'Outlook not so good',\n      'Very doubtful',\n      'Most likely'\n    ];\n    const answer = possibleAnswers[this.state.randomIndex];\n    return (\n      <div>\n        <input\n          type='text'\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle}\n        />\n        <br />\n        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>\n        <br />\n        <h3>Answer:</h3>\n        <p>{answer}</p>\n      </div>\n    );\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "The `MagicEightBall` component should exist and should render to the page.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(MagicEightBall)).find('MagicEightBall')\n    .length,\n  1\n);"
        },
        {
          "text": "`MagicEightBall`'s first child should be an `input` element.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(MagicEightBall))\n    .children()\n    .childAt(0)\n    .name(),\n  'input'\n);"
        },
        {
          "text": "`MagicEightBall`'s third child should be a `button` element.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(MagicEightBall))\n    .children()\n    .childAt(2)\n    .name(),\n  'button'\n);"
        },
        {
          "text": "`MagicEightBall`'s state should be initialized with a property of `userInput` and a property of `randomIndex` both set to a value of an empty string.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(MagicEightBall)).state('randomIndex') ===\n    '' &&\n    Enzyme.mount(React.createElement(MagicEightBall)).state('userInput') === ''\n);"
        },
        {
          "text": "When `MagicEightBall` is first mounted to the DOM, it should return an empty `p` element.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(MagicEightBall)).find('p').length === 1 &&\n    Enzyme.mount(React.createElement(MagicEightBall)).find('p').text() === ''\n);"
        },
        {
          "text": "When text is entered into the `input` element and the button is clicked, the `MagicEightBall` component should return a `p` element that contains a random element from the `possibleAnswers` array.",
          "testCode": "(() => {\n  const comp = Enzyme.mount(React.createElement(MagicEightBall));\n  const simulate = () => {\n    comp.find('input').simulate('change', { target: { value: 'test?' } });\n    comp.find('button').simulate('click');\n  };\n  const result = () => comp.find('p').text();\n  const _1 = () => {\n    simulate();\n    return result();\n  };\n  const _2 = () => {\n    simulate();\n    return result();\n  };\n  const _3 = () => {\n    simulate();\n    return result();\n  };\n  const _4 = () => {\n    simulate();\n    return result();\n  };\n  const _5 = () => {\n    simulate();\n    return result();\n  };\n  const _6 = () => {\n    simulate();\n    return result();\n  };\n  const _7 = () => {\n    simulate();\n    return result();\n  };\n  const _8 = () => {\n    simulate();\n    return result();\n  };\n  const _9 = () => {\n    simulate();\n    return result();\n  };\n  const _10 = () => {\n    simulate();\n    return result();\n  };\n  const _1_val = _1();\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  const _5_val = _5();\n  const _6_val = _6();\n  const _7_val = _7();\n  const _8_val = _8();\n  const _9_val = _9();\n  const _10_val = _10();\n  const actualAnswers = [\n    _1_val,\n    _2_val,\n    _3_val,\n    _4_val,\n    _5_val,\n    _6_val,\n    _7_val,\n    _8_val,\n    _9_val,\n    _10_val\n  ];\n  const hasIndex = actualAnswers.filter(\n    (answer, i) => possibleAnswers.indexOf(answer) !== -1\n  );\n  const notAllEqual = new Set(actualAnswers);\n  assert(notAllEqual.size > 1 && hasIndex.length === 10);\n})();"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301415,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-advanced-javascript-in-react-render-method.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "var possibleAnswers = [\n  'It is certain',\n  'It is decidedly so',\n  'Without a doubt',\n  'Yes, definitely',\n  'You may rely on it',\n  'As I see it, yes',\n  'Outlook good',\n  'Yes',\n  'Signs point to yes',\n  'Reply hazy try again',\n  'Ask again later',\n  'Better not tell you now',\n  'Cannot predict now',\n  'Concentrate and ask again',\n  \"Don't count on it\",\n  'My reply is no',\n  'My sources say no',\n  'Outlook not so good',\n  'Very doubtful',\n  'Most likely'\n];\nReactDOM.render(<MagicEightBall />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403618c",
      "title": "Use Array.filter() to Dynamically Filter an Array",
      "challengeType": 6,
      "dashedName": "use-array-filter-to-dynamically-filter-an-array",
      "description": "The `map` array method is a powerful tool that you will use often when working with React. Another method related to `map` is `filter`, which filters the contents of an array based on a condition, then returns a new array. For example, if you have an array of users that all have a property `online` which can be set to `true` or `false`, you can filter only those users that are online by writing:\n\n```js\nlet onlineUsers = users.filter(user => user.online);\n```",
      "instructions": "In the code editor, `MyComponent`'s `state` is initialized with an array of users. Some users are online and some aren't. Filter the array so you see only the users who are online. To do this, first use `filter` to return a new array containing only the users whose `online` property is `true`. Then, in the `renderOnline` variable, map over the filtered array, and return a `li` element for each user that contains the text of their `username`. Be sure to include a unique `key` as well, like in the last challenges.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = null; // Change this line\n    const renderOnline = null; // Change this line\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = this.state.users.filter(user => {\n      return user.online;\n    });\n    const renderOnline = usersOnline.map(user => {\n      return <li key={user.username}>{user.username}</li>;\n    });\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should exist and render to the page.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(MyComponent)).find('MyComponent').length,\n  1\n);"
        },
        {
          "text": "`MyComponent`'s state should be initialized to an array of six users.",
          "testCode": "assert(\n  Array.isArray(\n    Enzyme.mount(React.createElement(MyComponent)).state('users')\n  ) === true &&\n    Enzyme.mount(React.createElement(MyComponent)).state('users').length === 6\n);"
        },
        {
          "text": "`MyComponent` should return a `div`, an `h1`, and then an unordered list containing `li` elements for every user whose online status is set to `true`.",
          "testCode": "(() => {\n  const comp = Enzyme.mount(React.createElement(MyComponent));\n  const users = (bool) => ({\n    users: [\n      { username: 'Jeff', online: bool },\n      { username: 'Alan', online: bool },\n      { username: 'Mary', online: bool },\n      { username: 'Jim', online: bool },\n      { username: 'Laura', online: bool }\n    ]\n  });\n  const result = () => comp.find('li').length;\n  const _1 = result();\n  const _2 = () => {\n    comp.setState(users(true));\n    return result();\n  };\n  const _3 = () => {\n    comp.setState(users(false));\n    return result();\n  };\n  const _4 = () => {\n    comp.setState({ users: [] });\n    return result();\n  };\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  assert(\n    comp.find('div').length === 1 &&\n      comp.find('h1').length === 1 &&\n      comp.find('ul').length === 1 &&\n      _1 === 4 &&\n      _2_val === 5 &&\n      _3_val === 0 &&\n      _4_val === 0\n  );\n})();"
        },
        {
          "text": "`MyComponent` should render `li` elements that contain the `username` of each online user.",
          "testCode": "(() => {\n  const comp = Enzyme.mount(React.createElement(MyComponent));\n  const users = (bool) => ({\n    users: [\n      { username: 'Jeff', online: bool },\n      { username: 'Alan', online: bool },\n      { username: 'Mary', online: bool },\n      { username: 'Jim', online: bool },\n      { username: 'Laura', online: bool }\n    ]\n  });\n  const ul = () => {\n    comp.setState(users(true));\n    return comp.find('ul').html();\n  };\n  const html = ul();\n  assert(\n    html ===\n      '<ul><li>Jeff</li><li>Alan</li><li>Mary</li><li>Jim</li><li>Laura</li></ul>'\n  );\n})();"
        },
        {
          "text": "Each list item element should have a unique `key` attribute.",
          "testCode": "assert(\n  (() => {\n    const ul = Enzyme.mount(React.createElement(MyComponent)).find('ul');\n    console.log(ul.debug());\n    const keys = new Set([\n      ul.childAt(0).key(),\n      ul.childAt(1).key(),\n      ul.childAt(2).key(),\n      ul.childAt(3).key()\n    ]);\n    return keys.size === 4;\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301416,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.filter-to-dynamically-filter-an-array.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403618a",
      "title": "Use Array.map() to Dynamically Render Elements",
      "challengeType": 6,
      "dashedName": "use-array-map-to-dynamically-render-elements",
      "description": "Conditional rendering is useful, but you may need your components to render an unknown number of elements. Often in reactive programming, a programmer has no way to know what the state of an application is until runtime, because so much depends on a user's interaction with that program. Programmers need to write their code to correctly handle that unknown state ahead of time. Using `Array.map()` in React illustrates this concept.\n\nFor example, you create a simple \"To Do List\" app. As the programmer, you have no way of knowing how many items a user might have on their list. You need to set up your component to dynamically render the correct number of list elements long before someone using the program decides that today is laundry day.",
      "instructions": "The code editor has most of the `MyToDoList` component set up. Some of this code should look familiar if you completed the controlled form challenge. You'll notice a `textarea` and a `button`, along with a couple of methods that track their states, but nothing is rendered to the page yet.\n\nInside the `constructor`, create a `this.state` object and define two states: `userInput` should be initialized as an empty string, and `toDoList` should be initialized as an empty array. Next, delete the `null` value in the `render()` method next to the `items` variable. In its place, map over the `toDoList` array stored in the component's internal state and dynamically render a `li` for each item. Try entering the string `eat, code, sleep, repeat` into the `textarea`, then click the button and see what happens.\n\n**Note:** You may know that all sibling child elements created by a mapping operation like this do need to be supplied with a unique `key` attribute. Don't worry, this is the topic of the next challenge.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n\n    // Change code above this line\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = null; // Change this line\n    return (\n      <div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder='Separate Items With Commas'\n        />\n        <br />\n        <button onClick={this.handleSubmit}>Create List</button>\n        <h1>My \"To Do\" List:</h1>\n        <ul>{items}</ul>\n      </div>\n    );\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toDoList: [],\n      userInput: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = this.state.toDoList.map((item, i) => {\n      return <li key={i}>{item}</li>;\n    });\n    return (\n      <div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder='Separate Items With Commas'\n        />\n        <br />\n        <button onClick={this.handleSubmit}>Create List</button>\n        <h1>My \"To Do\" List:</h1>\n        <ul>{items}</ul>\n      </div>\n    );\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "The MyToDoList component should exist and render to the page.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    return mockedComponent.find('MyToDoList').length === 1;\n  })()\n);"
        },
        {
          "text": "The first child of `MyToDoList` should be a `textarea` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    return (\n      mockedComponent.find('MyToDoList').children().childAt(0).type() ===\n      'textarea'\n    );\n  })()\n);"
        },
        {
          "text": "The second child of `MyToDoList` should be a `br` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    return (\n      mockedComponent.find('MyToDoList').children().childAt(1).type() === 'br'\n    );\n  })()\n);"
        },
        {
          "text": "The third child of `MyToDoList` should be a `button` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    return (\n      mockedComponent.find('MyToDoList').children().childAt(2).type() ===\n      'button'\n    );\n  })()\n);"
        },
        {
          "text": "The state of `MyToDoList` should be initialized with `toDoList` as an empty array.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    const initialState = mockedComponent.state();\n    return (\n      Array.isArray(initialState.toDoList) === true &&\n      initialState.toDoList.length === 0\n    );\n  })()\n);"
        },
        {
          "text": "The state of `MyToDoList` should be initialized with `userInput` as an empty string.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    const initialState = mockedComponent.state();\n    return (\n      typeof initialState.userInput === 'string' &&\n      initialState.userInput.length === 0\n    );\n  })()\n);"
        },
        {
          "text": "When the `Create List` button is clicked, the `MyToDoList` component should dynamically return an unordered list that contains a list item element for every item of a comma-separated list entered into the `textarea` element.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n  const simulateChange = (el, value) =>\n    el.simulate('change', { target: { value } });\n  const state_1 = () => {\n    return mockedComponent.find('ul').find('li');\n  };\n  const setInput = () => {\n    return simulateChange(\n      mockedComponent.find('textarea'),\n      'testA, testB, testC'\n    );\n  };\n  const click = () => {\n    return mockedComponent.find('button').simulate('click');\n  };\n  const state_2 = () => {\n    const nodes = mockedComponent.find('ul').find('li');\n    return { nodes, text: nodes.reduce((t, n) => t + n.text().trim(), '') };\n  };\n  const setInput_2 = () => {\n    return simulateChange(\n      mockedComponent.find('textarea'),\n      't1, t2, t3, t4, t5, t6'\n    );\n  };\n  const click_1 = () => {\n    return mockedComponent.find('button').simulate('click');\n  };\n  const state_3 = () => {\n    const nodes = mockedComponent.find('ul').find('li');\n    return { nodes, text: nodes.reduce((t, n) => t + n.text().trim(), '') };\n  };\n  const awaited_state_1 = state_1();\n  const awaited_setInput = setInput();\n  const awaited_click = click();\n  const awaited_state_2 = state_2();\n  const awaited_setInput_2 = setInput_2();\n  const awaited_click_1 = click_1();\n  const awaited_state_3 = state_3();\n  assert(\n    awaited_state_1.length === 0 &&\n      awaited_state_2.nodes.length === 3 &&\n      awaited_state_3.nodes.length === 6 &&\n      awaited_state_2.text === 'testAtestBtestC' &&\n      awaited_state_3.text === 't1t2t3t4t5t6'\n  );\n})();"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301417,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-array.map-to-dynamically-render-elements.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyToDoList />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403616b",
      "title": "Use Default Props",
      "challengeType": 6,
      "dashedName": "use-default-props",
      "description": "React also has an option to set default props. You can assign default props to a component as a property on the component itself and React assigns the default prop if necessary. This allows you to specify what a prop value should be if no value is explicitly provided. For example, if you declare `MyComponent.defaultProps = { location: 'San Francisco' }`, you have defined a location prop that's set to the string `San Francisco`, unless you specify otherwise. React assigns default props if props are undefined, but if you pass `null` as the value for a prop, it will remain `null`.",
      "instructions": "The code editor shows a `ShoppingCart` component. Define default props on this component which specify a prop `items` with a value of `0`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const ShoppingCart = (props) => {\n  return (\n    <div>\n      <h1>Shopping Cart Component</h1>\n    </div>\n  )\n};\n// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const ShoppingCart = (props) => {\n  return (\n    <div>\n      <h1>Shopping Cart Component</h1>\n    </div>\n  )\n};\n\n// Change code below this line\nShoppingCart.defaultProps = {\n  items: 0\n}"
        }
      ],
      "tests": [
        {
          "text": "The `ShoppingCart` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('ShoppingCart').length === 1;\n  })()\n);"
        },
        {
          "text": "The `ShoppingCart` component should have a default prop of `{ items: 0 }`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    mockedComponent.setProps({ items: undefined });\n    return mockedComponent.find('ShoppingCart').props().items === 0;\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301418,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-default-props.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<ShoppingCart />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403616d",
      "title": "Use PropTypes to Define the Props You Expect",
      "challengeType": 6,
      "dashedName": "use-proptypes-to-define-the-props-you-expect",
      "description": "React provides useful type-checking features to verify that components receive props of the correct type. For example, your application makes an API call to retrieve data that you expect to be in an array, which is then passed to a component as a prop. You can set `propTypes` on your component to require the data to be of type `array`. This will throw a useful warning when the data is of any other type.\n\nIt's considered a best practice to set `propTypes` when you know the type of a prop ahead of time. You can define a `propTypes` property for a component in the same way you defined `defaultProps`. Doing this will check that props of a given key are present with a given type. Here's an example to require the type `function` for a prop called `handleClick`:\n\n```js\nMyComponent.propTypes = { handleClick: PropTypes.func.isRequired }\n```\n\nIn the example above, the `PropTypes.func` part checks that `handleClick` is a function. Adding `isRequired` tells React that `handleClick` is a required property for that component. You will see a warning if that prop isn't provided. Also notice that `func` represents `function`. Among the seven JavaScript primitive types, `function` and `boolean` (written as `bool`) are the only two that use unusual spelling. In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element. Please refer to the <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">documentation</a> for all of the options.\n\n**Note:** As of React v15.5.0, `PropTypes` is imported independently from React, like this: `import PropTypes from 'prop-types';`",
      "instructions": "Define `propTypes` for the `Items` component to require `quantity` as a prop and verify that it is of type `number`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n};\n\n// Change code below this line\n\n// Change code above this line\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items />\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n};\n\n// Change code below this line\nItems.propTypes = {\n  quantity: PropTypes.number.isRequired\n};\n// Change code above this line\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items />\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `ShoppingCart` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('ShoppingCart').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Items` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('Items').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Items` component should include a `propTypes` check to require a value for `quantity` and ensure that its value is a number.",
          "testCode": "const noWhiteSpace = __helpers.removeWhiteSpace(code);\nassert(noWhiteSpace.includes('quantity:PropTypes.number.isRequired') && noWhiteSpace.includes('Items.propTypes='));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301419,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-proptypes-to-define-the-props-you-expect.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "jsx",
            "code": "var PropTypes = {\n  number: { isRequired: true }\n};"
          }
        ],
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<ShoppingCart />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036165",
      "title": "Use React to Render Nested Components",
      "challengeType": 6,
      "dashedName": "use-react-to-render-nested-components",
      "description": "The last challenge showed a simple way to compose two components, but there are many different ways you can compose components with React.\n\nComponent composition is one of React's powerful features. When you work with React, it is important to start thinking about your user interface in terms of components like the App example in the last challenge. You break down your UI into its basic building blocks, and those pieces become the components. This helps to separate the code responsible for the UI from the code responsible for handling your application logic. It can greatly simplify the development and maintenance of complex projects.",
      "instructions": "There are two functional components defined in the code editor, called `TypesOfFruit` and `Fruits`. Take the `TypesOfFruit` component and compose it, or *nest* it, within the `Fruits` component. Then take the `Fruits` component and nest it within the `TypesOfFood` component. The result should be a child component, nested within a parent component, which is nested within a parent component of its own!",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n        <TypesOfFruit />\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n        <Fruits />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `TypesOfFood` component should return a single `div` element.",
          "testCode": "assert(Enzyme.shallow(React.createElement(TypesOfFood)).type() === 'div');"
        },
        {
          "text": "The `TypesOfFood` component should return the `Fruits` component.",
          "testCode": "assert(\n  Enzyme.shallow(React.createElement(TypesOfFood)).props().children[1].type\n    .name === 'Fruits'\n);"
        },
        {
          "text": "The `Fruits` component should return the `TypesOfFruit` component.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(TypesOfFood)).find('h2').html() ===\n    '<h2>Fruits:</h2>'\n);"
        },
        {
          "text": "The `TypesOfFruit` component should return the `h2` and `ul` elements.",
          "testCode": "assert(\n  Enzyme.mount(React.createElement(TypesOfFood)).find('ul').text() ===\n    'ApplesBlueberriesStrawberriesBananas'\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301420,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-react-to-render-nested-components.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<TypesOfFood />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036176",
      "title": "Use State to Toggle an Element",
      "challengeType": 6,
      "dashedName": "use-state-to-toggle-an-element",
      "description": "Sometimes you might need to know the previous state when updating the state. However, state updates may be asynchronous - this means React may batch multiple `setState()` calls into a single update. This means you can't rely on the previous value of `this.state` or `this.props` when calculating the next value. So, you should not use code like this:\n\n```jsx\nthis.setState({\n  counter: this.state.counter + this.props.increment\n});\n```\n\nInstead, you should pass `setState` a function that allows you to access state and props. Using a function with `setState` guarantees you are working with the most current values of state and props. This means that the above should be rewritten as:\n\n```jsx\nthis.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n```\n\nYou can also use a form without `props` if you need only the `state`:\n\n```jsx\nthis.setState(state => ({\n  counter: state.counter + 1\n}));\n```\n\nNote that you have to wrap the object literal in parentheses, otherwise JavaScript thinks it's a block of code.",
      "instructions": "`MyComponent` has a `visibility` property which is initialized to `false`. The render method returns one view if the value of `visibility` is true, and a different view if it is false.\n\nCurrently, there is no way of updating the `visibility` property in the component's `state`. The value should toggle back and forth between true and false. There is a click handler on the button which triggers a class method called `toggleVisibility()`. Pass a function to `setState` to define this method so that the `state` of `visibility` toggles to the opposite value when the method is called. If `visibility` is `false`, the method sets it to `true`, and vice versa.\n\nFinally, click the button to see the conditional rendering of the component based on its `state`.\n\n**Hint:** Don't forget to bind the `this` keyword to the method in the `constructor`!",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: false\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: false\n    };\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n  }\n  toggleVisibility() {\n    this.setState(state => ({\n      visibility: !state.visibility\n    }));\n  }\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should return a `div` element which contains a `button`.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(MyComponent)).find('div').find('button')\n    .length,\n  1\n);"
        },
        {
          "text": "The state of `MyComponent` should initialize with a `visibility` property set to `false`.",
          "testCode": "assert.strictEqual(\n  Enzyme.mount(React.createElement(MyComponent)).state('visibility'),\n  false\n);"
        },
        {
          "text": "Clicking the button element should toggle the `visibility` property in state between `true` and `false` and conditionally render the `h1` element.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ visibility: false });\n    return mockedComponent.state('visibility');\n  };\n  const second = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent.state('visibility') && mockedComponent.find('h1').exists();\n  };\n  const third = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent.state('visibility') && mockedComponent.find('h1').exists();\n  };\n  const firstValue = first();\n  const secondValue = second();\n  const thirdValue = third();\n  assert(!firstValue && secondValue && !thirdValue);\n})();"
        },
        {
          "text": "An anonymous function should be passed to `setState`.",
          "testCode": "const paramRegex = '[a-zA-Z$_]\\\\w*(,[a-zA-Z$_]\\\\w*)?';\nassert(\n  new RegExp(\n    'this\\\\.setState\\\\((function\\\\(' +\n      paramRegex +\n      '\\\\){|([a-zA-Z$_]\\\\w*|\\\\(' +\n      paramRegex +\n      '\\\\))=>)'\n  ).test(__helpers.removeWhiteSpace(code))\n);"
        },
        {
          "text": "`this` should not be used inside `setState`",
          "testCode": "assert(!/this\\.setState\\([^}]*this/.test(code));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301421,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-state-to-toggle-an-element.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403617d",
      "title": "Use the Lifecycle Method componentDidMount",
      "challengeType": 6,
      "dashedName": "use-the-lifecycle-method-componentdidmount",
      "description": "Most web developers, at some point, need to call an API endpoint to retrieve data. If you're working with React, it's important to know where to perform this action.\n\nThe best practice with React is to place API calls or any calls to your server in the lifecycle method `componentDidMount()`. This method is called after a component is mounted to the DOM. Any calls to `setState()` here will trigger a re-rendering of your component. When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data.",
      "instructions": "There is a mock API call in `componentDidMount()`. It sets state after 2.5 seconds to simulate calling a server to retrieve data. This example requests the current total active users for a site. In the render method, render the value of `activeUsers` in the `h1` after the text `Active Users:`. Watch what happens in the preview, and feel free to change the timeout to see the different effects.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUsers: null\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        activeUsers: 1273\n      });\n    }, 2500);\n  }\n  render() {\n    return (\n      <div>\n        {/* Change code below this line */}\n        <h1>Active Users: </h1>\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUsers: null\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        activeUsers: 1273\n      });\n    }, 2500);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Active Users: {this.state.activeUsers}</h1>\n      </div>\n    );\n  }\n}"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should render a `div` element which wraps an `h1` tag.",
          "testCode": "assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return (\n      mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('h1').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "Component state should be updated with a timeout function in `componentDidMount`.",
          "testCode": "assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return new RegExp('setTimeout(.|\\n)+setState(.|\\n)+activeUsers').test(\n      String(mockedComponent.instance().componentDidMount)\n    );\n  })()\n);"
        },
        {
          "text": "The `h1` tag should render the `activeUsers` value from `MyComponent`'s state.",
          "testCode": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ activeUsers: 1237 });\n    return mockedComponent.find('h1').text();\n  };\n  const second = () => {\n    mockedComponent.setState({ activeUsers: 1000 });\n    return mockedComponent.find('h1').text();\n  };\n  assert(new RegExp('1237').test(first()) && new RegExp('1000').test(second()));\n})();"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301422,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-the-lifecycle-method-componentdidmount.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'));"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d403617c",
      "title": "Use the Lifecycle Method componentWillMount",
      "challengeType": 6,
      "dashedName": "use-the-lifecycle-method-componentwillmount",
      "description": "React components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. Here is a list of some of the main lifecycle methods: `componentWillMount()` `componentDidMount()` `shouldComponentUpdate()` `componentDidUpdate()` `componentWillUnmount()` The next several lessons will cover some of the basic use cases for these lifecycle methods.\n\n**Note:** The `componentWillMount` Lifecycle method will be deprecated in a future version of 16.X and removed in version 17. Learn more in this <a href=\"https://www.freecodecamp.org/news/how-to-safely-use-reacts-life-cycles-with-fiber-s-async-rendering-fd4469ebbd8f/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">article</a>",
      "instructions": "The `componentWillMount()` method is called before the `render()` method when a component is being mounted to the DOM. Log something to the console within `componentWillMount()` - you may want to have your browser console open to see the output.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return <div />\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    // Change code below this line\n    console.log('Component is mounting...');\n    // Change code above this line\n  }\n  render() {\n    return <div />\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`MyComponent` should render a `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('div').length === 1;\n  })()\n);"
        },
        {
          "text": "`console.log` should be called in `componentWillMount`.",
          "testCode": "assert(\n  (function () {\n    const lifecycle = React.createElement(MyComponent)\n      .type.prototype.componentWillMount.toString()\n      .replace(/ /g, '');\n    return lifecycle.includes('console.log(');\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301423,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\use-the-lifecycle-method-componentwillmount.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<MyComponent />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036168",
      "title": "Write a React Component from Scratch",
      "challengeType": 6,
      "dashedName": "write-a-react-component-from-scratch",
      "description": "Now that you've learned the basics of JSX and React components, it's time to write a component on your own. React components are the core building blocks of React applications so it's important to become very familiar with writing them. Remember, a typical React component is an ES6 `class` which extends `React.Component`. It has a render method that returns HTML (from JSX) or `null`. This is the basic form of a React component. Once you understand this well, you will be prepared to start building more complex React projects.",
      "instructions": "Define a class `MyComponent` that extends `React.Component`. Its render method should return a `div` that contains an `h1` tag with the text: `My First React Component!` in it. Use this text exactly, the case and punctuation matter. Make sure to call the constructor for your component, too.\n\nRender this component to the DOM using `ReactDOM.render()`. There is a `div` with `id='challenge-node'` available for you to use.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "// Change code below this line\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>My First React Component!</h1>\n      </div>\n    );\n  }\n};\n\nReactDOM.render(<MyComponent />, document.getElementById('challenge-node'));"
        }
      ],
      "tests": [
        {
          "text": "There should be a React component called `MyComponent`.",
          "testCode": "assert(__helpers.removeWhiteSpace(code).includes('classMyComponentextendsReact.Component{'));"
        },
        {
          "text": "`MyComponent` should contain an `h1` tag with text `My First React Component!` Case and punctuation matter.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('h1').text() === 'My First React Component!';\n  })()\n);"
        },
        {
          "text": "`MyComponent` should render to the DOM.",
          "testCode": "assert(document.getElementById('challenge-node').childNodes.length === 1);"
        },
        {
          "text": "`MyComponent` should have a constructor calling `super` with `props`.",
          "testCode": "assert(\n  MyComponent.toString().includes('MyComponent(props)') &&\n    MyComponent.toString().includes('_super.call(this, props)')\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301424,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\write-a-react-component-from-scratch.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036177",
      "title": "Write a Simple Counter",
      "challengeType": 6,
      "dashedName": "write-a-simple-counter",
      "description": "You can design a more complex stateful component by combining the concepts covered so far. These include initializing `state`, writing methods that set `state`, and assigning click handlers to trigger these methods.",
      "instructions": "The `Counter` component keeps track of a `count` value in `state`. There are two buttons which call methods `increment()` and `decrement()`. Write these methods so the counter value is incremented or decremented by 1 when the appropriate button is clicked. Also, create a `reset()` method so when the reset button is clicked, the count is set to 0.\n\n**Note:** Make sure you don't modify the `className`s of the buttons. Also, remember to add the necessary bindings for the newly-created methods in the constructor.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  this.increment = this.increment.bind(this);\n this.decrement = this.decrement.bind(this);\n this.reset = this.reset.bind(this);\n }\n  reset() {\n    this.setState({\n      count: 0\n    });\n  }\n  increment() {\n    this.setState(state => ({\n      count: state.count + 1\n    }));\n  }\n  decrement() {\n    this.setState(state => ({\n      count: state.count - 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`Counter` should return a `div` element which contains three buttons with text content in this order `Increment!`, `Decrement!`, `Reset`.",
          "testCode": "assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(Counter));\n    return (\n      mockedComponent.find('.inc').text() === 'Increment!' &&\n      mockedComponent.find('.dec').text() === 'Decrement!' &&\n      mockedComponent.find('.reset').text() === 'Reset'\n    );\n  })()\n);"
        },
        {
          "text": "The state of `Counter` should initialize with a `count` property set to `0`.",
          "testCode": "const mockedComponent = Enzyme.mount(React.createElement(Counter));\nassert(mockedComponent.find('h1').text() === 'Current Count: 0');"
        },
        {
          "text": "Clicking the increment button should increment the count by `1`.",
          "testCode": "const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.find('.inc').simulate('click');\nassert(mockedComponent.find('h1').text() === 'Current Count: 1');"
        },
        {
          "text": "Clicking the decrement button should decrement the count by `1`.",
          "testCode": "const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.find('.dec').simulate('click');\nassert(mockedComponent.find('h1').text() === 'Current Count: -1');"
        },
        {
          "text": "Clicking the reset button should reset the count to `0`.",
          "testCode": "const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.setState({ count: 5 });\nconst currentCountElement = mockedComponent.find('h1');\nassert(currentCountElement.text() === 'Current Count: 5');\nmockedComponent.find('.reset').simulate('click');\nassert(currentCountElement.text() === 'Current Count: 0');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301425,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react\\write-a-simple-counter.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<Counter />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react",
        "name": "React"
      }
    },
    {
      "id": "5a24c314108439a4d4036147",
      "title": "Connect Redux to React",
      "challengeType": 6,
      "dashedName": "connect-redux-to-react",
      "description": "Now that you've written both the `mapStateToProps()` and the `mapDispatchToProps()` functions, you can use them to map `state` and `dispatch` to the `props` of one of your React components. The `connect` method from React Redux can handle this task. This method takes two optional arguments, `mapStateToProps()` and `mapDispatchToProps()`. They are optional because you may have a component that only needs access to `state` but doesn't need to dispatch any actions, or vice versa.\n\nTo use this method, pass in the functions as arguments, and immediately call the result with your component. This syntax is a little unusual and looks like:\n\n```js\nconnect(mapStateToProps, mapDispatchToProps)(MyComponent)\n```\n\n**Note:** If you want to omit one of the arguments to the `connect` method, you pass `null` in its place.",
      "instructions": "The code editor has the `mapStateToProps()` and `mapDispatchToProps()` functions and a new React component called `Presentational`. Connect this component to Redux with the `connect` method from the `ReactRedux` global object, and call it immediately on the `Presentational` component. Assign the result to a new `const` called `ConnectedComponent` that represents the connected component. That's it, now you're connected to Redux! Try changing either of `connect`'s arguments to `null` and observe the test results.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const addMessage = (message) => {\n  return {\n    type: 'ADD',\n    message: message\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messages: state\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (message) => {\n      dispatch(addMessage(message));\n    }\n  }\n};\n\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <h3>This is a Presentational Component</h3>\n  }\n};\n\nconst connect = ReactRedux.connect;\n// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const addMessage = (message) => {\n  return {\n    type: 'ADD',\n    message: message\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messages: state\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (message) => {\n      dispatch(addMessage(message));\n    }\n  }\n};\n\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <h3>This is a Presentational Component</h3>\n  }\n};\n\nconst connect = ReactRedux.connect;\n// Change code below this line\n\nconst ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(Presentational);"
        }
      ],
      "tests": [
        {
          "text": "The `Presentational` component should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return mockedComponent.find('Presentational').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should receive a prop `messages` via `connect`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const props = mockedComponent.find('Presentational').props();\n    return props.messages === '__INITIAL__STATE__';\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should receive a prop `submitNewMessage` via `connect`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const props = mockedComponent.find('Presentational').props();\n    return typeof props.submitNewMessage === 'function';\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301426,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-react.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "const store = Redux.createStore(\n  (state = '__INITIAL__STATE__', action) => state\n);\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <ReactRedux.Provider store = {store}>\n        <ConnectedComponent/>\n      </ReactRedux.Provider>\n    );\n  }\n};\nReactDOM.render(<AppWrapper />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036148",
      "title": "Connect Redux to the Messages App",
      "challengeType": 6,
      "dashedName": "connect-redux-to-the-messages-app",
      "description": "Now that you understand how to use `connect` to connect React to Redux, you can apply what you've learned to your React component that handles messages.\n\nIn the last lesson, the component you connected to Redux was named `Presentational`, and this wasn't arbitrary. This term *generally* refers to React components that are not directly connected to Redux. They are simply responsible for the presentation of UI and do this as a function of the props they receive. By contrast, container components are connected to Redux. These are typically responsible for dispatching actions to the store and often pass store state to child components as props.",
      "instructions": "The code editor has all the code you've written in this section so far. The only change is that the React component is renamed to `Presentational`. Create a new component held in a constant called `Container` that uses `connect` to connect the `Presentational` component to Redux. Then, in the `AppWrapper`, render the React Redux `Provider` component. Pass `Provider` the Redux `store` as a prop and render `Container` as a child. Once everything is set up, you will see the messages app rendered to the page again.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message: message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\n// React-Redux:\nconst mapStateToProps = (state) => {\n  return { messages: state }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (newMessage) => {\n       dispatch(addMessage(newMessage))\n    }\n  }\n};\n\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\n// Define the Container component here:\n\n\nclass AppWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Complete the return statement:\n    return (null);\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message: message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n this.handleChange = this.handleChange.bind(this);\n this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\n// React-Redux:\nconst mapStateToProps = (state) => {\n  return { messages: state }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (newMessage) => {\n       dispatch(addMessage(newMessage))\n    }\n  }\n};\n\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n\nclass AppWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <Container/>\n      </Provider>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `AppWrapper` should render to the page.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return mockedComponent.find('AppWrapper').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Container` component should be wrapped by a `Provider`",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return mockedComponent.find(Provider).length === 1;\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should render to page.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return mockedComponent.find('Presentational').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should render an `h2`, `input`, `button`, and `ul` elements.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const PresentationalComponent = mockedComponent.find('Presentational');\n    return (\n      PresentationalComponent.find('div').length === 1 &&\n      PresentationalComponent.find('h2').length === 1 &&\n      PresentationalComponent.find('button').length === 1 &&\n      PresentationalComponent.find('ul').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should receive `messages` from the Redux store as a prop.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const PresentationalComponent = mockedComponent.find('Presentational');\n    const props = PresentationalComponent.props();\n    return Array.isArray(props.messages);\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should receive the `submitMessage` action creator as a prop.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const PresentationalComponent = mockedComponent.find('Presentational');\n    const props = PresentationalComponent.props();\n    return typeof props.submitNewMessage === 'function';\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301427,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\connect-redux-to-the-messages-app.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<AppWrapper />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036149",
      "title": "Extract Local State into Redux",
      "challengeType": 6,
      "dashedName": "extract-local-state-into-redux",
      "description": "You're almost done! Recall that you wrote all the Redux code so that Redux could control the state management of your React messages app. Now that Redux is connected, you need to extract the state management out of the `Presentational` component and into Redux. Currently, you have Redux connected, but you are handling the state locally within the `Presentational` component.",
      "instructions": "In the `Presentational` component, first, remove the `messages` property in the local `state`. These messages will be managed by Redux. Next, modify the `submitMessage()` method so that it dispatches `submitNewMessage()` from `this.props`, and pass in the current message input from local `state` as an argument. Because you removed `messages` from local state, remove the `messages` property from the call to `this.setState()` here as well. Finally, modify the `render()` method so that it maps over the messages received from `props` rather than `state`.\n\nOnce these changes are made, the app will continue to function the same, except Redux manages the state. This example also illustrates how a component may have local `state`: your component still tracks user input locally in its own `state`. You can see how Redux provides a useful state management framework on top of React. You achieved the same result using only React's local state at first, and this is usually possible with simple apps. However, as your apps become larger and more complex, so does your state management, and this is the problem Redux solves.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message: message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\n// Change code below this line\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => ({\n      input: '',\n      messages: state.messages.concat(state.input)\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n// Change code above this line\n\nconst mapStateToProps = (state) => {\n  return {messages: state}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (message) => {\n      dispatch(addMessage(message))\n    }\n  }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container/>\n      </Provider>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message: message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\n\n// Change code below this line\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    }\n this.handleChange = this.handleChange.bind(this);\n this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.props.submitNewMessage(this.state.input);\n    this.setState({\n      input: ''\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.props.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n// Change code above this line\n\nconst mapStateToProps = (state) => {\n  return {messages: state}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (message) => {\n      dispatch(addMessage(message))\n    }\n  }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container/>\n      </Provider>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `AppWrapper` should render to the page.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return mockedComponent.find('AppWrapper').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should render to page.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return mockedComponent.find('Presentational').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should render an `h2`, `input`, `button`, and `ul` elements.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const PresentationalComponent = mockedComponent.find('Presentational');\n    return (\n      PresentationalComponent.find('div').length === 1 &&\n      PresentationalComponent.find('h2').length === 1 &&\n      PresentationalComponent.find('button').length === 1 &&\n      PresentationalComponent.find('ul').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should receive `messages` from the Redux store as a prop.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const PresentationalComponent = mockedComponent.find('Presentational');\n    const props = PresentationalComponent.props();\n    return Array.isArray(props.messages);\n  })()\n);"
        },
        {
          "text": "The `Presentational` component should receive the `submitMessage` action creator as a prop.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const PresentationalComponent = mockedComponent.find('Presentational');\n    const props = PresentationalComponent.props();\n    return typeof props.submitNewMessage === 'function';\n  })()\n);"
        },
        {
          "text": "The state of the `Presentational` component should contain one property, `input`, which is initialized to an empty string.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    const PresentationalState = mockedComponent\n      .find('Presentational')\n      .instance().state;\n    return (\n      typeof PresentationalState.input === 'string' &&\n      Object.keys(PresentationalState).length === 1\n    );\n  })()\n);"
        },
        {
          "text": "Typing in the `input` element should update the state of the `Presentational` component.",
          "testCode": "async () => {\n  const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n  const testValue = '__MOCK__INPUT__';\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  let initialInput = mockedComponent.find('Presentational').find('input');\n  const changed = () => {\n    causeChange(mockedComponent, testValue);\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await changed();\n  const updatedInput = updated.find('Presentational').find('input');\n  assert(\n    initialInput.props().value === '' &&\n      updatedInput.props().value === '__MOCK__INPUT__'\n  );\n};"
        },
        {
          "text": "Dispatching the `submitMessage` on the `Presentational` component should update Redux store and clear the input in local state.",
          "testCode": "async () => {\n  const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\n  let beforeProps = mockedComponent.find('Presentational').props();\n  const testValue = '__TEST__EVENT__INPUT__';\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const changed = () => {\n    causeChange(mockedComponent, testValue);\n    return waitForIt(() => mockedComponent);\n  };\n  const clickButton = () => {\n    mockedComponent.find('button').simulate('click');\n    return waitForIt(() => mockedComponent);\n  };\n  const afterChange = await changed();\n  const afterChangeInput = afterChange.find('input').props().value;\n  const afterClick = await clickButton();\n  const afterProps = mockedComponent.find('Presentational').props();\n  assert(\n    beforeProps.messages.length === 0 &&\n      afterChangeInput === testValue &&\n      afterProps.messages.pop() === testValue &&\n      afterClick.find('input').props().value === ''\n  );\n};"
        },
        {
          "text": "The `Presentational` component should render the `messages` from the Redux store.",
          "testCode": "async () => {\n  const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\n  let beforeProps = mockedComponent.find('Presentational').props();\n  const testValue = '__TEST__EVENT__INPUT__';\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const changed = () => {\n    causeChange(mockedComponent, testValue);\n    return waitForIt(() => mockedComponent);\n  };\n  const clickButton = () => {\n    mockedComponent.find('button').simulate('click');\n    return waitForIt(() => mockedComponent);\n  };\n  const afterChange = await changed();\n  const afterChangeInput = afterChange.find('input').props().value;\n  const afterClick = await clickButton();\n  const afterProps = mockedComponent.find('Presentational').props();\n  assert(\n    beforeProps.messages.length === 0 &&\n      afterChangeInput === testValue &&\n      afterProps.messages.pop() === testValue &&\n      afterClick.find('input').props().value === '' &&\n      afterClick.find('ul').childAt(0).text() === testValue\n  );\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301428,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-local-state-into-redux.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<AppWrapper />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036143",
      "title": "Extract State Logic to Redux",
      "challengeType": 6,
      "dashedName": "extract-state-logic-to-redux",
      "description": "Now that you finished the React component, you need to move the logic it's performing locally in its `state` into Redux. This is the first step to connect the simple React app to Redux. The only functionality your app has is to add new messages from the user to an unordered list. The example is simple in order to demonstrate how React and Redux work together.",
      "instructions": "First, define an action type `ADD` and set it to a const `ADD`. Next, define an action creator `addMessage()` which creates the action to add a message. You'll need to pass a `message` to this action creator and include the message in the returned `action`.\n\nThen create a reducer called `messageReducer()` that handles the state for the messages. The initial state should equal an empty array. This reducer should add a message to the array of messages held in state, or return the current state. Finally, create your Redux store and pass it the reducer.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "// Define ADD, addMessage(), messageReducer(), and store here:"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);"
        }
      ],
      "tests": [
        {
          "text": "The const `ADD` should exist and hold a value equal to the string `ADD`",
          "testCode": "assert(ADD === 'ADD');"
        },
        {
          "text": "The action creator `addMessage` should return an object with `type` equal to `ADD` and `message` equal to the message that is passed in.",
          "testCode": "assert(\n  (function () {\n    const addAction = addMessage('__TEST__MESSAGE__');\n    return addAction.type === ADD && addAction.message === '__TEST__MESSAGE__';\n  })()\n);"
        },
        {
          "text": "`messageReducer` should be a function.",
          "testCode": "assert(typeof messageReducer === 'function');"
        },
        {
          "text": "The store should exist and have an initial state set to an empty array.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    return typeof store === 'object' && initialState.length === 0;\n  })()\n);"
        },
        {
          "text": "Dispatching `addMessage` against the store should immutably add a new message to the array of messages held in state.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    const isFrozen = DeepFreeze(initialState);\n    store.dispatch(addMessage('__A__TEST__MESSAGE'));\n    const addState = store.getState();\n    return isFrozen && addState[0] === '__A__TEST__MESSAGE';\n  })()\n);"
        },
        {
          "text": "The `messageReducer` should return the current state if called with any other actions.",
          "testCode": "assert(\n  (function () {\n    const addState = store.getState();\n    store.dispatch({ type: 'FAKE_ACTION' });\n    const testState = store.getState();\n    return addState === testState;\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301429,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\extract-state-logic-to-redux.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036141",
      "title": "Getting Started with React Redux",
      "challengeType": 6,
      "dashedName": "getting-started-with-react-redux",
      "description": "This series of challenges introduces how to use Redux with React. First, here's a review of some of the key principles of each technology. React is a view library that you provide with data, then it renders the view in an efficient, predictable way. Redux is a state management framework that you can use to simplify the management of your application's state. Typically, in a React Redux app, you create a single Redux store that manages the state of your entire app. Your React components subscribe to only the pieces of data in the store that are relevant to their role. Then, you dispatch actions directly from React components, which then trigger store updates.\n\nAlthough React components can manage their own state locally, when you have a complex app, it's generally better to keep the app state in a single location with Redux. There are exceptions when individual components may have local state specific only to them. Finally, because Redux is not designed to work with React out of the box, you need to use the `react-redux` package. It provides a way for you to pass Redux `state` and `dispatch` to your React components as `props`.\n\nOver the next few challenges, first, you'll create a simple React component which allows you to input new text messages. These are added to an array that's displayed in the view. This should be a nice review of what you learned in the React lessons. Next, you'll create a Redux store and actions that manage the state of the messages array. Finally, you'll use `react-redux` to connect the Redux store with your component, thereby extracting the local state into the Redux store.",
      "instructions": "Start with a `DisplayMessages` component. Add a constructor to this component and initialize it with a state that has two properties: `input`, that's set to an empty string, and `messages`, that's set to an empty array.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class DisplayMessages extends React.Component {\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    return <div />\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n  }\n  render() {\n    return <div/>\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `DisplayMessages` component should render an empty `div` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n    return mockedComponent.find('div').text() === '';\n  })()\n);"
        },
        {
          "text": "The `DisplayMessages` constructor should be called properly with `super`, passing in `props`.",
          "testCode": "assert(\n    (function () {\n      const noWhiteSpace = __helpers.removeWhiteSpace(code);\n      return (\n        noWhiteSpace.includes('constructor(props)') &&\n        noWhiteSpace.includes('super(props')\n      );\n    })()\n  );"
        },
        {
          "text": "The `DisplayMessages` component should have an initial state equal to `{input: \"\", messages: []}`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n    const initialState = mockedComponent.state();\n    return (\n      typeof initialState === 'object' &&\n      initialState.input === '' &&\n      Array.isArray(initialState.messages) &&\n      initialState.messages.length === 0\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301430,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\getting-started-with-react-redux.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<DisplayMessages />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036142",
      "title": "Manage State Locally First",
      "challengeType": 6,
      "dashedName": "manage-state-locally-first",
      "description": "Here you'll finish creating the `DisplayMessages` component.",
      "instructions": "First, in the `render()` method, have the component render an `input` element, `button` element, and `ul` element. When the `input` element changes, it should trigger a `handleChange()` method. Also, the `input` element should render the value of `input` that's in the component's state. The `button` element should trigger a `submitMessage()` method when it's clicked.\n\nSecond, write these two methods. The `handleChange()` method should update the `input` with what the user is typing. The `submitMessage()` method should concatenate the current message (stored in `input`) to the `messages` array in local state, and clear the value of the `input`.\n\nFinally, use the `ul` to map over the array of `messages` and render it to the screen as a list of `li` elements.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "class DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n  }\n  // Add handleChange() and submitMessage() methods here\n\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        { /* Render an input, button, and ul below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "class DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n this.handleChange = this.handleChange.bind(this);\n   this.submitMessage = this.submitMessage.bind(this);\n }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };  \n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The `DisplayMessages` component should initialize with a state equal to `{ input: \"\", messages: [] }`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n    const initialState = mockedComponent.state();\n    return (\n      typeof initialState === 'object' &&\n      initialState.input === '' &&\n      initialState.messages.length === 0\n    );\n  })()\n);"
        },
        {
          "text": "The `DisplayMessages` component should render a `div` containing an `h2` element, a `button` element, a `ul` element, and `li` elements as children.",
          "testCode": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const state = () => {\n    mockedComponent.setState({ messages: ['__TEST__MESSAGE'] });\n    return mockedComponent;\n  };\n  const updated = state();\n  assert(\n    updated.find('div').length === 1 &&\n      updated.find('h2').length === 1 &&\n      updated.find('button').length === 1 &&\n      updated.find('ul').length === 1 &&\n      updated.find('li').length > 0\n  );\n};"
        },
        {
          "text": "`.map` should be used on the `messages` array.",
          "testCode": "assert(code.match(/this\\.state\\.messages\\.map/g));"
        },
        {
          "text": "The `input` element should render the value of `input` in local state.",
          "testCode": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const testValue = '__TEST__EVENT__INPUT';\n  const changed = () => {\n    causeChange(mockedComponent, testValue);\n    return mockedComponent;\n  };\n  const updated = changed();\n  assert(updated.find('input').props().value === testValue);\n};"
        },
        {
          "text": "Calling the method `handleChange` should update the `input` value in state to the current input.",
          "testCode": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const initialState = mockedComponent.state();\n  const testMessage = '__TEST__EVENT__MESSAGE__';\n  const changed = () => {\n    causeChange(mockedComponent, testMessage);\n    return mockedComponent;\n  };\n  const afterInput = changed();\n  assert(\n    initialState.input === '' &&\n      afterInput.state().input === '__TEST__EVENT__MESSAGE__'\n  );\n};"
        },
        {
          "text": "Clicking the `Add message` button should call the method `submitMessage` which should add the current `input` to the `messages` array in state.",
          "testCode": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const initialState = mockedComponent.state();\n  const testMessage_1 = '__FIRST__MESSAGE__';\n  const firstChange = () => {\n    causeChange(mockedComponent, testMessage_1);\n    return mockedComponent;\n  };\n  const firstResult = firstChange();\n  const firstSubmit = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent;\n  };\n  const afterSubmit_1 = firstSubmit();\n  const submitState_1 = afterSubmit_1.state();\n  const testMessage_2 = '__SECOND__MESSAGE__';\n  const secondChange = () => {\n    causeChange(mockedComponent, testMessage_2);\n    return mockedComponent;\n  };\n  const secondResult = secondChange();\n  const secondSubmit = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent;\n  };\n  const afterSubmit_2 = secondSubmit();\n  const submitState_2 = afterSubmit_2.state();\n  assert(\n    initialState.messages.length === 0 &&\n      submitState_1.messages.length === 1 &&\n      submitState_2.messages.length === 2 &&\n      submitState_2.messages[1] === testMessage_2\n  );\n};"
        },
        {
          "text": "The `submitMessage` method should clear the current input.",
          "testCode": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const initialState = mockedComponent.state();\n  const testMessage = '__FIRST__MESSAGE__';\n  const firstChange = () => {\n    causeChange(mockedComponent, testMessage);\n    return mockedComponent;\n  };\n  const firstResult = firstChange();\n  const firstState = firstResult.state();\n  const firstSubmit = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent;\n  };\n  const afterSubmit = firstSubmit();\n  const submitState = afterSubmit.state();\n  assert(firstState.input === testMessage && submitState.input === '');\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301431,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\manage-state-locally-first.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<DisplayMessages />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036146",
      "title": "Map Dispatch to Props",
      "challengeType": 6,
      "dashedName": "map-dispatch-to-props",
      "description": "The `mapDispatchToProps()` function is used to provide specific action creators to your React components so they can dispatch actions against the Redux store. It's similar in structure to the `mapStateToProps()` function you wrote in the last challenge. It returns an object that maps dispatch actions to property names, which become component `props`. However, instead of returning a piece of `state`, each property returns a function that calls `dispatch` with an action creator and any relevant action data. You have access to this `dispatch` because it's passed in to `mapDispatchToProps()` as a parameter when you define the function, just like you passed `state` to `mapStateToProps()`. Behind the scenes, React Redux is using Redux's `store.dispatch()` to conduct these dispatches with `mapDispatchToProps()`. This is similar to how it uses `store.subscribe()` for components that are mapped to `state`.\n\nFor example, you have a `loginUser()` action creator that takes a `username` as an action payload. The object returned from `mapDispatchToProps()` for this action creator would look something like:\n\n```jsx\n{\n  submitLoginUser: function(username) {\n    dispatch(loginUser(username));\n  }\n}\n```",
      "instructions": "The code editor provides an action creator called `addMessage()`. Write the function `mapDispatchToProps()` that takes `dispatch` as an argument, then returns an object. The object should have a property `submitNewMessage` set to the dispatch function, which takes a parameter for the new message to add when it dispatches `addMessage()`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const addMessage = (message) => {\n  return {\n    type: 'ADD',\n    message: message\n  }\n};\n\n// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const addMessage = (message) => {\n  return {\n    type: 'ADD',\n    message: message\n  }\n};\n\n// Change code below this line\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: function(message) {\n      dispatch(addMessage(message));\n    }\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "`addMessage` should return an object with keys `type` and `message`.",
          "testCode": "assert(\n  (function () {\n    const addMessageTest = addMessage();\n    return (\n      addMessageTest.hasOwnProperty('type') &&\n      addMessageTest.hasOwnProperty('message')\n    );\n  })()\n);"
        },
        {
          "text": "`mapDispatchToProps` should be a function.",
          "testCode": "assert(typeof mapDispatchToProps === 'function');"
        },
        {
          "text": "`mapDispatchToProps` should return an object.",
          "testCode": "assert(typeof mapDispatchToProps() === 'object');"
        },
        {
          "text": "Dispatching `addMessage` with `submitNewMessage` from `mapDispatchToProps` should return a message to the dispatch function.",
          "testCode": "assert(\n  (function () {\n    let testAction;\n    const dispatch = (fn) => {\n      testAction = fn;\n    };\n    let dispatchFn = mapDispatchToProps(dispatch);\n    dispatchFn.submitNewMessage('__TEST__MESSAGE__');\n    return (\n      testAction.type === 'ADD' && testAction.message === '__TEST__MESSAGE__'\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301432,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\map-dispatch-to-props.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036145",
      "title": "Map State to Props",
      "challengeType": 6,
      "dashedName": "map-state-to-props",
      "description": "The `Provider` component allows you to provide `state` and `dispatch` to your React components, but you must specify exactly what state and actions you want. This way, you make sure that each component only has access to the state it needs. You accomplish this by creating two functions: `mapStateToProps()` and `mapDispatchToProps()`.\n\nIn these functions, you declare what pieces of state you want to have access to and which action creators you need to be able to dispatch. Once these functions are in place, you'll see how to use the React Redux `connect` method to connect them to your components in another challenge.\n\n**Note:** Behind the scenes, React Redux uses the `store.subscribe()` method to implement `mapStateToProps()`.",
      "instructions": "Create a function `mapStateToProps()`. This function should take `state` as an argument, then return an object which maps that state to specific property names. These properties will become accessible to your component via `props`. Since this example keeps the entire state of the app in a single array, you can pass that entire state to your component. Create a property `messages` in the object that's being returned, and set it to `state`.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "const state = [];\n\n// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "const state = [];\n\n// Change code below this line\n\nconst mapStateToProps = (state) => {\n  return {\n    messages: state\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "The const `state` should be an empty array.",
          "testCode": "assert(Array.isArray(state) && state.length === 0);"
        },
        {
          "text": "`mapStateToProps` should be a function.",
          "testCode": "assert(typeof mapStateToProps === 'function');"
        },
        {
          "text": "`mapStateToProps` should return an object.",
          "testCode": "assert(typeof mapStateToProps() === 'object');"
        },
        {
          "text": "Passing an array as state to `mapStateToProps` should return this array assigned to a key of `messages`.",
          "testCode": "assert(mapStateToProps(['messages']).messages.pop() === 'messages');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301433,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\map-state-to-props.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d403614a",
      "title": "Moving Forward From Here",
      "challengeType": 6,
      "dashedName": "moving-forward-from-here",
      "description": "Congratulations! You finished the lessons on React and Redux. There's one last item worth pointing out before you move on. Typically, you won't write React apps in a code editor like this. This challenge gives you a glimpse of what the syntax looks like if you're working with a file system on your own machine. The code should look similar, except for the use of `import` statements (these pull in all of the dependencies that have been provided for you in the challenges).\n\nFinally, writing React and Redux code generally requires some configuration. This can get complicated quickly. If you are interested in experimenting on your own machine, the <a href=\"https://www.freecodecamp.org/news/install-react-with-create-react-app/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Create React App</a> comes configured and ready to go.\n\nAlternatively, you can enable Babel as a JavaScript Preprocessor in CodePen, add React and ReactDOM as external JavaScript resources, and work there as well.",
      "instructions": "Log the message `'Now I know React and Redux!'` to the console.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "/*\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, connect } from 'react-redux'\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport rootReducer from './redux/reducers'\nimport App from './components/App'\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n*/\n\n// Only change code below this line"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "console.log('Now I know React and Redux!');"
        }
      ],
      "tests": [
        {
          "text": "The message `Now I know React and Redux!` should be logged to the console.",
          "testCode": "() =>\n  assert(\n    /console\\s*\\.\\s*log\\s*\\(\\s*('|\"|`)Now I know React and Redux!\\1\\s*\\)/.test(\n      code)\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301434,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\moving-forward-from-here.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036144",
      "title": "Use Provider to Connect Redux to React",
      "challengeType": 6,
      "dashedName": "use-provider-to-connect-redux-to-react",
      "description": "In the last challenge, you created a Redux store to handle the messages array and created an action for adding new messages. The next step is to provide React access to the Redux store and the actions it needs to dispatch updates. React Redux provides its `react-redux` package to help accomplish these tasks.\n\nReact Redux provides a small API with two key features: `Provider` and `connect`. Another challenge covers `connect`. The `Provider` is a wrapper component from React Redux that wraps your React app. This wrapper then allows you to access the Redux `store` and `dispatch` functions throughout your component tree. `Provider` takes two props, the Redux store and the child components of your app. Defining the `Provider` for an App component might look like this:\n\n```jsx\n<Provider store={store}>\n  <App/>\n</Provider>\n```",
      "instructions": "The code editor now shows all your Redux and React code from the past several challenges. It includes the Redux store, actions, and the `DisplayMessages` component. The only new piece is the `AppWrapper` component at the bottom. Use this top level component to render the `Provider` from `ReactRedux`, and pass the Redux store as a prop. Then render the `DisplayMessages` component as a child. Once you are finished, you should see your React component rendered to the page.\n\n**Note:** React Redux is available as a global variable here, so you can access the Provider with dot notation. The code in the editor takes advantage of this and sets it to a constant `Provider` for you to use in the `AppWrapper` render method.",
      "boilerplate": [
        {
          "language": "jsx",
          "code": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\n\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\n\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {  \n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\nconst Provider = ReactRedux.Provider;\n\nclass AppWrapper extends React.Component {\n  // Render the Provider below this line\n\n  // Change code above this line\n};"
        }
      ],
      "solution": [
        {
          "language": "jsx",
          "code": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\n\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n this.handleChange = this.handleChange.bind(this);\n this.submitMessage = this.submitMessage.bind(this);\n }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };  \n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\nconst Provider = ReactRedux.Provider;\n\nclass AppWrapper extends React.Component {\n  // Change code below this line\n  render() {\n    return (\n      <Provider store = {store}>\n        <DisplayMessages/>\n      </Provider>\n    );\n  }\n  // Change code above this line\n};"
        }
      ],
      "tests": [
        {
          "text": "The `AppWrapper` should render.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return mockedComponent.find('AppWrapper').length === 1;\n  })()\n);"
        },
        {
          "text": "The `Provider` wrapper component should have a prop of `store` passed to it, equal to the Redux store.",
          "testCode": "() =>\n  assert(\n    (function () {\n      const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n      return __helpers\n        .removeWhiteSpace(code)\n        .includes('<Providerstore={store}>');\n    })()\n  );"
        },
        {
          "text": "`DisplayMessages` should render as a child of `AppWrapper`.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return (\n      mockedComponent.find('AppWrapper').find('DisplayMessages').length === 1\n    );\n  })()\n);"
        },
        {
          "text": "The `DisplayMessages` component should render an `h2`, `input`, `button`, and `ul` element.",
          "testCode": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return (\n      mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('h2').length === 1 &&\n      mockedComponent.find('button').length === 1 &&\n      mockedComponent.find('ul').length === 1\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301435,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\react-and-redux\\use-provider-to-connect-redux-to-react.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "jsx",
            "code": "ReactDOM.render(<AppWrapper />, document.getElementById('root'))"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "react-and-redux",
        "name": "React And Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036154",
      "title": "Combine Multiple Reducers",
      "challengeType": 6,
      "dashedName": "combine-multiple-reducers",
      "description": "When the state of your app begins to grow more complex, it may be tempting to divide state into multiple pieces. Instead, remember the first principle of Redux: all app state is held in a single state object in the store. Therefore, Redux provides reducer composition as a solution for a complex state model. You define multiple reducers to handle different pieces of your application's state, then compose these reducers together into one root reducer. The root reducer is then passed into the Redux `createStore()` method.\n\nIn order to let us combine multiple reducers together, Redux provides the `combineReducers()` method. This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions. The name you give to the keys will be used by Redux as the name for the associated piece of state.\n\nTypically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way. For example, in a note-taking app with user authentication, one reducer could handle authentication while another handles the text and notes that the user is submitting. For such an application, we might write the `combineReducers()` method like this:\n\n```js\nconst rootReducer = Redux.combineReducers({\n  auth: authenticationReducer,\n  notes: notesReducer\n});\n```\n\nNow, the key `notes` will contain all of the state associated with our notes and handled by our `notesReducer`. This is how multiple reducers can be composed to manage more complex application state. In this example, the state held in the Redux store would then be a single object containing `auth` and `notes` properties.",
      "instructions": "There are `counterReducer()` and `authReducer()` functions provided in the code editor, along with a Redux store. Finish writing the `rootReducer()` function using the `Redux.combineReducers()` method. Assign `counterReducer` to a key called `count` and `authReducer` to a key called `auth`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst authReducer = (state = {authenticated: false}, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = // Define the root reducer here\n\nconst store = Redux.createStore(rootReducer);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst authReducer = (state = {authenticated: false}, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = Redux.combineReducers({\n  count: counterReducer,\n  auth: authReducer\n});\n\nconst store = Redux.createStore(rootReducer);"
        }
      ],
      "tests": [
        {
          "text": "The `counterReducer` should increment and decrement the `state`.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState().count;\n    store.dispatch({ type: INCREMENT });\n    store.dispatch({ type: INCREMENT });\n    const firstState = store.getState().count;\n    store.dispatch({ type: DECREMENT });\n    const secondState = store.getState().count;\n    return firstState === initialState + 2 && secondState === firstState - 1;\n  })()\n);"
        },
        {
          "text": "The `authReducer` should toggle the `state` of `authenticated` between `true` and `false`.",
          "testCode": "assert(\n  (function () {\n    store.dispatch({ type: LOGIN });\n    const loggedIn = store.getState().auth.authenticated;\n    store.dispatch({ type: LOGOUT });\n    const loggedOut = store.getState().auth.authenticated;\n    return loggedIn === true && loggedOut === false;\n  })()\n);"
        },
        {
          "text": "The store `state` should have two keys: `count`, which holds a number, and `auth`, which holds an object. The `auth` object should have a property of `authenticated`, which holds a boolean.",
          "testCode": "assert(\n  (function () {\n    const state = store.getState();\n    return (\n      typeof state.auth === 'object' &&\n      typeof state.auth.authenticated === 'boolean' &&\n      typeof state.count === 'number'\n    );\n  })()\n);"
        },
        {
          "text": "The `rootReducer` should be a function that combines the `counterReducer` and the `authReducer`.",
          "testCode": "assert(\n    (function () {\n      const noWhiteSpace = __helpers.removeWhiteSpace(code);\n      return (\n        typeof rootReducer === 'function' &&\n        noWhiteSpace.includes('Redux.combineReducers')\n      );\n    })()\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301436,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\combine-multiple-reducers.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d403615b",
      "title": "Copy an Object with Object.assign",
      "challengeType": 6,
      "dashedName": "copy-an-object-with-object-assign",
      "description": "The last several challenges worked with arrays, but there are ways to help enforce state immutability when state is an `object`, too. A useful tool for handling objects is the `Object.assign()` utility. `Object.assign()` takes a target object and source objects and maps properties from the source objects to the target object. Any matching properties are overwritten by properties in the source objects. This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy. Here's an example:\n\n```js\nconst newObject = Object.assign({}, obj1, obj2);\n```\n\nThis creates `newObject` as a new `object`, which contains the properties that currently exist in `obj1` and `obj2`.",
      "instructions": "The Redux state and actions were modified to handle an `object` for the `state`. Edit the code to return a new `state` object for actions with type `ONLINE`, which set the `status` property to the string `online`. Try to use `Object.assign()` to complete the challenge.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      return Object.assign({}, state, {\n        status: 'online'\n      });\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);"
        }
      ],
      "tests": [
        {
          "text": "The Redux store should exist and initialize with a state that is equivalent to the `defaultState` object declared on line 1.",
          "testCode": "const expectedState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\nconst initialState = store.getState();\nassert.deepEqual(expectedState, initialState);"
        },
        {
          "text": "`wakeUp` and `immutableReducer` both should be functions.",
          "testCode": "assert(typeof wakeUp === 'function' && typeof immutableReducer === 'function');"
        },
        {
          "text": "Dispatching an action of type `ONLINE` should update the property `status` in state to `online` and should NOT mutate state.\n\n```js\n\nconst initialState = store.getState();\nconst isFrozen = !!DeepFreeze(initialState);\nstore.dispatch({ type: 'ONLINE' });\nconst finalState = store.getState();\nconst expectedState = {\n  user: 'CamperBot',\n  status: 'online',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\nassert(isFrozen);\nassert.deepEqual(finalState, expectedState);\n```\n\n`Object.assign` should be used to return new state.",
          "testCode": "assert(code.includes('Object.assign'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301437,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\copy-an-object-with-object.assign.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d403614b",
      "title": "Create a Redux Store",
      "challengeType": 6,
      "dashedName": "create-a-redux-store",
      "description": "Redux is a state management framework that can be used with a number of different web technologies, including React.\n\nIn Redux, there is a single state object that's responsible for the entire state of your application. This means if you had a React app with ten components, and each component had its own local state, the entire state of your app would be defined by a single state object housed in the Redux `store`. This is the first important principle to understand when learning Redux: the Redux store is the single source of truth when it comes to application state.\n\nThis also means that any time any piece of your app wants to update state, it **must** do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app.",
      "instructions": "The Redux `store` is an object which holds and manages application `state`. There is a method called `createStore()` on the Redux object, which you use to create the Redux `store`. This method takes a `reducer` function as a required argument. The `reducer` function is covered in a later challenge, and is already defined for you in the code editor. It simply takes `state` as an argument and returns `state`.\n\nDeclare a `store` variable and assign it to the `createStore()` method, passing in the `reducer` as an argument.\n\n**Note:** The code in the editor uses ES6 default argument syntax to initialize this state to hold a value of `5`. If you're not familiar with default arguments, you can refer to the <a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">ES6 section in the Curriculum</a> which covers this topic.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const reducer = (state = 5) => {\n  return state;\n}\n\n// Redux methods are available from a Redux object\n// For example: Redux.createStore()\n// Define the store here:"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const reducer = (state = 5) => {\n  return state;\n}\n\nconst store = Redux.createStore(reducer);"
        }
      ],
      "tests": [
        {
          "text": "The Redux store should exist.",
          "testCode": "assert(typeof store.getState === 'function');"
        },
        {
          "text": "The Redux store should have a value of 5 for the state.",
          "testCode": "assert(store.getState() === 5);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301439,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\create-a-redux-store.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d403614d",
      "title": "Define a Redux Action",
      "challengeType": 6,
      "dashedName": "define-a-redux-action",
      "description": "Since Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in. While the data is optional, actions must carry a `type` property that specifies the 'type' of action that occurred.\n\nThink of Redux actions as messengers that deliver information about events happening in your app to the Redux store. The store then conducts the business of updating state based on the action that occurred.",
      "instructions": "Writing a Redux action is as simple as declaring an object with a type property. Declare an object `action` and give it a property `type` set to the string `'LOGIN'`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "// Define an action here:"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const action = {\n  type: 'LOGIN'\n}"
        }
      ],
      "tests": [
        {
          "text": "An `action` object should exist.",
          "testCode": "assert(\n  (function () {\n    return typeof action === 'object';\n  })()\n);"
        },
        {
          "text": "The `action` object should have a key property `type` with value `LOGIN`.",
          "testCode": "assert(\n  (function () {\n    return action.type === 'LOGIN';\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301440,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\define-a-redux-action.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d403614e",
      "title": "Define an Action Creator",
      "challengeType": 6,
      "dashedName": "define-an-action-creator",
      "description": "After creating an action, the next step is sending the action to the Redux store so it can update its state. In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events.",
      "instructions": "Define a function named `actionCreator()` that returns the `action` object when called.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const action = {\n  type: 'LOGIN'\n}\n// Define an action creator here:"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const action = {\n  type: 'LOGIN'\n}\nconst actionCreator = () => {\n  return action;\n};"
        }
      ],
      "tests": [
        {
          "text": "The function `actionCreator` should exist.",
          "testCode": "assert(typeof actionCreator === 'function');"
        },
        {
          "text": "Running the `actionCreator` function should return the `action` object.",
          "testCode": "assert(typeof action === 'object');"
        },
        {
          "text": "The returned `action` should have a key property `type` with value `LOGIN`.",
          "testCode": "assert(action.type === 'LOGIN');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301441,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\define-an-action-creator.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d403614f",
      "title": "Dispatch an Action Event",
      "challengeType": 6,
      "dashedName": "dispatch-an-action-event",
      "description": "`dispatch` method is what you use to dispatch actions to the Redux store. Calling `store.dispatch()` and passing the value returned from an action creator sends an action back to the store.\n\nRecall that action creators return an object with a type property that specifies the type of action that has occurred. Then the method dispatches an action object to the Redux store. Based on the previous challenge's example, the following lines are equivalent, and both dispatch the action of type `LOGIN`:\n\n```js\nstore.dispatch(actionCreator());\nstore.dispatch({ type: 'LOGIN' });\n```",
      "instructions": "The Redux store in the code editor has an initialized state that's an object containing a `login` property currently set to `false`. There's also an action creator called `loginAction()` which returns an action of type `LOGIN`. Dispatch the `LOGIN` action to the Redux store by calling the `dispatch` method, and pass in the action created by `loginAction()`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const store = Redux.createStore(\n  (state = {login: false}) => state\n);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\n// Dispatch the action here:"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const store = Redux.createStore(\n  (state = {login: false}) => state\n);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nstore.dispatch(loginAction());"
        }
      ],
      "tests": [
        {
          "text": "Calling the function `loginAction` should return an object with `type` property set to the string `LOGIN`.",
          "testCode": "assert(loginAction().type === 'LOGIN');"
        },
        {
          "text": "The store should be initialized with an object with property `login` set to `false`.",
          "testCode": "assert(store.getState().login === false);"
        },
        {
          "text": "The `store.dispatch()` method should be used to dispatch an action of type `LOGIN`.",
          "testCode": "assert(\n    (function () {\n      let noWhiteSpace = code.replace(/\\s/g, '');\n      return (\n        noWhiteSpace.includes('store.dispatch(loginAction())') ||\n        noWhiteSpace.includes(\"store.dispatch({type: 'LOGIN'})\") === true\n      );\n    })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301442,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\dispatch-an-action-event.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d403614c",
      "title": "Get State from the Redux Store",
      "challengeType": 6,
      "dashedName": "get-state-from-the-redux-store",
      "description": "The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current `state` held in the Redux store object with the `getState()` method.",
      "instructions": "The code from the previous challenge is re-written more concisely in the code editor. Use `store.getState()` to retrieve the `state` from the `store`, and assign this to a new variable `currentState`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const store = Redux.createStore(\n  (state = 5) => state\n);\n\n// Change code below this line"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const store = Redux.createStore(\n  (state = 5) => state\n);\n\n// Change code below this line\nconst currentState = store.getState();"
        }
      ],
      "tests": [
        {
          "text": "The Redux store should have a value of 5 for the initial state.",
          "testCode": "assert(store.getState() === 5);"
        },
        {
          "text": "A variable `currentState` should exist and should be assigned the current state of the Redux store.",
          "testCode": "assert(currentState === 5 && code.includes('store.getState()'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301443,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\get-state-from-the-redux-store.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036150",
      "title": "Handle an Action in the Store",
      "challengeType": 6,
      "dashedName": "handle-an-action-in-the-store",
      "description": "After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a `reducer` function. Reducers in Redux are responsible for the state modifications that take place in response to actions. A `reducer` takes `state` and `action` as arguments, and it always returns a new `state`. It is important to see that this is the **only** role of the reducer. It has no side effects — it never calls an API endpoint and it never has any hidden surprises. The reducer is simply a pure function that takes state and action, then returns new state.\n\nAnother key principle in Redux is that `state` is read-only. In other words, the `reducer` function must **always** return a new copy of `state` and never modify state directly. Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions. You'll practice this in later challenges.",
      "instructions": "The code editor has the previous example as well as the start of a `reducer` function for you. Fill in the body of the `reducer` function so that if it receives an action of type `'LOGIN'` it returns a state object with `login` set to `true`. Otherwise, it returns the current `state`. Note that the current `state` and the dispatched `action` are passed to the reducer, so you can access the action's type directly with `action.type`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const defaultState = {\n  login: false\n};\n\nconst reducer = (state = defaultState, action) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(reducer);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const defaultState = {\n  login: false\n};\n\nconst reducer = (state = defaultState, action) => {\n\n  if (action.type === 'LOGIN') {\n    return {login: true}\n  }\n\n  else {\n    return state\n  }\n\n};\n\nconst store = Redux.createStore(reducer);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "Calling the function `loginAction` should return an object with type property set to the string `LOGIN`.",
          "testCode": "assert(loginAction().type === 'LOGIN');"
        },
        {
          "text": "The store should be initialized with an object with property `login` set to `false`.",
          "testCode": "assert(store.getState().login === false);"
        },
        {
          "text": "Dispatching `loginAction` should update the `login` property in the store state to `true`.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(loginAction());\n    const afterState = store.getState();\n    return initialState.login === false && afterState.login === true;\n  })()\n);"
        },
        {
          "text": "If the action is not of type `LOGIN`, the store should return the current state.",
          "testCode": "assert(\n  (function () {\n    store.dispatch({ type: '__TEST__ACTION__' });\n    let afterTest = store.getState();\n    return typeof afterTest === 'object' && afterTest.hasOwnProperty('login');\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301444,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\handle-an-action-in-the-store.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036158",
      "title": "Never Mutate State",
      "challengeType": 6,
      "dashedName": "never-mutate-state",
      "description": "These final challenges describe several methods of enforcing the key principle of state immutability in Redux. Immutable state means that you never modify state directly, instead, you return a new copy of state.\n\nIf you took a snapshot of the state of a Redux app over time, you would see something like `state 1`, `state 2`, `state 3`,`state 4`, `...` and so on where each state may be similar to the last, but each is a distinct piece of data. This immutability, in fact, is what provides such features as time-travel debugging that you may have heard about.\n\nRedux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer. Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, whether it is a `string`, `number`, `array`, or `object`. Note that strings and numbers are primitive values and are immutable by nature. In other words, 3 is always 3. You cannot change the value of the number 3. An `array` or `object`, however, is mutable. In practice, your state will probably consist of an `array` or `object`, as these are useful data structures for representing many types of information.",
      "instructions": "There is a `store` and `reducer` in the code editor for managing to-do items. Finish writing the `ADD_TO_DO` case in the reducer to append a new to-do to the state. There are a few ways to accomplish this with standard JavaScript or ES6. See if you can find a way to return a new array with the item from `action.todo` appended to the end.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const ADD_TO_DO = 'ADD_TO_DO';\n\n// A list of strings representing tasks to do:\nconst todos = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n];\n\nconst immutableReducer = (state = todos, action) => {\n  switch(action.type) {\n    case ADD_TO_DO:\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: ADD_TO_DO,\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const ADD_TO_DO = 'ADD_TO_DO';\n\nconst todos = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n];\n\nconst immutableReducer = (state = todos, action) => {\n  switch(action.type) {\n    case ADD_TO_DO:\n      return state.concat(action.todo);\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: ADD_TO_DO,\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"
        }
      ],
      "tests": [
        {
          "text": "The Redux store should exist and initialize with a state equal to the `todos` array in the code editor.",
          "testCode": "assert(\n  (function () {\n    const todos = [\n      'Go to the store',\n      'Clean the house',\n      'Cook dinner',\n      'Learn to code'\n    ];\n    const initialState = store.getState();\n    return (\n      Array.isArray(initialState) && initialState.join(',') === todos.join(',')\n    );\n  })()\n);"
        },
        {
          "text": "`addToDo` and `immutableReducer` both should be functions.",
          "testCode": "assert(typeof addToDo === 'function' && typeof immutableReducer === 'function');"
        },
        {
          "text": "Dispatching an action of type `ADD_TO_DO` on the Redux store should add a `todo` item and should NOT mutate state.",
          "testCode": "const initialState = store.getState();\nconst isFrozen = !!DeepFreeze(initialState);\nstore.dispatch(addToDo('__TEST__TO__DO__'));\nconst finalState = store.getState();\nconst expectedState = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n  '__TEST__TO__DO__'\n];\nassert(isFrozen);\nassert.deepEqual(finalState, expectedState);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301445,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\never-mutate-state.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036153",
      "title": "Register a Store Listener",
      "challengeType": 6,
      "dashedName": "register-a-store-listener",
      "description": "Another method you have access to on the Redux `store` object is `store.subscribe()`. This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.",
      "instructions": "Write a callback function that increments the global variable `count` every time the store receives an action, and pass this function in to the `store.subscribe()` method. You'll see that `store.dispatch()` is called three times in a row, each time directly passing in an action object. Watch the console output between the action dispatches to see the updates take place.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n\n// Global count variable:\nlet count = 0;\n\n// Change code below this line\n\n// Change code above this line\n\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n let count = 0;\n// Change code below this line\n\nstore.subscribe( () =>\n {\n count++;\n }\n);\n\n// Change code above this line\n\nstore.dispatch({type: ADD});\nstore.dispatch({type: ADD});\nstore.dispatch({type: ADD});"
        }
      ],
      "tests": [
        {
          "text": "Dispatching the `ADD` action on the store should increment the state by `1`.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch({ type: 'ADD' });\n    const newState = store.getState();\n    return newState === initialState + 1;\n  })()\n);"
        },
        {
          "text": "There should be a listener function subscribed to the store using `store.subscribe`.",
          "testCode": "assert.match(code, /store\\s*\\.\\s*subscribe\\(/gm);"
        },
        {
          "text": "The `store.subscribe` should receive a function.",
          "testCode": "assert.match(code, /(\\s*function\\s*)|(\\s*\\(\\s*\\)\\s*=>)/gm);"
        },
        {
          "text": "The function passed to `store.subscribe` should not be called.",
          "testCode": "assert.notMatch(code, /store\\.subscribe\\(.+\\(\\)\\)/);"
        },
        {
          "text": "The callback to `store.subscribe` should also increment the global `count` variable as the store is updated.",
          "testCode": "assert.strictEqual(store.getState(), count);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301446,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\register-a-store-listener.md"
      },
      "additionalCode": {
        "beforeUserCode": [
          {
            "language": "js",
            "code": "count = 0;"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d403615a",
      "title": "Remove an Item from an Array",
      "challengeType": 6,
      "dashedName": "remove-an-item-from-an-array",
      "description": "Time to practice removing items from an array. The spread operator can be used here as well. Other useful JavaScript methods include `slice()` and `concat()`.",
      "instructions": "The reducer and action creator were modified to remove an item from an array based on the index of the item. Finish writing the reducer so a new state array is returned with the item at the specific index removed.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst removeItem = (index) => {\n  return {\n    type: 'REMOVE_ITEM',\n    index\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      return [\n        ...state.slice(0, action.index),\n        ...state.slice(action.index + 1)\n      ];\n    default:\n      return state;\n  }\n};\n\nconst removeItem = (index) => {\n  return {\n    type: 'REMOVE_ITEM',\n    index\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"
        }
      ],
      "tests": [
        {
          "text": "The Redux store should exist and initialize with a state equal to `[0,1,2,3,4,5]`",
          "testCode": "const initialState = store.getState();\nassert.isArray(initialState) \nassert.deepEqual(initialState, [0, 1, 2, 3, 4, 5])"
        },
        {
          "text": "`removeItem` and `immutableReducer` both should be functions.",
          "testCode": "assert(\n  typeof removeItem === 'function' && typeof immutableReducer === 'function'\n);"
        },
        {
          "text": "Dispatching the `removeItem` action creator should remove items from the state and should NOT mutate state.\n\n```js\nconst initialState = store.getState();\nconst isFrozen = !!DeepFreeze(initialState);\nstore.dispatch(removeItem(3));\nconst state_1 = store.getState();\nstore.dispatch(removeItem(2));\nconst state_2 = store.getState();\nstore.dispatch(removeItem(0));\nstore.dispatch(removeItem(0));\nstore.dispatch(removeItem(0));\nconst state_3 = store.getState();\n\nassert(isFrozen)\nassert.deepEqual(state_1, [0, 1, 2, 4, 5]) \nassert.deepEqual(state_2, [0, 1, 4, 5]) \nassert.deepEqual(state_3, [5])\n\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301447,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\remove-an-item-from-an-array.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036155",
      "title": "Send Action Data to the Store",
      "challengeType": 6,
      "dashedName": "send-action-data-to-the-store",
      "description": "By now you've learned how to dispatch actions to the Redux store, but so far these actions have not contained any information other than a `type`. You can also send specific data along with your actions. In fact, this is very common because actions usually originate from some user interaction and tend to carry some data with them. The Redux store often needs to know about this data.",
      "instructions": "There's a basic `notesReducer()` and an `addNoteText()` action creator defined in the code editor. Finish the body of the `addNoteText()` function so that it returns an `action` object. The object should include a `type` property with a value of `ADD_NOTE`, and also a `text` property set to the `note` data that's passed into the action creator. When you call the action creator, you'll pass in specific note information that you can access for the object.\n\nNext, finish writing the `switch` statement in the `notesReducer()`. You need to add a case that handles the `addNoteText()` actions. This case should be triggered whenever there is an action of type `ADD_NOTE` and it should return the `text` property on the incoming `action` as the new `state`.\n\nThe action is dispatched at the bottom of the code. Once you're finished, run the code and watch the console. That's all it takes to send action-specific data to the store and use it when you update store `state`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const ADD_NOTE = 'ADD_NOTE';\n\nconst notesReducer = (state = 'Initial State', action) => {\n  switch(action.type) {\n    // Change code below this line\n\n    // Change code above this line\n    default:\n      return state;\n  }\n};\n\nconst addNoteText = (note) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(notesReducer);\n\nconsole.log(store.getState());\nstore.dispatch(addNoteText('Hello!'));\nconsole.log(store.getState());"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const ADD_NOTE = 'ADD_NOTE';\n\nconst notesReducer = (state = 'Initial State', action) => {\n  switch(action.type) {\n    // Change code below this line\n    case ADD_NOTE:\n      return action.text;\n    // Change code above this line\n    default:\n      return state;\n  }\n};\n\nconst addNoteText = (note) => {\n  // Change code below this line\n  return {\n    type: ADD_NOTE,\n    text: note\n  }\n  // Change code above this line\n};\n\nconst store = Redux.createStore(notesReducer);\n\nconsole.log(store.getState());\nstore.dispatch(addNoteText('Hello Redux!'));\nconsole.log(store.getState());"
        }
      ],
      "tests": [
        {
          "text": "The action creator `addNoteText` should return an object with keys `type` and `text`.",
          "testCode": "assert(\n  (function () {\n    const addNoteFn = addNoteText('__TEST__NOTE');\n    return addNoteFn.type === ADD_NOTE && addNoteFn.text === '__TEST__NOTE';\n  })()\n);"
        },
        {
          "text": "Dispatching an action of type `ADD_NOTE` with the `addNoteText` action creator should update the `state` to the string passed to the action creator.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(addNoteText('__TEST__NOTE'));\n    const newState = store.getState();\n    return initialState !== newState && newState === '__TEST__NOTE';\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301448,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\send-action-data-to-the-store.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036151",
      "title": "Use a Switch Statement to Handle Multiple Actions",
      "challengeType": 6,
      "dashedName": "use-a-switch-statement-to-handle-multiple-actions",
      "description": "You can tell the Redux store how to handle multiple action types. Say you are managing user authentication in your Redux store. You want to have a state representation for when users are logged in and when they are logged out. You represent this with a single state object with the property `authenticated`. You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves.",
      "instructions": "The code editor has a store, actions, and action creators set up for you. Fill in the `reducer` function to handle multiple authentication actions. Use a JavaScript `switch` statement in the `reducer` to respond to different action events. This is a standard pattern in writing Redux reducers. The switch statement should switch over `action.type` and return the appropriate authentication state.\n\n**Note:** At this point, don't worry about state immutability, since it is small and simple in this example. For each action, you can return a new object — for example, `{authenticated: true}`. Also, don't forget to write a `default` case in your switch statement that returns the current `state`. This is important because once your app has multiple reducers, they are all run any time an action dispatch is made, even when the action isn't related to that reducer. In such a case, you want to make sure that you return the current `state`.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case 'LOGIN':\n      return {\n        authenticated: true\n      }\n\n    case 'LOGOUT':\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "Calling the function `loginUser` should return an object with type property set to the string `LOGIN`.",
          "testCode": "assert(loginUser().type === 'LOGIN');"
        },
        {
          "text": "Calling the function `logoutUser` should return an object with type property set to the string `LOGOUT`.",
          "testCode": "assert(logoutUser().type === 'LOGOUT');"
        },
        {
          "text": "The store should be initialized with an object with an `authenticated` property set to `false`.",
          "testCode": "assert(store.getState().authenticated === false);"
        },
        {
          "text": "Dispatching `loginUser` should update the `authenticated` property in the store state to `true`.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(loginUser());\n    const afterLogin = store.getState();\n    return (\n      initialState.authenticated === false && afterLogin.authenticated === true\n    );\n  })()\n);"
        },
        {
          "text": "Dispatching `logoutUser` should update the `authenticated` property in the store state to `false`.",
          "testCode": "assert(\n  (function () {\n    store.dispatch(loginUser());\n    const loggedIn = store.getState();\n    store.dispatch(logoutUser());\n    const afterLogout = store.getState();\n    return (\n      loggedIn.authenticated === true && afterLogout.authenticated === false\n    );\n  })()\n);"
        },
        {
          "text": "The `authReducer` function should handle multiple action types with a `switch` statement.",
          "testCode": "assert(\n    code.toString().includes('switch') &&\n      code.toString().includes('case') &&\n      code.toString().includes('default')\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301449,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-a-switch-statement-to-handle-multiple-actions.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036152",
      "title": "Use const for Action Types",
      "challengeType": 6,
      "dashedName": "use-const-for-action-types",
      "description": "A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you're working with to write the action types as `const` declarations.",
      "instructions": "Declare `LOGIN` and `LOGOUT` as `const` values and assign them to the strings `'LOGIN'` and `'LOGOUT'`, respectively. Then, edit the `authReducer()` and the action creators to reference these constants instead of string values.\n\n**Note:** It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n    case 'LOGIN': \n      return {\n        authenticated: true\n      }\n    case 'LOGOUT': \n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: LOGIN\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: LOGOUT\n  }\n};"
        }
      ],
      "tests": [
        {
          "text": "Calling the function `loginUser` should return an object with `type` property set to the string `LOGIN`.",
          "testCode": "assert(loginUser().type === 'LOGIN');"
        },
        {
          "text": "Calling the function `logoutUser` should return an object with `type` property set to the string `LOGOUT`.",
          "testCode": "assert(logoutUser().type === 'LOGOUT');"
        },
        {
          "text": "The store should be initialized with an object with property `login` set to `false`.",
          "testCode": "assert(store.getState().authenticated === false);"
        },
        {
          "text": "Dispatching `loginUser` should update the `login` property in the store state to `true`.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(loginUser());\n    const afterLogin = store.getState();\n    return (\n      initialState.authenticated === false && afterLogin.authenticated === true\n    );\n  })()\n);"
        },
        {
          "text": "Dispatching `logoutUser` should update the `login` property in the store state to `false`.",
          "testCode": "assert(\n  (function () {\n    store.dispatch(loginUser());\n    const loggedIn = store.getState();\n    store.dispatch(logoutUser());\n    const afterLogout = store.getState();\n    return (\n      loggedIn.authenticated === true && afterLogout.authenticated === false\n    );\n  })()\n);"
        },
        {
          "text": "The `authReducer` function should handle multiple action types with a switch statement.",
          "testCode": "assert(\n    (function () {\n      return (\n        typeof authReducer === 'function' &&\n        code.toString().includes('switch') &&\n        code.toString().includes('case') &&\n        code.toString().includes('default')\n      );\n    })()\n  );"
        },
        {
          "text": "`LOGIN` and `LOGOUT` should be declared as `const` values and should be assigned strings of `LOGIN`and `LOGOUT`.",
          "testCode": "const noWhiteSpace = __helpers.removeWhiteSpace(code);\nassert(LOGIN === 'LOGIN' && LOGOUT === 'LOGOUT')\nassert(noWhiteSpace.includes('const'))"
        },
        {
          "text": "The action creators and the reducer should reference the `LOGIN` and `LOGOUT` constants.",
          "testCode": "assert(\n    (function () {\n      const noWhiteSpace = __helpers.removeWhiteSpace(\n        code.toString()\n      );\n      return (\n        noWhiteSpace.includes('caseLOGIN:') &&\n        noWhiteSpace.includes('caseLOGOUT:') &&\n        noWhiteSpace.includes('type:LOGIN') &&\n        noWhiteSpace.includes('type:LOGOUT')\n      );\n    })()\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301450,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-const-for-action-types.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036156",
      "title": "Use Middleware to Handle Asynchronous Actions",
      "challengeType": 6,
      "dashedName": "use-middleware-to-handle-asynchronous-actions",
      "description": "So far these challenges have avoided discussing asynchronous actions, but they are an unavoidable part of web development. At some point you'll need to call asynchronous endpoints in your Redux app, so how do you handle these types of requests? Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware. Here's a brief description how to use this with Redux.\n\nTo include Redux Thunk middleware, you pass it as an argument to `Redux.applyMiddleware()`. This statement is then provided as a second optional parameter to the `createStore()` function. Take a look at the code at the bottom of the editor to see this. Then, to create an asynchronous action, you return a function in the action creator that takes `dispatch` as an argument. Within this function, you can dispatch actions and perform asynchronous requests.\n\nIn this example, an asynchronous request is simulated with a `setTimeout()` call. It's common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (this state could display a loading icon, for instance). Then, once you receive the data, you dispatch another action which carries the data as a payload along with information that the action is completed.\n\nRemember that you're passing `dispatch` as a parameter to this special action creator. This is what you'll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest.",
      "instructions": "Write both dispatches in the `handleAsync()` action creator. Dispatch `requestingData()` before the `setTimeout()` (the simulated API call). Then, after you receive the (pretend) data, dispatch the `receivedData()` action, passing in this data. Now you know how to handle asynchronous actions in Redux. Everything else continues to behave as before.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\n\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }\n\nconst handleAsync = () => {\n  return function(dispatch) {\n    // Dispatch request action here\n\n    setTimeout(function() {\n      let data = {\n        users: ['Jeff', 'William', 'Alice']\n      }\n      // Dispatch received data action here\n\n    }, 2500);\n  }\n};\n\nconst defaultState = {\n  fetching: false,\n  users: []\n};\n\nconst asyncDataReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case REQUESTING_DATA:\n      return {\n        fetching: true,\n        users: []\n      }\n    case RECEIVED_DATA:\n      return {\n        fetching: false,\n        users: action.users\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(\n  asyncDataReducer,\n  Redux.applyMiddleware(ReduxThunk.default)\n);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\n\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }\n\nconst handleAsync = () => {\n  return function(dispatch) {\n    dispatch(requestingData());\n    setTimeout(function() {\n      let data = {\n        users: ['Jeff', 'William', 'Alice']\n      }\n      dispatch(receivedData(data));\n    }, 2500);\n  }\n};\n\nconst defaultState = {\n  fetching: false,\n  users: []\n};\n\nconst asyncDataReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case REQUESTING_DATA:\n      return {\n        fetching: true,\n        users: []\n      }\n    case RECEIVED_DATA:\n      return {\n        fetching: false,\n        users: action.users\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(\n  asyncDataReducer,\n  Redux.applyMiddleware(ReduxThunk.default)\n);"
        }
      ],
      "tests": [
        {
          "text": "The `requestingData` action creator should return an object of type equal to the value of `REQUESTING_DATA`.",
          "testCode": "assert(requestingData().type === REQUESTING_DATA);"
        },
        {
          "text": "The `receivedData` action creator should return an object of type equal to the value of `RECEIVED_DATA`.",
          "testCode": "assert(receivedData('data').type === RECEIVED_DATA);"
        },
        {
          "text": "`asyncDataReducer` should be a function.",
          "testCode": "assert(typeof asyncDataReducer === 'function');"
        },
        {
          "text": "Dispatching the `requestingData` action creator should update the store `state` property of fetching to `true`.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(requestingData());\n    const reqState = store.getState();\n    return initialState.fetching === false && reqState.fetching === true;\n  })()\n);"
        },
        {
          "text": "Dispatching `handleAsync` should dispatch the data request action and then dispatch the received data action after a delay.",
          "testCode": "assert(\n  (function () {\n    const noWhiteSpace = __helpers.removeWhiteSpace(handleAsync.toString());\n    return (\n      noWhiteSpace.includes('dispatch(requestingData())') === true &&\n      noWhiteSpace.includes('dispatch(receivedData(data))') === true\n    );\n  })()\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301451,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-middleware-to-handle-asynchronous-actions.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036159",
      "title": "Use the Spread Operator on Arrays",
      "challengeType": 6,
      "dashedName": "use-the-spread-operator-on-arrays",
      "description": "One solution from ES6 to help enforce state immutability in Redux is the spread operator: `...`. The spread operator has a variety of applications, one of which is well-suited to the previous challenge of producing a new array from an existing array. This is relatively new, but commonly used syntax. For example, if you have an array `myArray` and write:\n\n```js\nlet newArray = [...myArray];\n```\n\n`newArray` is now a clone of `myArray`. Both arrays still exist separately in memory. If you perform a mutation like `newArray.push(5)`, `myArray` doesn't change. The `...` effectively *spreads* out the values in `myArray` into a new array. To clone an array but add additional values in the new array, you could write `[...myArray, 'new value']`. This would return a new array composed of the values in `myArray` and the string `new value` as the last value. The spread syntax can be used multiple times in array composition like this, but it's important to note that it only makes a shallow copy of the array. That is to say, it only provides immutable array operations for one-dimensional arrays.",
      "instructions": "Use the spread operator to return a new copy of state when a to-do is added.",
      "boilerplate": [
        {
          "language": "js",
          "code": "const immutableReducer = (state = ['Do not mutate state!'], action) => {\n  switch(action.type) {\n    case 'ADD_TO_DO':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: 'ADD_TO_DO',\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const immutableReducer = (state = ['Do not mutate state!'], action) => {\n  switch(action.type) {\n    case 'ADD_TO_DO':\n      return [\n        ...state,\n        action.todo\n      ];\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: 'ADD_TO_DO',\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"
        }
      ],
      "tests": [
        {
          "text": "The Redux store should exist and initialize with a state equal to `[\"Do not mutate state!\"]`.",
          "testCode": "assert(\n  (function () {\n    const initialState = store.getState();\n    return (\n      Array.isArray(initialState) === true &&\n      initialState[0] === 'Do not mutate state!'\n    );\n  })()\n);"
        },
        {
          "text": "`addToDo` and `immutableReducer` both should be functions.",
          "testCode": "assert(typeof addToDo === 'function' && typeof immutableReducer === 'function');"
        },
        {
          "text": "Dispatching an action of type `ADD_TO_DO` on the Redux store should add a `todo` item and should NOT mutate state.",
          "testCode": "const initialState = store.getState();\nconst isFrozen = !!DeepFreeze(initialState);\nstore.dispatch(addToDo('__TEST__TO__DO__'));\nconst finalState = store.getState();\nconst expectedState = ['Do not mutate state!', '__TEST__TO__DO__'];\nassert(isFrozen)\nassert.deepEqual(finalState, expectedState);"
        },
        {
          "text": "The spread operator should be used to return new state.",
          "testCode": "assert(code.includes('...state'));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301452,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\use-the-spread-operator-on-arrays.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "5a24c314108439a4d4036157",
      "title": "Write a Counter with Redux",
      "challengeType": 6,
      "dashedName": "write-a-counter-with-redux",
      "description": "Now you've learned all the core principles of Redux! You've seen how to create actions and action creators, create a Redux store, dispatch your actions against the store, and design state updates with pure reducers. You've even seen how to manage complex state with reducer composition and handle asynchronous actions. These examples are simplistic, but these concepts are the core principles of Redux. If you understand them well, you're ready to start building your own Redux app. The next challenges cover some of the details regarding `state` immutability, but first, here's a review of everything you've learned so far.",
      "instructions": "In this lesson, you'll implement a simple counter with Redux from scratch. The basics are provided in the code editor, but you'll have to fill in the details! Use the names that are provided and define `incAction` and `decAction` action creators, the `counterReducer()`, `INCREMENT` and `DECREMENT` action types, and finally the Redux `store`. Once you're finished you should be able to dispatch `INCREMENT` or `DECREMENT` actions to increment or decrement the state held in the `store`. Good luck building your first Redux app!",
      "boilerplate": [
        {
          "language": "js",
          "code": "const INCREMENT = null; // Define a constant for increment action types\nconst DECREMENT = null; // Define a constant for decrement action types\n\nconst counterReducer = null; // Define the counter reducer which will increment or decrement the state based on the action it receives\n\nconst incAction = null; // Define an action creator for incrementing\n\nconst decAction = null; // Define an action creator for decrementing\n\nconst store = null; // Define the Redux store here, passing in your reducers"
        }
      ],
      "solution": [
        {
          "language": "js",
          "code": "const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst incAction = () => {\n  return {\n    type: INCREMENT\n  }\n};\n\nconst decAction = () => {\n  return {\n    type: DECREMENT\n  }\n};\n\nconst store = Redux.createStore(counterReducer);"
        }
      ],
      "tests": [
        {
          "text": "The action creator `incAction` should return an action object with `type` equal to the value of `INCREMENT`",
          "testCode": "assert(incAction().type === INCREMENT);"
        },
        {
          "text": "The action creator `decAction` should return an action object with `type` equal to the value of `DECREMENT`",
          "testCode": "assert(decAction().type === DECREMENT);"
        },
        {
          "text": "Running `store.getState()` should return a number",
          "testCode": "assert(typeof store.getState() === 'number');"
        },
        {
          "text": "The Redux store should initialize with a `state` of 0.",
          "testCode": "assert(_store.getState() === 0);"
        },
        {
          "text": "Dispatching `incAction` on the Redux store should increment the `state` by 1.",
          "testCode": "assert(\n  (function () {\n    const initialState = _store.getState();\n    _store.dispatch(incAction());\n    const incState = _store.getState();\n    return initialState + 1 === incState;\n  })()\n);"
        },
        {
          "text": "Dispatching `decAction` on the Redux store should decrement the `state` by 1.",
          "testCode": "assert(\n  (function () {\n    const initialState = _store.getState();\n    _store.dispatch(decAction());\n    const decState = _store.getState();\n    return initialState - 1 === decState;\n  })()\n);"
        },
        {
          "text": "`counterReducer` should be a function",
          "testCode": "assert(typeof counterReducer === 'function');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301453,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\redux\\write-a-counter-with-redux.md"
      },
      "additionalCode": {
        "afterUserCode": [
          {
            "language": "js",
            "code": "const _store = Redux.createStore(counterReducer)"
          }
        ]
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "redux",
        "name": "Redux"
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbb",
      "title": "Apply a Style Until a Condition is Met with @while",
      "challengeType": 0,
      "dashedName": "apply-a-style-until-a-condition-is-met-with-while",
      "description": "The `@while` directive is an option with similar functionality to the JavaScript `while` loop. It creates CSS rules until a condition is met.\n\nThe `@for` challenge gave an example to create a simple grid system. This can also work with `@while`.\n\n```scss\n$x: 1;\n@while $x < 13 {\n  .col-#{$x} { width: 100%/12 * $x;}\n  $x: $x + 1;\n}\n```\n\nFirst, define a variable `$x` and set it to 1. Next, use the `@while` directive to create the grid system *while* `$x` is less than 13. After setting the CSS rule for `width`, `$x` is incremented by 1 to avoid an infinite loop.",
      "instructions": "Use `@while` to create a series of classes with different `font-sizes`.\n\nThere should be 5 different classes from `text-1` to `text-5`. Then set `font-size` to `15px` multiplied by the current index number. Make sure to avoid an infinite loop!",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n\n\n</style>\n\n<p class=\"text-1\">Hello</p>\n<p class=\"text-2\">Hello</p>\n<p class=\"text-3\">Hello</p>\n<p class=\"text-4\">Hello</p>\n<p class=\"text-5\">Hello</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n  $x: 1;\n  @while $x < 6 {\n    .text-#{$x}{\n      font-size: 15px * $x;\n    }\n    $x: $x + 1;\n  }\n</style>\n\n<p class=\"text-1\">Hello</p>\n<p class=\"text-2\">Hello</p>\n<p class=\"text-3\">Hello</p>\n<p class=\"text-4\">Hello</p>\n<p class=\"text-5\">Hello</p>"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `@while` directive.",
          "testCode": "assert(code.match(/@while /g));"
        },
        {
          "text": "Your code should use an index variable which starts at an index of 1.",
          "testCode": "assert(code.match(/\\$.*:\\s*?1;/gi));"
        },
        {
          "text": "Your code should increment the counter variable.",
          "testCode": "assert(code.match(/\\$(.*)\\s*?:\\s*\\$\\1\\s*\\+\\s*1\\s*;/gi));"
        },
        {
          "text": "Your `.text-1` class should have a `font-size` of `15px`.",
          "testCode": "assert($('.text-1').css('font-size') == '15px');"
        },
        {
          "text": "Your `.text-2` class should have a `font-size` of `30px`.",
          "testCode": "assert($('.text-2').css('font-size') == '30px');"
        },
        {
          "text": "Your `.text-3` class should have a `font-size` of `45px`.",
          "testCode": "assert($('.text-3').css('font-size') == '45px');"
        },
        {
          "text": "Your `.text-4` class should have a `font-size` of `60px`.",
          "testCode": "assert($('.text-4').css('font-size') == '60px');"
        },
        {
          "text": "Your `.text-5` class should have a `font-size` of `75px`.",
          "testCode": "assert($('.text-5').css('font-size') == '75px');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301454,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\apply-a-style-until-a-condition-is-met-with-while.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb6",
      "title": "Create Reusable CSS with Mixins",
      "challengeType": 0,
      "dashedName": "create-reusable-css-with-mixins",
      "description": "In Sass, a <dfn>mixin</dfn> is a group of CSS declarations that can be reused throughout the style sheet. The definition starts with the `@mixin` at-rule, followed by a custom name. You apply the mixin using the `@include` at-rule.\n\n```scss\n@mixin reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\nnav ul {\n  @include reset-list;\n}\n```\n\nCompiles to:\n\n```css\nnav ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n```\n\nYour mixins can also take arguments, which allows their behavior to be customized. The arguments are required when using the mixin.\n\n```scss\n@mixin prose($font-size, $spacing) {\n  font-size: $font-size;\n  margin: 0;\n  margin-block-end: $spacing;\n}\n\np {\n  @include prose(1.25rem, 1rem);\n}\n\nh2 {\n  @include prose(2.4rem, 1.5rem);\n}\n```\n\nYou can make arguments optional by giving the parameters default values.\n\n```scss\n@mixin text-color($color: black) {\n  color: $color;\n}\n\np {\n  @include text-color(); /* color: black */\n}\n\nnav a {\n  @include text-color(orange);\n}\n```",
      "instructions": "Write a mixin named `shape` and give it 3 parameters: `$w`, `$h`, and `$bg-color`.\n\nUse the `shape` mixin to give the `#square` element a width and height of `50px`, and the background color `red`. For the `#rect-a` element add a width of `100px`, a height of `50px`, and the background color `blue`. Finally, for the `#rect-b` element add a width of `50px`, a height of `100px`, and the background color `orange`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n#square {\n  width: 50px;\n  height: 50px;\n  background-color: red;\n}\n\n#rect-a {\n  width: 100px;\n  height: 50px;\n  background-color: blue;\n}\n\n#rect-b {\n  width: 50px;\n  height: 100px;\n  background-color: orange;\n}\n</style>\n\n<div id=\"square\"></div>\n<div id=\"rect-a\"></div>\n<div id=\"rect-b\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n@mixin shape($w, $h, $bg-color) {\n  width: $w;\n  height: $h;\n  background-color: $bg-color;\n}\n\n#square {\n  @include shape(50px, 50px, red);\n}\n\n#rect-a {\n  @include shape(100px, 50px, blue);\n}\n\n#rect-b {\n  @include shape(50px, 100px, orange);\n}\n</style>\n\n<div id=\"square\"></div>\n<div id=\"rect-a\"></div>\n<div id=\"rect-b\"></div>"
        }
      ],
      "tests": [
        {
          "text": "You should declare a mixin named `shape` with 3 parameters: `$w`, `$h`, and `$bg-color`.",
          "testCode": "assert.match(code, /@mixin\\s+shape\\s*\\(\\s*\\$w,\\s*\\$h,\\s*\\$bg-color\\s*\\)\\s*{/gi);"
        },
        {
          "text": "Your mixin should include a `width` property that uses the `$w` parameter.",
          "testCode": "assert.match(__helpers.removeWhiteSpace(code), /width:\\$w;/gi);"
        },
        {
          "text": "Your mixin should include a `height` property that uses the `$h` parameter.",
          "testCode": "assert.match(__helpers.removeWhiteSpace(code), /height:\\$h;/gi);"
        },
        {
          "text": "Your mixin should include a `background-color` property that uses the `$bg-color` parameter.",
          "testCode": "assert.match(__helpers.removeWhiteSpace(code), /background-color:\\$bg\\-color;/gi);"
        },
        {
          "text": "You should replace the styles inside the `#square` selector with a call to the `shape` mixin using the `@include` keyword. Setting a width and height of `50px`, and the background color `red`.",
          "testCode": "assert.match(code, /#square\\s*{\\s*@include\\s+shape\\s*\\(\\s*50px\\s*,\\s*50px\\s*,\\s*red\\s*\\)\\s*;\\s*}/gi);"
        },
        {
          "text": "You should replace the styles inside the `#rect-a` selector with a call to the `shape` mixin using the `@include` keyword. Setting a width of `100px`, a height of `50px`, and the background color `blue`.",
          "testCode": "assert.match(code, /#rect-a\\s*{\\s*@include\\s+shape\\s*\\(\\s*100px\\s*,\\s*50px\\s*,\\s*blue\\s*\\)\\s*;\\s*}/gi);"
        },
        {
          "text": "You should replace the styles inside the `#rect-b` selector with a call to the `shape` mixin using the `@include` keyword. Setting a width of `50px`, a height of `100px`, and the background color `orange`.",
          "testCode": "assert.match(code, /#rect-b\\s*{\\s*@include\\s+shape\\s*\\(\\s*50px\\s*,\\s*100px\\s*,\\s*orange\\s*\\)\\s*;\\s*}/gi);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301455,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\create-reusable-css-with-mixins.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    },
    {
      "id": "587d7fa5367417b2b2512bbd",
      "title": "Extend One Set of CSS Styles to Another Element",
      "challengeType": 0,
      "dashedName": "extend-one-set-of-css-styles-to-another-element",
      "description": "Sass has a feature called `extend` that makes it easy to borrow the CSS rules from one element and build upon them in another.\n\nFor example, the below block of CSS rules style a `.panel` class. It has a `background-color`, `height` and `border`.\n\n```scss\n.panel{\n  background-color: red;\n  height: 70px;\n  border: 2px solid green;\n}\n```\n\nNow you want another panel called `.big-panel`. It has the same base properties as `.panel`, but also needs a `width` and `font-size`. It's possible to copy and paste the initial CSS rules from `.panel`, but the code becomes repetitive as you add more types of panels. The `extend` directive is a simple way to reuse the rules written for one element, then add more for another:\n\n```scss\n.big-panel{\n  @extend .panel;\n  width: 150px;\n  font-size: 2em;\n}\n```\n\nThe `.big-panel` will have the same properties as `.panel` in addition to the new styles.",
      "instructions": "Make a class `.info-important` that extends `.info` and also has a `background-color` set to magenta.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n  h3{\n    text-align: center;\n  }\n  .info{\n    width: 200px;\n    border: 1px solid black;\n    margin: 0 auto;\n  }\n\n\n\n\n</style>\n<h3>Posts</h3>\n<div class=\"info-important\">\n  <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p>\n</div>\n\n<div class=\"info\">\n  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n  h3{\n    text-align: center;\n  }\n  .info{\n    width: 200px;\n    border: 1px solid black;\n    margin: 0 auto;\n  }\n  .info-important{\n    @extend .info;\n    background-color: magenta;\n  }\n\n\n\n</style>\n<h3>Posts</h3>\n<div class=\"info-important\">\n  <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p>\n</div>\n\n<div class=\"info\">\n  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your `info-important` class should have a `background-color` set to `magenta`.",
          "testCode": "assert(\n  code.match(\n    /\\.info-important\\s*?{[\\s\\S]*background-color\\s*?:\\s*?magenta\\s*?;[\\s\\S]*}/gi\n  )\n);"
        },
        {
          "text": "Your `info-important` class should use `@extend` to inherit the styling from the `info` class.",
          "testCode": "assert(\n  code.match(/\\.info-important\\s*?{[\\s\\S]*@extend\\s*?.info\\s*?;[\\s\\S]*/gi)\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301456,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\extend-one-set-of-css-styles-to-another-element.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb5",
      "title": "Nest CSS with Sass",
      "challengeType": 0,
      "dashedName": "nest-css-with-sass",
      "description": "Sass allows nesting of CSS rules, which is a useful way of organizing a style sheet.\n\nNormally, each element is targeted on a different line to style it, like so:\n\n```scss\narticle {\n  height: 200px;\n}\n\narticle p {\n  color: white;\n}\n\narticle ul {\n  color: blue;\n}\n```\n\nFor a large project, the CSS file will have many lines and rules. This is where nesting can help organize your code by placing child style rules within the respective parent elements:\n\n```scss\narticle {\n  height: 200px;\n\n  p {\n    color: white;\n  }\n\n  ul {\n    color: blue;\n  }\n}\n\n```",
      "instructions": "Use the nesting technique shown above to re-organize the CSS rules for both children of `.blog-post` element. For testing purposes, the `h1` should come before the `p` element.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n  .blog-post {\n\n  }\n  h1 {\n    text-align: center;\n    color: blue;\n  }\n  p {\n    font-size: 20px;\n  }\n</style>\n\n<div class=\"blog-post\">\n  <h1>Blog Title</h1>\n  <p>This is a paragraph</p>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n  .blog-post {\n    h1 {\n      text-align: center;\n      color: blue;\n    }\n    p {\n      font-size: 20px;\n    }\n  }\n</style>\n\n<div class=\"blog-post\">\n  <h1>Blog Title</h1>\n  <p>This is a paragraph</p>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should re-organize the CSS rules so the `h1` and `p` are nested in the `.blog-post` parent element.",
          "testCode": "assert(\n  code.match(\n    /\\.blog-post\\s*?{\\s*?h1\\s*?{\\s*?text-align:\\s*?center;\\s*?color:\\s*?blue;\\s*?}\\s*?p\\s*?{\\s*?font-size:\\s*?20px;\\s*?}\\s*?}/gi\n  )\n);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301457,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\nest-css-with-sass.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbc",
      "title": "Split Your Styles into Smaller Chunks with Partials",
      "challengeType": 0,
      "dashedName": "split-your-styles-into-smaller-chunks-with-partials",
      "description": "<dfn>Partials</dfn> in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized.\n\nNames for partials start with the underscore (`_`) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file. Also, Sass files end with the `.scss` file extension. To bring the code in the partial into another Sass file, use the `@import` directive.\n\nFor example, if all your mixins are saved in a partial named \"\\_mixins.scss\", and they are needed in the \"main.scss\" file, this is how to use them in the main file:\n\n```scss\n@import 'mixins'\n```\n\nNote that the underscore and file extension are not needed in the `import` statement - Sass understands it is a partial. Once a partial is imported into a file, all variables, mixins, and other code are available to use.",
      "instructions": "Write an `@import` statement to import a partial named `_variables.scss` into the main.scss file.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<!-- The main.scss file -->"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "@import 'variables'"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `@import` directive, and should not include the underscore in the file name.",
          "testCode": "assert(code.match(/@import\\s+?('|\")variables\\1/gi));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301459,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\split-your-styles-into-smaller-chunks-with-partials.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb4",
      "title": "Store Data with Sass Variables",
      "challengeType": 0,
      "dashedName": "store-data-with-sass-variables",
      "description": "One feature of Sass that's different than CSS is it uses variables. They are declared and set to store data, similar to JavaScript.\n\nIn JavaScript, variables are defined using the `let` and `const` keywords. In Sass, variables start with a `$` followed by the variable name.\n\nHere are a couple examples:\n\n```scss\n$main-fonts: Arial, sans-serif;\n$headings-color: green;\n```\n\nAnd to use the variables:\n\n```scss\nh1 {\n  font-family: $main-fonts;\n  color: $headings-color;\n}\n```\n\nOne example where variables are useful is when a number of elements need to be the same color. If that color is changed, the only place to edit the code is the variable value.",
      "instructions": "Create a variable `$text-color` and set it to `red`. Then change the value of the `color` property for the `.blog-post` and `h2` to the `$text-color` variable.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n\n  .header{\n    text-align: center;\n  }\n  .blog-post, h2 {\n    color: red;\n  }\n</style>\n\n<h1 class=\"header\">Learn Sass</h1>\n<div class=\"blog-post\">\n  <h2>Some random title</h2>\n  <p>This is a paragraph with some random text in it</p>\n</div>\n<div class=\"blog-post\">\n  <h2>Header #2</h2>\n  <p>Here is some more random text.</p>\n</div>\n<div class=\"blog-post\">\n  <h2>Here is another header</h2>\n  <p>Even more random text within a paragraph</p>\n</div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n  $text-color: red;\n\n  .header{\n    text-align: center;\n  }\n  .blog-post, h2 {\n    color: $text-color;\n  }\n</style>\n\n<h1 class=\"header\">Learn Sass</h1>\n<div class=\"blog-post\">\n  <h2>Some random title</h2>\n  <p>This is a paragraph with some random text in it</p>\n</div>\n<div class=\"blog-post\">\n  <h2>Header #2</h2>\n  <p>Here is some more random text.</p>\n</div>\n<div class=\"blog-post\">\n  <h2>Here is another header</h2>\n  <p>Even more random text within a paragraph</p>\n</div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should have a Sass variable declared for `$text-color` with a value of `red`.",
          "testCode": "assert(code.match(/\\$text-color\\s*:\\s*?red\\s*;/g));"
        },
        {
          "text": "Your code should use the `$text-color` variable to change the `color` for the `.blog-post` and `h2` items.",
          "testCode": "assert(code.match(/color\\s*:\\s*\\$text-color\\s*;?/g));"
        },
        {
          "text": "Your `.blog-post` element should have a `color` of red.",
          "testCode": "assert($('.blog-post').css('color') == 'rgb(255, 0, 0)');"
        },
        {
          "text": "Your `h2` elements should have a `color` of red.",
          "testCode": "assert($('h2').css('color') == 'rgb(255, 0, 0)');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301460,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\store-data-with-sass-variables.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    },
    {
      "id": "587d7dbf367417b2b2512bba",
      "title": "Use @each to Map Over Items in a List",
      "challengeType": 0,
      "dashedName": "use-each-to-map-over-items-in-a-list",
      "description": "The last challenge showed how the `@for` directive uses a starting and ending value to loop a certain number of times. Sass also offers the `@each` directive which loops over each item in a list or map. On each iteration, the variable gets assigned to the current value from the list or map.\n\n```scss\n@each $color in blue, red, green {\n  .#{$color}-text {color: $color;}\n}\n```\n\nA map has slightly different syntax. Here's an example:\n\n```scss\n$colors: (color1: blue, color2: red, color3: green);\n\n@each $key, $color in $colors {\n  .#{$color}-text {color: $color;}\n}\n```\n\nNote that the `$key` variable is needed to reference the keys in the map. Otherwise, the compiled CSS would have `color1`, `color2`... in it. Both of the above code examples are converted into the following CSS:\n\n```scss\n.blue-text {\n  color: blue;\n}\n\n.red-text {\n  color: red;\n}\n\n.green-text {\n  color: green;\n}\n```",
      "instructions": "Write an `@each` directive that goes through a list: `blue, black, red` and assigns each variable to a `.color-bg` class, where the `color` part changes for each item to the respective color. Each class should set the `background-color` to the respective color as well.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n\n\n  div {\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div class=\"blue-bg\"></div>\n<div class=\"black-bg\"></div>\n<div class=\"red-bg\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n  @each $color in blue, black, red {\n    .#{$color}-bg {background-color: $color;}\n  }\n\n  div {\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div class=\"blue-bg\"></div>\n<div class=\"black-bg\"></div>\n<div class=\"red-bg\"></div>"
        },
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n  $colors: (color1: blue, color2: black, color3: red);\n\n  @each $key, $color in $colors {\n    .#{$color}-bg {background-color: $color;}\n  }\n\n  div {\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div class=\"blue-bg\"></div>\n<div class=\"black-bg\"></div>\n<div class=\"red-bg\"></div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `@each` directive.",
          "testCode": "assert(code.match(/@each /g));"
        },
        {
          "text": "Your `.blue-bg` class should have a `background-color` of blue.",
          "testCode": "assert($('.blue-bg').css('background-color') == 'rgb(0, 0, 255)');"
        },
        {
          "text": "Your `.black-bg` class should have a `background-color` of black.",
          "testCode": "assert($('.black-bg').css('background-color') == 'rgb(0, 0, 0)');"
        },
        {
          "text": "Your `.red-bg` class should have a `background-color` of red.",
          "testCode": "assert($('.red-bg').css('background-color') == 'rgb(255, 0, 0)');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301461,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\use-each-to-map-over-items-in-a-list.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb9",
      "title": "Use @for to Create a Sass Loop",
      "challengeType": 0,
      "dashedName": "use-for-to-create-a-sass-loop",
      "description": "The `@for` directive adds styles in a loop, very similar to a `for` loop in JavaScript.\n\n`@for` is used in two ways: \"start through end\" or \"start to end\". The main difference is that the \"start **to** end\" *excludes* the end number as part of the count, and \"start **through** end\" *includes* the end number as part of the count.\n\nHere's a start **through** end example:\n\n```scss\n@for $i from 1 through 12 {\n  .col-#{$i} { width: 100%/12 * $i; }\n}\n```\n\nThe `#{$i}` part is the syntax to combine a variable (`i`) with text to make a string. When the Sass file is converted to CSS, it looks like this:\n\n```scss\n.col-1 {\n  width: 8.33333%;\n}\n\n.col-2 {\n  width: 16.66667%;\n}\n\n...\n\n.col-12 {\n  width: 100%;\n}\n```\n\nThis is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.",
      "instructions": "Write a `@for` directive that takes a variable `$j` that goes from 1 **to** 6.\n\nIt should create 5 classes called `.text-1` to `.text-5` where each has a `font-size` set to 15px multiplied by the index.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n\n\n</style>\n\n<p class=\"text-1\">Hello</p>\n<p class=\"text-2\">Hello</p>\n<p class=\"text-3\">Hello</p>\n<p class=\"text-4\">Hello</p>\n<p class=\"text-5\">Hello</p>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n@for $i from 1 through 5 {\n  .text-#{$i} { font-size: 15px * $i; }\n}\n\n</style>\n\n<p class=\"text-1\">Hello</p>\n<p class=\"text-2\">Hello</p>\n<p class=\"text-3\">Hello</p>\n<p class=\"text-4\">Hello</p>\n<p class=\"text-5\">Hello</p>"
        },
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n@for $i from 1 to 6 {\n  .text-#{$i} { font-size: 15px * $i; }\n}\n\n</style>\n\n<p class=\"text-1\">Hello</p>\n<p class=\"text-2\">Hello</p>\n<p class=\"text-3\">Hello</p>\n<p class=\"text-4\">Hello</p>\n<p class=\"text-5\">Hello</p>"
        }
      ],
      "tests": [
        {
          "text": "Your code should use the `@for` directive.",
          "testCode": "assert(code.match(/@for /g));"
        },
        {
          "text": "Your `.text-1` class should have a `font-size` of 15px.",
          "testCode": "assert($('.text-1').css('font-size') == '15px');"
        },
        {
          "text": "Your `.text-2` class should have a `font-size` of 30px.",
          "testCode": "assert($('.text-2').css('font-size') == '30px');"
        },
        {
          "text": "Your `.text-3` class should have a `font-size` of 45px.",
          "testCode": "assert($('.text-3').css('font-size') == '45px');"
        },
        {
          "text": "Your `.text-4` class should have a `font-size` of 60px.",
          "testCode": "assert($('.text-4').css('font-size') == '60px');"
        },
        {
          "text": "Your `.text-5` class should have a `font-size` of 75px.",
          "testCode": "assert($('.text-5').css('font-size') == '75px');"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301462,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\use-for-to-create-a-sass-loop.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb8",
      "title": "Use @if and @else to Add Logic To Your Styles",
      "challengeType": 0,
      "dashedName": "use-if-and-else-to-add-logic-to-your-styles",
      "description": "The `@if` directive in Sass is useful to test for a specific case - it works just like the `if` statement in JavaScript.\n\n```scss\n@mixin make-bold($bool) {\n  @if $bool == true {\n    font-weight: bold;\n  }\n}\n```\n\nAnd just like in JavaScript, the `@else if` and `@else` directives test for more conditions:\n\n```scss\n@mixin text-effect($val) {\n  @if $val == danger {\n    color: red;\n  }\n  @else if $val == alert {\n    color: yellow;\n  }\n  @else if $val == success {\n    color: green;\n  }\n  @else {\n    color: black;\n  }\n}\n```",
      "instructions": "Create a mixin called `border-stroke` that takes a parameter `$val`. The mixin should check for the following conditions using `@if`, `@else if`, and `@else` directives:\n\n```scss\nlight - 1px solid black\nmedium - 3px solid black\nheavy - 6px solid black\n```\n\nIf the `$val` parameter value is not `light`, `medium`, or `heavy`, then the `border` property should be set to `none`.",
      "boilerplate": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n\n\n\n  #box {\n    width: 150px;\n    height: 150px;\n    background-color: red;\n    @include border-stroke(medium);\n  }\n</style>\n\n<div id=\"box\"></div>"
        }
      ],
      "solution": [
        {
          "language": "html",
          "code": "<style type='text/scss'>\n  @mixin border-stroke($val) {\n    @if $val == light {\n      border: 1px solid black;\n    }\n    @else if $val == medium {\n      border: 3px solid black;\n    }\n    @else if $val == heavy {\n      border: 6px solid black;\n    }\n    @else {\n      border: none;\n    }\n  }\n\n\n  #box {\n    width: 150px;\n    height: 150px;\n    background-color: red;\n    @include border-stroke(medium);\n  }\n</style>\n\n<div id=\"box\"></div>"
        }
      ],
      "tests": [
        {
          "text": "Your code should declare a mixin named `border-stroke` which has a parameter named `$val`.",
          "testCode": "assert(code.match(/@mixin\\s+?border-stroke\\s*?\\(\\s*?\\$val\\s*?\\)\\s*?{/gi));"
        },
        {
          "text": "Your mixin should have an `@if` statement to check if `$val` is `light`, and to set the `border` to `1px solid black`.",
          "testCode": "assert(\n  code.match(\n    /@if\\s+?\\$val\\s*?===?\\s*?light\\s*?{\\s*?border\\s*?:\\s*?1px\\s+?solid\\s+?black\\s*?;\\s*?}/gi\n  )\n);"
        },
        {
          "text": "Your mixin should have an `@else if` statement to check if `$val` is `medium`, and to set the `border` to `3px solid black`.",
          "testCode": "assert(\n  code.match(\n    /@else\\s+?if\\s+?\\$val\\s*?===?\\s*?medium\\s*?{\\s*?border\\s*?:\\s*?3px\\s+?solid\\s+?black\\s*?;\\s*?}/gi\n  )\n);"
        },
        {
          "text": "Your mixin should have an `@else if` statement to check if `$val` is `heavy`, and to set the `border` to `6px solid black`.",
          "testCode": "assert(\n  code.match(\n    /@else\\s+?if\\s+?\\$val\\s*?===?\\s*?heavy\\s*?{\\s*?border\\s*?:\\s*?6px\\s+?solid\\s+?black\\s*?;\\s*?}/gi\n  )\n);"
        },
        {
          "text": "Your mixin should have an `@else` statement to set the `border` to `none`.",
          "testCode": "assert(code.match(/@else\\s*?{\\s*?border\\s*?:\\s*?none\\s*?;\\s*?}/gi));"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301463,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\03-front-end-development-libraries\\sass\\use-if-and-else-to-add-logic-to-your-styles.md"
      },
      "section": {
        "id": "03-front-end-development-libraries",
        "name": "03-front-end-development-libraries"
      },
      "lesson": {
        "id": "sass",
        "name": "Sass"
      }
    }
  ],
  "metadata": {
    "total_challenges": 137,
    "challenges_with_content": 137
  }
}