{
  "section": {
    "id": "09-information-security",
    "name": "09-information-security"
  },
  "challenges": [
    {
      "id": "587d824a367417b2b2512c45",
      "title": "Anonymous Message Board",
      "challengeType": 4,
      "dashedName": "anonymous-message-board",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://anonymous-message-board.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://anonymous-message-board.freecodecamp.rocks/</a>.\n\nWorking on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-messageboard/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "1.  Set `NODE_ENV` to test without quotes when ready to write tests and DB to your databases connection string (in `.env`)\n2.  Recommended to create controllers/handlers and handle routing in `routes/api.js`\n3.  You will add any security features to `server.js`\n\nWrite the following tests in `tests/2_functional-tests.js`:\n\n-   Creating a new thread: POST request to `/api/threads/{board}`\n-   Viewing the 10 most recent threads with 3 replies each: GET request to `/api/threads/{board}`\n-   Deleting a thread with the incorrect password: DELETE request to `/api/threads/{board}` with an invalid `delete_password`\n-   Deleting a thread with the correct password: DELETE request to `/api/threads/{board}` with a valid `delete_password`\n-   Reporting a thread: PUT request to `/api/threads/{board}`\n-   Creating a new reply: POST request to `/api/replies/{board}`\n-   Viewing a single thread with all replies: GET request to `/api/replies/{board}`\n-   Deleting a reply with the incorrect password: DELETE request to `/api/replies/{board}` with an invalid `delete_password`\n-   Deleting a reply with the correct password: DELETE request to `/api/replies/{board}` with a valid `delete_password`\n-   Reporting a reply: PUT request to `/api/replies/{board}`",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You can provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/anonymous-message-board\\.freecodecamp\\.rocks/.test(\n      code\n    )\n  );"
        },
        {
          "text": "Only allow your site to be loaded in an iFrame on your own pages.",
          "testCode": "async () => {\n  const data = await fetch(code + '/_api/app-info');\n  const parsed = await data.json();\n  assert.isTrue(parsed.headers['x-frame-options']?.includes('SAMEORIGIN'));\n};"
        },
        {
          "text": "Do not allow DNS prefetching.",
          "testCode": "async () => {\n  const data = await fetch(code + '/_api/app-info');\n  const parsed = await data.json();\n  assert.isTrue(parsed.headers['x-dns-prefetch-control']?.includes('off'));\n};"
        },
        {
          "text": "Only allow your site to send the referrer for your own pages.",
          "testCode": "async () => {\n  const data = await fetch(code + '/_api/app-info');\n  const parsed = await data.json();\n  assert.isTrue(parsed.headers['referrer-policy']?.includes('same-origin'));\n};"
        },
        {
          "text": "You can send a POST request to `/api/threads/{board}` with form data including `text` and `delete_password`. The saved database record will have at least the fields `_id`, `text`, `created_on`(date & time), `bumped_on`(date & time, starts same as `created_on`), `reported` (boolean), `delete_password`, & `replies` (array).",
          "testCode": "async () => {\n  const date = new Date();\n  const text = `fcc_test_${date}`;\n  const deletePassword = 'delete_me';\n  const data = { text, delete_password: deletePassword };\n  const url = code;\n  const res = await fetch(url + '/api/threads/fcc_test', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n  if (res.ok) {\n    const checkData = await fetch(url + '/api/threads/fcc_test');\n    const parsed = await checkData.json();\n    try {\n      assert.equal(parsed[0].text, text);\n      assert.isNotNull(parsed[0]._id);\n      assert.equal(new Date(parsed[0].created_on).toDateString(), date.toDateString());\n      assert.equal(parsed[0].bumped_on, parsed[0].created_on);\n      assert.isArray(parsed[0].replies);\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        },
        {
          "text": "You can send a POST request to `/api/replies/{board}` with form data including `text`, `delete_password`, & `thread_id`. This will update the `bumped_on` date to the comment's date. In the thread's `replies` array, an object will be saved with at least the properties `_id`, `text`, `created_on`, `delete_password`, & `reported`.\n\n```js\nasync () => {\n  const url = code;\n  const body = await fetch(url + '/api/threads/fcc_test');\n  const thread = await body.json();\n\nconst date = new Date();\n  const text = `fcc_test_reply_${date}`;\n  const delete_password = 'delete_me';\n  const thread_id = thread[0]._id;\n  const replyCount = thread[0].replies.length;\n\nconst data = { text, delete_password, thread_id };\n  const res = await fetch(url + '/api/replies/fcc_test', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n  if (res.ok) {\n    const checkData = await fetch(`${url}/api/replies/fcc_test?thread_id=${thread_id}`);\n    const parsed = await checkData.json();\n    try {\n      assert.equal(parsed.replies.length, replyCount + 1);\n      assert.equal(parsed.replies[0].text, text);\n      assert.equal(parsed._id, thread_id);\n      assert.equal(parsed.bumped_on, parsed.replies[0].created_on);\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};\n```\n\nYou can send a GET request to `/api/threads/{board}`. Returned will be an array of the most recent 10 bumped threads on the board with only the most recent 3 replies for each. The `reported` and `delete_password` fields will not be sent to the client.\n\n```js\nasync () => {\n  const url = code;\n  const res = await fetch(url + '/api/threads/fcc_test');\n\nif (res.ok) {\n    const threads = await res.json();\n    try {\n      assert.equal(res.status, 200);\n      assert.isAtMost(threads.length, 10);\n      for (let i = 0; i < threads.length; i++) {\n        assert.containsAllKeys(threads[i], [\"_id\", \"text\", \"created_on\", \"bumped_on\", \"replies\"]);\n        assert.isAtMost(threads[i].replies.length, 3);\n        assert.notExists(threads[i].delete_password);\n        assert.notExists(threads[i].reported);\n        for (let j = 0; j < threads[i].replies.length; j++) {\n          assert.notExists(threads[i].replies[j].delete_password);\n          assert.notExists(threads[i].replies[j].reported);\n        }\n      }\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};\n```\n\nYou can send a GET request to `/api/replies/{board}?thread_id={thread_id}`. Returned will be the entire thread with all its replies, also excluding the same fields from the client as the previous test.\n\n```js\nasync () => {\n  const url = code;\n  let res = await fetch(url + '/api/threads/fcc_test');\n  const threads = await res.json();\n  const thread_id = threads[0]._id;\n  res = await fetch(`${url}/api/replies/fcc_test?thread_id=${thread_id}`);\n\nif (res.ok) {\n    const thread = await res.json();\n    try {\n      assert.equal(res.status, 200);\n      assert.isObject(thread);\n      assert.containsAllKeys(thread, [\"_id\", \"text\", \"created_on\", \"bumped_on\", \"replies\"]);\n      assert.isArray(thread.replies);\n      assert.notExists(thread.delete_password);\n      assert.notExists(thread.reported);\n      for (let i = 0; i < thread.replies.length; i++) {\n        assert.notExists(thread.replies[i].delete_password);\n        assert.notExists(thread.replies[i].reported);\n      }\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};\n```\n\nYou can send a DELETE request to `/api/threads/{board}` and pass along the `thread_id` & `delete_password` to delete the thread. Returned will be the string `incorrect password` or `success`.\n\n```js\nasync () => {\n  const url = code;\n  let res = await fetch(url + '/api/threads/fcc_test');\n  const threads = await res.json();\n  const thread_id = threads[0]._id;\n  let data = { thread_id, delete_password: \"wrong_password\" };\n  const res_invalid = await fetch(url + '/api/threads/fcc_test', {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n  data = { thread_id, delete_password: \"delete_me\" };\n  res = await fetch(url + '/api/threads/fcc_test', {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n\nif (res.ok) {\n    const deleted = await res.text();\n    const not_deleted = await res_invalid.text();\n    try {\n      assert.equal(res.status, 200);\n      assert.equal(deleted, \"success\");\n      assert.equal(not_deleted, \"incorrect password\");\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};\n```\n\nYou can send a DELETE request to `/api/replies/{board}` and pass along the `thread_id`, `reply_id`, & `delete_password`. Returned will be the string `incorrect password` or `success`. On success, the text of the `reply_id` will be changed to `[deleted]`.\n\n```js\nasync () => {\n  const url = code;\n\nconst thread_data = {\n    text: \"fcc_test_thread\",\n    delete_password: \"delete_me\",\n  };\n  await fetch(`${url}/api/threads/fcc_test`, {\n    method: \"POST\",\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(thread_data)\n  });\n  let res = await fetch(`${url}/api/threads/fcc_test`);\n  let threads = await res.json();\n  const thread_id = threads[0]._id;\n\nconst reply_data = { thread_id, text: \"fcc_test_reply\", delete_password: \"delete_me\" };\n  await fetch(`${url}/api/replies/fcc_test`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(reply_data)\n  });\n  res = await fetch(`${url}/api/threads/fcc_test`);\n  threads = await res.json();\n  const reply_id = threads[0].replies[0]._id;\n\nconst data = { thread_id, reply_id, delete_password: \"delete_me\" };\n  res = await fetch(url + '/api/replies/fcc_test', {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n\nif (res.ok) {\n    const deleted = await res.text();\n    try {\n      assert.equal(res.status, 200);\n      assert.equal(deleted, \"success\");\n      res = await fetch(`${url}/api/replies/fcc_test?thread_id=${thread_id}`);\n      const thread = await res.json();\n      assert.equal(thread._id, thread_id);\n      assert.equal(thread.replies[0]._id, reply_id);\n      assert.equal(thread.replies[0].text, \"[deleted]\");\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};\n```\n\nYou can send a PUT request to `/api/threads/{board}` and pass along the `thread_id`. Returned will be the string `reported`. The `reported` value of the `thread_id` will be changed to `true`.\n\n```js\nasync () => {\n  const url = code;\n\nlet res = await fetch(`${url}/api/threads/fcc_test`);\n  const threads = await res.json();\n  const thread_id = threads[0]._id;\n  const data = { thread_id };\n\nres = await fetch(`${url}/api/threads/fcc_test`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n\nif (res.ok) {\n    const reported = await res.text();\n    try {\n      assert.equal(res.status, 200);\n      assert.equal(reported, \"reported\");\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};\n```\n\nYou can send a PUT request to `/api/replies/{board}` and pass along the `thread_id` & `reply_id`. Returned will be the string `reported`. The `reported` value of the `reply_id` will be changed to `true`.\n\n```js\nasync () => {\n  const url = code;\n\nlet res = await fetch(`${url}/api/threads/fcc_test`);\n  const threads = await res.json();\n  const thread_id = threads[0]._id;\n  const reply_id = threads[0].replies[0]._id;\n  const data = { thread_id, reply_id };\n\nres = await fetch(`${url}/api/replies/fcc_test`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n\nif (res.ok) {\n    const reported = await res.text();\n    try {\n      assert.equal(res.status, 200);\n      assert.equal(reported, \"reported\");\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};\n```\n\nAll 10 functional tests are complete and passing.",
          "testCode": "async () => {\n  const tests = await fetch(code + '/_api/get-tests');\n  const parsed = await tests.json();\n  assert.isTrue(parsed.length >= 10);\n  parsed.forEach((test) => {\n    assert.equal(test.state, 'passed');\n    assert.isAtLeast(test.assertions.length, 1);\n  });\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301568,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-projects",
        "name": "Information Security Projects"
      }
    },
    {
      "id": "5e46f979ac417301a38fb932",
      "title": "Port Scanner",
      "challengeType": 10,
      "dashedName": "port-scanner",
      "description": "You will be <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-port-scanner\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">working on this project with our Gitpod starter code</a>. Learn <a href=\"https://forum.freecodecamp.org/t/how-to-use-gitpod-in-the-curriculum/668669#how-can-i-share-my-workspace-to-get-help-8\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">how to share your Gitpod workspace to get help</a>.\n\nWe are still developing the interactive instructional part of the Python curriculum. For now, here are some videos on the freeCodeCamp.org YouTube channel that will teach you everything you need to know to complete this project:\n\n- <a href=\"https://www.freecodecamp.org/news/python-for-everybody/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Python for Everybody Video Course</a> (14 hours)\n\n- <a href=\"https://www.freecodecamp.org/news/learn-python-basics-in-depth-video-course/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Learn Python Basics in Depth</a> (4 hours)\n\n- <a href=\"https://www.freecodecamp.org/news/intermediate-python-course/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Intermediate Python Course</a> (6 hours)",
      "instructions": "Create a port scanner using Python.\n\nIn the `port_scanner.py` file, create a function called `get_open_ports` that takes a `target` argument and a `port_range` argument. `target` can be a URL or IP address. `port_range` is a list of two numbers indicating the first and last numbers of the range of ports to check.\n\nHere are examples of how the function may be called:\n\n```py\nget_open_ports(\"209.216.230.240\", [440, 445])\nget_open_ports(\"www.stackoverflow.com\", [79, 82])\n```\n\nThe function should return a list of open ports in the given range.\n\nThe `get_open_ports` function should also take an optional third argument of `True` to indicate \"Verbose\" mode. If this is set to true, the function should return a descriptive string instead of a list of ports.\n\nHere is the format of the string that should be returned in verbose mode (text inside `{}` indicates the information that should appear):\n\n```bash\nOpen ports for {URL} ({IP address})\nPORT     SERVICE\n{port}   {service name}\n{port}   {service name}\n```\n\nYou can use the dictionary in `common_ports.py` to get the correct service name for each port.\n\nFor example, if the function is called like this:\n\n```py\nport_scanner.get_open_ports(\"scanme.nmap.org\", [20, 80], True)\n```\n\nIt should return the following:\n\n```bash\nOpen ports for scanme.nmap.org (45.33.32.156)\nPORT     SERVICE\n22       ssh\n80       http\n```\n\nMake sure to include proper spacing and new line characters.\n\nIf the URL passed into the `get_open_ports` function is invalid, the function should return the string: \"Error: Invalid hostname\".\n\nIf the IP address passed into the `get_open_ports` function is invalid, the function should return the string: \"Error:  Invalid IP address\".\n\n## Development\n\nWrite your code in `port_scanner.py`. For development, you can use `main.py` to test your code.\n\n## Testing\n\nThe unit tests for this project are in `test_module.py`. We imported the tests from `test_module.py` to `main.py` for your convenience.\n\n## Submitting\n\nCopy your project's URL and submit it to freeCodeCamp.",
      "boilerplate": [],
      "solution": [
        {
          "language": "py",
          "code": "# Python challenges don't need solutions,\n  # because they would need to be tested against a full working project.\n  # Please check our contributing guidelines to learn more."
        }
      ],
      "tests": [
        {
          "text": "It should pass all Python tests.\n\n```js\n\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 462372,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\port-scanner.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-projects",
        "name": "Information Security Projects"
      }
    },
    {
      "id": "5e601c775ac9d0ecd8b94aff",
      "title": "Secure Real Time Multiplayer Game",
      "challengeType": 4,
      "dashedName": "secure-real-time-multiplayer-game",
      "description": "Develop a 2D real time multiplayer game using the HTML Canvas API and Socket.io that is functionally similar to this: <a href=\"https://secure-real-time-multiplayer-game.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://secure-real-time-multiplayer-game.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-secure-real-time-multiplayer-game/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "Create a secure multiplayer game in which each player can move their avatar, there is at least one collectible item, and the rank of the players is calculated based on their score.\n\nFor details consult the tests below.\n\nMake sure that your game is secure! Include these security measures:\n\n- The client should not be able to guess/sniff the MIME type\n- Prevent XSS attacks\n- Do not cache anything from the website in the client\n- The headers say that the site is powered by `PHP 7.4.3`\n\n**Note**: `helmet@^3.21.3` is needed for the user stories. This means you will need to use the previous version of Helmet's docs, for information on how to achieve the user stories.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You can provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/secure-real-time-multiplayer-game\\.freecodecamp\\.rocks/.test(\n      code\n    )\n  );"
        },
        {
          "text": "Multiple players can connect to a server and play.\n\n```js\n\n```\n\nEach player has an avatar.\n\n```js\n\n```\n\nEach player is represented by an object created by the `Player` class in `Player.mjs`.\n\n```js\n\n```\n\nAt a minimum, each player object should contain a unique `id`, a `score`, and `x` and `y` coordinates representing the player's current position.\n\n```js\n\n```\n\nThe game has at least one type of collectible item. Complete the `Collectible` class in `Collectible.mjs` to implement this.\n\n```js\n\n```\n\nAt a minimum, each collectible item object created by the `Collectible` class should contain a unique `id`, a `value`, and `x` and `y` coordinates representing the item's current position.\n\n```js\n\n```\n\nPlayers can use the WASD and/or arrow keys to move their avatar. Complete the `movePlayer` method in `Player.mjs` to implement this.\n\n```js\n\n```\n\nThe `movePlayer` method should accept two arguments: a string of \"up\", \"down\", \"left\", or \"right\", and a number for the amount of pixels the player's position should change. `movePlayer` should adjust the `x` and `y` coordinates of the player object it's called from.\n\n```js\n\n```\n\nThe player's score should be used to calculate their rank among the other players. Complete the `calculateRank` method in the `Player` class to implement this.\n\n```js\n\n```\n\nThe `calculateRank` method should accept an array of objects representing all connected players and return the string `Rank: currentRanking/totalPlayers`. For example, in a game with two players, if Player A has a score of 3 and Player B has a score of 5, `calculateRank` for Player A should return `Rank: 2/2`.\n\n```js\n\n```\n\nPlayers can collide with a collectible item. Complete the `collision` method in `Player.mjs` to implement this.\n\n```js\n\n```\n\nThe `collision` method should accept a collectible item's object as an argument. If the player's avatar intersects with the item, the `collision` method should return `true`.\n\n```js\n\n```\n\nAll players are kept in sync.\n\n```js\n\n```\n\nPlayers can disconnect from the game at any time.\n\n```js\n\n```\n\nPrevent the client from trying to guess / sniff the MIME type.",
          "testCode": "async () => {\n  const data = await fetch(code + '/_api/app-info');\n  const parsed = await data.json();\n  assert.equal(parsed.headers['x-content-type-options'], 'nosniff');\n};"
        },
        {
          "text": "Prevent cross-site scripting (XSS) attacks.",
          "testCode": "async () => {\n  const data = await fetch(code + '/_api/app-info');\n  const parsed = await data.json();\n  assert.equal(parsed.headers['x-xss-protection'], '1; mode=block');\n};"
        },
        {
          "text": "Nothing from the website is cached in the client.",
          "testCode": "async () => {\n  const data = await fetch(code + '/_api/app-info');\n  const parsed = await data.json();\n  assert.equal(parsed.headers['surrogate-control'], 'no-store');\n  assert.equal(\n    parsed.headers['cache-control'],\n    'no-store, no-cache, must-revalidate, proxy-revalidate'\n  );\n  assert.equal(parsed.headers['pragma'], 'no-cache');\n  assert.equal(parsed.headers['expires'], '0');\n};"
        },
        {
          "text": "The headers say that the site is powered by \"PHP 7.4.3\" even though it isn't (as a security measure).",
          "testCode": "async () => {\n  const data = await fetch(code + '/_api/app-info');\n  const parsed = await data.json();\n  assert.equal(parsed.headers['x-powered-by'], 'PHP 7.4.3');\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 462375,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\secure-real-time-multiplayer-game.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-projects",
        "name": "Information Security Projects"
      }
    },
    {
      "id": "5e46f983ac417301a38fb933",
      "title": "SHA-1 Password Cracker",
      "challengeType": 10,
      "dashedName": "sha-1-password-cracker",
      "description": "You will be <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-SHA-1-password-cracker\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">working on this project with our Gitpod starter code</a> Learn <a href=\"https://forum.freecodecamp.org/t/how-to-use-gitpod-in-the-curriculum/668669#how-can-i-share-my-workspace-to-get-help-8\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">how to share your Gitpod workspace to get help</a>.\n\nWe are still developing the interactive instructional part of the Python curriculum. For now, here are some videos on the freeCodeCamp.org YouTube channel that will teach you everything you need to know to complete this project:\n\n- <a href=\"https://www.freecodecamp.org/news/python-for-everybody/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Python for Everybody Video Course</a> (14 hours)\n\n- <a href=\"https://www.freecodecamp.org/news/learn-python-basics-in-depth-video-course/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Learn Python Basics in Depth</a> (4 hours)\n\n- <a href=\"https://www.freecodecamp.org/news/intermediate-python-course/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Intermediate Python Course</a> (6 hours)",
      "instructions": "Passwords should never be stored in plain text. They should be stored as hashes, just in case the password list is discovered. However, not all hashes are created equal.\n\nFor this project you will learn about the importance of good security by creating a password cracker to figure out passwords that were hashed using SHA-1.\n\nCreate a function that takes in a SHA-1 hash of a password and returns the password if it is one of the top 10,000 passwords used. If the SHA-1 hash is NOT of a password in the database, return \"PASSWORD NOT IN DATABASE\".\n\nThe function should hash each password from `top-10000-passwords.txt` and compare it to the hash passed into the function.\n\nThe function should take an optional second argument named `use_salts`. If set to true, each salt string from the file `known-salts.txt` should be appended AND prepended to each password from `top-10000-passwords.txt` before hashing and before comparing it to the hash passed into the function.\n\nHere are some hashed passwords to test the function with:\n\n- `b305921a3723cd5d70a375cd21a61e60aabb84ec` should return \"sammy123\"\n- `c7ab388a5ebefbf4d550652f1eb4d833e5316e3e` should return \"abacab\"\n- `5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8` should return \"password\"\n\nHere are some hashed passwords to test the function with when `use_salts` is set to `True`:\n\n- `53d8b3dc9d39f0184144674e310185e41a87ffd5` should return \"superman\"\n- `da5a4e8cf89539e66097acd2f8af128acae2f8ae` should return \"q1w2e3r4t5\"\n- `ea3f62d498e3b98557f9f9cd0d905028b3b019e1` should return \"bubbles1\"\n\nThe `hashlib` library has been imported for you. You should consider using it in your code. <a href=\"https://docs.python.org/3/library/hashlib.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Learn more about \"hashlib\" here</a>.\n\n## Development\n\nWrite your code in `password_cracker.py`. For development, you can use `main.py` to test your code.\n\n## Testing\n\nThe unit tests for this project are in `test_module.py`. We imported the tests from `test_module.py` to `main.py` for your convenience.\n\n## Submitting\n\nCopy your project's URL and submit it to freeCodeCamp.",
      "boilerplate": [],
      "solution": [
        {
          "language": "py",
          "code": "# Python challenges don't need solutions,\n  # because they would need to be tested against a full working project.\n  # Please check our contributing guidelines to learn more."
        }
      ],
      "tests": [
        {
          "text": "It should pass all Python tests.\n\n```js\n\n```",
          "testCode": ""
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 462374,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\sha-1-password-cracker.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-projects",
        "name": "Information Security Projects"
      }
    },
    {
      "id": "587d824a367417b2b2512c44",
      "title": "Stock Price Checker",
      "challengeType": 4,
      "dashedName": "stock-price-checker",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://stock-price-checker.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://stock-price-checker.freecodecamp.rocks/</a>.\n\nSince all reliable stock price APIs require an API key, we've built a workaround. Use <a href=\"https://stock-price-checker-proxy.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://stock-price-checker-proxy.freecodecamp.rocks/</a> to get up-to-date stock price information without needing to sign up for your own key. \n\nWorking on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-stockchecker/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "1.  Set the `NODE_ENV` environment variable to `test`, without quotes\n2.  Complete the project in `routes/api.js` or by creating a handler/controller\n3.  You will add any security features to `server.js`\n4.  You will create all of the functional tests in `tests/2_functional-tests.js`\n\n**Note** Privacy Considerations: Due to the requirement that only 1 like per IP should be accepted, you will have to save IP addresses. It is important to remain compliant with data privacy laws such as the General Data Protection Regulation. One option is to get permission to save the user's data, but it is much simpler to anonymize it. For this challenge, remember to anonymize IP addresses before saving them to the database. If you need ideas on how to do this, you may choose to hash the data, truncate it, or set part of the IP address to 0.\n\nWrite the following tests in `tests/2_functional-tests.js`:\n\n-   Viewing one stock: GET request to `/api/stock-prices/`\n-   Viewing one stock and liking it: GET request to `/api/stock-prices/`\n-   Viewing the same stock and liking it again: GET request to `/api/stock-prices/`\n-   Viewing two stocks: GET request to `/api/stock-prices/`\n-   Viewing two stocks and liking them: GET request to `/api/stock-prices/`",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You can provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/stock-price-checker\\.freecodecamp\\.rocks/.test(code)\n  );"
        },
        {
          "text": "You should set the content security policies to only allow loading of scripts and CSS from your server.",
          "testCode": "async () => {\n  const data = await fetch(code + '/_api/app-info');\n  const parsed = await data.json();\n  assert.isTrue(\n    parsed.headers['content-security-policy'].includes(\"script-src 'self'\")\n  );\n  assert.isTrue(\n    parsed.headers['content-security-policy'].includes(\"style-src 'self'\")\n  );\n};"
        },
        {
          "text": "You can send a `GET` request to `/api/stock-prices`, passing a NASDAQ stock symbol to a `stock` query parameter. The returned object will contain a property named `stockData`.",
          "testCode": "async () => {\n  const data = await fetch(\n    code + '/api/stock-prices?stock=GOOG'\n  );\n  const parsed = await data.json();\n  assert.property(parsed, 'stockData');\n};"
        },
        {
          "text": "The `stockData` property includes the `stock` symbol as a string, the `price` as a number, and `likes` as a number.",
          "testCode": "async () => {\n  const data = await fetch(\n    code + '/api/stock-prices?stock=GOOG'\n  );\n  const parsed = await data.json();\n  const ticker = parsed.stockData;\n  assert.typeOf(ticker.price, 'number');\n  assert.typeOf(ticker.likes, 'number');\n  assert.typeOf(ticker.stock, 'string');\n};"
        },
        {
          "text": "You can also pass along a `like` field as `true` (boolean) to have your like added to the stock(s). Only 1 like per IP should be accepted.\n\n```js\n\n```\n\nIf you pass along 2 stocks, the returned value will be an array with information about both stocks. Instead of `likes`, it will display `rel_likes` (the difference between the likes on both stocks) for both `stockData` objects.",
          "testCode": "async () => {\n  const data = await fetch(\n    code + '/api/stock-prices?stock=GOOG&stock=MSFT'\n  );\n  const parsed = await data.json();\n  const ticker = parsed.stockData;\n  assert.typeOf(ticker, 'array');\n  assert.property(ticker[0], 'rel_likes');\n  assert.property(ticker[1], 'rel_likes');\n};"
        },
        {
          "text": "All 5 functional tests are complete and passing.",
          "testCode": "async () => {\n  const tests = await fetch(code + '/_api/get-tests');\n  const parsed = await tests.json();\n  assert.isTrue(parsed.length >= 5);\n  parsed.forEach((test) => {\n    assert.equal(test.state, 'passed');\n  });\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301572,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\stock-price-checker.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-projects",
        "name": "Information Security Projects"
      }
    },
    {
      "id": "587d8248367417b2b2512c3c",
      "title": "Ask Browsers to Access Your Site via HTTPS Only with helmet.hsts()",
      "challengeType": 2,
      "dashedName": "ask-browsers-to-access-your-site-via-https-only-with-helmet-hsts",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nHTTP Strict Transport Security (HSTS) is a web security policy which helps to protect websites against protocol downgrade attacks and cookie hijacking. If your website can be accessed via HTTPS you can ask user’s browsers to avoid using insecure HTTP. By setting the header Strict-Transport-Security, you tell the browsers to use HTTPS for the future requests in a specified amount of time. This will work for the requests coming after the initial request.",
      "instructions": "Configure `helmet.hsts()` to use HTTPS for the next 90 days. Pass the config object `{maxAge: timeInSeconds, force: true}`. You can create a variable `ninetyDaysInSeconds = 90*24*60*60;` to use for the `timeInSeconds`.\n\nNote: Configuring HTTPS on a custom website requires the acquisition of a domain, and an SSL/TLS Certificate.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.hsts() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(data.appStack, 'hsts');\n      assert.property(data.headers, 'strict-transport-security');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "maxAge should be equal to 7776000 s (90 days)",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.match(\n        data.headers['strict-transport-security'],\n        /^max-age=7776000;?/\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301573,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\ask-browsers-to-access-your-site-via-https-only-with-helmet.hsts.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8248367417b2b2512c3a",
      "title": "Avoid Inferring the Response MIME Type with helmet.noSniff()",
      "challengeType": 2,
      "dashedName": "avoid-inferring-the-response-mime-type-with-helmet-nosniff",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nBrowsers can use content or MIME sniffing to override the `Content-Type` header of a response to guess and process the data using an implicit content type. While this can be convenient in some scenarios, it can also lead to some dangerous attacks. This middleware sets the `X-Content-Type-Options` header to `nosniff`, instructing the browser to not bypass the provided `Content-Type`.",
      "instructions": "Use the `helmet.noSniff()` method on your server.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.noSniff() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(data.appStack, 'nosniff');\n      assert.equal(data.headers['x-content-type-options'], 'nosniff');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301574,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\avoid-inferring-the-response-mime-type-with-helmet.nosniff.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8249367417b2b2512c40",
      "title": "Configure Helmet Using the ‘parent’ helmet() Middleware",
      "challengeType": 2,
      "dashedName": "configure-helmet-using-the-parent-helmet-middleware",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`app.use(helmet())` will automatically include all the middleware introduced above, except `noCache()`, and `contentSecurityPolicy()`, but these can be enabled if necessary. You can also disable or configure any other middleware individually, using a configuration object.\n\n**Example:**\n\n```js\napp.use(helmet({\n  frameguard: {         // configure\n    action: 'deny'\n  },\n  contentSecurityPolicy: {    // enable and configure\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: ['style.com'],\n    }\n  },\n  dnsPrefetchControl: false     // disable\n}))\n```\n\nWe introduced each middleware separately for teaching purposes and for ease of testing. Using the ‘parent’ `helmet()` middleware is easy to implement in a real project.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "no tests - it's a descriptive challenge",
          "testCode": "assert(true);"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301575,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\configure-helmet-using-the-parent-helmet-middleware.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8249367417b2b2512c3e",
      "title": "Disable Client-Side Caching with helmet.noCache()",
      "challengeType": 2,
      "dashedName": "disable-client-side-caching-with-helmet-nocache",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nIf you are releasing an update for your website, and you want the users to always download the newer version, you can (try to) disable caching on client’s browser. It can be useful in development too. Caching has performance benefits, which you will lose, so only use this option when there is a real need.",
      "instructions": "Use the `helmet.noCache()` method on your server.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.noCache() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(data.appStack, 'nocache');\n      assert.equal(\n        data.headers['cache-control'],\n        'no-store, no-cache, must-revalidate, proxy-revalidate'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301576,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\disable-client-side-caching-with-helmet.nocache.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8248367417b2b2512c3d",
      "title": "Disable DNS Prefetching with helmet.dnsPrefetchControl()",
      "challengeType": 2,
      "dashedName": "disable-dns-prefetching-with-helmet-dnsprefetchcontrol",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nTo improve performance, most browsers prefetch DNS records for the links in a page. In that way the destination ip is already known when the user clicks on a link. This may lead to over-use of the DNS service (if you own a big website, visited by millions people…), privacy issues (one eavesdropper could infer that you are on a certain page), or page statistics alteration (some links may appear visited even if they are not). If you have high security needs you can disable DNS prefetching, at the cost of a performance penalty.",
      "instructions": "Use the `helmet.dnsPrefetchControl()` method on your server.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.dnsPrefetchControl() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(data.appStack, 'dnsPrefetchControl');\n      assert.equal(data.headers['x-dns-prefetch-control'], 'off');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301577,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\disable-dns-prefetching-with-helmet.dnsprefetchcontrol.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "58a25bcff9fc0f352b528e7d",
      "title": "Hash and Compare Passwords Asynchronously",
      "challengeType": 2,
      "dashedName": "hash-and-compare-passwords-asynchronously",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-bcrypt/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nAs hashing is designed to be computationally intensive, it is recommended to do so asynchronously on your server as to avoid blocking incoming connections while you hash. All you have to do to hash a password asynchronous is call\n\n```js\nbcrypt.hash(myPlaintextPassword, saltRounds, (err, hash) => {\n  /*Store hash in your db*/\n});\n```",
      "instructions": "Add this hashing function to your server (we've already defined the variables used in the function for you to use) and log it to the console for you to see! At this point you would normally save the hash to your database.\n\nNow when you need to figure out if a new input is the same data as the hash you would just use the compare function.\n\n```js\nbcrypt.compare(myPlaintextPassword, hash, (err, res) => {\n  /*res == true or false*/\n});\n```\n\nAdd this into your existing hash function (since you need to wait for the hash to complete before calling the compare function) after you log the completed hash and log 'res' to the console within the compare. You should see in the console a hash, and then 'true' is printed! If you change 'myPlaintextPassword' in the compare function to 'someOtherPlaintextPassword', then it should say false.\n\n```js\nbcrypt.hash('passw0rd!', 13, (err, hash) => {\n  console.log(hash);\n  //$2a$12$Y.PHPE15wR25qrrtgGkiYe2sXo98cjuMCG1YwSI5rJW1DSJp0gEYS\n  bcrypt.compare('passw0rd!', hash, (err, res) => {\n    console.log(res); //true\n  });\n});\n\n```\n\nSubmit your page when you think you've got it right.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Async hash should be generated and correctly compared.",
          "testCode": "$.get(code + '/_api/server.js').then(\n    (data) => {\n      assert.match(\n        data,\n        /START_ASYNC[^]*bcrypt.hash.*myPlaintextPassword( |),( |)saltRounds( |),( |).*err( |),( |)hash[^]*END_ASYNC/gi,\n        'You should call bcrypt.hash on myPlaintextPassword and saltRounds and handle err and hash as a result in the callback'\n      );\n      assert.match(\n        data,\n        /START_ASYNC[^]*bcrypt.hash[^]*bcrypt.compare.*myPlaintextPassword( |),( |)hash( |),( |).*err( |),( |)res[^]*}[^]*}[^]*END_ASYNC/gi,\n        'Nested within the hash function should be the compare function comparing myPlaintextPassword to hash'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.statusText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301578,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hash-and-compare-passwords-asynchronously.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "58a25bcff9fc0f352b528e7e",
      "title": "Hash and Compare Passwords Synchronously",
      "challengeType": 2,
      "dashedName": "hash-and-compare-passwords-synchronously",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-bcrypt/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nHashing synchronously is just as easy to do but can cause lag if using it server side with a high cost or with hashing done very often. Hashing with this method is as easy as calling\n\n```js\nvar hash = bcrypt.hashSync(myPlaintextPassword, saltRounds);\n```\n\nAdd this method of hashing to your code and then log the result to the console. Again, the variables used are already defined in the server so you won't need to adjust them. You may notice even though you are hashing the same password as in the async function, the result in the console is different- this is due to the salt being randomly generated each time as seen by the first 22 characters in the third string of the hash. Now to compare a password input with the new sync hash, you would use the compareSync method:\n\n```js\nvar result = bcrypt.compareSync(myPlaintextPassword, hash);\n```\n\nwith the result being a boolean true or false.",
      "instructions": "Add the function in and log the result to the console to see it working.\n\nSubmit your page when you think you've got it right.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Sync hash should be generated and correctly compared.",
          "testCode": "$.get(code + '/_api/server.js').then(\n    (data) => {\n      assert.match(\n        data,\n        /START_SYNC[^]*hash.*=.*bcrypt.hashSync.*myPlaintextPassword( |),( |)saltRounds[^]*END_SYNC/gi,\n        'You should call bcrypt.hashSync on myPlaintextPassword with saltRounds'\n      );\n      assert.match(\n        data,\n        /START_SYNC[^]*result.*=.*bcrypt.compareSync.*myPlaintextPassword( |),( |)hash[^]*END_SYNC/gi,\n        'You should call bcrypt.compareSync on myPlaintextPassword with the hash generated in the last line'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.statusText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301579,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hash-and-compare-passwords-synchronously.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8247367417b2b2512c37",
      "title": "Hide Potentially Dangerous Information Using helmet.hidePoweredBy()",
      "challengeType": 2,
      "dashedName": "hide-potentially-dangerous-information-using-helmet-hidepoweredby",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nHackers can exploit known vulnerabilities in Express/Node if they see that your site is powered by Express. `X-Powered-By: Express` is sent in every request coming from Express by default. Use the `helmet.hidePoweredBy()` middleware to remove the X-Powered-By header.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.hidePoweredBy() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(data.appStack, 'hidePoweredBy');\n      assert.notEqual(data.headers['x-powered-by'], 'Express');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301580,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hide-potentially-dangerous-information-using-helmet.hidepoweredby.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8247367417b2b2512c36",
      "title": "Install and Require Helmet",
      "challengeType": 2,
      "dashedName": "install-and-require-helmet",
      "description": "Working on these challenges will involve you writing your code using one of the following methods:\n\n- Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete these challenges locally.\n- Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n\nHelmet helps you secure your Express apps by setting various HTTP headers.",
      "instructions": "All your code for these lessons goes in the `myApp.js` file between the lines of code we have started you off with. Do not change or delete the code we have added for you.\n\nHelmet version `3.21.3` has already been installed, so require it as `helmet` in `myApp.js`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`helmet` version `3.21.3` should be in `package.json`",
          "testCode": "$.get(code + '/_api/package.json').then(\n    (data) => {\n      const packJson = JSON.parse(data);\n      const helmet = packJson.dependencies.helmet;\n      assert(helmet === '3.21.3' || helmet === '^3.21.3');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301581,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\install-and-require-helmet.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8247367417b2b2512c38",
      "title": "Mitigate the Risk of Clickjacking with helmet.frameguard()",
      "challengeType": 2,
      "dashedName": "mitigate-the-risk-of-clickjacking-with-helmet-frameguard",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nYour page could be put in a `<frame>` or `<iframe>` without your consent. This can result in clickjacking attacks, among other things. Clickjacking is a technique of tricking a user into interacting with a page different from what the user thinks it is. This can be obtained by executing your page in a malicious context, by means of iframing. In that context, a hacker can put a hidden layer over your page. Hidden buttons can be used to run bad scripts. This middleware sets the X-Frame-Options header. It restricts who can put your site in a frame. It has three modes: DENY, SAMEORIGIN, and ALLOW-FROM.\n\nWe don’t need our app to be framed.",
      "instructions": "Use `helmet.frameguard()` passing with the configuration object `{action: 'deny'}`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.frameguard() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(\n        data.appStack,\n        'frameguard',\n        'helmet.frameguard() middleware is not mounted correctly'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "helmet.frameguard() 'action' should be set to 'DENY'",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.property(data.headers, 'x-frame-options');\n      assert.equal(data.headers['x-frame-options'], 'DENY');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301582,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\mitigate-the-risk-of-clickjacking-with-helmet.frameguard.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8247367417b2b2512c39",
      "title": ">-",
      "challengeType": 2,
      "dashedName": "mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nCross-site scripting (XSS) is a frequent type of attack where malicious scripts are injected into vulnerable pages, with the purpose of stealing sensitive data like session cookies, or passwords.\n\nThe basic rule to lower the risk of an XSS attack is simple: \"Never trust user's input\". As a developer you should always sanitize all the input coming from the outside. This includes data coming from forms, GET query urls, and even from POST bodies. Sanitizing means that you should find and encode the characters that may be dangerous e.g. &lt;, >.\n\nModern browsers can help mitigating the risk by adopting better software strategies. Often these are configurable via http headers.\n\nThe X-XSS-Protection HTTP header is a basic protection. The browser detects a potential injected script using a heuristic filter. If the header is enabled, the browser changes the script code, neutralizing it. It still has limited support.",
      "instructions": "Use `helmet.xssFilter()` to sanitize input sent to your server.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.xssFilter() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(data.appStack, 'xXssProtection');\n      assert.property(data.headers, 'x-xss-protection');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301583,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet.xssfilter.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8248367417b2b2512c3b",
      "title": "Prevent IE from Opening Untrusted HTML with helmet.ieNoOpen()",
      "challengeType": 2,
      "dashedName": "prevent-ie-from-opening-untrusted-html-with-helmet-ienoopen",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nSome web applications will serve untrusted HTML for download. Some versions of Internet Explorer by default open those HTML files in the context of your site. This means that an untrusted HTML page could start doing bad things in the context of your pages. This middleware sets the X-Download-Options header to noopen. This will prevent IE users from executing downloads in the trusted site's context.",
      "instructions": "Use the `helmet.ieNoOpen()` method on your server.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.ieNoOpen() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(data.appStack, 'ienoopen');\n      assert.equal(data.headers['x-download-options'], 'noopen');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301584,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\prevent-ie-from-opening-untrusted-html-with-helmet.ienoopen.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "587d8249367417b2b2512c3f",
      "title": "Set a Content Security Policy with helmet.contentSecurityPolicy()",
      "challengeType": 2,
      "dashedName": "set-a-content-security-policy-with-helmet-contentsecuritypolicy",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-infosec/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nThis challenge highlights one promising new defense that can significantly reduce the risk and impact of many type of attacks in modern browsers. By setting and configuring a Content Security Policy you can prevent the injection of anything unintended into your page. This will protect your app from XSS vulnerabilities, undesired tracking, malicious frames, and much more. CSP works by defining an allowed list of content sources which are trusted. You can configure them for each kind of resource a web page may need (scripts, stylesheets, fonts, frames, media, and so on...). There are multiple directives available, so a website owner can have a granular control. See HTML 5 Rocks, KeyCDN for more details. Unfortunately CSP is unsupported by older browsers.\n\nBy default, directives are wide open, so it’s important to set the defaultSrc directive as a fallback. Helmet supports both defaultSrc and default-src naming styles. The fallback applies for most of the unspecified directives.",
      "instructions": "In this exercise, use `helmet.contentSecurityPolicy()`. Configure it by adding a `directives` object. In the object, set the `defaultSrc` to `[\"'self'\"]` (the list of allowed sources must be in an array), in order to trust only your website address by default. Also set the `scriptSrc` directive so that you only allow scripts to be downloaded from your website (`'self'`), and from the domain `'trusted-cdn.com'`.\n\nHint: in the `'self'` keyword, the single quotes are part of the keyword itself, so it needs to be enclosed in double quotes to be working.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "helmet.contentSecurityPolicy() middleware should be mounted correctly",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      assert.include(data.appStack, 'csp');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "Your csp config is not correct. defaultSrc should be [\"'self'\"] and scriptSrc should be [\"'self'\", 'trusted-cdn.com']",
          "testCode": "$.get(code + '/_api/app-info').then(\n    (data) => {\n      var cspHeader = Object.keys(data.headers).filter(function (k) {\n        return (\n          k === 'content-security-policy' ||\n          k === 'x-webkit-csp' ||\n          k === 'x-content-security-policy'\n        );\n      })[0];\n      assert.equal(\n        data.headers[cspHeader],\n        \"default-src 'self'; script-src 'self' trusted-cdn.com\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301585,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\set-a-content-security-policy-with-helmet.contentsecuritypolicy.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "58a25bcef9fc0f352b528e7c",
      "title": "Understand BCrypt Hashes",
      "challengeType": 2,
      "dashedName": "understand-bcrypt-hashes",
      "description": "For the following challenges, you will be working with a new starter project that is different from the previous one. You can find the new starter project to clone on <a href=\"https://github.com/freeCodeCamp/boilerplate-bcrypt/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nBCrypt hashes are very secure. A hash is basically a fingerprint of the original data- always unique. This is accomplished by feeding the original data into an algorithm and returning a fixed length result. To further complicate this process and make it more secure, you can also *salt* your hash. Salting your hash involves adding random data to the original data before the hashing process which makes it even harder to crack the hash.\n\nBCrypt hashes will always look like `$2a$13$ZyprE5MRw2Q3WpNOGZWGbeG7ADUre1Q8QO.uUUtcbqloU0yvzavOm` which does have a structure. The first small bit of data `$2a` is defining what kind of hash algorithm was used. The next portion `$13` defines the *cost*. Cost is about how much power it takes to compute the hash. It is on a logarithmic scale of 2^cost and determines how many times the data is put through the hashing algorithm. For example, at a cost of 10 you are able to hash 10 passwords a second on an average computer, however at a cost of 15 it takes 3 seconds per hash... and to take it further, at a cost of 31 it would take multiple days to complete a hash. A cost of 12 is considered very secure at this time. The last portion of your hash `$ZyprE5MRw2Q3WpNOGZWGbeG7ADUre1Q8QO.uUUtcbqloU0yvzavOm`, looks like one large string of numbers, periods, and letters but it is actually two separate pieces of information. The first 22 characters is the salt in plain text, and the rest is the hashed password!",
      "instructions": "Add all your code for these lessons in the `server.js` file between the code we have started you off with. Do not change or delete the code we have added for you.\n\nBCrypt has already been added as a dependency, so require it as `bcrypt` in your server.\n\nSubmit your page when you think you've got it right.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "BCrypt should be a dependency.",
          "testCode": "$.get(code + '/_api/package.json').then(\n    (data) => {\n      var packJson = JSON.parse(data);\n      assert.property(\n        packJson.dependencies,\n        'bcrypt',\n        'Your project should list \"bcrypt\" as a dependency'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.statusText);\n    }\n  );"
        },
        {
          "text": "BCrypt should be properly required.",
          "testCode": "$.get(code + '/_api/server.js').then(\n    (data) => {\n      assert.match(\n        data,\n        /bcrypt.*=.*require.*('|\")bcrypt('|\")/gi,\n        'You should correctly require and instantiate socket.io as io.'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.statusText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301586,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\understand-bcrypt-hashes.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "information-security-with-helmetjs",
        "name": "Information Security With Helmetjs"
      }
    },
    {
      "id": "5ea9997bbec2e9bc47e94db0",
      "title": "Creating a TCP Client",
      "challengeType": 11,
      "dashedName": "creating-a-tcp-client",
      "description": "",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\creating-a-tcp-client.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "python-for-penetration-testing",
        "name": "Python For Penetration Testing"
      }
    },
    {
      "id": "5ea9997bbec2e9bc47e94db3",
      "title": "Developing a Banner Grabber",
      "challengeType": 11,
      "dashedName": "developing-a-banner-grabber",
      "description": "",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-a-banner-grabber.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "python-for-penetration-testing",
        "name": "Python For Penetration Testing"
      }
    },
    {
      "id": "5ea9997bbec2e9bc47e94db4",
      "title": "Developing a Port Scanner",
      "challengeType": 11,
      "dashedName": "developing-a-port-scanner",
      "description": "",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-a-port-scanner.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "python-for-penetration-testing",
        "name": "Python For Penetration Testing"
      }
    },
    {
      "id": "5ea9997bbec2e9bc47e94db1",
      "title": "Developing an Nmap Scanner part 1",
      "challengeType": 11,
      "dashedName": "developing-an-nmap-scanner-part-1",
      "description": "",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-an-nmap-scanner-part-1.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "python-for-penetration-testing",
        "name": "Python For Penetration Testing"
      }
    },
    {
      "id": "5ea9997bbec2e9bc47e94db2",
      "title": "Developing an Nmap Scanner part 2",
      "challengeType": 11,
      "dashedName": "developing-an-nmap-scanner-part-2",
      "description": "",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-an-nmap-scanner-part-2.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "python-for-penetration-testing",
        "name": "Python For Penetration Testing"
      }
    },
    {
      "id": "5ea9997bbec2e9bc47e94dae",
      "title": "Introduction and Setup",
      "challengeType": 11,
      "dashedName": "introduction-and-setup",
      "description": "",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\introduction-and-setup.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "python-for-penetration-testing",
        "name": "Python For Penetration Testing"
      }
    },
    {
      "id": "5ea9997bbec2e9bc47e94daf",
      "title": "Understanding Sockets and Creating a TCP Server",
      "challengeType": 11,
      "dashedName": "understanding-sockets-and-creating-a-tcp-server",
      "description": "",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\understanding-sockets-and-creating-a-tcp-server.md"
      },
      "section": {
        "id": "09-information-security",
        "name": "09-information-security"
      },
      "lesson": {
        "id": "python-for-penetration-testing",
        "name": "Python For Penetration Testing"
      }
    }
  ],
  "metadata": {
    "total_challenges": 26,
    "challenges_with_content": 19
  }
}