{
  "title": "Learn Advanced Array Methods By Building A Statistics Calculator",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Step 1",
      "description": "Statistics is a way of using math to make sense of data. It helps us understand patterns and trends in information, so we can make predictions and decisions based on that information.\n\nIn this challenge, you will build a statistics calculator that takes a set of numbers and returns the mean, median, mode, standard deviation, and variance.\n\nThe HTML and CSS have been provided for you. Feel free to explore the code â€“ you may notice that the `calculate` function is called when the form is submitted. When you are ready, declare a `calculate` variable and assign it an empty function in the `script.js` file.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `const` keyword to declare a variable `calculate`.\n\n```js\nassert.match(code, /const\\s+calculate/);\n```\n\nYour `calculate` variable should be a function.\n\n```js\nassert.isFunction(calculate);\n```\n\nYour `calculate` function should be empty.\n\n```js\nassert.match(calculate.toString(), /\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 2",
      "description": "To begin, the `calculate` function needs to find the number that was entered in the `#numbers` input field. To do this, use a `.querySelector` to locate the input field and then use the `.value` property to get the number entered.\n\nStore this in a `value` variable.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst calculate = () => {\n\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `calculate` function should have a `value` variable.\n\n```js\nassert.match(calculate.toString(), /value/);\n```\n\nYour `calculate` function should call `document.querySelector()` with `\"#numbers\"` as the argument.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*(\"|')#numbers\\1\\s*\\)/)\n```\n\nYou should access the `value` property of your `document.querySelector()` call.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*(\"|')#numbers\\1\\s*\\)\\.value/);\n```\n\nYou should assign the `value` property to your `value` variable.\n\n```js\nassert.match(calculate.toString(), /value\\s*=\\s*document\\.querySelector\\(\\s*(\"|')#numbers\\1\\s*\\)\\.value/);\n```"
    },
    {
      "title": "Step 3",
      "description": "Now that you have the value of the input, you need to split it into an array of numbers. Use the `.split()` method to do this.\n\nThe `.split()` method takes a string and splits it into an array of strings. You can pass it a string of characters or a RegEx to use as a separator. For example, `string.split(\",\")` would split the string at each comma and return an array of strings.\n\nUse the `/,\\s*/g` regex to split the `value` string by commas. You can tweak it based on the number of spaces separating your values. Store the array in an `array` variable.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `calculate` function should have an `array` variable.\n\n```js\nassert.match(code.toString(), /array/);\n```\n\nYour `calculate` function should call the `.split()` method on the `value` variable.\n\n```js\nassert.match(code.toString(), /value\\.split()/);\n```\n\nYour `calculate` function should assign the result of the `.split()` method to the `array` variable.\n\n```js\nassert.match(code.toString(),  /array\\s*=\\s*value\\.split()/);\n```\n\nYou should use `/,\\s*/g` for the `split()` method's separator.\n\n```js\nassert.match(code.toString(), /value\\.split\\(\\s*\\/,\\s*\\\\s*\\*\\s*\\/g\\s*\\)/);\n```"
    },
    {
      "title": "Step 4",
      "description": "The value of an input element is always a string, even if the input type is `number`. You need to convert this array of strings into an array of numbers. To do this, you can use the `.map()` method.\n\nCreate a `numbers` variable and assign it the value of `array.map()`. Remember that `.map()` creates a new array, instead of mutating the original array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `calculate` function should have a `numbers` variable.\n\n```js\nassert.match(calculate.toString(), /(let|const|var)\\s+numbers/);\n```\n\nYou should use the `.map()` method on your `array` variable.\n\n```js\nassert.match(calculate.toString(), /array\\.map\\(\\s*\\)/);\n```\n\nYou should assign the result of your `.map()` call to your `numbers` variable.\n\n```js\nassert.match(calculate.toString(), /numbers\\s*=\\s*array\\.map()/);\n```"
    },
    {
      "title": "Step 5",
      "description": "The `.map()` method takes a callback function as its first argument. This callback function takes a few arguments, but the first one is the current element being processed. Here is an example:\n\n```js\narray.map(el => {\n\n})\n```\n\nThe callback function needs to return a value. In this case, you want to return the value of each element converted to a number. You can do this by using the `Number()` constructor, passing the element as an argument.\n\nAdd a callback function to your `.map()` method that converts each element to a number.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map();\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `.map()` method should have a callback function.\n\n```js\nassert.match(calculate.toString(), /array\\.map\\(\\s*(\\(\\s*\\w+\\s*\\)|\\w+)\\s*=>|array\\.map\\(\\s*function\\s*\\(\\s*\\w+\\s*\\)\\s*\\{|array\\.map\\(\\s*Number\\s*\\)/)\n```\n\nYour callback function should use the `Number` constructor to convert each array element to a number.\n\n```js\nassert.match(calculate.toString(), /Number\\(\\s*\\w+\\s*\\)|Number/);\n```\n\nYour callback function should not use the `new` keyword with the `Number` constructor.\n\n```js\nassert.notMatch(calculate.toString(), /new/);\n```\n\nYour callback function should return the element converted to a number.\n\n```js\nassert.match(calculate.toString(), /(array\\.map\\(\\s*(\\(\\s*\\w+\\s*\\)|\\w+)\\s*=>|array\\.map\\(\\s*function\\s*\\(\\s*\\w+\\s*\\)\\s*\\{)\\s*(return\\s+)?Number\\(\\s*\\w+\\s*\\)|array\\.map\\(\\s*Number\\s*\\)/);\n```"
    },
    {
      "title": "Step 6",
      "description": "A user could put any text they want into the input box. You want to make sure that you are only working with numbers. The `Number()` constructor will return `NaN` (which stands for \"not a number\") if the value passed to it cannot be converted to a number.\n\nYou need to filter these values out â€“ thankfully, arrays have a method specifically for this. The `.filter()` method will allow you to filter elements out of an array, creating a new array in the process.\n\nDeclare a `filtered` variable and assign `numbers.filter()` to it.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el));\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `calculate` function should have a `filtered` variable.\n\n```js\nassert.match(calculate.toString(), /filtered/);\n```\n\nYour `calculate` function should use the `.filter()` method on the `numbers` array.\n\n```js\nassert.match(calculate.toString(), /numbers\\.filter\\(\\s*\\)/)\n```\n\nYou should assign the result of `numbers.filter()` to the `filtered` variable.\n\n```js\nassert.match(calculate.toString(), /filtered\\s*=\\s*numbers\\.filter\\(\\s*\\)/);\n```"
    },
    {
      "title": "Step 7",
      "description": "Much like the `.map()` method, the `.filter()` method takes a callback function. The callback function takes the current element as its first argument.\n\n```js\narray.filter(el => {\n\n})\n```\n\nThe callback function needs to return a Boolean value, which indicates whether the element should be included in the new array. In this case, you want to return `true` if the element is not `NaN` (not a number).\n\nHowever, you cannot check for equality here, because `NaN` is not equal to itself. Instead, you can use the `isNaN()` method, which returns `true` if the argument is `NaN`.\n\nAdd a callback function to your `.filter()` method with `el` as its parameter, and use an implicit return to return `true` if the element is NOT `NaN`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el));\n  const filtered = numbers.filter();\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `.filter()` method should have a callback which accepts `el` as a parameter.\n\n```js\nassert.match(calculate.toString(), /numbers\\.filter\\(\\s*(\\(\\s*el\\s*\\)|el)\\s*=>|numbers\\.filter\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{/)\n```\n\nYour callback function should use `!` and `isNaN()` to check if `el` is NOT `NaN`.\n\n```js\nassert.match(calculate.toString(), /!\\s*(Number\\.)?isNaN\\(\\s*el\\s*\\)/);\n```\n\nYour callback function should return elements that are not `NaN`.\n\n```js\nassert.match(calculate.toString(), /(numbers\\.filter\\(\\s*(\\(\\s*el\\s*\\)|el)\\s*=>|numbers\\.filter\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{)\\s*(return\\s*)?!(Number\\.)?isNaN\\(\\s*el\\s*\\)/);\n```"
    },
    {
      "title": "Step 8",
      "description": "Array methods can often be chained together to perform multiple operations at once. As an example:\n\n```js\narray.map().filter();\n```\n\nThe `.map()` method is called on the array, and then the `.filter()` method is called on the result of the `.map()` method. This is called method chaining.\n\nFollowing that example, remove your `filtered` variable, and chain your `.filter()` call to your `.map()` call above. Do not remove either of the callback functions.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el));\n  const filtered = numbers.filter(el => !isNaN(el));\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should remove the `filtered` variable.\n\n```js\nassert.notMatch(calculate.toString(), /filtered/);\n```\n\nYou should chain your `.filter()` call to your `.map()` call.\n\n```js\nassert.match(calculate.toString(), /array\\.map\\(.*\\)\\.filter\\(/s);\n```\n\nYou should not remove the `.map()` callback.\n\n```js\nassert.match(calculate.toString(), /(array\\.map\\(\\s*(\\(\\s*el\\s*\\)|el)\\s*=>|array\\.map\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+)?Number\\(\\s*el\\s*\\)/);\n```\n\nYou should not remove the `.filter()` callback.\n\n```js\nassert.match(calculate.toString(), /(\\.filter\\(\\s*(\\(\\s*el\\s*\\)|el)\\s*=>|\\.filter\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{)\\s*(return\\s*)?!(Number\\.)?isNaN\\(\\s*el\\s*\\)/s);\n```"
    },
    {
      "title": "Step 9",
      "description": "That is as far as you can get with the calculate function for now. It is time to write your mean logic.\n\nCreate an empty function called `getMean`. It should take a single parameter `array`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}"
        }
      ],
      "testCode": "You should declare a `getMean` function.\n\n```js\nassert.isFunction(getMean);\n```\n\nYour `getMean` function should take a single `array` parameter.\n\n```js\nassert.match(getMean.toString(), /\\(\\s*array\\s*\\)/);\n```\n\nYour `getMean` function should be empty.\n\n```js\nassert.match(getMean.toString(), /\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 10",
      "description": "The <dfn>mean</dfn> is the average value of all numbers in a list. The first step in calculating the mean is to take the sum of all numbers in the list. Arrays have another method, called `.reduce()`, which is perfect for this situation. The `.reduce()` method takes an array and applies a callback function to condense the array into a single value.\n\nDeclare a `sum` variable and assign `array.reduce()` to it.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst getMean = (array) => {\n\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}"
        }
      ],
      "testCode": "Your `getMean` function should have a `sum` variable.\n\n```js\nassert.match(getMean.toString(), /sum/);\n```\n\nYour `getMean` function should use the `.reduce()` method of the `array` parameter.\n\n```js\nassert.match(getMean.toString(), /array\\.reduce\\(\\s*\\)/);\n```\n\nYou should assign the result of `array.reduce()` to the `sum` variable.\n\n```js\nassert.match(getMean.toString(), /sum\\s*=\\s*array\\.reduce\\(\\s*\\)/);\n```"
    },
    {
      "title": "Step 11",
      "description": "Like the other methods, `.reduce()` takes a callback. This callback, however, takes at least two parameters. The first is the <dfn>accumulator</dfn>, and the second is the current element in the array. The return value for the callback becomes the value of the accumulator on the next iteration.\n\n```js\narray.reduce((acc, el) => {\n\n});\n```\n\nFor your `sum` variable, pass a callback to `.reduce()` that takes the accumulator and the current element as parameters. The callback should return the sum of the accumulator and the current element.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst getMean = (array) => {\n  const sum = array.reduce();\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}"
        }
      ],
      "testCode": "Your `reduce` method should have a callback function which takes an `acc` and an `el` parameters.\n\n```js\nassert.match(getMean.toString(), /(array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)/)\n```\n\nYour `reduce` method should return the sum of `acc` and `el`.\n\n```js\nassert.match(getMean.toString(), /(array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+)?\\s*acc\\s*\\+\\s*el/)\n```"
    },
    {
      "title": "Step 12",
      "description": "The `.reduce()` method takes a second argument that is used as the initial value of the accumulator. Without a second argument, the `.reduce()` method uses the first element of the array as the accumulator, which can lead to unexpected results.\n\nTo be safe, it's best to set an initial value. Here is an example of setting the initial value to an empty string:\n\n```js\narray.reduce((acc, el) => acc + el.toLowerCase(), \"\");\n```\n\nSet the initial value of the accumulator to `0`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst getMean = (array) => {\n  const sum = array.reduce((acc, el) => acc + el);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}"
        }
      ],
      "testCode": "Your `reduce` method should have `0` as the initial value.\n\n```js\nassert.match(getMean.toString(), /(array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+)?\\s*acc\\s*\\+\\s*el\\s*;?\\s*\\}?\\s*,\\s*0\\s*\\)/)\n```"
    },
    {
      "title": "Step 13",
      "description": "The next step in calculating the mean is to divide the sum of numbers by the count of numbers in the list. \n\nDeclare a `mean` variable and assign it the value of `sum` divided by the length of `array`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst getMean = (array) => {\n  const sum = array.reduce((acc, el) => acc + el, 0);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}"
        }
      ],
      "testCode": "Your `getMean` function should have a `mean` variable.\n\n```js\nassert.match(getMean.toString(), /mean\\s*=/);\n```\n\nYou should assign the value of `sum` divided by `array.length` to the `mean` variable.\n\n```js\nassert.match(getMean.toString(), /mean\\s*=\\s*sum\\s*\\/\\s*array\\.length/);\n```"
    },
    {
      "title": "Step 14",
      "description": "Finally, you need to return the value of `mean`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst getMean = (array) => {\n  const sum = array.reduce((acc, el) => acc + el, 0);\n  const mean = sum / array.length;\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}"
        }
      ],
      "testCode": "Your `getMean` function should use the `return` keyword.\n\n```js\nconst functionContents = code.split(/const\\s+getMean\\s*=\\s*/)?.[1]?.split(/\\}/)?.[0];\nassert.match(functionContents, /return/);\n```\n\nYour `getMean` function should return the value of `mean`.\n\n```js\nconst functionContents = code.split(/const\\s+getMean\\s*=\\s*/)?.[1]?.split(/\\}/)?.[0];\nassert.match(functionContents, /return\\s+mean/);\n```\n\nYour `return` statement should be after the `mean` variable declaration.\n\n```js\nconst functionContents = code.split(/const\\s+getMean\\s*=\\s*/)?.[1]?.split(/\\}/)?.[0];\nassert.match(functionContents, /const\\s+mean\\s*=\\s*sum\\s*\\/\\s*array\\.length\\s*;?\\s*return\\s+mean/);\n```"
    },
    {
      "title": "Step 15",
      "description": "You can actually clean this logic up a bit. Using the implicit return of an arrow function, you can directly return the value of the `.reduce()` method divided by the length of the array, without having to assign any variables.\n\nUpdate your `getMean` function as described above.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst getMean = (array) => {\n  const sum = array.reduce((acc, el) => acc + el, 0);\n  const mean = sum / array.length;\n  return mean;\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}"
        }
      ],
      "testCode": "You should remove the `sum` variable declaration.\n\n```js\nassert.notMatch(getMean.toString(), /sum\\s*=/);\n```\n\nYou should remove the `mean` variable declaration.\n\n```js\nassert.notMatch(getMean.toString(), /mean\\s*=/);\n```\n\nYou should not change the logic within the `reduce` method.\n\n```js\nassert.match(getMean.toString(), /(array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+)?\\s*acc\\s*\\+\\s*el\\s*;?\\s*\\}?\\s*,\\s*0\\s*\\)/)\n```\n\nYou should divide the result of the `reduce` method by the length of the array.\n\n```js\nassert.match(getMean.toString(), /(array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+)?\\s*acc\\s*\\+\\s*el\\s*;?\\s*\\}?\\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\.length/)\n```\n\nYou should use implicit return syntax to directly return the result of `reduce` divided by the array length.\n\n```js\nassert.match(code, /const\\s+getMean\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>\\s*acc\\s*\\+\\s*el\\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\.length/)\n```"
    },
    {
      "title": "Step 16",
      "description": "Now you need to use your new `getMean` function. In your `calculate` function, declare a `mean` variable and assign it the value of `getMean(numbers)`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `calculate` function should have a `mean` variable.\n\n```js\nassert.match(calculate.toString(), /mean\\s*=/);\n```\n\nYour `mean` variable should be assigned the value of `getMean(numbers)`.\n\n```js\nassert.match(calculate.toString(), /mean\\s*=\\s*getMean\\(\\s*numbers\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 17",
      "description": "To display the value of `mean`, your app has a `#mean` element ready to go.\n\nUse a `.querySelector` to find that element, and then set its `.textContent` to the value of `mean`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `calculate` function should use a `document.querySelector()`.\n\n```js\nassert.lengthOf(calculate.toString().match(/document\\.querySelector\\(/g), 2);\n```\n\nYour `.querySelector()` should target the `#mean` element.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*('|\")#mean\\1\\s*\\)/);\n```\n\nYour `calculate` function should set the `#mean` element's `.textContent` to the value of `mean`.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*('|\")#mean\\1\\s*\\)\\s*\\.textContent\\s*=\\s*mean\\s*;?/);\n```"
    },
    {
      "title": "Step 18",
      "description": "If you test your form with a list of numbers, you should see the mean display on the page. However, this only works because freeCodeCamp's iframe has special settings. Normally, when a form is submitted, the event triggers a page refresh.\n\nTo resolve this, add `return false;` after your `calculate();` call in the `onsubmit` attribute.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n--fcc-editable-region--\n    <form onsubmit=\"calculate();\">\n--fcc-editable-region--\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "Your `onsubmit` attribute should have a `return false;` statement.\n\n```js\nassert.match(document.querySelector(\"form\").getAttribute(\"onsubmit\"), /return\\s+false\\s*;?/);\n```\n\nYour `onsubmit` attribute should still call `calculate()`.\n\n```js\nassert.match(document.querySelector(\"form\").getAttribute(\"onsubmit\"), /calculate\\(\\s*\\)/);\n```\n\nYou should return `false` after you call `calculate()`.\n\n```js\nassert.match(document.querySelector(\"form\").getAttribute(\"onsubmit\"), /calculate\\(\\s*\\)\\s*;?\\s*return\\s+false\\s*;?/);\n```"
    },
    {
      "title": "Step 19",
      "description": "Time to start working on the <dfn>median</dfn> calculation. The median is the midpoint of a set of numbers.\n\nBegin with an empty function called `getMedian`, which should take an `array` parameter.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "You should define a `getMedian` function.\n\n```js\nassert.isFunction(getMedian);\n```\n\nYour `getMedian` function should take an `array` parameter.\n\n```js\nassert.match(getMedian.toString(), /\\(\\s*array\\s*\\)/);\n```\n\nYour `getMedian` function should be empty.\n\n```js\nassert.match(getMedian.toString(), /\\(\\s*array\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 20",
      "description": "The first step in calculating the median is to ensure the list of numbers is sorted from least to greatest. Once again, there is an array method ideal for this â€“ the `.sort()` method.\n\nDeclare a `sorted` variable and assign `array.sort()` to it.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst getMedian = (array) => {\n\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "Your `getMedian` function should have a `sorted` variable.\n\n```js\nassert.match(getMedian.toString(), /sorted\\s*=/);\n```\n\nYour `getMedian` function should assign `array.sort()` to the `sorted` variable.\n\n```js\nassert.match(getMedian.toString(), /sorted\\s*=\\s*array\\.sort\\(\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 21",
      "description": "By default, the `.sort()` method converts the elements of an array into strings, then sorts them alphabetically. The `.sort()` method mutates the original array. This works well for strings, but not so well for numbers. For example, `10` comes before `2` when sorted as strings, but `2` comes before `10` when sorted as numbers.\n\nTo fix this, you can pass in a callback function to the `.sort()` method. This function takes two arguments, which represent the two elements being compared. The function should return a value less than `0` if the first element should come before the second element, a value greater than `0` if the first element should come after the second element, and `0` if the two elements should remain in their current positions.\n\nTo sort your numbers from smallest to largest, pass a callback function that takes parameters `a` and `b`, and returns the result of subtracting `b` from `a`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst getMedian = (array) => {\n  const sorted = array.sort();\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "Your `sort` method should have a callback function which takes an `a` and a `b` parameters.\n\n```js\nassert.match(getMedian.toString(), /(array\\.sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>|array\\.sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{)/)\n```\n\nYour `sort` method should return the result of subtracting `b` from `a`.\n\n```js\nassert.match(getMedian.toString(), /(array\\.sort\\(\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>|array\\.sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{)\\s*(return\\s+)?\\s*a\\s*\\-\\s*b/)\n```"
    },
    {
      "title": "Step 27",
      "description": "Now it is time to apply what you have learned to the `getMedian` function.\n\nInside your `getMedian` function, check if the length of `sorted` is even. If it is, find the middle two numbers, calculate their mean, and return the result. If the length of `sorted` is odd, return the middle number.\n\nMake sure to work with the `sorted` array to find the middle numbers. \n\nAlso if you need help, refer back to the previous few steps to see how to find the median for an array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "Your `getMedian` function should use `sorted` array.\n\n```js\nassert.equal(getMedian.toString().match(/array/g).length, 2);\n```\n\nYour `getMedian` function should return the mean of the middle two numbers if the array length is even.\n\n```js\nassert.equal(getMedian([1,2,3,4,5,6]), 3.5);\nassert.equal(getMedian([1,2,3,4,5,6,7,8,9,10]), 5.5);\n```\n\nYour `getMedian` function should return the middle number if the array length is odd.\n\n```js\nassert.equal(getMedian([1,2,3,4,5]), 3);\nassert.equal(getMedian([1,2,3,4,5,6,7,8,9]), 5);\n```"
    },
    {
      "title": "Step 28",
      "description": "Like you did with your `getMean` function, you need to add your `getMedian` function to your `calculate` logic.\n\nDeclare a variable `median` and assign it the value of `getMedian(numbers)`. Then, query the DOM for the `#median` element and set the `textContent` to `median`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n\n--fcc-editable-region--\n  const mean = getMean(numbers);\n\n\n  document.querySelector(\"#mean\").textContent = mean;\n\n--fcc-editable-region--\n}"
        }
      ],
      "testCode": "Your `calculate` function should have a `median` variable.\n\n```js\nassert.match(calculate.toString(), /median\\s*=/);\n```\n\nYour `median` variable should be assigned the value of `getMedian(numbers)`.\n\n```js\nassert.match(calculate.toString(), /median\\s*=\\s*getMedian\\(\\s*numbers\\s*\\)/);\n```\n\nYour `calculate` function should query the DOM for the `#median` element and set the `textContent` to `median`.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*('|\")#median\\1\\s*\\)\\.textContent\\s*=\\s*median/);\n```"
    },
    {
      "title": "Step 29",
      "description": "Your next calculation is the <dfn>mode</dfn>, which is the number that appears most often in the list. To get started, declare a `getMode` function that takes the same `array` parameter you have been using.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "You should declare a `getMode` function.\n\n```js\nassert.isFunction(getMode);\n```\n\nYour `getMode` function should take a parameter named `array`.\n\n```js\nassert.match(getMode.toString(), /\\(\\s*array\\s*\\)/);\n```\n\nYour `getMode` function should be empty.\n\n```js\nassert.match(getMode.toString(), /\\(\\s*array\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 30",
      "description": "To calculate the occurrence you can use the following approach:\n\n```js\nconst numbersArr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4];\nconst counts = {};\nnumbersArr.forEach((el) => {\n  if (counts[el]) {\n    counts[el] += 1;\n  } else {\n    counts[el] = 1;\n  }\n});\n```\n\nCheck if the current number is already in the `counts` object. If it is, increment it by `1`. If it is not, set it to `1`.\n\nResulting object. The keys are the numbers from the array and the values are the number of times each number appears in the list:\n\n```js\n{ 1: 3, 2: 3, 3: 3, 4: 3, 5: 2 }\n```\n\nFor this step, start by declaring an empty `counts` object. Later on in the project, you will use this object to calculate the mode of the list of numbers.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n\n}\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "Your `getMode` function should have a `counts` variable.\n\n```js\nassert.match(getMode.toString(), /counts\\s*=/);\n```\n\nYour `counts` variable should be an empty object.\n\n```js\nassert.match(getMode.toString(), /counts\\s*=\\s*\\{\\s*\\}\\s*;?/);\n```"
    },
    {
      "title": "Step 31",
      "description": "To better understand how the `getMode` function is going to work, you will need to print out its contents. This will allow you to see what is happening as you build out the function. But first you will need to return the `array` so it can be tested properly.\n\nInside your `getMode` function return your `array` parameter.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = array => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = array => {\n  const counts = {};\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n};\n\nconst calculate = () => {\n  const value = document.querySelector('#numbers').value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector('#mean').textContent = mean;\n  document.querySelector('#median').textContent = median;\n};"
        }
      ],
      "testCode": "You should return the `array` parameter inside the `getMode` function.\n\n```js\nassert.match(getMode.toString(), /return\\s+array\\s*;?/);\n```"
    },
    {
      "title": "Step 38",
      "description": "There are a few edge cases to account for when calculating the mode of a dataset. First, if every value appears the same number of times, there is no mode.\n\nTo calculate this, you will use a `Set`. A `Set` is a data structure that only allows unique values. If you pass an array into the `Set` constructor, it will remove any duplicate values.\n\nStart by creating an `if` statement. In the condition, create a `Set` with `new Set()` and pass it the `Object.values()` of your `counts` object. If the `size` property of this `Set` is equal to `1`, that tells you every value appears the same number of times. In this case, return `null` from your function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach(el => counts[el] = counts[el] ? counts[el] + 1 : 1);\n}\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "Your `getMode` function should have an `if` statement.\n\n```js\nconst functionContents = code.split(/const\\s+getMode\\s*=\\s*/)?.[1]?.split(/[^{]\\}[^;)]/)?.[0];\nassert.match(functionContents, /if\\s*\\(/);\n```\n\nYour `if` statement should create a new `Set` and pass the `Object.values()` of your `counts` object.\n\n```js\nassert.match(getMode.toString(), /if\\s*\\(\\s*new\\s+Set\\s*\\(\\s*Object\\.values\\s*\\(\\s*counts\\s*\\)/);\n```\n\nYour `if` statement should check if the `size` property of the new `Set` is equal to `1`.\n\n```js\nassert.match(getMode.toString(), /if\\s*\\(\\s*new\\s+Set\\s*\\(\\s*Object\\.values\\s*\\(\\s*counts\\s*\\)\\s*\\)\\s*\\.size\\s*===\\s*1/);\n```\n\nYour `if` statement should return `null` if the `size` property of the new `Set` is equal to `1`.\n\n```js\nassert.match(getMode.toString(), /if\\s*\\(\\s*new\\s+Set\\s*\\(\\s*Object\\.values\\s*\\(\\s*counts\\s*\\)\\s*\\)\\.size\\s*===\\s*1\\s*\\)\\s*\\{?\\s*return\\s+null\\s*;?\\s*\\}?/);\n```"
    },
    {
      "title": "Step 39",
      "description": "Now you need to find the value that occurs with the highest frequency. You'll use the `Object.keys()` method for this.\n\nStart by declaring a `highest` variable, and assigning it the value of the `counts` object's `Object.keys()` method.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n}\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "Your `getMode` function should have a `highest` variable.\n\n```js\nassert.match(getMode.toString(), /highest\\s*=/);\n```\n\nYour `getMode` function should use the `Object.keys()` method to get the keys of the `counts` object.\n\n```js\nassert.match(getMode.toString(), /Object\\.keys\\(\\s*counts\\s*\\)/);\n```\n\nYour `getMode` function should use the `Object.keys()` method to get the keys of the `counts` object and assign them to the `highest` variable.\n\n```js\nassert.match(getMode.toString(), /highest\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)/);\n```"
    },
    {
      "title": "Step 40",
      "description": "Now you need to sort the values properly. Chain the `.sort()` method to your `Object.keys()` call.\n\nFor the callback, you'll need to use the `counts` object to compare the values of each key. You can use the `a` and `b` parameters to access the keys. Then, return the value of `counts[b]` minus the value of `counts[a]`.\n\nFinally, access the first element in the array using bracket notation to complete your `highest` variable.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts);\n}\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "Your `getMode` function should use the `sort` method to sort the `Object.keys()` array.\n\n```js\nassert.match(getMode.toString(), /highest\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)\\.sort\\(/)\n```\n\nYour `getMode` function should pass a callback to the `sort` method with parameters `a` and `b`.\n\n```js\nassert.match(getMode.toString(), /highest\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)\\.sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)/)\n```\n\nYour `getMode` function should use the `sort` method to sort the `Object.keys()` array and return the value of `counts[b]` minus the value of `counts[a]`.\n\n```js\nassert.match(getMode.toString(), /highest\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)\\.sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{\\s*return\\s+counts\\s*\\[\\s*b\\s*\\]\\s*-\\s*counts\\s*\\[\\s*a\\s*\\]\\s*;?\\s*\\}\\s*\\)/)\n```\n\nYour `highest` variable should have the value of the first entry in the sorted `Object.keys(counts)` array.\n\n```js\nassert.match(getMode.toString(), /highest\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)\\.sort\\(\\s*function\\s*\\(\\s*a\\s*,\\s*b\\s*\\)\\s*\\{\\s*return\\s+counts\\s*\\[\\s*b\\s*\\]\\s*-\\s*counts\\s*\\[\\s*a\\s*\\]\\s*;?\\s*\\}\\s*\\)\\s*\\[\\s*0\\s*\\]\\s*;/)\n```"
    },
    {
      "title": "Step 41",
      "description": "If multiple numbers in a series occur at the same highest frequency, they are all considered the mode. Otherwise, the mode is the number that occurs most often, that single number is the mode.\n\nThankfully, you can handle both of these cases at once with the `.filter()` method. Start by declaring a `mode` variable and assigning it the value of `Object.keys(counts)`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n\n}\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "Your `getMode` function should have a `mode` variable.\n\n```js\nassert.match(getMode.toString(), /mode\\s*=/);\n```\n\nYour `getMode` function should use the `Object.keys()` method to get the keys of the `counts` object and assign them to the `mode` variable.\n\n```js\nassert.match(getMode.toString(), /mode\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)/);\n```"
    },
    {
      "title": "Step 42",
      "description": "Now chain the filter method to your latest `Object.keys()` call. The callback function should return whether the value of `counts[el]` is equal to your `counts[highest]`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts);\n}\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "You should chain `.filter()` to your last `Object.keys()` call.\n\n```js\nassert.match(getMode.toString(), /mode\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)\\.filter\\(/);\n```\n\nYour `.filter()` method should take a callback function with a parameter `el`.\n\n```js\nassert.match(getMode.toString(), /mode\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)\\.filter\\(\\s*function\\s*\\(\\s*el\\s*\\)/);\n```\n\nYour `.filter()` method should return whether the value of `counts[el]` is equal to `counts[highest]`.\n\n```js\nassert.match(getMode.toString(), /mode\\s*=\\s*Object\\.keys\\(\\s*counts\\s*\\)\\.filter\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{\\s*return\\s+counts\\s*\\[\\s*el\\s*\\]\\s*===\\s*counts\\s*\\[\\s*highest\\s*\\]\\s*;\\s*\\}/);\n```"
    },
    {
      "title": "Step 43",
      "description": "Time to return your `mode` variable.\n\n`mode` is an array, so return it as a string with the `.join()` method. Separate the elements with a comma followed by a space.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  \n}\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "Your `getMode` function should return the `mode` variable.\n\n```js\nassert.match(getMode.toString(), /return\\s+mode\\s*/)\n```\n\nYour `mode` variable should be returned as a string with the `join` method.\n\n```js\nassert.match(getMode.toString(), /return\\s+mode\\.join\\(/)\n```\n\nYou should separate the elements of the `mode` array with a comma and a space.\n\n```js\nassert.match(getMode.toString(), /return\\s+mode\\.join\\(\\s*('|\"),\\s\\1\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 44",
      "description": "Add your `getMode()` function to your `calculate` logic, and update the respective HTML element.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n--fcc-editable-region--\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n\n--fcc-editable-region--\n}"
        }
      ],
      "testCode": "Your `calculate` function should have a `mode` variable with the value of `getMode(numbers)`.\n\n```js\nassert.match(calculate.toString(), /mode\\s*=\\s*getMode\\(\\s*numbers\\s*\\)\\s*;?/);\n```\n\nYour `calculate` function should query the DOM for the `#mode` element and set the `textContent` to `mode`.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*('|\")#mode\\1\\s*\\)\\.textContent\\s*=\\s*mode\\s*;?/);\n```"
    },
    {
      "title": "Step 45",
      "description": "Your next calculation is the <dfn>range</dfn>, which is the difference between the largest and smallest numbers in the list.\n\nYou previously learned about the global `Math` object. `Math` has a `.min()` method to get the smallest number from a series of numbers, and the `.max()` method to get the largest number. Here's an example that gets the smallest number from an array:\n\n```js\nconst numbersArr = [2, 3, 1];\n\nconsole.log(Math.min(...numbersArr));\n// Expected output: 1\n```\n\nDeclare a `getRange` function that takes the same `array` parameter you have been using. Using `Math.min()`, `Math.max()`, and the spread operator, return the difference between the largest and smallest numbers in the list.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n}"
        }
      ],
      "testCode": "You should define a `getRange` function.\n\n```js\nassert.isFunction(getRange);\n```\n\nYour `getRange` function should take an `array` parameter.\n\n```js\nassert.match(getRange.toString(), /array/);\n```\n\nYour `getRange` function should use the spread operator on the `array` parameter.\n\n```js\nassert.match(code.split(\"getRange\")[1], /\\.\\.\\.array/);\n```\n\nYour `getRange` function should use `Math.max` on the spread `array` parameter.\n\n```js\nassert.match(code.split(\"getRange\")[1], /Math\\.max\\(\\s*\\.\\.\\.array\\s*\\)/);\n```\n\nYour `getRange` function should use `Math.min` on the spread `array` parameter.\n\n```js\nassert.match(code.split(\"getRange\")[1], /Math\\.min\\(\\s*\\.\\.\\.array\\s*\\)/);\n```\n\nYour `getRange` function should return the difference between the largest and smallest numbers in the list.\n\n```js\nassert.equal(getRange([1, 2, 3, 4, 5]), 4);\nassert.equal(getRange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 9);\n```"
    },
    {
      "title": "Step 46",
      "description": "Add the logic for calculating and displaying the range to your `calculate` function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n--fcc-editable-region--\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n\n--fcc-editable-region--\n}"
        }
      ],
      "testCode": "Your `calculate` function should set a `range` variable to the result of `getRange(numbers)`.\n\n```js\nassert.match(calculate.toString(), /range\\s*=\\s*getRange\\(\\s*numbers\\s*\\)\\s*;?/);\n```\n\nYour `calculate` function should set the `#range` element's `textContent` to the `range` variable.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*('|\")#range\\1\\s*\\)\\.textContent\\s*=\\s*range\\s*;?/);\n```"
    },
    {
      "title": "Step 47",
      "description": "The <dfn>variance</dfn> of a series represents how much the data deviates from the mean, and can be used to determine how spread out the data are. The variance is calculated in a few steps.\n\nStart by declaring a `getVariance` function that takes an `array` parameter. Within that function, declare a `mean` variable and assign it the value of the `getMean` function, passing `array` as the argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n}"
        }
      ],
      "testCode": "You should define a `getVariance` function.\n\n```js\nassert.isFunction(getVariance);\n```\n\nYour `getVariance` function should take an `array` parameter.\n\n```js\nassert.match(getVariance.toString(), /array/);\n```\n\nYour `getVariance` function should declare a `mean` variable.\n\n```js\nassert.match(getVariance.toString(), /mean\\s*=/);\n```\n\nYour `mean` variable should be assigned the value of the `getMean` function, passing the `array` argument.\n\n```js\nassert.match(getVariance.toString(), /mean\\s*=\\s*getMean\\(\\s*array\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 48",
      "description": "The next step is to calculate how far each element is from the mean. Declare a `differences` variable, and assign it the value of `array.map()`. For the callback, return the value of `el` minus `mean`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\n--fcc-editable-region--\nconst getVariance = (array) => {\n  const mean = getMean(array);\n\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n}"
        }
      ],
      "testCode": "Your `getVariance` function should have a `differences` variable.\n\n```js\nassert.match(getVariance.toString(), /differences\\s*=/);\n```\n\nYour `differences` variable should use the `array.map()` method.\n\n```js\nassert.match(getVariance.toString(), /differences\\s*=\\s*array\\.map\\(/);\n```\n\nYour `differences` variable should use the `el` parameter in the callback function.\n\n```js\nassert.match(getVariance.toString(), /differences\\s*=\\s*array\\.map\\(\\s*function\\s*\\(\\s*el\\s*\\)/);\n```\n\nYour `map` callback should return the value of `el` minus `mean`.\n\n```js\nassert.match(getVariance.toString(), /differences\\s*=\\s*array\\.map\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{\\s*return\\s+el\\s*-\\s*mean\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 49",
      "description": "The next step is to square each of the differences. To square a value, you can use the `**` operator. For example, `3 ** 2` would return `9`.\n\nDeclare a `squaredDifferences` variable, and assign it the value of `differences.map()`. For the callback, return the value of `el` squared.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\n--fcc-editable-region--\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const differences = array.map(\n    el => el - mean\n  );\n\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n}"
        }
      ],
      "testCode": "You should have a `squaredDifferences` variable.\n\n```js\nassert.match(getVariance.toString(), /squaredDifferences\\s*=/);\n```\n\nYour `squaredDifferences` variable should use the `differences.map()` method.\n\n```js\nassert.match(getVariance.toString(), /squaredDifferences\\s*=\\s*differences\\.map\\(/);\n```\n\nYour `squaredDifferences` variable should use the `el` parameter in the callback function.\n\n```js\nassert.match(getVariance.toString(), /squaredDifferences\\s*=\\s*differences\\.map\\(\\s*function\\s*\\(\\s*el\\s*\\)/);\n```\n\nYour `map` callback should return the value of `el` squared.\n\n```js\nassert.match(getVariance.toString(), /squaredDifferences\\s*=\\s*differences\\.map\\(\\s*function\\s*\\(\\s*el\\s*\\)\\s*\\{\\s*return\\s+Math\\.pow\\(\\s*el\\s*,\\s*2\\s*\\)\\s*;?\\s*\\}/);\n```\n\nYour `map` callback should use the `**` operator.\n\n```js\nassert.match(code.split(\"getVariance\")[1], /el\\s*\\*\\*\\s*2/);\n```"
    },
    {
      "title": "Step 50",
      "description": "Next, you need to take the sum of the squared differences.\n\nDeclare a `sumSquaredDifferences` variable, and assign it the value of `squaredDifferences.reduce()`. For the callback, return the sum of `acc` and `el`. Remember to set the initial value to `0`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\n--fcc-editable-region--\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const differences = array.map(\n    el => el - mean\n  );\n  const squaredDifferences = differences.map(\n    el => el ** 2\n  );\n\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n}"
        }
      ],
      "testCode": "You should have a `sumSquaredDifferences` variable.\n\n```js\nassert.match(getVariance.toString(), /sumSquaredDifferences\\s*=/);\n```\n\nYour `sumSquaredDifferences` variable should use the `squaredDifferences.reduce()` method.\n\n```js\nassert.match(getVariance.toString(), /sumSquaredDifferences\\s*=\\s*squaredDifferences\\.reduce\\(/);\n```\n\nYour `sumSquaredDifferences` variable should use the `acc` and `el` parameters in the callback function.\n\n```js\nassert.match(getVariance.toString(), /sumSquaredDifferences\\s*=\\s*squaredDifferences\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)/);\n```\n\nYour `reduce` callback should return the sum of `acc` and `el`.\n\n```js\nassert.match(getVariance.toString(), /sumSquaredDifferences\\s*=\\s*squaredDifferences\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*return\\s*acc\\s*\\+\\s*el\\s*;\\s*\\}/);\n```\n\nYou are missing the starting value of the `reduce`.\n\n```js\nassert.match(getVariance.toString(), /sumSquaredDifferences\\s*=\\s*squaredDifferences\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*return\\s*acc\\s*\\+\\s*el\\s*;\\s*\\}\\s*,\\s*0\\s*\\)/);\n```"
    },
    {
      "title": "Step 51",
      "description": "With two `.map()` calls and a `.reduce()` call, you're creating extra arrays and iterating more times than needed. You should move all of the logic into the `.reduce()` call to save time and memory.\n\nRemove the `differences`, `squaredDifferences`, and `sumSquaredDifferences` variables (and their values). Declare a `variance` variable, and assign it the value of `array.reduce()`. For the callback, pass in your standard `acc` and `el` parameters, but leave the function body empty for now. Don't forget to set the initial value to `0`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\n--fcc-editable-region--\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const differences = array.map(\n    el => el - mean\n  );\n  const squaredDifferences = differences.map(\n    el => el ** 2\n  );\n  const sumSquaredDifferences = squaredDifferences.reduce(\n    (acc, el) => acc + el, 0\n  );\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n}"
        }
      ],
      "testCode": "You should remove the `differences` variable.\n\n```js\nassert.notMatch(getVariance.toString(), /differences\\s*=/);\n```\n\nYou should remove the `squaredDifferences` variable.\n\n```js\nassert.notMatch(getVariance.toString(), /squaredDifferences\\s*=/);\n```\n\nYou should remove the `sumSquaredDifferences` variable.\n\n```js\nassert.notMatch(getVariance.toString(), /sumSquaredDifferences\\s*=/);\n```\n\nYou should have a `variance` variable.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=/);\n```\n\nYour `variance` variable should use the `array.reduce()` method.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(/);\n```\n\nYour `variance` variable should use the `acc` and `el` parameters in the callback function.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)/);\n```\n\nYour `reduce` callback should be an empty function.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*\\}/);\n```\n\nYour `reduce` callback should have an initial value of `0`.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*\\}\\s*,\\s*0\\s*\\)/);\n```"
    },
    {
      "title": "Step 52",
      "description": "Within your empty `.reduce()` callback, declare a variable `difference` and set it to the value of `el` minus `mean`. Then declare a `squared` variable, and set it to the value of `difference` to the power of `2`. Finally, return the value of `acc` plus `squared`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\n--fcc-editable-region--\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n\n  }, 0);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n}"
        }
      ],
      "testCode": "Your `reduce` callback should have a `difference` variable.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=/);\n```\n\nYour `difference` variable should be set to the value of `el` minus `mean`.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;/);\n```\n\nYour `reduce` callback should have a `squared` variable.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=/);\n```\n\nYour `squared` variable should be set to the value of `difference` to the power of 2.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\.pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*;?/);\n```\n\nYour `reduce` callback should return the value of `acc` plus `squared`.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\.pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*;?\\s*return\\s+acc\\s*\\+\\s*squared\\s*;/);\n```\n\nYou should not remove the initial value of `0` from your `.reduce()` method.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\.pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*;?\\s*return\\s+acc\\s*\\+\\s*squared\\s*;\\s*\\}\\s*,\\s*0\\s*\\)/);\n```"
    },
    {
      "title": "Step 53",
      "description": "The final step in calculating the variance is to divide the sum of the squared differences by the count of numbers.\n\nDivide your `.reduce()` call by the length of the array (in your `variance` declaration). Then, return `variance`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\n--fcc-editable-region--\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n    const difference = el - mean;\n    const squared = difference ** 2;\n    return acc + squared;\n  }, 0);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n}"
        }
      ],
      "testCode": "You should divide the result of the `.reduce()` call by the length of the array.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{\\s*var\\s+difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s+squared\\s*=\\s*Math\\.pow\\(\\s*difference\\s*,\\s*2\\s*\\)\\s*;?\\s*return\\s+acc\\s*\\+\\s*squared\\s*;\\s*\\}\\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\.length\\s*;?/);\n```\n\nYou should return the value of `variance`.\n\n```js\nassert.match(getVariance.toString(), /return\\s+variance\\s*;/);\n```"
    },
    {
      "title": "Step 54",
      "description": "Add your new `getVariance` function to the `calculate` function, and update the respective HTML element.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n    const difference = el - mean;\n    const squared = difference ** 2;\n    return acc + squared;\n  }, 0) / array.length;\n  return variance;\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n--fcc-editable-region--\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n\n--fcc-editable-region--\n}"
        }
      ],
      "testCode": "Your `calculate` function should have a `variance` variable set to the value of `getVariance(numbers)`.\n\n```js\nassert.match(calculate.toString(), /variance\\s*=\\s*getVariance\\(\\s*numbers\\s*\\)/);\n```\n\nYou should set the `textContent` of the `#variance` element to the value of the `variance` variable.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*('|\")#variance\\1\\s*\\)\\.textContent\\s*=\\s*variance/);\n```"
    },
    {
      "title": "Step 55",
      "description": "Your final calculation is the <dfn>standard deviation</dfn>, which is the square root of the variance.\n\nBegin by declaring a `getStandardDeviation` function, with the `array` parameter. In the function body, declare a `variance` variable and assign it the variance of the `array`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n    const difference = el - mean;\n    const squared = difference ** 2;\n    return acc + squared;\n  }, 0) / array.length;\n  return variance;\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n  const variance = getVariance(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n  document.querySelector(\"#variance\").textContent = variance;\n}"
        }
      ],
      "testCode": "You should have a `getStandardDeviation` function.\n\n```js\nassert.isFunction(getStandardDeviation);\n```\n\nYour `getStandardDeviation` function should have an `array` parameter.\n\n```js\nassert.match(getStandardDeviation.toString(), /array/);\n```\n\nYour `getStandardDeviation` function should have a `variance` variable.\n\n```js\nassert.match(getStandardDeviation.toString(), /variance\\s*=/);\n```\n\nYour `variance` variable should have the value of `getVariance(array)`.\n\n```js\nassert.match(getStandardDeviation.toString(), /variance\\s*=\\s*getVariance\\(\\s*array\\s*\\)/);\n```"
    },
    {
      "title": "Step 56",
      "description": "To calculate a root exponent, such as $\\sqrt[n]{x}$, you can use an inverted exponent $x^{1/n}$. JavaScript has a built-in `Math.pow()` function that can be used to calculate exponents.\n\nHere is the basic syntax for the `Math.pow()` function:\n\n```js\nMath.pow(base, exponent);\n```\n\nHere is an example of how to calculate the square root of `4`:\n\n```js\nconst base = 4;\nconst exponent = 0.5;\n// returns 2\nMath.pow(base, exponent);\n```\n\nDeclare a `standardDeviation` variable, and use the `Math.pow()` function to assign it the value of $variance^{1/2}$.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n    const difference = el - mean;\n    const squared = difference ** 2;\n    return acc + squared;\n  }, 0) / array.length;\n  return variance;\n}\n\n--fcc-editable-region--\nconst getStandardDeviation = (array) => {\n  const variance = getVariance(array);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n  const variance = getStandardDeviation(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n  document.querySelector(\"#variance\").textContent = variance;\n}"
        }
      ],
      "testCode": "You should have a `standardDeviation` variable.\n\n```js\nassert.match(getStandardDeviation.toString(), /standardDeviation\\s*=/);\n```\n\nYour `standardDeviation` variable should use the `Math.pow()` function.\n\n```js\nassert.match(getStandardDeviation.toString(), /standardDeviation\\s*=\\s*Math\\.pow\\(/);\n```\n\nYour `Math.pow()` function should have a base of `variance` and an exponent of `1/2`.\n\n```js\nassert.match(getStandardDeviation.toString(), /standardDeviation\\s*=\\s*Math\\.pow\\(\\s*variance\\s*,\\s*(\\(\\s*1\\s*\\/\\s*2\\s*\\)|1\\s*\\/\\s*2|0\\.5|\\.5)\\s*\\);?\\s*\\}/);\n```"
    },
    {
      "title": "Step 57",
      "description": "The `Math` object has a `.sqrt()` method specifically for finding the square root of a number.\n\nChange your `standardDeviation` variable to use this method instead of `Math.pow()`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n    const difference = el - mean;\n    const squared = difference ** 2;\n    return acc + squared;\n  }, 0) / array.length;\n  return variance;\n}\n\n--fcc-editable-region--\nconst getStandardDeviation = (array) => {\n  const variance = getVariance(array);\n  const standardDeviation = Math.pow(variance, 1/2);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n  const variance = getVariance(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n  document.querySelector(\"#variance\").textContent = variance;\n}"
        }
      ],
      "testCode": "Your `standardDeviation` variable should use `Math.sqrt()`.\n\n```js\nassert.match(getStandardDeviation.toString(), /standardDeviation\\s*=\\s*Math\\.sqrt\\(\\s*variance\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 58",
      "description": "Return your `standardDeviation` variable.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n    const difference = el - mean;\n    const squared = difference ** 2;\n    return acc + squared;\n  }, 0) / array.length;\n  return variance;\n}\n\n--fcc-editable-region--\nconst getStandardDeviation = (array) => {\n  const variance = getVariance(array);\n  const standardDeviation = Math.sqrt(variance);\n\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n  const variance = getVariance(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n  document.querySelector(\"#variance\").textContent = variance;\n}"
        }
      ],
      "testCode": "Your `getStandardDeviation` function should return the `standardDeviation` variable.\n\n```js\nassert.match(getStandardDeviation.toString(), /return\\s+standardDeviation\\s*;?/);\n```"
    },
    {
      "title": "Step 59",
      "description": "Lastly update the `calculate` function to include the standard deviation logic, like you did with your other functions.\n\nCongratulations! Your project is complete.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n    const difference = el - mean;\n    const squared = difference ** 2;\n    return acc + squared;\n  }, 0) / array.length;\n  return variance;\n}\n\nconst getStandardDeviation = (array) => {\n  const variance = getVariance(array);\n  const standardDeviation = Math.sqrt(variance);\n  return standardDeviation;\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n--fcc-editable-region--\n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n  const variance = getVariance(numbers);\n\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n  document.querySelector(\"#variance\").textContent = variance;\n\n--fcc-editable-region--\n}"
        }
      ],
      "testCode": "Your `calculate` function should have a `standardDeviation` variable set to the result of `getStandardDeviation(numbers)`.\n\n```js\nassert.match(calculate.toString(), /standardDeviation\\s*=\\s*getStandardDeviation\\(\\s*numbers\\s*\\)/);\n```\n\nYou should update the `textContent` of the `#standardDeviation` element to be the `standardDeviation` variable.\n\n```js\nassert.match(calculate.toString(), /document\\.querySelector\\(\\s*('|\")#standardDeviation\\1\\s*\\)\\.textContent\\s*=\\s*standardDeviation/);\n```"
    },
    {
      "title": "Step 32",
      "description": "Inside the `calculate` function, you have already called the `getMean` and `getMedian` functions. \n\nBelow those function calls, add a `console.log(getMode(numbers))`.\n\nTo see the result, enter the numbers `4, 4, 2, 5` and click on the `\"Calculate\"` button. Open up the console to see the following array:\n\n```js\n[ 4, 4, 2, 5 ]\n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  return array;\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "You should call `console.log(getMode(numbers))` inside the `calculate` function.\n\n```js\nassert.match(calculate.toString(), /console\\.log\\(getMode\\(numbers\\)\\)/);\n```"
    },
    {
      "title": "Step 33",
      "description": "Inside your `getMode` function, on the empty line above your `return` statement, call `forEach` on `array`. Your `.forEach()` method should have an empty callback function that takes an `el` parameter.\n\nIn the next few steps, you will use this loop to count the frequency of occurrences of each number in the array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n\n  return array;\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  console.log(getMode(numbers));\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "Your `getMode` function should use the `.forEach()` method on the `array` parameter.\n\n```js\nassert.match(getMode.toString(), /array\\.forEach\\(/);\n```\n\nYour `.forEach()` method should have a callback function which takes an `el` parameter.\n\n```js\nassert.match(getMode.toString(), /\\.forEach\\s*\\(\\s*(function\\s*\\(\\s*el\\s*\\)|\\(\\s*el\\s*\\)\\s*=>)/);\n```"
    },
    {
      "title": "Step 34",
      "description": "Inside the `array.forEach()` callback function, check if the current element is inside the `counts` object.  If the element can be found, increment the value of `counts[el]` by `1`. Otherwise, assign the number `1` to `counts[el]`.\n\nChange your return statement to return `counts` instead of `array`.\n\nTo test this, enter the numbers `4, 4, 2, 5` and click `Calculate`. You should see the following in the console:\n\n```js\n{ '2': 1, '4': 2, '5': 1 }\n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach(el => {\n\n  })\n  return array;\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  console.log(getMode(numbers));\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "You should change your return statement to return `counts` instead of `array`.\n\n```js\nassert.match(getMode.toString(), /return\\s+counts\\s*;/);\n```\n\nYou should check if the current element can be found inside the `counts` object. If it can be found, update the value of `counts[el]` by `1`. Otherwise, assign the number `1` to `counts[el]`. Enter the numbers `4, 4, 2, 5` and click `\"Calculate\"` for testing.\n\n```js\nconst expected = {'2': 1, '4': 2, '5': 1};\nassert.deepEqual(getMode([4, 4, 2, 5]), expected)\n```"
    },
    {
      "title": "Step 36",
      "description": "Now that you have a better understanding of how the `getMode` function works, you can remove the `console.log(getMode(numbers))` statement from the `calculate` function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach(el => counts[el] = counts[el] ? counts[el] + 1 : 1);\n  console.log(counts)\n  return counts;\n}\n\n--fcc-editable-region--\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  console.log(getMode(numbers));\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should not have a `console.log(getMode(numbers))` inside your `calculate` function.\n\n\n```js\nassert.notMatch(calculate.toString(), /console\\.log\\(\\s*getMode\\(numbers\\)\\s*\\)/);\n```"
    },
    {
      "title": "Step 37",
      "description": "Returning the `counts` variable was only for testing purposes. Now that you are done testing, remove the `return counts` line from the `getMode` function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.toSorted((a, b) => a - b);\n  const median =\n    sorted.length % 2 === 0\n      ? getMean([sorted[sorted.length / 2], sorted[sorted.length / 2 - 1]])\n      : sorted[Math.floor(sorted.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach(el => counts[el] = counts[el] ? counts[el] + 1 : 1);\n  console.log(counts)\n  return counts;\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "You should not have a `return counts` inside your `getMode` function.\n\n```js\nassert.notMatch(getMode.toString(), /return\\s+counts\\s*;/);\n\n```"
    },
    {
      "title": "Step 22",
      "description": "In the next few steps, you'll learn how to determine if an array's length is even or odd, as well as how to find the median. You will then be able to apply what you learned to the `getMedian` function.\n\nTo check if a number is even or odd, you can use the <dfn>modulus operator</dfn> `%`. The modulus operator returns the remainder of the division of two numbers. \n\nHere is an example checking if an array length is even or odd:\n\n```js\n// check if array length is even\narr.length % 2 === 0;\n\n// check if array length is odd\narr.length % 2 === 1;\n```\n\nIf the remainder is `0`, the number is even. If the remainder is `1`, the number is odd.\n\nCreate a variable called `isEven`. Then use the modulus operator to check if the length of the `testArr2` array is even. Assign that expression to the `isEven` variable.\n\nBelow your `isEven` variable, log out the `isEven` variable to the console.\n\nOpen up the console to see the result.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst testArr1 = [1, 2, 3, 4, 5];\nconst testArr2 = [1, 2, 3, 4, 5, 6];\n\n--fcc-editable-region--\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "You should have an `isEven` variable.\n\n```js\nassert.isDefined(isEven);\n```\n\nYou should check if the length of the `testArr2` array is even. Refer back to the example provided for you: `arr.length % 2 === 0;`\n\n```js\nassert.isTrue(isEven);\n```\n\nYou should have a `console.log` statement that logs the `isEven` variable.\n\n```js\nassert.match(code, /console\\.log\\(isEven\\)/);\n```"
    },
    {
      "title": "Step 23",
      "description": "To get the median of an array with an odd number of elements, you will need to find and return the middle number.\n\nHere is how to find the middle number of an array with an odd number of elements:\n\n```js\narr[Math.floor(arr.length / 2)];\n```\n\nHere is a longer example finding the middle number of an array with `5` elements:\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst middleNumber = numbers[Math.floor(numbers.length / 2)];\nconsole.log(middleNumber); // 3\n```\n\nThe reason why you use `Math.floor` is because the result of dividing an odd number by `2` will be a decimal. `Math.floor` will round down to the nearest whole number.\n\nDeclare an `oddListMedian` variable and assign it the result of finding the middle number of the `testArr1`. Then log the `oddListMedian` variable to the console.\n\nOpen up the console to see the result.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst testArr1 = [1, 2, 3, 4, 5];\nconst testArr2 = [1, 2, 3, 4, 5, 6];\nconst isEven = testArr2.length % 2 === 0;\nconsole.log(isEven);\n\n\n--fcc-editable-region--\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "You should have an `oddListMedian` variable.\n\n```js\nassert.isDefined(oddListMedian);\n```\n\nYou should assign the result of finding the middle number for the `testArr1` to the `oddListMedian` variable. Remember to refer to the example from earlier: `arr[Math.floor(arr.length / 2)];`\n\n```js\nassert.strictEqual(oddListMedian, 3);\n```\n\nYou should have a console statement that logs the `oddListMedian` variable.\n\n```js\nassert.match(code, /console\\.log\\(\\s*oddListMedian\\s*\\);?/);\n```"
    },
    {
      "title": "Step 24",
      "description": "To find the median of an even list of numbers, you need to find the two middle numbers and calculate the mean of those numbers. \n\nHere is how to find the two middle numbers of an even list of items:\n\n```js\n// first middle number\narr[arr.length / 2];\n// second middle number\narr[(arr.length / 2) - 1];\n```\n\nTo find the median, you can use the `getMean` function which adds the middle numbers and divides the sum by `2`.\n\n```js\nconst numbers = [1, 2, 3, 4];\nconst firstMiddleNumber = numbers[numbers.length / 2];\nconst secondMiddleNumber = numbers[(numbers.length / 2) - 1];\n// result is 2.5\ngetMean([firstMiddleNumber, secondMiddleNumber]);\n```\n\nCreate an `evenListMedian` variable and assign it the result of finding the median of the `testArr2`. \n\nThen, log the `evenListMedian` variable to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst testArr1 = [1, 2, 3, 4, 5];\nconst testArr2 = [1, 2, 3, 4, 5, 6];\nconst isEven = testArr2.length % 2 === 0;\nconsole.log(isEven);\nconst oddListMedian = testArr1[Math.floor(testArr1.length / 2)];\nconsole.log(oddListMedian);\n\n--fcc-editable-region--\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "You should have a variable named `evenListMedian`.\n\n```js\nassert.isDefined(evenListMedian);\n```\n\nYou should assign the result of finding the median of the `testArr2` to the `evenListMedian` variable. Refer back to the example for extra help.\n\n```js\nassert.strictEqual(evenListMedian, 3.5);\n```\n\nYou should log the `evenListMedian` variable to the console.\n\n```js\nassert.match(code, /console\\.log\\(\\s*evenListMedian\\s*\\)/);\n```"
    },
    {
      "title": "Step 25",
      "description": "Now that you have a better understanding of how to find the median for odd and even lists of numbers, you can remove all your test code from the previous steps.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst testArr1 = [1, 2, 3, 4, 5];\nconst testArr2 = [1, 2, 3, 4, 5, 6];\nconst isEven = testArr2.length % 2 === 0;\nconsole.log(isEven);\nconst oddListMedian = testArr1[Math.floor(testArr1.length / 2)];\nconsole.log(oddListMedian);\nconst evenListMedian = getMean([testArr2[testArr2.length / 2 - 1], testArr2[testArr2.length / 2]]);\nconsole.log(evenListMedian);\n--fcc-editable-region--\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "You should not have a `const testArr1 = [1, 2, 3, 4, 5];` in your code.\n\n```js\nassert.notMatch(code, /const testArr1 = \\[1, 2, 3, 4, 5\\];/);\n```\n\nYou should not have a `const testArr2 = [1, 2, 3, 4, 5, 6];` in your code.\n\n```js\nassert.notMatch(code, /const testArr2 = \\[1, 2, 3, 4, 5, 6\\];/);\n```\n\nYou should not have a `const isEven = testArr2.length % 2 === 0;` in your code.\n\n```js\nassert.notMatch(code, /const isEven = testArr2.length % 2 === 0;/);\n```\n\nYou should not have a `console.log(isEven);` in your code.\n\n```js\nassert.notMatch(code, /console\\.log\\(isEven\\);/);\n```\n\nYou should not have a `const oddListMedian = testArr1[Math.floor(testArr1.length / 2)];` in your code.\n\n```js\nassert.notMatch(code, /const oddListMedian = testArr1\\[Math\\.floor\\(testArr1\\.length \\/ 2\\)\\];/);\n```\n\nYou should not have a `console.log(oddListMedian);` in your code.\n\n```js\nassert.notMatch(code, /console\\.log\\(oddListMedian\\);/);\n```\n\nYou should not have a `const evenListMedian = getMean([testArr2[testArr2.length / 2 - 1], testArr2[testArr2.length / 2]]);` in your code.\n\n```js\nassert.notMatch(code, /const evenListMedian = getMean\\(\\[testArr2\\[testArr2\\.length \\/ 2 - 1\\], testArr2\\[testArr2\\.length \\/ 2\\]\\]\\);/);\n```\n\nYou should not have a `console.log(evenListMedian);` in your code.\n\n```js\nassert.notMatch(code, /console\\.log\\(evenListMedian\\);/);\n```"
    },
    {
      "title": "Step 26",
      "description": "The `.sort()` method mutates the original array - in other words, it modifies the order of the elements directly. This is generally considered bad practice, as it can result in unexpected side effects.\n\nInstead, you should use the `.toSorted()` method, which creates a new array. Change your `.sort()` call to `.toSorted()`. Do not modify the callback function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}"
        }
      ],
      "testCode": "You should use `.toSorted()` instead of `.sort()`.\n\n```js\nassert.notMatch(getMedian.toString(), /array\\.sort/);\nassert.match(getMedian.toString(), /array\\.toSorted/);\n```\n\nYou should not modify the callback function.\n\n```js\nassert.match(code, /array\\.toSorted\\(\\s*\\(\\s*a,\\s*b\\s*\\)\\s*=>\\s*a\\s*-\\s*b\\);?/);\n```"
    },
    {
      "title": "Step 35",
      "description": "There is another way to write the `forEach`. Instead of using a block body `() => {}` for the callback, you can use an expression body `() =>`.\n\nYou will have to convert the `if...else` statements into an expression. Write the expression as a ternary and use a single assignment for the ternary.\n\n```js\nassignment = condition ? exprIfTrue : exprIfFalse\n```\n\nConvert the `forEach` callback to use an expression body and replace the statements with a ternary.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  const median =\n    array.length % 2 === 0\n      ? getMean([sorted[array.length / 2], sorted[array.length / 2 - 1]])\n      : sorted[Math.floor(array.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach(el => {\n    if (counts[el]) {\n      counts[el] += 1;\n    } else {\n      counts[el] = 1;\n    }\n  });\n  return counts;\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  console.log(getMode(numbers));\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}"
        }
      ],
      "testCode": "Your function should still increment the `counts` variable properly. \n\n```js\nconst expected = {'2': 1, '4': 2, '5': 1};\nassert.deepEqual(getMode([4, 4, 2, 5]), expected)\n```\n\nYour function should use a `ternary` operator. \n\n```js\nassert.match(getMode.toString(), /counts\\[el\\]\\s*=\\s*counts\\[el\\]\\s*\\?\\s*counts\\[el\\]\\s*\\+\\s*1\\s*\\:\\s*1/);\n```"
    }
  ]
}