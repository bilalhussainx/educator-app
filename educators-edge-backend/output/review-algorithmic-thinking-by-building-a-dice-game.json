{
  "title": "Review Algorithmic Thinking By Building A Dice Game",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Step 1",
      "description": "In this project, you will learn algorithmic thinking by building a dice game. There are a total of 6 rounds and for each round, the player can roll the dice up to 3 times and collect a score. \n\nThe HTML and CSS have been provided for you. Feel free to explore them. When you are ready, you will need to set up your HTML variables. Get all of your `.die` elements and assign them to a `listOfAllDice` variable. Get your score inputs (the `input` elements in your `#score-options`) and score spans, and assign them to `scoreInputs` and `scoreSpans`. Assign the `#current-round` element to `roundElement` and the `#current-round-rolls` element to `rollsElement`, then do the same for your `#total-score` and `#score-history` elements. Assign your `#roll-dice-btn`, `#keep-score-btn`, `#rules-btn`, and `.rules-container` to variables with properly formatted names.\n\nWhen the user clicks on the `Show rules` button, they should be able to toggle between showing and hiding the game rules. Create a variable `isModalShowing` to track the state of the game rules.\n\nEach time the user rolls the dice, you will need to keep track of all of the dice values. Create a variable `diceValuesArr` to track this.\n\nThroughout the game, you will need to keep track of the current score, total score, number of rolls and which round the player is on. Declare `rolls`, `score`, and `round` variables for this purpose.\n\nThink about what the starting value of each of these variables should be. All of these variables should be able to be reassigned.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should assign your `.die` elements to `listOfAllDice`.\n\n```js\nassert.deepEqual(listOfAllDice, document.querySelectorAll(\".die\"));\n```\n\nYou should assign your `#score-options input` elements to `scoreInputs`.\n\n```js\nassert.deepEqual(scoreInputs, document.querySelectorAll(\"#score-options input\"));\n```\n\nYou should assign your `#score-options span` elements to `scoreSpans`.\n\n```js\nassert.deepEqual(scoreSpans, document.querySelectorAll(\"#score-options span\"));\n```\n\nYou should assign your `#current-round` element to `roundElement`.\n\n```js\nassert.deepInclude([document.getElementById(\"current-round\"), document.querySelector(\"#current-round\")], roundElement);\n```\n\nYou should assign your `#current-round-rolls` element to `rollsElement`.\n\n```js\nassert.deepInclude([document.getElementById(\"current-round-rolls\"), document.querySelector(\"#current-round-rolls\")], rollsElement);\n```\n\nYou should assign your `#total-score` element to `totalScoreElement`.\n\n```js\nassert.deepInclude([document.getElementById(\"total-score\"), document.querySelector(\"#total-score\")], totalScoreElement);\n```\n\nYou should assign your `#score-history` element to `scoreHistory`.\n\n```js\nassert.deepInclude([document.getElementById(\"score-history\"), document.querySelector(\"#score-history\")], scoreHistory);\n```\n\nYou should assign your `#roll-dice-btn` element to `rollDiceBtn`.\n\n```js\nassert.deepInclude([document.getElementById(\"roll-dice-btn\"), document.querySelector(\"#roll-dice-btn\")], rollDiceBtn);\n```\n\nYou should assign your `#keep-score-btn` element to `keepScoreBtn`.\n\n```js\nassert.deepInclude([document.getElementById(\"keep-score-btn\"), document.querySelector(\"#keep-score-btn\")], keepScoreBtn);\n```\n\nYou should assign your `#rules-btn` element to `rulesBtn`.\n\n```js\nassert.deepInclude([document.getElementById(\"rules-btn\"), document.querySelector(\"#rules-btn\")], rulesBtn);\n```\n\nYou should assign your `.rules-container` element to `rulesContainer`.\n\n```js\nassert.deepEqual(rulesContainer, document.querySelector(\".rules-container\"));\n```\n\nYour `isModalShowing` variable should have the value `false`.\n\n```js\nassert.isFalse(isModalShowing);\n```\n\nYour `diceValuesArr` should have an empty array for the value.\n\n```js\nassert.isArray(diceValuesArr);\nassert.isEmpty(diceValuesArr);\n```\n\nYour `rolls` variable should have the value `0`.\n\n```js\nassert.strictEqual(rolls, 0);\n```\n\nYour `score` variable should have the value `0`.\n\n```js\nassert.strictEqual(score, 0);\n```\n\nYour `round` variable should have the value `1`.\n\n```js\nassert.strictEqual(round, 1);\n```\n\nAll of your new variables should be declared with `let`.\n\n```js\nassert.match(code, /let isModalShowing/);\nassert.match(code, /let diceValuesArr/);\nassert.match(code, /let rolls/);\nassert.match(code, /let score/);\nassert.match(code, /let round/);\n```"
    },
    {
      "title": "Step 2",
      "description": "When the user clicks on the `Show rules` button, the rules for the game should display on the screen. When they click on the button again, the rules should be hidden.\n\nUse an event listener to invert the value of the `isModalShowing` variable, toggle the visibility of the `rulesContainer`, and change the text of the `rulesBtn` to `Show rules` or `Hide rules`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `rulesContainer` should not be visible initially.\n\n```js\nassert.isFalse(rulesContainer.checkVisibility());\n```\n\nWhen your `rulesBtn` is clicked, your `isModalShowing` should be `true`.\n\n```js\nrulesBtn.click();\nassert.isTrue(isModalShowing);\nresetState();\n```\n\nWhen your `rulesBtn` is clicked, your `rulesContainer` should be visible.\n\n```js\nrulesBtn.click();\nassert.isTrue(rulesContainer.checkVisibility());\nresetState();\n```\n\nWhen your `rulesBtn` is clicked, your `rulesBtn` should say `Hide rules`.\n\n```js\nrulesBtn.click();\nassert.strictEqual(rulesBtn.innerText.trim(), \"Hide rules\");\nresetState();\n```\n\nWhen your `rulesBtn` is clicked twice, your `isModalShowing` should be `false`.\n\n```js\nrulesBtn.click();\nassert.isTrue(isModalShowing);\nrulesBtn.click();\nassert.isFalse(isModalShowing);\nresetState();\n```\n\nWhen your `rulesBtn` is clicked twice, your `rulesContainer` should not be visible.\n\n```js\nrulesBtn.click();\nassert.isTrue(rulesContainer.checkVisibility());\nrulesBtn.click();\nassert.isFalse(rulesContainer.checkVisibility());\nresetState();\n```\n\nWhen your `rulesBtn` is clicked twice, your `rulesBtn` should say `Show rules`.\n\n```js\nrulesBtn.click();\nassert.strictEqual(rulesBtn.innerText.trim(), \"Hide rules\");\nrulesBtn.click();\nassert.strictEqual(rulesBtn.innerText.trim(), \"Show rules\");\nresetState();\n```"
    },
    {
      "title": "Step 3",
      "description": "When the user clicks on the `Roll the dice` button, five random die numbers should be generated and displayed on the screen. \n\nBuild out the logic such that clicking on the `rollDiceBtn` generates five random numbers between 1 and 6 inclusive, sets the `diceValuesArr` to contain only those five numbers, and displays the numbers in order in the `listOfAllDice` elements.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n  --fcc-editable-region--\n  \n  --fcc-editable-region--\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});"
        }
      ],
      "testCode": "When your `rollDiceBtn` is clicked, your `diceValuesArr` array should contain five elements.\n\n```js\nrollDiceBtn.click();\nassert.lengthOf(diceValuesArr, 5);\n```\n\nWhen your `rollDiceBtn` is clicked a second time, your `diceValuesArr` array should contain only five new elements.\n\n```js\nconst __mocker = new __helpers.RandomMocker();\ntry {\n  __mocker.mock();\n  rollDiceBtn.click();\n  const old = [...diceValuesArr];\n  rollDiceBtn.click();\n  assert.lengthOf(diceValuesArr, 5);\n  assert.notDeepEqual(old, diceValuesArr);\n} finally {\n  __mocker.restore();\n}\n```\n\nEach of your random numbers should be between 1 and 6 inclusive.\n\n```js\nconst __mocker = new __helpers.RandomMocker();\ntry {\n  __mocker.mock();\n  for (let i = 1; i < 20; i++) {\n    rollDiceBtn.click();\n    for (const val of diceValuesArr) {\n      assert.isAtLeast(val, 1);\n      assert.isAtMost(val, 6);\n    }\n  } \n} finally {\n  __mocker.restore();\n}\n\n```\n\nEach of your `.die` elements should contain the corresponding value from the `diceValuesArr` array.\n\n```js\nconst numbers = [...listOfAllDice].map(el => Number(el.innerText));\nassert.deepEqual(numbers, diceValuesArr);\n```"
    },
    {
      "title": "Step 4",
      "description": "For each round in the game, users are allowed to roll the dice a maximum of three times. If a user clicks the `rollDiceBtn` but has already made three rolls, the browser should show an `alert()` to indicate they must select a score - otherwise, it should roll the dice as it currently does and increment the `rolls` variable.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\n--fcc-editable-region--\nrollDiceBtn.addEventListener(\"click\", () => {\n  rollDice();\n});\n--fcc-editable-region--\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});"
        }
      ],
      "testCode": "Your event listener should roll the dice.\n\n```js\nrollDiceBtn.click();\nconst numbers = [...listOfAllDice].map(el => Number(el.innerText));\nassert.deepEqual(numbers, diceValuesArr);\n```\n\nIf dice have been rolled three times, the browser should show an alert.\n\n```js\nconst oldAlert = alert;\nalert = () => {};\nconst oldWindow = window.alert;\nwindow.alert = () => {};\nrollDiceBtn.click();\nrollDiceBtn.click();\nconst old = [...diceValuesArr];\nrollDiceBtn.click();\nassert.deepEqual(old, diceValuesArr);\nalert = oldAlert;\nwindow.alert = oldWindow;\n```"
    },
    {
      "title": "Step 5",
      "description": "You'll need to be able to update your `rolls` and your `round` on the page. Create an `updateStats` function to update the text of those two elements with the appropriate values. Then, call that function when your `rollDiceBtn` is clicked and the dice are rolled.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\n--fcc-editable-region--\n\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    rollDice();\n    \n  }\n});\n--fcc-editable-region--\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});"
        }
      ],
      "testCode": "You should have a function called `updateStats`.\n\n```js\nassert.isFunction(updateStats);\n```\n\nYour `updateStats` function should update the `rollsElement` element with the correct value.\n\n```js\nrolls = 2;\nupdateStats();\nassert.strictEqual(rollsElement.innerText, \"2\");\n```\n\nYour `updateStats` function should update the `roundElement` element with the correct value.\n\n```js\nround = 5;\nupdateStats();\nassert.strictEqual(roundElement.innerText, \"5\");\n```\n\nRolling the dice should update the `rolls` correctly.\n\n```js\nrolls = 0;\nrollDiceBtn.click();\nassert.strictEqual(rollsElement.innerText, \"1\");\n```"
    },
    {
      "title": "Step 6",
      "description": "Each time you roll the dice, you could end up with a `Three of a kind`, `Four of a kind`, `Full house`, `Straight` or a random combination of numbers. Based on the outcome, you can make a selection and add points to your score. \n\nStart by creating a function called `updateRadioOption` that takes an index and a score value as arguments. It should set the `scoreInputs` at that index to be enabled, set the value of that input to the score, and display `, score = ${score}` in the correct `scoreSpans` element.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    rollDice();\n    updateStats();\n  }\n});\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});"
        }
      ],
      "testCode": "`updateRadioOption` should be a function.\n\n```js\nassert.isFunction(updateRadioOption);\n```\n\n`updateRadioOption` should update the `scoreInputs` element at the provided index to be enabled.\n\n```js\nupdateRadioOption(0, 10);\nassert.isFalse(scoreInputs[0].disabled);\n```\n\n`updateRadioOption` should update the value of the `scoreInputs` element at the provided index to be the given score.\n\n```js\nassert.deepEqual(scoreInputs[0].value, \"10\");\n```\n\n`updateRadioOption` should update the text of the `scoreSpans` element at the provided index to be the text `\", score = \"` followed by the given score.\n\n```js\nassert.deepEqual(scoreSpans[0].innerText, \", score = 10\");\n```"
    },
    {
      "title": "Step 7",
      "description": "If you roll the dice and get a `Three of a kind` or `Four of a kind`, then you can get a score totalling the sum of all five dice values. To calculate this, create a `getHighestDuplicates` function which takes an array of numbers. The function will need to count how many times each number is found in the array.\n\nIf a number appears four or more times, you will need to update the `Four of a Kind` option with your `updateRadioOption` function. If a number appears three or more times, you will need to update the `Three of a Kind` option. In both cases, the score value should be the sum of all five dice.\n\nRegardless of the outcome, the final option should be updated with a score of `0`. Make sure to call your `getHighestDuplicates` when the dice are rolled.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\n--fcc-editable-region--\n\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    rollDice();\n    updateStats();\n    \n  }\n});\n--fcc-editable-region--\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});"
        }
      ],
      "testCode": "You should have a function called `getHighestDuplicates`.\n\n```js\nassert.isFunction(getHighestDuplicates);\n```\n\nWhen the array has less than three of the same number, your `getHighestDuplicates` function should update the final radio option with `, score = 0`.\n\n```js\ngetHighestDuplicates([1, 2, 3, 4, 5]);\nassert.strictEqual(scoreSpans[5].innerText, \", score = 0\");\n```\n\nWhen the array has less than three of the same number, your `getHighestDuplicates` function should not update the first nor the second radio options.\n\n```js\ngetHighestDuplicates([1, 2, 3, 4, 5]);\nassert.strictEqual(scoreSpans[0].innerText, \"\");\nassert.strictEqual(scoreSpans[1].innerText, \"\");\n```\n\nWhen the array has three of the same number, your `getHighestDuplicates` function should update the `Three of a Kind` radio option with `, score = ` and the total sum of the dice.\n\n```js\ngetHighestDuplicates([5, 5, 5, 1, 1]);\nassert.strictEqual(scoreSpans[0].innerText, \", score = 17\");\n```\n\nWhen the array has three of the same number, your `getHighestDuplicates` function should not update the `Four of a Kind` radio option.\n\n```js\ngetHighestDuplicates([5, 5, 5, 1, 1]);\nassert.strictEqual(scoreSpans[1].innerText, \"\");\n```\n\nWhen the array has four of the same number, your `getHighestDuplicates` function should update the `Four of a Kind` radio option with `, score =` and the total sum of the dice.\n\n```js\ngetHighestDuplicates([5, 5, 5, 5, 1]);\nassert.strictEqual(scoreSpans[1].innerText, \", score = 21\");\n```\n\nWhen the array has four of the same number, your `getHighestDuplicates` function should also update the `Three of a Kind` radio option with `, score = ` and the total sum of the dice.\n\n```js\ngetHighestDuplicates([5, 5, 5, 5, 1]);\nassert.strictEqual(scoreSpans[0].innerText, \", score = 21\");\n```\n\nYou should call your `getHighestDuplicates` function when the dice are rolled.\n\n```js\n/* If the function doesn't change the HTML,\nwe can safely assume it is being called. */\nfor (let i = 0; i < 10; i++) {\n  rolls = 0;\n  rollDiceBtn.click();\n  const oldSpans = [...scoreSpans].map(el => el.innerText);\n  getHighestDuplicates(diceValuesArr);\n  assert.deepEqual([...scoreSpans].map(el => el.innerText), oldSpans);\n}\n```"
    },
    {
      "title": "Step 8",
      "description": "Before each dice roll, you will need to reset the values for the score `inputs` and `spans` so a new value can be displayed. \n\nCreate a `resetRadioOptions` function. Your function should iterate through the `scoreInputs` to disable them and remove the `checked` attribute. Your function should also remove the text from each of the `scoreSpans`. Finally, call this function before you roll the dice.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = arr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\n--fcc-editable-region--\n\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n\n    rolls++;\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n  }\n});\n--fcc-editable-region--\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});"
        }
      ],
      "testCode": "You should have a `resetRadioOptions` function.\n\n```js\nassert.isFunction(resetRadioOptions);\n```\n\nYour `resetRadioOptions` should disable all `scoreInputs`.\n\n```js\ngetHighestDuplicates([5,5,5,5,5]);\nresetRadioOptions();\nfor (const input of scoreInputs) {\n  assert.isTrue(input.disabled)\n}\n```\n\nYour `resetRadioOptions` should remove the `checked` attribute fom all `scoreInputs`.\n\n```js\nscoreInputs[5].checked = true;\nresetRadioOptions();\nfor (const input of scoreInputs) {\n  assert.isFalse(input.checked);\n}\n```\n\nYour `resetRadioOptions` should remove the text from all `scoreSpans`.\n\n```js\ngetHighestDuplicates([5,5,5,5,5]);\nresetRadioOptions();\nfor (const span of scoreSpans) {\n  assert.strictEqual(span.innerText, \"\");\n}\n```"
    },
    {
      "title": "Step 9",
      "description": "When you roll the dice and make a selection, you are not able to keep the score you selected and move onto the next round.\n\nCreate an `updateScore` function to add this functionality. Your function will need two parameters for the user selected score option. The first parameter will be passed the `value` of the radio button, remember this is a string, and the second parameter will be passed the `id` value of the radio button, which is the type of score they achieved.\n\nThe function will need to add the user selected value to the score, update the total score text on the page, and add a new `li` element to the score history `ul` element, using the format `${achieved} : ${selectedValue}` for the `li` element content.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = arr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst resetRadioOptions = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOptions();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n  }\n});\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});"
        }
      ],
      "testCode": "You should have a `updateScore` function.\n\n```js\nassert.isFunction(updateScore);\n```\n\nYour `updateScore` function should convert string value to integer and add the value to the total score.\n\n```js\nscore = 0;\nupdateScore(\"10\", \"hi\");\nassert.strictEqual(score, 10);\n```\n\nYour `updateScore` function should add the value of the first parameter to the total score.\n\n```js\nscore = 0;\nupdateScore(10, \"hi\");\nassert.strictEqual(score, 10);\n```\n\nYour `updateScore` function should update the text of the `totalScoreElement` element.\n\n```js\nscore = 0;\nupdateScore(10, \"hi\");\nassert.strictEqual(totalScoreElement.innerText, \"10\");\n```\n\nYour `updateScore` function should add a new list item to the `scoreHistory` element.\n\n```js\nscoreHistory.innerHTML = \"\";\nupdateScore(10, \"hi\");\nassert.strictEqual(scoreHistory.children.length, 1);\n```\n\nWhen `updateScore(10, \"hi\")` is called, your new list element should have the text `hi : 10`.\n\n```js\nscoreHistory.innerHTML = \"\";\nupdateScore(10, \"hi\");\nassert.strictEqual(scoreHistory.innerHTML, \"<li>hi : 10</li>\");\n```"
    },
    {
      "title": "Step 10",
      "description": "After a user makes a selection, they should be able to keep that score and move onto the next round by clicking the `keepScoreBtn`.\n\nWhen that button is clicked, you should find which radio option is checked and capture its value and id attributes. If the user has selected an option, call your functions to update the score, reset the radio options, and add the value and id to the score history.\n\nIf the user has not selected an option, display an alert informing them to do so.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\nconst updateScore = (selectedValue, achieved) => {\n  score += parseInt(selectedValue);\n  totalScoreElement.textContent = score;\n\n  scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;\n};\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = arr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst resetRadioOptions = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOptions();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n  }\n});\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "When your `keepScoreBtn` is clicked, the score should be updated in the `totalScoreElement` text.\n\n```js\nscoreInputs[0].checked = true;\nscoreInputs[0].value = \"10\";\nscore = 10;\nkeepScoreBtn.click();\nassert.strictEqual(totalScoreElement.innerText, \"20\");\n```\n\nWhen your `keepScoreBtn` is clicked, the radio options should be reset.\n\n```js\nscoreInputs[0].checked = true;\nscoreInputs[0].value = \"10\";\nscore = 10;\nkeepScoreBtn.click();\nfor (const element of scoreInputs) {\n  assert.isFalse(element.checked);\n  assert.isTrue(element.disabled);\n}\nfor (const element of scoreSpans) {\n  assert.strictEqual(element.innerText, \"\");\n}\n```\n\nWhen your `keepScoreBtn` is clicked, the score history should be updated.\n\n```js\nscoreInputs[0].checked = true;\nscoreInputs[0].value = \"10\";\nscoreHistory.innerHTML = \"\";\nkeepScoreBtn.click();\nassert.strictEqual(scoreHistory.innerHTML, \"<li>three-of-a-kind : 10</li>\");\n```\n\nWhen your `keepScoreBtn` is clicked, and no options are selected, you should display an alert to the user.\n\n```js\nconst messages = []\nconst oldAlert = alert;\nalert = (msg) => {messages.push(msg)};\nconst oldWindow = window.alert;\nwindow.alert = (msg) => {messages.push(msg)};\nkeepScoreBtn.click();\nassert.lengthOf(messages, 1);\n```"
    },
    {
      "title": "Step 11",
      "description": "At this point in the game, you are able to roll the dice, make a selection and play for a few rounds. However, you should notice that there is no end to the game and there are infinite rounds. According to the rules, there should be a total of six rounds and then the game ends with the final score. \n\nAfter running your logic when the user selects a score, you should check if 6 rounds have been played. If so, display an alert with the user's final score after 500 milliseconds.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\nconst updateScore = (selectedValue, achieved) => {\n  score += parseInt(selectedValue);\n  totalScoreElement.textContent = score;\n\n  scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;\n};\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = arr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst resetRadioOptions = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOptions();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n  }\n});\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});\n\nkeepScoreBtn.addEventListener(\"click\", () => {\n  let selectedValue;\n  let achieved;\n\n  for (const radioButton of scoreInputs) {\n    if (radioButton.checked) {\n      selectedValue = radioButton.value;\n      achieved = radioButton.id;\n      break;\n    }\n  }\n\n  if (selectedValue) {\n    rolls = 0;\n    round++;\n    updateStats();\n    resetRadioOptions();\n    updateScore(selectedValue, achieved);\n    --fcc-editable-region--\n    \n    --fcc-editable-region--\n  } else {\n    alert(\"Please select an option or roll the dice\");\n  }\n});"
        }
      ],
      "testCode": "If six rounds have been played, you should show an alert to the user.\n\n```js\nconst messages = []\nconst oldAlert = alert;\nalert = (msg) => {messages.push(msg)};\nconst oldWindow = window.alert;\nwindow.alert = (msg) => {messages.push(msg)};\nscoreInputs[0].checked = true;\nscoreInputs[0].value = \"10\";\nround = 5;\nkeepScoreBtn.click();\nassert.lengthOf(messages, 0, messages[0]);\nscoreInputs[0].value = \"10\";\nscoreInputs[0].checked = true;\nkeepScoreBtn.click();\nnew Promise(resolve => setTimeout(resolve, 1000)).then(() => {\n  assert.lengthOf(messages, 1);\n  alert = oldAlert;\n  window.alert = oldWindow;\n})\n```"
    },
    {
      "title": "Step 12",
      "description": "If you go through six rounds of the game, you should see the `alert` show up with your final score. But when you dismiss the `alert`, you are able to keep playing for more rounds past the original six. To fix this, you will need to reset the game.\n\nDeclare a `resetGame` function to do so. Reset all of the `listOfAllDice` elements to display `0`, update `score` and `rolls` to be `0`, update `round` to be `1`, set the `totalScoreElement` text to the user's total score, clear the score history by setting it to an empty string, set the `rollsElement` text to the number of rolls, and set the `roundElement` text to the current round. Finally, reset all of the radio buttons to their initial states.\n\nCall this function after displaying the `alert` with the final score.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\nconst updateScore = (selectedValue, achieved) => {\n  score += parseInt(selectedValue);\n  totalScoreElement.textContent = score;\n\n  scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;\n};\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = arr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst resetRadioOptions = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\n--fcc-editable-region--\n\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOptions();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n  }\n});\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});\n\nkeepScoreBtn.addEventListener(\"click\", () => {\n  let selectedValue;\n  let achieved;\n\n  for (const radioButton of scoreInputs) {\n    if (radioButton.checked) {\n      selectedValue = radioButton.value;\n      achieved = radioButton.id;\n      break;\n    }\n  }\n\n  if (selectedValue) {\n    rolls = 0;\n    round++;\n    updateStats();\n    resetRadioOptions();\n    updateScore(selectedValue, achieved);\n    if (round > 6) {\n      setTimeout(() => {\n        alert(`Game Over! Your total score is ${score}`);\n        \n      }, 500);\n    }\n  } else {\n    alert(\"Please select an option or roll the dice\");\n  }\n});\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should have a function called `resetGame`. \n\n```js\nassert.isFunction(resetGame);\n```\n\nYour `resetGame` function should set both `score` and `rolls` to `0`, and `round` to `1`.\n\n```js\nscore = 20;\nround = 5000;\nrolls = 150;\nresetGame();\nassert.strictEqual(score, 0);\nassert.strictEqual(round, 1);\nassert.strictEqual(rolls, 0);\n```\n\nYour `resetGame` function should set each `listOfAllDice` element to have the text `0`.\n\n```js\nrollDice();\nresetGame();\nfor (const element of listOfAllDice) {\n  assert.strictEqual(element.innerText, \"0\")\n}\n```\n\nYour `resetGame` function should set the text of the `totalScoreElement` element to the current `score`.\n\n```js\nscore = 100;\nresetGame();\nassert.strictEqual(totalScoreElement.innerText, \"0\");\n```\n\nYour `resetGame` function should set the text of the `roundElement` element to the current `round`.\n\n```js\nround = 100;\nresetGame();\nassert.strictEqual(roundElement.innerText, \"1\");\n```\n\nYour `resetGame` function should set all of the radio buttons to be unchecked and disabled.\n\n```js\nrolls = 0;\nresetGame();\nfor (const element of scoreInputs) {\n  assert.isTrue(element.disabled);\n  assert.isFalse(element.checked);\n}\n```\n\nYour `resetGame` function should remove the text from the `scoreSpans` elements.\n\n```js\nrolls = 0;\nresetGame();\nfor (const element of scoreSpans) {\n  assert.strictEqual(element.innerText, \"\");\n}\n```\n\nYou should call your `resetGame` function after displaying the alert in your `keepScoreBtn` listener.\n\n```js\nlet called = false;\nconst oldReset = resetGame;\nresetGame = () => {\n  called = true;\n  oldReset();\n}\n\nconst messages = [];\nconst oldAlert = alert;\nconst oldWindow = window.alert;\nalert = (msg) => {messages.push(msg)};\nwindow.alert = (msg) => {messages.push(msg)};\n\nrolls = 1;\nround = 6;\nrollDiceBtn.click();\ndocument.querySelector('#none').click();\nkeepScoreBtn.click();\nassert.lengthOf(messages, 0);\nassert.isFalse(called);\nnew Promise(resolve => setTimeout(resolve, 1000)).then(() => {\n  assert.lengthOf(messages, 1);\n  assert.isTrue(called);\n  resetGame = oldReset;\n  alert = oldAlert;\n  window.alert = oldWindow;\n});\n```"
    },
    {
      "title": "Step 13",
      "description": "If the user rolls three of one number, and two of another number, this is called a full house. Declare a `detectFullHouse` function that accepts a single argument. The function will be passed the `diceValuesArr` array when called.\n\nYour `detectFullHouse` function should check if the user has rolled three of one number and two of another number. If so, it should update the third radio button to display a score of `25`, with the correct attributes. Regardless, it should always update the last radio button to display a score of 0, with the correct attributes.\n\nDon't forget to call your new function when the dice are rolled.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\nconst updateScore = (selectedValue, achieved) => {\n  score += parseInt(selectedValue);\n  totalScoreElement.textContent = score;\n\n  scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;\n};\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = arr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\n--fcc-editable-region--\n\n\nconst resetRadioOptions = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\nconst resetGame = () => {\n  diceValuesArr = [0, 0, 0, 0, 0];\n  score = 0;\n  round = 1;\n  rolls = 0;\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n\n  totalScoreElement.textContent = score;\n  scoreHistory.innerHTML = \"\";\n\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n\n  resetRadioOptions();\n};\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOptions();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n  \n  }\n});\n--fcc-editable-region--\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});\n\nkeepScoreBtn.addEventListener(\"click\", () => {\n  let selectedValue;\n  let achieved;\n\n  for (const radioButton of scoreInputs) {\n    if (radioButton.checked) {\n      selectedValue = radioButton.value;\n      achieved = radioButton.id;\n      break;\n    }\n  }\n\n  if (selectedValue) {\n    rolls = 0;\n    round++;\n    updateStats();\n    resetRadioOptions();\n    updateScore(selectedValue, achieved);\n    if (round > 6) {\n      setTimeout(() => {\n        alert(`Game Over! Your total score is ${score}`);\n        resetGame();\n      }, 500);\n    }\n  } else {\n    alert(\"Please select an option or roll the dice\");\n  }\n});"
        }
      ],
      "testCode": "You should have a `detectFullHouse` function.\n\n```js\nassert.isFunction(detectFullHouse);\n```\n\nYour `detectFullHouse` function should have a parameter.\n\n```js\nassert.match(code, /(?:var|let|const)\\s+detectFullHouse\\s*=\\s*(\\(\\s*\\w+\\s*\\)|\\s*\\w+\\s*)\\s*=>\\s*|function\\s+detectFullHouse\\s*\\(\\s*\\w+\\s*\\)/);\n```\n\nWhen a full house is rolled, your `detectFullHouse` function should enable the third radio button, set its value to `25`, and set the third `span` to display the text `, score = 25`.\n\n```js\nresetRadioOptions();\ndetectFullHouse([1,1,1,2,2]);\nassert.isFalse(scoreInputs[2].disabled);\nassert.strictEqual(scoreInputs[2].value, \"25\");\nassert.strictEqual(scoreSpans[2].innerText, \", score = 25\");\n```\n\nWhen a full house is not rolled, your `detectFullHouse` function should enable the final radio button, set its value to `0`, and set the final `span` to display the text `, score = 0`.\n\n```js\nresetRadioOptions();\ndetectFullHouse([1,2,3,4,5]);\nassert.isTrue(scoreInputs[2].disabled);\nassert.isFalse(scoreInputs[5].disabled);\nassert.strictEqual(scoreInputs[5].value, \"0\");\nassert.strictEqual(scoreSpans[5].innerText, \", score = 0\");\n```\n\nYou should call your `detectFullHouse` function when your `rollDiceBtn` is clicked.\n\n```js\n// Temporarily modifies Math.random to guarantee full house.\nconst origMathRandom = Math.random\nconst myMathRandom = (() => {\n  let i = 0;\n  const values = [0, 0, 0, 1 / 6 + 0.000001, 1 / 6 + 0.000001];\n  return () => values[i++ % 5];\n})();\n\nMath.random = myMathRandom;\ntry {\n  rollDiceBtn.click();\n} finally {\n  Math.random = origMathRandom;\n}\n\nassert.isFalse(scoreInputs[2].disabled);\nassert.strictEqual(scoreInputs[2].value, \"25\");\nassert.strictEqual(scoreSpans[2].innerText, \", score = 25\");\n```"
    },
    {
      "title": "Step 14",
      "description": "For the last portion of the game, you will need to create an algorithm that checks for the presence of a straight. A small straight is when four of the dice have consecutive values in any order (Ex. in a roll of `41423`, we have `1234`) resulting in a score of `30` points. A large straight is when all five dice have consecutive values in any order (Ex. in a roll of `35124`, we have `12345`) resulting in a score of `40` points.\n\nDeclare a `checkForStraights` function which accepts an array of numbers. If the user gets a large straight, update the fifth radio button with a score of `40`. If the user gets a small straight, update the fourth radio button with a score of `30`. Regardless, it should always update the last radio button to display a score of 0, with the correct attributes.\n\nCall your `checkForStraights` function when the `rollDiceBtn` is clicked to complete your dice game!",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\nconst updateScore = (selectedValue, achieved) => {\n  score += parseInt(selectedValue);\n  totalScoreElement.textContent = score;\n\n  scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;\n};\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = arr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst detectFullHouse = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n  }\n\n  const hasThreeOfAKind = Object.values(counts).includes(3);\n  const hasPair = Object.values(counts).includes(2);\n\n  if (hasThreeOfAKind && hasPair) {\n    updateRadioOption(2, 25);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst resetRadioOptions = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\nconst resetGame = () => {\n  diceValuesArr = [0, 0, 0, 0, 0];\n  score = 0;\n  round = 1;\n  rolls = 0;\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n\n  totalScoreElement.textContent = score;\n  scoreHistory.innerHTML = \"\";\n\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n\n  resetRadioOptions();\n};\n\n--fcc-editable-region--\n\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOptions();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n    detectFullHouse(diceValuesArr);\n\n  }\n});\n--fcc-editable-region--\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});\n\nkeepScoreBtn.addEventListener(\"click\", () => {\n  let selectedValue;\n  let achieved;\n\n  for (const radioButton of scoreInputs) {\n    if (radioButton.checked) {\n      selectedValue = radioButton.value;\n      achieved = radioButton.id;\n      break;\n    }\n  }\n\n  if (selectedValue) {\n    rolls = 0;\n    round++;\n    updateStats();\n    resetRadioOptions();\n    updateScore(selectedValue, achieved);\n    if (round > 6) {\n      setTimeout(() => {\n        alert(`Game Over! Your total score is ${score}`);\n        resetGame();\n      }, 500);\n    }\n  } else {\n    alert(\"Please select an option or roll the dice\");\n  }\n});"
        }
      ],
      "testCode": "Your `checkForStraights` variable should be a function.\n\n```js\nassert.isFunction(checkForStraights);\n```\n\nIf a small straight is rolled, your `checkForStraights` function should enable the fourth radio button, set the value to `30`, update the displayed text to `, score = 30` and leave the fifth radio button disabled.\n\n```js\nconst assertSmallStraight = (_diceValuesArr) => {\n  resetRadioOptions();\n  checkForStraights(_diceValuesArr);\n  assert.isTrue(scoreInputs[4].disabled);\n  assert.isFalse(scoreInputs[3].disabled);\n  assert.strictEqual(scoreInputs[3].value, \"30\");\n  assert.strictEqual(scoreSpans[3].innerText, \", score = 30\");\n}\n// Basic straights\nassertSmallStraight([1,1,2,3,4])\nassertSmallStraight([2,3,4,5,5])\nassertSmallStraight([3,4,5,6,6])\n// 5 unique numbers, but only small straight\nassertSmallStraight([1,2,3,4,6])\nassertSmallStraight([1,3,4,5,6])\n// Straights with duplicates in middle\nassertSmallStraight([1,2,2,3,4])\nassertSmallStraight([2,3,3,4,5])\nassertSmallStraight([3,4,5,5,6])\n// Out of order straights\nassertSmallStraight([1,3,2,1,4])\nassertSmallStraight([5,4,3,3,2])\nassertSmallStraight([3,4,5,6,1])\n```\n\nIf a large straight is rolled, your `checkForStraights` function should enable the fourth button, set the value to `30`, update the displayed text to `, score = 30`. Additionally, the function should enable the fifth radio button, set the value to `40`, and update the displayed text to `, score = 40`. \n\n```js\nconst assertLargeStraight = (_diceValuesArr) => {\n  resetRadioOptions();\n  checkForStraights(_diceValuesArr);\n  assert.isFalse(scoreInputs[3].disabled);\n  assert.strictEqual(scoreInputs[3].value, \"30\");\n  assert.strictEqual(scoreSpans[3].innerText, \", score = 30\");\n  assert.isFalse(scoreInputs[4].disabled);\n  assert.strictEqual(scoreInputs[4].value, \"40\");\n  assert.strictEqual(scoreSpans[4].innerText, \", score = 40\");\n}\n// Basic straights\nassertLargeStraight([1,2,3,4,5])\nassertLargeStraight([2,3,4,5,6])\n// Backward straights\nassertLargeStraight([5,4,3,2,1])\nassertLargeStraight([6,5,4,3,2])\n// Out of order straights\nassertLargeStraight([1,5,3,4,2])\nassertLargeStraight([2,4,6,5,3])\n```\n\nIf no straight is rolled, your `checkForStraights` function should not enable the fourth or fifth radio button.\n\n```js\nconst assertNoStraight = (_diceValuesArr) => {\n  resetRadioOptions();\n  checkForStraights(_diceValuesArr);\n  assert.isTrue(scoreInputs[3].disabled);\n  assert.isTrue(scoreInputs[4].disabled);\n}\n// Simple cases\nassertNoStraight([1,4,4,4,4]);\nassertNoStraight([2,2,3,3,3]);\nassertNoStraight([5,5,5,5,5]);\nassertNoStraight([6,5,1,5,6]);\n// Almost a straight, but broken in middle\nassertNoStraight([1,2,3,5,6]);\nassertNoStraight([1,2,4,5,6]);\n// Almost a straight with duplicates in middle\nassertNoStraight([1,2,2,3,5]);\nassertNoStraight([2,4,4,5,6]);\n// Repeat of last 4 cases, but not in order\nassertNoStraight([1,5,6,2,3]);\nassertNoStraight([5,2,4,1,6]);\nassertNoStraight([2,1,5,3,2]);\nassertNoStraight([2,4,5,4,6]);\n```\n\nIf no straight is rolled, your `checkForStraights` function should enable the final radio button set the value to `0`, and update the displayed text to `, score = 0`.\n\n```js\nresetRadioOptions();\ncheckForStraights([1,1,1,1,1]);\nassert.isFalse(scoreInputs[5].disabled);\nassert.strictEqual(scoreInputs[5].value, \"0\");\nassert.strictEqual(scoreSpans[5].innerText, \", score = 0\");\n```\n\nYou should call the `checkForStraights` function when the `rollDiceBtn` is clicked.\n\n```js\nresetRadioOptions();\nconst origMathRandom = Math.random;\n// Temporarily modifies Math.random to guarantee a straight.\nconst myMathRandom = (() => {\n  let i = 0;\n  const values = [4/6,2/6,5/6,3/6,1/6];\n  return () => values[i++ % 5];\n})();\n\nMath.random = myMathRandom;\n\ntry {\n  rollDiceBtn.click();\n} finally {\n  Math.random = origMathRandom;\n}\n\nassert.isFalse(scoreInputs[4].disabled);\nassert.strictEqual(scoreInputs[4].value, \"40\");\nassert.strictEqual(scoreSpans[4].innerText, \", score = 40\");\n```"
    },
    {
      "title": "Step 15",
      "description": "Lastly, you should tidy up your code with a bit of refactoring! You might notice that your code enabled the last radio button (\"None of the Above\") multiple times within your `getHighestDuplicates`, `detectFullHouse` and `checkForStraights` functions. Refactor your code so that instead of enabling the last radio button at the end of each function, it should only be done once inside of `rollDiceBtn`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst roundElement = document.getElementById(\"current-round\");\nconst rollsElement = document.getElementById(\"current-round-rolls\");\nconst totalScoreElement = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet round = 1;\nlet rolls = 0;\n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n};\n\nconst updateRadioOption = (index, score) => {\n  scoreInputs[index].disabled = false;\n  scoreInputs[index].value = score;\n  scoreSpans[index].textContent = `, score = ${score}`;\n};\n\nconst updateScore = (selectedValue, achieved) => {\n  score += parseInt(selectedValue);\n  totalScoreElement.textContent = score;\n\n  scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;\n};\n\n--fcc-editable-region--\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = arr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst detectFullHouse = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n  }\n\n  const hasThreeOfAKind = Object.values(counts).includes(3);\n  const hasPair = Object.values(counts).includes(2);\n\n  if (hasThreeOfAKind && hasPair) {\n    updateRadioOption(2, 25);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst checkForStraights = (arr) => {\n  const sortedNumbersArr = arr.sort((a, b) => a - b);\n  const uniqueNumbersArr = [...new Set(sortedNumbersArr)];\n  const uniqueNumbersStr = uniqueNumbersArr.join(\"\");\n\n  const smallStraightsArr = [\"1234\", \"2345\", \"3456\"];\n  const largeStraightsArr = [\"12345\", \"23456\"];\n\n  if (smallStraightsArr.some(straight => uniqueNumbersStr.includes(straight))) {\n    updateRadioOption(3, 30);\n  }\n\n  if (largeStraightsArr.includes(uniqueNumbersStr)) {\n    updateRadioOption(4, 40);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst resetRadioOptions = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\nconst resetGame = () => {\n  diceValuesArr = [0, 0, 0, 0, 0];\n  score = 0;\n  round = 1;\n  rolls = 0;\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n\n  totalScoreElement.textContent = score;\n  scoreHistory.innerHTML = \"\";\n\n  rollsElement.textContent = rolls;\n  roundElement.textContent = round;\n\n  resetRadioOptions();\n};\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOptions();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n    detectFullHouse(diceValuesArr);\n    checkForStraights(diceValuesArr);\n    \n  }\n});\n\n--fcc-editable-region--\n\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});\n\nkeepScoreBtn.addEventListener(\"click\", () => {\n  let selectedValue;\n  let achieved;\n\n  for (const radioButton of scoreInputs) {\n    if (radioButton.checked) {\n      selectedValue = radioButton.value;\n      achieved = radioButton.id;\n      break;\n    }\n  }\n\n  if (selectedValue) {\n    rolls = 0;\n    round++;\n    updateStats();\n    resetRadioOptions();\n    updateScore(selectedValue, achieved);\n    if (round > 6) {\n      setTimeout(() => {\n        alert(`Game Over! Your total score is ${score}`);\n        resetGame();\n      }, 500);\n    }\n  } else {\n    alert(\"Please select an option or roll the dice\");\n  }\n});"
        }
      ],
      "testCode": "Your `getHighestDuplicates` function should not enable the final radio button, or set the final `span` text, regardless of if duplicates are rolled.\n\n```js\nconst assertFinalButtonNotSetDuplicates = (_diceValuesArr) => {\n  resetRadioOptions();\n  getHighestDuplicates(_diceValuesArr);\n  assert.isTrue(scoreInputs[5].disabled);\n  assert.strictEqual(scoreSpans[5].innerText, \"\");\n}\nassertFinalButtonNotSetDuplicates([1,2,3,4,5]);\nassertFinalButtonNotSetDuplicates([1,1,1,2,3]);\nassertFinalButtonNotSetDuplicates([1,1,1,1,3]);\nassertFinalButtonNotSetDuplicates([1,1,1,1,1]);\n```\n\nYour `detectFullHouse` function should not enable the final radio button, or set the final `span` text, regardless of if a full house is rolled.\n\n```js\nconst assertFinalButtonNotSetFullHouse = (_diceValuesArr) => {\n  resetRadioOptions();\n  detectFullHouse(_diceValuesArr);\n  assert.isTrue(scoreInputs[5].disabled);\n  assert.strictEqual(scoreSpans[5].innerText, \"\");\n}\nassertFinalButtonNotSetFullHouse([1,2,3,4,5]);\nassertFinalButtonNotSetFullHouse([1,1,1,2,2]);\n```\n\nYour `checkForStraights` function should not enable the final radio button, or set the final `span` text, regardless of if a straight is rolled.\n\n```js\nconst assertFinalButtonNotSetStraight = (_diceValuesArr) => {\n  resetRadioOptions();\n  checkForStraights(_diceValuesArr);\n  assert.isTrue(scoreInputs[5].disabled);\n  assert.strictEqual(scoreSpans[5].innerText, \"\");\n}\nassertFinalButtonNotSetStraight([1,1,1,1,1]);\nassertFinalButtonNotSetStraight([1,2,3,4,6]);\nassertFinalButtonNotSetStraight([1,2,3,4,5]);\n```\n\nYou should enable the final radio button, set the value to `0`, and update the displayed text to `, score = 0` when your `rollDiceBtn` is clicked.\n\n```js\nresetRadioOptions();\nrollDiceBtn.click();\nassert.isFalse(scoreInputs[5].disabled);\nassert.strictEqual(scoreInputs[5].value, \"0\");\nassert.strictEqual(scoreSpans[5].innerText, \", score = 0\");\n```"
    }
  ]
}