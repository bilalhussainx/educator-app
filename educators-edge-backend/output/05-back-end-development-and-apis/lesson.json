{
  "section": {
    "id": "05-back-end-development-and-apis",
    "name": "05-back-end-development-and-apis"
  },
  "challenges": [
    {
      "id": "5a8b073d06fa14fcfde687aa",
      "title": "Exercise Tracker",
      "challengeType": 4,
      "dashedName": "exercise-tracker",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://exercise-tracker.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://exercise-tracker.freecodecamp.rocks</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-exercisetracker/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "Your responses should have the following structures.\n\nExercise:\n\n```js\n{\n  username: \"fcc_test\",\n  description: \"test\",\n  duration: 60,\n  date: \"Mon Jan 01 1990\",\n  _id: \"5fb5853f734231456ccb3b05\"\n}\n```\n\nUser:\n\n```js\n{\n  username: \"fcc_test\",\n  _id: \"5fb5853f734231456ccb3b05\"\n}\n```\n\nLog:\n\n```js\n{\n  username: \"fcc_test\",\n  count: 1,\n  _id: \"5fb5853f734231456ccb3b05\",\n  log: [{\n    description: \"test\",\n    duration: 60,\n    date: \"Mon Jan 01 1990\",\n  }]\n}\n```\n\n**Hint:** For the `date` property, the `toDateString` method of the `Date` API can be used to achieve the expected output.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/exercise-tracker\\.freecodecamp\\.rocks/.test(code)\n  );"
        },
        {
          "text": "You can `POST` to `/api/users` with form data `username` to create a new user.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  assert.isTrue(res.ok);\n  if(!res.ok) {\n    throw new Error(`${res.status} ${res.statusText}`)\n  };\n};"
        },
        {
          "text": "The returned response from `POST /api/users` with form data `username` will be an object with `username` and `_id` properties.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    assert.exists(_id);\n    assert.exists(username);\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        },
        {
          "text": "You can make a `GET` request to `/api/users` to get a list of all users.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users');\n  assert.isTrue(res.ok);\n  if(!res.ok) {\n    throw new Error(`${res.status} ${res.statusText}`)\n  };\n};"
        },
        {
          "text": "The `GET` request to `/api/users` returns an array.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users');\n  if(res.ok){\n    const users = await res.json();\n    assert.isArray(users);\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"
        },
        {
          "text": "Each element in the array returned from `GET /api/users` is an object literal containing a user's `username` and `_id`.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users');\n  if(res.ok){\n    const users = await res.json();\n    const user = users[0];\n    assert.exists(user);\n    assert.exists(user.username);\n    assert.exists(user._id);\n    assert.isString(user.username);\n    assert.isString(user._id);\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"
        },
        {
          "text": "You can `POST` to `/api/users/:_id/exercises` with form data `description`, `duration`, and optionally `date`. If no date is supplied, the current date will be used.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: 'Mon Jan 01 1990'\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}&date=1990-01-01`\n    });\n  assert.isTrue(addRes.ok);\n  if(!addRes.ok) {\n    throw new Error(`${addRes.status} ${addRes.statusText}`)\n  };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        },
        {
          "text": "The response returned from `POST /api/users/:_id/exercises` will be the user object with the exercise fields added.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: 'Mon Jan 01 1990'\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}&date=1990-01-01`\n    });\n    assert.isTrue(addRes.ok);\n    if (!addRes.ok) {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    }\n    const responseBody = await addRes.json();\n    assert.isString(responseBody.description);\n    assert.isNumber(responseBody.duration);\n    assert.isString(responseBody.date);\n    assert.equal(responseBody._id, expected._id);\n    assert.equal(responseBody.username, expected.username);\n    assert.equal(responseBody.description, expected.description);\n    assert.equal(responseBody.duration, expected.duration);\n    const receivedDate = new Date(responseBody.date);\n    const expectedDate = new Date(expected.date); // Jan 1, 1990\n    const allowedPreviousDate = new Date(expectedDate);\n    allowedPreviousDate.setDate(expectedDate.getDate() - 1); // Dec 31, 1989\n    const isValidDate =\n      receivedDate.toDateString() === expectedDate.toDateString() ||\n      receivedDate.toDateString() === allowedPreviousDate.toDateString();\n    assert.isTrue(\n      isValidDate,\n      `Expected date to be ${expectedDate.toDateString()} or ${allowedPreviousDate.toDateString()}, but got ${receivedDate.toDateString()}`\n    );\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        },
        {
          "text": "You can make a `GET` request to `/api/users/:_id/logs` to retrieve a full exercise log of any user.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if (addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n    assert.isTrue(logRes.ok);\n    if(!logRes.ok) {\n      throw new Error(`${logRes.status} ${logRes.statusText}`)\n    };\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        },
        {
          "text": "A request to a user's log `GET /api/users/:_id/logs` returns a user object with a `count` property representing the number of exercises that belong to that user.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if (addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if (logRes.ok) {\n        const { count } = await logRes.json();\n        assert(count);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        },
        {
          "text": "A `GET` request to `/api/users/:_id/logs` will return the user object with a `log` array of all the exercises added.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  })\n  if(res.ok){\n    const {_id, username} = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok){\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok) {\n        const {log} = await logRes.json();\n        assert.isArray(log);\n        assert.equal(1, log.length);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`)\n  };\n};"
        },
        {
          "text": "Each item in the `log` array that is returned from `GET /api/users/:_id/logs` is an object that should have a `description`, `duration`, and `date` properties.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + `/api/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if(res.ok) {\n    const {_id, username} = await res.json();\n     const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok) {\n        const {log} = await logRes.json();\n        const exercise = log[0];\n        assert.exists(exercise);\n        assert.exists(exercise.description);\n        assert.exists(exercise.duration);\n        assert.exists(exercise.date);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      };\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`)\n  };\n};"
        },
        {
          "text": "The `description` property of any object in the `log` array that is returned from `GET /api/users/:_id/logs` should be a string.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0,29)\n  });\n  if(res.ok) {\n    const {_id, username} = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok){\n        const {log} = await logRes.json();\n        const exercise = log[0];\n        assert.isString(exercise.description);\n        assert.equal(exercise.description, expected.description);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"
        },
        {
          "text": "The `duration` property of any object in the `log` array that is returned from `GET /api/users/:_id/logs` should be a number.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0,29)\n  });\n  if(res.ok) {\n    const {_id, username} = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok){\n        const {log} = await logRes.json();\n        const exercise = log[0];\n        assert.isNumber(exercise.duration);\n        assert.equal(exercise.duration, expected.duration);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"
        },
        {
          "text": "The `date` property of any object in the `log` array that is returned from `GET /api/users/:_id/logs` should be a string. Use the `dateString` format of the `Date` API.\n\n```js\nasync () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n\nif (res.ok) {\n    const { _id, username } = await res.json();\n    const currentDate = new Date();\n    const expectedDates = [\n      new Date(currentDate.setDate(currentDate.getDate() - 1)).toLocaleDateString(\"en-US\", {\n        timeZone: \"UTC\", weekday: \"short\", month: \"short\",\n        day: \"2-digit\", year: \"numeric\"\n      }).replaceAll(',', ''),\n      new Date().toLocaleDateString(\"en-US\", {\n        timeZone: \"UTC\", weekday: \"short\", month: \"short\",\n        day: \"2-digit\", year: \"numeric\"\n      }).replaceAll(',', ''),\n      new Date(currentDate.setDate(currentDate.getDate() + 1)).toLocaleDateString(\"en-US\", {\n        timeZone: \"UTC\", weekday: \"short\", month: \"short\",\n        day: \"2-digit\", year: \"numeric\"\n      }).replaceAll(',', '')\n    ];\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if (addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if (logRes.ok) {\n        const { log } = await logRes.json();\n        const exercise = log[0];\n        assert.isString(exercise.date);\n        assert.include(expectedDates, exercise.date); // Check if date matches any valid dates\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};\n```\n\nYou can add `from`, `to` and `limit` parameters to a `GET /api/users/:_id/logs` request to retrieve part of the log of any user. `from` and `to` are dates in `yyyy-mm-dd` format. `limit` is an integer of how many logs to send back.",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addExerciseRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}&date=1990-01-01`\n    });\n    const addExerciseTwoRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}&date=1990-01-03`\n    });\n    if (addExerciseRes.ok && addExerciseTwoRes.ok) {\n      const logRes = await fetch(\n        url + `/api/users/${_id}/logs?from=1989-12-31&to=1990-01-04`\n      );\n      if (logRes.ok) {\n        const { log } = await logRes.json();\n        assert.isArray(log);\n        assert.equal(2, log.length);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n      const limitRes = await fetch(\n        url + `/api/users/${_id}/logs?limit=1`\n      );\n      if (limitRes.ok) {\n        const { log } = await limitRes.json();\n        assert.isArray(log);\n        assert.equal(1, log.length);\n      } else {\n        throw new Error(`${limitRes.status} ${limitRes.statusText}`);\n      }\n      const filterDateBeforeLimitRes = await fetch(\n        url + `/api/users/${_id}/logs?from=1990-01-02&to=1990-01-04&limit=1`\n      );\n      if (filterDateBeforeLimitRes.ok) {\n        const { log } = await filterDateBeforeLimitRes.json();\n        assert.isArray(log);\n        assert.equal(1, log.length);\n      } else {\n        throw new Error(`${filterDateBeforeLimitRes.status} ${filterDateBeforeLimitRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${res.status} ${res.statusText}`);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301505,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\exercise-tracker.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "back-end-development-and-apis-projects",
        "name": "Back End Development And Apis Projects"
      }
    },
    {
      "id": "bd7158d8c443edefaeb5bd0f",
      "title": "File Metadata Microservice",
      "challengeType": 4,
      "dashedName": "file-metadata-microservice",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://file-metadata-microservice.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://file-metadata-microservice.freecodecamp.rocks</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-filemetadata/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "**HINT:** You can use the `multer` npm package to handle file uploading.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/file-metadata-microservice\\.freecodecamp\\.rocks/.test(\n      code\n    )\n  );"
        },
        {
          "text": "You can submit a form that includes a file upload.",
          "testCode": "async () => {\n  const site = await fetch(code);\n  const data = await site.text();\n  const doc = new DOMParser().parseFromString(data, 'text/html');\n  assert(doc.querySelector('input[type=\"file\"]'));\n};"
        },
        {
          "text": "The form file input field has the `name` attribute set to `upfile`.",
          "testCode": "async () => {\n  const site = await fetch(code);\n  const data = await site.text();\n  const doc = new DOMParser().parseFromString(data, 'text/html');\n  assert(doc.querySelector('input[name=\"upfile\"]'));\n};"
        },
        {
          "text": "When you submit a file, you receive the file `name`, `type`, and `size` in bytes within the JSON response.",
          "testCode": "async () => {\n  const formData = new FormData();\n  const fileData = await fetch(\n    'https://cdn.freecodecamp.org/weather-icons/01d.png'\n  );\n  const file = await fileData.blob();\n  formData.append('upfile', file, 'icon');\n  const data = await fetch(code + '/api/fileanalyse', {\n    method: 'POST',\n    body: formData\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'size');\n  assert.equal(parsed.name, 'icon');\n  assert.equal(parsed.type, 'image/png');\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301506,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\file-metadata-microservice.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "back-end-development-and-apis-projects",
        "name": "Back End Development And Apis Projects"
      }
    },
    {
      "id": "bd7158d8c443edefaeb5bdff",
      "title": "Request Header Parser Microservice",
      "challengeType": 4,
      "dashedName": "request-header-parser-microservice",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://request-header-parser-microservice.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://request-header-parser-microservice.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-headerparser/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/request-header-parser-microservice\\.freecodecamp\\.rocks/.test(\n      code\n    )\n  );"
        },
        {
          "text": "A request to `/api/whoami` should return a JSON object with your IP address in the `ipaddress` key.",
          "testCode": "$.get(code + '/api/whoami').then(\n    (data) => assert(data.ipaddress && data.ipaddress.length > 0),\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "A request to `/api/whoami` should return a JSON object with your preferred language in the `language` key.",
          "testCode": "$.get(code + '/api/whoami').then(\n    (data) => assert(data.language && data.language.length > 0),\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "A request to `/api/whoami` should return a JSON object with your software in the `software` key.",
          "testCode": "$.get(code + '/api/whoami').then(\n    (data) => assert(data.software && data.software.length > 0),\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301507,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\request-header-parser-microservice.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "back-end-development-and-apis-projects",
        "name": "Back End Development And Apis Projects"
      }
    },
    {
      "id": "bd7158d8c443edefaeb5bdef",
      "title": "Timestamp Microservice",
      "challengeType": 4,
      "dashedName": "timestamp-microservice",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://timestamp-microservice.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://timestamp-microservice.freecodecamp.rocks</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-timestamp/\"  target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n\n**Note:** Time zones conversion is not a purpose of this project, so assume all sent valid dates will be parsed with `new Date()` as GMT dates.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/timestamp-microservice\\.freecodecamp\\.rocks/.test(code)\n  );"
        },
        {
          "text": "A request to `/api/:date?` with a valid date should return a JSON object with a `unix` key that is a Unix timestamp of the input date in milliseconds (as type Number)",
          "testCode": "$.get(code + '/api/2016-12-25').then(\n    (data) => {\n      assert.equal(\n        data.unix,\n        1482624000000,\n        'Should be a valid unix timestamp'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "A request to `/api/:date?` with a valid date should return a JSON object with a `utc` key that is a string of the input date in the format: `Thu, 01 Jan 1970 00:00:00 GMT`",
          "testCode": "$.get(code + '/api/2016-12-25').then(\n    (data) => {\n      assert.equal(\n        data.utc,\n        'Sun, 25 Dec 2016 00:00:00 GMT',\n        'Should be a valid UTC date string'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "A request to `/api/1451001600000` should return `{ unix: 1451001600000, utc: \"Fri, 25 Dec 2015 00:00:00 GMT\" }`",
          "testCode": "$.get(code + '/api/1451001600000').then(\n    (data) => {\n      assert(\n        data.unix === 1451001600000 &&\n          data.utc === 'Fri, 25 Dec 2015 00:00:00 GMT'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "Your project can handle dates that can be successfully parsed by `new Date(date_string)`",
          "testCode": "$.get(code + '/api/05 October 2011, GMT').then(\n    (data) => {\n      assert(\n        data.unix === 1317772800000 &&\n          data.utc === 'Wed, 05 Oct 2011 00:00:00 GMT'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "If the input date string is invalid, the API returns an object having the structure `{ error : \"Invalid Date\" }`",
          "testCode": "$.get(code + '/api/this-is-not-a-date').then(\n    (data) => {\n      assert.equal(data.error.toLowerCase(), 'invalid date');\n    },\n    (xhr) => {\n      assert(xhr.responseJSON.error.toLowerCase() === 'invalid date');\n    }\n  );"
        },
        {
          "text": "An empty date parameter should return the current time in a JSON object with a `unix` key",
          "testCode": "$.get(code + '/api').then(\n    (data) => {\n      var now = Date.now();\n      assert.approximately(data.unix, now, 20000);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "An empty date parameter should return the current time in a JSON object with a `utc` key",
          "testCode": "$.get(code + '/api').then(\n    (data) => {\n      var now = Date.now();\n      var serverTime = new Date(data.utc).getTime();\n      assert.approximately(serverTime, now, 20000);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301508,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\timestamp-microservice.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "back-end-development-and-apis-projects",
        "name": "Back End Development And Apis Projects"
      }
    },
    {
      "id": "bd7158d8c443edefaeb5bd0e",
      "title": "URL Shortener Microservice",
      "challengeType": 4,
      "dashedName": "url-shortener-microservice",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://url-shortener-microservice.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://url-shortener-microservice.freecodecamp.rocks</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-urlshortener/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "**HINT:** Do not forget to use a body parsing middleware to handle the POST requests. Also, you can use the function `dns.lookup(host, cb)` from the `dns` core module to verify a submitted URL.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/url-shortener-microservice\\.freecodecamp\\.rocks/.test(\n      code\n    )\n  );"
        },
        {
          "text": "You can POST a URL to `/api/shorturl` and get a JSON response with `original_url` and `short_url` properties. Here's an example: `{ original_url : 'https://freeCodeCamp.org', short_url : 1}`",
          "testCode": "async () => {\n  const url = code;\n  const urlVariable = Date.now();\n  const fullUrl = `${url}/?v=${urlVariable}`\n  const res = await fetch(url + '/api/shorturl', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `url=${fullUrl}`\n  });\n  if (res.ok) {\n    const { short_url, original_url } = await res.json();\n    assert.isNotNull(short_url);\n    assert.strictEqual(original_url, `${url}/?v=${urlVariable}`);\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        },
        {
          "text": "When you visit `/api/shorturl/<short_url>`, you will be redirected to the original URL.",
          "testCode": "async () => {\n  const url = code;\n  const urlVariable = Date.now();\n  const fullUrl = `${url}/?v=${urlVariable}`\n  let shortenedUrlVariable;\n  const postResponse = await fetch(url + '/api/shorturl', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `url=${fullUrl}`\n  });\n  if (postResponse.ok) {\n    const { short_url } = await postResponse.json();\n    shortenedUrlVariable = short_url;\n  } else {\n    throw new Error(`${postResponse.status} ${postResponse.statusText}`);\n  }\n  const getResponse = await fetch(\n    url + '/api/shorturl/' + shortenedUrlVariable\n  );\n  if (getResponse) {\n    const { redirected, url } = getResponse;\n    assert.isTrue(redirected);\n    assert.strictEqual(url,fullUrl);\n  } else {\n    throw new Error(`${getResponse.status} ${getResponse.statusText}`);\n  }\n};"
        },
        {
          "text": "If you pass an invalid URL that doesn't follow the valid `http://www.example.com` format, the JSON response will contain `{ error: 'invalid url' }`",
          "testCode": "async () => {\n  const url = code;\n  const res = await fetch(url + '/api/shorturl', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `url=ftp:/john-doe.invalidTLD`\n  });\n  if (res.ok) {\n    const { error } = await res.json();\n    assert.isNotNull(error);\n    assert.strictEqual(error.toLowerCase(), 'invalid url');\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301509,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\back-end-development-and-apis-projects\\url-shortener-microservice.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "back-end-development-and-apis-projects",
        "name": "Back End Development And Apis Projects"
      }
    },
    {
      "id": "587d7fb1367417b2b2512bf4",
      "title": "Chain Middleware to Create a Time Server",
      "challengeType": 2,
      "dashedName": "chain-middleware-to-create-a-time-server",
      "description": "Middleware can be mounted at a specific route using `app.METHOD(path, middlewareFunction)`. Middleware can also be chained within a route definition.\n\nLook at the following example:\n\n```js\napp.get('/user', function(req, res, next) {\n  req.user = getTheUserSync();  // Hypothetical synchronous operation\n  next();\n}, function(req, res) {\n  res.send(req.user);\n});\n```\n\nThis approach is useful to split the server operations into smaller units. That leads to a better app structure, and the possibility to reuse code in different places. This approach can also be used to perform some validation on the data. At each point of the middleware stack you can block the execution of the current chain and pass control to functions specifically designed to handle errors. Or you can pass control to the next matching route, to handle special cases. We will see how in the advanced Express section.",
      "instructions": "In the route `app.get('/now', ...)` chain a middleware function and the final handler. In the middleware function you should add the current time to the request object in the `req.time` key. You can use `new Date().toString()`. In the handler, respond with a JSON object, taking the structure `{time: req.time}`.\n\n**Note:** The test will not pass if you don’t chain the middleware. If you mount the function somewhere else, the test will fail, even if the output result is correct.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "The /now endpoint should have mounted middleware",
          "testCode": "$.get(code + '/_api/chain-middleware-time').then(\n    (data) => {\n      assert.equal(\n        data.stackLength,\n        2,\n        '\"/now\" route has no mounted middleware'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "The `/now` endpoint should return the current time.",
          "testCode": "$.get(code + '/_api/chain-middleware-time').then(\n    (data) => {\n      var now = new Date();\n      assert.isAtMost(\n        Math.abs(new Date(data.time) - now),\n        20000,\n        'the returned time is not between +- 20 secs from now'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301510,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\chain-middleware-to-create-a-time-server.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb2367417b2b2512bf8",
      "title": "Get Data from POST Requests",
      "challengeType": 2,
      "dashedName": "get-data-from-post-requests",
      "description": "Mount a POST handler at the path `/name`. It’s the same path as before. We have prepared a form in the html frontpage. It will submit the same data of exercise 10 (Query string). If the body-parser is configured correctly, you should find the parameters in the object `req.body`. Have a look at the usual library example:\n\n<blockquote>route: POST '/library'<br>urlencoded_body: userId=546&#x26;bookId=6754 <br>req.body: {userId: '546', bookId: '6754'}</blockquote>\n\nRespond with the same JSON object as before: `{name: 'firstname lastname'}`. Test if your endpoint works using the html form we provided in the app frontpage.\n\nTip: There are several other http methods other than GET and POST. And by convention there is a correspondence between the http verb, and the operation you are going to execute on the server. The conventional mapping is:\n\nPOST (sometimes PUT) - Create a new resource using the information sent with the request,\n\nGET - Read an existing resource without modifying it,\n\nPUT or PATCH (sometimes POST) - Update a resource using the data sent,\n\nDELETE - Delete a resource.\n\nThere are also a couple of other methods which are used to negotiate a connection with the server. Except for GET, all the other methods listed above can have a payload (i.e. the data into the request body). The body-parser middleware works with these methods as well.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Test 1 : Your API endpoint should respond with the correct name",
          "testCode": "$.post(code + '/name', { first: 'Mick', last: 'Jagger' }).then(\n    (data) => {\n      assert.equal(\n        data.name,\n        'Mick Jagger',\n        'Test 1: \"POST /name\" route does not behave as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "Test 2 : Your API endpoint should respond with the correct name",
          "testCode": "$.post(code + '/name', {\n    first: 'Keith',\n    last: 'Richards'\n  }).then(\n    (data) => {\n      assert.equal(\n        data.name,\n        'Keith Richards',\n        'Test 2: \"POST /name\" route does not behave as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301511,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-data-from-post-requests.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb2367417b2b2512bf6",
      "title": "Get Query Parameter Input from the Client",
      "challengeType": 2,
      "dashedName": "get-query-parameter-input-from-the-client",
      "description": "Another common way to get input from the client is by encoding the data after the route path, using a query string. The query string is delimited by a question mark (?), and includes field=value couples. Each couple is separated by an ampersand (&). Express can parse the data from the query string, and populate the object `req.query`. Some characters, like the percent (%), cannot be in URLs and have to be encoded in a different format before you can send them. If you use the API from JavaScript, you can use specific methods to encode/decode these characters.\n\n<blockquote>route_path: '/library'<br>actual_request_URL: '/library?userId=546&#x26;bookId=6754' <br>req.query: {userId: '546', bookId: '6754'}</blockquote>",
      "instructions": "Build an API endpoint, mounted at `GET /name`. Respond with a JSON document, taking the structure `{ name: 'firstname lastname'}`. The first and last name parameters should be encoded in a query string e.g. `?first=firstname&last=lastname`.\n\n**Note:** In the following exercise you are going to receive data from a POST request, at the same `/name` route path. If you want, you can use the method `app.route(path).get(handler).post(handler)`. This syntax allows you to chain different verb handlers on the same path route. You can save a bit of typing, and have cleaner code.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Test 1 : Your API endpoint should respond with `{ \"name\": \"Mick Jagger\" }` when the `/name` endpoint is called with `?first=Mick&last=Jagger`",
          "testCode": "$.get(code + '/name?first=Mick&last=Jagger').then(\n    (data) => {\n      assert.equal(\n        data.name,\n        'Mick Jagger',\n        'Test 1: \"GET /name\" route does not behave as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "Test 2 : Your API endpoint should respond with `{ \"name\": \"Keith Richards\" }` when the `/name` endpoint is called with `?first=Keith&last=Richards`",
          "testCode": "$.get(code + '/name?last=Richards&first=Keith').then(\n    (data) => {\n      assert.equal(\n        data.name,\n        'Keith Richards',\n        'Test 2: \"GET /name\" route does not behave as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301512,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-query-parameter-input-from-the-client.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb2367417b2b2512bf5",
      "title": "Get Route Parameter Input from the Client",
      "challengeType": 2,
      "dashedName": "get-route-parameter-input-from-the-client",
      "description": "When building an API, we have to allow users to communicate to us what they want to get from our service. For example, if the client is requesting information about a user stored in the database, they need a way to let us know which user they're interested in. One possible way to achieve this result is by using route parameters. Route parameters are named segments of the URL, delimited by slashes (/). Each segment captures the value of the part of the URL which matches its position. The captured values can be found in the `req.params` object.\n\n<blockquote>route_path: '/user/:userId/book/:bookId'<br>actual_request_URL: '/user/546/book/6754' <br>req.params: {userId: '546', bookId: '6754'}</blockquote>",
      "instructions": "Build an echo server, mounted at the route `GET /:word/echo`. Respond with a JSON object, taking the structure `{echo: word}`. You can find the word to be repeated at `req.params.word`. You can test your route from your browser's address bar, visiting some matching routes, e.g. `your-app-rootpath/freecodecamp/echo`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Test 1 : Your echo server should repeat words correctly",
          "testCode": "$.get(code + '/eChOtEsT/echo').then(\n    (data) => {\n      assert.equal(\n        data.echo,\n        'eChOtEsT',\n        'Test 1: the echo server is not working as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "Test 2 : Your echo server should repeat words correctly",
          "testCode": "$.get(code + '/ech0-t3st/echo').then(\n    (data) => {\n      assert.equal(\n        data.echo,\n        'ech0-t3st',\n        'Test 2: the echo server is not working as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301513,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\get-route-parameter-input-from-the-client.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb1367417b2b2512bf3",
      "title": "Implement a Root-Level Request Logger Middleware",
      "challengeType": 2,
      "dashedName": "implement-a-root-level-request-logger-middleware",
      "description": "Earlier, you were introduced to the `express.static()` middleware function. Now it’s time to see what middleware is, in more detail. Middleware functions are functions that take 3 arguments: the request object, the response object, and the next function in the application’s request-response cycle. These functions execute some code that can have side effects on the app, and usually add information to the request or response objects. They can also end the cycle by sending a response when some condition is met. If they don’t send the response when they are done, they start the execution of the next function in the stack. This triggers calling the 3rd argument, `next()`.\n\nLook at the following example:\n\n```js\nfunction(req, res, next) {\n  console.log(\"I'm a middleware...\");\n  next();\n}\n```\n\nLet’s suppose you mounted this function on a route. When a request matches the route, it displays the string “I’m a middleware…”, then it executes the next function in the stack. In this exercise, you are going to build root-level middleware. As you have seen in challenge 4, to mount a middleware function at root level, you can use the `app.use(<mware-function>)` method. In this case, the function will be executed for all the requests, but you can also set more specific conditions. For example, if you want a function to be executed only for POST requests, you could use `app.post(<mware-function>)`. Analogous methods exist for all the HTTP verbs (GET, DELETE, PUT, …).",
      "instructions": "Build a simple logger. For every request, it should log to the console a string taking the following format: `method path - ip`. An example would look like this: `GET /json - ::ffff:127.0.0.1`. Note that there is a space between `method` and `path` and that the dash separating `path` and `ip` is surrounded by a space on both sides. You can get the request method (http verb), the relative route path, and the caller’s ip from the request object using `req.method`, `req.path` and `req.ip`. Remember to call `next()` when you are done, or your server will be stuck forever. Be sure to have the ‘Logs’ opened, and see what happens when some request arrives.\n\n**Note:** Express evaluates functions in the order they appear in the code. This is true for middleware too. If you want it to work for all the routes, it should be mounted before them.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Root level logger middleware should be active",
          "testCode": "$.get(code + '/_api/root-middleware-logger').then(\n    (data) => {\n      assert.isTrue(\n        data.passed,\n        'root-level logger is not working as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301514,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\implement-a-root-level-request-logger-middleware.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb0367417b2b2512bed",
      "title": "Meet the Node console",
      "challengeType": 2,
      "dashedName": "meet-the-node-console",
      "description": "Working on these challenges will involve you writing your code using one of the following methods:\n\n- Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-express/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete these challenges locally.\n- Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n\nDuring the development process, it is important to be able to check what’s going on in your code.\n\nNode is just a JavaScript environment. Like client side JavaScript, you can use the console to display useful debug information. On your local machine, you would see console output in a terminal.\n\nWe recommend to keep the terminal open while working at these challenges. By reading the output in the terminal, you can see any errors that may occur.\n\nThe server must be restarted after making changes to its files.\n\nYou can stop the server from the terminal using `Ctrl + C` and start it using Node directly (`node mainEntryFile.js`) or using a run script in the `package.json` file with `npm run`.\n\nFor example, the `\"start\": \"node server.js\"` script would be run from the terminal using `npm run start`.\n\nTo implement server auto restarting on file save Node provides the `--watch` flag you can add to your start script `\"start\": \"node --watch server.js\"` or you can install an npm package like `nodemon`. We will leave this to you as an exercise.",
      "instructions": "Modify the `myApp.js` file to log \"Hello World\" to the console.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`\"Hello World\"` should be in the console",
          "testCode": "$.get(code + '/_api/hello-console').then(\n    (data) => {\n      assert.isTrue(data.passed, '\"Hello World\" is not in the server console');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301515,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\meet-the-node-console.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb0367417b2b2512bef",
      "title": "Serve an HTML File",
      "challengeType": 2,
      "dashedName": "serve-an-html-file",
      "description": "You can respond to requests with a file using the `res.sendFile(path)` method. You can put it inside the `app.get('/', ...)` route handler. Behind the scenes, this method will set the appropriate headers to instruct your browser on how to handle the file you want to send, according to its type. Then it will read and send the file. This method needs an absolute file path. We recommend you to use the Node global variable `__dirname` to calculate the path like this:\n\n```js\nabsolutePath = __dirname + '/relativePath/file.ext'\n```",
      "instructions": "Send the `/views/index.html` file as a response to GET requests to the `/` path. If you view your live app, you should see a big HTML heading (and a form that we will use later…), with no style applied.\n\n**Note:** You can edit the solution of the previous challenge or create a new one. If you create a new solution, keep in mind that Express evaluates routes from top to bottom, and executes the handler for the first match. You have to comment out the preceding solution, or the server will keep responding with a string.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Your app should serve the file views/index.html",
          "testCode": "$.get(code).then(\n    (data) => {\n      assert.match(\n        data,\n        /<h1>.*<\\/h1>/,\n        'Your app does not serve the expected HTML'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301516,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-an-html-file.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb1367417b2b2512bf1",
      "title": "Serve JSON on a Specific Route",
      "challengeType": 2,
      "dashedName": "serve-json-on-a-specific-route",
      "description": "While an HTML server serves HTML, an API serves data. A <dfn>REST</dfn> (REpresentational State Transfer) API allows data exchange in a simple way, without the need for clients to know any detail about the server. The client only needs to know where the resource is (the URL), and the action it wants to perform on it (the verb). The GET verb is used when you are fetching some information, without modifying anything. These days, the preferred data format for moving information around the web is JSON. Simply put, JSON is a convenient way to represent a JavaScript object as a string, so it can be easily transmitted.\n\nLet's create a simple API by creating a route that responds with JSON at the path `/json`. You can do it as usual, with the `app.get()` method. Inside the route handler, use the method `res.json()`, passing in an object as an argument. This method closes the request-response loop, returning the data. Behind the scenes, it converts a valid JavaScript object into a string, then sets the appropriate headers to tell your browser that you are serving JSON, and sends the data back. A valid object has the usual structure `{key: data}`. `data` can be a number, a string, a nested object or an array. `data` can also be a variable or the result of a function call, in which case it will be evaluated before being converted into a string.",
      "instructions": "Serve the object `{\"message\": \"Hello json\"}` as a response, in JSON format, to GET requests to the `/json` route. Then point your browser to `your-app-url/json`, you should see the message on the screen.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "The endpoint `/json` should serve the JSON object `{\"message\": \"Hello json\"}`",
          "testCode": "$.get(code + '/json').then(\n    (data) => {\n      assert.equal(\n        data.message,\n        'Hello json',\n        \"The '/json' endpoint does not serve the right data\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301517,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-json-on-a-specific-route.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb0367417b2b2512bf0",
      "title": "Serve Static Assets",
      "challengeType": 2,
      "dashedName": "serve-static-assets",
      "description": "An HTML server usually has one or more directories that are accessible by the user. You can place there the static assets needed by your application (stylesheets, scripts, images).\n\nIn Express, you can put in place this functionality using the middleware `express.static(path)`, where the `path` parameter is the absolute path of the folder containing the assets.\n\nIf you don’t know what middleware is... don’t worry, we will discuss in detail later. Basically, middleware are functions that intercept route handlers, adding some kind of information. A middleware needs to be mounted using the method `app.use(path, middlewareFunction)`. The first `path` argument is optional. If you don’t pass it, the middleware will be executed for all requests.",
      "instructions": "Mount the `express.static()` middleware to the path `/public` with `app.use()`. The absolute path to the assets folder is `__dirname + /public`.\n\nNow your app should be able to serve a CSS stylesheet. Note that the `/public/style.css` file is referenced in the `/views/index.html` in the project boilerplate. Your front-page should look a little better now!",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Your app should serve asset files from the `/public` directory to the `/public` path",
          "testCode": "$.get(code + '/public/style.css').then(\n    (data) => {\n      assert.match(\n        data,\n        /body\\s*\\{[^\\}]*\\}/,\n        'Your app does not serve static assets'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "Your app should not serve files from any other folders except from `/public` directory",
          "testCode": "$.get(code + '/server.js').then(\n    (data) => {\n       assert.equal(\n        data?.status + '',\n        404 + '',\n        'Your app must serve files only from \"public\" directory'\n      );\n    },\n    (xhr) => {\n      assert.equal(\n        xhr?.status + '',\n        404 + '',\n        'Your app must serve files only from \"public\" directory'\n      );\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301518,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\serve-static-assets.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb0367417b2b2512bee",
      "title": "Start a Working Express Server",
      "challengeType": 2,
      "dashedName": "start-a-working-express-server",
      "description": "In the first two lines of the file `myApp.js`, you can see how easy it is to create an Express app object. This object has several methods, and you will learn many of them in these challenges. One fundamental method is `app.listen(port)`. It tells your server to listen on a given port, putting it in running state. For testing reasons, we need the app to be running in the background so we added this method in the `server.js` file for you.\n\nLet’s serve our first string! In Express, routes takes the following structure: `app.METHOD(PATH, HANDLER)`. METHOD is an http method in lowercase. PATH is a relative path on the server (it can be a string, or even a regular expression). HANDLER is a function that Express calls when the route is matched. Handlers take the form `function(req, res) {...}`, where req is the request object, and res is the response object. For example, the handler\n\n```js\nfunction(req, res) {\n  res.send('Response String');\n}\n```\n\nwill serve the string 'Response String'.",
      "instructions": "Use the `app.get()` method to serve the string \"Hello Express\" to GET requests matching the `/` (root) path. Be sure that your code works by looking at the logs.\n\n**Note:** All the code for these lessons should be added in between the few lines of code we have started you off with.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Your app should serve the string 'Hello Express'",
          "testCode": "$.get(code).then(\n    (data) => {\n      assert.equal(\n        data,\n        'Hello Express',\n        'Your app does not serve the text \"Hello Express\"'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301519,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\start-a-working-express-server.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb2367417b2b2512bf7",
      "title": "Use body-parser to Parse POST Requests",
      "challengeType": 2,
      "dashedName": "use-body-parser-to-parse-post-requests",
      "description": "Besides GET, there is another common HTTP verb, it is POST. POST is the default method used to send client data with HTML forms. In REST convention, POST is used to send data to create new items in the database (a new user, or a new blog post). You don’t have a database in this project, but you are going to learn how to handle POST requests anyway.\n\nIn these kind of requests, the data doesn’t appear in the URL, it is hidden in the request body. The body is a part of the HTTP request, also called the payload. Even though the data is not visible in the URL, this does not mean that it is private. To see why, look at the raw content of an HTTP POST request:\n\n```http\nPOST /path/subpath HTTP/1.0\nFrom: john@example.com\nUser-Agent: someBrowser/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 20\n\nname=John+Doe&age=25\n```\n\nAs you can see, the body is encoded like the query string. This is the default format used by HTML forms. With Ajax, you can also use JSON to handle data having a more complex structure. There is also another type of encoding: multipart/form-data. This one is used to upload binary files. In this exercise, you will use a URL encoded body. To parse the data coming from POST requests, you must use the `body-parser` package. This package allows you to use a series of middleware, which can decode data in different formats.",
      "instructions": "`body-parser` has already been installed and is in your project's `package.json` file. `require` it at the top of the `myApp.js` file and store it in a variable named `bodyParser`. The middleware to handle URL encoded data is returned by `bodyParser.urlencoded({extended: false})`. Pass the function returned by the previous method call to `app.use()`. As usual, the middleware must be mounted before all the routes that depend on it.\n\n**Note:** `extended` is a configuration option that tells `body-parser` which parsing needs to be used. When `extended=false` it uses the classic encoding `querystring` library. When `extended=true` it uses `qs` library for parsing. \n\nWhen using `extended=false`, values can be only strings or arrays. The object returned when using `querystring` does not prototypically inherit from the default JavaScript `Object`, which means functions like `hasOwnProperty`, `toString` will not be available. The extended version allows more data flexibility, but it is outmatched by JSON.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "The 'body-parser' middleware should be mounted",
          "testCode": "$.get(code + '/_api/add-body-parser').then(\n    (data) => {\n      assert.isAbove(\n        data.mountedAt,\n        0,\n        '\"body-parser\" is not mounted correctly'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301520,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-body-parser-to-parse-post-requests.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb1367417b2b2512bf2",
      "title": "Use the .env File",
      "challengeType": 2,
      "dashedName": "use-the--env-file",
      "description": "The `.env` file is a hidden file that is used to pass environment variables to your application. This file is secret, no one but you can access it, and it can be used to store data that you want to keep private or hidden. For example, you can store API keys from external services or your database URI. You can also use it to store configuration options. By setting configuration options, you can change the behavior of your application, without the need to rewrite some code.\n\nThe environment variables are accessible from the app as `process.env.VAR_NAME`. The `process.env` object is a global Node object, and variables are passed as strings. By convention, the variable names are all uppercase, with words separated by an underscore. The `.env` is a shell file, so you don’t need to wrap names or values in quotes. It is also important to note that there cannot be space around the equals sign when you are assigning values to your variables, e.g. `VAR_NAME=value`. Usually, you will put each variable definition on a separate line.",
      "instructions": "Let's add an environment variable as a configuration option.\n\nCreate a `.env` file in the root of your project directory, and store the variable `MESSAGE_STYLE=uppercase` in it.\n\nThen, in the `/json` GET route handler you created in the last challenge access `process.env.MESSAGE_STYLE` and transform the response object's `message` to uppercase if the variable equals `uppercase`. The response object should either be `{\"message\": \"Hello json\"}` or `{\"message\": \"HELLO JSON\"}`, depending on the `MESSAGE_STYLE` value. Note that you must read the value of `process.env.MESSAGE_STYLE` **inside** the route handler, not outside of it, due to the way our tests run.\n\nYou will need to use the `dotenv` package. It loads environment variables from your `.env` file into `process.env`. The `dotenv` package has already been installed, and is in your project's `package.json` file. At the top of your `myApp.js` file, add `require('dotenv').config()` to load the environment variables.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "The response of the endpoint `/json` should change according to the environment variable `MESSAGE_STYLE`",
          "testCode": "$.get(code + '/_api/use-env-vars').then(\n    (data) => {\n      assert.isTrue(\n        data.passed,\n        'The response of \"/json\" does not change according to MESSAGE_STYLE'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301521,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\basic-node-and-express\\use-the-.env-file.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "basic-node-and-express",
        "name": "Basic Node And Express"
      }
    },
    {
      "id": "587d7fb3367417b2b2512bfc",
      "title": "Add a Description to Your package.json",
      "challengeType": 2,
      "dashedName": "add-a-description-to-your-package-json",
      "description": "The next part of a good package.json file is the `description` field; where a short, but informative description about your project belongs.\n\nIf some day you plan to publish a package to npm, this is the string that should sell your idea to the user when they decide whether to install your package or not. However, that’s not the only use case for the description, it’s a great way to summarize what a project does. It’s just as important in any Node.js project to help other developers, future maintainers or even your future self understand the project quickly.\n\nRegardless of what you plan for your project, a description is definitely recommended. Here's an example:\n\n```json\n\"description\": \"A project that does something awesome\",\n```",
      "instructions": "Add a `description` to the package.json file of your project.\n\n**Note:** Remember to use double-quotes for field-names (\") and commas (,) to separate fields.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "package.json should have a valid \"description\" key",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.exists(data.description, '\"description\" is missing');\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301522,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-description-to-your-package.json.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb4367417b2b2512bfe",
      "title": "Add a License to Your package.json",
      "challengeType": 2,
      "dashedName": "add-a-license-to-your-package-json",
      "description": "The `license` field is where you inform users of what they are allowed to do with your project.\n\nSome common licenses for open source projects include MIT and BSD. License information is not required, and copyright laws in most countries will give you ownership of what you create by default. However, it’s always a good practice to explicitly state what users can and can’t do. Here's an example of the license field:\n\n```json\n\"license\": \"MIT\",\n```",
      "instructions": "Fill the `license` field in the package.json file of your project as you find suitable.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "package.json should have a valid \"license\" key",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.exists(data.license, '\"license\" is missing');\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301523,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-license-to-your-package.json.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb4367417b2b2512bff",
      "title": "Add a Version to Your package.json",
      "challengeType": 2,
      "dashedName": "add-a-version-to-your-package-json",
      "description": "A `version` is one of the required fields of your package.json file. This field describes the current version of your project. Here's an example:\n\n```json\n\"version\": \"1.2.0\",\n```",
      "instructions": "Add a `version` to the package.json file of your project.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "package.json should have a valid \"version\" key",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.exists(data.version, '\"version\" is missing');\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301525,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-a-version-to-your-package.json.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb4367417b2b2512bfd",
      "title": "Add Keywords to Your package.json",
      "challengeType": 2,
      "dashedName": "add-keywords-to-your-package-json",
      "description": "The `keywords` field is where you can describe your project using related keywords. Here's an example:\n\n```json\n\"keywords\": [ \"descriptive\", \"related\", \"words\" ],\n```\n\nAs you can see, this field is structured as an array of double-quoted strings.",
      "instructions": "Add an array of suitable strings to the `keywords` field in the package.json file of your project.\n\nOne of the keywords should be \"freecodecamp\".",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "package.json should have a valid \"keywords\" key",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.exists(data.keywords, '\"keywords\" is missing');\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        },
        {
          "text": "\"keywords\" field should be an Array",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.isArray(data.keywords, '\"keywords\" is not an array');\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        },
        {
          "text": "\"keywords\" should include \"freecodecamp\"",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.include(\n        data.keywords,\n        'freecodecamp',\n        '\"keywords\" does not include \"freecodecamp\"'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301526,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\add-keywords-to-your-package.json.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb4367417b2b2512c00",
      "title": "Expand Your Project with External Packages from npm",
      "challengeType": 2,
      "dashedName": "expand-your-project-with-external-packages-from-npm",
      "description": "One of the biggest reasons to use a package manager, is their powerful dependency management. Instead of manually having to make sure that you get all dependencies whenever you set up a project on a new computer, npm automatically installs everything for you. But how can npm know exactly what your project needs? Meet the `dependencies` section of your package.json file.\n\nIn this section, packages your project requires are stored using the following format:\n\n```json\n\"dependencies\": {\n  \"package-name\": \"version\",\n  \"express\": \"4.14.0\"\n}\n\n```",
      "instructions": "Add version `1.1.0` of the `@freecodecamp/example` package to the `dependencies` field of your `package.json` file.\n\n**Note:** `@freecodecamp/example` is a faux package used as a learning tool.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`\"dependencies\"` should include `\"@freecodecamp/example\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.property(\n        data.dependencies,\n        '@freecodecamp/example',\n        '\"dependencies\" does not include \"@freecodecamp/example\"'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        },
        {
          "text": "`\"@freecodecamp/example\"` version should be `\"1.1.0\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.match(\n        data.dependencies['@freecodecamp/example'],\n        /^[\\^\\~]?1\\.1\\.0/,\n        'Wrong version of \"@freecodecamp/example\" installed. It should be 1.1.0'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301527,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\expand-your-project-with-external-packages-from-npm.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb3367417b2b2512bfb",
      "title": "How to Use package.json, the Core of Any Node.js Project or npm Package",
      "challengeType": 2,
      "dashedName": "how-to-use-package-json-the-core-of-any-node-js-project-or-npm-package",
      "description": "Working on these challenges will involve you writing your code using one of the following methods:\n\n- Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-npm/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete these challenges locally.\n- Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n\nThe `package.json` file is the center of any Node.js project or npm package. It stores information about your project. It consists of a single JSON object where information is stored in key-value pairs. There are only two required fields; `name` and `version`, but it’s good practice to provide additional information.\n\nYou can create the `package.json` file from the terminal using the `npm init` command. This will run a guided setup. Using `npm init` with the `-y` flag will generate the file without having it ask any questions, `npm init -y`.\n\nIf you look at the file tree of your project, you will find the `package.json` file on the top level of the tree. This is the file that you will be improving in the next couple of challenges.\n\nOne of the most common pieces of information in this file is the `author` field. It specifies who created the project, and can consist of a string or an object with contact or other details. An object is recommended for bigger projects, but a simple string like the following example will do for this project.\n\n```json\n\"author\": \"Jane Doe\",\n```",
      "instructions": "Add your name as the `author` of the project in the `package.json` file.\n\n**Note:** Remember that you’re writing JSON, so all field names must use double-quotes (\") and be separated with a comma (,).",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`package.json` should have a valid \"author\" key",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.exists(data.author, '\"author\" is missing');\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301528,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\how-to-use-package.json-the-core-of-any-node.js-project-or-npm-package.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb5367417b2b2512c01",
      "title": "Manage npm Dependencies By Understanding Semantic Versioning",
      "challengeType": 2,
      "dashedName": "manage-npm-dependencies-by-understanding-semantic-versioning",
      "description": "`Versions` of the npm packages in the dependencies section of your package.json file follow what’s called Semantic Versioning (SemVer), an industry standard for software versioning aiming to make it easier to manage dependencies. Libraries, frameworks or other tools published on npm should use SemVer in order to clearly communicate what kind of changes projects can expect if they update.\n\nKnowing SemVer can be useful when you develop software that uses external dependencies (which you almost always do). One day, your understanding of these numbers will save you from accidentally introducing breaking changes to your project without understanding why things that worked yesterday suddenly don’t work today. This is how Semantic Versioning works according to the official website:\n\n```json\n\"package\": \"MAJOR.MINOR.PATCH\"\n```\n\nThe MAJOR version should increment when you make incompatible API changes. The MINOR version should increment when you add functionality in a backwards-compatible manner. The PATCH version should increment when you make backwards-compatible bug fixes. This means that PATCHes are bug fixes and MINORs add new features but neither of them break what worked before. Finally, MAJORs add changes that won’t work with earlier versions.",
      "instructions": "In the dependencies section of your `package.json` file, change the version of `@freecodecamp/example` to match MAJOR version 1, MINOR version 2 and PATCH version 13",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`\"dependencies\"` should include `\"@freecodecamp/example\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.property(\n        data.dependencies,\n        '@freecodecamp/example',\n        '\"dependencies\" does not include \"@freecodecamp/example\"'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        },
        {
          "text": "`\"@freecodecamp/example\"` version should be `\"1.2.13\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.equal(\n        data.dependencies['@freecodecamp/example'],\n        '1.2.13',\n        'Wrong version of \"@freecodecamp/example\". It should be 1.2.13'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301529,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\manage-npm-dependencies-by-understanding-semantic-versioning.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb5367417b2b2512c04",
      "title": "Remove a Package from Your Dependencies",
      "challengeType": 2,
      "dashedName": "remove-a-package-from-your-dependencies",
      "description": "You have now tested a few ways you can manage dependencies of your project by using the package.json's dependencies section. You have also included external packages by adding them to the file and even told npm what types of versions you want, by using special characters such as the tilde or the caret.\n\nBut what if you want to remove an external package that you no longer need? You might already have guessed it, just remove the corresponding key-value pair for that package from your dependencies.\n\nThis same method applies to removing other fields in your package.json as well.",
      "instructions": "Remove the `@freecodecamp/example` package from your dependencies.\n\n**Note:** Make sure you have the right amount of commas after removing it.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`\"dependencies\"` should not include `\"@freecodecamp/example\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.notProperty(\n        data.dependencies,\n        '@freecodecamp/example',\n        '\"dependencies\" still includes \"@freecodecamp/example\"'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301530,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\remove-a-package-from-your-dependencies.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb5367417b2b2512c03",
      "title": "Use the Caret-Character to Use the Latest Minor Version of a Dependency",
      "challengeType": 2,
      "dashedName": "use-the-caret-character-to-use-the-latest-minor-version-of-a-dependency",
      "description": "Similar to how the tilde we learned about in the last challenge allows npm to install the latest PATCH for a dependency, the caret (`^`) allows npm to install future updates as well. The difference is that the caret will allow both MINOR updates and PATCHes.\n\nYour current version of `@freecodecamp/example` should be `~1.2.13` which allows npm to install to the latest `1.2.x` version. If you were to use the caret (^) as a version prefix instead, npm would be allowed to update to any `1.x.x` version.\n\n```json\n\"package\": \"^1.3.8\"\n```\n\nThis would allow updates to any `1.x.x` version of the package.",
      "instructions": "Use the caret (`^`) to prefix the version of `@freecodecamp/example` in your dependencies and allow npm to update it to any new MINOR release.\n\n**Note:** The version numbers themselves should not be changed.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`\"dependencies\"` should include `\"@freecodecamp/example\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.property(\n        data.dependencies,\n        '@freecodecamp/example',\n        '\"dependencies\" does not include \"@freecodecamp/example\"'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        },
        {
          "text": "`\"@freecodecamp/example\"` version should match `\"^1.x.x\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.match(\n        data.dependencies['@freecodecamp/example'],\n        /^\\^1\\./,\n        'Wrong version of \"@freecodecamp/example\". It should be ^1.2.13'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301531,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\use-the-caret-character-to-use-the-latest-minor-version-of-a-dependency.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb5367417b2b2512c02",
      "title": "Use the Tilde-Character to Always Use the Latest Patch Version of a Dependency",
      "challengeType": 2,
      "dashedName": "use-the-tilde-character-to-always-use-the-latest-patch-version-of-a-dependency",
      "description": "In the last challenge, you told npm to only include a specific version of a package. That’s a useful way to freeze your dependencies if you need to make sure that different parts of your project stay compatible with each other. But in most use cases, you don’t want to miss bug fixes since they often include important security patches and (hopefully) don’t break things in doing so.\n\nTo allow an npm dependency to update to the latest PATCH version, you can prefix the dependency’s version with the tilde (`~`) character. Here's an example of how to allow updates to any `1.3.x` version.\n\n```json\n\"package\": \"~1.3.8\"\n```",
      "instructions": "In the package.json file, your current rule for how npm may upgrade `@freecodecamp/example` is to use a specific version (`1.2.13`). But now, you want to allow the latest `1.2.x` version.\n\nUse the tilde (`~`) character to prefix the version of `@freecodecamp/example` in your dependencies, and allow npm to update it to any new _patch_ release.\n\n**Note:** The version numbers themselves should not be changed.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`\"dependencies\"` should include `\"@freecodecamp/example\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.property(\n        data.dependencies,\n        '@freecodecamp/example',\n        '\"dependencies\" does not include \"@freecodecamp/example\"'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        },
        {
          "text": "`\"@freecodecamp/example\"` version should match `\"~1.2.13\"`.",
          "testCode": "fetch(code + '/_api/package.json')\n  .then(response => response.json())\n  .then(\n    data => {\n      assert.match(\n        data.dependencies['@freecodecamp/example'],\n        /^\\~1\\.2\\.13/,\n        'Wrong version of \"@freecodecamp/example\". It should be ~1.2.13'\n      );\n    },\n    error => {\n      throw new Error(error.message || error.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301532,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\managing-packages-with-npm\\use-the-tilde-character-to-always-use-the-latest-patch-version-of-a-dependency.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "managing-packages-with-npm",
        "name": "Managing Packages With Npm"
      }
    },
    {
      "id": "587d7fb9367417b2b2512c12",
      "title": "Chain Search Query Helpers to Narrow Search Results",
      "challengeType": 2,
      "dashedName": "chain-search-query-helpers-to-narrow-search-results",
      "description": "If you don’t pass the callback as the last argument to `Model.find()` (or to the other search methods), the query is not executed. You can store the query in a variable for later use. This kind of object enables you to build up a query using chaining syntax. The actual db search is executed when you finally chain the method `.exec()`. You always need to pass your callback to this last method. There are many query helpers, here we'll use the most commonly used.",
      "instructions": "Modify the `queryChain` function to find people who like the food specified by the variable named `foodToSearch`. Sort them by `name`, limit the results to two documents, and hide their age. Chain `.find()`, `.sort()`, `.limit()`, `.select()`, and then `.exec()`. Pass the `done(err, data)` callback to `exec()`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Chaining query helpers should succeed",
          "testCode": "$.ajax({\n    url: code + '/_api/query-tools',\n    type: 'POST',\n    contentType: 'application/json',\n    data: JSON.stringify([\n      { name: 'Pablo', age: 26, favoriteFoods: ['burrito', 'hot-dog'] },\n      { name: 'Bob', age: 23, favoriteFoods: ['pizza', 'nachos'] },\n      { name: 'Ashley', age: 32, favoriteFoods: ['steak', 'burrito'] },\n      { name: 'Mario', age: 51, favoriteFoods: ['burrito', 'prosciutto'] }\n    ])\n  }).then(\n    (data) => {\n      assert.isArray(data, 'the response should be an Array');\n      assert.equal(\n        data.length,\n        2,\n        'the data array length is not what expected'\n      );\n      assert.notProperty(\n        data[0],\n        'age',\n        'The returned first item has too many properties'\n      );\n      assert.equal(\n        data[0].name,\n        'Ashley',\n        'The returned first item name is not what expected'\n      );\n      assert.notProperty(\n        data[1],\n        'age',\n        'The returned second item has too many properties'\n      );\n      assert.equal(\n        data[1].name,\n        'Mario',\n        'The returned second item name is not what expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301533,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\chain-search-query-helpers-to-narrow-search-results.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb6367417b2b2512c07",
      "title": "Create a Model",
      "challengeType": 2,
      "dashedName": "create-a-model",
      "description": "**C**RUD Part I - CREATE\n\nFirst of all, we need a Schema. Each schema maps to a MongoDB collection. It defines the shape of the documents within that collection. Schemas are building blocks for Models. They can be nested to create complex models, but in this case, we'll keep things simple. A model allows you to create instances of your objects, called documents.\n\nIn servers, the interactions with the database happen in handler functions. These functions are executed when some event happens (e.g. someone hits an endpoint on your API). We'll follow the same approach in these exercises. The `done()` function is a callback that tells us that we can proceed after completing an asynchronous operation such as inserting, searching, updating, or deleting. It's following the Node convention, and should be called as `done(null, data)` on success, or `done(err)` on error.\n\nWarning - When interacting with remote services, errors may occur!\n\n```js\n/* Example */\n\nconst someFunc = function(done) {\n  //... do something (risky) ...\n  if (error) return done(error);\n  done(null, result);\n};\n```",
      "instructions": "Create a person schema called `personSchema` with the following shape:\n\n* A required `name` field of type `String`\n* An `age` field of type `Number`\n* A `favoriteFoods` field of type `[String]`\n\nUse the Mongoose basic schema types. If you want you can also add more fields, use simple validators like required or unique, and set default values. See our <a href=\"https://www.freecodecamp.org/news/introduction-to-mongoose-for-mongodb-d2a7aa593c57/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Mongoose article</a>.\n\nNow, create a model from the `personSchema` and assign it to the existing variable `Person`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Creating an instance from a mongoose schema should succeed",
          "testCode": "$.post(code + '/_api/mongoose-model', {\n    name: 'Mike',\n    age: 28,\n    favoriteFoods: ['pizza', 'cheese']\n  }).then(\n    (data) => {\n      assert.equal(data.name, 'Mike', '\"model.name\" is not what expected');\n      assert.equal(data.age, '28', '\"model.age\" is not what expected');\n      assert.isArray(\n        data.favoriteFoods,\n        '\"model.favoriteFoods\" is not an Array'\n      );\n      assert.include(\n        data.favoriteFoods,\n        'pizza',\n        '\"model.favoriteFoods\" does not include the expected items'\n      );\n      assert.include(\n        data.favoriteFoods,\n        'cheese',\n        '\"model.favoriteFoods\" does not include the expected items'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301535,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-a-model.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb6367417b2b2512c09",
      "title": "Create and Save a Record of a Model",
      "challengeType": 2,
      "dashedName": "create-and-save-a-record-of-a-model",
      "description": "In this challenge you will have to create and save a record of a model.",
      "instructions": "Within the `createAndSavePerson` function, create a document instance using the `Person` model constructor you built before. Pass to the constructor an object having the fields `name`, `age`, and `favoriteFoods`. Their types must conform to the ones in the `personSchema`. Then, call the method `document.save()` on the returned document instance. Pass to it a callback using the Node convention. This is a common pattern; all the following CRUD methods take a callback function like this as the last argument.\n\n```js\n/* Example */\n\n// ...\nperson.save(function(err, data) {\n  //   ...do your stuff here...\n});\n```",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Creating and saving a db item should succeed",
          "testCode": "$.get(code + '/_api/create-and-save-person').then(\n    (data) => {\n      assert.isString(data.name, '\"item.name\" should be a String');\n      assert.isNumber(data.age, '28', '\"item.age\" should be a Number');\n      assert.isArray(\n        data.favoriteFoods,\n        '\"item.favoriteFoods\" should be an Array'\n      );\n      assert.equal(data.__v, 0, 'The db item should be not previously edited');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301536,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-and-save-a-record-of-a-model.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb7367417b2b2512c0a",
      "title": "Create Many Records with model.create()",
      "challengeType": 2,
      "dashedName": "create-many-records-with-model-create",
      "description": "Sometimes you need to create many instances of your models, e.g. when seeding a database with initial data. `Model.create()` takes an array of objects like `[{name: 'John', ...}, {...}, ...]` as the first argument, and saves them all in the db.",
      "instructions": "Modify the `createManyPeople` function to create many people using `Model.create()` with the argument `arrayOfPeople`.\n\n**Note:** You can reuse the model you instantiated in the previous exercise.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Creating many db items at once should succeed",
          "testCode": "$.ajax({\n    url: code + '/_api/create-many-people',\n    type: 'POST',\n    contentType: 'application/json',\n    data: JSON.stringify([\n      { name: 'John', age: 24, favoriteFoods: ['pizza', 'salad'] },\n      { name: 'Mary', age: 21, favoriteFoods: ['onions', 'chicken'] }\n    ])\n  }).then(\n    (data) => {\n      assert.isArray(data, 'the response should be an array');\n      assert.equal(\n        data.length,\n        2,\n        'the response does not contain the expected number of items'\n      );\n      assert.equal(data[0].name, 'John', 'The first item is not correct');\n      assert.equal(\n        data[0].__v,\n        0,\n        'The first item should be not previously edited'\n      );\n      assert.equal(data[1].name, 'Mary', 'The second item is not correct');\n      assert.equal(\n        data[1].__v,\n        0,\n        'The second item should be not previously edited'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301537,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\create-many-records-with-model.create.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb8367417b2b2512c11",
      "title": "Delete Many Documents with model.remove()",
      "challengeType": 2,
      "dashedName": "delete-many-documents-with-model-remove",
      "description": "`Model.remove()` is useful to delete all the documents matching given criteria.",
      "instructions": "Modify the `removeManyPeople` function to delete all the people whose name is within the variable `nameToRemove`, using `Model.remove()`. Pass it to a query document with the `name` field set, and a callback.\n\n**Note:** The `Model.remove()` doesn’t return the deleted document, but a JSON object containing the outcome of the operation, and the number of items affected. Don’t forget to pass it to the `done()` callback, since we use it in tests.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Deleting many items at once should succeed",
          "testCode": "$.ajax({\n    url: code + '/_api/remove-many-people',\n    type: 'POST',\n    contentType: 'application/json',\n    data: JSON.stringify([\n      { name: 'Mary', age: 16, favoriteFoods: ['lollipop'] },\n      { name: 'Mary', age: 21, favoriteFoods: ['steak'] }\n    ])\n  }).then(\n    (data) => {\n      assert.isTrue(!!data.ok, 'The mongo stats are not what expected');\n      assert.equal(\n        data.n,\n        2,\n        'The number of items affected is not what expected'\n      );\n      assert.equal(data.count, 0, 'the db items count is not what expected');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301538,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\delete-many-documents-with-model.remove.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb8367417b2b2512c10",
      "title": "Delete One Document Using model.findByIdAndRemove",
      "challengeType": 2,
      "dashedName": "delete-one-document-using-model-findbyidandremove",
      "description": "`findByIdAndRemove` and `findOneAndRemove` are like the previous update methods. They pass the removed document to the db. As usual, use the function argument `personId` as the search key.",
      "instructions": "Modify the `removeById` function to delete one person by the person's `_id`. You should use one of the methods `findByIdAndRemove()` or `findOneAndRemove()`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Deleting an item should succeed",
          "testCode": "$.post(code + '/_api/remove-one-person', {\n    name: 'Jason Bourne',\n    age: 36,\n    favoriteFoods: ['apples']\n  }).then(\n    (data) => {\n      assert.equal(data.name, 'Jason Bourne', 'item.name is not what expected');\n      assert.equal(data.age, 36, 'item.age is not what expected');\n      assert.deepEqual(\n        data.favoriteFoods,\n        ['apples'],\n        'item.favoriteFoods is not what expected'\n      );\n      assert.equal(data.__v, 0);\n      assert.equal(data.count, 0, 'the db items count is not what expected');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301539,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\delete-one-document-using-model.findbyidandremove.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb6367417b2b2512c06",
      "title": "Install and Set Up Mongoose",
      "challengeType": 2,
      "dashedName": "install-and-set-up-mongoose",
      "description": "Working on these challenges will involve you writing your code using one of the following methods:\n\n- Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-mongomongoose/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete these challenges locally.\n- Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n\nIn this challenge, you will set up a MongoDB Atlas database and import the required packages to connect to it.\n\nFollow <a href='https://www.freecodecamp.org/news/get-started-with-mongodb-atlas/' target=\"_blank\" rel=\"noopener noreferrer nofollow\">this tutorial</a> to set up a hosted database on MongoDB Atlas.",
      "instructions": "`mongoose@^5.11.15` has been added to your project’s `package.json` file. First, require mongoose as `mongoose` in `myApp.js`. Next, create a `.env` file and add a `MONGO_URI` variable to it. Its value should be your MongoDB Atlas database URI. Be sure to surround the URI with single or double quotes, and remember that you can't use spaces around the `=` in environment variables. For example, `MONGO_URI='VALUE'`.\n\nWhen you are done, connect to the database by calling the `connect` method within your `myApp.js` file by using the following syntax:\n\n```js\nmongoose.connect(<Your URI>, { useNewUrlParser: true, useUnifiedTopology: true });\n```",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "\"mongoose version ^5.11.15\" dependency should be in package.json",
          "testCode": "$.get(code + '/_api/file/package.json').then(\n    (data) => {\n      var packJson = JSON.parse(data);\n      assert.property(packJson.dependencies, 'mongoose');\n      assert.match(\n        packJson.dependencies.mongoose,\n        /^\\^5\\.11\\.15/,\n        'Wrong version of \"mongoose\". It should be ^5.11.15'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "\"mongoose\" should be connected to a database",
          "testCode": "$.get(code + '/_api/is-mongoose-ok').then(\n    (data) => {\n      assert.isTrue(data.isMongooseOk, 'mongoose is not connected');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301540,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\install-and-set-up-mongoose.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb8367417b2b2512c0e",
      "title": "Perform Classic Updates by Running Find, Edit, then Save",
      "challengeType": 2,
      "dashedName": "perform-classic-updates-by-running-find-edit-then-save",
      "description": "In the good old days, this was what you needed to do if you wanted to edit a document, and be able to use it somehow (e.g. sending it back in a server response). Mongoose has a dedicated updating method: `Model.update()`. It is bound to the low-level mongo driver. It can bulk-edit many documents matching certain criteria, but it doesn’t send back the updated document, only a 'status' message. Furthermore, it makes model validations difficult, because it just directly calls the mongo driver.",
      "instructions": "Modify the `findEditThenSave` function to find a person by `_id` (use any of the above methods) with the parameter `personId` as search key. Add `\"hamburger\"` to the list of the person's `favoriteFoods` (you can use `Array.push()`). Then - inside the find callback - `save()` the updated `Person`.\n\n**Note:** This may be tricky, if in your Schema, you declared `favoriteFoods` as an Array, without specifying the type (i.e. `[String]`). In that case, `favoriteFoods` defaults to Mixed type, and you have to manually mark it as edited using `document.markModified('edited-field')`. See our <a href=\"https://www.freecodecamp.org/news/introduction-to-mongoose-for-mongodb-d2a7aa593c57/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Mongoose article</a>.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Find-edit-update an item should succeed",
          "testCode": "$.post(code + '/_api/find-edit-save', {\n    name: 'Poldo',\n    age: 40,\n    favoriteFoods: ['spaghetti']\n  }).then(\n    (data) => {\n      assert.equal(data.name, 'Poldo', 'item.name is not what is expected');\n      assert.equal(data.age, 40, 'item.age is not what expected');\n      assert.deepEqual(\n        data.favoriteFoods,\n        ['spaghetti', 'hamburger'],\n        'item.favoriteFoods is not what expected'\n      );\n      assert.equal(data.__v, 1, 'The item should be previously edited');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301541,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\perform-classic-updates-by-running-find-edit-then-save.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb8367417b2b2512c0f",
      "title": "Perform New Updates on a Document Using model.findOneAndUpdate()",
      "challengeType": 2,
      "dashedName": "perform-new-updates-on-a-document-using-model-findoneandupdate",
      "description": "Recent versions of Mongoose have methods to simplify documents updating. Some more advanced features (i.e. pre/post hooks, validation) behave differently with this approach, so the classic method is still useful in many situations. `findByIdAndUpdate()` can be used when searching by id.",
      "instructions": "Modify the `findAndUpdate` function to find a person by `Name` and set the person's age to `20`. Use the function parameter `personName` as the search key.\n\n**Note:** You should return the updated document. To do that, you need to pass the options document `{ new: true }` as the 3rd argument to `findOneAndUpdate()`. By default, these methods return the unmodified object.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "findOneAndUpdate an item should succeed",
          "testCode": "$.post(code + '/_api/find-one-update', {\n    name: 'Dorian Gray',\n    age: 35,\n    favoriteFoods: ['unknown']\n  }).then(\n    (data) => {\n      assert.equal(data.name, 'Dorian Gray', 'item.name is not what expected');\n      assert.equal(data.age, 20, 'item.age is not what expected');\n      assert.deepEqual(\n        data.favoriteFoods,\n        ['unknown'],\n        'item.favoriteFoods is not what expected'\n      );\n      assert.equal(\n        data.__v,\n        0,\n        'findOneAndUpdate does not increment version by design!'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301542,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\perform-new-updates-on-a-document-using-model.findoneandupdate.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb7367417b2b2512c0b",
      "title": "Use model.find() to Search Your Database",
      "challengeType": 2,
      "dashedName": "use-model-find-to-search-your-database",
      "description": "In its simplest usage, `Model.find()` accepts a query document (a JSON object) as the first argument, then a callback. It returns an array of matches. It supports an extremely wide range of search options. Read more in the docs.",
      "instructions": "Modify the `findPeopleByName` function to find all the people having a given name, using <code>Model.find() -\\> [Person]</code>\n\nUse the function argument `personName` as the search key.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Find all items corresponding to a criteria should succeed",
          "testCode": "$.post(code + '/_api/find-all-by-name', {\n    name: 'r@nd0mN4m3',\n    age: 24,\n    favoriteFoods: ['pizza']\n  }).then(\n    (data) => {\n      assert.isArray(data, 'the response should be an Array');\n      assert.equal(\n        data[0].name,\n        'r@nd0mN4m3',\n        'item.name is not what expected'\n      );\n      assert.equal(data[0].__v, 0, 'The item should be not previously edited');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301543,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.find-to-search-your-database.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb7367417b2b2512c0d",
      "title": "Use model.findById() to Search Your Database By _id",
      "challengeType": 2,
      "dashedName": "use-model-findbyid-to-search-your-database-by-id",
      "description": "When saving a document, MongoDB automatically adds the field `_id`, and set it to a unique alphanumeric key. Searching by `_id` is an extremely frequent operation, so Mongoose provides a dedicated method for it.",
      "instructions": "Modify the `findPersonById` to find the only person having a given `_id`, using `Model.findById() -> Person`. Use the function argument `personId` as the search key.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Find an item by Id should succeed",
          "testCode": "$.get(code + '/_api/find-by-id').then(\n    (data) => {\n      assert.equal(data.name, 'test', 'item.name is not what expected');\n      assert.equal(data.age, 0, 'item.age is not what expected');\n      assert.deepEqual(\n        data.favoriteFoods,\n        ['none'],\n        'item.favoriteFoods is not what expected'\n      );\n      assert.equal(data.__v, 0, 'The item should be not previously edited');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301544,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.findbyid-to-search-your-database-by-id.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    },
    {
      "id": "587d7fb7367417b2b2512c0c",
      "title": "Use model.findOne() to Return a Single Matching Document from Your Database",
      "challengeType": 2,
      "dashedName": "use-model-findone-to-return-a-single-matching-document-from-your-database",
      "description": "`Model.findOne()` behaves like `Model.find()`, but it returns only one document (not an array), even if there are multiple items. It is especially useful when searching by properties that you have declared as unique.",
      "instructions": "Modify the `findOneByFood` function to find just one person which has a certain food in the person's favorites, using `Model.findOne() -> Person`. Use the function argument `food` as search key.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Find one item should succeed",
          "testCode": "$.post(code + '/_api/find-one-by-food', {\n    name: 'Gary',\n    age: 46,\n    favoriteFoods: ['chicken salad']\n  }).then(\n    (data) => {\n      assert.equal(data.name, 'Gary', 'item.name is not what expected');\n      assert.deepEqual(\n        data.favoriteFoods,\n        ['chicken salad'],\n        'item.favoriteFoods is not what expected'\n      );\n      assert.equal(data.__v, 0, 'The item should be not previously edited');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301545,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\05-back-end-development-and-apis\\mongodb-and-mongoose\\use-model.findone-to-return-a-single-matching-document-from-your-database.md"
      },
      "section": {
        "id": "05-back-end-development-and-apis",
        "name": "05-back-end-development-and-apis"
      },
      "lesson": {
        "id": "mongodb-and-mongoose",
        "name": "Mongodb And Mongoose"
      }
    }
  ],
  "metadata": {
    "total_challenges": 39,
    "challenges_with_content": 39
  }
}