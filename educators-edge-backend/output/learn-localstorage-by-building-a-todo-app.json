{
  "title": "Learn Localstorage By Building A Todo App",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Step 1",
      "description": "In this project, you will learn how `localStorage` works in JavaScript by building a Todo app. <dfn>LocalStorage</dfn> is a web storage feature of JavaScript that lets you persist data by storing the data as a **key:value** pair.\n\nThe HTML and CSS for this project have been provided for you. Take a look at the files to get yourself familiarized with them.\n\nBegin by accessing the `task-form`, `confirm-close-dialog`, and `open-task-form-btn` elements with the `getElementById()` method. Save them in the variables `taskForm`, `confirmCloseDialog`, and `openTaskFormBtn`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `getElementById()` to access the `task-form` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)task\\-form\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `task-form` element to the variable `taskForm`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+taskForm\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)task\\-form\\1\\s*\\)\\s*;?/)\n```\n\nYou should use `getElementById()` to access the `confirm-close-dialog` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)confirm\\-close\\-dialog\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `confirm-close-dialog` element to the variable `confirmCloseDialog`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+confirmCloseDialog\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)confirm\\-close\\-dialog\\1\\s*\\)\\s*;?/)\n```\n\nYou should use `getElementById()` to access the `open-task-form-btn` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)open\\-task\\-form\\-btn\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `open-task-form-btn` element to the variable `openTaskFormBtn`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+openTaskFormBtn\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)open\\-task\\-form\\-btn\\1\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 2",
      "description": "You need to access more elements with the `getElementById()` method. This time you need the `close-task-form-btn`, `add-or-update-task-btn`, and `cancel-btn` elements. Save them in the variables `closeTaskFormBtn`, `addOrUpdateTaskBtn`, and `cancelBtn`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `getElementById()` to access the `close-task-form-btn` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)close\\-task\\-form\\-btn\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `close-task-form-btn` element to the variable `closeTaskFormBtn`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+closeTaskFormBtn\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)close\\-task\\-form\\-btn\\1\\s*\\)\\s*;?/)\n```\n\nYou should use `getElementById()` to access the `add-or-update-task-btn` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)add\\-or\\-update\\-task\\-btn\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `add-or-update-task-btn` element to the variable `addOrUpdateTaskBtn`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+addOrUpdateTaskBtn\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)add\\-or\\-update\\-task\\-btn\\1\\s*\\)\\s*;?/)\n```\n\nYou should use `getElementById()` to access the `cancel-btn` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)cancel\\-btn\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `cancel-btn` element to the variable `cancelBtn`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+cancelBtn\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)cancel\\-btn\\1\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 3",
      "description": "Next, access the `discard-btn`, `tasks-container`, and `title-input` elements using the `getElementById()` method. Save them in variables named `discardBtn`, `tasksContainer`, and `titleInput`, respectively.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `getElementById()` to access the `discard-btn` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)discard\\-btn\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `discard-btn` element to the variable `discardBtn`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+discardBtn\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)discard\\-btn\\1\\s*\\)\\s*;?/)\n```\n\nYou should use `getElementById()` to access the `tasks-container` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)tasks\\-container\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `tasks-container` element to the variable `tasksContainer`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+tasksContainer\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)tasks\\-container\\1\\s*\\)\\s*;?/)\n```\n\nYou should use `getElementById()` to access the `title-input` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)title\\-input\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `title-input` element to the variable `titleInput`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+titleInput\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)title\\-input\\1\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 4",
      "description": "The last set of elements you need to get from the HTML file are the `date-input` and `description-input` elements. Save them in the variables `dateInput` and `descriptionInput` respectively.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `getElementById()` to access the `date-input` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)date\\-input\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `date-input` element to the variable `dateInput`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+dateInput\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)date\\-input\\1\\s*\\)\\s*;?/)\n```\n\nYou should use `getElementById()` to access the `description-input` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)description\\-input\\1\\s*\\)\\s*;?/)\n```\n\nYou should assign the `description-input` element to the variable `descriptionInput`. Don't forget to use `const` to declare the variable.\n\n```js\nassert.match(code, /const\\s+descriptionInput\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)description\\-input\\1\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 5",
      "description": "Create a `taskData` constant and set it to an empty array. This array will store all the tasks along with their associated data, including title, due date, and description. This storage will enable you to keep track of tasks, display them on the page, and save them to `localStorage`.\n\nUse `let` to create a `currentTask` variable and set it to an empty object. This variable will be used to track the state when editing and discarding tasks.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should have a `const` variable called `taskData`.\n\n```js\nassert.match(code, /const\\s+taskData\\s*=/)\n```\n\nYou should assign an array to your `taskData` constant.\n\n```js\nassert.isArray(taskData);\n```\n\nYour `taskData` array should be empty.\n\n```js\nassert.isEmpty(taskData);\n```\n\nYou should use `let` to create a `currentTask` variable.\n\n```js\nassert.match(code, /let\\s+currentTask/);\n```\n\nYou should assign an object to your `currentTask` variable.\n\n```js\nassert.isObject(currentTask);\n```\n\nYour `currentTask` object should be empty.\n\n```js\nassert.isEmpty(currentTask);\n```"
    },
    {
      "title": "Step 6",
      "description": "Now, you will work on opening and closing the form modal.\n\nIn earlier projects, you learned how to add and remove classes from an element with `el.classList.add()` and `el.classList.remove()`. Another method to use with the `classList` property is the `toggle` method.\n\nThe `toggle` method will add the class if it is not present on the element, and remove the class if it is present on the element.\n\n```js\nelement.classList.toggle(\"class-to-toggle\");\n```\n\nAdd an event listener to the `openTaskFormBtn` element and pass in a `\"click\"` event for the first argument and an anonymous callback function for the second argument.\n\nInside the callback function, use the `classList.toggle()` method to toggle the `\"hidden\"` class on the `taskForm` element.\n\nNow you can `click` on the \"Add new Task\" button and see the form modal.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `addEventListener()` method on your `openTaskFormBtn` variable.\n\n```js\nassert.match(code, /openTaskFormBtn\\.addEventListener\\(/)\n```\n\nYour event listener should listen for a `click` event.\n\n```js\nassert.match(code, /openTaskFormBtn\\.addEventListener\\(\\s*('|\"|`)click\\1/)\n```\n\nYour event listener's callback function should use the `classList.toggle()` method to toggle the `hidden` class on the `taskForm` element. Refer back to the example provided in the description.\n\n```js\nassert(taskForm.classList.contains('hidden'));\nopenTaskFormBtn.click();\nassert(!taskForm.classList.contains('hidden'));\n```"
    },
    {
      "title": "Step 7",
      "description": "A <dfn>modal</dfn> is an element that prevents all interaction with elements outside it until the modal has been dismissed.\n\nThe HTML `dialog` element has a `showModal()` method that can be used to display a modal dialog box on a web page.\n\n```js\ndialogElement.showModal();\n```\n\nAdd an event listener to the `closeTaskFormBtn` variable and pass in a `click` event for the first argument and a callback function for the second argument.\n\nFor the callback function, call the `showModal()` method on the `confirmCloseDialog` element. This will display a modal with the `Discard` and `Cancel` buttons.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `addEventListener()` method on your `closeTaskFormBtn` variable.\n\n```js\nassert.match(code, /closeTaskFormBtn\\.addEventListener\\(/)\n```\n\nYour event listener should listen for a `click` event.\n\n```js\nassert.match(code, /closeTaskFormBtn\\.addEventListener\\(\\s*('|\"|`)click\\1/)\n```\n\nYour event listener's callback function should call the `showModal()` method on the `confirmCloseDialog` element.\n\n```js\nassert.match(code, /closeTaskFormBtn\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(.*\\)\\s*=>\\s*(\\{\\s*confirmCloseDialog\\.showModal\\(\\s*\\)\\s*;?\\s*\\}|confirmCloseDialog\\.showModal\\(\\s*\\))\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 8",
      "description": "If the user clicks the `Cancel` button, you want to cancel the process and close the modal so the user can continue editing. The HTML `dialog` element has a `close()` method that can be used to close a modal dialog box on a web page.\n\n```js\ndialogElement.close();\n```\n\nAdd an event listener to the `cancelBtn` element and pass in a `click` event for the first argument and a callback function for the second argument.\n\nFor the callback function, call the `close()` method on the `confirmCloseDialog` element.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `addEventListener()` method on your `cancelBtn` variable.\n\n```js\nassert.match(code, /cancelBtn\\.addEventListener\\(/)\n```\n\nYour event listener should listen for a `click` event.\n\n```js\nassert.match(code, /cancelBtn\\.addEventListener\\(\\s*('|\"|`)click\\1/)\n```\n\nYour event listener's callback function should call the `close()` method on `confirmCloseDialog` element.\n\n```js\nassert.match(code, /cancelBtn\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*(\\{\\s*confirmCloseDialog\\.close\\(\\s*\\)\\s*;?\\s*\\}|confirmCloseDialog\\.close\\(\\s*\\))\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 9",
      "description": "If the user clicks the `Discard` button, you want to close the modal showing the `Cancel` and `Discard` buttons, then hide the form modal.\n\nAdd a click event listener to `discardBtn`, then use the `close()` method on the `confirmCloseDialog` variable. Also, use `classList` to toggle the class `hidden` on `taskForm` so the form modal will close too.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `addEventListener()` method on your `discardBtn` variable.\n\n```js\nassert.match(code, /discardBtn\\.addEventListener\\(/)\n```\n\nYour event listener should listen for a `click` event.\n\n```js\nassert.match(code, /discardBtn\\.addEventListener\\(\\s*('|\"|`)click\\1/)\n```\n\nYou should use arrow syntax to set your event listener to an empty pair of curly braces.\n\n```js\nassert.match(code, /discardBtn\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{/)\n```\n\nYour event listener should use the `close()` method on `confirmCloseDialog`.\n\n```js\nassert.match(code, /discardBtn\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*confirmCloseDialog\\.close\\(\\s*\\)\\s*;?/)\n```\n\nYour event listener should use `classList` to toggle the class `hidden` on `taskForm`.\n\n```js\nassert.match(code, /discardBtn\\.addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*confirmCloseDialog\\.close\\(\\s*\\)\\s*;?\\s*taskForm\\.classList\\.toggle\\(\\s*('|\"|`)hidden\\2\\s*\\)\\s*;?\\s*\\}\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 10",
      "description": "Now that you've worked on opening and closing the modal, it's time to get the values from the input fields, save them into the `taskData` array, and display them on the page.\n\nTo start, add a `submit` event listener to your `taskForm` element and pass in `e` as the parameter of your arrow function. Inside the curly braces, use the `preventDefault()` method to stop the browser from refreshing the page after submitting the form.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `addEventListener()` method on your `taskForm` variable.\n\n```js\nassert.match(code, /taskForm\\.addEventListener\\(/)\n```\n\nYour event listener should listen for a `submit` event.\n\n```js\nassert.match(code, /taskForm\\.addEventListener\\(\\s*('|\"|`)submit\\1/)\n```\n\nYou should use arrow syntax to set your event listener to an empty pair of curly braces with `e` as the parameter.\n\n```js\nassert.match(code, /taskForm\\.addEventListener\\(\\s*('|\"|`)submit\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*\\{/)\n```\n\nYou should use the `e.preventDefault()` method to stop the browser from reloading the page.\n\n```js\nassert.match(code, /taskForm\\.addEventListener\\(\\s*('|\"|`)submit\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*\\{\\s*e\\.preventDefault\\(\\s*\\)\\s*;?\\s*\\}\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 11",
      "description": "You will need to determine whether the task being added to the `taskData` array already exists or not. If the task does not exist, you will add it to the array. If it does exist, you will update it. To accomplish this, you can use the <dfn>findIndex()</dfn> method.\n\nThe `findIndex()` array method finds and returns the index of the first element in an array that meets the criteria specified by a provided testing callback function. If no such element is found, the method returns `-1`. The callback should return a truthy value to indicate a matching element has been found, and a falsy value otherwise.\n\nHere's an example:\n\n```js\nconst numbers = [3, 1, 5, 6];\nconst firstNumLargerThanThree = numbers.findIndex((num) => num > 3);\n\nconsole.log(firstNumLargerThanThree); // prints index 2\n```\n\nUse `const` to declare a variable called `dataArrIndex` and assign it the value of `taskData.findIndex()`. For the `findIndex()` method, pass in an arrow function with `item` as the parameter. \n\nWithin the arrow function, check if the `id` property of `item` is strictly equal to the `id` property of `currentTask`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should use `const` to declare a `dataArrIndex` variable and set it to `taskData.findIndex()`.\n\n```js\nassert.match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(/)\n```\n\nYou should pass in `item` as the parameter of the arrow function callback. Don't use curly braces.\n\n```js\nassert.match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/)\n```\n\nYour arrow function callback should check if `item.id === currentTask.id`.\n\n```js\nassert.match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*((item\\.id\\s*===\\s*currentTask\\.id|currentTask\\.id\\s*===\\s*item\\.id)|({\\s*return\\s*(item\\.id\\s*===\\s*currentTask\\.id|currentTask\\.id\\s*===\\s*item\\.id);?\\s*}))\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 19",
      "description": "Now it is time to add the remaining properties to the `taskObj` object.\n\nRetrieve the values from the `titleInput`, `dateInput`, and `descriptionInput` fields, and then save them in the properties `title`, `date`, and `description` of the `taskObj` object.\n\nAdd a new task and open up the console to see the `taskObj` object with the new properties.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    --fcc-editable-region--\n    \n    --fcc-editable-region--\n  };\n  console.log(taskObj);\n});"
        }
      ],
      "testCode": "Your `taskObj` object should have a `title` key and value of `titleInput.value`.\n\n```js\nassert.match(code, /title:\\s*titleInput\\.value\\s*,?/);\n```\n\nYour `taskObj` object should have a `date` key and value of `dateInput.value`.\n\n```js\nassert.match(code, /date:\\s*dateInput\\.value\\s*,?/);\n```\n\nYour `taskObj` object should have a `description` key and value of `descriptionInput.value`.\n\n```js\nassert.match(code, /description:\\s*descriptionInput\\.value\\s*,?/)\n```"
    },
    {
      "title": "Step 21",
      "description": "Now that you have obtained the values from the input fields and generated an `id`, you want to add them to your `taskData` array to keep track of each task. However, you should only do this if the task is new. If the task already exists, you will set it up for editing. This is why you have the `dataArrIndex` variable, which provides the index of each task.\n\nCreate an `if` statement with the condition `dataArrIndex === -1`. Within the `if` statement, use the `unshift()` method to add the `taskObj` object to the beginning of the `taskData` array.\n\n`unshift()` is an array method that is used to add one or more elements to the beginning of an array.\n\n```js\nconst arr = [1, 2, 3];\narr.unshift(0);\n\n// [0, 1, 2, 3]\nconsole.log(arr); \n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  --fcc-editable-region--\n  \n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should create an `if` statement with the condition `dataArrIndex === -1`.\n\n```js\nassert.match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{/)\n```\n\nYour `if` statement should have `taskData.unshift(taskObj)` in it's body.\n\n```js\nassert.match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\.unshift\\(\\s*taskObj\\s*\\)\\s*;?\\s*\\}/)\n```"
    },
    {
      "title": "Step 22",
      "description": "Now that you have saved the task in the `taskData` array, you should display the task on the page by looping through it.\n\nUse `forEach()` on `taskData`, then destructure `id`, `title`, `date`, `description` as the parameters. Don't return anything yet.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  --fcc-editable-region--\n  \n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should use `forEach()` on `taskData`.\n\n```js\nassert.match(code, /taskData\\.forEach\\(\\s*/)\n```\n\nYou should use `{id, title, date, description}` as the destructured parameters of the `forEach()` callback function.\n\n```js\nassert.match(code, /taskData\\.forEach\\(\\s*\\(\\s*\\{\\s*(?:id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|(?:title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|(?:date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|(?:id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|(?:title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|(?:date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|(?:date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|(?:title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|(?:description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|(?:date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|(?:title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|(?:description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|(?:description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|(?:id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|(?:date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|(?:description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(?:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|(?:date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|(?:title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(?:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(?:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(?:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(?:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(?:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/)\n```"
    },
    {
      "title": "Step 23",
      "description": "Using arrow syntax complete the `forEach` callback function. Inside the callback function body use an addition assignment to set the `innerHTML` of `tasksContainer` to empty backticks.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  --fcc-editable-region--\n  taskData.forEach(({id, title, date, description}));\n\n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should not alter the existing `taskData.forEach()` and the values you destructured.\n\n```js\nassert.match(code, /taskData\\.forEach\\(\\s*\\(\\s*\\{\\s*(?:id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|(?:title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|(?:date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|(?:id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|(?:title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|(?:date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|(?:date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|(?:title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|(?:description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|(?:date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|(?:title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|(?:description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|(?:description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|(?:id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|(?:date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|(?:description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(?:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|(?:date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|(?:title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(?:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(?:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(?:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(?:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(?:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/)\n```\n\nYou should use arrow syntax and attach `innerHTML` to `tasksContainer`.\n\n```js\nassert.match(code, /taskData\\.forEach\\(\\s*\\(\\s*\\{.*\\}\\s*\\)\\s*=>\\s*(\\s*\\{?\\(\\s*tasksContainer\\.innerHTML\\s*\\)\\s*\\}?)?/)\n```\n\nYou should use addition assignment to set the `innerHTML` of `tasksContainer` to an empty pair of backticks.\n\n```js\nassert.match(code, /taskData\\.forEach\\(\\s*\\(\\s*\\{.*\\}\\s*\\)\\s*=>\\s*\\{?\\s*(\\(\\s*tasksContainer\\.innerHTML\\s*\\+=\\s*`\\s*`\\s*\\)|tasksContainer\\.innerHTML\\s*\\+=\\s*`\\s*`)\\s*\\}?/)\n```"
    },
    {
      "title": "Step 24",
      "description": "Create a `div` element with the class of `task`. Utilize template strings to set the `id` attribute of the `div` to the `id` you destructured from the task data.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(({id, title, date, description}) => {\n      tasksContainer.innerHTML += `\n      --fcc-editable-region--\n          \n      --fcc-editable-region--\n      `\n    }\n  );\n});"
        }
      ],
      "testCode": "You should create a `div` element with the class `task`.\n\n```js\nconst splitted = code.split(/tasksContainer\\s*\\.\\s*innerHTML\\s*\\+=\\s*`/)[1]\nconst matched = __helpers.removeJSComments(splitted).match(/<div(?<attributes>.*?)>\\s*<\\/\\s*div\\s*>/);\nassert.match(matched?.groups.attributes, /\\s+class\\s*=\\s*('|\")task\\1(\\s|$)/);\n```\n\nYour `div` element should have the `id` `${id}`.\n\n```js\nconst splitted = code.split(/tasksContainer\\s*\\.\\s*innerHTML\\s*\\+=\\s*`/)[1]\nconst matched = __helpers.removeJSComments(splitted).match(/<div(?<attributes>.*?)>\\s*<\\/\\s*div\\s*>/);\nassert.match(matched?.groups.attributes, /\\s+id\\s*=\\s*('|\")\\$\\{id\\}\\1(\\s|$)/);\n```"
    },
    {
      "title": "Step 25",
      "description": "Create a `p` element and use template strings to set its content to the `title` you destructured. Right before the content of the `p` element, create a `strong` element with the text `Title:`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(({id, title, date, description}) => {\n      tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n    --fcc-editable-region--\n        \n    --fcc-editable-region--\n        </div>\n      `\n    }\n  );\n});"
        }
      ],
      "testCode": "You should create a `p` element.\n\n```js\nassert.match(code, /<p>/)\n```\n\nYou should interpolate `${title}` as the text of your `p` element.\n\n```js\nassert.match(code, /<p>.*\\$\\{title\\}<\\/p>/)\n```\n\nYou should create a `strong` element after the opening tag of your `p` element.\n\n```js\nassert.match(code, /<p><strong>/)\n```\n\nYour `strong` element should have the text `Title:`.\n\n```js\nassert.match(code, /<p><strong>Title:\\s*<\\/strong>\\s*/)\n```"
    },
    {
      "title": "Step 26",
      "description": "Similarly to the previous step, create another `p` element, and interpolate the `date` you destructured as the text content. Inside this paragraph, create a `strong` element with the text `Date:`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(({id, title, date, description}) => {\n      tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          --fcc-editable-region--\n          \n          --fcc-editable-region--\n        </div>\n      `\n    }\n  );\n});"
        }
      ],
      "testCode": "You should create a `p` element and interpolate `${date}` as the text.\n\n```js\nassert.match(code, /<p>.*\\$\\{date\\}<\\/p>/)\n```\n\nYou should create a `strong` element with the text `Date:` after the opening tag of your `p` element.\n\n```js\nassert.match(code, /<p><strong>Date:\\s*<\\/strong>\\s*/)\n```"
    },
    {
      "title": "Step 28",
      "description": "To allow for task management, you need to include both a delete and an edit button for each task.\n\nCreate two `button` elements with the `type` attribute set to `button` and the `class` attribute set to `btn`. Set the text of the first button to `Edit` and the text of the second button to `Delete`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(({id, title, date, description}) => {\n      tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          --fcc-editable-region--\n          \n          --fcc-editable-region--\n        </div>\n      `\n    }\n  );\n});"
        }
      ],
      "testCode": "You should create a `button` element of type `button`, a class `btn` and `\"Edit\"` as the text, in that order.\n\n```js\nassert.match(code, /<button\\s+type=('|\")button\\1\\s+class=('|\")btn\\2>Edit<\\/button/)\n```\n\nYou should create a `button` element of type `button` a class `btn` and `Delete` as the text, in that order.\n\n```js\nassert.match(code, /<button\\s+type=('|\")button\\1\\s+class=('|\")btn\\2>Delete<\\/button/)\n```"
    },
    {
      "title": "Step 29",
      "description": "After adding the task to the page, you should close the form modal to view the task. To do this, utilize `classList` to toggle the `hidden` class on the `taskForm` element.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(({id, title, date, description}) => {\n      tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should use `classList` to toggle the class `hidden` on `taskForm`.\n\n```js\nconst splitter = code.split(\"taskData.forEach\")[1].split(\"});\")\nassert.match(splitter[0], /taskForm\\.classList\\.toggle\\(\\s*('|\")hidden\\1\\s*\\)/)\n```"
    },
    {
      "title": "Step 30",
      "description": "If you attempt to add another task now, you'll notice that the input fields retain the values you entered for the previous task. To resolve this, you need to clear the input fields after adding a task.\n\nInstead of clearing the input fields one by one, it's a good practice to create a function that handles clearing those fields. You can then call this function whenever you need to clear the input fields again.\n\nUse arrow syntax to create a `reset` function and set it to a pair of curly braces.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(({id, title, date, description}) => {\n      tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    } \n  );\n\n  taskForm.classList.toggle(\"hidden\");\n});"
        }
      ],
      "testCode": "You should use `const` and arrow syntax to create a `reset` function.\n\n```js\nassert.match(code, /const\\s+reset\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/)\n```\n\nYour `reset` function should be empty.\n\n```js\nassert.match(reset.toString(), /\\(\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 31",
      "description": "Inside the `reset` function, set each value of `titleInput`, `dateInput`, `descriptionInput` to an empty string.\n\nAlso, use `classList` to toggle the class `hidden` on the `taskForm` and set `currentTask` to an empty object. That's because at this point, `currentTask` will be filled with the task the user might have added.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\n--fcc-editable-region--\nconst reset = () => {\n  \n}\n--fcc-editable-region--\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n\n  taskForm.classList.toggle(\"hidden\");\n});"
        }
      ],
      "testCode": "You should set `titleInput.value` to an empty string.\n\n```js\nassert.match(reset.toString(), /titleInput\\.value\\s*=\\s*('|\")\\1\\s*;?/)\n```\n\nYou should set `dateInput.value` to an empty string.\n\n```js\nassert.match(reset.toString(), /dateInput\\.value\\s*=\\s*('|\")\\1\\s*;?/)\n```\n\nYou should set `descriptionInput.value` to an empty string.\n\n```js\nassert.match(reset.toString(), /descriptionInput\\.value\\s*=\\s*('|\")\\1\\s*;?/)\n```\n\nYou should use `classList` to toggle the class `hidden` on `taskForm`\n\n```js\nassert.match(reset.toString(), /taskForm\\.classList\\.toggle\\(\\s*('|\")hidden\\1\\s*\\)/)\n```\n\nYou should set `currentTask` to an empty object.\n\n```js\nassert.match(reset.toString(), /currentTask\\s*=\\s*\\{\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 32",
      "description": "Remove the existing code toggling the class of `hidden` on `taskForm` and call the `reset` function instead. This would clear the input fields and also hide the form modal for the user to see the added task.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }   \n  );\n\n--fcc-editable-region--\n  taskForm.classList.toggle(\"hidden\");\n--fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should remove the code toggling the `hidden` class on `taskForm`.\n\n```js\nconst splitter = code.split('<button type=\"button\" class=\"btn\">Delete</button>')\nassert.notMatch(splitter[1], /taskForm\\.classList\\.toggle\\(\\s*(\"|')hidden\\1\\s*\\)\\s*;?/)\n```\n\nYou should call the `reset` function.\n\n```js\nassert.match(code, /reset\\(\\s*\\)/)\n```"
    },
    {
      "title": "Step 33",
      "description": "Also, remove the existing code toggling the class `hidden` on `taskForm` inside the `discardBtn` event listener and call the `reset` function instead. That's because when you click the `Discard` button, everything in the input fields should go away.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\n--fcc-editable-region--\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n--fcc-editable-region--\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n\n  reset()\n});"
        }
      ],
      "testCode": "You should remove the code toggling the class `hidden` on `taskForm`.\n\n```js\nconst splitter = code.split(\"confirmCloseDialog.close();\")\nassert.notMatch(splitter[1], /taskForm\\.classList\\.toggle\\(\\s*(\"|')hidden\\1\\s*\\)\\s*;?/)\n```\n\nYou should call the `reset` function.\n\n```js\nassert.match(code, /confirmCloseDialog\\.close\\(\\s*\\)\\s*;?\\s*reset\\(\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 34",
      "description": "You should display the `Cancel` and `Discard` buttons to the user only if there is some text present in the input fields.\n\nStart by removing the `confirmCloseDialog.showModal();` line.\n\nThen inside the `closeTaskFormBtn` event listener, write some logic to check if there is a value in the `titleInput`, `dateInput` **or** the `descriptionInput` field.\n\nIf any of those input fields has a value, then use the `showModal()` method on `confirmCloseDialog`. Otherwise, if there are no changes, call the `reset()` function to clear the input fields and hide the form modal.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\n--fcc-editable-region--\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n  \n});\n--fcc-editable-region--\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n\n  reset()\n});"
        }
      ],
      "testCode": "If any of the input fields has a value, then the confirmation dialog should display. Otherwise, the `reset` function should be called.\n\n```js\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\n\nconst fields = [\n  { name: \"titleInput\", element: titleInput, value: \"Test title\" },\n  { name: \"dateInput\", element: dateInput, value: \"2025-04-28\" },\n  { name: \"descriptionInput\", element: descriptionInput, value: \"Test description\" },\n];\n\ncloseTaskFormBtn.click();\nassert.isFalse(confirmCloseDialog.open);\n\nfields.forEach(({ name, element, value }) => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  confirmCloseDialog.open = false;\n\n  element.value = value;\n\n  closeTaskFormBtn.click();\n\n  assert.isTrue(confirmCloseDialog.open);\n\n  cancelBtn.click();\n});\n\n// Now test for reset functionality\n\ntitleInput.value = \"\";\ndateInput.value = \"\";\ndescriptionInput.value = \"\";\nassert.isTrue(taskForm.classList.toggle(\"hidden\"));\nassert.isEmpty(currentTask);\n```"
    },
    {
      "title": "Step 35",
      "description": "You can enhance code readability and maintainability by refactoring the `submit` event listener into two separate functions. The first function can be used to add the input values to `taskData`, while the second function can be responsible for adding the tasks to the DOM.\n\nUse arrow syntax to create an `addOrUpdateTask` function. Then move the `dataArrIndex` variable, the `taskObj` object, and the `if` statement into the `addOrUpdateTask` function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n\n  reset()\n});"
        }
      ],
      "testCode": "You should use `const` and arrow syntax to create an `addOrUpdateTask` function.\n\n```js\nassert.match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/)\n```\n\nYou should move the `dataArrIndex` variable into the `addOrUpdateTask` function.\n\n```js\nassert.match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\.id\\s*===\\s*currentTask\\.id|currentTask\\.id\\s*===\\s*item\\.id)\\s*\\)\\s*;?/)\n```\n\nYou should move the `taskObj` object into the `addOrUpdateTask` function.\n\n```js\nassert.match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(?:\\(\\s*item\\s*\\)|item)\\s*=>\\s*(?:item\\.id\\s*===\\s*currentTask\\.id|currentTask\\.id\\s*===\\s*item\\.id)\\s*\\)\\s*;?\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\.value\\.toLowerCase\\(\\s*\\)\\.split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\.join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\.now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\.value\\s*,\\s*date\\s*:\\s*dateInput\\.value\\s*,\\s*description\\s*:\\s*descriptionInput\\.value\\s*,?\\s*\\}\\s*;?/)\n```\n\nYou should move the `if` statement with the condition `dataArrIndex === -1` into your `addOrUpdateTask` function.\n\n```js\nassert.match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(?:\\(\\s*item\\s*\\)|item)\\s*=>\\s*(?:item\\.id\\s*===\\s*currentTask\\.id|currentTask\\.id\\s*===\\s*item\\.id)\\s*\\)\\s*;?\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\.value\\.toLowerCase\\(\\s*\\)\\.split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\.join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\.now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\.value\\s*,\\s*date\\s*:\\s*dateInput\\.value\\s*,\\s*description\\s*:\\s*descriptionInput\\.value\\s*,?\\s*\\}\\s*;?\\s*if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\.unshift\\(\\s*taskObj\\s*\\)\\s*;?\\s*\\}\\s*\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 36",
      "description": "Use arrow syntax to create an `updateTaskContainer` function. Then move the `taskData.forEach()` and its content from the `taskForm`'s `submit` event listener into the newly created function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n\n  reset()\n});"
        }
      ],
      "testCode": "You should use `const` and arrow syntax to create a `updateTaskContainer` function.\n\n```js\nassert.match(code, /const\\s+updateTaskContainer\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{/)\n```\n\nYou should move `taskData.forEach()` and its content into the `updateTaskContainer()` function.\n\n```js\nassert.match(code, /const\\s+updateTaskContainer\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*taskData\\.forEach\\(\\s*\\(\\s*\\{\\s*id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description\\s*\\}\\s*\\)\\s*=>\\s*{\\s*tasksContainer\\.innerHTML\\s*\\+=\\s*`\\s*<div\\s+class\\s*=\\s*('|\")task\\1\\s*id\\s*=\\s*('|\")\\$\\{id\\}\\2>\\s*<p><strong>Title:<\\/strong>\\s*\\$\\{title\\}<\\/p>\\s*<p><strong>Date:<\\/strong>\\s*\\$\\{date\\}<\\/p>\\s*<p><strong>Description:<\\/strong>\\s*\\$\\{description\\}<\\/p>\\s*<button\\s+type\\s*=\\s*('|\")button\\3\\s*class\\s*=\\s*('|\")btn\\4>Edit<\\/button>\\s*<button\\s+type\\s*=\\s*('|\")button\\5\\s*class\\s*=\\s*('|\")btn\\6>Delete<\\/button>\\s*<\\/div>\\s*`;?\\s*}\\s*\\)\\s*;?\\s*\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 37",
      "description": "Inside the `addOrUpdateTask` function, call the `updateTaskContainer` and `reset` functions.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n};\n\nconst updateTaskContainer = () => {\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    } \n  );\n};\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  reset()\n});"
        }
      ],
      "testCode": "You should call the `updateTaskContainer` function.\n\n```js\nassert.match(code, /updateTaskContainer\\(\\s*\\)\\s*/)\n```\n\nYou should call the `reset` function after calling the `updateTaskContainer` function.\n\n```js\nassert.match(code, /updateTaskContainer\\(\\s*\\)\\s*;?\\s*reset\\(\\s*\\)\\s*;?\\s*/)\n```"
    },
    {
      "title": "Step 38",
      "description": "Now remove the `reset()` call inside the `taskForm` submit event listener and call the `addOrUpdateTask` function instead.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n  \n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n};\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  --fcc-editable-region--\n  reset()\n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should remove `reset()` and call `addOrUpdateTask()`.\n\n```js\nassert.match(code, /addOrUpdateTask\\(\\s*\\)/)\n```"
    },
    {
      "title": "Step 40",
      "description": "To enable editing and deleting for each task, add an `onclick` attribute to both buttons. Set the value of the `onclick` attribute to `editTask(this)` for the `Edit` button and `deleteTask(this)` for the `Delete` button. The `editTask(this)` function will handle editing, while the `deleteTask(this)` function will handle deletion.\n\n`this` is a keyword that refers to the current context. In this case, `this` points to the element that triggers the event – the buttons.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          --fcc-editable-region--\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button> \n          --fcc-editable-region--\n        </div>\n      `\n    }\n  );\n};\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should add `onclick=\"editTask(this)\"` to your edit button.\n\n```js\nassert.match(code, /<button(?=[^>]*onclick\\s*=\\s*(\"|')editTask\\(\\s*this\\s*\\)\\1)[^>]*>Edit<\\/button>/);\n```\n\nYou should add `onclick=\"deleteTask(this)\"` to your delete button.\n\n```js\nassert.match(code, /<button(?=[^>]*onclick\\s*=\\s*(\"|')deleteTask\\(\\s*this\\s*\\)\\1)[^>]*>Delete<\\/button>/);\n```"
    },
    {
      "title": "Step 41",
      "description": "Create a `deleteTask` function using arrow syntax. Pass `buttonEl` as the parameter and define an empty set of curly braces for the function body.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should use `const` and arrow syntax to create a `deleteTask` function.\n\n```js\nassert.match(code, /const\\s+deleteTask\\s*=\\s*(\\(.*\\)|[^\\s()]+)\\s*=>\\s*/);\n```\n\nYour `deleteTask` function should take a `buttonEl` parameter.\n\n```js\nassert.match(deleteTask.toString(), /\\(\\s*buttonEl\\s*\\)/);\n```\n\nYour `deleteTask` function should be empty.\n\n```js\nassert.match(deleteTask.toString(), /\\(\\s*buttonEl\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 39",
      "description": "There's a problem. If you add a task, and then add another, the previous task gets duplicated. This means you need to clear out the existing contents of `tasksContainer` before adding a new task.\n\nSet the `innerHTML` of `tasksContainer` back to an empty string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n  \n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button type=\"button\" class=\"btn\">Edit</button>\n          <button type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should set the `innerHTML` of `tasksContainer` to an empty string.\n\n```js\nassert.match(code, /tasksContainer\\.innerHTML\\s*=\\s*(\"|')\\1\\s*;?/)\n```"
    },
    {
      "title": "Step 42",
      "description": "You need to find the index of the task you want to delete first.\n\nCreate a `dataArrIndex` variable and set its value using the `findIndex()` method on the `taskData` array. Pass `item` as the parameter for the arrow callback function, and within the callback, check if the `id` of `item` is equal to the `id` of the `parentElement` of `buttonEl`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n};\n\n--fcc-editable-region--\nconst deleteTask = (buttonEl) => {\n\n}\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should not alter the `deleteTask` function.\n\n```js\nassert.match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*/)\n```\n\nYou should use `const` to declare a `dataArrIndex` variable and set it to `taskData.findIndex()`.\n\n```js\nassert.match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(/)\n```\n\nYou should pass in `item` as the parameter of the `findIndex()` arrow function callback.\n\n```js\nassert.match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/)\n```\n\nYour arrow function callback should check if `item.id === buttonEl.parentElement.id`. Don't use curly braces.\n\n```js\nassert.match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\.id\\s*===\\s*buttonEl\\.parentElement\\.id|buttonEl\\.parentElement\\.id\\s*===\\s*item\\.id)\\s*\\)\\s*;?\\s*\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 43",
      "description": "You need to remove the task from the DOM using `remove()` and from the `taskData` array using `splice()`.\n\n`splice()` is an array method that modifies arrays by removing, replacing, or adding elements at a specified index, while also returning the removed elements. It can take up to three arguments: the first one is the mandatory index at which to start, the second is the number of items to remove, and the third is an optional replacement element. Here's an example:\n\n```js\nconst fruits = [\"mango\", \"date\", \"cherry\", \"banana\", \"apple\"];\n\n// Remove date and cherry from the array starting at index 1\nconst removedFruits = fruits.splice(1, 2);\n\nconsole.log(fruits); // [ 'mango', 'banana', 'apple' ]\nconsole.log(removedFruits); // [ 'date', 'cherry' ]\n```\n\nUse the `remove()` method to remove the `parentElement` of the `buttonEl` from the DOM. Then use `splice()` to remove the task from the `taskData` array. Pass in `dataArrIndex` and `1` as the arguments of your `splice()`.\n\n`dataArrIndex` is the index to start and `1` is the number of items to remove.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n--fcc-editable-region--\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n  \n}\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should not alter the `dataArrIndex` statement.\n\n```js\nassert.match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\.id\\s*===\\s*buttonEl\\.parentElement\\.id|buttonEl\\.parentElement\\.id\\s*===\\s*item\\.id)\\s*\\)\\s*;?[\\S\\s]*\\}\\s*;?/)\n```\n\nYou should use the `remove()` method to remove the parent element of `buttonEl`.\n\n```js\nassert.match(deleteTask.toString(), /buttonEl\\.parentElement\\.remove\\(\\s*\\)\\s*;?/)\n```\n\nYou should use `splice()` on the `taskData` array.\n\n```js\nassert.match(deleteTask.toString(), /taskData\\.splice\\(/)\n```\n\nThe first argument of your `splice()` method should be `dataArrIndex`.\n\n```js\nassert.match(deleteTask.toString(), /taskData\\.splice\\(\\s*dataArrIndex/)\n```\n\nThe second argument of your `splice()` method should be `1`.\n\n```js\nassert.match(deleteTask.toString(), /taskData\\.splice\\(\\s*dataArrIndex\\s*,\\s*1\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 44",
      "description": "Use arrow syntax to create an `editTask` function. Pass in `buttonEl` as the parameter and add empty curly braces for the body.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should use `const` and arrow syntax to create an `editTask` function.\n\n```js\nassert.match(code, /const\\s+editTask\\s*=\\s*(\\(.*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*/)\n```\n\nYour `editTask` function should take a `buttonEl` parameter.\n\n```js\nassert.match(editTask.toString(), /\\(\\s*buttonEl\\s*\\)/);\n```\n\nYour `editTask` function should be empty.\n\n```js\nassert.match(editTask.toString(), /\\(\\s*buttonEl\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 45",
      "description": "As you did in the `deleteTask` function, you need to find the index of the task to be edited.\n\nCreate a `dataArrIndex` variable. For its value, utilize the `findIndex()` method on `taskData`. Pass `item` as the parameter to its callback function and check if the `id` of `item` is equal to the `id` of the `parentElement` of `buttonEl`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\n\n}\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should not alter the `editTask` function.\n\n```js\nassert.match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*/)\n```\n\nYou should use `const` to declare a `dataArrIndex` variable and set it to `taskData.findIndex()`.\n\n```js\nassert.match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(/)\n```\n\nYou should pass in `item` as the parameter of the `findIndex()` arrow function callback. Don't use curly braces.\n\n```js\nassert.match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/)\n```\n\nYour arrow function callback should check if `item.id === buttonEl.parentElement.id`.\n\n```js\nassert.match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\.findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\.id\\s*===\\s*buttonEl\\.parentElement\\.id|buttonEl\\.parentElement\\.id\\s*===\\s*item\\.id)\\s*\\)\\s*;?\\s*\\}\\s*;?/)\n```"
    },
    {
      "title": "Step 46",
      "description": "Use square bracket notation to retrieve the task to be edited from the `taskData` array using the `dataArrIndex`. Then, assign it to the `currentTask` object to keep track of it.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === buttonEl.parentElement.id);\n  \n\n}\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should assign `taskData[dataArrIndex]` to `currentTask`.\n\n```js\nassert.match(code, /currentTask\\s*=\\s*taskData\\s*\\[\\s*dataArrIndex\\s*\\]\\s*;?/)\n```"
    },
    {
      "title": "Step 47",
      "description": "The task to be edited is now in the `currentTask` object. Stage it for editing inside the input fields by setting the value of `titleInput` to `currentTask.title`, `dateInput` to `currentTask.date`, and `descriptionInput` to `currentTask.description`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n  \n\n}\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should set `titleInput.value` to `currentTask.title`.\n\n```js\nassert.match(editTask.toString(), /titleInput\\.value\\s*=\\s*currentTask\\.title\\s*;?/)\n```\n\nYou should set `dateInput.value` to `currentTask.date`.\n\n```js\nassert.match(editTask.toString(), /dateInput\\.value\\s*=\\s*currentTask\\.date\\s*;?/)\n```\n\nYou should set `descriptionInput.value` to `currentTask.description`.\n\n```js\nassert.match(editTask.toString(), /descriptionInput\\.value\\s*=\\s*currentTask\\.description\\s*;?/)\n```"
    },
    {
      "title": "Step 48",
      "description": "Set the `innerText` of the `addOrUpdateTaskBtn` button to `Update Task`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n  \n}\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should set the inner text of the `addOrUpdateTaskBtn` button to `Update Task`\n\n```js\nassert.match(editTask.toString(), /addOrUpdateTaskBtn\\.innerText\\s*=\\s*(\"|')Update Task\\1\\s*;?/)\n```"
    },
    {
      "title": "Step 49",
      "description": "Finally, display the `form` modal with the values of the input fields by using `classList` to toggle the `hidden` class on `taskForm`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n  \n  \n}\n--fcc-editable-region--\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should use `classList` to toggle the class `hidden` on `taskForm`.\n\n```js\nassert.match(editTask.toString(), /taskForm\\.classList\\.toggle\\(\\s*('|\")hidden\\1\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 50",
      "description": "At this point, editing a task won't reflect when you submit the task. To make the editing functional, go back to the `if` statement inside the `addOrUpdateTask` function. Create an `else` block and set `taskData[dataArrIndex]` to `taskObj`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  --fcc-editable-region--\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  --fcc-editable-region--\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "Your `if` statement should have an `else` block.\n\n```js\nassert.match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\.unshift\\(\\s*taskObj\\s*\\)\\s*;?\\s*\\}\\s*else\\s*\\{\\s*/)\n```\n\nYour `else` block should have the code `taskData[dataArrIndex] = taskObj`.\n\n```js\nassert.match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\.unshift\\(\\s*taskObj\\s*\\)\\s*;?\\s*\\}\\s*else\\s*\\{\\s*taskData\\s*\\[\\s*dataArrIndex\\s*\\]\\s*=\\s*taskObj\\s*;?\\s*\\}/)\n```"
    },
    {
      "title": "Step 51",
      "description": "If the user attempts to edit a task but decides not to make any changes before closing the form, there is no need to display the modal with the `Cancel` and `Discard` buttons.\n\nInside the `closeTaskFormBtn` event listener, use `const` to create another variable named `formInputValuesUpdated`. Check if the user made changes while trying to edit a task by verifying that the `titleInput` value **is not equal to** `currentTask.title`, or the `dateInput` value **is not equal to** `currentTask.date`, or the `descriptionInput` value **is not equal to** `currentTask.description`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "Your `formInputValuesUpdated` variable should check if `titleInput.value` is not equal to `currentTask.title`.\n\n```js\nconst regex = /const\\s+formInputValuesUpdated\\s*=(?=.*titleInput\\.value\\s*(!==|!=)\\s*currentTask\\.title)/\n\nassert.match(code, regex)\n```\n\nYour `formInputValuesUpdated` variable should check if `titleInput.value` is not equal to `currentTask.title` or `dateInput.value` is not equal to `currentTask.date`.\n\n```js\nconst regex = /const\\s+formInputValuesUpdated\\s*=(?=.*titleInput\\.value\\s*(!==|!=)\\s*currentTask\\.title)(?=.*dateInput\\.value\\s*(?:!==|!=)\\s*currentTask\\.date)/\n\nassert.match(code, regex);\n\n```\n\nYour `formInputValuesUpdated` variable should check if `titleInput.value` is not equal to `currentTask.title`, `dateInput.value` is not equal to `currentTask.date`, or `descriptionInput.value` is not equal to `currentTask.description`.\n\n```js\nconst regex = /const\\s+formInputValuesUpdated\\s*=\\s*titleInput\\.value\\s*(!==|!=)\\s*currentTask\\.title\\s*\\|\\|\\s*dateInput\\.value\\s*(!==|!=)\\s*currentTask\\.date\\s*\\|\\|\\s*descriptionInput\\.value\\s*(!==|!=)\\s*currentTask\\.description\\s*;?/\n\nassert.match(code, regex);\n```"
    },
    {
      "title": "Step 52",
      "description": "Now add `formInputValuesUpdated` as the second mandatory condition in the `if` statement using the `AND` operator.\n\nThis way, the `Cancel` and `Discard` buttons in the modal won't be displayed to the user if they haven't made any changes to the input fields while attempting to edit a task.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n--fcc-editable-region--\n  if (formInputsContainValues) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n--fcc-editable-region--\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "Your `if` should have the condition `formInputsContainValues && formInputValuesUpdated`.\n\n```js\nassert.match(code.split(\"if (formInputsContainValues\"), /\\s*&&\\s*formInputValuesUpdated/)\n```"
    },
    {
      "title": "Step 53",
      "description": "`localStorage` offers methods for saving, retrieving, and deleting items. The items you save can be of any JavaScript data type.\n\nFor instance, the `setItem()` method is used to save an item, and the `getItem()` method retrieves the item. To delete a specific item, you can utilize the `removeItem()` method, or if you want to delete all items in the storage, you can use `clear()`.\n\nHere's how you can save an item:\n\n```js\nlocalStorage.setItem(\"key\", value); // value could be string, number, or any other data type\n```\n\nA `myTaskArr` array has been provided for you. Use the `setItem()` method to save it with a key of `data`.\n\nAfter that, open your browser console and go to the `Applications` tab, select `Local Storage`, and the freeCodeCamp domain you see.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});\n\nconst myTaskArr = [\n  { task: \"Walk the Dog\", date: \"22-04-2022\" },\n  { task: \"Read some books\", date: \"02-11-2023\" },\n  { task: \"Watch football\", date: \"10-08-2021\" },\n];\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `localStorage.setItem()` should have a key of `\"data\"`.\n\n```js\nassert.match(code, /localStorage\\.setItem\\(\\s*(\"|')data\\1/)\n```\n\nYour `localStorage.setItem()` should have a value of `myTaskArr`.\n\n```js\nassert.match(code, /localStorage\\.setItem\\(\\s*(\"|')data\\1\\s*,\\s*myTaskArr\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 54",
      "description": "If you check the \"Application\" tab of your browser console, you'll notice a series of `[object Object]`. This is because everything you save in `localStorage` needs to be in string format.\n\nTo resolve the issue, wrap the data you're saving in the `JSON.stringify()` method. Then, check local storage again to observe the results.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});\n\nconst myTaskArr = [\n  { task: \"Walk the Dog\", date: \"22-04-2022\" },\n  { task: \"Read some books\", date: \"02-11-2023\" },\n  { task: \"Watch football\", date: \"10-08-2021\" },\n];\n\n--fcc-editable-region--\nlocalStorage.setItem(\"data\", myTaskArr);\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `localStorage.setItem()` should have a key of `\"data\"`.\n\n```js\nassert.match(code, /localStorage\\.setItem\\(\\s*(\"|')data\\1/)\n```\n\nYou should wrap `JSON.stringify()` around `myTaskArr`.\n\n```js\nassert.match(code, /localStorage\\.setItem\\(\\s*(\"|')data\\1\\s*,\\s*JSON\\.stringify\\(\\s*myTaskArr\\s*\\)\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 55",
      "description": "Now that you have the `myTaskArr` array saved in `localStorage` correctly, you can retrieve it with `getItem()` by specifying the key you used to save the item.\n\nUse the `getItem()` method to retrieve the `myTaskArr` array and assign it to the variable `getTaskArr`. Then, log the `getTaskArr` variable to the console to see the result.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});\n\nconst myTaskArr = [\n  { task: \"Walk the Dog\", date: \"22-04-2022\" },\n  { task: \"Read some books\", date: \"02-11-2023\" },\n  { task: \"Watch football\", date: \"10-08-2021\" },\n];\n\nlocalStorage.setItem(\"data\", JSON.stringify(myTaskArr));\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `const` to create a `getTaskArr` variable and assign `localStorage.getItem(\"data\")` to it.\n\n```js\nassert.match(code, /const\\s+getTaskArr\\s*=\\s*localStorage\\.getItem\\(\\s*('|\")data\\1\\s*\\)\\s*;?/)\n```\n\nYou should log the `getTaskArr` variable to the console.\n\n```js\nassert.match(code, /console\\.log\\(\\s*getTaskArr\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 56",
      "description": "The item you retrieve is a string, as you saved it with `JSON.stringify()`. To view it in its original form before saving, you need to use `JSON.parse()`.\n\nUse `getItem()` to retrieve the `myTaskArr` array again. This time, wrap it inside `JSON.parse()`, assign it to the variable `getTaskArrObj` and log the `getTaskArrObj` to the console.\n\nCheck the console to see the difference between `getTaskArr` and `getTaskArrObj`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});\n\nconst myTaskArr = [\n  { task: \"Walk the Dog\", date: \"22-04-2022\" },\n  { task: \"Read some books\", date: \"02-11-2023\" },\n  { task: \"Watch football\", date: \"10-08-2021\" },\n];\n\nlocalStorage.setItem(\"data\", JSON.stringify(myTaskArr));\n\nconst getTaskArr = localStorage.getItem(\"data\")\nconsole.log(getTaskArr)\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use `const` to create a `getTaskArrObj` variable and assign it to `JSON.parse(localStorage.getItem('data'));`.\n\n```js\nassert.match(code, /const\\s+getTaskArrObj\\s*=\\s*JSON\\.parse\\(\\s*localStorage\\.getItem\\(\\s*('|\")data\\1\\s*\\)\\s*\\)\\s*;?/)\n```\n\nYou should log the `getTaskArrObj` variable to the console.\n\n```js\nassert.match(code, /console\\.log\\(\\s*getTaskArrObj\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 57",
      "description": "You can use `localStorage.removeItem()` to remove a specific item and `localStorage.clear()` to clear all items in the local storage.\n\nRemove the `data` item from local storage and open the console to observe the result. You should see `null`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});\n\nconst myTaskArr = [\n  { task: \"Walk the Dog\", date: \"22-04-2022\" },\n  { task: \"Read some books\", date: \"02-11-2023\" },\n  { task: \"Watch football\", date: \"10-08-2021\" },\n];\n\nlocalStorage.setItem(\"data\", JSON.stringify(myTaskArr));\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst getTaskArr = localStorage.getItem(\"data\")\nconsole.log(getTaskArr)\n\nconst getTaskArrObj = JSON.parse(localStorage.getItem(\"data\"));\nconsole.log(getTaskArrObj);"
        }
      ],
      "testCode": "You should use `localStorage.removeItem()` to remove the `data` item from the browser's local storage.\n\n```js\nassert.match(code, /localStorage\\.removeItem\\(\\s*('|\")data\\1\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 58",
      "description": "Remove the `myTaskArr` array and all of the code for `localStorage` because you don't need them anymore.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");\n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});\n\n--fcc-editable-region--\nconst myTaskArr = [\n  { task: \"Walk the Dog\", date: \"22-04-2022\" },\n  { task: \"Read some books\", date: \"02-11-2023\" },\n  { task: \"Watch football\", date: \"10-08-2021\" },\n];\n\nlocalStorage.setItem(\"data\", JSON.stringify(myTaskArr));\n\nlocalStorage.removeItem(\"data\");\n\nconst getTaskArr = localStorage.getItem(\"data\")\nconsole.log(getTaskArr)\n\nconst getTaskArrObj = JSON.parse(localStorage.getItem(\"data\"));\nconsole.log(getTaskArrObj);\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should remove `myTaskArr` and all the code related to `localStorage` that you've just learned.\n\n```js\nassert.notMatch(code, /const\\s+myTaskArr\\s*=\\s*\\[\\s*\\{\\s*task:\\s*('|\")Walk\\s*the\\s*Dog\\1\\s*,\\s*date:\\s*('|\")22-04-2022\\2\\s*\\}\\s*,\\s*\\{\\s*task:\\s*('|\")Read\\s*some\\s*books\\3\\s*,\\s*date:\\s*('|\")02-11-2023\\4\\s*\\}\\s*,\\s*\\{\\s*task:\\s*('|\")Watch\\s*football\\5\\s*,\\s*date:\\s*('|\")10-08-2021\\6\\s*\\}\\s*\\]\\s*;?\\s*localStorage\\.setItem\\(('|\")data\\7\\s*,\\s*JSON\\.stringify\\(\\s*myTaskArr\\s*\\)\\s*;?\\)\\s*;?\\s*localStorage\\.clear\\(\\s*\\)\\s*;?\\s*const\\s+getTaskArr\\s*=\\s*localStorage\\.getItem\\(\\s*('|\")data\\8\\s*\\)\\s*console\\.log\\(\\s*getTaskArr\\s*\\)\\s*const\\s+getTaskArrObj\\s*=\\s*JSON\\.parse\\(\\s*localStorage\\.getItem\\(\\s*('|\")data\\9\\s*\\)\\s*\\)\\s*;?\\s*console\\.log\\(\\s*getTaskArrObj\\s*\\)\\s*;?/);\n```\n\nYou should remove any remaining references to `myTaskArr` anywhere in the code.\n\n```js\nassert.notMatch(code, /myTaskArr/);\n```\n\nYou should remove any reference to `localStorage.getItem` for the item `\"data\"`.\n\n```js\nassert.notMatch(code, /localStorage\\.getItem\\(\\s*('|\")data\\1\\s*\\)/);\n```\n\nYou should remove any remaining references to `getTaskArrObj` anywhere in the code.\n\n```js\nassert.notMatch(code, /getTaskArrObj/);\n```"
    },
    {
      "title": "Step 59",
      "description": "Now you should save the task items to local storage when the user adds, updates, or removes a task.\n\nInside the `addOrUpdateTask` function, use `setItem()` to save the tasks with a key of `data`, then pass the `taskData` array as its argument. Ensure that you stringify the `taskData`.\n\nThis would persist data once the user adds or updates tasks.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should use `localStorage.setItem()` to save the tasks to the browser `local storage`.\n\n```js\nassert.match(code, /localStorage\\.setItem\\(/)\n```\n\nYou should pass in `\"data\"` as the first argument of your `localStorage.setItem()`.\n\n```js\nassert.match(code, /localStorage\\.setItem\\(\\s*('|\")data\\1/)\n```\n\nYou should pass in `JSON.stringify(taskData)` as the second argument of your `localStorage.setItem()`.\n\n```js\nassert.match(code, /localStorage\\.setItem\\(\\s*('|\")data\\1\\s*,\\s*JSON\\.stringify\\(\\s*taskData\\s*\\)\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 60",
      "description": "You also want a deleted task to be removed from local storage. For this, you don't need the `removeItem()` or `clear()` methods. Since you already use `splice()` to remove the deleted task from `taskData`, all you need to do now is save `taskData` to local storage again.\n\nUse `setItem()` to save the `taskData` array again. Pass in `data` as the key and ensure that `taskData` is stringified before saving.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should use `localStorage.setItem()` to save the tasks to the browser `local storage`.\n\n```js\nconst splitter = code.split(\"taskData.splice(dataArrIndex, 1);\")\nassert.match(splitter[1], /localStorage\\.setItem\\(/)\n```\n\nYou should pass in `\"data\"` as the first argument of your `localStorage.setItem()`.\n\n```js\nconst splitter = code.split(\"taskData.splice(dataArrIndex, 1);\")\nassert.match(splitter[1], /localStorage\\.setItem\\(\\s*('|\")data\\1/)\n```\n\nYou should pass in `JSON.stringify(taskData)` as the second argument of your `localStorage.setItem()`.\n\n```js\nconst splitter = code.split(\"taskData.splice(dataArrIndex, 1);\")\nassert.match(splitter[1], /localStorage\\.setItem\\(\\s*('|\")data\\1\\s*,\\s*JSON\\.stringify\\(\\s*taskData\\s*\\)\\s*\\)\\s*;?/)\n```"
    },
    {
      "title": "Step 61",
      "description": "If you add, update, or remove a task, it should reflect in the UI. However, that's not happening now because you have yet to retrieve the tasks. To do this, you need to modify your initial `taskData` to be an empty array.\n\nSet `taskData` to the retrieval of `data` from local storage **or** an empty array. Make sure you parse the data coming with `JSON.parse()` because you saved it as a string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\n--fcc-editable-region--\nconst taskData = [];\n--fcc-editable-region--\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");\n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should set the `taskData` variable to `JSON.parse(localStorage.getItem(\"data\")) || [];`.\n\n```js\nassert.match(code, /const\\s+taskData\\s*=\\s*JSON\\.parse\\(\\s*localStorage\\.getItem\\(\\s*('|\")data\\1\\s*\\)\\s*\\)\\s*\\|\\|\\s*\\[\\s*\\]\\s*;?/)\n```"
    },
    {
      "title": "Step 62",
      "description": "You've retrieved the task item(s) now, but they still don't reflect in the UI when the page loads. However, they appear when you add a new task.\n\nYou can check if there's a task inside `taskData` using the length of the array. Because `0` is a falsy value all you need for the condition is the array length.\n\nHere is an example checking the length of an array:\n\n```js\nif (arr.length) {\n  // do something\n}\n```\n\nIn that example, if `arr` has a length greater than `0`, the code inside the `if` statement block will run. If `arr` has a length of `0`, the code inside the `if` statement block will not run.\n\nCheck if there's a task inside `taskData`, then call the `updateTaskContainer()` inside the `if` statement block.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = JSON.parse(localStorage.getItem(\"data\")) || [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should create an `if` statement with `(taskData.length)` as the condition. As a reminder, `0` is a falsy value.\n\n```js\nassert.match(code, /if\\s*\\(\\s*taskData\\.length\\s*\\)\\s*\\{\\s*/)\n```\n\nYou should call the `updateTaskContainer` function in your `if` statement.\n\n```js\nassert.match(code, /if\\s*\\(\\s*taskData\\.length\\s*\\)\\s*\\{\\s*updateTaskContainer\\(\\s*\\)\\s*;?\\s*\\}/)\n```"
    },
    {
      "title": "Step 18",
      "description": "To make the `id` more unique, add another hyphen and use <dfn>Date.now()</dfn>.\n\n`Date.now()` returns the number of milliseconds elapsed since `January 1, 1970 00:00:00 UTC`.\n\n```js\nconsole.log(Date.now()); // 1628586800000\n```\n\nTo see the new result, click on the `\"Add New Task\"` button. Then add a title of `WALK DOG` and click on the `\"Add Task\"` button. Open up the console to see the result.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    --fcc-editable-region--\n    id: `${titleInput.value.toLowerCase().split(' ').join('-')}`,  \n    --fcc-editable-region--\n  };\n  console.log(taskObj);\n});"
        }
      ],
      "testCode": "You should add `-${Date.now()}` to `${titleInput.value.toLowerCase().split(' ').join('-')}`. Don't forget it needs to be inside the template string.\n\n```js\nassert.match(code, /\\s*id:\\s*`\\$\\{titleInput\\.value\\.toLowerCase\\(\\s*\\)\\.split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\.join\\(\\s*('|\")-\\2\\s*\\)\\}-\\$\\{Date\\.now\\(\\s*\\)\\}`\\s*/)\n```"
    },
    {
      "title": "Step 27",
      "description": "Create one more `p` element and interpolate the `description` you destructured as the text. Also, create a `strong` element inside the paragraph with the text `Description:`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n   if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  }\n\n  taskData.forEach(({id, title, date, description}) => {\n        tasksContainer.innerHTML += `\n          <div class=\"task\" id=\"${id}\">\n            <p><strong>Title:</strong> ${title}</p>\n            <p><strong>Date:</strong> ${date}</p>\n    --fcc-editable-region--\n            \n    --fcc-editable-region--\n          </div>\n        `\n      }\n    );\n});"
        }
      ],
      "testCode": "You should create a `p` element with `${description}` as the text.\n\n```js\nassert.match(code, /<p>.*\\$\\{description\\}<\\/p>/)\n```\n\nYou should create a `strong` element with the text `Description:` after the opening tag of your `p` element.\n\n```js\nassert.match(code, /<p><strong>Description:\\s*<\\/strong>\\s*/)\n```"
    },
    {
      "title": "Step 12",
      "description": "When a user creates a task, it should be saved in an object. \n\nCreate a `const` variable called `taskObj` and assign it the value of an empty object.\n\nThen below that, add a console statement that logs the value of `taskObj` to the console.\n\nOpen up the console to see the empty object.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should use `const` to create your `taskObj` variable.\n\n```js\nassert.match(code, /const\\s+taskObj\\s*=\\s*/);\n```\n\nYou should assign an empty object to your `taskObj` variable.\n\n```js\nassert.match(code, /const\\s+taskObj\\s*=\\s*{\\s*}/);\n```\n\nYou should use `console.log()` to log the value of `taskObj` to the console.\n\n```js\nassert.match(code, /console\\.log\\(\\s*taskObj\\s*\\)/);\n```"
    },
    {
      "title": "Step 13",
      "description": "Inside your `taskObj`, add an `id` property name. For the value use the value of the `titleInput`. \n\nTo see the new result, click on the `\"Add New Task\"` button. Then add a title and click on the `\"Add Task\"` button. Open up the console to see the result.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n\n--fcc-editable-region--\n  const taskObj = {\n\n  };\n  console.log(taskObj);\n--fcc-editable-region--\n});"
        }
      ],
      "testCode": "Your `taskObj` should have an `id` property.\n\n```js\nassert.match(code, /const\\s+taskObj\\s*=\\s*\\{\\s*(\"|'|)id\\1/)\n```\n\nThe `id` property of your `taskObj` object should be set to `titleInput.value`.\n\n```js\nassert.match(code, /const\\s+taskObj\\s*=\\s*\\{\\s*(\"|'|)id\\1\\s*:\\s*titleInput\\.value\\s*,?\\s*\\}/)\n```"
    },
    {
      "title": "Step 14",
      "description": "The user should be able to input a title with upper and lowercase letters. But for the `id`, the value should be all lowercase. \n\nUpdate your `titleInput.value` to be all lowercase. You can use the `toLowerCase()` method to do this.\n\n```js\nstr.toLowerCase();\n```\n\nTo see the new result, click on the `\"Add New Task\"` button. Then add a title of `WALK DOG` and click on the `\"Add Task\"` button. Open up the console to see the result of `\"walk dog\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n\n  const taskObj = {\n    --fcc-editable-region--\n    id: titleInput.value\n    --fcc-editable-region--\n  };\n  console.log(taskObj);\n});"
        }
      ],
      "testCode": "Your value should be `titleInput.value.toLowerCase()`.\n\n```js\nassert.match(code, /\\s*id:\\s*titleInput\\.value\\.toLowerCase\\(\\)/)\n```"
    },
    {
      "title": "Step 15",
      "description": "Right now, your `id` value is a lowercase string. But the final result should be a hyphenated string.\n\nStart by chaining the `split` method to the `titleInput.value` to split the string into an array of words. For the separator, use a space character(`\" \"`).\n\nTo see the new result, click on the `\"Add New Task\"` button. Then add a title of `WALK DOG` and click on the `\"Add Task\"` button. Open up the console to see the result of `['walk', 'dog']`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n\n  const taskObj = {\n    --fcc-editable-region--\n    id: titleInput.value.toLowerCase()\n    --fcc-editable-region--\n  };\n  console.log(taskObj);\n});"
        }
      ],
      "testCode": "You should chain `split(\" \")` to `titleInput.value.toLowerCase()`.\n\n```js\nassert.match(code, /\\s*id:\\s*titleInput\\.value\\.toLowerCase\\(\\s*\\)\\.split\\(\\s*('|\")\\s{1}\\1\\s*\\)/)\n```"
    },
    {
      "title": "Step 16",
      "description": "Now that your `id` is an array of words, you can use the `join` method to turn the result back into a string. For the separator, use a hyphen(`-`).\n\nTo see the new result, click on the `\"Add New Task\"` button. Then add a title of `WALK DOG` and click on the `\"Add Task\"` button. Open up the console to see the result of `\"walk-dog\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n\n  const taskObj = {\n    --fcc-editable-region--\n    id: titleInput.value.toLowerCase().split(\" \")\n    --fcc-editable-region--\n  };\n  console.log(taskObj);\n});"
        }
      ],
      "testCode": "You should chain `join(\"-\")` to `titleInput.value.toLowerCase().split(\" \")`.\n\n```js\nassert.match(code, /const\\s+taskObj\\s*=\\s*\\{\\s*id:\\s*titleInput\\.value\\.toLowerCase\\(\\s*\\)\\.split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\.join\\(\\s*('|\")-\\2\\s*\\)\\s*,?\\s*\\}/)\n```"
    },
    {
      "title": "Step 17",
      "description": "There is one last thing you will need to do to make this `id` unique. \n\nBut first, place the entire value below inside an embedded expression `${}`.\n\n```js\ntitleInput.value.toLowerCase().split(\" \").join(\"-\")\n```\n\nThen wrap that value in template strings.\n\nIn the next step, you will add a unique number to the end of the `id` value to make it truly unique.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n\n  const taskObj = {\n  --fcc-editable-region--\n    id: titleInput.value.toLowerCase().split(\" \").join(\"-\")\n  --fcc-editable-region--\n  };\n  console.log(taskObj);\n});"
        }
      ],
      "testCode": "Your value should be `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}`. Don't forget to wrap the entire value in template strings.\n\n```js\nassert.match(code, /\\s*id:\\s*`\\s*\\${\\s*titleInput\\.value\\.toLowerCase\\(\\s*\\)\\.split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\.join\\(\\s*('|\")-\\2\\s*\\)\\s*}`\\s*/)\n```"
    },
    {
      "title": "Step 20",
      "description": "Now that you have finished testing your `taskObj`, you can remove the `console.log(taskObj)` statement.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = [];\nlet currentTask = {};\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.showModal();\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  taskForm.classList.toggle(\"hidden\");\n});\n\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n  --fcc-editable-region--\n  console.log(taskObj);\n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "You should not have a `console.log(taskObj)` statement in your code.\n\n```js\nassert.notMatch(code, /console\\.log\\(\\s*taskObj\\s*\\)/);\n```"
    },
    {
      "title": "Step 63",
      "description": "If you try to add a new task, edit that task, and then click on the `Add New Task` button, you will notice a bug.\n\nThe form button will display the incorrect text of `\"Update Task\"` instead of `\"Add Task\"`. To fix this, you will need to assign the string `\"Add Task\"` to `addOrUpdateTaskBtn.innerText` inside your `reset` function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = JSON.parse(localStorage.getItem(\"data\")) || [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nif (taskData.length) {\n  updateTaskContainer();\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should assign the string `\"Add Task\"` to `addOrUpdateTaskBtn.innerText`.\n\n```js\nassert.match(code, /addOrUpdateTaskBtn\\.innerText\\s*=\\s*('|\")Add Task\\1\\s*/)\n```"
    },
    {
      "title": "Step 64",
      "description": "There are two bugs left to fix. First, if you create a task with only spaces for the title, an empty task will be created even though the title is required.\n\nFix that by adding a check at the beginning of the function for if `!titleInput.value.trim()`. If there's no title, show an alert with the text `Please provide a title` and `return` after that.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = JSON.parse(localStorage.getItem(\"data\")) || [];\nlet currentTask = {};\n\nconst addOrUpdateTask = () => {\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        (tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `)\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  addOrUpdateTaskBtn.innerText = \"Add Task\";\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nif (taskData.length) {\n  updateTaskContainer();\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should add an `if` statement with the condition `!titleInput.value.trim()` inside `addOrUpdateTask` function.\n\n```js\nassert.match(code, /if\\s*\\(\\s*!titleInput\\.value\\.trim\\(\\s*\\)\\s*\\)\\s*/)\n```\n\nYou should call the `alert(\"Please provide a title\")` in your `if` block.\n\n```js\nassert.match(code, /if\\s*\\(\\s*!titleInput\\.value\\.trim\\(\\s*\\)\\s*\\)\\s*\\{\\s*alert\\s*\\(\\s*('|\"|`)Please provide a title\\1\\s*\\)\\s*/)\n```\n\nYour `if` statement should return from the function.\n\n```js\nassert.match(code, /if\\s*\\(\\s*!titleInput\\.value\\.trim\\(\\s*\\)\\s*\\)\\s*\\{\\s*alert\\s*\\(\\s*('|\"|`)Please provide a title\\1\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 65",
      "description": "It is time to work on the final issue. If there is a to-do task with a special character like a quote inside of the name or description of the item, the application breaks. While it appears otherwise, the correct item will appear missing.  \n\nIn order to fix this, we need to create a function called `removeSpecialChars` that takes a string as input and removes all special characters.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = JSON.parse(localStorage.getItem(\"data\")) || [];\nlet currentTask = {};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst addOrUpdateTask = () => {\n   if(!titleInput.value.trim()){\n    alert(\"Please provide a title\");\n    return;\n  }\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        (tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `)\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  addOrUpdateTaskBtn.innerText = \"Add Task\";\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nif (taskData.length) {\n  updateTaskContainer();\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should define a `removeSpecialChars` function.\n\n```js\nassert.isFunction(removeSpecialChars);\n```\n\nYour `removeSpecialChars` should not remove spaces.\n\n```js\nassert.strictEqual(removeSpecialChars(\"The quick brown fox jumps over the lazy dog\"),\"The quick brown fox jumps over the lazy dog\");\n```\n\nYour `removeSpecialChars` should remove single quotes. \n\n```js\nassert.strictEqual(removeSpecialChars(\"quincy's dance party\"),\"quincys dance party\");\n```\n\nYour `removeSpecialChars` should remove double quotes. \n\n```js\nassert.strictEqual(removeSpecialChars(`\"Literature\" report due`),\"Literature report due\");\n```\n\nYour `removeSpecialChars` should remove underscores. \n\n```js\nassert.strictEqual(removeSpecialChars(`Naomi has a __gif__ folder`),\"Naomi has a gif folder\");\n```"
    },
    {
      "title": "Step 66",
      "description": "Call `removeSpecialChars` on the `title`, and `description` properties in your `taskObj`. For the `id` property, only call it on the `titleInput.value` part of the property value.\n\nThis will remove issues with broken task data. \n\nWith that you have completed the project.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Learn localStorage by Building a Todo App</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <main>\n    <h1>Todo App</h1>\n    <div class=\"todo-app\">\n      <button id=\"open-task-form-btn\" class=\"btn large-btn\">\n        Add New Task\n      </button>\n      <form class=\"task-form hidden\" id=\"task-form\">\n        <div class=\"task-form-header\">\n          <button id=\"close-task-form-btn\" class=\"close-task-form-btn\" type=\"button\" aria-label=\"close\">\n            <svg class=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path fill=\"#F44336\" d=\"M21.5 4.5H26.501V43.5H21.5z\" transform=\"rotate(45.001 24 24)\" /><path fill=\"#F44336\" d=\"M21.5 4.5H26.5V43.501H21.5z\" transform=\"rotate(135.008 24 24)\" /></svg>\n          </button>\n        </div>\n        <div class=\"task-form-body\">\n          <label class=\"task-form-label\" for=\"title-input\">Title</label>\n          <input required type=\"text\" class=\"form-control\" id=\"title-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"date-input\">Date</label>\n          <input type=\"date\" class=\"form-control\" id=\"date-input\" value=\"\" />\n          <label class=\"task-form-label\" for=\"description-input\">Description</label>\n          <textarea class=\"form-control\" id=\"description-input\" cols=\"30\" rows=\"5\"></textarea>\n        </div>\n        <div class=\"task-form-footer\">\n          <button id=\"add-or-update-task-btn\" class=\"btn large-btn\" type=\"submit\">\n            Add Task\n          </button>\n        </div>\n      </form>\n      <dialog id=\"confirm-close-dialog\">\n        <form method=\"dialog\">\n          <p class=\"discard-message-text\">Discard unsaved changes?</p>\n          <div class=\"confirm-close-dialog-btn-container\">\n            <button id=\"cancel-btn\" class=\"btn\">\n              Cancel\n            </button>\n            <button id=\"discard-btn\" class=\"btn\">\n              Discard\n            </button>\n          </div>\n        </form>\n      </dialog>\n      <div id=\"tasks-container\"></div>\n    </div>\n  </main>\n  <script src=\"script.js\"></script>\n</body>\n\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ":root {\n  --white: #fff;\n  --light-grey: #f5f6f7;\n  --dark-grey: #0a0a23;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh1 {\n  color: var(--light-grey);\n  margin: 20px 0 40px 0;\n}\n\n.todo-app {\n  background-color: var(--white);\n  width: 300px;\n  height: 350px;\n  border: 5px solid var(--yellow);\n  border-radius: 8px;\n  padding: 15px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--dark-grey);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.large-btn {\n  width: 80%;\n  font-size: 1.2rem;\n  align-self: center;\n  justify-self: center;\n}\n\n.close-task-form-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n}\n\n.close-icon {\n  width: 20px;\n  height: 20px;\n}\n\n.task-form {\n  display: flex;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: var(--white);\n  border-radius: 5px;\n  padding: 15px;\n  width: 300px;\n  height: 350px;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.task-form-header {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.task-form-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n}\n\n.task-form-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.task-form-label,\n#title-input,\n#date-input,\n#description-input {\n  display: block;\n}\n\n.task-form-label {\n  margin-bottom: 5px;\n  font-size: 1.3rem;\n  font-weight: bold;\n}\n\n#title-input,\n#date-input,\n#description-input {\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 2px;\n}\n\n#confirm-close-dialog {\n  padding: 10px;\n  margin: 10px auto;\n  border-radius: 15px;\n}\n\n.confirm-close-dialog-btn-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.discard-message-text {\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n#tasks-container {\n  height: 100%;\n  overflow-y: auto;\n}\n\n.task {\n  margin: 5px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n@media (min-width: 576px) {\n  .todo-app,\n  .task-form {\n    width: 400px;\n    height: 450px;\n  }\n\n  .task-form-label {\n    font-size: 1.5rem;\n  }\n\n  #title-input,\n  #date-input {\n    height: 2rem;\n  }\n\n  #title-input,\n  #date-input,\n  #description-input {\n    padding: 5px;\n    margin-bottom: 20px;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const taskForm = document.getElementById(\"task-form\");\nconst confirmCloseDialog = document.getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document.getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document.getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document.getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document.getElementById(\"cancel-btn\");\nconst discardBtn = document.getElementById(\"discard-btn\");\nconst tasksContainer = document.getElementById(\"tasks-container\");\nconst titleInput = document.getElementById(\"title-input\");\nconst dateInput = document.getElementById(\"date-input\");\nconst descriptionInput = document.getElementById(\"description-input\");\n\nconst taskData = JSON.parse(localStorage.getItem(\"data\")) || [];\nlet currentTask = {};\n\nconst removeSpecialChars = (val) => {\n  return val.trim().replace(/[^A-Za-z0-9\\-\\s]/g, '')\n}\n\nconst addOrUpdateTask = () => {\n   if(!titleInput.value.trim()){\n    alert(\"Please provide a title\");\n    return;\n  }\n  const dataArrIndex = taskData.findIndex((item) => item.id === currentTask.id);\n  --fcc-editable-region--\n  const taskObj = {\n    id: `${titleInput.value.toLowerCase().split(\" \").join(\"-\")}-${Date.now()}`,\n    title: titleInput.value,\n    date: dateInput.value,\n    description: descriptionInput.value,\n  };\n  --fcc-editable-region--\n\n  if (dataArrIndex === -1) {\n    taskData.unshift(taskObj);\n  } else {\n    taskData[dataArrIndex] = taskObj;\n  }\n\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n  updateTaskContainer()\n  reset()\n};\n\nconst updateTaskContainer = () => {\n  tasksContainer.innerHTML = \"\";\n\n  taskData.forEach(\n    ({ id, title, date, description }) => {\n        (tasksContainer.innerHTML += `\n        <div class=\"task\" id=\"${id}\">\n          <p><strong>Title:</strong> ${title}</p>\n          <p><strong>Date:</strong> ${date}</p>\n          <p><strong>Description:</strong> ${description}</p>\n          <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n          <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> \n        </div>\n      `)\n    }\n  );\n};\n\n\nconst deleteTask = (buttonEl) => {\n  const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  buttonEl.parentElement.remove();\n  taskData.splice(dataArrIndex, 1);\n  localStorage.setItem(\"data\", JSON.stringify(taskData));\n}\n\nconst editTask = (buttonEl) => {\n    const dataArrIndex = taskData.findIndex(\n    (item) => item.id === buttonEl.parentElement.id\n  );\n\n  currentTask = taskData[dataArrIndex];\n\n  titleInput.value = currentTask.title;\n  dateInput.value = currentTask.date;\n  descriptionInput.value = currentTask.description;\n\n  addOrUpdateTaskBtn.innerText = \"Update Task\";\n\n  taskForm.classList.toggle(\"hidden\");  \n}\n\nconst reset = () => {\n  addOrUpdateTaskBtn.innerText = \"Add Task\";\n  titleInput.value = \"\";\n  dateInput.value = \"\";\n  descriptionInput.value = \"\";\n  taskForm.classList.toggle(\"hidden\");\n  currentTask = {};\n}\n\nif (taskData.length) {\n  updateTaskContainer();\n}\n\nopenTaskFormBtn.addEventListener(\"click\", () =>\n  taskForm.classList.toggle(\"hidden\")\n);\n\ncloseTaskFormBtn.addEventListener(\"click\", () => {\n  const formInputsContainValues = titleInput.value || dateInput.value || descriptionInput.value;\n  const formInputValuesUpdated = titleInput.value !== currentTask.title || dateInput.value !== currentTask.date || descriptionInput.value !== currentTask.description;\n\n  if (formInputsContainValues && formInputValuesUpdated) {\n    confirmCloseDialog.showModal();\n  } else {\n    reset();\n  }\n});\n\ncancelBtn.addEventListener(\"click\", () => confirmCloseDialog.close());\n\ndiscardBtn.addEventListener(\"click\", () => {\n  confirmCloseDialog.close();\n  reset()\n});\n\ntaskForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  addOrUpdateTask();\n});"
        }
      ],
      "testCode": "You should call `removeSpecialChars` on `titleInput.value` when assigning the `id`.\n\n```js\nassert.match(code, /\\s*id:\\s*`\\$\\{removeSpecialChars\\(titleInput\\.value\\)\\.toLowerCase\\(\\s*\\)\\.split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\.join\\(\\s*('|\")-\\2\\s*\\)\\}-\\$\\{Date\\.now\\(\\s*\\)\\}`\\s*/);\n```\n\nYou should call `removeSpecialChars` on `titleInput.value` when assigning the `title`.\n\n```js\nassert.match(code, /\\s*title:\\s*removeSpecialChars\\(titleInput\\.value\\)\\s*/);\n```\n\nYou should call `removeSpecialChars` on `descriptionInput.value` when assigning the `description`.\n\n```js\nassert.match(code, /\\s*description:\\s*removeSpecialChars\\(descriptionInput\\.value\\)\\s*/);\n```"
    }
  ]
}