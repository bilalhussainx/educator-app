{
  "section": {
    "id": "06-quality-assurance",
    "name": "06-quality-assurance"
  },
  "challenges": [
    {
      "id": "589fc832f9fc0f352b528e78",
      "title": "Announce New Users",
      "challengeType": 2,
      "dashedName": "announce-new-users",
      "description": "Many chat rooms are able to announce when a user connects or disconnects and then display that to all of the connected users in the chat. Seeing as though you already are emitting an event on connect and disconnect, you will just have to modify this event to support such a feature. The most logical way of doing so is sending 3 pieces of data with the event: the username of the user who connected/disconnected, the current user count, and if that username connected or disconnected.\n\nChange the event name to `'user'`, and pass an object along containing the fields `username`, `currentUsers`, and `connected` (to be `true` in case of connection, or `false` for disconnection of the user sent). Be sure to change both `'user count'` events and set the disconnect one to send `false` for the field `connected` instead of `true` like the event emitted on connect.\n\n```js\nio.emit('user', {\n  username: socket.request.user.username,\n  currentUsers,\n  connected: true\n});\n```\n\nNow your client will have all the necessary information to correctly display the current user count and announce when a user connects or disconnects! To handle this event on the client side we should listen for `'user'`, then update the current user count by using jQuery to change the text of `#num-users` to `'{NUMBER} users online'`, as well as append a `<li>` to the unordered list with id `messages` with `'{NAME} has {joined/left} the chat.'`.\n\nAn implementation of this could look like the following:\n\n```js\nsocket.on('user', data => {\n  $('#num-users').text(data.currentUsers + ' users online');\n  let message =\n    data.username +\n    (data.connected ? ' has joined the chat.' : ' has left the chat.');\n  $('#messages').append($('<li>').html('<b>' + message + '</b>'));\n});\n```\n\nSubmit your page when you think you've got it right. If you're running into errors, you can check out <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135/3#announce-new-users-10\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">the project completed up to this point </a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Event `'user'` should be emitted with `username`, `currentUsers`, and `connected`.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  // Regex is lenient to match both `username` and `name` as the key on purpose.\n  assert.match(\n    data,\n    /io.emit.*('|\")user\\1.*name.*currentUsers.*connected/s,\n    'You should have an event emitted named user sending name, currentUsers, and connected'\n  );\n}"
        },
        {
          "text": "Client should properly handle and display the new data from event `'user'`.",
          "testCode": "async () => {\n  const url = new URL(\"/public/client.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /socket.on.*('|\")user\\1[^]*num-users/s,\n    'You should change the text of \"#num-users\" within on your client within the \"user\" event listener to show the current users connected'\n  );\n  assert.match(\n    data,\n    /socket.on.*('|\")user\\1[^]*messages.*li/s,\n    'You should append a list item to \"#messages\" on your client within the \"user\" event listener to announce a user came or went'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301546,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\announce-new-users.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f70df9fc0f352b528e68",
      "title": "Authentication Strategies",
      "challengeType": 2,
      "dashedName": "authentication-strategies",
      "description": "A strategy is a way of authenticating a user. You can use a strategy for allowing users to authenticate based on locally saved information (if you have them register first) or from a variety of providers such as Google or GitHub. For this project, we will use Passport middleware. Passport provides a comprehensive set of strategies that support authentication using a username and password, GitHub, Google, and more.\n\n`passport-local@~1.0.0` has already been added as a dependency. Add it to your server as follows:\n\n```javascript\nconst LocalStrategy = require('passport-local');\n```\n\nTell passport to **use** an instantiated `LocalStrategy` object with a few settings defined. Make sure this (as well as everything from this point on) is encapsulated in the database connection since it relies on it!:\n\n```javascript\npassport.use(new LocalStrategy((username, password, done) => {\n  myDataBase.findOne({ username: username }, (err, user) => {\n    console.log(`User ${username} attempted to log in.`);\n    if (err) return done(err);\n    if (!user) return done(null, false);\n    if (password !== user.password) return done(null, false);\n    return done(null, user);\n  });\n}));\n```\n\nThis is defining the process to use when you try to authenticate someone locally. First, it tries to find a user in your database with the username entered. Then, it checks for the password to match. Finally, if no errors have popped up that you checked for (e.g. an incorrect password), the `user` object is returned and they are authenticated.\n\nMany strategies are set up using different settings. Generally, it is easy to set it up based on the README in that strategy's repository. A good example of this is the GitHub strategy where you don't need to worry about a username or password because the user will be sent to GitHub's auth page to authenticate. As long as they are logged in and agree then GitHub returns their profile for you to use.\n\nIn the next step, you will set up how to actually call the authentication strategy to validate a user based on form data.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#authentication-strategies-6\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Passport-local should be a dependency.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'passport-local',\n    'Your project should list \"passport-local \" as a dependency'\n  );\n}"
        },
        {
          "text": "Passport-local should be correctly required and set up.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require.*(\"|')passport-local(\"|')/,\n    'You should have required passport-local'\n  );\n  assert.match(\n    data,\n    /new LocalStrategy/,\n    'You should have told passport to use a new strategy'\n  );\n  assert.match(\n    data,\n    /findOne/,\n    'Your new local strategy should use the findOne query to find a username based on the inputs'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301547,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-strategies.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589fc831f9fc0f352b528e77",
      "title": "Authentication with Socket.IO",
      "challengeType": 2,
      "dashedName": "authentication-with-socket-io",
      "description": "Currently, you cannot determine who is connected to your web socket. While `req.user` contains the user object, that's only when your user interacts with the web server, and with web sockets you have no `req` (request) and therefore no user data. One way to solve the problem of knowing who is connected to your web socket is by parsing and decoding the cookie that contains the passport session then deserializing it to obtain the user object. Luckily, there is a package on NPM just for this that turns a once complex task into something simple!\n\n`passport.socketio@~3.7.0`, `connect-mongo@~3.2.0`, and `cookie-parser@~1.4.5` have already been added as dependencies. Require them as `passportSocketIo`, `MongoStore`, and `cookieParser` respectively. Also, we need to initialize a new memory store, from `express-session` which we previously required. It should look like this:\n\n```js\nconst MongoStore = require('connect-mongo')(session);\nconst URI = process.env.MONGO_URI;\nconst store = new MongoStore({ url: URI });\n```\n\nNow we just have to tell Socket.IO to use it and set the options. Be sure this is added before the existing socket code and not in the existing connection listener. For your server, it should look like this:\n\n```js\nio.use(\n  passportSocketIo.authorize({\n    cookieParser: cookieParser,\n    key: 'express.sid',\n    secret: process.env.SESSION_SECRET,\n    store: store,\n    success: onAuthorizeSuccess,\n    fail: onAuthorizeFail\n  })\n);\n```\n\nNote that configuring Passport authentication for Socket.IO is very similar to the way we configured the `session` middleware for the API. This is because they are meant to use the same authentication method — get the session id from a cookie and validate it.\n\nPreviously, when we configured the `session` middleware, we didn't explicitly set the cookie name for session (`key`). This is because the `session` package was using the default value. Now that we've added another package which needs access to the same value from the cookies, we need to explicitly set the `key` value in both configuration objects.\n\nBe sure to add the `key` with the cookie name to the `session` middleware that matches the Socket.IO key. Also, add the `store` reference to the options, near where we set `saveUninitialized: true`. This is necessary to tell Socket.IO which session to relate to.\n\n<hr>\n\nNow, define the `success`, and `fail` callback functions:\n\n```js\nfunction onAuthorizeSuccess(data, accept) {\n  console.log('successful connection to socket.io');\n\n  accept(null, true);\n}\n\nfunction onAuthorizeFail(data, message, error, accept) {\n  if (error) throw new Error(message);\n  console.log('failed connection to socket.io:', message);\n  accept(null, false);\n}\n```\n\nThe user object is now accessible on your socket object as `socket.request.user`. For example, now you can add the following:\n\n```js\nconsole.log('user ' + socket.request.user.username + ' connected');\n```\n\nIt will log to the server console who has connected!\n\nSubmit your page when you think you've got it right. If you're running into errors, you can  <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#authentication-with-socketio-9\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`passport.socketio` should be a dependency.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'passport.socketio',\n    'Your project should list \"passport.socketio\" as a dependency'\n  );\n}"
        },
        {
          "text": "`cookie-parser` should be a dependency.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'cookie-parser',\n    'Your project should list \"cookie-parser\" as a dependency'\n  );\n}"
        },
        {
          "text": "passportSocketIo should be properly required.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require\\((['\"])passport\\.socketio\\1\\)/gi,\n    'You should correctly require and instantiate \"passport.socketio\"'\n  );\n}"
        },
        {
          "text": "passportSocketIo should be properly setup.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /io\\.use\\(\\s*\\w+\\.authorize\\(/,\n    'You should register \"passport.socketio\" as socket.io middleware and provide it correct options'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301548,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\authentication-with-socket.io.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589690e6f9fc0f352b528e6e",
      "title": "Clean Up Your Project with Modules",
      "challengeType": 2,
      "dashedName": "clean-up-your-project-with-modules",
      "description": "Right now, everything you have is in your `server.js` file. This can lead to hard to manage code that isn't very expandable. Create 2 new files: `routes.js` and `auth.js`\n\nBoth should start with the following code:\n\n```js\nmodule.exports = function (app, myDataBase) {\n\n}\n```\n\nNow, in the top of your server file, require these files like so: `const routes = require('./routes.js');` Right after you establish a successful connection with the database, instantiate each of them like so: `routes(app, myDataBase)`\n\nFinally, take all of the routes in your server and paste them into your new files, and remove them from your server file. Also take the `ensureAuthenticated` function, since it was specifically created for routing. Now, you will have to correctly add the dependencies in which are used, such as `const passport = require('passport');`, at the very top, above the export line in your `routes.js` file.\n\nKeep adding them until no more errors exist, and your server file no longer has any routing (**except for the route in the catch block**)!\n\nDo the same thing in your `auth.js` file with all of the things related to authentication such as the serialization and the setting up of the local strategy and erase them from your server file. Be sure to add the dependencies in and call `auth(app, myDataBase)` in the server in the same spot.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#clean-up-your-project-with-modules-2\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out an example of the completed project</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Modules should be present.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require\\s*\\(('|\")\\.\\/routes(\\.js)?\\1\\)/gi,\n    'You should have required your new files'\n  );\n  assert.match(\n    data,\n    /client\\s*\\.db[^]*routes/gi,\n    'Your new modules should be called after your connection to the database'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301549,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\clean-up-your-project-with-modules.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589fc831f9fc0f352b528e75",
      "title": "Communicate by Emitting",
      "challengeType": 2,
      "dashedName": "communicate-by-emitting",
      "description": "<dfn>Emit</dfn> is the most common way of communicating you will use. When you emit something from the server to 'io', you send an event's name and data to all the connected sockets. A good example of this concept would be emitting the current count of connected users each time a new user connects!\n\nStart by adding a variable to keep track of the users, just before where you are currently listening for connections.\n\n```js\nlet currentUsers = 0;\n```\n\nNow, when someone connects, you should increment the count before emitting the count. So, you will want to add the incrementer within the connection listener.\n\n```js\n++currentUsers;\n```\n\nFinally, after incrementing the count, you should emit the event (still within the connection listener). The event should be named 'user count', and the data should just be the `currentUsers`.\n\n```js\nio.emit('user count', currentUsers);\n```\n\nNow, you can implement a way for your client to listen for this event! Similar to listening for a connection on the server, you will use the `on` keyword.\n\n```js\nsocket.on('user count', function(data) {\n  console.log(data);\n});\n```\n\nNow, try loading up your app, authenticate, and you should see in your client console '1' representing the current user count! Try loading more clients up, and authenticating to see the number go up.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#communicate-by-emitting-7\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`currentUsers` should be defined.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /currentUsers/s,\n    'You should have variable currentUsers defined'\n  );\n}"
        },
        {
          "text": "Server should emit the current user count at each new connection.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /io.emit.*('|\")user count('|\").*currentUsers/s,\n    'You should emit \"user count\" with data currentUsers'\n  );\n}"
        },
        {
          "text": "Your client should be listening for `'user count'` event.",
          "testCode": "async () => {\n  const url = new URL(\"/public/client.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /socket.on.*('|\")user count('|\")/s,\n    'Your client should be connection to server with the connection defined as socket'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301550,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\communicate-by-emitting.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f70df9fc0f352b528e6a",
      "title": "Create New Middleware",
      "challengeType": 2,
      "dashedName": "create-new-middleware",
      "description": "As is, any user can just go to `/profile` whether they have authenticated or not by typing in the URL. You want to prevent this by checking if the user is authenticated first before rendering the profile page. This is the perfect example of when to create a middleware.\n\nThe challenge here is creating the middleware function `ensureAuthenticated(req, res, next)`, which will check if a user is authenticated by calling Passport's `isAuthenticated` method on the `request` which checks if `req.user` is defined. If it is, then `next()` should be called. Otherwise, you can just respond to the request with a redirect to your homepage to login.\n\nAn implementation of this middleware is:\n\n```javascript\nfunction ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.redirect('/');\n};\n```\n\nCreate the above middleware function, then pass `ensureAuthenticated` as middleware to requests for the profile page before the argument to the GET request:\n\n```javascript\napp\n .route('/profile')\n .get(ensureAuthenticated, (req,res) => {\n    res.render('profile');\n });\n```\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#create-new-middleware-8\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "The middleware `ensureAuthenticated` should be implemented and attached to the `/profile` route.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /ensureAuthenticated[^]*req.isAuthenticated/,\n    'Your ensureAuthenticated middleware should be defined and utilize the req.isAuthenticated function'\n  );\n  assert.match(\n    data,\n    /profile[^]*get[^]*ensureAuthenticated/,\n    'Your ensureAuthenticated middleware should be attached to the /profile route'\n  );\n}"
        },
        {
          "text": "An unauthenticated GET request to `/profile` should correctly redirect to `/`.",
          "testCode": "async () => {\n  const url = new URL(\"/profile\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /Home page/,\n    'An attempt to go to the profile at this point should redirect to the homepage since we are not logged in'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301551,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\create-new-middleware.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589fc831f9fc0f352b528e76",
      "title": "Handle a Disconnect",
      "challengeType": 2,
      "dashedName": "handle-a-disconnect",
      "description": "You may notice that up to now you have only been increasing the user count. Handling a user disconnecting is just as easy as handling the initial connect, except you have to listen for it on each socket instead of on the whole server.\n\nTo do this, add another listener inside the existing `'connect'` listener that listens for `'disconnect'` on the socket with no data passed through. You can test this functionality by just logging that a user has disconnected to the console.\n\n```js\nsocket.on('disconnect', () => {\n  /*anything you want to do on disconnect*/\n});\n```\n\nTo make sure clients continuously have the updated count of current users, you should decrease `currentUsers` by 1 when the disconnect happens then emit the `'user count'` event with the updated count.\n\n**Note:** Just like `'disconnect'`, all other events that a socket can emit to the server should be handled within the connecting listener where we have 'socket' defined.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#handle-a-disconnect-8\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Server should handle the event disconnect from a socket.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(data, /socket.on.*('|\")disconnect('|\")/s, '');\n}"
        },
        {
          "text": "Your client should be listening for `'user count'` event.",
          "testCode": "async () => {\n  const url = new URL(\"/public/client.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /socket.on.*('|\")user count('|\")/s,\n    'Your client should be connection to server with the connection defined as socket'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301552,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\handle-a-disconnect.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "58a25c98f9fc0f352b528e7f",
      "title": "Hashing Your Passwords",
      "challengeType": 2,
      "dashedName": "hashing-your-passwords",
      "description": "Going back to the information security section, you may remember that storing plaintext passwords is *never* okay. Now it is time to implement BCrypt to solve this issue.\n\n`bcrypt@~5.0.0` has already been added as a dependency, so require it in your server. You will need to handle hashing in 2 key areas: where you handle registering/saving a new account, and when you check to see that a password is correct on login.\n\nCurrently on your registration route, you insert a user's plaintext password into the database like so: `password: req.body.password`. Hash the passwords instead by adding the following before your database logic: `const hash = bcrypt.hashSync(req.body.password, 12);`, and replacing the `req.body.password` in the database saving with just `password: hash`.\n\nOn your authentication strategy, you check for the following in your code before completing the process: `if (password !== user.password) return done(null, false);`. After making the previous changes, now `user.password` is a hash. Before making a change to the existing code, notice how the statement is checking if the password is **not** equal then return non-authenticated. With this in mind, change that code to look as follows to properly check the password entered against the hash:\n\n```js\nif (!bcrypt.compareSync(password, user.password)) { \n  return done(null, false);\n}\n```\n\nThat is all it takes to implement one of the most important security features when you have to store passwords.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#hashing-your-passwords-1\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "BCrypt should be a dependency.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json()\n  assert.property(\n    packJson.dependencies,\n    'bcrypt',\n    'Your project should list \"bcrypt\" as a dependency'\n  );\n}"
        },
        {
          "text": "BCrypt should be correctly required and implemented.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require.*(\"|')bcrypt\\1/gi,\n    'You should have required bcrypt'\n  );\n  assert.match(\n    data,\n    /bcrypt.hashSync/gi,\n    'You should use hash the password in the registration'\n  );\n  assert.match(\n    data,\n    /bcrypt.compareSync/gi,\n    'You should compare the password to the hash in your strategy'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301553,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\hashing-your-passwords.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f70ef9fc0f352b528e6b",
      "title": "How to Put a Profile Together",
      "challengeType": 2,
      "dashedName": "how-to-put-a-profile-together",
      "description": "Now that you can ensure the user accessing the `/profile` is authenticated, you can use the information contained in `req.user` on your page.\n\nPass an object containing the property `username` and value of `req.user.username` as the second argument for the `render` method of the profile view.\n\nThen, go to your `profile.pug` view, and add the following line below the existing `h1` element, and at the same level of indentation:\n\n```pug\nh2.center#welcome Welcome, #{username}!\n```\n\nThis creates an `h2` element with the class `center` and id `welcome` containing the text `Welcome, ` followed by the username.\n\nAlso, in `profile.pug`, add a link referring to the `/logout` route, which will host the logic to unauthenticate a user:\n\n```pug\na(href='/logout') Logout\n```\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#how-to-put-a-profile-together-9\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should correctly add a Pug render variable to `/profile`.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /username:( |)req.user.username/,\n    'You should be passing the variable username with req.user.username into the render function of the profile page'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301554,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\how-to-put-a-profile-together.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f70df9fc0f352b528e69",
      "title": "How to Use Passport Strategies",
      "challengeType": 2,
      "dashedName": "how-to-use-passport-strategies",
      "description": "In the `index.pug` file supplied, there is a login form. It is hidden because of the inline JavaScript `if showLogin` with the form indented after it.\n\nIn the `res.render` for that page, add a new variable to the object, `showLogin: true`. When you refresh your page, you should then see the form! This form is set up to **POST** on `/login`. So, this is where you should set up to accept the POST request and authenticate the user.\n\nFor this challenge, you should add the route `/login` to accept a POST request. To authenticate on this route, you need to add a middleware to do so before then sending a response. This is done by just passing another argument with the middleware before with your response. The middleware to use is `passport.authenticate('local')`.\n\n`passport.authenticate` can also take some options as an argument such as `{ failureRedirect: '/' }` which is incredibly useful, so be sure to add that in as well. Add a response after using the middleware (which will only be called if the authentication middleware passes) that redirects the user to `/profile`. Add that route, as well, and make it render the view `profile.pug`.\n\nIf the authentication was successful, the user object will be saved in `req.user`.\n\nAt this point, if you enter a username and password in the form, it should redirect to the home page `/`, and the console of your server should display `'User {USERNAME} attempted to log in.'`, since we currently cannot login a user who isn't registered.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#how-to-use-passport-strategies-7\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All steps should be correctly implemented in `server.js`.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /showLogin:( |)true/,\n    'You should be passing the variable \"showLogin\" as true to your render function for the homepage'\n  );\n  assert.match(\n    data,\n    /failureRedirect:( |)('|\")\\/('|\")/,\n    'Your code should include a failureRedirect to the \"/\" route'\n  );\n  assert.match(\n    data,\n    /login[^]*post[^]*local/,\n    'You should have a route for login which accepts a POST and passport.authenticates local'\n  );\n}"
        },
        {
          "text": "A POST request to `/login` should correctly redirect to `/`.",
          "testCode": "async () => {\n  const url = new URL(\"/login\", code);\n  const res = await fetch(url, { method: 'POST' });\n  const data = await res.text();\n  assert.match(\n    data,\n    /Looks like this page is being rendered from Pug into HTML!/,\n    'A login attempt at this point should redirect to the homepage since we do not have any registered users'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301555,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\how-to-use-passport-strategies.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f70cf9fc0f352b528e67",
      "title": "Implement the Serialization of a Passport User",
      "challengeType": 2,
      "dashedName": "implement-the-serialization-of-a-passport-user",
      "description": "You are not loading an actual user object since the database is not set up. Connect to the database once, when you start the server, and keep a persistent connection for the full life-cycle of the app. To do this, add your database's connection string (for example: `mongodb+srv://<username>:<password>@cluster0-jvwxi.mongodb.net/?retryWrites=true&w=majority`) to the environment variable `MONGO_URI`. This is used in the `connection.js` file.\n\n*If you are having issues setting up a free database on MongoDB Atlas, check out this <a href=\"https://www.freecodecamp.org/news/get-started-with-mongodb-atlas/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">tutorial</a>.*\n\nNow you want to connect to your database, then start listening for requests. The purpose of this is to not allow requests before your database is connected or if there is a database error. To accomplish this, encompass your serialization and app routes in the following code:\n\n```javascript\nmyDB(async client => {\n  const myDataBase = await client.db('database').collection('users');\n\n  // Be sure to change the title\n  app.route('/').get((req, res) => {\n    // Change the response to render the Pug template\n    res.render('index', {\n      title: 'Connected to Database',\n      message: 'Please login'\n    });\n  });\n\n  // Serialization and deserialization here...\n\n  // Be sure to add this...\n}).catch(e => {\n  app.route('/').get((req, res) => {\n    res.render('index', { title: e, message: 'Unable to connect to database' });\n  });\n});\n// app.listen out here...\n```\n\nBe sure to uncomment the `myDataBase` code in `deserializeUser`, and edit your `done(null, null)` to include the `doc`.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#implement-the-serialization-of-a-passport-user-5\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Database connection should be present.",
          "testCode": "async () => {\n  const url = new URL(\"/\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /Connected to Database/gi,\n    'You successfully connected to the database!'\n  );\n}"
        },
        {
          "text": "Deserialization should now be correctly using the DB and `done(null, null)` should be called with the `doc`.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /null,\\s*doc/gi,\n    'The callback in deserializeUser of (null, null) should be altered to (null, doc)'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301556,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implement-the-serialization-of-a-passport-user.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589a69f5f9fc0f352b528e71",
      "title": "Implementation of Social Authentication II",
      "challengeType": 2,
      "dashedName": "implementation-of-social-authentication-ii",
      "description": "The last part of setting up your GitHub authentication is to create the strategy itself. `passport-github@~1.1.0` has already been added as a dependency, so require it in your `auth.js` file as `GitHubStrategy` like this: `const GitHubStrategy = require('passport-github').Strategy;`. Do not forget to require and configure `dotenv` to use your environment variables.\n\nTo set up the GitHub strategy, you have to tell Passport to use an instantiated `GitHubStrategy`, which accepts 2 arguments: an object (containing `clientID`, `clientSecret`, and `callbackURL`) and a function to be called when a user is successfully authenticated, which will determine if the user is new and what fields to save initially in the user's database object. This is common across many strategies, but some may require more information as outlined in that specific strategy's GitHub README. For example, Google requires a *scope* as well which determines what kind of information your request is asking to be returned and asks the user to approve such access.\n\nThe current strategy you are implementing authenticates users using a GitHub account and OAuth 2.0 tokens. The client ID and secret obtained when creating an application are supplied as options when creating the strategy. The strategy also requires a `verify` callback, which receives the access token and optional refresh token, as well as `profile` which contains the authenticated user's GitHub profile. The `verify` callback must call `cb` providing a user to complete authentication.\n\nHere's how your new strategy should look at this point:\n\n```js\npassport.use(new GitHubStrategy({\n  clientID: process.env.GITHUB_CLIENT_ID,\n  clientSecret: process.env.GITHUB_CLIENT_SECRET,\n  callbackURL: /*INSERT CALLBACK URL ENTERED INTO GITHUB HERE*/\n},\n  function(accessToken, refreshToken, profile, cb) {\n    console.log(profile);\n    //Database logic here with callback containing your user object\n  }\n));\n```\n\nYour authentication won't be successful yet, and it will actually throw an error without the database logic and callback, but it should log your GitHub profile to your console if you try it!\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#implementation-of-social-authentication-ii-4\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`passport-github` dependency should be added.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'passport-github',\n    'Your project should list \"passport-github\" as a dependency'\n  );\n}"
        },
        {
          "text": "`passport-github` should be required.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/auth.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require.*(\"|')passport-github(\"|')/gi,\n    'You should have required passport-github'\n  );\n}"
        },
        {
          "text": "GitHub strategy should be setup correctly thus far.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/auth.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /passport\\.use.*new GitHubStrategy/gis,\n    'Passport should use a new GitHubStrategy'\n  );\n  assert.match(\n    data,\n    /callbackURL:\\s*(\"|').*(\"|')/gi,\n    'You should have a callbackURL'\n  );\n  assert.match(\n    data,\n    /process\\.env(\\.GITHUB_CLIENT_SECRET|\\[(?<q>\"|')GITHUB_CLIENT_SECRET\\k<q>\\])/g,\n    'You should use process.env.GITHUB_CLIENT_SECRET'\n  );\n  assert.match(\n    data,\n    /process\\.env(\\.GITHUB_CLIENT_ID|\\[(?<q>\"|')GITHUB_CLIENT_ID\\k<q>\\])/g,\n    'You should use process.env.GITHUB_CLIENT_ID'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301557,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-ii.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589a8eb3f9fc0f352b528e72",
      "title": "Implementation of Social Authentication III",
      "challengeType": 2,
      "dashedName": "implementation-of-social-authentication-iii",
      "description": "The final part of the strategy is handling the profile returned from GitHub. We need to load the user's database object if it exists, or create one if it doesn't, and populate the fields from the profile, then return the user's object. GitHub supplies us a unique *id* within each profile which we can use to search with to serialize the user with (already implemented). Below is an example implementation you can use in your project--it goes within the function that is the second argument for the new strategy, right below where `console.log(profile);` currently is:\n\n```js\nmyDataBase.findOneAndUpdate(\n  { id: profile.id },\n  {\n    $setOnInsert: {\n      id: profile.id,\n      username: profile.username,\n      name: profile.displayName || 'John Doe',\n      photo: profile.photos[0].value || '',\n      email: Array.isArray(profile.emails)\n        ? profile.emails[0].value\n        : 'No public email',\n      created_on: new Date(),\n      provider: profile.provider || ''\n    },\n    $set: {\n      last_login: new Date()\n    },\n    $inc: {\n      login_count: 1\n    }\n  },\n  { upsert: true, new: true },\n  (err, doc) => {\n    return cb(null, doc.value);\n  }\n);\n```\n\n`findOneAndUpdate` allows you to search for an object and update it. If the object doesn't exist, it will be inserted and made available to the callback function. In this example, we always set `last_login`, increment the `login_count` by `1`, and only populate the majority of the fields when a new object (new user) is inserted. Notice the use of default values. Sometimes a profile returned won't have all the information filled out or the user will keep it private. In this case, you handle it to prevent an error.\n\nYou should be able to login to your app now. Try it!\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#implementation-of-social-authentication-iii-5\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "GitHub strategy setup should be complete.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/auth.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /GitHubStrategy[^]*myDataBase/gi,\n    'Strategy should use now use the database to search for the user'\n  );\n  assert.match(\n    data,\n    /GitHubStrategy[^]*cb/gi,\n    'Strategy should return the callback function \"cb\"'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301558,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication-iii.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589a69f5f9fc0f352b528e70",
      "title": "Implementation of Social Authentication",
      "challengeType": 2,
      "dashedName": "implementation-of-social-authentication",
      "description": "The basic path this kind of authentication will follow in your app is:\n\n1.  User clicks a button or link sending them to your route to authenticate using a specific strategy (e.g. GitHub).\n2.  Your route calls `passport.authenticate('github')` which redirects them to GitHub.\n3.  The page the user lands on, on GitHub, allows them to login if they aren't already. It then asks them to approve access to their profile from your app.\n4.  The user is then returned to your app at a specific callback url with their profile if they are approved.\n5.  They are now authenticated, and your app should check if it is a returning profile, or save it in your database if it is not.\n\nStrategies with OAuth require you to have at least a *Client ID* and a *Client Secret* which is a way for the service to verify who the authentication request is coming from and if it is valid. These are obtained from the site you are trying to implement authentication with, such as GitHub, and are unique to your app--**THEY ARE NOT TO BE SHARED** and should never be uploaded to a public repository or written directly in your code. A common practice is to put them in your `.env` file and reference them like so: `process.env.GITHUB_CLIENT_ID`. For this challenge you are going to use the GitHub strategy.\n\nFollow <a href=\"https://www.freecodecamp.org/news/how-to-set-up-a-github-oauth-application/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">these instructions</a> to obtain your *Client ID and Secret* from GitHub. Set the homepage URL to your homepage (**not the project code's URL**), and set the callback URL to the same homepage URL with `/auth/github/callback` appended to the end. Save the client ID and your client secret in your project's `.env` file as `GITHUB_CLIENT_ID` and `GITHUB_CLIENT_SECRET`.\n\nIn your `routes.js` file, add `showSocialAuth: true` to the homepage route, after `showRegistration: true`. Now, create 2 routes accepting GET requests: `/auth/github` and `/auth/github/callback`. The first should only call passport to authenticate `'github'`. The second should call passport to authenticate `'github'` with a failure redirect to `/`, and then if that is successful redirect to `/profile` (similar to your last project).\n\nAn example of how `/auth/github/callback` should look is similar to how you handled a normal login:\n\n```js\napp.route('/login')\n  .post(passport.authenticate('local', { failureRedirect: '/' }), (req,res) => {\n    res.redirect('/profile');\n  });\n```\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#implementation-of-social-authentication-3\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Route `/auth/github` should be correct.",
          "testCode": "async () => {\n  try {\n    const res = await fetch(code + '/_api/routes.js');\n    if (res.ok) {\n      const data = await res.text();\n      assert.match(\n          data.replace(/\\s/g, ''),\n          /passport.authenticate.*?github/g,\n          'Route auth/github should only call passport.authenticate with github'\n        );\n    } else {\n      throw new Error(res.statusText);\n    }\n    const res2 = await fetch(code + '/_api/app-stack');\n    if (res2.ok) {\n      const data2 = JSON.parse(await res2.json());\n      const dataLayer = data2.find(layer => layer?.route?.path === '/auth/github');\n      assert.deepInclude(dataLayer?.route, { methods: {get: true}, path: \"/auth/github\"});\n      assert.deepInclude(dataLayer?.route?.stack?.[0], {method: \"get\", name: \"authenticate\"});\n    } else {\n      throw new Error(res2.statusText);\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n}"
        },
        {
          "text": "Route `/auth/github/callback` should be correct.",
          "testCode": "async () => {\n  try {\n    const res = await fetch(code + '/_api/routes.js');\n    if (res.ok) {\n      const data = await res.text();\n      assert.match(\n        data.replace(/\\s/g, ''),\n        /failureRedirect:(\"|')\\/\\1/g,\n        'Route auth/github/callback should accept a get request and call passport.authenticate for github with a failure redirect to home'\n      );\n    } else {\n      throw new Error(res.statusText);\n    }\n    const res2 = await fetch(code + '/_api/app-stack');\n    if (res2.ok) {\n      const data2 = JSON.parse(await res2.json());\n      const dataLayer = data2.find(layer => layer?.route?.path === '/auth/github/callback');\n      assert.deepInclude(dataLayer?.route, { methods: {get: true}, path: \"/auth/github/callback\"});\n      assert.deepInclude(dataLayer?.route?.stack?.[0], {method: \"get\", name: \"authenticate\"});\n    } else {\n      throw new Error(res2.statusText);\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301559,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\implementation-of-social-authentication.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "58965611f9fc0f352b528e6c",
      "title": "Logging a User Out",
      "challengeType": 2,
      "dashedName": "logging-a-user-out",
      "description": "Creating the logout logic is easy. The route should just unauthenticate the user, and redirect to the home page instead of rendering any view.\n\nIn passport, unauthenticating a user is as easy as just calling `req.logout()` before redirecting. Add this `/logout` route to do that:\n\n```js\napp.route('/logout')\n  .get((req, res) => {\n    req.logout();\n    res.redirect('/');\n});\n```\n\nYou may have noticed that you are not handling missing pages (404). The common way to handle this in Node is with the following middleware. Go ahead and add this in after all your other routes:\n\n```js\napp.use((req, res, next) => {\n  res.status(404)\n    .type('text')\n    .send('Not Found');\n});\n```\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#logging-a-user-out-10\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`req.logout()` should be called in your `/logout` route.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /req.logout/gi,\n    'You should be calling req.logout() in your /logout route'\n  );\n}"
        },
        {
          "text": "`/logout` should redirect to the home page.",
          "testCode": "async () => {\n  const url = new URL(\"/logout\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /Home page/gi,\n    'When a user logs out they should be redirected to the homepage'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301560,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\logging-a-user-out.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "58966a17f9fc0f352b528e6d",
      "title": "Registration of New Users",
      "challengeType": 2,
      "dashedName": "registration-of-new-users",
      "description": "Now you need to allow a new user on your site to register an account. In the `res.render` for the home page add a new variable to the object passed along - `showRegistration: true`. When you refresh your page, you should then see the registration form that was already created in your `index.pug` file. This form is set up to **POST** on `/register`, so create that route and have it add the user object to the database by following the logic below.\n\nThe logic of the registration route should be as follows:\n\n1. Register the new user\n2. Authenticate the new user\n3. Redirect to `/profile`\n\nThe logic of step 1 should be as follows:\n\n1. Query database with `findOne`\n2. If there is an error, call `next` with the error\n3. If a user is returned, redirect back to home\n4. If a user is not found and no errors occur, then `insertOne` into the database with the username and password. As long as no errors occur there, call `next` to go to step 2, authenticating the new user, which you already wrote the logic for in your `POST /login` route.\n\n```js\napp.route('/register')\n  .post((req, res, next) => {\n    myDataBase.findOne({ username: req.body.username }, (err, user) => {\n      if (err) {\n        next(err);\n      } else if (user) {\n        res.redirect('/');\n      } else {\n        myDataBase.insertOne({\n          username: req.body.username,\n          password: req.body.password\n        },\n          (err, doc) => {\n            if (err) {\n              res.redirect('/');\n            } else {\n              // The inserted document is held within\n              // the ops property of the doc\n              next(null, doc.ops[0]);\n            }\n          }\n        )\n      }\n    })\n  },\n    passport.authenticate('local', { failureRedirect: '/' }),\n    (req, res, next) => {\n      res.redirect('/profile');\n    }\n  );\n```\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#registration-of-new-users-11\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.\n\n**NOTE:** From this point onwards, issues can arise relating to the use of the *picture-in-picture* browser. If you are using an online IDE which offers a preview of the app within the editor, it is recommended to open this preview in a new tab.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should have a `/register` route and display a registration form on the home page.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /showRegistration:( |)true/gi,\n    'You should be passing the variable showRegistration as true to your render function for the homepage'\n  );\n  assert.match(\n    data,\n    /register[^]*post[^]*findOne[^]*username:( |)req.body.username/gi,\n    'You should have a route that accepts a POST request on /register that queries the db with findOne and the query being username: req.body.username'\n  );\n}"
        },
        {
          "text": "Registering should work.",
          "testCode": "async () => {\n  const url = code;\n  const user = `freeCodeCampTester${Date.now()}`;\n  const xhttp = new XMLHttpRequest();\n  xhttp.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) {\n      test(this);\n    } else {\n      throw new Error(`${this.status} ${this.statusText}`);\n    }\n  };\n  xhttp.open('POST', url + '/register', true);\n  xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n  xhttp.send(`username=${user}&password=${user}`);\n  function test(xhttpRes) {\n    const data = xhttpRes.responseText;\n    assert.match(\n      data,\n      /Profile/gi,\n      'Register should work, and redirect successfully to the profile.'\n    );\n  }\n};"
        },
        {
          "text": "Login should work.",
          "testCode": "async () => {\n  const url = code;\n  const user = `freeCodeCampTester${Date.now()}`;\n  const xhttpReg = new XMLHttpRequest();\n  xhttpReg.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) {\n      login();\n    } else {\n      throw new Error(`${this.status} ${this.statusText}`);\n    }\n  };\n  xhttpReg.open('POST', url + '/register', true);\n  xhttpReg.setRequestHeader(\n    'Content-type',\n    'application/x-www-form-urlencoded'\n  );\n  xhttpReg.send(`username=${user}&password=${user}`);\n  function login() {\n    const xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        test(this);\n      } else {\n        throw new Error(`${this.status} ${this.statusText}`);\n      }\n    };\n    xhttp.open('POST', url + '/login', true);\n    xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n    xhttp.send(`username=${user}&password=${user}`);\n  }\n  function test(xhttpRes) {\n    const data = xhttpRes.responseText;\n    assert.match(\n      data,\n      /Profile/gi,\n      'Login should work if previous test was done successfully and redirect successfully to the profile.'\n    );\n    assert.match(\n      data,\n      new RegExp(user, 'g'),\n      'The profile should properly display the welcome to the user logged in'\n    );\n  }\n};"
        },
        {
          "text": "Logout should work.",
          "testCode": "$.ajax({\n    url: code + '/logout',\n    type: 'GET',\n    xhrFields: { withCredentials: true }\n  }).then(\n    (data) => {\n      assert.match(data, /Home/gi, 'Logout should redirect to home');\n    },\n    (xhr) => {\n      throw new Error(xhr.statusText);\n    }\n  );"
        },
        {
          "text": "Profile should no longer work after logout.",
          "testCode": "$.ajax({\n    url: code + '/profile',\n    type: 'GET',\n    crossDomain: true,\n    xhrFields: { withCredentials: true }\n  }).then(\n    (data) => {\n      assert.match(\n        data,\n        /Home/gi,\n        'Profile should redirect to home when we are logged out now again'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.statusText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301561,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\registration-of-new-users.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589fc832f9fc0f352b528e79",
      "title": "Send and Display Chat Messages",
      "challengeType": 2,
      "dashedName": "send-and-display-chat-messages",
      "description": "It's time you start allowing clients to send a chat message to the server to emit to all the clients! In your `client.js` file, you should see there is already a block of code handling when the message form is submitted.\n\n```js\n$('form').submit(function() {\n  /*logic*/\n});\n```\n\nWithin the form submit code, you should emit an event after you define `messageToSend` but before you clear the text box `#m`. The event should be named `'chat message'` and the data should just be `messageToSend`.\n\n```js\nsocket.emit('chat message', messageToSend);\n```\n\nNow, on your server, you should be listening to the socket for the event `'chat message'` with the data being named `message`. Once the event is received, it should emit the event `'chat message'` to all sockets using `io.emit`, sending a data object containing the `username` and `message`.\n\nIn `client.js`, you should now listen for event `'chat message'` and, when received, append a list item to `#messages` with the username, a colon, and the message!\n\nAt this point, the chat should be fully functional and sending messages across all clients!\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#send-and-display-chat-messages-11\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Server should listen for `'chat message'` and then emit it properly.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /socket.on.*('|\")chat message('|\")[^]*io.emit.*('|\")chat message('|\").*username.*message/s,\n    'Your server should listen to the socket for \"chat message\" then emit to all users \"chat message\" with name and message in the data object'\n  );\n}"
        },
        {
          "text": "Client should properly handle and display the new data from event `'chat message'`.",
          "testCode": "async () => {\n  const url = new URL(\"/public/client.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /socket.on.*('|\")chat message('|\")[^]*messages.*li/s,\n    'You should append a list item to #messages on your client within the \"chat message\" event listener to display the new message'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301562,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\send-and-display-chat-messages.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f70cf9fc0f352b528e66",
      "title": "Serialization of a User Object",
      "challengeType": 2,
      "dashedName": "serialization-of-a-user-object",
      "description": "Serialization and deserialization are important concepts in regard to authentication. To serialize an object means to convert its contents into a small *key* that can then be deserialized into the original object. This is what allows us to know who has communicated with the server without having to send the authentication data, like the username and password, at each request for a new page.\n\nTo set this up properly, you need to have a serialize function and a deserialize function. In Passport, these can be created with:\n\n```javascript\npassport.serializeUser(cb);\npassport.deserializeUser(cb);\n```\n\nThe callback function passed to `serializeUser` is called with two arguments: the full user object, and a callback used by passport. \n\nThe callback expects two arguments: An error, if any, and a unique key to identify the user that should be returned in the callback. You will use the user's `_id` in the object. This is guaranteed to be unique, as it is generated by MongoDB.\n\nSimilarly, `deserializeUser` is called with two arguments: the unique key, and a callback function.\n\nThis callback expects two arguments: An error, if any, and the full user object. To get the full user object, make a query search for a Mongo `_id`, as shown below:\n\n\n```javascript\npassport.serializeUser((user, done) => {\n  done(null, user._id);\n});\n\npassport.deserializeUser((id, done) => {\n  myDataBase.findOne({ _id: new ObjectID(id) }, (err, doc) => {\n    done(null, null);\n  });\n});\n```\n\nAdd the two functions above to your server. The `ObjectID` class comes from the `mongodb` package. `mongodb@~3.6.0` has already been added as a dependency. Declare this class with:\n\n```javascript\nconst { ObjectID } = require('mongodb');\n```\n\nThe `deserializeUser` will throw an error until you set up the database connection. So, for now, comment out the `myDatabase.findOne` call, and just call `done(null, null)` in the `deserializeUser` callback function.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#serialization-of-a-user-object-4\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should serialize the user object correctly.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /passport.serializeUser/gi,\n    'You should have created your passport.serializeUser function'\n  );\n  assert.match(\n    data,\n    /null,\\s*user._id/gi,\n    'There should be a callback in your serializeUser with (null, user._id)'\n  );\n}"
        },
        {
          "text": "You should deserialize the user object correctly.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /passport.deserializeUser/gi,\n    'You should have created your passport.deserializeUser function'\n  );\n  assert.match(\n    data,\n    /null,\\s*null/gi,\n    'There should be a callback in your deserializeUser with (null, null) for now'\n  );\n}"
        },
        {
          "text": "MongoDB should be a dependency.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'mongodb',\n    'Your project should list \"mongodb\" as a dependency'\n  );\n}"
        },
        {
          "text": "Mongodb should be properly required including the ObjectId.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require.*(\"|')mongodb\\1/gi,\n    'You should have required mongodb'\n  );\n  assert.match(\n    data,\n    /new ObjectID.*id/gi,\n    'Even though the block is commented out, you should use new ObjectID(id) for when we add the database'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301563,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\serialization-of-a-user-object.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f700f9fc0f352b528e63",
      "title": "Set up a Template Engine",
      "challengeType": 2,
      "dashedName": "set-up-a-template-engine",
      "description": "Working on these challenges will involve you writing your code using one of the following methods:\n\n- Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-advancednode/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete these challenges locally.\n- Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n\nA template engine enables you to use static template files (such as those written in *Pug*) in your app. At runtime, the template engine replaces variables in a template file with actual values which can be supplied by your server. Then it transforms the template into a static HTML file that is sent to the client. This approach makes it easier to design an HTML page and allows for displaying variables on the page without needing to make an API call from the client.\n\n`pug@~3.0.0` has already been installed, and is listed as a dependency in your `package.json` file.\n\nExpress needs to know which template engine you are using. Use the `set` method to assign `pug` as the `view engine` property's value:\n\n```javascript\napp.set('view engine', 'pug');\n```\n\nAfter that, add another `set` method that sets the `views` property of your `app` to point to the `./views/pug` directory. This tells Express to render all views relative to that directory.\n\nFinally, use `res.render()` in the route for your home page, passing `index` as the first argument. This will render the `pug` template.\n\nIf all went as planned, your app home page will no longer be blank. Instead, it will display a message indicating you've successfully rendered the Pug template!\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#set-up-a-template-engine-1\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Pug should be a dependency.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'pug',\n    'Your project should list \"pug\" as a dependency'\n  );\n}"
        },
        {
          "text": "View engine should be Pug.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/app\", code);\n  const res = await fetch(url);\n  const app = await res.json();\n  assert.equal(app?.settings?.['view engine'], \"pug\");\n}"
        },
        {
          "text": "You should set the `views` property of the application to `./views/pug`.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/app\", code);\n  const res = await fetch(url);\n  const app = await res.json();\n  assert.equal(app?.settings?.views, \"./views/pug\");\n}"
        },
        {
          "text": "Use the correct ExpressJS method to render the index page from the response.",
          "testCode": "async () => {\n  const url = new URL(\"/\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n      assert.match(\n        data,\n        /FCC Advanced Node and Express/gi,\n        'You successfully rendered the Pug template!'\n      );\n    }"
        },
        {
          "text": "Pug should be working.",
          "testCode": "async () => {\n  const url = new URL(\"/\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n      assert.match(\n        data,\n        /pug-success-message/gi,\n        'Your projects home page should now be rendered by pug with the projects .pug file unaltered'\n      );\n    }"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301564,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-a-template-engine.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f70cf9fc0f352b528e65",
      "title": "Set up Passport",
      "challengeType": 2,
      "dashedName": "set-up-passport",
      "description": "It's time to set up *Passport* so you can finally start allowing a user to register or log in to an account. In addition to Passport, you will use Express-session to handle sessions. Express-session has a ton of advanced features you can use, but for now you are just going to use the basics. Using this middleware saves the session id as a cookie in the client, and allows us to access the session data using that id on the server. This way, you keep personal account information out of the cookie used by the client to tell to your server clients are authenticated and keep the *key* to access the data stored on the server.\n\n`passport@~0.4.1` and `express-session@~1.17.1` are already installed, and are both listed as dependencies in your `package.json` file.\n\nYou will need to set up the session settings and initialize Passport. First, create the variables `session` and `passport` to require `express-session` and `passport` respectively.\n\nThen, set up your Express app to use the session by defining the following options:\n\n```javascript\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: true,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n```\n\nBe sure to add `SESSION_SECRET` to your `.env` file, and give it a random value. This is used to compute the hash used to encrypt your cookie!\n\nAfter you do all that, tell your express app to **use** `passport.initialize()` and `passport.session()`.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#set-up-passport-3\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Passport and Express-session should be dependencies.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'passport',\n    'Your project should list \"passport\" as a dependency'\n  );\n  assert.property(\n    packJson.dependencies,\n    'express-session',\n    'Your project should list \"express-session\" as a dependency'\n  );\n}"
        },
        {
          "text": "Dependencies should be correctly required.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require.*(\"|')passport(\"|')/,\n    'You should have required passport'\n  );\n  assert.match(\n    data,\n    /require.*(\"|')express-session(\"|')/,\n    'You should have required express-session'\n  );\n}"
        },
        {
          "text": "Express app should use new dependencies.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(data, /passport\\.initialize/, 'Your express app should use \"passport.initialize()\"');\n  assert.match(data, /passport\\.session/, 'Your express app should use \"passport.session()\"');\n}"
        },
        {
          "text": "Session and session secret should be correctly set up.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /secret *:\\s*process\\.env(\\.SESSION_SECRET|\\[(?<q>\"|')SESSION_SECRET\\k<q>\\])/,\n    'Your express app should have express-session set up with your secret as process.env.SESSION_SECRET'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301565,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-passport.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "589fc830f9fc0f352b528e74",
      "title": "Set up the Environment",
      "challengeType": 2,
      "dashedName": "set-up-the-environment",
      "description": "The following challenges will make use of the `chat.pug` file. So, in your `routes.js` file, add a GET route pointing to `/chat` which makes use of `ensureAuthenticated`, and renders `chat.pug`, with `{ user: req.user }` passed as an argument to the response. Now, alter your existing `/auth/github/callback` route to set the `req.session.user_id = req.user.id`, and redirect to `/chat`.\n\n`socket.io@~2.3.0` has already been added as a dependency, so require/instantiate it in your server as follows with `http` (comes built-in with Nodejs):\n\n```javascript\nconst http = require('http').createServer(app);\nconst io = require('socket.io')(http);\n```\n\nNow that the *http* server is mounted on the *express app*, you need to listen from the *http* server. Change the line with `app.listen` to `http.listen`.\n\nThe first thing needing to be handled is listening for a new connection from the client. The <dfn>on</dfn> keyword does just that- listen for a specific event. It requires 2 arguments: a string containing the title of the event that's emitted, and a function with which the data is passed through. In the case of our connection listener, use `socket` to define the data in the second argument. A socket is an individual client who is connected.\n\nTo listen for connections to your server, add the following within your database connection:\n\n```javascript\nio.on('connection', socket => {\n  console.log('A user has connected');\n});\n```\n\nNow for the client to connect, you just need to add the following to your `client.js` which is loaded by the page after you've authenticated:\n\n```js\n/*global io*/\nlet socket = io();\n```\n\nThe comment suppresses the error you would normally see since 'io' is not defined in the file. You have already added a reliable CDN to the Socket.IO library on the page in `chat.pug`.\n\nNow try loading up your app and authenticate and you should see in your server console `A user has connected`.\n\n**Note:**`io()` works only when connecting to a socket hosted on the same url/server. For connecting to an external socket hosted elsewhere, you would use `io.connect('URL');`.\n\nSubmit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#set-up-the-environment-6\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "`socket.io` should be a dependency.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/package.json\", code);\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'socket.io',\n    'Your project should list \"socket.io\" as a dependency'\n  );\n}"
        },
        {
          "text": "You should correctly require and instantiate `http` as `http`.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /http.*=.*require.*('|\")http\\1/s,\n    'Your project should list \"http\" as a dependency'\n  );\n}"
        },
        {
          "text": "You should correctly require and instantiate `socket.io` as `io`.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /io.*=.*require.*('|\")socket.io\\1.*http/s,\n    'You should correctly require and instantiate socket.io as io.'\n  );\n}"
        },
        {
          "text": "Socket.IO should be listening for connections.",
          "testCode": "async () => {\n  const url = new URL(\"/_api/server.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /io.on.*('|\")connection\\1.*socket/s,\n    'io should listen for \"connection\" and socket should be the 2nd arguments variable'\n  );\n}"
        },
        {
          "text": "Your client should connect to your server.",
          "testCode": "async () => {\n  const url = new URL(\"/public/client.js\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /socket.*=.*io/s,\n    'Your client should be connection to server with the connection defined as socket'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301566,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\set-up-the-environment.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "5895f70bf9fc0f352b528e64",
      "title": "Use a Template Engine's Powers",
      "challengeType": 2,
      "dashedName": "use-a-template-engines-powers",
      "description": "One of the greatest features of using a template engine is being able to pass variables from the server to the template file before rendering it to HTML.\n\nIn your Pug file, you're able to use a variable by referencing the variable name as `#{variable_name}` inline with other text on an element or by using an equal sign on the element without a space such as `p=variable_name` which assigns the variable's value to the p element's text.\n\nPug is all about using whitespace and tabs to show nested elements and cutting down on the amount of code needed to make a beautiful site.\n\nTake the following Pug code for example: \n \n```pug\nhead\n  script(type='text/javascript').\n    if (foo) bar(1 + 5);\nbody\n  if youAreUsingPug\n      p You are amazing\n    else\n      p Get on it!\n```\n\nThe above yields the following HTML:\n\n```html\n<head>\n  <script type=\"text/javascript\">\n    if (foo) bar(1 + 5);\n  </script>\n</head>\n<body>\n  <p>You are amazing</p>\n</body>\n```\n\nYour `index.pug` file included in your project, uses the variables `title` and `message`.\n\nPass those from your server to the Pug file by adding an object as a second argument to your `res.render` call with the variables and their values. Give the `title` a value of `Hello` and `message` a value of `Please log in`.\n\nIt should look like:\n\n```javascript\nres.render('index', { title: 'Hello', message: 'Please log in' });\n```\n\nNow refresh your page, and you should see those values rendered in your view in the correct spot as laid out in your `index.pug` file!\n\nSubmit your page when you think you've got it right. If you're running into errors, you can check out the <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#use-a-template-engines-power-2\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">project completed up to this point</a>.",
      "instructions": "",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "Pug should correctly render variables.",
          "testCode": "async () => {\n  const url = new URL(\"/\", code);\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /pug-variable(\"|')>Please log in/gi,\n    'Your projects home page should now be rendered by pug with the projects .pug file unaltered'\n  );\n}"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301567,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\advanced-node-and-express\\use-a-template-engines-powers.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "advanced-node-and-express",
        "name": "Advanced Node And Express"
      }
    },
    {
      "id": "587d824c367417b2b2512c4c",
      "title": "Assert Deep Equality with .deepEqual and .notDeepEqual",
      "challengeType": 2,
      "dashedName": "assert-deep-equality-with--deepequal-and--notdeepequal",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`deepEqual()` asserts that two objects are deep equal.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#7` in the `Equality` suite, change each `assert` to either `assert.deepEqual` or `assert.notDeepEqual` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=6').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `deepEqual` vs. `notDeepEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=6').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'deepEqual',\n        'The order of the keys does not matter'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `deepEqual` vs. `notDeepEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=6').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'notDeepEqual',\n        'The position of elements within an array does matter'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301587,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\assert-deep-equality-with-.deepequal-and-.notdeepequal.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824c367417b2b2512c4d",
      "title": "Compare the Properties of Two Elements",
      "challengeType": 2,
      "dashedName": "compare-the-properties-of-two-elements",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#8` in the `Comparisons` suite, change each `assert` to either `assert.isAbove` or `assert.isAtMost` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=7').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `isAbove` vs. `isAtMost`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=7').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'isAtMost',\n        '5 is at most (<=) 5'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `isAbove` vs. `isAtMost`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=7').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'isAbove', '1 is greater than 0');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `isAbove` vs. `isAtMost`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=7').then(\n    (data) => {\n      assert.equal(\n        data.assertions[2].method,\n        'isAbove',\n        'Math.PI = 3.14159265 is greater than 3'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the fourth assertion - `isAbove` vs. `isAtMost`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=7').then(\n    (data) => {\n      assert.equal(\n        data.assertions[3].method,\n        'isAtMost',\n        '1 - Math.random() is > 0 and <= 1. It is atMost 1 !'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301588,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\compare-the-properties-of-two-elements.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824a367417b2b2512c46",
      "title": "Learn How JavaScript Assertions Work",
      "challengeType": 2,
      "dashedName": "learn-how-javascript-assertions-work",
      "description": "Working on these challenges will involve you writing your code using one of the following methods:\n\n- Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete these challenges locally.\n- Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#1` in the `Basic Assertions` suite, change each `assert` to either `assert.isNull` or `assert.isNotNull` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=0').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `isNull` vs. `isNotNull`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=0').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'isNull', 'Null is null');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `isNull` vs. `isNotNull`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=0').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'isNotNull', '1 is not null');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301589,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\learn-how-javascript-assertions-work.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824f367417b2b2512c5a",
      "title": "Run Functional Tests on an API Response using Chai-HTTP III - PUT method",
      "challengeType": 2,
      "dashedName": "run-functional-tests-on-an-api-response-using-chai-http-iii",
      "description": "As a reminder, this project is being built upon the following starter project  cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nWhen you test a `PUT` request, you'll often send data along with it. The data you include with your `PUT` request is called the body of the request.\n\nTo send a `PUT` request and a JSON object to the `'/travellers'` endpoint, you can use `chai-http` plugin's `put` and `send` methods:\n\n```js\nchai\n  .request(server)\n  .keepOpen()\n  .put('/travellers')\n  .send({\n    \"surname\": [last name of a traveller of the past]\n  })\n  ...\n```\n\nAnd the route responds with:\n\n```json\n{\n  \"name\": [first name],\n  \"surname\": [last name],\n  \"dates\": [birth - death years]\n}\n```\n\nSee the server code for the different responses to the `'/travellers'` endpoint.",
      "instructions": "Within `tests/2_functional-tests.js`, alter the `'Send {surname: \"Colombo\"}'` test (`// #3`) and use the `put` and `send` methods to test the  `'/travellers'` endpoint.\n\nSend the following JSON object with your PUT request:\n\n```json\n{\n  \"surname\": \"Colombo\"\n}\n```\n\nCheck for the following within the `request.end` callback:\n\n1.  The `status` should be `200`\n2.  The `type` should be `application/json`\n3.  The `body.name` should be `Cristoforo`\n4.  The `body.surname` should be `Colombo`\n\nFollow the assertion order above - we rely on it. Also, be sure to remove `assert.fail()` once complete.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=2').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.status` to be 200.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=2').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'equal');\n      assert.equal(data.assertions[0].args[0], 'res.status');\n      assert.equal(data.assertions[0].args[1], '200');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.type` to be `'application/json'`.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=2').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'equal');\n      assert.equal(data.assertions[1].args[0], 'res.type');\n      assert.match(data.assertions[1].args[1], /('|\")application\\/json\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.body.name` to be `'Cristoforo'`.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=2').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'equal');\n      assert.equal(data.assertions[2].args[0], 'res.body.name');\n      assert.match(data.assertions[2].args[1], /('|\")Cristoforo\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.body.surname` to be `'Colombo'`.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=2').then(\n    (data) => {\n      assert.equal(data.assertions[3].method, 'equal');\n      assert.equal(data.assertions[3].args[0], 'res.body.surname');\n      assert.match(data.assertions[3].args[1], /('|\")Colombo\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301590,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iii---put-method.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824f367417b2b2512c5b",
      "title": "Run Functional Tests on an API Response using Chai-HTTP IV - PUT method",
      "challengeType": 2,
      "dashedName": "run-functional-tests-on-an-api-response-using-chai-http-iv",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nThis exercise is similar to the previous one.\n\nNow that you know how to test a `PUT` request, it's your turn to do it from scratch.",
      "instructions": "Within `tests/2_functional-tests.js`, alter the `'Send {surname: \"da Verrazzano\"}'` test (`// #4`) and use the `put` and `send` methods to test the  `'/travellers'` endpoint.\n\nSend the following JSON object with your PUT request:\n\n```json\n{\n  \"surname\": \"da Verrazzano\"\n}\n```\n\nCheck for the following within the `request.end` callback:\n\n1.  The `status` should be `200`\n2.  The `type` should be `application/json`\n3.  The `body.name` should be `Giovanni`\n4.  The `body.surname` should be `da Verrazzano`\n\nFollow the assertion order above - we rely on it. Also, be sure to remove `assert.fail()` once complete.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=3').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.status` to be 200",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=3').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'equal');\n      assert.equal(data.assertions[0].args[0], 'res.status');\n      assert.equal(data.assertions[0].args[1], '200');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.type` to be `'application/json'`",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=3').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'equal');\n      assert.equal(data.assertions[1].args[0], 'res.type');\n      assert.match(data.assertions[1].args[1], /('|\")application\\/json\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.body.name` to be `'Giovanni'`",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=3').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'equal');\n      assert.equal(data.assertions[2].args[0], 'res.body.name');\n      assert.match(data.assertions[2].args[1], /('|\")Giovanni\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.body.surname` to be `'da Verrazzano'`",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=3').then(\n    (data) => {\n      assert.equal(data.assertions[3].method, 'equal');\n      assert.equal(data.assertions[3].args[0], 'res.body.surname');\n      assert.match(data.assertions[3].args[1], /('|\")da Verrazzano\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301591,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-an-api-response-using-chai-http-iv---put-method.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824f367417b2b2512c59",
      "title": "Run Functional Tests on API Endpoints using Chai-HTTP II",
      "challengeType": 2,
      "dashedName": "run-functional-tests-on-api-endpoints-using-chai-http-ii",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.",
      "instructions": "Within `tests/2_functional-tests.js`, alter the `'Test GET /hello with your name'` test (`// #2`) to assert the `status` and the `text` of the response to make the test pass.\n\nSend your name as a URL query by appending `?name=<your_name>` to the route. The endpoint responds with `'hello <your_name>'`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=1').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.status` == 200",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=1').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'equal');\n      assert.equal(data.assertions[0].args[0], 'res.status');\n      assert.equal(data.assertions[0].args[1], '200');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.text` == `'hello <your_name>'`",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=1').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'equal');\n      assert.equal(data.assertions[1].args[0], 'res.text');\n      assert.match(data.assertions[1].args[1], /hello [\\w\\d_-]/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301592,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-api-endpoints-using-chai-http-ii.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824e367417b2b2512c58",
      "title": "Run Functional Tests on API Endpoints using Chai-HTTP",
      "challengeType": 2,
      "dashedName": "run-functional-tests-on-api-endpoints-using-chai-http",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nMocha allows you to test asynchronous operations like calls to API endpoints with a plugin called `chai-http`.\n\nThe following is an example of a test using `chai-http` for a suite called `'GET /hello?name=[name] => \"hello [name]\"'`:\n\n```js\nsuite('GET /hello?name=[name] => \"hello [name]\"', function () {\n  test('?name=John', function (done) {\n    chai\n      .request(server)\n      .keepOpen()\n      .get('/hello?name=John')\n      .end(function (err, res) {\n        assert.equal(res.status, 200, 'Response status should be 200');\n        assert.equal(res.text, 'hello John', 'Response should be \"hello John\"');\n        done();\n      });\n  });\n});\n```\n\nThe test sends a `GET` request to the server with a name as a URL query string (`?name=John`). In the `end` method's callback function, the response object (`res`) is received and contains the `status` property.\n\nThe first `assert.equal` checks if the status is equal to `200`. The second `assert.equal` checks that the response string (`res.text`) is equal to `\"hello John\"`.\n\nAlso, notice the `done` parameter in the test's callback function. Calling it without an argument at the end of a test is necessary to signal that the asynchronous operation is complete.\n\nFinally, note the `keepOpen` method just after the `request` method. Normally you would run your tests from the command line, or as part of an automated integration process, and you could let `chai-http` start and stop your server automatically.\n\nHowever, the tests that run when you submit the link to your project require your server to be up, so you need to use the `keepOpen` method to prevent `chai-http` from stopping your server.",
      "instructions": "Within `tests/2_functional-tests.js`, alter the `'Test GET /hello with no name'` test (`// #1`) to assert the `status` and the `text` of the response to make the test pass. Do not alter the arguments passed to the asserts.\n\nThere should be no URL query. Without a name URL query, the endpoint responds with `hello Guest`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=0').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.status` == 200",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=0').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'equal');\n      assert.equal(data.assertions[0].args[0], 'res.status');\n      assert.equal(data.assertions[0].args[1], '200');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should test for `res.text` == `'hello Guest'`",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=0').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'equal');\n      assert.equal(data.assertions[1].args[0], 'res.text');\n      assert.match(data.assertions[1].args[1], /('|\")hello Guest\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301593,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-on-api-endpoints-using-chai-http.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "5f8884f4c46685731aabfc41",
      "title": "Run Functional Tests Using a Headless Browser II",
      "challengeType": 2,
      "dashedName": "run-functional-tests-using-a-headless-browser-ii",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.",
      "instructions": "Within `tests/2_functional-tests.js`, in the `'Submit the surname \"Vespucci\" in the HTML form'` test (`// #6`), automate the following:\n\n1.  Fill in the form with the surname `Vespucci`\n2.  Press the submit button\n\nAnd within the `pressButton` callback:\n\n1.  Assert that status is OK `200`\n2.  Assert that the text inside the element `span#name` is `'Amerigo'`\n3.  Assert that the text inside the element `span#surname` is `'Vespucci'`\n4.  Assert that the element(s) `span#dates` exist and their count is `1`\n\nDo not forget to remove the `assert.fail()` call.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=6').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should assert that the headless browser request succeeded.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=6').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'browser.success');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should assert that the text inside the element `span#name` is `'Amerigo'`.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=6').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'browser.text');\n      assert.match(data.assertions[1].args[0], /('|\")span#name\\1/);\n      assert.match(data.assertions[1].args[1], /('|\")Amerigo\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should assert that the text inside the element `span#surname` is `'Vespucci'`.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=6').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'browser.text');\n      assert.match(data.assertions[2].args[0], /('|\")span#surname\\1/);\n      assert.match(data.assertions[2].args[1], /('|\")Vespucci\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should assert that the element `span#dates` exist and its count is 1.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=6').then(\n    (data) => {\n      assert.equal(data.assertions[3].method, 'browser.elements');\n      assert.match(data.assertions[3].args[0], /('|\")span#dates\\1/);\n      assert.equal(data.assertions[3].args[1], 1);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301594,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser-ii.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d8250367417b2b2512c5d",
      "title": "Run Functional Tests Using a Headless Browser",
      "challengeType": 2,
      "dashedName": "run-functional-tests-using-a-headless-browser",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nOn the page there's an input form. It sends data to the `PUT /travellers` endpoint as an AJAX request.\n\nWhen the request successfully completes, the client code appends a `<div>` containing the information in the response to the DOM.\n\nHere's an example of how to use Zombie.js to interact with the form:\n\n```js\ntest('Submit the surname \"Polo\" in the HTML form', function (done) {\n  browser.fill('surname', 'Polo').then(() => {\n    browser.pressButton('submit', () => {\n      browser.assert.success();\n      browser.assert.text('span#name', 'Marco');\n      browser.assert.text('span#surname', 'Polo');\n      browser.assert.elements('span#dates', 1);\n      done();\n    });\n  });\n});\n```\n\nFirst, the `fill` method of the `browser` object fills the `surname` field of the form with the value `'Polo'`. `fill` returns a promise, so `then` is chained off of it.\n\nWithin the `then` callback, the `pressButton` method of the `browser` object is used to invoke the form's `submit` event listener. The `pressButton` method is asynchronous.\n\nThen, once a response is received from the AJAX request, a few assertions are made confirming:\n\n1.  The status of the response is `200`\n2.  The text within the `<span id='name'></span>` element matches `'Marco'`\n3.  The text within the `<span id='surname'></span>` element matches `'Polo'`\n4.  There is `1` `<span id='dates'></span>` element.\n\nFinally, the `done` callback is invoked, which is needed due to the asynchronous test.",
      "instructions": "Within `tests/2_functional-tests.js`, in the `'Submit the surname \"Colombo\" in the HTML form'` test (`// #5`), automate the following:\n\n1.  Fill in the form with the surname `Colombo`\n2.  Press the submit button\n\nAnd within the `pressButton` callback:\n\n1.  Assert that status is OK `200`\n2.  Assert that the text inside the element `span#name` is `'Cristoforo'`\n3.  Assert that the text inside the element `span#surname` is `'Colombo'`\n4.  Assert that the element(s) `span#dates` exist and their count is `1`\n\nDo not forget to remove the `assert.fail()` call.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should assert that the headless browser request succeeded.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'browser.success');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should assert that the text inside the element `span#name` is `'Cristoforo'`.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'browser.text');\n      assert.match(data.assertions[1].args[0], /('|\")span#name\\1/);\n      assert.match(data.assertions[1].args[1], /('|\")Cristoforo\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should assert that the text inside the element `span#surname` is `'Colombo'`.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'browser.text');\n      assert.match(data.assertions[2].args[0], /('|\")span#surname\\1/);\n      assert.match(data.assertions[2].args[1], /('|\")Colombo\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should assert that the element `span#dates` exist and its count is 1.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[3].method, 'browser.elements');\n      assert.match(data.assertions[3].args[0], /('|\")span#dates\\1/);\n      assert.equal(data.assertions[3].args[1], 1);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301595,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\run-functional-tests-using-a-headless-browser.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824f367417b2b2512c5c",
      "title": "Simulate Actions Using a Headless Browser",
      "challengeType": 2,
      "dashedName": "simulate-actions-using-a-headless-browser",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\nIn the next challenges, you'll simulate human interaction with a page by using a headless browser.\n\nHeadless browsers are web browsers without a GUI. They are able to render and interpret HTML, CSS, and JavaScript the same way a regular browser would, making them particularly useful for testing web pages.\n\nFor the following challenges you'll use Zombie.js, which is a lightweight headless browser that doesn't rely on additional binaries to be installed. But there are many other, more powerful headless browser options.\n\nMocha allows you to run some code before any of the actual tests run. This can be useful to do things like add entries to a database which will be used in the rest of the tests.\n\nWith a headless browser, before running tests, you need to **visit** the page you'll test.\n\nThe `suiteSetup` hook is executed only once at the beginning of a test suite.\n\nThere are several other hook types that can execute code before each test, after each test, or at the end of a test suite. See the Mocha docs for more information.",
      "instructions": "Within `tests/2_functional-tests.js`, immediately after the `Browser` declaration, add your project URL to the `site` property of the variable:\n\n```js\nBrowser.site = 'http://0.0.0.0:3000'; // Your URL here\n```\n\nThen at the root level of the `'Functional Tests with Zombie.js'` suite, instantiate a new instance of the `Browser` object with the following code:\n\n```js\nconst browser = new Browser();\n```\n\nAnd use the `suiteSetup` hook to direct the `browser` to the `/` route with the following code. **Note**: `done` is passed as a callback to `browser.visit`, you should not invoke it.\n\n```js\nsuiteSetup(function(done) {\n  return browser.visit('/', done);\n});\n```",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=functional&n=4').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": "",
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\simulate-actions-using-a-headless-browser.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824b367417b2b2512c49",
      "title": "Test for Truthiness",
      "challengeType": 2,
      "dashedName": "test-for-truthiness",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`isTrue()` will test for the boolean value `true` and `isNotTrue()` will pass when given anything but the boolean value of `true`.\n\n```js\nassert.isTrue(true, 'This will pass with the boolean value true');\nassert.isTrue('true', 'This will NOT pass with the string value \"true\"');\nassert.isTrue(1, 'This will NOT pass with the number value 1');\n```\n\n`isFalse()` and `isNotFalse()` also exist, and behave similarly to their true counterparts except they look for the boolean value of `false`.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#4` in the `Basic Assertions` suite, change each `assert` to either `assert.isTrue` or `assert.isNotTrue` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=3').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `isTrue` vs. `isNotTrue`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=3').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'isTrue', 'True is true');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `isTrue` vs. `isNotTrue`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=3').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'isTrue',\n        'Double negation of a truthy value is true'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `isTrue` vs. `isNotTrue`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=3').then(\n    (data) => {\n      assert.equal(\n        data.assertions[2].method,\n        'isNotTrue',\n        'A truthy object is not true - neither is a false one'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301596,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-for-truthiness.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824d367417b2b2512c53",
      "title": "Test if a String Contains a Substring",
      "challengeType": 2,
      "dashedName": "test-if-a-string-contains-a-substring",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`include()` and `notInclude()` work for strings too! `include()` asserts that the actual string contains the expected substring.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#14` in the `Strings` suite, change each `assert` to either `assert.include` or `assert.notInclude` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=13').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `include` vs. `notInclude`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=13').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'include',\n        \"'Arrow' contains 'row'...\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `include` vs. `notInclude`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=13').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'notInclude',\n        \"... a 'dart' doesn't contain a 'queue'\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301597,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-string-contains-a-substring.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824c367417b2b2512c4f",
      "title": "Test if a Value Falls within a Specific Range",
      "challengeType": 2,
      "dashedName": "test-if-a-value-falls-within-a-specific-range",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n```javascript\n.approximately(actual, expected, delta, [message])\n```\n\nAsserts that the `actual` is equal to `expected`, to within a +/- `delta` range.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#10` in the `Comparisons` suite, change each `assert` to `assert.approximately` to make the test pass (should evaluate to `true`).\n\nChoose the minimum range (3rd parameter) to make the test always pass. It should be less than 1.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=9').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct range for the first assertion - `approximately(actual, expected, range)`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=9').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'approximately');\n      assert.equal(\n        data.assertions[0].args[2],\n        0.5,\n        \"weirdNumbers(0.5) is in the range (0.5, 1.5]. It's within 1 +/- 0.5\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct range for the second assertion - `approximately(actual, expected, range)`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=9').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'approximately');\n      assert.equal(\n        data.assertions[1].args[2],\n        0.8,\n        \"weirdNumbers(0.2) is in the range (0.2, 1.2]. It's within 1 +/- 0.8\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301598,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-falls-within-a-specific-range.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824d367417b2b2512c52",
      "title": "Test if a Value is a String",
      "challengeType": 2,
      "dashedName": "test-if-a-value-is-a-string",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`isString` or `isNotString` asserts that the actual value is a string.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#13` in the `Strings` suite, change each `assert` to either `assert.isString` or `assert.isNotString` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=12').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `isString` vs. `isNotString`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=12').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'isNotString',\n        'A float number is not a string'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `isString` vs. `isNotString`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=12').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'isString',\n        'environment vars are strings (or undefined)'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `isString` vs. `isNotString`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=12').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'isString', 'A JSON is a string');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301599,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-a-string.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824d367417b2b2512c50",
      "title": "Test if a Value is an Array",
      "challengeType": 2,
      "dashedName": "test-if-a-value-is-an-array",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#11` in the `Arrays` suite, change each `assert` to either `assert.isArray` or `assert.isNotArray` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=10').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `isArray` vs. `isNotArray`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=10').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'isArray',\n        'String.prototype.split() returns an Array'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `isArray` vs. `isNotArray`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=10').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'isNotArray',\n        'Array.prototype.indexOf() returns a number'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301600,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-an-array.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824e367417b2b2512c56",
      "title": "Test if a Value is of a Specific Data Structure Type",
      "challengeType": 2,
      "dashedName": "test-if-a-value-is-of-a-specific-data-structure-type",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`#typeOf` asserts that value's type is the given string, as determined by `Object.prototype.toString`.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#17` in the `Objects` suite, change each `assert` to either `assert.typeOf` or `assert.notTypeOf` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=16').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `typeOf` vs. `notTypeOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=16').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'typeOf',\n        'myCar is typeOf Object'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `typeOf` vs. `notTypeOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=16').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'typeOf',\n        'Car.model is a String'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `typeOf` vs. `notTypeOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=16').then(\n    (data) => {\n      assert.equal(\n        data.assertions[2].method,\n        'notTypeOf',\n        'Plane.wings is a Number (not a String)'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the fourth assertion - `typeOf` vs. `notTypeOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=16').then(\n    (data) => {\n      assert.equal(\n        data.assertions[3].method,\n        'typeOf',\n        'Plane.engines is an Array'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the fifth assertion - `typeOf` vs. `notTypeOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=16').then(\n    (data) => {\n      assert.equal(\n        data.assertions[4].method,\n        'typeOf',\n        'Car.wheels is a Number'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301601,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-value-is-of-a-specific-data-structure-type.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824b367417b2b2512c47",
      "title": "Test if a Variable or Function is Defined",
      "challengeType": 2,
      "dashedName": "test-if-a-variable-or-function-is-defined",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#2` in the `Basic Assertions` suite, change each `assert` to either `assert.isDefined()` or `assert.isUndefined()` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=1').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `isDefined` vs. `isUndefined`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=1').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'isDefined',\n        'Null is not undefined'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `isDefined` vs. `isUndefined`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=1').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'isUndefined',\n        'Undefined is undefined'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `isDefined` vs. `isUndefined`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=1').then(\n    (data) => {\n      assert.equal(\n        data.assertions[2].method,\n        'isDefined',\n        'A string is not undefined'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301602,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-a-variable-or-function-is-defined.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824d367417b2b2512c51",
      "title": "Test if an Array Contains an Item",
      "challengeType": 2,
      "dashedName": "test-if-an-array-contains-an-item",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#12` in the `Arrays` suite, change each `assert` to either `assert.include` or `assert.notInclude` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=11').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `include` vs. `notInclude`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=11').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'notInclude',\n        \"It's summer in july...\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `include` vs. `notInclude`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=11').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'include',\n        'JavaScript is a backend language !!'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301603,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-array-contains-an-item.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824e367417b2b2512c55",
      "title": "Test if an Object has a Property",
      "challengeType": 2,
      "dashedName": "test-if-an-object-has-a-property",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`property` asserts that the actual object has a given property.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#16` in the `Objects` suite, change each `assert` to either `assert.property` or `assert.notProperty` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=15').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `property` vs. `notProperty`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=15').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'notProperty',\n        'A car has not wings'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `property` vs. `notProperty`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=15').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'property',\n        'planes have engines'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `property` vs. `notProperty`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=15').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'property', 'Cars have wheels');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301604,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-object-has-a-property.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824e367417b2b2512c57",
      "title": "Test if an Object is an Instance of a Constructor",
      "challengeType": 2,
      "dashedName": "test-if-an-object-is-an-instance-of-a-constructor",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`#instanceOf` asserts that an object is an instance of a constructor.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#18` in the `Objects` suite, change each `assert` to either `assert.instanceOf` or `assert.notInstanceOf` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=17').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `instanceOf` vs. `notInstanceOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=17').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'notInstanceOf',\n        'myCar is not an instance of Plane'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `instanceOf` vs. `notInstanceOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=17').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'instanceOf',\n        'airlinePlane is an instance of Plane'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `instanceOf` vs. `notInstanceOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=17').then(\n    (data) => {\n      assert.equal(\n        data.assertions[2].method,\n        'instanceOf',\n        'everything is an Object in JavaScript...'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the fourth assertion - `instanceOf` vs. `notInstanceOf`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=17').then(\n    (data) => {\n      assert.equal(\n        data.assertions[3].method,\n        'notInstanceOf',\n        'myCar.wheels is not an instance of String'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301605,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-an-object-is-an-instance-of-a-constructor.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824c367417b2b2512c4e",
      "title": "Test if One Value is Below or At Least as Large as Another",
      "challengeType": 2,
      "dashedName": "test-if-one-value-is-below-or-at-least-as-large-as-another",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labelled `#9` in the `Comparisons` suite, change each `assert` to either `assert.isBelow` or `assert.isAtLeast` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=8').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `isBelow` vs. `isAtLeast`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=8').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'isAtLeast',\n        '5 is at least (>=) 5'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `isBelow` vs. `isAtLeast`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=8').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'isAtLeast',\n        '2 * Math.random() is at least 0'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `isBelow` vs. `isAtLeast`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=8').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'isBelow', '1 is smaller than 2');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the fourth assertion - `isBelow` vs. `isAtLeast`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=8').then(\n    (data) => {\n      assert.equal(\n        data.assertions[3].method,\n        'isBelow',\n        '2/3 (0.6666) is smaller than 1'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301606,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\test-if-one-value-is-below-or-at-least-as-large-as-another.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824b367417b2b2512c48",
      "title": "Use Assert.isOK and Assert.isNotOK",
      "challengeType": 2,
      "dashedName": "use-assert-isok-and-assert-isnotok",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`isOk()` will test for a truthy value, and `isNotOk()` will test for a falsy value.\n\nTo learn more about truthy and falsy values, try our <a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/falsy-bouncer\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Falsy Bouncer</a> challenge.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#3` in the `Basic Assertions` suite, change each `assert` to either `assert.isOk()` or `assert.isNotOk()` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=2').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `isOk` vs. `isNotOk`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=2').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'isNotOk', 'Null is falsy');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `isOk` vs. `isNotOk`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=2').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'isOk', 'A string is truthy');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `isOk` vs. `isNotOk`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=2').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'isOk', 'true is truthy');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301607,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-assert.isok-and-assert.isnotok.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824d367417b2b2512c54",
      "title": "Use Regular Expressions to Test a String",
      "challengeType": 2,
      "dashedName": "use-regular-expressions-to-test-a-string",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`match()` asserts that the actual value matches the second argument regular expression.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#15` in the `Strings` suite, change each `assert` to either `assert.match` or `assert.notMatch` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=14').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `match` vs. `notMatch`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=14').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'match',\n        \"'# name:John Doe, age:35' matches the regex\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `match` vs. `notMatch`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=14').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'notMatch',\n        \"'# name:Paul Smith III, age:twenty-four' does not match the regex (the age must be numeric)\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301608,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-regular-expressions-to-test-a-string.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824b367417b2b2512c4a",
      "title": "Use the Double Equals to Assert Equality",
      "challengeType": 2,
      "dashedName": "use-the-double-equals-to-assert-equality",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`equal()` compares objects using `==`.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#5` in the `Equality` suite, change each `assert` to either `assert.equal` or `assert.notEqual` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=4').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `equal` vs. `notEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=4').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'equal',\n        'Numbers are coerced into strings with == '\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `equal` vs. `notEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=4').then(\n    (data) => {\n      assert.equal(\n        data.assertions[1].method,\n        'notEqual',\n        ' == compares object references'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `equal` vs. `notEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=4').then(\n    (data) => {\n      assert.equal(\n        data.assertions[2].method,\n        'equal',\n        \"6 * '2' is 12 ! It should be equal to '12'\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the fourth assertion - `equal` vs. `notEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=4').then(\n    (data) => {\n      assert.equal(data.assertions[3].method, 'notEqual', \"6 + '2' is '62'...\");\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301609,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-double-equals-to-assert-equality.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "587d824b367417b2b2512c4b",
      "title": "Use the Triple Equals to Assert Strict Equality",
      "challengeType": 2,
      "dashedName": "use-the-triple-equals-to-assert-strict-equality",
      "description": "As a reminder, this project is being built upon the following starter project cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.\n\n`strictEqual()` compares objects using `===`.",
      "instructions": "Within `tests/1_unit-tests.js` under the test labeled `#6` in the `Equality` suite, change each `assert` to either `assert.strictEqual` or `assert.notStrictEqual` to make the test pass (should evaluate to `true`). Do not alter the arguments passed to the asserts.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "All tests should pass.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=5').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the first assertion - `strictEqual` vs. `notStrictEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=5').then(\n    (data) => {\n      assert.equal(\n        data.assertions[0].method,\n        'notStrictEqual',\n        'with strictEqual the type must match'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the second assertion - `strictEqual` vs. `notStrictEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'strictEqual', '3*2 = 6...');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the third assertion - `strictEqual` vs. `notStrictEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=5').then(\n    (data) => {\n      assert.equal(\n        data.assertions[2].method,\n        'strictEqual',\n        \"6 * '2' is 12. Types match !\"\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        },
        {
          "text": "You should choose the correct method for the fourth assertion - `strictEqual` vs. `notStrictEqual`.",
          "testCode": "$.get(code + '/_api/get-tests?type=unit&n=5').then(\n    (data) => {\n      assert.equal(\n        data.assertions[3].method,\n        'notStrictEqual',\n        'Even if they have the same elements, the Arrays are notStrictEqual'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301610,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-and-testing-with-chai\\use-the-triple-equals-to-assert-strict-equality.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-and-testing-with-chai",
        "name": "Quality Assurance And Testing With Chai"
      }
    },
    {
      "id": "5e601c0d5ac9d0ecd8b94afe",
      "title": "American British Translator",
      "challengeType": 4,
      "dashedName": "american-british-translator",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://american-british-translator.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://american-british-translator.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-american-british-english-translator/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "-   All logic can go into `/components/translator.js`\n-   Complete the `/api/translate` route in `/routes/api.js`\n-   Create all of the unit/functional tests in `tests/1_unit-tests.js` and `tests/2_functional-tests.js`\n-   See the JavaScript files in `/components` for the different spelling and terms your application should translate\n-   To run the tests automatically, set `NODE_ENV` to `test` without quotes in the `.env` file\n-   To run the tests in the console, use the command `npm run test`.\n\nWrite the following tests in `tests/1_unit-tests.js`:\n\n-   Translate `Mangoes are my favorite fruit.` to British English\n-   Translate `I ate yogurt for breakfast.` to British English\n-   Translate `We had a party at my friend's condo.` to British English\n-   Translate `Can you toss this in the trashcan for me?` to British English\n-   Translate `The parking lot was full.` to British English\n-   Translate `Like a high tech Rube Goldberg machine.` to British English\n-   Translate `To play hooky means to skip class or work.` to British English\n-   Translate `No Mr. Bond, I expect you to die.` to British English\n-   Translate `Dr. Grosh will see you now.` to British English\n-   Translate `Lunch is at 12:15 today.` to British English\n-   Translate `We watched the footie match for a while.` to American English\n-   Translate `Paracetamol takes up to an hour to work.` to American English\n-   Translate `First, caramelise the onions.` to American English\n-   Translate `I spent the bank holiday at the funfair.` to American English\n-   Translate `I had a bicky then went to the chippy.` to American English\n-   Translate `I've just got bits and bobs in my bum bag.` to American English\n-   Translate `The car boot sale at Boxted Airfield was called off.` to American English\n-   Translate `Have you met Mrs Kalyani?` to American English\n-   Translate `Prof Joyner of King's College, London.` to American English\n-   Translate `Tea time is usually around 4 or 4.30.` to American English\n-   Highlight translation in `Mangoes are my favorite fruit.`\n-   Highlight translation in `I ate yogurt for breakfast.`\n-   Highlight translation in `We watched the footie match for a while.`\n-   Highlight translation in `Paracetamol takes up to an hour to work.`\n\nWrite the following tests in `tests/2_functional-tests.js`:\n\n-   Translation with text and locale fields: POST request to `/api/translate`\n-   Translation with text and invalid locale field: POST request to `/api/translate`\n-   Translation with missing text field: POST request to `/api/translate`\n-   Translation with missing locale field: POST request to `/api/translate`\n-   Translation with empty text: POST request to `/api/translate`\n-   Translation with text that needs no translation: POST request to `/api/translate`",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/american-british-translator\\.freecodecamp\\.rocks/.test(\n      code\n    )\n  );"
        },
        {
          "text": "You can `POST` to `/api/translate` with a body containing `text` with the text to translate and `locale` with either `american-to-british` or `british-to-american`. The returned object should contain the submitted `text` and `translation` with the translated text.",
          "testCode": "async () => {\n  try {\n    const text = 'Mangoes are my favorite fruit.';\n    const locale = 'american-to-british';\n    const output = {\n      text: 'Mangoes are my favorite fruit.',\n      translation:\n        'Mangoes are my <span class=\"highlight\">favourite</span> fruit.'\n    };\n    let data = await fetch(code + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "The `/api/translate` route should handle the way time is written in American and British English. For example, ten thirty is written as \"10.30\" in British English and \"10:30\" in American English. The `span` element should wrap the entire time string, i.e. `<span class=\"highlight\">10:30</span>`.",
          "testCode": "async () => {\n  try {\n    const text = 'Lunch is at 12:15 today.';\n    const locale = 'american-to-british';\n    const output = {\n      text: text,\n      translation: 'Lunch is at <span class=\"highlight\">12.15</span> today.'\n    };\n    let data = await fetch(code + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "The `/api/translate` route should also handle the way titles/honorifics are abbreviated in American and British English. For example, Doctor Wright is abbreviated as \"Dr Wright\" in British English and \"Dr. Wright\" in American English. See `/components/american-to-british-titles.js` for the different titles your application should handle.",
          "testCode": "async () => {\n  try {\n    const text = 'Dr. Grosh will see you now.';\n    const locale = 'american-to-british';\n    const output = {\n      text: text,\n      translation: '<span class=\"highlight\">Dr</span> Grosh will see you now.'\n    };\n    let data = await fetch(code + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "Wrap any translated spelling or terms with `<span class=\"highlight\">...</span>` tags so they appear in green.",
          "testCode": "async () => {\n  try {\n    const text = 'Mangoes are my favorite fruit.';\n    const locale = 'american-to-british';\n    const output = {\n      text: 'Mangoes are my favorite fruit.',\n      translation:\n        'Mangoes are my <span class=\"highlight\">favourite</span> fruit.'\n    };\n    let data = await fetch(code + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "If one or more of the required fields is missing, return `{ error: 'Required field(s) missing' }`.",
          "testCode": "async () => {\n  try {\n    const locale = 'american-to-british';\n    let data = await fetch(code + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, 'Required field(s) missing');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "If `text` is empty, return `{ error: 'No text to translate' }`",
          "testCode": "async () => {\n  try {\n    const locale = 'american-to-british';\n    let data = await fetch(code + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text: '', locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, 'No text to translate');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "If `locale` does not match one of the two specified locales, return `{ error: 'Invalid value for locale field' }`.",
          "testCode": "async () => {\n  try {\n    const text = \"Ceci n'est pas une pipe\";\n    const locale = 'french-to-american';\n    let data = await fetch(code + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, 'Invalid value for locale field');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "If `text` requires no translation, return `\"Everything looks good to me!\"` for the `translation` value.",
          "testCode": "async () => {\n  try {\n    const locale = 'british-to-american';\n    const output = {\n      text: 'SaintPeter and nhcarrigan give their regards!',\n      translation: 'Everything looks good to me!'\n    };\n    let data = await fetch(code + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text: output.text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "All 24 unit tests are complete and passing.",
          "testCode": "async () => {\n  try {\n    const getTests = await $.get(code + '/_api/get-tests');\n    assert.isArray(getTests);\n    const unitTests = getTests.filter((test) => {\n      return !!test.context.match(/Unit Tests/gi);\n    });\n    assert.isAtLeast(unitTests.length, 24, 'At least 24 tests passed');\n    unitTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Tests in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "All 6 functional tests are complete and passing.",
          "testCode": "async () => {\n  try {\n    const getTests = await $.get(code + '/_api/get-tests');\n    assert.isArray(getTests);\n    const functTests = getTests.filter((test) => {\n      return !!test.context.match(/Functional Tests/gi);\n    });\n    assert.isAtLeast(functTests.length, 6, 'At least 6 tests passed');\n    functTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Tests in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 462358,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\american-british-translator.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-projects",
        "name": "Quality Assurance Projects"
      }
    },
    {
      "id": "587d8249367417b2b2512c42",
      "title": "Issue Tracker",
      "challengeType": 4,
      "dashedName": "issue-tracker",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://issue-tracker.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://issue-tracker.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-issuetracker/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "-   Complete the necessary routes in `/routes/api.js`\n-   Create all of the functional tests in `tests/2_functional-tests.js`\n-   Copy the `sample.env` file to `.env` and set the variables appropriately\n-   To run the tests automatically, add `NODE_ENV=test` in your `.env` file\n-   To run the tests in the console, use the command `npm run test`\n\nWrite the following tests in `tests/2_functional-tests.js`:\n\n-   Create an issue with every field: POST request to `/api/issues/{project}`\n-   Create an issue with only required fields: POST request to `/api/issues/{project}`\n-   Create an issue with missing required fields: POST request to `/api/issues/{project}`\n-   View issues on a project: GET request to `/api/issues/{project}`\n-   View issues on a project with one filter: GET request to `/api/issues/{project}`\n-   View issues on a project with multiple filters: GET request to `/api/issues/{project}`\n-   Update one field on an issue: PUT request to `/api/issues/{project}`\n-   Update multiple fields on an issue: PUT request to `/api/issues/{project}`\n-   Update an issue with missing `_id`: PUT request to `/api/issues/{project}`\n-   Update an issue with no fields to update: PUT request to `/api/issues/{project}`\n-   Update an issue with an invalid `_id`: PUT request to `/api/issues/{project}`\n-   Delete an issue: DELETE request to `/api/issues/{project}`\n-   Delete an issue with an invalid `_id`: DELETE request to `/api/issues/{project}`\n-   Delete an issue with missing `_id`: DELETE request to `/api/issues/{project}`",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You can provide your own project, not the example URL.",
          "testCode": "assert(!/.*\\/issue-tracker\\.freecodecamp\\.rocks/.test(code));"
        },
        {
          "text": "You can send a `POST` request to `/api/issues/{projectname}` with form data containing the required fields `issue_title`, `issue_text`, `created_by`, and optionally `assigned_to` and `status_text`.",
          "testCode": "async () => {\n  try {\n    let test_data = {\n      issue_title: 'Faux Issue Title',\n      issue_text: 'Functional Test - Required Fields Only',\n      created_by: 'fCC'\n    };\n    const data = await $.post(\n      code + '/api/issues/fcc-project',\n      test_data\n    );\n    assert.isObject(data);\n    assert.nestedInclude(data, test_data);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "The `POST` request to `/api/issues/{projectname}` will return the created object, and must include all of the submitted fields. Excluded optional fields will be returned as empty strings. Additionally, include `created_on` (date/time), `updated_on` (date/time), `open` (boolean, `true` for open - default value, `false` for closed), and `_id`.",
          "testCode": "async () => {\n  try {\n    let test_data = {\n      issue_title: 'Faux Issue Title 2',\n      issue_text: 'Functional Test - Every field filled in',\n      created_by: 'fCC',\n      assigned_to: 'Chai and Mocha'\n    };\n    const data = await $.post(\n      code + '/api/issues/fcc-project',\n      test_data\n    );\n    assert.isObject(data);\n    assert.nestedInclude(data, test_data);\n    assert.property(data, 'created_on');\n    assert.isNumber(Date.parse(data.created_on));\n    assert.property(data, 'updated_on');\n    assert.isNumber(Date.parse(data.updated_on));\n    assert.property(data, 'open');\n    assert.isBoolean(data.open);\n    assert.isTrue(data.open);\n    assert.property(data, '_id');\n    assert.isNotEmpty(data._id);\n    assert.property(data, 'status_text');\n    assert.isEmpty(data.status_text);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "If you send a `POST` request to `/api/issues/{projectname}` without the required fields, returned will be the error `{ error: 'required field(s) missing' }`",
          "testCode": "async () => {\n  try {\n    let test_data = { created_by: 'fCC' };\n    const data = await $.post(code + '/api/issues/fcc-project', {\n      created_by: 'fCC'\n    });\n    assert.isObject(data);\n    assert.property(data, 'error');\n    assert.equal(data.error, 'required field(s) missing');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a `GET` request to `/api/issues/{projectname}` for an array of all issues for that specific `projectname`, with all the fields present for each issue.",
          "testCode": "async () => {\n  try {\n    let test_data = { issue_text: 'Get Issues Test', created_by: 'fCC' };\n    const url =\n      code +\n      '/api/issues/get_issues_test_' +\n      Date.now().toString().substring(7);\n    const data1 = await $.post(\n      url,\n      Object.assign(test_data, { issue_title: 'Faux Issue 1' })\n    );\n    assert.isObject(data1);\n    const data2 = await $.post(\n      url,\n      Object.assign(test_data, { issue_title: 'Faux Issue 2' })\n    );\n    assert.isObject(data2);\n    const data3 = await $.post(\n      url,\n      Object.assign(test_data, { issue_title: 'Faux Issue 3' })\n    );\n    assert.isObject(data3);\n    const getIssues = await $.get(url);\n    assert.isArray(getIssues);\n    assert.lengthOf(getIssues, 3);\n    let re = new RegExp('Faux Issue \\\\d');\n    getIssues.forEach((issue) => {\n      assert.property(issue, 'issue_title');\n      assert.match(issue.issue_title, re);\n      assert.property(issue, 'issue_text');\n      assert.property(issue, 'created_by');\n      assert.property(issue, 'assigned_to');\n      assert.property(issue, 'status_text');\n      assert.property(issue, 'open');\n      assert.property(issue, 'created_on');\n      assert.property(issue, 'updated_on');\n      assert.property(issue, '_id');\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a `GET` request to `/api/issues/{projectname}` and filter the request by also passing along any field and value as a URL query (ie. `/api/issues/{project}?open=false`). You can pass one or more field/value pairs at once.",
          "testCode": "async () => {\n  try {\n    let test_data = {\n      issue_title: 'To be Filtered',\n      issue_text: 'Filter Issues Test'\n    };\n    const url =\n      code +\n      '/api/issues/get_issues_test_' +\n      Date.now().toString().substring(7);\n    const data1 = await $.post(\n      url,\n      Object.assign(test_data, { created_by: 'Alice', assigned_to: 'Bob' })\n    );\n    const data2 = await $.post(\n      url,\n      Object.assign(test_data, { created_by: 'Alice', assigned_to: 'Bob' })\n    );\n    const data3 = await $.post(\n      url,\n      Object.assign(test_data, { created_by: 'Alice', assigned_to: 'Eric' })\n    );\n    const data4 = await $.post(\n      url,\n      Object.assign(test_data, { created_by: 'Carol', assigned_to: 'Eric' })\n    );\n    const getSingle = await $.get(url + '?created_by=Alice');\n    assert.isArray(getSingle);\n    assert.lengthOf(getSingle, 3);\n    const getMultiple = await $.get(url + '?created_by=Alice&assigned_to=Bob');\n    assert.isArray(getMultiple);\n    assert.lengthOf(getMultiple, 2);\n    const copyId = getMultiple[0]._id;\n    const getById = await $.get(url + `?_id=${copyId}`);\n    assert.isArray(getById);\n    assert.lengthOf(getById, 1);\n    assert.equal(getById[0]._id, copyId, 'should be able to query a document by _id')\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a `PUT` request to `/api/issues/{projectname}` with an `_id` and one or more fields to update. On success, the `updated_on` field should be updated, and returned should be `{  result: 'successfully updated', '_id': _id }`.",
          "testCode": "async () => {\n  try {\n    let initialData = {\n      issue_title: 'Issue to be Updated',\n      issue_text: 'Functional Test - Put target',\n      created_by: 'fCC'\n    };\n    const url = code + '/api/issues/fcc-project';\n    const itemToUpdate = await $.post(url, initialData);\n    const updateSuccess = await $.ajax({\n      url: url,\n      type: 'PUT',\n      data: { _id: itemToUpdate._id, issue_text: 'New Issue Text' }\n    });\n    assert.isObject(updateSuccess);\n    assert.deepEqual(updateSuccess, {\n      result: 'successfully updated',\n      _id: itemToUpdate._id\n    });\n    const getUpdatedId = await $.get(url + '?_id=' + itemToUpdate._id);\n    assert.isArray(getUpdatedId);\n    assert.isObject(getUpdatedId[0]);\n    assert.isAbove(\n      Date.parse(getUpdatedId[0].updated_on),\n      Date.parse(getUpdatedId[0].created_on)\n    );\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "When the `PUT` request sent to `/api/issues/{projectname}` does not include an `_id`, the return value is `{ error: 'missing _id' }`.",
          "testCode": "async () => {\n  try {\n    const url = code + '/api/issues/fcc-project';\n    const badUpdate = await $.ajax({ url: url, type: 'PUT' });\n    assert.isObject(badUpdate);\n    assert.property(badUpdate, 'error');\n    assert.equal(badUpdate.error, 'missing _id');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "When the `PUT` request sent to `/api/issues/{projectname}` does not include update fields, the return value is `{ error: 'no update field(s) sent', '_id': _id }`. On any other error, the return value is `{ error: 'could not update', '_id': _id }`.",
          "testCode": "async () => {\n  try {\n    const url = code + '/api/issues/fcc-project';\n    const badUpdate = await $.ajax({\n      url: url,\n      type: 'PUT',\n      data: { _id: '5f665eb46e296f6b9b6a504d' }\n    });\n    assert.deepEqual(badUpdate, {\n      error: 'no update field(s) sent',\n      _id: '5f665eb46e296f6b9b6a504d'\n    });\n    const badIdUpdate = await $.ajax({\n      url: url,\n      type: 'PUT',\n      data: { _id: '5f665eb46e296f6b9b6a504d', issue_text: 'New Issue Text' }\n    });\n    assert.deepEqual(badIdUpdate, {\n      error: 'could not update',\n      _id: '5f665eb46e296f6b9b6a504d'\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a `DELETE` request to `/api/issues/{projectname}` with an `_id` to delete an issue. If no `_id` is sent, the return value is `{ error: 'missing _id' }`. On success, the return value is `{ result: 'successfully deleted', '_id': _id }`. On failure, the return value is `{ error: 'could not delete', '_id': _id }`.",
          "testCode": "async () => {\n  try {\n    let initialData = {\n      issue_title: 'Issue to be Deleted',\n      issue_text: 'Functional Test - Delete target',\n      created_by: 'fCC'\n    };\n    const url = code + '/api/issues/fcc-project';\n    const itemToDelete = await $.post(url, initialData);\n    assert.isObject(itemToDelete);\n    const deleteSuccess = await $.ajax({\n      url: url,\n      type: 'DELETE',\n      data: { _id: itemToDelete._id }\n    });\n    assert.isObject(deleteSuccess);\n    assert.deepEqual(deleteSuccess, {\n      result: 'successfully deleted',\n      _id: itemToDelete._id\n    });\n    const noId = await $.ajax({ url: url, type: 'DELETE' });\n    assert.isObject(noId);\n    assert.deepEqual(noId, { error: 'missing _id' });\n    const badIdDelete = await $.ajax({\n      url: url,\n      type: 'DELETE',\n      data: { _id: '5f665eb46e296f6b9b6a504d', issue_text: 'New Issue Text' }\n    });\n    assert.isObject(badIdDelete);\n    assert.deepEqual(badIdDelete, {\n      error: 'could not delete',\n      _id: '5f665eb46e296f6b9b6a504d'\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "All 14 functional tests are complete and passing.",
          "testCode": "async () => {\n  try {\n    const getTests = await $.get(code + '/_api/get-tests');\n    assert.isArray(getTests);\n    assert.isAtLeast(getTests.length, 14, 'At least 14 tests passed');\n    getTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Test in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301569,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\issue-tracker.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-projects",
        "name": "Quality Assurance Projects"
      }
    },
    {
      "id": "587d8249367417b2b2512c41",
      "title": "Metric-Imperial Converter",
      "challengeType": 4,
      "dashedName": "metric-imperial-converter",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://metric-imperial-converter.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://metric-imperial-converter.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:\n\n- Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-metricimpconverter/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n- Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\n\n**Note:** This project's tests do not work when using `glitch.com`.",
      "instructions": "- Complete the necessary conversion logic in `/controllers/convertHandler.js`\n- Complete the necessary routes in `/routes/api.js`\n- Copy the `sample.env` file to `.env` and set the variables appropriately\n- To run the tests automatically, add `NODE_ENV=test` in your `.env` file\n- To run the tests in the console, use the command `npm run test`.\n\nWrite the following tests in `tests/1_unit-tests.js`:\n\n- `convertHandler` should correctly read a whole number input.\n- `convertHandler` should correctly read a decimal number input.\n- `convertHandler` should correctly read a fractional input.\n- `convertHandler` should correctly read a fractional input with a decimal.\n- `convertHandler` should correctly return an error on a double-fraction (i.e. `3/2/3`).\n- `convertHandler` should correctly default to a numerical input of `1` when no numerical input is provided.\n- `convertHandler` should correctly read each valid input unit.\n- `convertHandler` should correctly return an error for an invalid input unit.\n- `convertHandler` should return the correct return unit for each valid input unit.\n- `convertHandler` should correctly return the spelled-out string unit for each valid input unit.\n- `convertHandler` should correctly convert `gal` to `L`.\n- `convertHandler` should correctly convert `L` to `gal`.\n- `convertHandler` should correctly convert `mi` to `km`.\n- `convertHandler` should correctly convert `km` to `mi`.\n- `convertHandler` should correctly convert `lbs` to `kg`.\n- `convertHandler` should correctly convert `kg` to `lbs`.\n\nWrite the following tests in `tests/2_functional-tests.js`:\n\n- Convert a valid input such as `10L`: `GET` request to `/api/convert`.\n- Convert an invalid input such as `32g`: `GET` request to `/api/convert`.\n- Convert an invalid number such as `3/7.2/4kg`: `GET` request to `/api/convert`.\n- Convert an invalid number AND unit such as `3/7.2/4kilomegagram`: `GET` request to `/api/convert`.\n- Convert with no number such as `kg`: `GET` request to `/api/convert`.",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You can provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/metric-imperial-converter\\.freecodecamp\\.rocks/.test(\n      code\n    )\n  );"
        },
        {
          "text": "You can `GET` `/api/convert` with a single parameter containing an accepted number and unit and have it converted. (Hint: Split the input by looking for the index of the first character which will mark the start of the unit)\n\n```js\n\n```\n\nYou can convert `'gal'` to `'L'` and vice versa. (1 gal to 3.78541 L)",
          "testCode": "async () => {\n  try {\n    const data1 = await $.get(code + '/api/convert?input=1gal');\n    assert.equal(data1.returnNum, 3.78541);\n    assert.equal(data1.returnUnit, 'L');\n    const data2 = await $.get(code + '/api/convert?input=10gal');\n    assert.equal(data2.returnNum, 37.8541);\n    assert.equal(data2.returnUnit, 'L');\n    const data3 = await $.get(code + '/api/convert?input=1l');\n    assert.equal(data3.returnNum, 0.26417);\n    assert.equal(data3.returnUnit, 'gal');\n    const data4 = await $.get(code + '/api/convert?input=10l');\n    assert.equal(data4.returnNum, 2.64172);\n    assert.equal(data4.returnUnit, 'gal');\n  } catch (xhr) {\n    throw new Error(xhr.responseText || xhr.message);\n  }\n};"
        },
        {
          "text": "You can convert `'lbs'` to `'kg'` and vice versa. (1 lbs to 0.453592 kg)",
          "testCode": "async () => {\n  try {\n    const data1 = await $.get(code + '/api/convert?input=1lbs');\n    assert.equal(data1.returnNum, 0.45359);\n    assert.equal(data1.returnUnit, 'kg');\n    const data2 = await $.get(code + '/api/convert?input=10lbs');\n    assert.equal(data2.returnNum, 4.53592);\n    assert.equal(data2.returnUnit, 'kg');\n    const data3 = await $.get(code + '/api/convert?input=1kg');\n    assert.equal(data3.returnNum, 2.20462);\n    assert.equal(data3.returnUnit, 'lbs');\n    const data4 = await $.get(code + '/api/convert?input=10kg');\n    assert.equal(data4.returnNum, 22.04624);\n    assert.equal(data4.returnUnit, 'lbs');\n  } catch (xhr) {\n    throw new Error(xhr.responseText || xhr.message);\n  }\n};"
        },
        {
          "text": "You can convert `'mi'` to `'km'` and vice versa. (1 mi to 1.60934 km)",
          "testCode": "async () => {\n  try {\n    const data1 = await $.get(code + '/api/convert?input=1mi');\n    assert.equal(data1.returnNum, 1.60934);\n    assert.equal(data1.returnUnit, 'km');\n    const data2 = await $.get(code + '/api/convert?input=10mi');\n    assert.equal(data2.returnNum, 16.0934);\n    assert.equal(data2.returnUnit, 'km');\n    const data3 = await $.get(code + '/api/convert?input=1km');\n    assert.equal(data3.returnNum, 0.62137);\n    assert.equal(data3.returnUnit, 'mi');\n    const data4 = await $.get(code + '/api/convert?input=10km');\n    assert.equal(data4.returnNum, 6.21373);\n    assert.equal(data4.returnUnit, 'mi');\n  } catch (xhr) {\n    throw new Error(xhr.responseText || xhr.message);\n  }\n};"
        },
        {
          "text": "All incoming units should be accepted in both upper and lower case, but should be returned in both the `initUnit` and `returnUnit` in lower case, except for liter, which should be represented as an uppercase `'L'`.",
          "testCode": "async () => {\n  try {\n    const data1 = await $.get(code + '/api/convert?input=1gal');\n    assert.equal(data1.initUnit, 'gal');\n    assert.equal(data1.returnUnit, 'L');\n    const data2 = await $.get(code + '/api/convert?input=10L');\n    assert.equal(data2.initUnit, 'L');\n    assert.equal(data2.returnUnit, 'gal');\n    const data3 = await $.get(code + '/api/convert?input=1l');\n    assert.equal(data3.initUnit, 'L');\n    assert.equal(data3.returnUnit, 'gal');\n    const data4 = await $.get(code + '/api/convert?input=10KM');\n    assert.equal(data4.initUnit, 'km');\n    assert.equal(data4.returnUnit, 'mi');\n  } catch (xhr) {\n    throw new Error(xhr.responseText || xhr.message);\n  }\n};"
        },
        {
          "text": "If the unit of measurement is invalid, returned will be `'invalid unit'`.",
          "testCode": "async () => {\n  try {\n    const data = await $.get(code + '/api/convert?input=1min');\n    assert(data.error === 'invalid unit' || data === 'invalid unit');\n  } catch (xhr) {\n    throw new Error(xhr.responseText || xhr.message);\n  }\n};"
        },
        {
          "text": "If the number is invalid, returned will be `'invalid number'`.",
          "testCode": "async () => {\n  try {\n    const data = await $.get(\n      code + '/api/convert?input=1//2gal'\n    );\n    assert(data.error === 'invalid number' || data === 'invalid number');\n  } catch (xhr) {\n    throw new Error(xhr.responseText || xhr.message);\n  }\n};"
        },
        {
          "text": "If both the unit and number are invalid, returned will be `'invalid number and unit'`.",
          "testCode": "async () => {\n  try {\n    const data = await $.get(\n      code + '/api/convert?input=1//2min'\n    );\n    assert(\n      data.error === 'invalid number and unit' ||\n        data === 'invalid number and unit'\n    );\n  } catch (xhr) {\n    throw new Error(xhr.responseText || xhr.message);\n  }\n};"
        },
        {
          "text": "You can use fractions, decimals or both in the parameter (ie. 5, 1/2, 2.5/6), but if nothing is provided it will default to 1.",
          "testCode": "async () => {\n  try {\n    const data1 = await $.get(code + '/api/convert?input=mi');\n    assert.approximately(data1.initNum, 1, 0.001);\n    assert.approximately(data1.returnNum, 1.60934, 0.001);\n    assert.equal(data1.returnUnit, 'km');\n    const data2 = await $.get(code + '/api/convert?input=1/5mi');\n    assert.approximately(data2.initNum, 1 / 5, 0.1);\n    assert.approximately(data2.returnNum, 0.32187, 0.001);\n    assert.equal(data2.returnUnit, 'km');\n    const data3 = await $.get(\n      code + '/api/convert?input=1.5/7km'\n    );\n    assert.approximately(data3.initNum, 1.5 / 7, 0.001);\n    assert.approximately(data3.returnNum, 0.13315, 0.001);\n    assert.equal(data3.returnUnit, 'mi');\n    const data4 = await $.get(\n      code + '/api/convert?input=3/2.7km'\n    );\n    assert.approximately(data4.initNum, 3 / 2.7, 0.001);\n    assert.approximately(data4.returnNum, 0.69041, 0.001);\n    assert.equal(data4.returnUnit, 'mi');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "Your return will consist of the `initNum`, `initUnit`, `returnNum`, `returnUnit`, and `string` spelling out units in the format `'{initNum} {initUnitString} converts to {returnNum} {returnUnitString}'` with the result rounded to 5 decimals.",
          "testCode": "async () => {\n  try {\n    const data = await $.get(code + '/api/convert?input=2mi');\n    assert.equal(data.initNum, 2);\n    assert.equal(data.initUnit, 'mi');\n    assert.approximately(data.returnNum, 3.21868, 0.001);\n    assert.equal(data.returnUnit, 'km', 'returnUnit did not match');\n    assert.equal(data.string, '2 miles converts to 3.21868 kilometers');\n  } catch (xhr) {\n    throw new Error(xhr.responseText || xhr.message);\n  }\n};"
        },
        {
          "text": "All 16 unit tests are complete and passing.",
          "testCode": "async () => {\n  try {\n    const getTests = await $.get(code + '/_api/get-tests');\n    assert.isArray(getTests);\n    const unitTests = getTests.filter(test => {\n      return !!test.context.match(/Unit Tests/gi);\n    });\n    assert.isAtLeast(unitTests.length, 16, 'At least 16 tests passed');\n    unitTests.forEach(test => {\n      assert.equal(test.state, 'passed', 'Tests in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "All 5 functional tests are complete and passing.",
          "testCode": "async () => {\n  try {\n    const getTests = await $.get(code + '/_api/get-tests');\n    assert.isArray(getTests);\n    const functTests = getTests.filter(test => {\n      return !!test.context.match(/Functional Tests/gi);\n    });\n    assert.isAtLeast(functTests.length, 5, 'At least 5 tests passed');\n    functTests.forEach(test => {\n      assert.equal(test.state, 'passed', 'Tests in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301570,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\metric-imperial-converter.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-projects",
        "name": "Quality Assurance Projects"
      }
    },
    {
      "id": "587d824a367417b2b2512c43",
      "title": "Personal Library",
      "challengeType": 4,
      "dashedName": "personal-library",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://personal-library.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://personal-library.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-library\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "1.  Add your MongoDB connection string to `.env` without quotes as `DB`\n    Example: `DB=mongodb://admin:pass@1234.mlab.com:1234/fccpersonallib`\n2.  In your `.env` file set `NODE_ENV` to `test`, without quotes\n3.  You need to create all routes within `routes/api.js`\n4.  You will create all functional tests in `tests/2_functional-tests.js`",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You can provide your own project, not the example URL.",
          "testCode": "assert(\n    !/.*\\/personal-library\\.freecodecamp\\.rocks/.test(code)\n  );"
        },
        {
          "text": "You can send a <b>POST</b> request to `/api/books` with `title` as part of the form data to add a book.  The returned response will be an object with the `title` and a unique `_id` as keys.  If `title` is not included in the request, the returned response should be the string `missing required field title`.",
          "testCode": "async () => {\n  try {\n    let data1 = await $.post(code + '/api/books', {\n      title: 'Faux Book 1'\n    });\n    assert.isObject(data1);\n    assert.property(data1, 'title');\n    assert.equal(data1.title, 'Faux Book 1');\n    assert.property(data1, '_id');\n    let data2 = await $.post(code + '/api/books');\n    assert.isString(data2);\n    assert.equal(data2, 'missing required field title');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a <b>GET</b> request to `/api/books` and receive a JSON response representing all the books. The JSON response will be an array of objects with each object (book) containing `title`, `_id`, and `commentcount` properties.",
          "testCode": "async () => {\n  try {\n    let url = code + '/api/books';\n    let a = $.post(url, { title: 'Faux Book A' });\n    let b = $.post(url, { title: 'Faux Book B' });\n    let c = $.post(url, { title: 'Faux Book C' });\n    await Promise.all([a, b, c]).then(async () => {\n      let data = await $.get(url);\n      assert.isArray(data);\n      assert.isAtLeast(data.length, 3);\n      data.forEach((book) => {\n        assert.isObject(book);\n        assert.property(book, 'title');\n        assert.isString(book.title);\n        assert.property(book, '_id');\n        assert.property(book, 'commentcount');\n        assert.isNumber(book.commentcount);\n      });\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a <b>GET</b> request to `/api/books/{_id}` to retrieve a single object of a book containing the properties `title`, `_id`, and a `comments` array (empty array if no comments present). If no book is found, return the string `no book exists`.",
          "testCode": "async () => {\n  try {\n    let url = code + '/api/books';\n    let noBook = await $.get(url + '/5f665eb46e296f6b9b6a504d');\n    assert.isString(noBook);\n    assert.equal(noBook, 'no book exists');\n    let sampleBook = await $.post(url, { title: 'Faux Book Alpha' });\n    assert.isObject(sampleBook);\n    let bookId = sampleBook._id;\n    let bookQuery = await $.get(url + '/' + bookId);\n    assert.isObject(bookQuery);\n    assert.property(bookQuery, 'title');\n    assert.equal(bookQuery.title, 'Faux Book Alpha');\n    assert.property(bookQuery, 'comments');\n    assert.isArray(bookQuery.comments);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a <b>POST</b> request containing `comment` as the form body data to `/api/books/{_id}` to add a comment to a book. The returned response will be the books object similar to <b>GET</b> `/api/books/{_id}` request in an earlier test. If `comment` is not included in the request, return the string `missing required field comment`. If no book is found, return the string `no book exists`.",
          "testCode": "async () => {\n  try {\n    let url = code + '/api/books';\n    let commentTarget = await $.post(url, { title: 'Notable Book' });\n    assert.isObject(commentTarget);\n    let bookId = commentTarget._id;\n    let bookCom1 = await $.post(url + '/' + bookId, {\n      comment: 'This book is fab!'\n    });\n    let bookCom2 = await $.post(url + '/' + bookId, {\n      comment: 'I did not care for it'\n    });\n    assert.isObject(bookCom2);\n    assert.property(bookCom2, '_id');\n    assert.property(bookCom2, 'title');\n    assert.property(bookCom2, 'comments');\n    assert.lengthOf(bookCom2.comments, 2);\n    bookCom2.comments.forEach((comment) => {\n      assert.isString(comment);\n      assert.oneOf(comment, ['This book is fab!', 'I did not care for it']);\n    });\n    let commentErr = await $.post(url + '/' + bookId);\n    assert.isString(commentErr);\n    assert.equal(commentErr, 'missing required field comment');\n    let failingComment = await $.post(url + '/5f665eb46e296f6b9b6a504d', {\n      comment: 'Never Seen Comment'\n    });\n    assert.isString(failingComment);\n    assert.equal(failingComment, 'no book exists');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a <b>DELETE</b> request to `/api/books/{_id}` to delete a book from the collection. The returned response will be the string `delete successful` if successful. If no book is found, return the string `no book exists`.",
          "testCode": "async () => {\n  try {\n    let url = code + '/api/books';\n    let deleteTarget = await $.post(url, { title: 'Deletable Book' });\n    assert.isObject(deleteTarget);\n    let bookId = deleteTarget._id;\n    let doDelete = await $.ajax({ url: url + '/' + bookId, type: 'DELETE' });\n    assert.isString(doDelete);\n    assert.equal(doDelete, 'delete successful');\n    let failingDelete = await $.ajax({\n      url: url + '/5f665eb46e296f6b9b6a504d',\n      type: 'DELETE'\n    });\n    assert.isString(failingDelete);\n    assert.equal(failingDelete, 'no book exists');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "You can send a <b>DELETE</b> request to `/api/books` to delete all books in the database. The returned response will be the string `complete delete successful` if successful.",
          "testCode": "async () => {\n  try {\n    const deleteAll = await $.ajax({\n      url: code + '/api/books',\n      type: 'DELETE'\n    });\n    assert.isString(deleteAll);\n    assert.equal(deleteAll, 'complete delete successful');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "All 10 functional tests required are complete and passing.",
          "testCode": "async () => {\n  try {\n    const getTests = await $.get(code + '/_api/get-tests');\n    assert.isArray(getTests);\n    assert.isAtLeast(getTests.length, 10, 'At least 10 tests passed');\n    getTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Test in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 301571,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\personal-library.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-projects",
        "name": "Quality Assurance Projects"
      }
    },
    {
      "id": "5e601bf95ac9d0ecd8b94afd",
      "title": "Sudoku Solver",
      "challengeType": 4,
      "dashedName": "sudoku-solver",
      "description": "Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://sudoku-solver.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://sudoku-solver.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:\n\n-   Clone <a href=\"https://github.com/freecodecamp/boilerplate-project-sudoku-solver\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.\n-   Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.",
      "instructions": "- All puzzle logic can go into `/controllers/sudoku-solver.js`\n  - The `validate` function should take a given puzzle string and check it to see if it has 81 valid characters for the input.\n  - The `check` functions should be validating against the *current* state of the board.\n  - The `solve` function should handle solving any given valid puzzle string, not just the test inputs and solutions. You are expected to write out the logic to solve this.\n- All routing logic can go into `/routes/api.js`\n- See the `puzzle-strings.js` file in `/controllers` for some sample puzzles your application should solve\n- To run the challenge tests on this page, set `NODE_ENV` to `test` without quotes in the `.env` file\n- To run the tests in the console, use the command `npm run test`.\n\nWrite the following tests in `tests/1_unit-tests.js`:\n\n-   Logic handles a valid puzzle string of 81 characters\n-   Logic handles a puzzle string with invalid characters (not 1-9 or `.`)\n-   Logic handles a puzzle string that is not 81 characters in length\n-   Logic handles a valid row placement\n-   Logic handles an invalid row placement\n-   Logic handles a valid column placement\n-   Logic handles an invalid column placement\n-   Logic handles a valid region (3x3 grid) placement\n-   Logic handles an invalid region (3x3 grid) placement\n-   Valid puzzle strings pass the solver\n-   Invalid puzzle strings fail the solver\n-   Solver returns the expected solution for an incomplete puzzle\n\nWrite the following tests in `tests/2_functional-tests.js`\n\n-   Solve a puzzle with valid puzzle string: POST request to `/api/solve`\n-   Solve a puzzle with missing puzzle string: POST request to `/api/solve`\n-   Solve a puzzle with invalid characters: POST request to `/api/solve`\n-   Solve a puzzle with incorrect length: POST request to `/api/solve`\n-   Solve a puzzle that cannot be solved: POST request to `/api/solve`\n-   Check a puzzle placement with all fields: POST request to `/api/check`\n-   Check a puzzle placement with single placement conflict: POST request to `/api/check`\n-   Check a puzzle placement with multiple placement conflicts: POST request to `/api/check`\n-   Check a puzzle placement with all placement conflicts: POST request to `/api/check`\n-   Check a puzzle placement with missing required fields: POST request to `/api/check`\n-   Check a puzzle placement with invalid characters: POST request to `/api/check`\n-   Check a puzzle placement with incorrect length: POST request to `/api/check`\n-   Check a puzzle placement with invalid placement coordinate: POST request to `/api/check`\n-   Check a puzzle placement with invalid placement value: POST request to `/api/check`",
      "boilerplate": [],
      "solution": [],
      "tests": [
        {
          "text": "You should provide your own project, not the example URL.",
          "testCode": "const url = code;\n  assert(!/.*\\/sudoku-solver\\.freecodecamp\\.rocks/.test(code));"
        },
        {
          "text": "You can `POST` `/api/solve` with form data containing `puzzle` which will be a string containing a combination of numbers (1-9) and periods `.` to represent empty spaces. The returned object will contain a `solution` property with the solved puzzle.",
          "testCode": "async () => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output =\n    '769235418851496372432178956174569283395842761628713549283657194516924837947381625';\n  const data = await fetch(code + '/api/solve', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'solution');\n  assert.equal(parsed.solution, output);\n};"
        },
        {
          "text": "If the object submitted to `/api/solve` is missing `puzzle`, the returned value will be `{ error: 'Required field missing' }`",
          "testCode": "async () => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Required field missing';\n  const data = await fetch(code + '/api/solve', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ notpuzzle: input })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'error');\n  assert.equal(parsed.error, output);\n};"
        },
        {
          "text": "If the puzzle submitted to `/api/solve` contains values which are not numbers or periods, the returned value will be `{ error: 'Invalid characters in puzzle' }`",
          "testCode": "async () => {\n  const input =\n    'AA9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Invalid characters in puzzle';\n  const data = await fetch(code + '/api/solve', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'error');\n  assert.equal(parsed.error, output);\n};"
        },
        {
          "text": "If the puzzle submitted to `/api/solve` is greater or less than 81 characters, the returned value will be `{ error: 'Expected puzzle to be 81 characters long' }`",
          "testCode": "async () => {\n  const inputs = [\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6.',\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6...'\n  ];\n  const output = 'Expected puzzle to be 81 characters long';\n  for (const input of inputs) {\n    const data = await fetch(code + '/api/solve', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ puzzle: input })\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"
        },
        {
          "text": "If the puzzle submitted to `/api/solve` is invalid or cannot be solved, the returned value will be `{ error: 'Puzzle cannot be solved' }`",
          "testCode": "async () => {\n  const input =\n    '9.9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Puzzle cannot be solved';\n  const data = await fetch(code + '/api/solve', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'error');\n  assert.equal(parsed.error, output);\n};"
        },
        {
          "text": "You can `POST` to `/api/check` an object containing `puzzle`, `coordinate`, and `value` where the `coordinate` is the letter A-I indicating the row, followed by a number 1-9 indicating the column, and `value` is a number from 1-9.",
          "testCode": "async () => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const coordinate = 'A1';\n  const value = '7';\n  const data = await fetch(code + '/api/check', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input, coordinate, value })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'valid');\n  assert.isTrue(parsed.valid);\n};"
        },
        {
          "text": "The return value from the `POST` to `/api/check` will be an object containing a `valid` property, which is `true` if the number may be placed at the provided coordinate and `false` if the number may not. If false, the returned object will also contain a `conflict` property which is an array containing the strings `\"row\"`, `\"column\"`, and/or `\"region\"` depending on which makes the placement invalid.",
          "testCode": "async () => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const coordinate = 'A1';\n  const value = '1';\n  const conflict = ['row', 'column'];\n  const data = await fetch(code + '/api/check', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input, coordinate, value })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'valid');\n  assert.isFalse(parsed.valid);\n  assert.property(parsed, 'conflict');\n  assert.include(parsed.conflict, 'row');\n  assert.include(parsed.conflict, 'column');\n};"
        },
        {
          "text": "If `value` submitted to `/api/check` is already placed in `puzzle` on that `coordinate`, the returned value will be an object containing a `valid` property with `true` if `value` is not conflicting.",
          "testCode": "async () => {\n  const input =\n  '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const coordinate = 'C3';\n  const value = '2';\n  const data = await fetch(code + '/api/check', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input, coordinate, value })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'valid');\n  assert.isTrue(parsed.valid);\n};"
        },
        {
          "text": "If the puzzle submitted to `/api/check` contains values which are not numbers or periods, the returned value will be `{ error: 'Invalid characters in puzzle' }`",
          "testCode": "async () => {\n  const input =\n    'AA9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const coordinate = 'A1';\n  const value = '1';\n  const output = 'Invalid characters in puzzle';\n  const data = await fetch(code + '/api/check', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input, coordinate, value })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'error');\n  assert.equal(parsed.error, output);\n};"
        },
        {
          "text": "If the puzzle submitted to `/api/check` is greater or less than 81 characters, the returned value will be `{ error: 'Expected puzzle to be 81 characters long' }`",
          "testCode": "async () => {\n  const inputs = [\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6.',\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6...'\n  ];\n  const coordinate = 'A1';\n  const value = '1';\n  const output = 'Expected puzzle to be 81 characters long';\n  for (const input of inputs) {\n    const data = await fetch(code + '/api/check', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ puzzle: input, coordinate, value })\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"
        },
        {
          "text": "If the object submitted to `/api/check` is missing `puzzle`, `coordinate` or `value`, the returned value will be `{ error: 'Required field(s) missing' }`",
          "testCode": "async () => {\n  const inputs = [\n    {\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      value: '1',\n    },\n    {\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      coordinate: 'A1',\n    },\n    {\n      coordinate: 'A1',\n      value: '1'\n    }\n  ];\n  for (const input of inputs) {\n    const output = 'Required field(s) missing';\n    const data = await fetch(code + '/api/check', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(input)\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"
        },
        {
          "text": "If the coordinate submitted to `api/check` does not point to an existing grid cell, the returned value will be `{ error: 'Invalid coordinate'}`",
          "testCode": "async () => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Invalid coordinate';\n  const coordinates = ['A0', 'A10', 'J1', 'A', '1', 'XZ18'];\n  const value = '7';\n  for (const coordinate of coordinates) {\n    const data = await fetch(code + '/api/check', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ puzzle: input, coordinate, value })\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"
        },
        {
          "text": "If the `value` submitted to `/api/check` is not a number between 1 and 9, the returned value will be `{ error: 'Invalid value' }`",
          "testCode": "async () => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Invalid value';\n  const coordinate = 'A1';\n  const values = ['0', '10', 'A'];\n  for (const value of values) {\n    const data = await fetch(code + '/api/check', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ puzzle: input, coordinate, value })\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"
        },
        {
          "text": "All 12 unit tests are complete and passing.",
          "testCode": "async () => {\n  try {\n    const getTests = await $.get(code + '/_api/get-tests');\n    assert.isArray(getTests);\n    const unitTests = getTests.filter((test) => {\n      return !!test.context.match(/Unit\\s*Tests/gi);\n    });\n    assert.isAtLeast(unitTests.length, 12, 'At least 12 tests passed');\n    unitTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Test in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        },
        {
          "text": "All 14 functional tests are complete and passing.",
          "testCode": "async () => {\n  try {\n    const getTests = await $.get(code + '/_api/get-tests');\n    assert.isArray(getTests);\n    const functTests = getTests.filter((test) => {\n      return !!test.context.match(/Functional\\s*Tests/gi);\n    });\n    assert.isAtLeast(functTests.length, 14, 'At least 14 tests passed');\n    functTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Test in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
        }
      ],
      "metadata": {
        "videoUrl": "",
        "forumTopicId": 462357,
        "filePath": "freeCodeCamp\\curriculum\\challenges\\english\\06-quality-assurance\\quality-assurance-projects\\sudoku-solver.md"
      },
      "section": {
        "id": "06-quality-assurance",
        "name": "06-quality-assurance"
      },
      "lesson": {
        "id": "quality-assurance-projects",
        "name": "Quality Assurance Projects"
      }
    }
  ],
  "metadata": {
    "total_challenges": 52,
    "challenges_with_content": 52
  }
}