{
  "title": "Review Dom Manipulation By Building A Rock Paper Scissors Game",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Step 1",
      "description": "The first step is to build out the function that will generate a random choice for the computer.\n\nThe `getRandomComputerResult` function will be used to get the computer's choice. Inside that function, you should see an `options` array with `\"Rock\"`, `\"Paper\"`, and `\"Scissors\"`. \n\nYour task is to complete the `getRandomComputerResult` function so that it returns a random option from the `options` array.\n\n**Tips**\n\n- You can use `Math.random()` and `Math.floor()` to help you get a random whole number. This will represent the index number for the `options` array.\n- You can use the random index to access the option from the `options` array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nfunction getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n\n}\nconsole.log(getRandomComputerResult());\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `getRandomComputerResult` function should return a string.\n\n```js\nassert.isString(getRandomComputerResult());\n```\n\nYour `getRandomComputerResult` function should return one of the options in the `options` array.\n\n```js\nassert.include([\"Rock\", \"Paper\", \"Scissors\"], getRandomComputerResult());\n```\n\nYour `getRandomComputerResult` function should return a random option each time.\n\n```js\nconst results = new Set();\n\nfor (let i = 0; i < 50; i++) {\n  results.add(getRandomComputerResult());\n}\n\nassert.hasAllKeys(results, [\"Rock\", \"Paper\", \"Scissors\"]);\n```"
    },
    {
      "title": "Step 2",
      "description": "In the game, there will be multiple rounds. The first to reach three points wins the game.\n\nIn this step, you will focus on determining if the player has won the round.\n\nComplete the `hasPlayerWonTheRound` function. This function has two parameters: `player` and `computer`. The function should return `true` if the player has won the round, and `false` if the player has lost or tied the round.\n\nHere are the criteria for the player to win a round:\n\n- If the player chooses `\"Rock\"` and the computer chooses `\"Scissors\"`\n- If the player chooses `\"Scissors\"` and the computer chooses `\"Paper\"`\n- If the player chooses `\"Paper\"` and the computer chooses `\"Rock\"`\n\nA few function calls have been provided for you to test your function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n  const randomIndex = Math.floor(Math.random() * options.length);\n  return options[randomIndex];\n}\n\n--fcc-editable-region--\nfunction hasPlayerWonTheRound(player, computer) {\n  \n}\n\nconsole.log(hasPlayerWonTheRound(\"Rock\", \"Scissors\")); \nconsole.log(hasPlayerWonTheRound(\"Scissors\", \"Rock\")); \n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `hasPlayerWonTheRound` function should return a boolean.\n\n```js\nassert.isBoolean(hasPlayerWonTheRound(\"Rock\", \"Scissors\"));\n```\n\nYour `hasPlayerWonTheRound` function should return `true` if the player chose `\"Rock\"` and the computer chose `\"Scissors\"`.\n\n```js\nassert.isTrue(hasPlayerWonTheRound(\"Rock\", \"Scissors\"));\n```\n\nYour `hasPlayerWonTheRound` function should return `true` if the player chose `\"Scissors\"` and the computer chose `\"Paper\"`.\n\n```js\nassert.isTrue(hasPlayerWonTheRound(\"Scissors\", \"Paper\"));\n```\n\nYour `hasPlayerWonTheRound` function should return `true` if the player chose `\"Paper\"` and the computer chose `\"Rock\"`.\n\n```js\nassert.isTrue(hasPlayerWonTheRound(\"Paper\", \"Rock\"));\n```\n\nYour `hasPlayerWonTheRound` function should return `false` if the player and computer chose the same option.\n\n```js\nassert.isFalse(hasPlayerWonTheRound(\"Rock\", \"Rock\"));\nassert.isFalse(hasPlayerWonTheRound(\"Scissors\", \"Scissors\"));\nassert.isFalse(hasPlayerWonTheRound(\"Paper\", \"Paper\"));\n```\n\nYour `hasPlayerWonTheRound` function should return `false` if the computer won the round.\n\n```js\nassert.isFalse(hasPlayerWonTheRound(\"Scissors\", \"Rock\"));\nassert.isFalse(hasPlayerWonTheRound(\"Paper\", \"Scissors\"));\nassert.isFalse(hasPlayerWonTheRound(\"Rock\", \"Paper\"));\n```"
    },
    {
      "title": "Step 3",
      "description": "Now it is time to get the results of the round. Complete the `getRoundResults` function. \n\nIf the player wins the round, update the `playerScore` by `1` and return the message `\"Player wins! [player's choice] beats [computer's choice]\"`.\n\nIf the computer and player choose the same option, return the message `\"It's a tie! Both chose [player's choice]\"`.\n\nIf the computer wins the round, update the `computerScore` by `1` and return the message `\"Computer wins! [computer's choice] beats [player's choice]\"`.\n\n`[computer's choice]` should be replaced with `computerResult` while `[player's choice]` should be replaced with the `userOption`.\n\n**Tips**\n\n- Remember you can use the `hasPlayerWonTheRound` function to check if the player wins the round.\n- You can use template literals or regular string concatenation to build the message.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n  const randomIndex = Math.floor(Math.random() * options.length);\n  return options[randomIndex];\n}\n\nlet playerScore = 0;\nlet computerScore = 0;\n\nfunction hasPlayerWonTheRound(player, computer) {\n  return (\n    (player === \"Rock\" && computer === \"Scissors\") ||\n    (player === \"Scissors\" && computer === \"Paper\") ||\n    (player === \"Paper\" && computer === \"Rock\")\n  );\n}\n--fcc-editable-region--\nfunction getRoundResults(userOption) {\n  const computerResult = getRandomComputerResult();\n \n}\n\nconsole.log(getRoundResults(\"Rock\"));\nconsole.log(\"Player Score: \", playerScore, \"Computer Score: \", computerScore);\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `getRoundResults` should return a string.\n\n```js\nassert.isString(getRoundResults(\"Rock\"));\n```\n\nYour `getRoundResults` function should return the correct message based on who wins the round. If no one wins, the message should say it's a tie.\n\n```js\nconst result = getRoundResults(\"Paper\")\nif(result.startsWith(\"Player wins!\")){\n  assert.strictEqual(result, \"Player wins! Paper beats Rock\")\n  assert.isAtLeast(playerScore, 1)\n} else if(result.startsWith(\"Computer wins!\")) {\n  assert.strictEqual(result, \"Computer wins! Scissors beats Paper\")\n  assert.isAtLeast(computerScore, 1)\n} else if(result.startsWith(\"It's a tie!\")){\n  assert.strictEqual(result, \"It's a tie! Both chose Paper\")\n}\n```"
    },
    {
      "title": "Step 4",
      "description": "Now it is time to update the scores and the round results message.\n\nComplete the `showResults` function. The `playerScoreSpanElement` and `computerScoreSpanElement` should be updated to show the updated scores of the player and computer.\n\nThe `roundResultsMsg` should also be updated with the result of the round.\n\n**Tips**\n\n- Remember that you learned how to work with the `innerText` property to update the text content of an element.\n- You can use the `getRoundResults` function to get the result of the round.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n  const randomIndex = Math.floor(Math.random() * options.length);\n  return options[randomIndex];\n}\n\nfunction hasPlayerWonTheRound(player, computer) {\n  return (\n    (player === \"Rock\" && computer === \"Scissors\") ||\n    (player === \"Scissors\" && computer === \"Paper\") ||\n    (player === \"Paper\" && computer === \"Rock\")\n  );\n}\n\nlet playerScore = 0;\nlet computerScore = 0;\n\nfunction getRoundResults(userOption) {\n  const computerResult = getRandomComputerResult();\n\n  if (hasPlayerWonTheRound(userOption, computerResult)) {\n    playerScore++;\n    return `Player wins! ${userOption} beats ${computerResult}`;\n  } else if (computerResult === userOption) {\n    return `It's a tie! Both chose ${userOption}`;\n  } else {\n    computerScore++;\n    return `Computer wins! ${computerResult} beats ${userOption}`;\n  }\n}\n\n--fcc-editable-region--\nconst playerScoreSpanElement = document.getElementById(\"player-score\");\nconst computerScoreSpanElement = document.getElementById(\"computer-score\");\nconst roundResultsMsg = document.getElementById(\"results-msg\");\n\nfunction showResults(userOption) {\n\n};\n\nshowResults(\"Rock\");\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your `showResults` function should update the `roundResultsMsg` with the result of the round.\n\n```js\nconst possibleResults = [\n  \"Player wins! Rock beats Scissors\",\n  \"Player wins! Scissors beats Paper\",\n  \"Player wins! Paper beats Rock\", \n  \"Computer wins! Paper beats Rock\",\n  \"Computer wins! Scissors beats Paper\",\n  \"Computer wins! Rock beats Scissors\",\n  \"It's a tie! Both chose Rock\",\n  \"It's a tie! Both chose Scissors\",\n  \"It's a tie! Both chose Paper\"\n];\nshowResults(\"Rock\");\nassert.include(possibleResults, roundResultsMsg.innerText.replace(/\\//g, \"'\"));\n```\n\nYour `showResults` function should update the `computerScoreSpanElement` to show the updated score of the computer.\n\n```js\ncomputerScore = 0;\nconst oldRandomResult = getRandomComputerResult;\ngetRandomComputerResult = () => \"Rock\";\n\nshowResults(\"Scissors\");\nassert.equal(computerScoreSpanElement.innerText, \"1\");\n\ngetRandomComputerResult = oldRandomResult;\n```\n\nYour `showResults` function should update the `playerScoreSpanElement` to show the updated score of the player.\n\n```js\nplayerScore = 0;\nconst oldRandomResult = getRandomComputerResult;\ngetRandomComputerResult = () => \"Scissors\";\n\nshowResults(\"Rock\");\nassert.equal(playerScoreSpanElement.innerText, \"1\");\n\ngetRandomComputerResult = oldRandomResult;\n```"
    },
    {
      "title": "Step 5",
      "description": "If you try to play the game, you will see that you can play for an infinite amount of rounds. But the rules state that the first one to three points wins.\n\nInside your `showResults` function, you will need to check if the player or computer has reached three points. If either has reached three points, you should display a message indicating the winner. \n\nFor example, if the player has won the game, then the `winnerMsgElement` should be updated to `\"Player has won the game!\"`. If the computer has won the game, then the `winnerMsgElement` should be updated to `\"Computer has won the game!\"`.\n\nIf there is a winner, you will want to show the `resetGameBtn` button and hide the `optionsContainer` so the player can play again.\n\n**Tips**\n\nUse the `style.display` property on an element, with the value `\"block\"` or `\"none\"`, to show or hide the element.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n  const randomIndex = Math.floor(Math.random() * options.length);\n  return options[randomIndex];\n}\n\nfunction hasPlayerWonTheRound(player, computer) {\n  return (\n    (player === \"Rock\" && computer === \"Scissors\") ||\n    (player === \"Scissors\" && computer === \"Paper\") ||\n    (player === \"Paper\" && computer === \"Rock\")\n  );\n}\n\nlet playerScore = 0;\nlet computerScore = 0;\n\nfunction getRoundResults(userOption) {\n  const computerResult = getRandomComputerResult();\n\n  if (hasPlayerWonTheRound(userOption, computerResult)) {\n    playerScore++;\n    return `Player wins! ${userOption} beats ${computerResult}`;\n  } else if (computerResult === userOption) {\n    return `It's a tie! Both chose ${userOption}`;\n  } else {\n    computerScore++;\n    return `Computer wins! ${computerResult} beats ${userOption}`;\n  }\n}\n\n--fcc-editable-region--\nconst playerScoreSpanElement = document.getElementById(\"player-score\");\nconst computerScoreSpanElement = document.getElementById(\"computer-score\");\nconst roundResultsMsg = document.getElementById(\"results-msg\");\nconst winnerMsgElement = document.getElementById(\"winner-msg\");\nconst optionsContainer = document.querySelector(\".options-container\");\nconst resetGameBtn = document.getElementById(\"reset-game-btn\");\n\nfunction showResults(userOption) {\n  roundResultsMsg.innerText = getRoundResults(userOption);\n  computerScoreSpanElement.innerText = computerScore;\n  playerScoreSpanElement.innerText = playerScore;\n\n\n};\n--fcc-editable-region--\n\nconst rockBtn = document.getElementById(\"rock-btn\");\nconst paperBtn = document.getElementById(\"paper-btn\");\nconst scissorsBtn = document.getElementById(\"scissors-btn\");\n\nrockBtn.addEventListener(\"click\", function () {\n  showResults(\"Rock\");\n});\n\npaperBtn.addEventListener(\"click\", function () {\n  showResults(\"Paper\");\n});\n\nscissorsBtn.addEventListener(\"click\", function () {\n  showResults(\"Scissors\");\n});"
        }
      ],
      "testCode": "You should update the `winnerMsgElement` if there is a winner.\n\n```js\nwhile (playerScore < 3 && computerScore < 3) {\n  showResults(\"Rock\");\n}\n\nif (playerScore === 3) {\n  assert.equal(winnerMsgElement.innerText, \"Player has won the game!\");\n} else {\n  assert.equal(winnerMsgElement.innerText, \"Computer has won the game!\");\n}\n\n```\n\nYou should hide the `optionsContainer` and if the player or computer has reached three points.\n\n```js\nplayerScore = 3;\nshowResults(\"Scissors\");\nassert.equal(optionsContainer.style.display, \"none\");\n```\n\nYou should show the `resetGameBtn` button if the player or computer has reached three points.\n\n```js\ncomputerScore = 3;\nshowResults(\"Rock\");\nconst computedStyle = window.getComputedStyle(resetGameBtn).display;\nassert.notEqual(computedStyle, \"none\");\n```"
    },
    {
      "title": "Step 6",
      "description": "If the player or computer has won the game, there should be an option to reset the game and play again.\n\nComplete the `resetGame` function that accomplishes the following:\n\n- Resets the player and computer scores to `0`.\n- Updates the `playerScoreSpanElement` and `computerScoreSpanElement` to display the new scores.\n- Hides the `resetGameBtn` button.\n- Shows the `optionsContainer` so the player can play again.\n- Clears the content for the `winnerMsgElement` and `roundResultsMsg` elements.\n\n**Tips**\n\n- You can use the `innerText` property to update the content of an element. To clear the content of an element, you can set the `innerText` to an empty string.\n\nOnce you apply those changes, you will have completed the Rock, Paper, Scissors game!",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n  const randomIndex = Math.floor(Math.random() * options.length);\n  return options[randomIndex];\n}\n\nfunction hasPlayerWonTheRound(player, computer) {\n  return (\n    (player === \"Rock\" && computer === \"Scissors\") ||\n    (player === \"Scissors\" && computer === \"Paper\") ||\n    (player === \"Paper\" && computer === \"Rock\")\n  );\n}\n\nlet playerScore = 0;\nlet computerScore = 0;\n\nfunction getRoundResults(userOption) {\n  const computerResult = getRandomComputerResult();\n\n  if (hasPlayerWonTheRound(userOption, computerResult)) {\n    playerScore++;\n    return `Player wins! ${userOption} beats ${computerResult}`;\n  } else if (computerResult === userOption) {\n    return `It's a tie! Both chose ${userOption}`;\n  } else {\n    computerScore++;\n    return `Computer wins! ${computerResult} beats ${userOption}`;\n  }\n}\n\nconst playerScoreSpanElement = document.getElementById(\"player-score\");\nconst computerScoreSpanElement = document.getElementById(\"computer-score\");\nconst roundResultsMsg = document.getElementById(\"results-msg\");\nconst winnerMsgElement = document.getElementById(\"winner-msg\");\nconst optionsContainer = document.querySelector(\".options-container\");\nconst resetGameBtn = document.getElementById(\"reset-game-btn\");\n\nfunction showResults(userOption) {\n  roundResultsMsg.innerText = getRoundResults(userOption);\n  computerScoreSpanElement.innerText = computerScore;\n  playerScoreSpanElement.innerText = playerScore;\n\n  if (playerScore === 3 || computerScore === 3) {\n    winnerMsgElement.innerText = `${\n      playerScore === 3 ? \"Player\" : \"Computer\"\n    } has won the game!`;\n\n    resetGameBtn.style.display = \"block\";\n    optionsContainer.style.display = \"none\";\n  }\n\n};\n--fcc-editable-region--\nfunction resetGame() {\n\n};\n--fcc-editable-region--\n\nresetGameBtn.addEventListener(\"click\", resetGame);\n\nconst rockBtn = document.getElementById(\"rock-btn\");\nconst paperBtn = document.getElementById(\"paper-btn\");\nconst scissorsBtn = document.getElementById(\"scissors-btn\");\n\nrockBtn.addEventListener(\"click\", function () {\n  showResults(\"Rock\");\n});\n\npaperBtn.addEventListener(\"click\", function () {\n  showResults(\"Paper\");\n});\n\nscissorsBtn.addEventListener(\"click\", function () {\n  showResults(\"Scissors\");\n});"
        }
      ],
      "testCode": "Your `resetGame` function should set the `playerScore` to `0`.\n\n```js\nplayerScore = 1;\nresetGame();\nassert.equal(playerScore, 0);\n```\n\nYour `resetGame` function should set the `computerScore` to `0`.\n\n```js\ncomputerScore = 1;\nresetGame();\nassert.equal(computerScore, 0);\n```\n\nYour `resetGame` function should set the `playerScoreSpanElement` to `0`.\n\n```js\nplayerScoreSpanElement.innerText = \"1\";\nresetGame();\nassert.equal(playerScoreSpanElement.innerText, \"0\");\n```\n\nYour `resetGame` function should set the `computerScoreSpanElement` to `0`.\n\n```js\ncomputerScoreSpanElement.innerText = \"1\";\nresetGame();\nassert.equal(computerScoreSpanElement.innerText, \"0\");\n```\n\nYour `resetGame` function should set the `roundResultsMsg` to an empty string.\n\n```js\nrockBtn.click();\nassert.notEqual(roundResultsMsg.innerText, \"\");\nresetGame();\nassert.equal(roundResultsMsg.innerText, \"\");\n```\n\nYour `resetGame` function should set the `winnerMsgElement` to an empty string.\n\n```js\nwinnerMsgElement.innerText = \"Player has won the game!\";\nresetGame();\nassert.equal(winnerMsgElement.innerText, \"\");\n```\n\nYour `resetGame` function should hide the `resetGameBtn`.\n\n```js\nplayerScore = 3;\ncomputerScore = 3;\nrockBtn.click();\nassert.notEqual(window.getComputedStyle(resetGameBtn).display, \"none\");\nresetGame();\nassert.equal(window.getComputedStyle(resetGameBtn).display, \"none\");\n```\n\nYour `resetGame` function should show the `optionsContainer`.\n\n```js\nplayerScore = 3;\ncomputerScore = 3;\nrockBtn.click();\nassert.equal(window.getComputedStyle(optionsContainer).display, \"none\");\nresetGame();\nassert.notEqual(window.getComputedStyle(optionsContainer).display, \"none\");\n```"
    }
  ]
}