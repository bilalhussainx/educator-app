{
  "title": "Build A Cash Register Project",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Build a Cash Register",
      "description": "Here you'll build a cash register app that will return change to the customer based on the price of the item, the amount of cash provided by the customer, and the amount of cash in the cash drawer. You'll also need to show different messages to the user in different scenarios, such as when the customer provides too little cash or when the cash drawer doesn't have enough to issue the correct change.\n\nIn the `script.js` file, you have been provided with the `price` and `cid` variables. The `price` variable is the price of the item, and the `cid` variable is the cash-in-drawer, which is a 2D array listing the available currency in the cash drawer.\n\nThe other variable you will need to add is the `cash` variable, which is the amount of cash provided by the customer for the item, which is provided via an `input` element on the page.\n\nIf you'd like to test your application with different values for `price` and `cid`, make sure to declare them with the `let` keyword so they can be reassigned by our tests.\n\nYour application should show different messages depending on the price of the item, the amount of cash provided by the customer, and the amount of cash in the drawer:\n\n- `\"Status: INSUFFICIENT_FUNDS\"`: if `cash-in-drawer` is less than the change due, or if you cannot return the exact change.\n- `\"Status: CLOSED\"`: if `cash-in-drawer` is equal to the change due.\n- `\"Status: OPEN\"`: if `cash-in-drawer` is greater than the change due and you can return change, with the change due in coins and bills sorted in highest to lowest order.\n\n|    Currency Unit    |       Amount       |\n|:-------------------:|:------------------:|\n|        Penny        |    $0.01 (PENNY)   |\n|        Nickel       |   $0.05 (NICKEL)   |\n|         Dime        |     $0.1 (DIME)    |\n|       Quarter       |   $0.25 (QUARTER)  |\n|        Dollar       |      $1 (ONE)      |\n|     Five Dollars    |      $5 (FIVE)     |\n|     Ten Dollars     |      $10 (TEN)     |\n|    Twenty Dollars   |    $20 (TWENTY)    |\n| One Hundred Dollars | $100 (ONE HUNDRED) |\n\n**Objective:** Build an app that is functionally similar to <a href=\"https://cash-register.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://cash-register.freecodecamp.rocks</a>.\n\n**User Stories:**\n\n1. You should have an `input` element with an `id` of `\"cash\"`.\n1. You should have a `div`, `span` or `p` element with an `id` of `\"change-due\"`.\n1. You should have a `button` element with an `id` of `\"purchase-btn\"`.\n1. When the value in the `#cash` element is less than `price`, an alert should appear with the text `\"Customer does not have enough money to purchase the item\"`.\n1. When the value in the `#cash` element is equal to `price`, the value in the `#change-due` element should be `\"No change due - customer paid with exact cash\"`.\n1. When `price` is `19.5`, the value in the `#cash` element is `20`, `cid` is `[[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: OPEN QUARTER: $0.5\"`.\n1. When `price` is `3.26`, the value in the `#cash` element is `100`, `cid` is `[[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: OPEN TWENTY: $60 TEN: $20 FIVE: $15 ONE: $1 QUARTER: $0.5 DIME: $0.2 PENNY: $0.04\"`.\n1. When `price` is `19.5`, the value in the `#cash` element is `20`, `cid` is `[[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: INSUFFICIENT_FUNDS\"`.\n1. When `price` is `19.5`, the value in the `#cash` element is `20`, `cid` is `[[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: INSUFFICIENT_FUNDS\"`.\n1. When `price` is `19.5`, the value in the `#cash` element is `20`, `cid` is `[[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: CLOSED PENNY: $0.5\"`.\n\nFulfill the user stories and pass all the tests below to complete this project. Give it your own personal style. Happy Coding!",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": ""
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": ""
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "let price = 1.87;\nlet cid = [\n  ['PENNY', 1.01],\n  ['NICKEL', 2.05],\n  ['DIME', 3.1],\n  ['QUARTER', 4.25],\n  ['ONE', 90],\n  ['FIVE', 55],\n  ['TEN', 20],\n  ['TWENTY', 60],\n  ['ONE HUNDRED', 100]\n];"
        }
      ],
      "testCode": "You should have the HTML file link to the JavaScript file.\n\n```js\nconst script = document.querySelector('script[data-src$=\"script.js\"]');\nassert.isNotNull(script); \n```\n\nYou should have a global variable called `price`. \n\n```js\nprice = 10;\nassert.strictEqual(price, 10);\n```\n\nYou should have a global variable called `cid`. \n\n```js\ncid = []; \nassert.isDefined(cid); \n```\n\nYou should have an `input` element with an `id` of `\"cash\"`.\n\n```js\nconst el = document.getElementById('cash');\nassert.strictEqual(el?.nodeName?.toLowerCase(), 'input');\n```\n\nYou should have a `div`, `span`, or `p` element with an `id` of `\"change-due\"`.\n\n```js\nconst el = document.getElementById('change-due');\nassert(['div', 'span', 'p'].includes(el?.nodeName?.toLowerCase()));\n```\n\nYou should have a `button` element with an `id` of `\"purchase-btn\"`.\n\n```js\nconst el = document.getElementById('purchase-btn');\nassert.strictEqual(el?.nodeName?.toLowerCase(), 'button');\n```\n\nWhen `price` is `20`, the value in the `#cash` element is `10`, and the `#purchase-btn` element is clicked, an alert should appear with the text `\"Customer does not have enough money to purchase the item\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nlet alertMessage;\nwindow.alert = message => (alertMessage = message); // Override alert and store message\n// set price and customer cash\nprice = 20;\ncashInput.value = '10';\ncid = [['PENNY', 1.01], ['NICKEL', 2.05], ['DIME', 3.1], ['QUARTER', 4.25], ['ONE', 90], ['FIVE', 55], ['TEN', 20], ['TWENTY', 60], ['ONE HUNDRED', 100]];\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nassert.strictEqual(\n  alertMessage\n    ?.trim()\n    .replace(/[.,?!]+$/g, '')\n    .toLowerCase(),\n  'customer does not have enough money to purchase the item'\n);\n```\n\nWhen the value in the `#cash` element is less than `price`, and the `#purchase-btn` element is clicked, an alert should appear with the text `\"Customer does not have enough money to purchase the item\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nlet alertMessage;\nwindow.alert = message => (alertMessage = message);\n\n// Min $5.00, max $100.00, changes by $0.01, in cents.\nconst randomPrice = _randomNumber(9500) + 500;\n// Min $1.00, max price - $1, changes by $0.01, in cents.\nconst randomCash = _randomNumber(randomPrice - 200) + 100;\nprice = randomPrice / 100;\ncashInput.value = `${randomCash / 100}`;\ncid = [\n  ['PENNY', 1.01],\n  ['NICKEL', 2.05],\n  ['DIME', 3.1],\n  ['QUARTER', 4.25],\n  ['ONE', 90],\n  ['FIVE', 55],\n  ['TEN', 20],\n  ['TWENTY', 60],\n  ['ONE HUNDRED', 100]\n];\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nassert.strictEqual(\n  alertMessage\n    ?.trim()\n    .replace(/[.,?!]+$/g, '')\n    .toLowerCase(),\n  'customer does not have enough money to purchase the item'\n);\n```\n\nWhen `price` is `11.95`, the value in the `#cash` element is `11.95`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"No change due - customer paid with exact cash\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n// set price and customer cash\nprice = 11.95;\ncashInput.value = '11.95';\ncid = [['PENNY', 1.01], ['NICKEL', 2.05], ['DIME', 3.1], ['QUARTER', 4.25], ['ONE', 90], ['FIVE', 55], ['TEN', 20], ['TWENTY', 60], ['ONE HUNDRED', 100]];\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nassert.strictEqual(\n  changeDueDiv.innerText\n    .trim()\n    .replace(/[.,?!]+$/g, '')\n    .toLowerCase(),\n  'no change due - customer paid with exact cash'\n);\n```\n\nWhen the value in the `#cash` element is equal to `price`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"No change due - customer paid with exact cash\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n\n// Min $1.00, max $50.00, changes by $0.01, in cents.\nconst randomPrice = _randomNumber(4900) + 100;\nprice = randomPrice / 100;\ncashInput.value = `${price}`;\ncid = [\n  ['PENNY', 1.01],\n  ['NICKEL', 2.05],\n  ['DIME', 3.1],\n  ['QUARTER', 4.25],\n  ['ONE', 90],\n  ['FIVE', 55],\n  ['TEN', 20],\n  ['TWENTY', 60],\n  ['ONE HUNDRED', 100]\n];\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nassert.strictEqual(\n  changeDueDiv.innerText\n    .trim()\n    .replace(/[.,?!]+$/g, '')\n    .toLowerCase(),\n  'no change due - customer paid with exact cash'\n);\n```\n\nWhen `price` is `19.5`, the value in the `#cash` element is `20`, `cid` is `[[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: OPEN QUARTER: $0.5\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n// set price, customer cash, and cid\nprice = 19.5;\ncashInput.value = 20;\ncid = [\n  ['PENNY', 1.01],\n  ['NICKEL', 2.05],\n  ['DIME', 3.1],\n  ['QUARTER', 4.25],\n  ['ONE', 90],\n  ['FIVE', 55],\n  ['TEN', 20],\n  ['TWENTY', 60],\n  ['ONE HUNDRED', 100]\n];\n\nconst expected = ['Status: OPEN', 'QUARTER: $0.5'];\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nconst result = changeDueDiv.innerText.trim().toLowerCase();\nassert.isTrue(expected.every(str => result.includes(str.toLowerCase())));\nconst notExpected = [\n  /PENNY/,\n  /NICKEL/,\n  /DIME/,\n  /ONE [^H]/,\n  /FIVE/,\n  /TEN/,\n  /TWENTY/,\n  /ONE HUNDRED/\n];\nassert.isTrue(!notExpected.some(regex => result.match(new RegExp(regex, 'i'))));\n```\n\nWhen `price` is `3.26`, the value in the `#cash` element is `100`, `cid` is `[[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: OPEN TWENTY: $60 TEN: $20 FIVE: $15 ONE: $1 QUARTER: $0.5 DIME: $0.2 PENNY: $0.04\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n// set price, customer cash, and cid\nprice = 3.26;\ncashInput.value = 100;\ncid = [\n  ['PENNY', 1.01],\n  ['NICKEL', 2.05],\n  ['DIME', 3.1],\n  ['QUARTER', 4.25],\n  ['ONE', 90],\n  ['FIVE', 55],\n  ['TEN', 20],\n  ['TWENTY', 60],\n  ['ONE HUNDRED', 100]\n];\n\nconst expected = [\n  'Status: OPEN',\n  'TWENTY: $60',\n  'TEN: $20',\n  'FIVE: $15',\n  'ONE: $1',\n  'QUARTER: $0.5',\n  'DIME: $0.2',\n  'PENNY: $0.04'\n];\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nconst result = changeDueDiv.innerText.trim().toLowerCase();\nassert.isTrue(expected.every(str => result.includes(str.toLowerCase())));\nconst notExpected = [/NICKEL/];\nassert.isTrue(!notExpected.some(regex => result.match(new RegExp(regex, 'i'))));\n```\n\nWhen `price` is less than the value in the `#cash` element, total cash in drawer `cid` is greater than the change due, individual denomination amounts allows for returning change due, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: OPEN\"` with required change due in coins and bills sorted in highest to lowest order.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n\n// Min $50, max $100, changes by $10, in cents.\nconst randomCash = _randomNumber(5) * 1000 + 5000;\n// Min $5.00, max $30.00, changes by $0.01, in cents.\nconst randomChange = _randomNumber(2500) + 500;\nprice = (randomCash - randomChange) / 100;\ncashInput.value = `${randomCash / 100}`;\n\nlet changeLeft = randomChange;\nconst _expectedChangeDue = [];\nconst _cashInDrawer = [];\nfor (const [denominationName, denomination] of _money) {\n  const drawerCount = _randomNumber(15);\n  _cashInDrawer.push([denominationName, (denomination * drawerCount) / 100]);\n  if (denomination <= changeLeft && drawerCount > 0) {\n    const maxCountInChange = Math.floor(changeLeft / denomination);\n    const actualCount = Math.min(drawerCount, maxCountInChange);\n    const amountInChange = actualCount * denomination;\n    _expectedChangeDue.push([denominationName, amountInChange / 100]);\n    changeLeft -= amountInChange;\n  }\n}\n\n// At least changeLeft is needed in pennies, to make returning change due possible.\nconst drawerCount = _randomNumber(100) + changeLeft;\n_cashInDrawer.push(['PENNY', drawerCount / 100]);\nif (changeLeft > 0) {\n  _expectedChangeDue.push(['PENNY', changeLeft / 100]);\n}\n\ncid = _cashInDrawer.reverse();\nconst expected = [\n  'Status: OPEN',\n  ..._expectedChangeDue\n    .reverse()\n    .map(([denominationName, amount]) => `${denominationName}: $${amount}`)\n];\nconst notExpected = _denomRegexes.filter(\n  regex => !expected.some(change => change.match(new RegExp(regex, 'i')))\n);\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nconst result = changeDueDiv.innerText.trim().toLowerCase();\nassert.isTrue(expected.every(str => result.includes(str.toLowerCase())));\nassert.isTrue(!notExpected.some(regex => result.match(new RegExp(regex, 'i'))));\n```\n\nWhen `price` is `19.5`, the value in the `#cash` element is `20`, `cid` is `[[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: INSUFFICIENT_FUNDS\"`\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n// set price, customer cash, and cid\nprice = 19.5;\ncashInput.value = 20;\ncid = [\n  ['PENNY', 0.01],\n  ['NICKEL', 0],\n  ['DIME', 0],\n  ['QUARTER', 0],\n  ['ONE', 0],\n  ['FIVE', 0],\n  ['TEN', 0],\n  ['TWENTY', 0],\n  ['ONE HUNDRED', 0]\n];\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nassert.strictEqual(\n  changeDueDiv.innerText.trim().toLowerCase(),\n  'status: insufficient_funds'\n);\n```\n\nWhen the `price` is less than the value in the `#cash` element and the total cash in the drawer (`cid`) is insufficient to cover the change due, the purchase should not proceed. When the `#purchase-btn` is clicked under these conditions, the `#change-due` element should display `\"Status: INSUFFICIENT_FUNDS\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n\n// Min $50, max $100, changes by $10, in cents.\nconst randomCash = _randomNumber(5) * 1000 + 5000;\n// Min $5.00, max $30.00, changes by $0.01, in cents.\nconst randomChange = _randomNumber(2500) + 500;\nprice = (randomCash - randomChange) / 100;\ncashInput.value = `${randomCash / 100}`;\n\nlet changeLeft = randomChange;\nconst _cashInDrawer = [];\nfor (const [denominationName, denomination] of _money) {\n  const maxCountInChange = Math.floor(changeLeft / denomination);\n  // Amount lower than maximum (adjusted to changeLeft) will ensure total in drawer\n  // will be lower than needed change.\n  const drawerCount = _randomNumber(Math.max(0, Math.min(15, maxCountInChange - 1)));\n  const amountInDrawer = drawerCount * denomination;\n  _cashInDrawer.push([denominationName, amountInDrawer / 100]);\n  if (denomination <= changeLeft && drawerCount > 0) {\n    changeLeft -= amountInDrawer;\n  }\n}\n\n// Less pennies than changeLeft makes sure total cash in drawer is less than change due.\nconst count = _randomNumber(Math.min(15, changeLeft - 1));\n_cashInDrawer.push(['PENNY', count / 100]);\n\ncid = _cashInDrawer.reverse();\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nassert.strictEqual(\n  changeDueDiv.innerText.trim().toLowerCase(),\n  'status: insufficient_funds'\n);\n```\n\nWhen `price` is `19.5`, the value in the `#cash` element is `20`, `cid` is `[[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: INSUFFICIENT_FUNDS\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n// set price, customer cash, and cid\nprice = 19.5;\ncashInput.value = 20;\ncid = [\n  ['PENNY', 0.01],\n  ['NICKEL', 0],\n  ['DIME', 0],\n  ['QUARTER', 0],\n  ['ONE', 1],\n  ['FIVE', 0],\n  ['TEN', 0],\n  ['TWENTY', 0],\n  ['ONE HUNDRED', 0]\n];\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nassert.strictEqual(\n  changeDueDiv.innerText.trim().toLowerCase(),\n  'status: insufficient_funds'\n);\n```\n\n\nWhen `price` is less than the value in the `#cash` element, total cash in drawer `cid` is greater than change due, but the individual denomination amounts make it impossible to return needed change, when the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: INSUFFICIENT_FUNDS\"`\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n\n// Min $50, max $100, changes by $10, in cents.\nconst randomCash = _randomNumber(5) * 1000 + 5000;\n// Min $5.00, max $30.00, changes by $0.01, in cents.\nconst randomChange = _randomNumber(2500) + 500;\nprice = (randomCash - randomChange) / 100;\ncashInput.value = `${randomCash / 100}`;\n\nlet changeLeft = randomChange;\nconst _expectedChangeDue = [];\nconst _cashInDrawer = [];\nfor (const [denominationName, denomination] of _money) {\n  const maxCountInChange = Math.floor(changeLeft / denomination);\n  // If denomination can complete required changeLeft, available amount in drawer cannot\n  // equal the maximum. Otherwise count in drawer can be greater than maximum count in change.\n  let defaultAmount = denomination < 100 ? 3 : 15\n  const drawerCount = _randomNumber(\n    changeLeft % denomination === 0 ? Math.min(defaultAmount, maxCountInChange - 1) : defaultAmount\n  );\n  const amountInDrawer = drawerCount * denomination;\n  _cashInDrawer.push([denominationName, amountInDrawer / 100]);\n  const changeCount = Math.min(drawerCount, maxCountInChange);\n  if (denomination <= changeLeft && changeCount > 0) {\n    changeLeft -= changeCount * denomination;\n  }\n}\n\n// Less pennies than changeLeft makes impossible to return change due.\nconst drawerCount = _randomNumber(Math.min(15, changeLeft - 1));\n_cashInDrawer.push(['PENNY', drawerCount / 100]);\n\ncid = _cashInDrawer.reverse();\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nassert.strictEqual(\n  changeDueDiv.innerText.trim().toLowerCase(),\n  'status: insufficient_funds'\n);\n```\n\nWhen `price` is `19.5`, the value in the `#cash` element is `20`, `cid` is `[[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]`, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: CLOSED PENNY: $0.5\"`.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n// set price, customer cash, and cid\nprice = 19.5;\ncashInput.value = 20;\ncid = [\n  ['PENNY', 0.5],\n  ['NICKEL', 0],\n  ['DIME', 0],\n  ['QUARTER', 0],\n  ['ONE', 0],\n  ['FIVE', 0],\n  ['TEN', 0],\n  ['TWENTY', 0],\n  ['ONE HUNDRED', 0]\n];\n\nconst expected = ['Status: CLOSED', 'PENNY: $0.5'];\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nconst result = changeDueDiv.innerText.trim().toLowerCase();\nassert.isTrue(expected.every(str => result.includes(str.toLowerCase())));\nconst notExpected = [\n  /NICKEL/,\n  /DIME/,\n  /QUARTER/,\n  /ONE [^H]/,\n  /FIVE/,\n  /TEN/,\n  /TWENTY/,\n  /ONE HUNDRED/\n];\nassert.isTrue(!notExpected.some(regex => result.match(new RegExp(regex, 'i'))));\n```\n\nWhen `price` is less than the value in the `#cash` element, total cash in drawer `cid` is equal to change due, and the `#purchase-btn` element is clicked, the value in the `#change-due` element should be `\"Status: CLOSED\"` with change due in coins and bills sorted in highest to lowest order.\n\n```js\nconst cashInput = document.getElementById('cash');\nconst purchaseBtn = document.getElementById('purchase-btn');\nconst changeDueDiv = document.getElementById('change-due');\n\n// Min $50, max $100, changes by $10, in cents.\nconst randomCash = _randomNumber(5) * 1000 + 5000;\n// Min $5.00, max $30.00, changes by $0.01, in cents.\nconst randomChange = _randomNumber(2500) + 500;\nprice = (randomCash - randomChange) / 100;\ncashInput.value = `${randomCash / 100}`;\n\nlet changeLeft = randomChange;\nconst _expectedChangeDue = [];\nconst _cashInDrawer = [];\nfor (const [denominationName, denomination] of _money) {\n  const maxCountInChange = Math.floor(changeLeft / denomination);\n  const drawerCount = _randomNumber(maxCountInChange);\n  const amountInDrawer = drawerCount * denomination;\n  _cashInDrawer.push([denominationName, amountInDrawer / 100]);\n  if (denomination <= changeLeft && drawerCount > 0) {\n    _expectedChangeDue.push([denominationName, amountInDrawer / 100]);\n    changeLeft -= amountInDrawer;\n  }\n}\n\n// Pennies equal to changeLeft makes sure total cash in drawer is equal to change due.\n_cashInDrawer.push(['PENNY', changeLeft / 100]);\nif (changeLeft > 0) {\n  _expectedChangeDue.push(['PENNY', changeLeft / 100]);\n}\n\ncid = _cashInDrawer.reverse();\nconst expected = [\n  'Status: CLOSED',\n  ..._expectedChangeDue\n    .reverse()\n    .map(([denominationName, amount]) => `${denominationName}: $${amount}`)\n];\nconst notExpected = _denomRegexes.filter(\n  regex => !expected.some(change => change.match(new RegExp(regex, 'i')))\n);\n\ncashInput.dispatchEvent(new Event('change'));\npurchaseBtn.click();\nconst result = changeDueDiv.innerText.trim().toLowerCase();\nassert.isTrue(expected.every(str => result.includes(str.toLowerCase())));\nassert.isTrue(!notExpected.some(regex => result.match(new RegExp(regex, 'i'))));\n```"
    }
  ]
}