{
  "title": "Learn Recursion By Building A Decimal To Binary Converter",
  "description": "A project-based course on javascript imported from freeCodeCamp.",
  "language": "javascript",
  "lessons": [
    {
      "title": "Step 1",
      "description": "In this project, you'll build a decimal and binary converter and learn about both number systems. You'll also learn about recursion by using it to perform the conversions.\n\nAll of the HTML and CSS for this project has been provided for you.\n\nWhen you're ready to get started, use the `.getElementById()` method to get the `input` element with the id `\"number-input\"`, and store it in a variable called `numberInput`. Use the same method to get the `button` element with the id `\"convert-btn\"` and store it in a variable called `convertBtn`, and the `output` element with the id `\"result\"` and store it in a variable called `result`.\n\n\n**NOTE**: This project will only convert positive numbers into binary.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should use the `document.getElementById()` method to get the `#number-input` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)number-input\\1\\s*\\)/);\n```\n\nYou should use `const` to declare a variable called `numberInput` and assign it the `#number-input` element. \n\n```js\nassert.match(code, /const\\s+numberInput\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)number-input\\1\\s*\\)/);\n```\n\nYou should use the `document.getElementById()` method to get the `#convert-btn` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)convert-btn\\1\\s*\\)/);\n```\n\nYou should use `const` to declare a variable called `convertBtn` and assign it the `#convert-btn` element. \n\n```js\nassert.match(code, /const\\s+convertBtn\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)convert-btn\\1\\s*\\)/);\n```\n\nYou should use the `document.getElementById()` method to get the `#result` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)result\\1\\s*\\)/);\n```\n\nYou should use `const` to declare a variable called `result` and assign it the `#result` element. \n\n```js\nassert.match(code, /const\\s+result\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)result\\1\\s*\\)/);\n```"
    },
    {
      "title": "Step 2",
      "description": "Now you'll do some setup to check the value in the number input element whenever the user clicks the `Convert` button.\n\nFirst, create an empty function called `checkUserInput`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "`checkUserInput` should be a function.\n\n```js\nassert.isFunction(checkUserInput);\n```\n\nYour `checkUserInput` function should be empty.\n\n```js\nassert.match(String(checkUserInput), /\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 3",
      "description": "A good way to test that everything is working is to log the `value` attribute of `numberInput` to the console. As a reminder, you can access the `value` attribute of an element by using dot or bracket notation.\n\nWithin the `checkUserInput` function, use `console.log()` to log the `value` of `numberInput` to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  --fcc-editable-region--\n  \n  --fcc-editable-region--\n};"
        }
      ],
      "testCode": "Your `console.log()` call should be inside the `checkUserInput` function.\n\n```js\nassert.match(String(checkUserInput), /console\\.log\\(\\s*.*/);\n```\n\nYou should use `console.log()` to log the `value` of `numberInput` to the console.\n\n```js\nassert.match(String(checkUserInput), /console\\.log\\(\\s*numberInput\\.value\\s*\\)|console\\.log\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)/);\n```"
    },
    {
      "title": "Step 7",
      "description": "If you open your browser's console and type in the number input, you'll see event objects logged to the browser. And if you take a closer look at one of those event objects, you'll see helpful properties like `type` and `target`.\n\nSince you want to perform an action when the `Enter` key is pressed, the most helpful property is `key`, which tells you the string value of the key that was pressed.\n\nRemove the `console.log()` statement from the callback function and add an `if` statement that checks if `e.key` is equal to the string `\"Enter\"`. Leave the body of your `if` statement empty for now.\n\nNote: Since the `Enter` and `Return` keys have similar functions, they both have the same string value of `\"Enter\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  --fcc-editable-region--\n  console.log(e);\n  --fcc-editable-region--\n});"
        }
      ],
      "testCode": "Your callback function should not contain a `console.log()` statement.\n\n```js\nassert.notMatch(code, /('|\"|`)keydown\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*{\\s*.*console\\.log\\(/);\n```\n\nYour `if` statement should check if `e.key` is equal to the string `\"Enter\"`.\n\n```js\nassert.match(code, /if\\s*\\(\\s*(?:e\\s*\\.\\s*key\\s*===?\\s*('|\"|`)Enter\\1|('|\"|`)Enter\\2\\s*===?\\s*e\\s*\\.key)\\s*\\)\\s*\\{/);\n```\n\nThe body of your `if` statement should be empty.\n\n```js\nassert.match(code, /if\\s*\\(\\s*(?:e\\s*\\.\\s*key\\s*===?\\s*('|\"|`)Enter\\1|('|\"|`)Enter\\2\\s*===?\\s*e\\s*\\.key)\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 8",
      "description": "Next, within the body of the `if` statement, call the `checkUserInput()` function. After this, if you enter numbers into the number input and press the `Enter` / `Return` key, you should see numbers logged to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n  }\n});"
        }
      ],
      "testCode": "You should call the `checkUserInput()` function within the body of your `if` statement.\n\n```js\nassert.match(code, /if\\s*\\(\\s*e\\s*\\.\\s*key\\s*===?\\s*('|\"|`)Enter\\1\\s*\\)\\s*\\{\\s*checkUserInput\\(\\s*\\)\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 10",
      "description": "In an earlier project you learned about truthy and falsy values, which are values that evaluate to `true` or `false`. In JavaScript, some common falsy values you'll see are `null`, `undefined`, the number `0`, and empty strings.\n\nRather than check if a value is equal to a falsy value, you can use the <dfn>logical NOT</dfn> operator (`!`) to check if the value itself is falsy. For example:\n\n```js\nconst num = 0;\n\nconsole.log(num === 0); // true\nconsole.log(!num); // true\n```\n\nUpdate the condition in your `if` statement to use the logical NOT operator to check if `numberInput.value` is falsy.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  --fcc-editable-region--\n  if (numberInput.value === \"\") {\n\n  }\n  --fcc-editable-region--\n\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the logical NOT operator (`!`) to check if `numberInput.value` is falsy.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*!\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\{|if\\s*\\(\\s*!\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)\\s*\\{/)\n```\n\nThe body of your `if` statement within `checkUserInput` should be empty.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*.+\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 11",
      "description": "Because the `input type=\"number\"` element allows special characters like `.`, `+`, and `e`, users can input floats like `2.2`, equations like `2e+3`, or even just `e`, which you don't want to allow.\n\nA good way to check and normalize numbers in JavaScript is to use the built-in `parseInt()` function, which converts a string into an integer or whole number. `parseInt()` takes at least one argument, a string to be converted into an integer, and returns either an integer or `NaN` which stands for `Not a Number`. For example:\n\n```js\nparseInt(2.2); // 2\nparseInt(\"2e+3\"); // 2\nparseInt(\"e\") // NaN\n```\n\nAdd a logical OR operator (`||`) after the first condition in your `if` statement. Then, pass the value of `numberInput` into the `parseInt()` function as the second condition of your `if` statement.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  --fcc-editable-region--\n  if (!numberInput.value) {\n\n  }\n  --fcc-editable-region--\n\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add the logical OR operator (`||`) after the first condition in your `if` statement, then pass the value of `numberInput` into the `parseInt()` function as the second condition of your `if` statement.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*!\\s*numberInput\\s*\\.\\s*value\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\)\\s*\\{|if\\s*\\(\\s*!\\s*numberInput\\s*\\.\\s*value\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)\\s*\\)\\s*\\{/);\n```\n\nThe body of your `if` statement within `checkUserInput` should be empty.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*.+\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 12",
      "description": "Next, you need to check if the value returned by the `parseInt()` function is a number or not.\n\nTo do that, you can use the `isNaN()` function. This function takes in a string or number as an argument, and returns `true` if it evaluates to `NaN`. For example:\n\n```js\nisNaN(\"test\"); // true\nisNaN(2); // false\nisNaN(\"3.5\"); // false\n```\n\nUpdate the second condition in your `if` statement to use the `isNaN()` function to check if the value returned by `parseInt()` is `NaN`.\n\nAlso, as we mentioned in step 1 that we are considering only positive numbers, we should add a third condition in `if` statement to check whether the number is less than 0 (i.e negative numbers).\n\n```js\n 6 < 0; // false\n-1 < 0; // true\n-8 < 0; // true\n 0 < 0; //false\n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  --fcc-editable-region--\n  if (!numberInput.value || parseInt(numberInput.value)) {\n\n  }\n  --fcc-editable-region--\n\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should wrap the value returned by `parseInt()` in the `isNaN()` function. And add a third condition which checks the value returned by `parseInt()` to be less than 0.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*!\\s*numberInput\\s*\\.\\s*value\\s*\\|\\|\\s*isNaN\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\)\\s*\\|\\|\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\<\\s*0\\s*\\)\\s*\\{/);\n```\n\nThe body of your `if` statement within `checkUserInput` should be empty.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*.+\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 13",
      "description": "Now you can alert the user if they don't enter a number, or the number is invalid before you attempt to convert it into binary.\n\nIn the body of the `if` statement, use the `alert()` method to display the text `\"Please provide a decimal number greater than or equal to 0\"`.\n\nNote that `alert()` is a method on the `window` object in the browser, so you can use either `window.alert()` or `alert()`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n  }\n\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should call the `alert()` method within the body of your `if` statement within `checkUserInput`.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*.+\\s*\\)\\s*\\{\\s*(?:window\\.|globalThis\\.)?alert\\(/);\n```\n\nWhen there is a falsy value in the `#number-input` element and the `checkUserInput()` function is called, the `alert()` method should display the text `\"Please provide a decimal number greater than or equal to 0\"`.\n\n```js\nconst numberInput = document.getElementById(\"number-input\");\nlet alertMessage;\nwindow.alert = (message) => alertMessage = message; // Override alert and store message\n\nnumberInput.value = '';\ncheckUserInput();\n\nassert.strictEqual(alertMessage?.trim().replace(/[.,?!]+$/g, '').toLowerCase(), 'please provide a decimal number greater than or equal to 0');\n```"
    },
    {
      "title": "Step 14",
      "description": "After alerting the user if the number input is empty or the value is not a number, you can use the `return` keyword to break out of this function early. This will prevent future code in this function from running.\n\nAdd the `return` keyword after `alert()`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    --fcc-editable-region--\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n\n    --fcc-editable-region--\n  }\n\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `return` keyword after `alert()`.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*.+\\s*\\)\\s*\\{\\s*(window\\s*.|globalThis\\s*.)?\\s*alert\\(\\s*('|\"|`)please provide a decimal number greater than or equal to 0\\2\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}/i);\n```"
    },
    {
      "title": "Step 15",
      "description": "Now you'll start building the function to actually do the decimal to binary conversion.\n\nCreate a function called `decimalToBinary` with `input` as a parameter. Leave the body of the function empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "`decimalToBinary` should be a function.\n\n```js\nassert.isFunction(decimalToBinary);\n```\n\nYou should pass `input` as a parameter to your `decimalToBinary` function.\n\n```js\nassert.match(String(decimalToBinary), /function\\s+decimalToBinary\\s*\\(\\s*input\\s*\\)/);\n```\n\nThe body of your `decimalToBinary` function should be empty.\n\n```js\nassert.match(String(decimalToBinary), /function\\s+decimalToBinary\\s*\\(\\s*input\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 16",
      "description": "Within your `checkUserInput` function, remove the `console.log()` statement. Then, call the `decimalToBinary` function and pass in the `value` of `numberInput` as an argument. Also, make sure to use the `parseInt()` function to convert the input into a number.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  --fcc-editable-region--\n  console.log(numberInput.value);\n  --fcc-editable-region--\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should remove the `console.log()` statement from your `checkUserInput` function.\n\n```js\nassert.notMatch(String(checkUserInput), /alert\\(\\s*('|\"|`)\\s*(\\s|.)*\\s*\\1\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*console\\.log\\((\\s|.)*\\)/);\n```\n\nYou should call the `decimalToBinary` function after the `if` statement within the body of your `checkUserInput` function.\n\n```js\nassert.match(String(checkUserInput), /(?:window\\.|globalThis\\.)?alert\\(\\s*('|\"|`)\\s*(\\s|.)*\\s*\\1\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}\\s*decimalToBinary\\(/);\n```\n\nYou should use `parseInt()` to convert the `value` of `numberInput` into a number, and pass that as an argument to the `decimalToBinary` function.\n\n```js\nassert.match(String(checkUserInput), /decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\)|decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\1\\s*\\]\\s*\\)\\s*\\)/);\n```"
    },
    {
      "title": "Step 18",
      "description": "Now that your function is set up, it's time to learn about <dfn>binary numbers</dfn>.\n\nBinary numbers are a <dfn>base-2</dfn> number system. Unlike the <dfn>base-10</dfn> or decimal number system we use every day that uses 10 digits (`0-9`) to form numbers, the binary number system only has two digits, `0` and `1`. In computer science, these binary digits are called <dfn>bits</dfn>, and are the smallest unit of data computers can process. For computers, `0` represents `false` or \"off\", and `1` represents `true` or \"on\".\n\nIn your `decimalToBinary` function, use the `return` keyword to return a string of the binary number representation of `true`.\n\nNote: Binary numbers can be long sequences that start with `0`, so they are often represented as strings.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  --fcc-editable-region--\n  \n  --fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `decimalToBinary` function should return a string.\n\n```js\nassert.isString(decimalToBinary());\n```\n\nYour `decimalToBinary` function should return `1` as a string.\n\n```js\nassert.strictEqual(decimalToBinary(), '1');\n```"
    },
    {
      "title": "Step 5",
      "description": "Your `Convert` button should be working now. But it could get tiring for users to enter in a number, then click that button each time they want to convert from decimal to binary. It would be much more convenient to perform the conversion when the `Enter` or `Return` key is pressed.\n\nThe `keydown` event fires every time a user presses a key on their keyboard, and is a good way to add more interactivity to `input` elements.\n\nChain `.addEventListener()` to `numberInput`. The event listener should listen for `keydown` events and take an empty arrow function as a callback.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `.addEventListener()` method on your `numberInput` element.\n\n```js\nassert.match(code, /numberInput\\s*\\.\\s*addEventListener\\s*\\(/);\n```\n\nYour `.addEventListener()` method should listen for the `keydown` event.\n\n```js\nassert.match(code, /numberInput\\s*\\.\\s*addEventListener\\s*\\(\\s*('|\"|`)keydown\\1\\s*,?/);\n```\n\nYour `.addEventListener()` method should take a callback function using the arrow syntax.\n\n```js\nassert.match(code, /('|\"|`)keydown\\1\\s*,\\s*\\(\\s*\\)\\s*=>/);\n```\n\nYour callback function should be empty.\n\n```js\nassert.match(code, /('|\"|`)keydown\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*{\\s*}\\s*\\)/);\n```"
    },
    {
      "title": "Step 4",
      "description": "Now that your `checkUserInput()` function is set up for testing, you can use an event listener to call the function when users click the `Convert` button.\n\nChain the `.addEventListener()` method to `convertBtn`. The event listener should listen for `click` events and take a reference to the `checkUserInput` function as a callback. Remember that function references are not called with parentheses.\n\nOnce that's done, whenever you click the `Convert` button, the value of the number input should be logged to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  console.log(numberInput.value);\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--"
        }
      ],
      "testCode": "You should call the `.addEventListener()` method on your `convertBtn` element.\n\n```js\nassert.match(code, /convertBtn\\s*\\.\\s*addEventListener\\s*\\(/);\n```\n\nYour `.addEventListener()` method should listen for the `click` event.\n\n```js\nassert.match(code, /convertBtn\\s*\\.\\s*addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*,?/);\n```\n\nYour `.addEventListener()` method should take `checkUserInput` as the callback. Remember to pass the function reference, not the function call.\n\n```js\nassert.match(code, /convertBtn\\s*\\.\\s*addEventListener\\s*\\(\\s*('|\"|`)click\\1\\s*,\\s*checkUserInput\\s*\\)/);\n```"
    },
    {
      "title": "Step 6",
      "description": "Whenever an event listener is triggered by an event, an event object is created automatically. You don't always need to use this object, like with your `click` handler above, but it can be useful to access information about the event that was triggered.\n\nFirst, pass `e` as a parameter to your callback function. Remember that `e` is a common parameter name for the event object. Next, log `e` to the console in the body of your callback function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\n--fcc-editable-region--\nnumberInput.addEventListener(\"keydown\", () => {\n  \n});\n--fcc-editable-region--"
        }
      ],
      "testCode": "Your callback function should take the parameter `e`.\n\n```js\nassert.match(code, /('|\"|`)keydown\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>/);\n```\n\nYou should log `e` to the console in the body of your callback function.\n\n```js\nassert.match(code, /('|\"|`)keydown\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*{\\s*console\\.log\\(\\s*e\\s*\\)\\s*;?\\s*}\\s*\\)/);\n```"
    },
    {
      "title": "Step 9",
      "description": "Now that your `Convert` button and number input are listening for clicks and `Enter` key presses, it's time to complete the `checkUserInput()` function.\n\nIt would be helpful to alert users if they don't enter a value into the number input, or the number they enter is invalid. While the `input type=\"number\"` element makes validation easier by only allowing numbers and some special characters, remember that all values you get from HTML elements are actually strings. Also, if the number input is empty, the `value` property will be an empty string.\n\nInside your `checkUserInput` function, use an `if` statement to check if the `value` of `numberInput` is equal to an empty string. Leave the body of the `if` statement empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst checkUserInput = () => {\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n\n  console.log(numberInput.value);\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `if` statement within `checkUserInput` should check if the `value` of `numberInput` is equal to an empty string.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*numberInput\\s*\\.\\s*value\\s*===?\\s*('|\"|`)\\1\\s*\\)\\s*\\{|if\\s*\\(\\s*numberInput\\s*\\[\\s*('|\"|`)value\\2\\s*\\]\\s*===?\\s*('|\"|`)\\3\\s*\\)\\s*\\{/);\n```\n\nThe body of your `if` statement within `checkUserInput` should be empty.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*.+\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 19",
      "description": "In the base-2 number system, the rightmost digit represents the ones place, the next digit to the left represents the twos place, then the fours place, then the eights place, and so on. In this system, each digit's place value is two times greater than the digit to its right.\n\nHere are numbers zero to nine in the base-10 and base-2 number systems:\n\n```md\n| Base-10 | Base-2 |\n| ------- | ------ |\n|    0    |  0     |\n|    1    |  1     |\n|    2    |  10    |\n|    3    |  11    |\n|    4    |  100   |\n|    5    |  101   |\n|    6    |  110   |\n|    7    |  111   |\n|    8    |  1000  |\n|    9    |  1001  |\n```\n\nNotice that binary numbers are formed from left to right, from the digit with the greatest place value on the left, to the least significant on the right. For example, the number `3` in binary is `11`, or `1` in the twos place and `1` in the ones place. Then for the number `4`, a digit to represent the fours place is included on the left and set to `1`, the twos place is `0`, and the ones place is `0`.\n\nIn your `decimalToBinary` function, convert the number `10` into binary and `return` it as a string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n  return \"1\";\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `decimalToBinary` function should return a string.\n\n```js\nassert.isString(decimalToBinary());\n```\n\nYour `decimalToBinary` function should return a string with a length of `4`.\n\n```js\nassert.strictEqual(decimalToBinary().length, 4);\n```\n\nYour `decimalToBinary` function should return `\"1010\"` as a string.\n\n```js\nassert.strictEqual(decimalToBinary(), '1010');\n```"
    },
    {
      "title": "Step 20",
      "description": "Bits are often grouped into an octet, which is an 8-bit set known as a <dfn>byte</dfn>. A byte can represent any number between `0` and `255`. Here are the placement values for each bit in a byte:\n\n```md\n128 | 64 | 32 | 16 | 8 | 4 | 2 | 1\n```\n\nBecause bits are often grouped into bytes, it's common to see binary numbers represented in groups of eight, sometimes with leading zeros. For example, the number `52` can be represented as `110100`, or `00110100` with leading zeros. Here's how that breaks down with the placement values:\n\n```md\n128 | 64 | 32 | 16 | 8 | 4 | 2 | 1\n  0 |  0 |  1 |  1 | 0 | 1 | 0 | 0\n```\n\nIn your `decimalToBinary` function, convert the number `118` into binary with leading zeros and `return` it as a string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n  return \"1010\";\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `decimalToBinary` function should return a string.\n\n```js\nassert.isString(decimalToBinary());\n```\n\nYour `decimalToBinary` function should return a string with a length of `8`.\n\n```js\nassert.strictEqual(decimalToBinary().length, 8);\n```\n\nYour `decimalToBinary` function should return `\"01110110\"` as a string.\n\n```js\nassert.strictEqual(decimalToBinary(), '01110110');\n```"
    },
    {
      "title": "Step 21",
      "description": "Now that you're familiar with binary numbers, it's time to finish building the function to do the conversion for you. You'll start off with a simpler solution first, then refactor that into a recursive solution.\n\nFirst, you need to create some arrays to store the inputs and results of the division you'll do in the following steps. These will make it easier to see how the decimal to binary conversion works.\n\nRemove the `return` statement from your `decimalToBinary` function. Then, declare variables named `inputs`, `quotients`, and `remainders`, and assign an empty array to each of them.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n  return \"01110110\";\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should remove the `return` statement from your `decimalToBinary` function.\n\n```js\nassert.notMatch(String(decimalToBinary), /return\\s*('|\"|`)(\\s|\\d)*\\1\\s*;?\\s*\\}$/);\n```\n\nYou should declare a variable named `inputs`.\n\n```js\nassert.match(String(decimalToBinary), /(var|let|const)\\s+inputs/);\n```\n\nYou should assign an empty array to `inputs`.\n\n```js\nassert.match(String(decimalToBinary), /inputs\\s*=\\s*\\[\\s*\\]/);\n```\n\nYou should declare a variable named `quotients`.\n\n```js\nassert.match(String(decimalToBinary), /(var|let|const)\\s+quotients/);\n```\n\nYou should assign an empty array to `quotients`.\n\n```js\nassert.match(String(decimalToBinary), /quotients\\s*=\\s*\\[\\s*\\]/);\n```\n\nYou should declare a variable named `remainders`.\n\n```js\nassert.match(String(decimalToBinary), /(var|let|const)\\s+remainders/);\n```\n\nYou should assign an empty array to `remainders`.\n\n```js\nassert.match(String(decimalToBinary), /remainders\\s*=\\s*\\[\\s*\\]/);\n```"
    },
    {
      "title": "Step 23",
      "description": "For the decimal to binary conversion, you need to divide `input` by `2` until the <dfn>quotient</dfn>, or the result of dividing two numbers, is `0`. But since you don't know how many times you need to divide `input` by `2`, you can use a `while` loop to run a block of code as long as `input` is greater than `0` and can be divided.\n\nAs a reminder, a `while` loop is used to run a block of code as long as the condition evaluates to `true`, and the condition is checked before the code block is executed. For example:\n  \n```js\nlet i = 0;\n\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n```\n\nCreate a `while` loop that runs as long as `input` is greater than `0`. Leave the body of the loop empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  input = 0;\n\n  --fcc-editable-region--\n  \n  --fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "The condition of your `while` loop should check if `input` is greater than `0`.\n\n```js\nassert.match(String(decimalToBinary), /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{/);\n```\n\nYour `while` loop should have an empty body.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 25",
      "description": "To divide numbers in JavaScript, use the division operator (`/`). For example:\n\n```js\nconst quotient = 5 / 2; // 2.5\n```\n\nIn the example above, `5` is the <dfn>dividend</dfn>, or the number to be divided, and `2` is the <dfn>divisor</dfn>, or the number to divide by. The result, `2.5`, is called the <dfn>quotient</dfn>. \n\nInside your `while` loop, create a variable named `quotient` and assign it the value of `input` divided by `2`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n\n    input = 0;\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a variable named `quotient` inside your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*(var|let|const)\\s+quotient\\s*=/);\n```\n\nYou should assign `quotient` the value of `input` divided by `2`.\n\n```js\nassert.match(String(decimalToBinary), /(var|let|const)\\s+quotient\\s*=\\s*input\\s*\\/\\s*2\\s*/);\n```"
    },
    {
      "title": "Step 26",
      "description": "Like you saw in the last step, division can lead to a floating point number, or a number with a decimal point. The best way to handle this is to round down to the nearest whole number.\n\nUse the `Math.floor()` function to round down the quotient of `input` divided by `2` before it's assigned to `quotient`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    --fcc-editable-region--\n    const quotient = input / 2;\n    --fcc-editable-region--\n\n    input = 0;\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `Math.floor()` function to round down the quotient of `input` divided by `2`.\n\n```js\nassert.match(String(decimalToBinary), /(var|let|const)\\s+quotient\\s*=\\s*Math\\.floor\\s*\\(\\s*input\\s*\\/\\s*2\\s*\\)/);\n```"
    },
    {
      "title": "Step 27",
      "description": "Now that you have an operation that will lower the value of `input` each time the loop runs, you don't have to worry about the loop running forever.\n\nUpdate the last line of your `while` loop and assign `quotient` to `input`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n\n    --fcc-editable-region--\n    input = 0;\n    --fcc-editable-region--\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should assign `quotient` to `input` at the end of your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*input\\s*=\\s*quotient\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 28",
      "description": "Next, you need to calculate the remainder of `input` divided by `2`. You can do this by using the <dfn>remainder operator</dfn> (`%`), which returns the remainder of the division of two numbers. For example:\n  \n```js\nconst remainder = 5 % 2; // 1\n```\n\nIn other words, the dividend, `5`, can be divided by the divisor, `2`, multiple times. Then you're left with a remainder of `1`.\n\nInside your `while` loop, create a variable named `remainder` and use the remainder operator to assign it the remainder of `input` divided by `2`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n\n    input = quotient;\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a variable named `remainder` inside your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*(var|let|const)\\s+remainder\\s*=/);\n```\n\nYou should use `input` as the dividend and `2` as the divisor when calculating the remainder.\n\n```js\nassert.match(String(decimalToBinary), /(var|let|const)\\s+remainder\\s*=\\s*input\\s*%\\s*2\\s*/);\n```"
    },
    {
      "title": "Step 29",
      "description": "Inside your `while` loop, use the `.push()` method to append `input` to the `inputs` array. This will help you get a better idea of how the conversion works later when you log the contents of your arrays to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    const remainder = input % 2;\n\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n    input = quotient;\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `.push()` method on the `inputs` array within your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*inputs\\.push\\(/);\n```\n\nYou should use the `.push()` method to append `input` to the `inputs` array.\n\n```js\nassert.match(String(decimalToBinary), /inputs\\.push\\(\\s*input\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 24",
      "description": "The tricky part about `while` loops is that, if you're not careful, they can run forever. This is called an <dfn>infinite loop</dfn>, and can cause your browser to crash.\n\nTo avoid infinite loops, you need to make sure that the condition for the `while` loop eventually becomes `false`. In this case, you want to make sure that the `input` variable eventually becomes `0`.\n\nMove the `input = 0` statement into the body of the `while` loop. This will make it so that the loop will only run up to one time.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n--fcc-editable-region--\n  input = 0;\n\n  while (input > 0) {\n\n  }\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should move the `input = 0` statement into the body of the `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*input\\s*=\\s*0\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 22",
      "description": "Set `input` equal to the number `0` for now. We'll change this in the next few steps.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  --fcc-editable-region--\n  \n  --fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should set `input` equal to the number `0`.\n\n```js\nassert.match(String(decimalToBinary), /input\\s*=\\s*0\\s*;?/);\n```"
    },
    {
      "title": "Step 30",
      "description": "Use `.push()` to append the `quotient` variable to the `quotients` array. Also, append the `remainder` variable to the `remainders` array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    const remainder = input % 2;\n\n    --fcc-editable-region--\n    inputs.push(input);\n\n    --fcc-editable-region--\n    input = quotient;\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `.push()` method on the `quotients` array within your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*quotients\\.push\\(/);\n```\n\nYou should use the `.push()` method to append `quotient` to the `quotients` array.\n\n```js\nassert.match(String(decimalToBinary), /quotients\\.push\\(\\s*quotient\\s*\\)\\s*;?/);\n```\n\nYou should use the `.push()` method on the `remainders` array within your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]*remainders\\.push\\(/);\n```\n\nYou should use the `.push()` method to append `remainder` to the `remainders` array.\n\n```js\nassert.match(String(decimalToBinary), /remainders\\.push\\(\\s*remainder\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 31",
      "description": "Now's a good time to check your work.\n\nLog the text `\"Inputs: \"`, followed by a comma, followed by the `inputs` array to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    const remainder = input % 2;\n\n    inputs.push(input);\n    quotients.push(quotient);\n    remainders.push(remainder);\n    input = quotient;\n  }\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should log the text `\"Inputs: \"` and the `inputs` array to the console, separated by a comma.\n\n```js\nassert.match(String(decimalToBinary), /console\\.log\\(\\s*('|\"|`)Inputs:\\s*\\1\\s*,\\s*inputs\\s*\\)/i);\n```"
    },
    {
      "title": "Step 32",
      "description": "Next, log the text `\"Quotients: \"`, followed by a comma, followed by the `quotients` array to the console. Also, log the text `\"Remainders: \"`, followed by a comma, followed by the `remainders` array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    const remainder = input % 2;\n\n    inputs.push(input);\n    quotients.push(quotient);\n    remainders.push(remainder);\n    input = quotient;\n  }\n\n  --fcc-editable-region--\n  console.log(\"Inputs: \", inputs);\n  \n  --fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should log the text `\"Quotients: \"` and the `quotients` array to the console, separated by a comma.\n\n```js\nassert.match(String(decimalToBinary), /console\\.log\\(\\s*('|\"|`)Quotients:\\s*\\1\\s*,\\s*quotients\\s*\\)/i);\n```\n\nYou should log the text `\"Remainders: \"` and the `remainders` array to the console, separated by a comma.\n\n```js\nassert.match(String(decimalToBinary), /console\\.log\\(\\s*('|\"|`)Remainders:\\s*\\1\\s*,\\s*remainders\\s*\\)/i);\n```"
    },
    {
      "title": "Step 33",
      "description": "Now if you enter in the number `6` and click the `Convert` button, you'll see the following output:\n\n```md\nInputs:  [ 6, 3, 1 ]\nQuotients:  [ 3, 1, 0 ]\nRemainders:  [ 0, 1, 1 ]\n```\n\nNotice that the `remainders` array is the binary representation of the number `6`, but in reverse order.\n\nUse the `.reverse()` method to reverse the order of the `remainders` array, and `.join()` with an empty string as a separator to join the elements into a binary number string. Then, set `result.innerText` equal to the binary number string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    const remainder = input % 2;\n\n    inputs.push(input);\n    quotients.push(quotient);\n    remainders.push(remainder);\n    input = quotient;\n  }\n\n  console.log(\"Inputs: \", inputs);\n  console.log(\"Quotients: \", quotients);\n  console.log(\"Remainders: \", remainders);\n\n  --fcc-editable-region--\n  \n  --fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `.reverse()` method on the `remainders` array.\n\n```js\nassert.match(String(decimalToBinary), /remainders\\.reverse\\(\\s*\\)/);\n```\n\nYou should use the `.join()` with an empty string as a separator on the reversed `remainders` array.\n\n```js\nassert.match(String(decimalToBinary), /remainders\\.reverse\\(\\s*\\)\\.join\\(\\s*('|\"|`)\\1\\s*\\)/);\n```\n\nYou should set `result.innerText` equal to the binary number string.\n\n```js\nconst result = document.getElementById('result');\n\ndecimalToBinary(6);\nassert.strictEqual(result.innerText.trim(), '110');\n```"
    },
    {
      "title": "Step 34",
      "description": "Your `decimalToBinary` function works well, but there is an issue – because of the condition in your `while` loop, it only works for numbers greater than `0`. If you try to convert `0` to binary, nothing will get added to the page.\n\nTo fix this, add an `if` statement to check if `input` is equal to `0`. Leave the body of the `if` statement empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  --fcc-editable-region--\n\n  --fcc-editable-region--\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    const remainder = input % 2;\n\n    inputs.push(input);\n    quotients.push(quotient);\n    remainders.push(remainder);\n    input = quotient;\n  }\n\n  console.log(\"Inputs: \", inputs);\n  console.log(\"Quotients: \", quotients);\n  console.log(\"Remainders: \", remainders);\n\n  result.innerText = remainders.reverse().join(\"\");\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add an `if` statement that checks if `input` is equal to `0`.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{/);\n```\n\nThe body of your `if` statement should be empty.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{\\s*\\}/);\n```\n\nYour `if` statement should be written before your `while` loop.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{\\s*\\}[\\s\\S]*while\\s*\\(/);\n```"
    },
    {
      "title": "Step 35",
      "description": "Within the body of the `if` statement, set the `innerText` property of `result` equal to the string `\"0\"`. Then, use an early `return` statement to break out of the function early.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  --fcc-editable-region--\n  if (input === 0) {\n  }\n  --fcc-editable-region--\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    const remainder = input % 2;\n\n    inputs.push(input);\n    quotients.push(quotient);\n    remainders.push(remainder);\n    input = quotient;\n  }\n\n  console.log(\"Inputs: \", inputs);\n  console.log(\"Quotients: \", quotients);\n  console.log(\"Remainders: \", remainders);\n\n  result.innerText = remainders.reverse().join(\"\");\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should set the `innerText` property of `result` equal to the string `\"0\"`.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{\\s*result\\.innerText\\s*=\\s*('|\"|`)\\s*0\\s*\\1/);\n```\n\nAfter setting the `innerText` of the `result` element, you should use an early `return` statement to break out of the function early.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{\\s*result\\.innerText\\s*=\\s*('|\"|`)\\s*0\\s*\\1\\s*;?\\s*return\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 36",
      "description": "Now your `decimalToBinary` function is complete. Feel free to play around with it.\n\nBut there are some ways to improve it. For example, it's not necessary to keep track of the inputs and quotients. We can clean things up so the function is more efficient.\n\nFirst, remove everything in the body of the `decimalToBinary` function. Then, use `let` to create a variable named `binary` and assign it an empty string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n  const inputs = [];\n  const quotients = [];\n  const remainders = [];\n\n  if (input === 0) {\n    result.innerText = \"0\";\n    return;\n  }\n\n  while (input > 0) {\n    const quotient = Math.floor(input / 2);\n    const remainder = input % 2;\n\n    inputs.push(input);\n    quotients.push(quotient);\n    remainders.push(remainder);\n    input = quotient;\n  }\n\n  console.log(\"Inputs: \", inputs);\n  console.log(\"Quotients: \", quotients);\n  console.log(\"Remainders: \", remainders);\n\n  result.innerText = remainders.reverse().join(\"\");\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use `let` to create the `binary` variable.\n\n```js\nassert.match(code, /let\\s+binary\\s*/);\n```\n\nYou should create a variable named `binary` inside your `decimalToBinary` function.\n\n```js\nassert.match(code, /const\\s+decimalToBinary\\s*=\\s*(\\(\\s*input\\s*\\)|input)\\s*=>\\s*\\{\\s*let\\s+binary\\s*/);\n```\n\nYou should assign `binary` an empty string.\n\n```js\nassert.match(code, /let\\s+binary\\s*=\\s*('|\"|`)\\1\\s*;?/);\n```\n\nYou should remove everything else from the body of your `decimalToBinary` function.\n\n```js\nassert.match(code, /const\\s+decimalToBinary\\s*=\\s*(?:\\(\\s*input\\s*\\)|input)\\s*=>\\s*\\{\\s*let\\s+binary\\s*=\\s*('|\"|`)\\1\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 17",
      "description": "Finally, you should clear the number input by setting its value to an empty string. Then later when you convert several numbers in a row, you won't have to delete the previous number before entering the next one.\n\nSet the `value` property of `numberInput` to an empty string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n--fcc-editable-region--\n\n--fcc-editable-region--\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should set the `value` property of `numberInput` to an empty string.\n\n```js\nassert.match(String(checkUserInput), /decimalToBinary\\((\\s|.)*\\)\\s*;?\\s*numberInput\\s*\\.\\s*value\\s*=\\s*('|\"|`)\\2|decimalToBinary\\((\\s|.)*\\)\\s*;?\\s*numberInput\\s*\\[\\s*('|\"|`)value\\4\\s*\\]\\s*=\\s*('|\"|`)\\5/);\n```"
    },
    {
      "title": "Step 37",
      "description": "Since you'll want to display the result of the conversion, assign the `binary` variable to the `innerText` property of `result` at the end of the function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n--fcc-editable-region--\n  \n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should assign `binary` to the `innerText` property of `result`.\n\n```js\nassert.match(String(decimalToBinary), /result\\.innerText\\s*=\\s*binary\\s*/);\n```\n\nYou should assign `binary` to the `innerText` property of `result` at the end of the function.\n\n```js\nassert.match(String(decimalToBinary), /result\\.innerText\\s*=\\s*binary\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 38",
      "description": "Create a `while` loop that runs as long as `input` is greater than `0`. Inside the loop, assign `0` to `input` for now.\n\nNote: Be careful not to trigger the `decimalToBinary` function before you set `input` equal to `0` inside the loop. Otherwise, you could cause an infinite loop.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n--fcc-editable-region--\n  \n--fcc-editable-region--\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a `while` loop that runs as long as `input` is greater than `0`.\n\n```js\nassert.match(String(decimalToBinary), /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{/);\n```\n\nInside the loop, you should assign `0` to `input`.\n\n```js\nassert.match(String(decimalToBinary), /while\\s*\\([\\s\\S]+input\\s*=\\s*0\\s*;?\\s*\\}?/);\n```"
    },
    {
      "title": "Step 39",
      "description": "Recall that, each time the loop runs, `input` is the quotient of the previous value of `input` divided by `2`, rounded down. Eventually, `input` is less than `1`, and the loop stops running.\n\nYou can do this in a single step.\n\nInside your `while` loop, set `input` equal to the quotient of `input` divided by `2`. Also, remember to use `Math.floor()` to round the quotient down.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  while (input > 0) {\n--fcc-editable-region--\n    input = 0;\n--fcc-editable-region--\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should set the value of `input` within your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*input\\s*=/);\n```\n\nYou should use `Math.floor()` to round the quotient down.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*input\\s*=\\s*Math\\.floor\\(/);\n```\n\nYou should set `input` equal to the quotient of `input` divided by `2`, rounded down, within your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{\\s*input\\s*=\\s*Math\\.floor\\(\\s*input\\s*\\/\\s*2\\s*\\)\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 40",
      "description": "In the previous version of this function, you pushed the remainder of `input` divided by `2` to `binaryArray`. Then later you reversed and joined the entries into a binary number string.\n\nBut it would be easier to use string concatenation within the loop to build the binary string from right to left, so you won't need to reverse it later.\n\nFirst, use the `remainder` operator (`%`) to set `binary` equal to the remainder of `input` divided by `2`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  while (input > 0) {\n--fcc-editable-region--\n\n--fcc-editable-region--\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should set the value of `binary` within your `while` loop.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]+binary\\s*=/);\n```\n\nYou should set `binary` equal to the remainder of `input` divided by `2`.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]+binary\\s*=\\s*input\\s*%\\s*2\\s*;?/);\n```"
    },
    {
      "title": "Step 41",
      "description": "Then, use the addition operator to add the current value of `binary` to the end of the equation `input % 2`. This is what will build the binary string from right to left.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  while (input > 0) {\n--fcc-editable-region--\n    binary = input % 2;\n--fcc-editable-region--\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the addition operator (`+`) to add `binary` to the end of the equation `input % 2`.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]+binary\\s*=\\s*input\\s*%\\s*2\\s*\\+\\s*binary\\s*;?/);\n```"
    },
    {
      "title": "Step 42",
      "description": "To clean things up a bit, wrap `input % 2` in parentheses. This can sometimes change the order of operations, but in this case, it just makes your code easier to read.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  while (input > 0) {\n--fcc-editable-region--\n    binary = input % 2 + binary;\n--fcc-editable-region--\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should wrap `input % 2` in parentheses.\n\n```js\nassert.match(code, /while\\s*\\(\\s*input\\s*>\\s*0\\s*\\)\\s*\\{[\\s\\S]+binary\\s*=\\s*\\(\\s*input\\s*%\\s*2\\s*\\)\\s*\\+\\s*binary\\s*;?/);\n```"
    },
    {
      "title": "Step 43",
      "description": "Finally, you need to handle cases where `input` is `0`. Rather than update the DOM and return early like you did before, you can update the `binary` string and let the rest of the code in the function run.\n\nCreate an `if` statement that checks if `input` is equal to `0`. If it is, set `binary` equal to the string `\"0\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add an `if` statement that checks if `input` is equal to `0`.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{?/);\n```\n\nIn the body of your `if` statement, you should set `binary` equal to the string `\"0\"`.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{?\\s*binary\\s*=\\s*('|\"|`)0\\1\\s*;?\\s*\\}?/);\n```"
    },
    {
      "title": "Step 44",
      "description": "Awesome. Now you have a more efficient way to convert decimal numbers into binary. After learning a bit about the call stack and recursion, you'll refactor the `decimalToBinary` function to use recursion instead of a `while` loop.\n\nCreate a function named `a` that returns the following: `\"freeCodeCamp \" + b()`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a function named `a`.\n\n```js\nassert.isFunction(a);\n```\n\nYour function `a` should return `\"freeCodeCamp \" + b()`.\n\n```js\nassert.match(String(a), /return\\s*('|\"|`)freeCodeCamp\\s*\\1\\s*\\+\\s*b\\s*\\(\\s*\\)\\s*;?/);\n```"
    },
    {
      "title": "Step 58",
      "description": "A recursive function is a function that calls itself over and over. But you have to be careful because you can easily create an infinite loop. That's where the <dfn>base case</dfn> comes in. The base case is when the function stops calling itself, and it is a good idea to write it first.\n\nSince your `countdown()` function will count down from a given number to zero, the base case is when the `number` parameter is equal to `0`. Then it should `return` to break out of its recursive loop.\n\nUse an `if` statement to check if `number` is equal to `0`. If it is, use the `return` keyword to break out of the function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst countdown = (number) => {\n  console.log(number);\n\n--fcc-editable-region--\n  \n--fcc-editable-region--\n};\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `countdown` function should have an `if` statement that checks if `number` is equal to `0`.\n\n```js\nassert.match(String(countdown), /if\\s*\\(\\s*number\\s*===?\\s*0\\s*\\)\\s*\\{?/);\n```\n\nYour `countdown` function should `return` when `number` is equal to `0`.\n\n```js\nassert.match(String(countdown), /if\\s*\\(\\s*number\\s*===?\\s*0\\s*\\)\\s*\\{?\\s*return\\s*;?\\s*\\}?/);\n```"
    },
    {
      "title": "Step 59",
      "description": "Recursive functions also have a <dfn>recursive case</dfn>, which is where the function calls itself.\n\nFirst, convert your `if` statement into an `if...else` statement. Leave the body of your `else` statement empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst countdown = (number) => {\n  console.log(number);\n\n--fcc-editable-region--\n  if (number === 0) {\n    return;\n  }\n--fcc-editable-region--\n};\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should change your `if` statement into an `if...else` statement.\n\n```js\nassert.match(String(countdown), /if\\s*\\(\\s*number\\s*===?\\s*0\\s*\\)\\s*\\{\\s*return\\s*;?\\s*\\}\\s*else\\s*\\{/);\n```\n\nThe body of your `else` statement should be empty.\n\n```js\nassert.match(String(countdown), /else\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 57",
      "description": "The first thing you need to do is log the current value of `number` to the console to act as the countdown.\n\nUse `console.log()` to log `number` to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\n\nconst countdown = (number) => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n};\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use `console.log()` to log `number` to the console within the body of your `countdown` function.\n\n```js\nassert.match(String(countdown), /console\\.log\\(\\s*number\\s*\\)/);\n```"
    },
    {
      "title": "Step 60",
      "description": "When writing the recursive case, you need to remember two things:\n\n1. What is the base case?\n2. What is the least amount of work you need to do to get closer to the base case?\n\nSince the base case is when `number` is equal to `0`, you need to call `countdown()` again while also lowering the value of `number` by `1`.\n\nInside the `else` block, call `countdown()` and pass it `number - 1` as an argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst countdown = (number) => {\n  console.log(number);\n\n--fcc-editable-region--\n  if (number === 0) {\n    return;\n  } else {\n  }\n--fcc-editable-region--\n};\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should call `countdown()` within the body of your `else` statement.\n\n```js\nassert.match(String(countdown), /else\\s*\\{\\s*countdown\\(/);\n```\n\nYou should pass `number - 1` as an argument to `countdown()`.\n\n```js\nassert.match(String(countdown), /countdown\\(\\s*number\\s*-\\s*1\\s*\\)/);\n```"
    },
    {
      "title": "Step 61",
      "description": "It's time to test your function. Call `countdown()` with an argument of `3` to see if it works.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst countdown = (number) => {\n  console.log(number);\n\n  if (number === 0) {\n    return;\n  } else {\n    countdown(number - 1);\n  }\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should call `countdown()` with an argument of `3`.\n\n```js\nassert.match(code, /countdown\\(\\s*3\\s*\\)/);\n```"
    },
    {
      "title": "Step 62",
      "description": "To really see the call stack in action, you just need to modify the function slightly.\n\nFirst, rename the `countdown()` function to `countDownAndUp()`. Remember to update your function calls, too.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\n--fcc-editable-region--\nconst countdown = (number) => {\n  console.log(number);\n\n  if (number === 0) {\n    return;\n  } else {\n    countdown(number - 1);\n  }\n};\n\ncountdown(3);\n--fcc-editable-region--\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should not have a function named `countdown()` in your code.\n\n```js\nassert.notMatch(code, /(var|let|const)\\s+countdown\\s*=\\s*\\(\\s*[^)]*\\s*\\)\\s*=>\\s*\\{[\\s\\S]+\\}/);\n```\n\nYou should have a function named `countDownAndUp()` in your code.\n\n```js\nassert.isFunction(countDownAndUp);\n```\n\nWithin the body of the `else` statement in your `countDownAndUp()` function, you should call `countDownAndUp()` with an argument of `number - 1`.\n\n```js\nassert.match(code, /else\\s*\\{\\s*countDownAndUp\\(\\s*number\\s*-\\s*1\\s*\\)/);\n```\n\nYou should call `countDownAndUp()` with an argument of `3`.\n\n```js\nassert.match(code, /countDownAndUp\\(\\s*3\\s*\\)/);\n```"
    },
    {
      "title": "Step 64",
      "description": "Then, log `number` to the console after your recursive `countDownAndUp(number - 1)` function call.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst countDownAndUp = (number) => {\n  console.log(number);\n\n  if (number === 0) {\n    console.log(\"Reached base case\");\n    return;\n  } else {\n    --fcc-editable-region--\n    countDownAndUp(number - 1);\n\n    --fcc-editable-region--\n  }\n};\n\ncountDownAndUp(3);\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should log `number` to the console after your recursive `countDownAndUp(number - 1)` function call.\n\n```js\nassert.match(String(countDownAndUp), /countDownAndUp\\(\\s*number\\s*-\\s*1\\s*\\)\\s*;?\\s*console\\.log\\(\\s*number\\s*\\)/);\n```"
    },
    {
      "title": "Step 65",
      "description": "Now you should see a countdown from `3` to `0`, followed by `Reached base case`, and a count from `1` to `3`. This is because, after the recursive loop is finished, the function will continue to execute the code after the recursive call. This is why you see `Reached base case` before the count from `1` to `3`.\n\nNow that you have a better understanding of how the call stack and recursion work, you'll refactor the `decimalToBinary()` function to use recursion instead of a `while` loop.\n\nFirst, remove your `countDownAndUp()` function and function call.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\n--fcc-editable-region--\nconst countDownAndUp = (number) => {\n  console.log(number);\n\n  if (number === 0) {\n    console.log(\"Reached base case\");\n    return;\n  } else {\n    countDownAndUp(number - 1);\n    console.log(number);\n  }\n};\n\ncountDownAndUp(3);\n--fcc-editable-region--\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your code should not have a function named `countDownAndUp`.\n\n```js\nassert.notMatch(code, /(var|let|const)\\s+countDownAndUp\\s*=\\s*[\\s\\S]+\\}/);\n```\n\nYour code should not call the `countDownAndUp` function.\n\n```js\nassert.notMatch(code, /countDownAndUp\\([\\s\\S]+\\)/);\n```"
    },
    {
      "title": "Step 63",
      "description": "In your base case, log `\"Reached base case\"` to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst countDownAndUp = (number) => {\n  console.log(number);\n\n  if (number === 0) {\n    --fcc-editable-region--\n\n    --fcc-editable-region--\n    return;\n  } else {\n    countDownAndUp(number - 1);\n  }\n};\n\ncountDownAndUp(3);\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should log `\"Reached base case\"` to the console in your base case.\n\n```js\nassert.match(String(countDownAndUp), /if\\s*\\(\\s*number\\s*===?\\s*0\\s*\\)\\s*\\{\\s*console\\.log\\(\\s*('|\"|`)\\s*Reached base case\\s*\\1\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}/i);\n```"
    },
    {
      "title": "Step 45",
      "description": "Next, create a function named `b` that returns the following: `\"is \" + c()`.\n\nAlso, create a function named `c` that returns the following: `\"awesome!\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a function named `b`.\n\n```js\nassert.isFunction(b);\n```\n\nYou should create a function named `c`.\n\n```js\nassert.isFunction(c);\n```\n\nYour function `b` should return `\"is \" + c()`.\n\n```js\nassert.match(String(b), /return\\s*('|\"|`)is\\s*\\1\\s*\\+\\s*c\\s*\\(\\s*\\)\\s*;?/);\n```\n\nYour function `c` should return `\"awesome!\"`.\n\n```js\nassert.match(String(c), /return\\s*('|\"|`)awesome!\\1\\s*;?/);\n```"
    },
    {
      "title": "Step 46",
      "description": "Finally, call `a()` from within a `console.log()` statement to log the output to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should call `a()` from within a `console.log()` statement.\n\n```js\nassert.match(code, /console\\.log\\(\\s*a\\s*\\(\\s*\\)\\s*\\)/);\n```"
    },
    {
      "title": "Step 47",
      "description": "In computer science, a <dfn>stack</dfn> is a data structure where items are stored in a <dfn>LIFO</dfn> (last-in-first-out) manner. If you imagine a stack of books, the last book you add to the stack is the first book you can take off the stack. Or an array where you can only `.push()` and `.pop()` elements.\n\nThe <dfn>call stack</dfn> is a collection of function calls stored in a stack structure. When you call a function, it is added to the top of the stack, and when it returns, it is removed from the top / end of the stack.\n\nYou'll see this in action by creating mock call stack.\n\nInitialize a variable named `callStack` and assign it an empty array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a variable named `callStack`.\n\n```js\nassert.exists(callStack);\n```\n\nYou should assign `callStack` an empty array.\n\n```js\nassert.isArray(callStack);\nassert.isEmpty(callStack);\n```"
    },
    {
      "title": "Step 48",
      "description": "When your code runs, the `a()` function is added to the call stack first.\n\nIn your `callStack` array, add the following string: `'a(): returns \"freeCodeCamp \" + b()'`. This represents the function call and the code that will be executed.\n\nNote: Since the string you're adding includes double quotation marks (`\"`), wrap it in single quotation marks (`'`) or backticks (`` ` ``).",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst callStack = [\n\n];\n--fcc-editable-region--\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "`callStack` have a single element that is a string.\n\n```js\nassert.lengthOf(callStack, 1);\nassert.isString(callStack[0]);\n```\n\nThe string in `callStack` should be the string `'a(): returns \"freeCodeCamp \" + b()'`.\n\n```js\nassert.match(callStack[0], /a\\(\\s*\\):\\s*returns\\s*('|\"|`)freeCodeCamp\\s*\\1\\s*\\+\\s*b\\s*\\(\\s*\\)/);\n```"
    },
    {
      "title": "Step 49",
      "description": "Then, since `a()` calls `b()`, the function `b()` is added to the call stack.\n\nNext, add the following string to your `callStack` array: `\"b(): returns 'is ' + c()\"`.\n\nRemember that the call stack is a LIFO data structure, so the last function is added to the top or end of the stack, similar to pushing an element into an array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst callStack = [\n  'a(): returns \"freeCodeCamp \" + b()'\n];\n--fcc-editable-region--\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "`callStack` should have two elements that are strings.\n\n```js\nassert.lengthOf(callStack, 2);\nassert.isTrue(callStack.every((element) => typeof element === \"string\"));\n```\n\nThe second element in `callStack` should be the string `\"b(): returns 'is ' + c()\"`.\n\n```js\nassert.match(\n  callStack[1],\n  /b\\(\\s*\\):\\s*returns\\s*('|\"|`)is\\s*\\1\\s*\\+\\s*c\\s*\\(\\s*\\)/\n);\n```"
    },
    {
      "title": "Step 50",
      "description": "And since `b()` calls `c()`, the function `c()` is added to the call stack.\n\nAdd the following string to your `callStack` array: `\"c(): returns 'awesome!'\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst callStack = [\n  'a(): returns \"freeCodeCamp \" + b()',\n  'b(): returns \"is \" + c()'\n];\n--fcc-editable-region--\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "`callStack` should have three elements that are strings.\n\n```js\nassert.lengthOf(callStack, 3);\nassert.isTrue(callStack.every((element) => typeof element === \"string\"));\n```\n\nThe third element in `callStack` should be the string `\"c(): returns 'awesome!'\"`.\n\n```js\nassert.match(\n  callStack[2],\n  /c\\(\\s*\\):\\s*returns\\s*('|\"|`)awesome!\\1/\n);\n```"
    },
    {
      "title": "Step 51",
      "description": "Your call stack is complete. As you can see, `a()` is at the bottom or beginning of the stack, which calls `b()` in the middle, which calls `c()` at the top or end. Once they're all in place, they begin to execute from top to bottom.\n\n`c()` executes, returns the string `\"awesome!\"`, and is popped off or removed from the top of the stack.\n\nRemove your `\"c(): returns 'awesome!'\"` string from the top of the `callStack` array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst callStack = [\n  'a(): returns \"freeCodeCamp \" + b()',\n  'b(): returns \"is \" + c()',\n  'c(): returns \"awesome!\"'\n];\n--fcc-editable-region--\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "`callStack` should have two elements that are strings.\n\n```js\nassert.lengthOf(callStack, 2);\nassert.isTrue(callStack.every((element) => typeof element === \"string\"));\n```\n\nThe final element in `callStack` should be the string `\"b(): returns 'is ' + c()\"`.\n\n```js\nassert.match(\n  callStack[callStack.length - 1],\n  /b\\(\\s*\\):\\s*returns\\s*('|\"|`)is\\s*\\1\\s*\\+\\s*c\\s*\\(\\s*\\)/\n);\n```"
    },
    {
      "title": "Step 52",
      "description": "Then the function `b()` executes and evaluates to `\"is \" + \"awesome!\"`.\n\nUpdate your mock call to `b()` so it looks like this: `\"b(): returns 'is ' + 'awesome!'\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst callStack = [\n  'a(): returns \"freeCodeCamp \" + b()',\n  'b(): returns \"is \" + c()'\n];\n--fcc-editable-region--\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "`callStack` should have two elements that are strings.\n\n```js\nassert.lengthOf(callStack, 2);\nassert.isTrue(callStack.every((element) => typeof element === \"string\"));\n```\n\nThe final element in `callStack` should be the string `\"b(): returns 'is ' + 'awesome!'\"`.\n\n```js\nassert.match(\n  callStack[callStack.length - 1],\n  /b\\(\\s*\\):\\s*returns\\s*('|\"|`)is\\s*\\1\\s*\\+\\s*('|\"|`)awesome!\\2/\n);\n```"
    },
    {
      "title": "Step 53",
      "description": "Now that `b()` has executed, pop it off the call stack. Then, update your mock call to `a()` to the following: `\"a(): returns 'freeCodeCamp ' + 'is awesome!'\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst callStack = [\n  'a(): returns \"freeCodeCamp \" + b()',\n  'b(): returns \"is \" + \"awesome!\"'\n];\n--fcc-editable-region--\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "`callStack` should have one element that is a string.\n\n```js\nassert.lengthOf(callStack, 1);\nassert.isString(callStack[0]);\n```\n\nThe string in `callStack` should be the string `\"a(): returns 'freeCodeCamp ' + 'is awesome!'\"`.\n\n```js\nassert.match(\n  callStack[0],\n  /a\\(\\s*\\):\\s*returns\\s*('|\"|`)freeCodeCamp\\s*\\1\\s*\\+\\s*('|\"|`)is\\s+awesome!\\2/\n);\n```"
    },
    {
      "title": "Step 54",
      "description": "Finally, `a()` returns the concatenated string `\"freeCodeCamp is awesome!\"`.\n\nPop `a()` off the top of the call stack.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst callStack = [\n  'a(): returns \"freeCodeCamp \" + \"is awesome!\"',\n];\n--fcc-editable-region--\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "`callStack` should be an empty array.\n\n```js\nassert.isEmpty(callStack);\n```"
    },
    {
      "title": "Step 55",
      "description": "While that's a simple example, it demonstrates how the call stack steps through your code and calls multiple functions.\n\nNow it's time to jump into recursion, and see how the call stack fits into the picture.\n\nRemove your `callStack` array, the `a()`, `b()`, and `c()` functions, and the `console.log()` statement.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "--fcc-editable-region--\nconst callStack = [];\n\nconst a = () => {\n  return \"freeCodeCamp \" + b();\n};\n\nconst b = () => {\n  return \"is \" + c();\n};\n\nconst c = () => {\n  return \"awesome!\";\n};\n\nconsole.log(a());\n--fcc-editable-region--\n\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should remove the `callStack` array from your code.\n\n```js\nassert.notMatch(code, /(var|let|const)\\s+callStack\\s*=\\s*\\[\\s*\\]/);\n```\n\nYou should remove the `a()`, `b()`, and `c()` functions from your code.\n\n```js\nassert.notMatch(code, /(var|let|const)\\s+a\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{[\\s\\S]+\\}/);\nassert.notMatch(code, /(var|let|const)\\s+b\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{[\\s\\S]+\\}/);\nassert.notMatch(code, /(var|let|const)\\s+c\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{[\\s\\S]+\\}/);\n```\n\nYour code should not have a `console.log()` statement.\n\n```js\nassert.notMatch(code, /console\\.log\\([\\s\\S]+\\)/);\n```"
    },
    {
      "title": "Step 56",
      "description": "Now you'll create a function that will count down from a given number to zero using recursion.\n\nCreate a new function named `countdown` with `number` as a parameter. Leave the function body empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a function named `countdown`.\n\n```js\nassert.isFunction(countdown);\n```\n\nYour function `countdown` should accept `number` as a parameter.\n\n```js\nassert.match(String(countdown), /function\\s+countdown\\s*\\(\\s*number\\s*\\)/);\n```\n\nThe body of your `countdown` function should be empty.\n\n```js\nassert.match(String(countdown), /function\\s+countdown\\s*\\(\\s*number\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 66",
      "description": "Then, remove the contents of your `decimalToBinary()` function. Leave the body of the function empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\n--fcc-editable-region--\nconst decimalToBinary = (input) => {\n  let binary = \"\";\n\n  if (input === 0) {\n    binary = \"0\";\n  }\n\n  while (input > 0) {\n    binary = (input % 2) + binary;\n    input = Math.floor(input / 2);\n  }\n\n  result.innerText = binary;\n};\n--fcc-editable-region--\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "The body of your `decimalToBinary()` function should be empty.\n\n```js\nassert.match(String(decimalToBinary), /function\\s+decimalToBinary\\s*\\(\\s*input\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 67",
      "description": "As a reminder, it's often best to start with the base case when writing a recursive function so you know what you're working towards, and to prevent an infinite loop.\n\nSimilar to your last implementation, you'll divide `input` by `2` repeatedly until `input` is `0`.\n\nUse an `if` statement to check if `input` is equal to `0`. If it is, `return` an empty string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use an `if` statement to check if `input` is equal to `0`.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)/);\n```\n\nYou should return an empty string if `input` is equal to `0`.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{?\\s*return\\s*('|\"|`)\\1\\s*;?\\s*\\}?/);\n```"
    },
    {
      "title": "Step 68",
      "description": "For the recursive case, add an `else` statement and `return` the result of calling `decimalToBinary()`. Pass in `input` divided by `2` rounded down with `Math.floor()` as the argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n  if (input === 0) {\n    return \"\";\n  }\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should convert your `if` statement into an `if...else` statement.\n\n```js\nassert.match(String(decimalToBinary), /\\{\\s*return\\s+('|\"|`)\\1\\s*;?\\s*\\}\\s*else\\s*\\{/);\n```\n\nWithin the body of your `else` statement, you should `return` the result of calling `decimalToBinary`.\n\n```js\nassert.match(String(decimalToBinary), /else\\s*\\{\\s*return\\s+decimalToBinary\\(/);\n```\n\nYou should pass in `input` divided by `2` rounded down with `Math.floor()` as the argument to `decimalToBinary`.\n\n```js\nassert.match(String(decimalToBinary), /decimalToBinary\\(\\s*Math\\.floor\\(\\s*input\\s*\\/\\s*2\\s*\\)\\s*\\)/);\n```"
    },
    {
      "title": "Step 69",
      "description": "This effectively lowers the `input` by roughly half each time the `decimalToBinary()` function is called.\n\nHowever, remember that the binary number string is built by calculating the remainder of `input` divided by `2` and concatenating that to the end.\n\nAfter your call to `decimalToBinary()`, use the addition operator (`+`) to concatenate the remainder of `input` divided by `2` to the end of the string your recursive function returns. Also, wrap the operation in parentheses.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0) {\n    return \"\";\n  } else {\n--fcc-editable-region--\n    return decimalToBinary(Math.floor(input / 2));\n--fcc-editable-region--\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the addition operator (`+`) to concatenate the remainder of `input` divided by `2` to the end of the string your recursive function returns.\n\n```js\nassert.match(code, /decimalToBinary\\(\\s*Math\\.floor\\(\\s*input\\s*\\/\\s*2\\s*\\)\\s*\\)\\s*\\+\\s*\\(?\\s*input\\s*%\\s*2\\s*\\)?/);\n```\n\nYou should wrap `input % 2` in parentheses.\n\n```js\nassert.match(code, /\\)\\s*\\+\\s*\\(\\s*input\\s*%\\s*2\\s*\\)/);\n```"
    },
    {
      "title": "Step 70",
      "description": "Finally, in your `checkUserInput()` function, set the `textContent` property of `result` equal to the string returned by your `decimalToBinary()` function.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0) {\n    return \"\";\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n--fcc-editable-region--\n  decimalToBinary(parseInt(numberInput.value));\n--fcc-editable-region--\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should set the `textContent` property of `result` equal to the string returned by your `decimalToBinary()` function.\n\n```js\nassert.match(\n  String(checkUserInput),\n  /result\\.textContent\\s*=\\s*decimalToBinary\\(/\n);\n```\n\nYou should continue to pass in `parseInt(numberInput.value)` as an argument to `decimalToBinary()`.\n\n```js\nassert.match(\n  String(checkUserInput),\n  /decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\)/\n);\n```\n\nThe `#result` element should display the correct binary conversion of the number entered in the `#number-input` element.\n\n```js\nconst numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nnumberInput.value = \"20\";\nconvertBtn.click();\n\nassert.strictEqual(result.textContent, \"10100\");\n```"
    },
    {
      "title": "Step 71",
      "description": "Your converter should be working now. Feel free to try out different numbers and think about what is happening each time `decimalToBinary()` is called.\n\nBut if you test your converter with `0`, you'll see that nothing happens. This is because you return an empty string in your base case when `input` is `0`. We can fix this now.\n\nUpdate your base case so that it returns the string `\"0\"` when `input` is equal to `0`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0) {\n--fcc-editable-region--\n    return \"\";\n--fcc-editable-region--\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  result.textContent = decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should return the string `\"0\"` when `input` is equal to `0` in your base case.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)\\s*\\{?\\s*return\\s*('|\"|`)0\\1\\s*;?\\s*\\}?/);\n```"
    },
    {
      "title": "Step 72",
      "description": "This mostly works – if you convert `0` into binary, `0` is displayed on the page. But now when you convert other numbers greater than `0`, your binary number starts with a leading `0`. For example, if you convert `1`, the result is `01`.\n\nBut if you think about it, `0` and `1` in base-10 always convert to `0` and `1` in base-2, respectively. So you can add another base case to handle when `input` is `1`.\n\nAdd an `else if` statement to your function that checks if `input` is equal to `1`. If it is, return the string `\"1\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n  if (input === 0) {\n    return \"0\";\n  } \n  \n  else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  result.textContent = decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add an `else if` statement to your `decimalToBinary()` function.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\)[\\s\\S]+else\\s+if\\s*\\(/);\n```\n\nFor the condition of your `else if` statement, you should check if `input` is equal to `1`.\n\n```js\nassert.match(String(decimalToBinary), /else\\s+if\\s*\\(\\s*input\\s*===?\\s*1\\s*\\)/);\n```\n\nYou should return the string `\"1\"` if `input` is equal to `1`.\n\n```js\nassert.match(String(decimalToBinary), /else\\s+if\\s*\\(\\s*input\\s*===?\\s*1\\s*\\)\\s*\\{?\\s*return\\s*('|\"|`)1\\1\\s*;?\\s*\\}?\\s*else\\s*\\{/);\n```"
    },
    {
      "title": "Step 73",
      "description": "Now everything should work as expected. And since you know that `input` will either be the numbers `0` or `1` at this point, you can combine your two base cases and just return `input` as a string.\n\nFor a reliable way to convert a value into a string, even falsy values like `null` and `undefined`, you can use the `String()` function. For example:\n\n```js\nconst num = 5;\n\nconsole.log(String(num)); // \"5\"\nconsole.log(String(null)); // \"null\"\n```\n\nCombine your `if` and `else if` statements into a single `if` statement checking if `input` is equal to `0` or `1`. If it is, use the `String()` function to convert `input` into a string and return it.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n--fcc-editable-region--\n  if (input === 0) {\n    return \"0\";\n  } else if (input === 1) {\n    return \"1\";\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  result.textContent = decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `decimalToBinary()` function should not have an `else if` statement.\n\n```js\nassert.notMatch(String(decimalToBinary), /else\\s+if\\s*\\([\\s\\S]+\\)/);\n```\n\nYour `decimalToBinary()` function should have an `if` statement that checks if `input` is equal to `0` or `1`.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\(\\s*input\\s*===?\\s*0\\s*\\|\\|\\s*input\\s*===?\\s*1\\s*\\)|if\\s*\\(\\s*input\\s*===?\\s*1\\s*\\|\\|\\s*input\\s*===?\\s*0\\s*\\)/);\n```\n\nIf input is equal to `0` or `1`, your `decimalToBinary()` function should return `String(input)`.\n\n```js\nassert.match(String(decimalToBinary), /if\\s*\\([\\s\\S]+\\)\\s*\\{?\\s*return\\s+String\\(\\s*input\\s*\\)\\s*;?\\s*\\}?/);\n```"
    },
    {
      "title": "Step 74",
      "description": "Now your `decimalToBinary()` function is complete. Feel free to test it out.\n\nIf you're still confused about how it works under the hood, don't worry. Next, you'll create a simple animation to help you understand what's happening each step of the way.\n\nCreate a new function called `showAnimation`. Leave the body of the function empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  result.textContent = decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a function named `showAnimation`.\n\n```js\nassert.isFunction(showAnimation);\n```\n\nThe body of your `showAnimation` function should be empty.\n\n```js\nassert.match(String(showAnimation), /function\\s+showAnimation\\s*\\(\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 75",
      "description": "You'll show the animation when users try to convert the decimal number `5` to binary, so you'll need to add a check for that within your `checkUserInput()` function.\n\nUse an `if` statement to check if the `value` attribute of `numberInput` is equal to the number `5`. Remember to use the `parseInt()` function to convert the string into a number before comparing it to `5`. Leave the `if` statement empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\n  result.textContent = decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add a second `if` statement to your `checkUserInput()` function, after the existing `if` statement.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*!numberInput\\s*\\.\\s*value\\s*\\|\\|\\s*isNaN\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)[\\s\\S]+if\\s*\\(/);\n```\n\nYou should use the `parseInt()` function within the condition of your new `if` statement.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(/);\n```\n\nYou should check if the `value` attribute of `numberInput` is equal to `5`.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*===?\\s*5\\s*\\)/);\n```\n\nThe body of your new `if` statement should be empty.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*===?\\s*5\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 76",
      "description": "If the `value` of `numberInput` is equal to `5`, call the `showAnimation()` function, then `return` early.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n\n};\n\nconst checkUserInput = () => {\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (parseInt(numberInput.value) === 5) {\n--fcc-editable-region--\n\n--fcc-editable-region--\n  }\n\n  result.textContent = decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should call the `showAnimation()` function within the body of your second `if` statement.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*===?\\s*5\\s*\\)\\s*\\{\\s*showAnimation\\(\\s*\\)/);\n```\n\nAfter calling the `showAnimation()` function, you should use the `return` keyword to exit the `checkUserInput()` function early.\n\n```js\nassert.match(String(checkUserInput), /if\\s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*===?\\s*5\\s*\\)\\s*\\{\\s*showAnimation\\(\\s*\\)\\s*;?\\s*return\\s*;?\\s*\\}/);\n```"
    },
    {
      "title": "Step 77",
      "description": "Now your `showAnimation()` function is set up. But if you look at your `checkUserInput()` function, you'll notice that it is calling `parseInt()` to convert `numberInput.value` into a number several times.\n\nThis is generally a poor practice, for reasons like performance concerns or even just the fact that you'd have to change your logic in multiple places to update the `parseInt()` call.\n\nTo fix this, create a new variable to store the converted number. Then you only have to convert the number once and can use it throughout the function.\n\nCreate a new variable called `inputInt` and assign it the number converted from `numberInput.value`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n\n};\n\nconst checkUserInput = () => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (parseInt(numberInput.value) === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a new variable called `inputInt`.\n\n```js\nassert.match(\n  String(checkUserInput),\n  /(var|let|const)\\s+inputInt/\n);\n```\n\nYou should use the `parseInt()` function to convert the `value` of `numberInput` into a number and assign it to `inputInt`.\n\n```js\nassert.match(\n  String(checkUserInput),\n  /(var|let|const)\\s+inputInt\\s*=\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)/\n);\n```"
    },
    {
      "title": "Step 78",
      "description": "Replace all instances of `parseInt(numberInput.value)` with `inputInt`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n\n};\n\nconst checkUserInput = () => {\n--fcc-editable-region--\n  const inputInt = parseInt(numberInput.value);\n\n  if (\n    !numberInput.value ||\n    isNaN(parseInt(numberInput.value)) ||\n    parseInt(numberInput.value) < 0\n  ) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (parseInt(numberInput.value) === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(parseInt(numberInput.value));\n  numberInput.value = \"\";\n--fcc-editable-region--\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should replace `isNaN(parseInt(numberInput.value))` with `isNaN(inputInt)` and `parseInt(numberInput.value) < 0` with `inputInt < 0`.\n\n```js\nassert.notMatch(\n  String(checkUserInput),\n  /isNaN\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\)\\s*\\|\\|s*\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\<\\s*0/\n);\nassert.match(\n  String(checkUserInput),\n  /isNaN\\(\\s*inputInt\\s*\\)\\s*\\|\\|\\s*inputInt\\s*\\<\\s*0/\n);\n```\n\nYou should replace `parseInt(numberInput.value) === 5` with `inputInt === 5`.\n\n```js\nassert.notMatch(\n  String(checkUserInput),\n  /parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*===?\\s*5/\n);\nassert.match(\n  String(checkUserInput),\n  /inputInt\\s*===?\\s*5/\n);\n```\n\nYou should replace `decimalToBinary(parseInt(numberInput.value))` with `decimalToBinary(inputInt)`.\n\n```js\nassert.notMatch(\n  String(checkUserInput),\n  /decimalToBinary\\(\\s*parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)\\s*\\)/\n);\nassert.match(\n  String(checkUserInput),\n  /decimalToBinary\\(\\s*inputInt\\s*\\)/\n);\n```\n\nYour `checkUserInput()` function should only contain one instance of `parseInt(numberInput.value)`.\n\n```js\nassert.lengthOf(\n  String(checkUserInput).match(/parseInt\\(\\s*numberInput\\s*\\.\\s*value\\s*\\)/g),\n  1\n);\n```"
    },
    {
      "title": "Step 79",
      "description": "Now that your `showAnimation()` function is set up, let's do some testing.\n\nAdd three `console.log()` statements in the `showAnimation()` function to log the text `\"free\"`, `\"Code\"`, and `\"Camp\"` to the console. You should see that text in the console when you enter `5` into the number input and click the `Convert` button.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add a `console.log()` statement for the string `\"free\"`.\n\n```js\nassert.match(String(showAnimation), /console\\.log\\(\\s*('|\"|`)\\s*free\\s*\\1\\s*\\)/i);\n```\n\nYou should add a `console.log()` statement for the string `\"Code\"`.\n\n```js\nassert.match(String(showAnimation), /console\\.log\\(\\s*('|\"|`)\\s*Code\\s*\\1\\s*\\)/i);\n```\n\nYou should add a `console.log()` statement for the string `\"Camp\"`.\n\n```js\nassert.match(String(showAnimation), /console\\.log\\(\\s*('|\"|`)\\s*Camp\\s*\\1\\s*\\)/i);\n```"
    },
    {
      "title": "Step 80",
      "description": "Before you start writing code for the animation, let's take a look at the function you'll use to add and remove elements from the DOM: `setTimeout`.\n\nThe `setTimeout` function takes two arguments: a callback function and a number representing the time in milliseconds to wait before executing the callback function.\n\nFor example, if you wanted to log `\"Hello, world!\"` to the console after `3` seconds, you would write:\n\n```js\nsetTimeout(() => {\n  console.log(\"Hello, world!\");\n}, 3000);\n```\n\nUse the `setTimeout` function to add a one second delay before the text `\"Code\"` is logged to the console. Then see what happens after you enter `5` into the number input and click the `Convert` button.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  console.log(\"free\");\n--fcc-editable-region--\n  console.log(\"Code\");\n--fcc-editable-region--\n  console.log(\"Camp\");\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `showAnimation()` function should contain a call to the `setTimeout` function.\n\n```js\nassert.match(code, /setTimeout\\(/);\n```\n\nYou should pass a callback function as the first argument to the `setTimeout` function.\n\n```js\nassert.match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{?|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/);\n```\n\nWithin the callback function, you should log the text `\"Code\"` to the console.\n\n```js\nassert.match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{?\\s*console\\.log\\(\\s*('|\"|`)\\s*Code\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\.log\\(\\s*('|\"|`)\\s*Code\\s*\\2\\s*\\)/i);\n```\n\nYou should pass `1000` as the second argument to the `setTimeout` function.\n\n```js\nassert.match(code, /console\\.log\\(\\s*('|\"|`)\\s*Code\\s*\\1\\s*\\)\\s*;?\\s*\\}?\\s*,\\s*1000\\s*\\)/);\n```"
    },
    {
      "title": "Step 81",
      "description": "If you test your code, you'll notice that your console logs are not in the expected order. Instead of logging `\"free\"`, pausing for a second before logging `\"Code\"`, and finally logging `\"Camp\"`, you'll see this:\n\n```md\nfree\nCamp\nCode\n```\n\nThis is because the `setTimeout()` function is <dfn>asynchronous</dfn>, meaning that it doesn't stop the execution of the rest of your code. All the code in the `showAnimation()` function runs line by line, but because `setTimeout()` is asynchronous, `free` and `Camp` are logged to the console immediately, and then `Code` is logged to the console after a one second delay.\n\nOne way to fix this is to use multiple `setTimeout()` functions. Use `setTimeout()` to log `free` to the console after half a second, or `500` milliseconds.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n--fcc-editable-region--\n  console.log(\"free\");\n--fcc-editable-region--\n  setTimeout(() => {\n    console.log(\"Code\");\n  }, 1000);\n  console.log(\"Camp\");\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add a second `setTimeout()` function to your `showAnimation()` function.\n\n```js\nassert.lengthOf(\n  code.match(/setTimeout\\(/g),\n  2\n);\n```\n\nYou should pass a callback function as the first argument to the new `setTimeout()` function.\n\n```js\nassert.lengthOf(\n  code.match(/setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{?|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/g),\n  2\n);\n```\n\nWithin the new `setTimeout()` function's callback, you should log the text `\"free\"` to the console.\n\n```js\nassert.match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{?\\s*console\\.log\\(\\s*('|\"|`)\\s*free\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\.log\\(\\s*('|\"|`)\\s*free\\s*\\2\\s*\\)/i);\n```\n\nYou should pass `500` as the second argument to the new `setTimeout()` function.\n\n```js\nassert.match(code, /console\\.log\\(\\s*('|\"|`)\\s*free\\s*\\1\\s*\\)\\s*;?\\s*\\}?\\s*,\\s*500\\s*\\)/);\n```"
    },
    {
      "title": "Step 82",
      "description": "While asynchronous, or async, code can be difficult to understand at first, it has many advantages. One of the most important is that it allows you to write non-blocking code.\n\nFor example, imagine you're baking a cake, and you put the cake in the oven and set a timer. You don't have to sit in front of the oven waiting the entire time – you can wash dishes, read a book, or do anything else while you wait for the timer to go off.\n\nAsync code works in a similar way. You can start an async operation and other parts of your code will still work while that operation is running.\n\nYou'll learn more about async code in future projects, but the `setTimeout()` function is a good introduction.\n\nAdd a `1500` millisecond delay before the text `\"Camp\"` is logged to the console.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  setTimeout(() => {\n    console.log(\"free\");\n  }, 500);\n  setTimeout(() => {\n    console.log(\"Code\");\n  }, 1000);\n--fcc-editable-region--\n  console.log(\"Camp\");\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add a third `setTimeout()` function to your `showAnimation()` function.\n\n```js\nassert.lengthOf(\n  code.match(/setTimeout\\(/g),\n  3\n);\n```\n\nYou should pass a callback function as the first argument to the new `setTimeout()` function.\n\n```js\nassert.lengthOf(\n  code.match(/setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{?|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/g),\n  3\n);\n```\n\nWithin the new `setTimeout()` function's callback, you should log the text `Camp` to the console.\n\n```js\nassert.match(code, /setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{?\\s*console\\.log\\(\\s*('|\"|`)\\s*Camp\\s*\\1\\s*\\)|setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{\\s*console\\.log\\(\\s*('|\"|`)\\s*Camp\\s*\\2\\s*\\)/i);\n```\n\nYou should pass `1500` as the second argument to the new `setTimeout()` function.\n\n```js\nassert.match(code, /console\\.log\\(\\s*('|\"|`)\\s*Camp\\s*\\1\\s*\\)\\s*;?\\s*\\}?\\s*,\\s*1500\\s*\\)/);\n```"
    },
    {
      "title": "Step 83",
      "description": "Now you're ready to start on the animation itself. You'll use an array of objects to store data for each frame of the animation.\n\nFirst, create a new variable called `animationData` and assign it an empty array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n--fcc-editable-region--\n\n--fcc-editable-region--\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  setTimeout(() => {\n    console.log(\"free\");\n  }, 500);\n  setTimeout(() => {\n    console.log(\"Code\");\n  }, 1000);\n  setTimeout(() => {\n    console.log(\"Camp\");\n  }, 1500);\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should create a variable named `animationData`.\n\n```js\nassert.exists(animationData);\n```\n\nYour `animationData` variable should be an empty array.\n\n```js\nassert.isArray(animationData);\nassert.isEmpty(animationData);\n```"
    },
    {
      "title": "Step 84",
      "description": "Next, you'll create an object to represent the first frame of your animation. Your object should have two properties or keys: `inputVal`, and `addElDelay`.\n\n`inputVal` will represent the value of the input each time your recursive function runs. And `addElDelay` will be the delay between adding DOM elements to the page.\n\nAdd an object to `animationData` with an `inputVal` property set to `5`, and an `addElDelay` property set to `1000`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationData = [\n--fcc-editable-region--\n\n--fcc-editable-region--\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  setTimeout(() => {\n    console.log(\"free\");\n  }, 500);\n  setTimeout(() => {\n    console.log(\"Code\");\n  }, 1000);\n  setTimeout(() => {\n    console.log(\"Camp\");\n  }, 1500);\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "The `animationData` array should have a length of `1`.\n\n```js\nassert.lengthOf(animationData, 1);\n```\n\nThe `animationData` array should contain an object.\n\n```js\nassert.isObject(animationData[0]);\n```\n\nYou should add an `inputVal` property to the object.\n\n```js\nassert.property(animationData[0], 'inputVal');\n```\n\nYou should set the value of the `inputVal` property to the number `5`.\n\n```js\nassert.propertyVal(\n  animationData[0],\n  'inputVal',\n  5\n);\n```\n\nYou should add an `addElDelay` property to the object.\n\n```js\nassert.property(animationData[0], 'addElDelay');\n```\n\nYou should set the value of the `addElDelay` property to the number `1000`.\n\n```js\nassert.propertyVal(\n  animationData[0],\n  'addElDelay',\n  1000\n);\n```"
    },
    {
      "title": "Step 85",
      "description": "Recall that the call stack is a LIFO (last in, first out) data structure. This means that, as functions are called, they are added to the top or end of the stack, and as functions return, they are removed from the top of the stack.\n\nTreat your `animationData` array as a stack and add a new object to it. Your new object should have the properties `inputVal`, and `addElDelay` set to `2`, and `1500`, respectively. Remember to add this object to the top of the stack, or in other words, to the end of the `animationData` array.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationData = [\n--fcc-editable-region--\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  }\n--fcc-editable-region--\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  setTimeout(() => {\n    console.log(\"free\");\n  }, 500);\n  setTimeout(() => {\n    console.log(\"Code\");\n  }, 1000);\n  setTimeout(() => {\n    console.log(\"Camp\");\n  }, 1500);\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "The `animationData` array should have a length of `2`.\n\n```js\nassert.lengthOf(animationData, 2);\n```\n\nEach element in the `animationData` array should be an object.\n\n```js\nassert.isTrue(animationData.every((el) => typeof el === 'object'));\n```\n\nYou should add an `inputVal` property to the object at the top of the stack.\n\n```js\nassert.property(animationData[1], 'inputVal');\n```\n\nYou should set the value of the `inputVal` property to the number `2`.\n\n```js\nassert.propertyVal(animationData[1], 'inputVal', 2);\n```\n\nYou should add an `addElDelay` property to the object at the top of the stack.\n\n```js\nassert.property(animationData[1], 'addElDelay');\n```\n\nYou should set the value of the `addElDelay` property to the number `1500`.\n\n```js\nassert.propertyVal(animationData[1], 'addElDelay', 1500);\n```"
    },
    {
      "title": "Step 86",
      "description": "Add another object to the `animationData` array. Your new object should have the properties `inputVal`, and `addElDelay` set to `1`, and `2000`, respectively. Remember to treat the `animationData` array as a stack and add the new object to the top of the stack.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationData = [\n--fcc-editable-region--\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n--fcc-editable-region--\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  setTimeout(() => {\n    console.log(\"free\");\n  }, 500);\n  setTimeout(() => {\n    console.log(\"Code\");\n  }, 1000);\n  setTimeout(() => {\n    console.log(\"Camp\");\n  }, 1500);\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "The `animationData` array should have a length of `3`.\n\n```js\nassert.lengthOf(animationData, 3);\n```\n\nEach element in the `animationData` array should be an object.\n\n```js\nassert.isTrue(animationData.every((el) => typeof el === 'object'));\n```\n\nYou should add an `inputVal` property to the object at the top of the stack.\n\n```js\nassert.property(animationData[2], 'inputVal');\n```\n\nYou should set the value of the `inputVal` property to the number `1`.\n\n```js\nassert.propertyVal(animationData[2], 'inputVal', 1);\n```\n\nYou should add an `addElDelay` property to the object at the top of the stack.\n\n```js\nassert.property(animationData[2], 'addElDelay');\n```\n\nYou should set the value of the `addElDelay` property to the number `2000`.\n\n```js\nassert.propertyVal(animationData[2], 'addElDelay', 2000);\n```"
    },
    {
      "title": "Step 88",
      "description": "Next, clear out your `showAnimation()` function by removing all of your `setTimeout()` calls.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n--fcc-editable-region--\n  setTimeout(() => {\n    console.log(\"free\");\n  }, 500);\n  setTimeout(() => {\n    console.log(\"Code\");\n  }, 1000);\n  setTimeout(() => {\n    console.log(\"Camp\");\n  }, 1500);\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should remove all of the `setTimeout()` calls from your `showAnimation()` function.\n\n```js\nassert.notMatch(String(showAnimation), /setTimeout\\(/);\n```\n\nThe body of your `showAnimation()` function should be empty.\n\n```js\nassert.match(String(showAnimation), /function\\s+showAnimation\\s*\\(\\s*\\)\\s*\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 89",
      "description": "Now you'll start building the animation itself.\n\nFirst, set the `innerText` property of `result` to `\"Call Stack Animation\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should set the `innerText` property of `result` to the string `\"Call Stack Animation\"`.\n\n```js\nassert.match(String(showAnimation), /result\\.innerText\\s*=\\s*('|\"|`)Call Stack Animation\\1/i);\n```\n\nAfter calling the `showAnimation` function, the `innerText` property of `result` should be `\"Call Stack Animation\"`.\n\n```js\nconst result = document.getElementById(\"result\");\n\nshowAnimation();\nassert.strictEqual(result.innerText.trim().toLowerCase(), \"call stack animation\");\n```"
    },
    {
      "title": "Step 90",
      "description": "Next, use the `.forEach()` method to loop through the `animationData` array. For the `.forEach()` method's callback function, pass in `obj` as a parameter, but leave the body of the callback function empty for now.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `.forEach()` method to loop through the `animationData` array.\n\n```js\nassert.match(String(showAnimation), /animationData\\s*\\.\\s*forEach\\(/);\n```\n\nYou should pass in `obj` as a parameter to the `.forEach()` method's callback function.\n\n```js\nassert.match(String(showAnimation), /animationData\\s*\\.\\s*forEach\\(\\s*(\\(\\s*obj\\s*\\)|obj)\\s*=>\\s*\\{|animationData\\s*\\.\\s*forEach\\(\\s*function\\s*\\(\\s*obj\\s*\\)\\s*\\{/);\n```\n\nThe body of your `.forEach()` method's callback function should be empty.\n\n```js\nassert.match(String(showAnimation), /animationData\\s*\\.\\s*forEach\\([\\s\\S]+\\{\\s*\\}/);\n```"
    },
    {
      "title": "Step 91",
      "description": "Since you have the timing for each frame of animation stored in `addElDelay`, you can use that value with `setTimeout()` to set up the delay to add elements to the DOM.\n\nWithin the body of the `.forEach()` method's callback function, add a `setTimeout()` function. Pass in an empty callback function as the first argument, and `obj.addElDelay` as the second argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n--fcc-editable-region--\n    \n--fcc-editable-region--\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add the `setTimeout()` function within the body of your `.forEach()` method's callback function.\n\n```js\nassert.match(String(showAnimation), /animationData\\s*\\.\\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\(/);\n```\n\nYou should pass in an empty callback function as the first argument to the `setTimeout()` function.\n\n```js\nassert.match(String(showAnimation), /animationData\\s*\\.\\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\(\\s*\\(\\s*\\)\\s*=>\\s*\\{|animationData\\s*\\.\\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\(\\s*function\\s*\\(\\s*\\)\\s*\\{/);\n```\n\nThe body of your `setTimeout()` function's callback function should be empty.\n\n```js\nassert.match(String(showAnimation), /animationData\\s*\\.\\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\([\\s\\S]+\\{\\s*\\}/);\n```\n\nYou should pass in `obj.addElDelay` as the second argument to the `setTimeout()` function.\n\n```js\nassert.match(String(showAnimation), /animationData\\s*\\.\\s*forEach\\([\\s\\S]+\\{\\s*setTimeout\\([\\s\\S]+,\\s*obj\\s*\\.\\s*addElDelay\\s*\\)/);\n```"
    },
    {
      "title": "Step 92",
      "description": "Then, use the compound assignment operator (`+=`) to set the `innerHTML` property of the `animationContainer` to an empty template literal string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the compound assignment operator (`+=`) to set the `innerHTML` property of the `animationContainer` to an empty template literal string.\n\n```js\nassert.match(code, /setTimeout\\([\\s\\S]+\\{\\s*animationContainer\\.innerHTML\\s*\\+=\\s*``/);\n```"
    },
    {
      "title": "Step 87",
      "description": "Now you'll start building the animation itself.\n\nFirst, use the `document.getElementById()` method to select the element with the id `animation-container` and assign it to a variable called `animationContainer`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\n--fcc-editable-region--\n\n--fcc-editable-region--\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  setTimeout(() => {\n    console.log(\"free\");\n  }, 500);\n  setTimeout(() => {\n    console.log(\"Code\");\n  }, 1000);\n  setTimeout(() => {\n    console.log(\"Camp\");\n  }, 1500);\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `document.getElementById()` method to get the `#animation-container` element.\n\n```js\nassert.match(code, /document\\.getElementById\\(\\s*('|\"|`)animation-container\\1\\s*\\)/);\n```\n\nYou should use `const` to declare a variable called `animationContainer` and assign it the `#animation-container` element. \n\n```js\nassert.match(code, /const\\s+animationContainer\\s*=\\s*document\\.getElementById\\(\\s*('|\"|`)animation-container\\1\\s*\\)/);\n```"
    },
    {
      "title": "Step 93",
      "description": "Within the template literal, add a paragraph element with the `id` attribute equal to an empty string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n--fcc-editable-region--\n      animationContainer.innerHTML += ``;\n--fcc-editable-region--\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add an `id` attribute to the paragraph element.\n\n```js\nassert.match(\n  code,\n  /animationContainer\\.innerHTML\\s*\\+=\\s*`\\s*<p\\s+id/\n);\n```\n\nYou should set the value of the `id` attribute to an empty string.\n\n```js\nassert.match(\n  code,\n  /animationContainer\\.innerHTML\\s*\\+=\\s*`\\s*<p\\s+id\\s*=\\s*('|\"|`)\\1\\s*>/\n);\n```"
    },
    {
      "title": "Step 94",
      "description": "Next, use string interpolation to set the `id` attribute to the `inputVal` property of the current object, `obj`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n--fcc-editable-region--\n        <p id=\"\"></p>\n--fcc-editable-region--\n      `;\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use string interpolation to set the `id` attribute to the `inputVal` property of `obj`.\n\n```js\nassert.match(\n  code,\n  /animationContainer\\.innerHTML\\s*\\+=\\s*`\\s*<p\\s+id\\s*=\\s*('|\"|`)\\s*\\$\\{\\s*obj\\.inputVal\\s*\\}\\s*\\1\\s*>\\s*<\\s*\\/\\s*p\\s*>\\s*`|animationContainer\\.innerHTML\\s*\\+=\\s*`\\s*<p\\s+id\\s*=\\s*('|\"|`)\\s*\\$\\{\\s*obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\3\\s*\\]\\s*\\}\\2\\s*>\\s*<\\s*\\/\\s*p\\s*>\\s*`/\n);\n```"
    },
    {
      "title": "Step 95",
      "description": "Add a `class` attribute set to `\"animation-frame\"`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n--fcc-editable-region--\n        <p id=\"${obj.inputVal}\"></p>\n--fcc-editable-region--\n      `;\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add a `class` attribute to the paragraph element.\n\n```js\nassert.match(\n  code,\n  /animationContainer\\.innerHTML\\s*\\+=\\s*`\\s*<p[\\s\\S]+class/\n);\n```\n\nYou should set the value of the `class` attribute to `\"animation-frame\"`.\n\n```js\nassert.match(\n  code,\n  /animationContainer\\.innerHTML\\s*\\+=\\s*`\\s*<p[\\s\\S]+class\\s*\\=\\s*('|\"|`)\\s*animation-frame\\s*\\1/\n);\n```"
    },
    {
      "title": "Step 96",
      "description": "Finally, use string interpolation to set the text of the paragraph element to `decimalToBinary(${currVal})`, where `currVal` is the `inputVal` property of the current object. After this, test out your code by entering the number `5` into the number input and clicking the `Convert` button.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n--fcc-editable-region--\n\n--fcc-editable-region--\n        </p>\n      `;\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use string interpolation to set the text of the paragraph element to `decimalToBinary(${obj.inputVal})`.\n\n```js\nassert.match(\n  code,\n  /animationContainer\\.innerHTML\\s*\\+=\\s*`\\s*<p[\\s\\S]+>\\s*decimalToBinary\\s*\\(\\s*\\$\\{\\s*obj\\.inputVal\\s*\\}\\s*\\)\\s*<\\s*\\/\\s*p\\s*>\\s*`|animationContainer\\.innerHTML\\s*\\+=\\s*`\\s*<p[\\s\\S]+>\\s*decimalToBinary\\s*\\(\\s*\\$\\{\\s*obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]\\s*\\}\\s*\\)\\s*<\\s*\\/\\s*p\\s*>\\s*`/\n);\n```"
    },
    {
      "title": "Step 97",
      "description": "Now it's time to set up for the next phase of the animation where you'll update and remove the paragraphs you append to the DOM during the animation.\n\nAdd the property `msg` to the animation object at the top of the stack, and set its value to an empty string.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n--fcc-editable-region--\n  {\n    inputVal: 1,\n    addElDelay: 2000\n  }\n--fcc-editable-region--\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add the property `msg` to the animation object at the top of the stack.\n\n```js\nassert.property(\n  animationData[2],\n  'msg',\n)\n```\n\nYou should set the value of the `msg` property to an empty string.\n\n```js\nassert.propertyVal(\n  animationData[2],\n  'msg',\n  ''\n)\n```"
    },
    {
      "title": "Step 98",
      "description": "Set the value of the `msg` property to the following string:\n\n```md\n\"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\"\n```",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n--fcc-editable-region--\n    msg: \"\"\n--fcc-editable-region--\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your animation object at the top of the stack should have `msg` property.\n\n```js\nassert.property(\n  animationData[2],\n  'msg',\n)\n```\n\nYou should set the value of the `msg` property to `\"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\"`\n\n```js\nassert.match(\n  animationData[2].msg,\n  /decimalToBinary\\s*\\(\\s*1\\s*\\)\\s*returns\\s*('|\"|`)1\\s*\\1\\s*\\(\\s*base\\s+case\\s*\\)\\s*and\\s*gives\\s*that\\s+value\\s+to\\s+the\\s+stack\\s+below\\.?\\s*Then\\s+it\\s+pops\\s+off\\s+the\\s+stack\\.?/i\n)\n```"
    },
    {
      "title": "Step 99",
      "description": "Next, add the property `showMsgDelay` with the value `5000` and `removeElDelay` with the value `10000`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n--fcc-editable-region--\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\"\n  }\n--fcc-editable-region--\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add the property `showMsgDelay` to the animation object at the top of the stack.\n\n```js\nassert.property(\n  animationData[2],\n  'showMsgDelay',\n)\n```\n\nYou should set the value of the `showMsgDelay` property to `5000`.\n\n```js\nassert.propertyVal(\n  animationData[2],\n  'showMsgDelay',\n  5000\n)\n```\n\nYou should add the property `removeElDelay` to the animation object at the top of the stack.\n\n```js\nassert.property(\n  animationData[2],\n  'removeElDelay',\n)\n```\n\nYou should set the value of the `removeElDelay` property to `10000`.\n\n```js\nassert.propertyVal(\n  animationData[2],\n  'removeElDelay',\n  10000\n)\n```"
    },
    {
      "title": "Step 100",
      "description": "For the object in the middle of the stack, add the property `msg` set to the following string:\n\n```md\n\"decimalToBinary(2) returns '1' + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.\"\n```\n\nAlso, add the property `showMsgDelay` set to `10000` and the property `removeElDelay` set to `15000`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n--fcc-editable-region--\n  {\n    inputVal: 2,\n    addElDelay: 1500\n  },\n--fcc-editable-region--\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\",\n    showMsgDelay: 5000,\n    removeElDelay: 10000,\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add the property `msg` to the animation object in the middle of the stack.\n\n```js\nassert.property(\n  animationData[1],\n  'msg',\n)\n```\n\nYou should set the value of the `msg` property to `\"decimalToBinary(2) returns '1' + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.\"`\n\n```js\nassert.match(\n  animationData[1].msg,\n  /decimalToBinary\\s*\\(\\s*2\\s*\\)\\s*returns\\s*('|\"|`)1\\s*\\1\\s*\\+\\s*0\\s*\\(\\s*2\\s*%\\s*2\\s*\\)\\s*and\\s*gives\\s*that\\s+value\\s+to\\s+the\\s+stack\\s+below\\.?\\s*Then\\s+it\\s+pops\\s+off\\s+the\\s+stack\\.?/i\n)\n```\n\nYou should add the property `showMsgDelay` to the animation object in the middle of the stack.\n\n```js\nassert.property(\n  animationData[1],\n  'showMsgDelay',\n)\n```\n\nYou should set the value of the `showMsgDelay` property to `10000`.\n\n```js\nassert.propertyVal(\n  animationData[1],\n  'showMsgDelay',\n  10000\n)\n```\n\nYou should add the property `removeElDelay` to the animation object in the middle of the stack.\n\n```js\nassert.property(\n  animationData[1],\n  'removeElDelay',\n)\n```\n\nYou should set the value of the `removeElDelay` property to `15000`.\n\n```js\nassert.propertyVal(\n  animationData[1],\n  'removeElDelay',\n  15000\n)\n```"
    },
    {
      "title": "Step 101",
      "description": "For the last animation object, add the property `msg` set to the following string:\n\n```md\n\"decimalToBinary(5) returns '10' + 1 (5 % 2). Then it pops off the stack.\"\n```\n\nAlso, add the property `showMsgDelay` set to `15000` and the property `removeElDelay` set to `20000`.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n--fcc-editable-region--\n  {\n    inputVal: 5,\n    addElDelay: 1000\n  },\n--fcc-editable-region--\n  {\n    inputVal: 2,\n    addElDelay: 1500,\n    msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.',\n    showMsgDelay: 10000,\n    removeElDelay: 15000,\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\",\n    showMsgDelay: 5000,\n    removeElDelay: 10000,\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should add the property `msg` to the animation object at the bottom of the stack.\n\n```js\nassert.property(\n  animationData[0],\n  'msg',\n)\n```\n\nYou should set the value of the `msg` property to `\"decimalToBinary(5) returns '10' + 1 (5 % 2). Then it pops off the stack.\"`\n\n```js\nassert.match(\n  animationData[0].msg,\n  /decimalToBinary\\s*\\(\\s*5\\s*\\)\\s*returns\\s*('|\"|`)10\\s*\\1\\s*\\+\\s*1\\s*\\(\\s*5\\s*%\\s*2\\s*\\)\\s*\\.\\s*Then\\s+it\\s+pops\\s+off\\s+the\\s+stack\\.?/i\n);\n```\n\nYou should add the property `showMsgDelay` to the animation object at the bottom of the stack.\n\n```js\nassert.property(\n  animationData[0],\n  'showMsgDelay',\n)\n```\n\nYou should set the value of the `showMsgDelay` property to `15000`.\n\n```js\nassert.propertyVal(\n  animationData[0],\n  'showMsgDelay',\n  15000\n)\n```\n\nYou should add the property `removeElDelay` to the animation object at the bottom of the stack.\n\n```js\nassert.property(\n  animationData[0],\n  'removeElDelay',\n)\n```\n\nYou should set the value of the `removeElDelay` property to `20000`.\n\n```js\nassert.propertyVal(\n  animationData[0],\n  'removeElDelay',\n  20000\n)\n```"
    },
    {
      "title": "Step 102",
      "description": "For the next phase of the animation you'll update the paragraphs with the `msg` text. Since you have the delays for each step of the animation already, you can add your code to the same `.forEach()` loop.\n\nAdd another `setTimeout()` function. Pass in an empty callback function as the first argument, and pass in the `showMsgDelay` property of the current object as the second argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000,\n    msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2). Then it pops off the stack.',\n    showMsgDelay: 15000,\n    removeElDelay: 20000,\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500,\n    msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.',\n    showMsgDelay: 10000,\n    removeElDelay: 15000,\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\",\n    showMsgDelay: 5000,\n    removeElDelay: 10000,\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `showAnimation()` function should have two `setTimeout()` functions.\n\n```js\nassert.lengthOf(\n  String(showAnimation).match(/setTimeout/g),\n  2\n);\n```\n\nThe new `setTimeout()` function should have an empty callback function as the first argument.\n\n```js\nassert.match(\n  String(showAnimation),\n  /setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}/\n);\n```\n\nThe new `setTimeout()` function should have the `showMsgDelay` property of the current object as the second argument.\n\n```js\nassert.match(\n  String(showAnimation),\n  /setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*obj\\.showMsgDelay\\s*\\)|setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*obj\\s*\\[\\s*('|\"|`)showMsgDelay\\1\\s*\\]\\s*\\)/\n);\n```"
    },
    {
      "title": "Step 104",
      "description": "Next, you'll remove the paragraph elements from the `#show-animation` element after the delays you specified earlier.\n\nAdd a `setTimeout()` function to your `.forEach()` loop. Pass in an empty callback function as the first argument, and pass in the `removeElDelay` property of the current object as the second argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000,\n    msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2). Then it pops off the stack.',\n    showMsgDelay: 15000,\n    removeElDelay: 20000,\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500,\n    msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.',\n    showMsgDelay: 10000,\n    removeElDelay: 15000,\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\",\n    showMsgDelay: 5000,\n    removeElDelay: 10000,\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n\n    setTimeout(() => {\n      document.getElementById(obj.inputVal).textContent = obj.msg;\n    }, obj.showMsgDelay);\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `showAnimation()` function should have three `setTimeout()` functions.\n\n```js\nassert.lengthOf(\n  String(showAnimation).match(/setTimeout/g),\n  3\n);\n```\n\nThe new `setTimeout()` function should have an empty callback function as the first argument.\n\n```js\nassert.match(\n  String(showAnimation),\n  /setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}/\n);\n```\n\nThe new `setTimeout()` function should have the `removeElDelay` property of the current object as the second argument.\n\n```js\nassert.match(\n  String(showAnimation),\n  /setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*obj\\.removeElDelay\\s*\\)|setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*obj\\s*\\[\\s*('|\"|`)removeElDelay\\1\\s*\\]\\s*\\)/\n);\n```"
    },
    {
      "title": "Step 105",
      "description": "Use the `.getElementById()` method to target the element with the `id` attribute with the value of the `inputVal` property of the current object. Then, use the `.remove()` method on that element to remove it from the DOM after the delay.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000,\n    msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2). Then it pops off the stack.',\n    showMsgDelay: 15000,\n    removeElDelay: 20000,\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500,\n    msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.',\n    showMsgDelay: 10000,\n    removeElDelay: 15000,\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\",\n    showMsgDelay: 5000,\n    removeElDelay: 10000,\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n\n    setTimeout(() => {\n      document.getElementById(obj.inputVal).textContent = obj.msg;\n    }, obj.showMsgDelay);\n\n    setTimeout(() => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n    }, obj.removeElDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `.getElementById()` method to target the element where the `id` attribute matches the value of `inputVal` for the current object.\n\n```js\nassert.lengthOf(\n  String(showAnimation).match(\n    /document\\.getElementById\\s*\\(\\s*obj\\.inputVal\\s*\\)|document\\.getElementById\\s*\\(\\s*obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]\\s*\\)/g\n  ),\n  2\n);\n```\n\nYou should chain the `.remove()` method to the `.getElementById()` method.\n\n```js\nassert.match(\n  String(showAnimation),\n  /document\\.getElementById\\s*\\(\\s*obj\\.inputVal\\s*\\)\\s*\\.\\s*remove\\s*\\(\\s*\\)|document\\.getElementById\\s*\\(\\s*obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]\\s*\\)\\s*\\.\\s*remove\\s*\\(\\s*\\)/g\n);\n```"
    },
    {
      "title": "Step 106",
      "description": "Now your animation is complete. When you enter `5` in the number input and click the `Convert` button, the animation will add paragraphs to the DOM, update the text of each paragraph, and then remove the paragraphs from the DOM.\n\nThe last thing you need to do is add the result of converting the number `5` into binary to the page once the animation is complete.\n\nAfter the `.forEach()` method, add another `setTimeout()` function. Pass in an empty callback function as the first argument, and a delay of `20000` milliseconds as the second argument.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000,\n    msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2). Then it pops off the stack.',\n    showMsgDelay: 15000,\n    removeElDelay: 20000,\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500,\n    msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.',\n    showMsgDelay: 10000,\n    removeElDelay: 15000,\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\",\n    showMsgDelay: 5000,\n    removeElDelay: 10000,\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n\n    setTimeout(() => {\n      document.getElementById(obj.inputVal).textContent = obj.msg;\n    }, obj.showMsgDelay);\n\n    setTimeout(() => {\n      document.getElementById(obj.inputVal).remove();\n    }, obj.removeElDelay);\n  });\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "Your `showAnimation()` function should have four `setTimeout()` functions.\n\n```js\nassert.lengthOf(\n  String(showAnimation).match(/setTimeout/g),\n  4\n);\n```\n\nThe new `setTimeout()` function should have an empty callback function as the first argument.\n\n```js\nassert.match(\n  String(showAnimation),\n  /setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}/\n);\n```\n\nThe new `setTimeout()` function should have a delay of `20000` milliseconds as the second argument.\n\n```js\nassert.match(\n  String(showAnimation),\n  /setTimeout\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*}\\s*,\\s*20000\\s*\\)/\n);\n```"
    },
    {
      "title": "Step 107",
      "description": "Finally, set the `textContent` property of `result` equal to calling `decimalToBinary()` with `5` as an argument. After this, test out your code by entering the number `5` into the number input and clicking the `Convert` button.\n\nCongratulations! You just finished your decimal to binary converter with recursion.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000,\n    msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2). Then it pops off the stack.',\n    showMsgDelay: 15000,\n    removeElDelay: 20000,\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500,\n    msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.',\n    showMsgDelay: 10000,\n    removeElDelay: 15000,\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\",\n    showMsgDelay: 5000,\n    removeElDelay: 10000,\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n\n    setTimeout(() => {\n      document.getElementById(obj.inputVal).textContent = obj.msg;\n    }, obj.showMsgDelay);\n\n    setTimeout(() => {\n      document.getElementById(obj.inputVal).remove();\n    }, obj.removeElDelay);\n  });\n\n  setTimeout(() => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n  }, 20000);\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should set the `textContent` property of `result` equal to calling `decimalToBinary()` with `5` as an argument.\n\n```js\nassert.match(\n  String(showAnimation),\n  /result\\.textContent\\s*=\\s*decimalToBinary\\s*\\(\\s*5\\s*\\)|result\\s*\\[\\s*('|\"|`)textContent\\1\\s*\\]\\s*=\\s*decimalToBinary\\s*\\(\\s*5\\s*\\)/i\n);\n```"
    },
    {
      "title": "Step 103",
      "description": "You have set the `id` attribute for your paragraph elements to the `obj.inputVal` property.\n\nNow, use the `.getElementById()` method to select the element with that attribute value, again using the `obj.inputVal` property. You should pass the `obj.inputVal` value directly to your `getElementById` call.\n\nAfter that, set the `textContent` property of the selected element equal to the `msg` property of the current object, to update its text after the delay you specified earlier.",
      "files": [
        {
          "name": "index.html",
          "language": "html",
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Decimal to Binary Converter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <h1>\n      Decimal to Binary <br />\n      Converter\n    </h1>\n    <section class=\"input-container\">\n      <label for=\"number-input\">Enter a decimal number:</label>\n      <input\n        value=\"\"\n        type=\"number\"\n        name=\"decimal number input\"\n        id=\"number-input\"\n        class=\"number-input\"\n      />\n      <button class=\"convert-btn\" id=\"convert-btn\">Convert</button>\n    </section>\n    <section class=\"output-container\">\n      <output id=\"result\" for=\"number-input\"></output>\n      <h2>Call stack</h2>\n      <div id=\"animation-container\"></div>\n    </section>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
        },
        {
          "name": "styles.css",
          "language": "css",
          "content": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --light-grey: #f5f6f7;\n  --dark-blue: #1b1b32;\n  --orange: #f1be32;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console,\n    monospace;\n  font-size: 1.125rem;\n  color: var(--light-grey);\n  background-color: var(--dark-blue);\n  padding: 0 4px;\n}\n\nh1 {\n  font-size: 2.125rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\nh2 {\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 20px 0;\n}\n\n.input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  justify-content: center;\n  align-items: center;\n  width: clamp(320px, 50vw, 460px);\n  margin: 10px auto;\n}\n\n.input-container label {\n  white-space: nowrap;\n  word-spacing: -6px;\n}\n\n.convert-btn {\n  font-size: inherit;\n  font-family: inherit;\n  background-color: var(--orange);\n  width: 100%;\n  height: 2rem;\n  padding: 0 6px;\n  border: none;\n  border-radius: 2px;\n  cursor: pointer;\n}\n\n.number-input {\n  font-size: inherit;\n  padding: 0.3rem;\n  width: 100%;\n}\n\n.output-container {\n  margin-inline: auto;\n  width: clamp(320px, 50vw, 460px);\n}\n\n#result {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  text-align: center;\n  min-height: 80px;\n  margin-block-start: 20px;\n  padding: 15px;\n  border: 2px solid var(--orange);\n  border-radius: 2px;\n}\n\n#animation-container {\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: end;\n  gap: 1rem;\n  margin-block-end: 1rem;\n  min-height: 40vh;\n  border: 2px dashed var(--orange);\n  padding: 1rem;\n}\n\n.animation-frame {\n  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui,\n    helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial,\n    sans-serif;\n  padding: 15px 10px;\n  border: 5px solid var(--orange);\n  font-size: 1.2rem;\n  text-align: center;\n}\n\n@media screen and (min-width: 36em) {\n  body {\n    font-size: 1rem;\n  }\n\n  .input-container {\n    flex-direction: row;\n    width: unset;\n  }\n\n  .number-input {\n    width: unset;\n  }\n}"
        },
        {
          "name": "script.js",
          "language": "js",
          "content": "const numberInput = document.getElementById(\"number-input\");\nconst convertBtn = document.getElementById(\"convert-btn\");\nconst result = document.getElementById(\"result\");\nconst animationContainer = document.getElementById(\"animation-container\");\nconst animationData = [\n  {\n    inputVal: 5,\n    addElDelay: 1000,\n    msg: 'decimalToBinary(5) returns \"10\" + 1 (5 % 2). Then it pops off the stack.',\n    showMsgDelay: 15000,\n    removeElDelay: 20000,\n  },\n  {\n    inputVal: 2,\n    addElDelay: 1500,\n    msg: 'decimalToBinary(2) returns \"1\" + 0 (2 % 2) and gives that value to the stack below. Then it pops off the stack.',\n    showMsgDelay: 10000,\n    removeElDelay: 15000,\n  },\n  {\n    inputVal: 1,\n    addElDelay: 2000,\n    msg: \"decimalToBinary(1) returns '1' (base case) and gives that value to the stack below. Then it pops off the stack.\",\n    showMsgDelay: 5000,\n    removeElDelay: 10000,\n  }\n];\n\nconst decimalToBinary = (input) => {\n  if (input === 0 || input === 1) {\n    return String(input);\n  } else {\n    return decimalToBinary(Math.floor(input / 2)) + (input % 2);\n  }\n};\n\nconst showAnimation = () => {\n  result.innerText = \"Call Stack Animation\";\n\n  animationData.forEach((obj) => {\n    setTimeout(() => {\n      animationContainer.innerHTML += `\n        <p id=\"${obj.inputVal}\" class=\"animation-frame\">\n          decimalToBinary(${obj.inputVal})\n        </p>\n      `;\n    }, obj.addElDelay);\n\n    setTimeout(() => {\n--fcc-editable-region--\n\n--fcc-editable-region--\n    }, obj.showMsgDelay);\n  });\n};\n\nconst checkUserInput = () => {\n  const inputInt = parseInt(numberInput.value);\n\n  if (!numberInput.value || isNaN(inputInt) || inputInt < 0) {\n    alert(\"Please provide a decimal number greater than or equal to 0\");\n    return;\n  }\n\n  if (inputInt === 5) {\n    showAnimation();\n    return;\n  }\n\n  result.textContent = decimalToBinary(inputInt);\n  numberInput.value = \"\";\n};\n\nconvertBtn.addEventListener(\"click\", checkUserInput);\n\nnumberInput.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"Enter\") {\n    checkUserInput();\n  }\n});"
        }
      ],
      "testCode": "You should use the `.getElementById()` method to target the element where the `id` attribute matches the value of `inputVal` for the current object.\n\n```js\nassert.match(\n  String(showAnimation),\n  /setTimeout\\s*\\([\\s\\S]+document\\.getElementById\\s*\\(.*(?:obj\\.inputVal|obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]).*\\)/\n);\n```\n\nYou should chain `.textContent` to the `.getElementById()` method.\n\n```js\nassert.match(\n  String(showAnimation),\n  /setTimeout\\s*\\([\\s\\S]+document\\.getElementById\\s*\\(.*(?:obj\\.inputVal|obj\\s*\\[\\s*('|\"|`)\\s*inputVal\\s*\\1\\s*\\]).*\\)\\s*\\.\\s*textContent/\n);\n```\n\nYou should set the `textContent` property of the targeted element equal to the `msg` property of the current object.\n\n```js\nconst oldSetTimeout = setTimeout;\nsetTimeout = (functionName, delay) => {\n  functionName();\n}\ntry {\n  showAnimation();\n  animationData.forEach((obj) => {\n    assert.equal(document.getElementById(obj.inputVal).textContent, obj.msg);\n  });\n} finally {\n  setTimeout = oldSetTimeout;\n}\n```"
    }
  ]
}